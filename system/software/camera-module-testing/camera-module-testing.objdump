
camera-module-testing.elf:     file format elf32-littlenios2
camera-module-testing.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001079c memsz 0x0001079c flags r-x
    LOAD off    0x000117bc vaddr 0x080107bc paddr 0x080122d4 align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00013dec vaddr 0x08013dec paddr 0x08013dec align 2**12
         filesz 0x00000000 memsz 0x00004f88 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010238  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c8  080103f4  080103f4  000113f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  080107bc  080122d4  000117bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00004f88  08013dec  08013dec  00013dec  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08018d74  08018d74  000132d4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000132d4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d48  00000000  00000000  000132f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000240f5  00000000  00000000  00014040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009212  00000000  00000000  00038135  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b320  00000000  00000000  00041347  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023f4  00000000  00000000  0004c668  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003594  00000000  00000000  0004ea5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016d4c  00000000  00000000  00051ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00068d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001388  00000000  00000000  00068d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d5fa  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006d5fd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006d609  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006d60a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006d60b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006d616  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006d621  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006d62c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000047  00000000  00000000  0006d637  2**0
                  CONTENTS, READONLY
 26 .jdi          0000437f  00000000  00000000  0006d67e  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b8c6  00000000  00000000  000719fd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
080103f4 l    d  .rodata	00000000 .rodata
080107bc l    d  .rwdata	00000000 .rwdata
08013dec l    d  .bss	00000000 .bss
08018d74 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../camera-module-testing_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 camera_test.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080104ea l     O .rodata	00000010 zeroes.4181
080104fa l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800306c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08004c14 l     F .text	00000008 __fp_lock
08004c1c l     F .text	00000008 __fp_unlock
08004c30 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
080107bc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08010c00 l     O .rwdata	00000020 lc_ctype_charset
08010be0 l     O .rwdata	00000020 lc_message_charset
08010c20 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0801052c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08008160 l     F .text	000000fc __sprint_r.part.0
08010660 l     O .rodata	00000010 blanks.4125
08010650 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800ac64 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800d5b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800d6dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d708 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d810 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d90c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d9f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800dbd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080122c4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800de88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800dfd8 l     F .text	00000038 alt_dev_reg
08011208 l     O .rwdata	00001060 jtag_uart_0
08012268 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800e2dc l     F .text	00000204 altera_avalon_jtag_uart_irq
0800e4e0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800eb00 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800f388 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800f8b0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800fa08 l     F .text	00000050 alt_get_errno
0800fa58 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080077a0 g     F .text	00000074 _mprec_log10
0800788c g     F .text	0000008c __any_on
08009b8c g     F .text	00000054 _isatty_r
08010538 g     O .rodata	00000028 __mprec_tinytens
0800db1c g     F .text	00000078 alt_main
08000cb8 g     F .text	000000b8 _puts_r
08018c74 g     O .bss	00000100 alt_irq
08009be0 g     F .text	0000005c _lseek_r
08000324 g     F .text	00000138 changeImageSize
080122d4 g       *ABS*	00000000 __flash_rwdata_start
0800ec70 g     F .text	0000003c alt_up_character_lcd_send_cmd
0800bfd4 g     F .text	00000084 .hidden __eqdf2
08000ad4 g     F .text	00000050 writeTx
08018d74 g       *ABS*	00000000 __alt_heap_start
08000c7c g     F .text	0000003c printf
08009e08 g     F .text	0000009c _wcrtomb_r
08008058 g     F .text	0000005c __sseek
08004f78 g     F .text	00000010 __sinit
08009c98 g     F .text	00000154 __swbuf_r
080059f0 g     F .text	0000007c _setlocale_r
08004dd0 g     F .text	00000078 __sfmoreglue
0800dbb4 g     F .text	00000020 __malloc_unlock
08006650 g     F .text	0000015c memmove
08004f60 g     F .text	00000018 _cleanup
080068d0 g     F .text	000000a8 _Balloc
0800c058 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0800ebfc g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08009b34 g     F .text	00000058 _fstat_r
08013e10 g     O .bss	00000004 errno
08007fd4 g     F .text	00000008 __seofread
08013e18 g     O .bss	00000004 alt_argv
0801a294 g       *ABS*	00000000 _gp
0800de58 g     F .text	00000030 usleep
08000258 g     F .text	000000cc reset
08000778 g     F .text	0000021c readImage
08011088 g     O .rwdata	00000180 alt_fd_list
08013dec g     O .bss	00000004 imageLengthInt
08000994 g     F .text	000000f4 stopTakingImage
0800f534 g     F .text	00000090 alt_find_dev
08006518 g     F .text	00000138 memcpy
0800ee0c g     F .text	00000050 alt_up_character_lcd_write_fd
08004c24 g     F .text	0000000c _cleanup_r
0800d3dc g     F .text	000000d0 .hidden __floatsidf
0800f990 g     F .text	00000078 alt_io_redirect
0800c138 g     F .text	000000e0 .hidden __ltdf2
080103f4 g       *ABS*	00000000 __DTOR_END__
08000d70 g     F .text	00000014 puts
08007eb8 g     F .text	00000074 __fpclassifyd
080076fc g     F .text	000000a4 __ratio
08009698 g     F .text	00000024 __vfiprintf_internal
0800e6dc g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08000c50 g     F .text	0000002c _printf_r
0800ad80 g     F .text	00000008 .hidden __udivsi3
0800d860 g     F .text	000000ac isatty
08010588 g     O .rodata	000000c8 __mprec_tens
08005a6c g     F .text	0000000c __locale_charset
08013e0c g     O .bss	00000004 __malloc_top_pad
08013df0 g     O .bss	00000002 imageLength
0801229c g     O .rwdata	00000004 __mb_cur_max
08005a9c g     F .text	0000000c _localeconv_r
08006cf8 g     F .text	0000003c __i2b
080053dc g     F .text	000004a4 __sfvwrite_r
08007f2c g     F .text	00000054 _sbrk_r
08013e54 g     O .bss	00004e20 cameraImage
08009c3c g     F .text	0000005c _read_r
080122bc g     O .rwdata	00000004 alt_max_fd
08009844 g     F .text	00000100 _fclose_r
08004be4 g     F .text	00000030 fflush
08013e08 g     O .bss	00000004 __malloc_max_sbrked_mem
0800adb8 g     F .text	0000089c .hidden __adddf3
080074a4 g     F .text	0000011c __b2d
0800a648 g     F .text	0000061c .hidden __umoddi3
0800da40 g     F .text	000000dc lseek
08012294 g     O .rwdata	00000004 _global_impure_ptr
08007918 g     F .text	000005a0 _realloc_r
08018d74 g       *ABS*	00000000 __bss_end
0800f7c0 g     F .text	000000f0 alt_iic_isr_register
0800fd44 g     F .text	00000104 alt_tick
0800a008 g     F .text	00000640 .hidden __udivdi3
08009958 g     F .text	00000184 _fputwc_r
08010560 g     O .rodata	00000028 __mprec_bigtens
08006adc g     F .text	00000104 __s2b
0800d4ac g     F .text	000000a4 .hidden __floatunsidf
0800724c g     F .text	00000060 __mcmp
08004f98 g     F .text	00000018 __fp_lock_all
0800f774 g     F .text	0000004c alt_ic_irq_enabled
0800fcac g     F .text	00000098 alt_alarm_stop
08013e20 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08011060 g     O .rwdata	00000028 alt_dev_null
0800f0a0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0800f36c g     F .text	0000001c alt_dcache_flush_all
08006be0 g     F .text	00000068 __hi0bits
0800d354 g     F .text	00000088 .hidden __fixdfsi
08000a88 g     F .text	0000004c readRx
080122d4 g       *ABS*	00000000 __ram_rwdata_end
080122b4 g     O .rwdata	00000008 alt_dev_list
0800ded8 g     F .text	00000100 write
080107bc g       *ABS*	00000000 __ram_rodata_end
0800d758 g     F .text	000000b8 fstat
0800c138 g     F .text	000000e0 .hidden __ledf2
08006fc4 g     F .text	00000140 __pow5mult
08008274 g     F .text	00001424 ___vfiprintf_internal_r
08013e00 g     O .bss	00000004 __nlocale_changed
0800ad88 g     F .text	00000008 .hidden __umodsi3
08018d74 g       *ABS*	00000000 end
0800067c g     F .text	000000fc getImageLength
0800e218 g     F .text	000000c4 altera_avalon_jtag_uart_init
080103f4 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800eb74 g     F .text	00000088 alt_avalon_timer_sc_init
0800d550 g     F .text	00000064 .hidden __clzsi2
0800e8e8 g     F .text	00000218 altera_avalon_jtag_uart_write
08004f88 g     F .text	00000004 __sfp_lock_acquire
08006430 g     F .text	000000e8 memchr
0800ed20 g     F .text	00000078 alt_up_character_lcd_write
08000e1c g     F .text	000020fc ___vfprintf_internal_r
080050ec g     F .text	000002f0 _free_r
08005a78 g     F .text	00000010 __locale_mb_cur_max
0801022c g     F .text	00000194 __call_exitprocs
08013dfc g     O .bss	00000004 __mlocale_changed
080122a0 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08013e24 g     O .bss	00000004 _alt_tick_rate
08007104 g     F .text	00000148 __lshift
08013e28 g     O .bss	00000004 _alt_nticks
0800dc24 g     F .text	00000104 read
0800e044 g     F .text	00000070 alt_sys_init
0800ef58 g     F .text	00000088 alt_up_character_lcd_shift_display
08010118 g     F .text	00000114 __register_exitproc
08006d34 g     F .text	00000290 __multiply
0800efe0 g     F .text	0000008c alt_up_character_lcd_erase_pos
0800e588 g     F .text	00000068 altera_avalon_jtag_uart_close
0800ad90 g     F .text	00000028 .hidden __mulsi3
080107bc g       *ABS*	00000000 __ram_rwdata_start
080103f4 g       *ABS*	00000000 __ram_rodata_start
08013e2c g     O .bss	00000028 __malloc_current_mallinfo
080075c0 g     F .text	0000013c __d2b
0800e0b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800ff7c g     F .text	000000d4 alt_get_fd
0800f214 g     F .text	00000158 alt_busy_sleep
08009718 g     F .text	00000054 _close_r
0801009c g     F .text	0000007c memcmp
0800e174 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08018d74 g       *ABS*	00000000 __alt_stack_base
0800e1c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002f3c g     F .text	00000130 __swsetup_r
0800b654 g     F .text	00000980 .hidden __divdf3
08004e48 g     F .text	00000118 __sfp
08007814 g     F .text	00000078 __copybits
08010c58 g     O .rwdata	00000408 __malloc_av_
08004f94 g     F .text	00000004 __sinit_lock_release
0800c218 g     F .text	0000086c .hidden __muldf3
08007f80 g     F .text	00000054 __sread
0800fe68 g     F .text	00000114 alt_find_file
0800f3d8 g     F .text	000000a4 alt_dev_llist_insert
0800db94 g     F .text	00000020 __malloc_lock
0800dda8 g     F .text	000000b0 sbrk
080049bc g     F .text	00000228 _fflush_r
0800976c g     F .text	000000d8 _calloc_r
08013dec g       *ABS*	00000000 __bss_start
080067ac g     F .text	00000124 memset
08000b24 g     F .text	0000012c main
08013e1c g     O .bss	00000004 alt_envp
08013e04 g     O .bss	00000004 __malloc_max_total_mem
0800e114 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009dec g     F .text	0000001c __swbuf
0800eed0 g     F .text	00000088 alt_up_character_lcd_shift_cursor
080080b4 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08009944 g     F .text	00000014 fclose
08003294 g     F .text	00001728 _dtoa_r
08005c88 g     F .text	000007a8 _malloc_r
08009f7c g     F .text	00000030 __ascii_wctomb
080122c0 g     O .rwdata	00000004 alt_errno
08005880 g     F .text	000000b8 _fwalk
0800acd0 g     F .text	00000054 .hidden __divsi3
0800ece0 g     F .text	00000040 alt_up_character_lcd_open_dev
08004fc8 g     F .text	00000124 _malloc_trim_r
080103f4 g       *ABS*	00000000 __CTOR_END__
0800ecac g     F .text	00000034 alt_up_character_lcd_init
080080bc g     F .text	000000a4 strcmp
080103f4 g       *ABS*	00000000 __flash_rodata_start
080103f4 g       *ABS*	00000000 __DTOR_LIST__
0800bfd4 g     F .text	00000084 .hidden __nedf2
0800e010 g     F .text	00000034 alt_irq_init
0800dd28 g     F .text	00000080 alt_release_fd
0800f06c g     F .text	00000034 alt_up_character_lcd_cursor_off
08010670 g     O .rodata	00000100 .hidden __clz_tab
08013df8 g     O .bss	00000004 _PathLocale
08010050 g     F .text	00000014 atexit
080096bc g     F .text	0000005c _write_r
08005aa8 g     F .text	0000001c setlocale
08012298 g     O .rwdata	00000004 _impure_ptr
08013e14 g     O .bss	00000004 alt_argc
0800f4d8 g     F .text	0000005c _do_dtors
08005a94 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08007444 g     F .text	00000060 __ulp
08004fb0 g     F .text	00000018 __fp_unlock_all
080122ac g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08005ac4 g     F .text	0000000c localeconv
0800f5e0 g     F .text	00000050 alt_ic_isr_register
080122d4 g       *ABS*	00000000 _edata
08018d74 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800e5f0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0800f6d0 g     F .text	000000a4 alt_ic_irq_disable
08007fdc g     F .text	0000007c __swrite
080122a4 g     O .rwdata	00000004 __malloc_trim_threshold
0800fe48 g     F .text	00000020 altera_nios2_qsys_irq_init
08005a88 g     F .text	0000000c __locale_msgcharset
08010064 g     F .text	00000038 exit
08005938 g     F .text	000000b8 _fwalk_reent
080072ac g     F .text	00000198 __mdiff
0800ad24 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004f8c g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800ed98 g     F .text	00000074 alt_up_character_lcd_string
080103c0 g     F .text	00000034 _exit
0800f0d4 g     F .text	00000140 alt_alarm_start
08005ad0 g     F .text	000001b8 __smakebuf_r
08000d84 g     F .text	00000098 strlen
0800fb4c g     F .text	00000160 open
0800c058 g     F .text	000000e0 .hidden __gedf2
080122a8 g     O .rwdata	00000004 __wctomb
0800825c g     F .text	00000018 __sprint_r
0800f5c4 g     F .text	0000001c alt_icache_flush_all
080001f8 g     F .text	00000060 Camera_Init
0800ee5c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
080122c8 g     O .rwdata	00000004 alt_priority_mask
0800f630 g     F .text	000000a0 alt_ic_irq_enable
08002f18 g     F .text	00000024 __vfprintf_internal
08009fac g     F .text	0000005c _wctomb_r
08000538 g     F .text	00000144 changeBaudRate
0800ca84 g     F .text	000008d0 .hidden __subdf3
08006c48 g     F .text	000000b0 __lo0bits
080122cc g     O .rwdata	00000008 alt_alarm_list
0800f47c g     F .text	0000005c _do_ctors
08009ea4 g     F .text	000000d8 wcrtomb
0800d604 g     F .text	000000d8 close
0800d970 g     F .text	00000080 alt_load
08009adc g     F .text	00000058 fputwc
08013df4 g     O .bss	00000004 doneFlag
00000000  w      *UND*	00000000 free
08004f90 g     F .text	00000004 __sinit_lock_acquire
0800045c g     F .text	000000dc takePicture
080069a0 g     F .text	0000013c __multadd
08006978 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200b4 	movhi	r2,2050
 8000130:	10a31d04 	addi	r2,r2,-29580
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200b4 	movhi	r2,2050
 8000148:	10a31d04 	addi	r2,r2,-29580
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6a8a514 	ori	gp,gp,41620
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	108f7b14 	ori	r2,r2,15852

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18e35d14 	ori	r3,r3,36212

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800d9700 	call	800d970 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800db1c0 	call	800db1c <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <Camera_Init>:
 */

#include <stdint.h>
#include "camera.h"

void Camera_Init(void) {
 80001f8:	defffe04 	addi	sp,sp,-8
 80001fc:	dfc00115 	stw	ra,4(sp)
 8000200:	df000015 	stw	fp,0(sp)
 8000204:	d839883a 	mov	fp,sp
	// Reset
	Camera_Control = 0x03;
 8000208:	00a10034 	movhi	r2,33792
 800020c:	10809404 	addi	r2,r2,592
 8000210:	00c000c4 	movi	r3,3
 8000214:	10c00005 	stb	r3,0(r2)

	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// transmitter interrupt disabled
	Camera_Control = 0x15;
 8000218:	00a10034 	movhi	r2,33792
 800021c:	10809404 	addi	r2,r2,592
 8000220:	00c00544 	movi	r3,21
 8000224:	10c00005 	stb	r3,0(r2)

	// set 38400 Baud
	Camera_Baud = 0x03; // 0x03 is for 38400 and 0x07 is for 9600
 8000228:	00a10034 	movhi	r2,33792
 800022c:	10809504 	addi	r2,r2,596
 8000230:	00c000c4 	movi	r3,3
 8000234:	10c00005 	stb	r3,0(r2)
	usleep(100000);
 8000238:	010000b4 	movhi	r4,2
 800023c:	2121a804 	addi	r4,r4,-31072
 8000240:	800de580 	call	800de58 <usleep>
}
 8000244:	e037883a 	mov	sp,fp
 8000248:	dfc00117 	ldw	ra,4(sp)
 800024c:	df000017 	ldw	fp,0(sp)
 8000250:	dec00204 	addi	sp,sp,8
 8000254:	f800283a 	ret

08000258 <reset>:

int reset(void) {
 8000258:	defffa04 	addi	sp,sp,-24
 800025c:	dfc00515 	stw	ra,20(sp)
 8000260:	df000415 	stw	fp,16(sp)
 8000264:	df000404 	addi	fp,sp,16
	int i;
	uint8_t firstData;
	printf("Reset the camera:\n");
 8000268:	01020074 	movhi	r4,2049
 800026c:	2100fd04 	addi	r4,r4,1012
 8000270:	8000d700 	call	8000d70 <puts>
	uint8_t send[4] = {
 8000274:	00801584 	movi	r2,86
 8000278:	e0bffd45 	stb	r2,-11(fp)
 800027c:	e03ffd85 	stb	zero,-10(fp)
 8000280:	00800984 	movi	r2,38
 8000284:	e0bffdc5 	stb	r2,-9(fp)
 8000288:	e03ffe05 	stb	zero,-8(fp)
	      0x00,
	      0x26,
	      0x00
	};
	uint8_t receive[4];
	writeTx(0x56);
 800028c:	01001584 	movi	r4,86
 8000290:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 8000294:	0009883a 	mov	r4,zero
 8000298:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x26);
 800029c:	01000984 	movi	r4,38
 80002a0:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 80002a4:	0009883a 	mov	r4,zero
 80002a8:	8000ad40 	call	8000ad4 <writeTx>
	for (i = 0; i < 4; i++) {
	    writeTx(send[i]);
	}
	*/
	while(1){
		firstData = readRx();
 80002ac:	8000a880 	call	8000a88 <readRx>
 80002b0:	e0bffd05 	stb	r2,-12(fp)
		if(firstData == 0x76){
 80002b4:	e0bffd03 	ldbu	r2,-12(fp)
 80002b8:	10801d98 	cmpnei	r2,r2,118
 80002bc:	1000121e 	bne	r2,zero,8000308 <reset+0xb0>
			receive[0] = firstData;
 80002c0:	e0bffd03 	ldbu	r2,-12(fp)
 80002c4:	e0bffe45 	stb	r2,-7(fp)
			for(i = 1; i < 4; i++){
 80002c8:	00800044 	movi	r2,1
 80002cc:	e0bffc15 	stw	r2,-16(fp)
 80002d0:	00000906 	br	80002f8 <reset+0xa0>
				receive[i] = readRx();
 80002d4:	8000a880 	call	8000a88 <readRx>
 80002d8:	1009883a 	mov	r4,r2
 80002dc:	e0fffe44 	addi	r3,fp,-7
 80002e0:	e0bffc17 	ldw	r2,-16(fp)
 80002e4:	1885883a 	add	r2,r3,r2
 80002e8:	11000005 	stb	r4,0(r2)
	*/
	while(1){
		firstData = readRx();
		if(firstData == 0x76){
			receive[0] = firstData;
			for(i = 1; i < 4; i++){
 80002ec:	e0bffc17 	ldw	r2,-16(fp)
 80002f0:	10800044 	addi	r2,r2,1
 80002f4:	e0bffc15 	stw	r2,-16(fp)
 80002f8:	e0bffc17 	ldw	r2,-16(fp)
 80002fc:	10800110 	cmplti	r2,r2,4
 8000300:	103ff41e 	bne	r2,zero,80002d4 <__alt_data_end+0xfc0002d4>
				receive[i] = readRx();
			}
			break;
 8000304:	00000106 	br	800030c <reset+0xb4>
		}
	}
 8000308:	003fe806 	br	80002ac <__alt_data_end+0xfc0002ac>
	/*
	for (i = 0; i < 4; i++){
	  printf("data: %02X\n", receive[i]);
	}
	*/
	return 1;
 800030c:	00800044 	movi	r2,1
}
 8000310:	e037883a 	mov	sp,fp
 8000314:	dfc00117 	ldw	ra,4(sp)
 8000318:	df000017 	ldw	fp,0(sp)
 800031c:	dec00204 	addi	sp,sp,8
 8000320:	f800283a 	ret

08000324 <changeImageSize>:

int changeImageSize(void){
 8000324:	defffa04 	addi	sp,sp,-24
 8000328:	dfc00515 	stw	ra,20(sp)
 800032c:	df000415 	stw	fp,16(sp)
 8000330:	df000404 	addi	fp,sp,16
	int i;
	uint8_t firstData;
	printf("Change size:\n");
 8000334:	01020074 	movhi	r4,2049
 8000338:	21010204 	addi	r4,r4,1032
 800033c:	8000d700 	call	8000d70 <puts>
	uint8_t send[5] = {
 8000340:	00801584 	movi	r2,86
 8000344:	e0bffd45 	stb	r2,-11(fp)
 8000348:	e03ffd85 	stb	zero,-10(fp)
 800034c:	00801504 	movi	r2,84
 8000350:	e0bffdc5 	stb	r2,-9(fp)
 8000354:	00800044 	movi	r2,1
 8000358:	e0bffe05 	stb	r2,-8(fp)
 800035c:	00800884 	movi	r2,34
 8000360:	e0bffe45 	stb	r2,-7(fp)
	      0x54,
	      0x01,
	      0x22
	};
	uint8_t receive[5];
	for (i = 0; i < 5; i++) {
 8000364:	e03ffc15 	stw	zero,-16(fp)
 8000368:	00000a06 	br	8000394 <changeImageSize+0x70>
	    writeTx(send[i]);
 800036c:	e0fffd44 	addi	r3,fp,-11
 8000370:	e0bffc17 	ldw	r2,-16(fp)
 8000374:	1885883a 	add	r2,r3,r2
 8000378:	10800003 	ldbu	r2,0(r2)
 800037c:	10803fcc 	andi	r2,r2,255
 8000380:	1009883a 	mov	r4,r2
 8000384:	8000ad40 	call	8000ad4 <writeTx>
	      0x54,
	      0x01,
	      0x22
	};
	uint8_t receive[5];
	for (i = 0; i < 5; i++) {
 8000388:	e0bffc17 	ldw	r2,-16(fp)
 800038c:	10800044 	addi	r2,r2,1
 8000390:	e0bffc15 	stw	r2,-16(fp)
 8000394:	e0bffc17 	ldw	r2,-16(fp)
 8000398:	10800150 	cmplti	r2,r2,5
 800039c:	103ff31e 	bne	r2,zero,800036c <__alt_data_end+0xfc00036c>
	    writeTx(send[i]);
	}
	
	while(1){
		firstData = readRx();
 80003a0:	8000a880 	call	8000a88 <readRx>
 80003a4:	e0bffd05 	stb	r2,-12(fp)
		if(firstData == 0x76){
 80003a8:	e0bffd03 	ldbu	r2,-12(fp)
 80003ac:	10801d98 	cmpnei	r2,r2,118
 80003b0:	1000141e 	bne	r2,zero,8000404 <changeImageSize+0xe0>
			receive[0] = firstData;
 80003b4:	e0bffd03 	ldbu	r2,-12(fp)
 80003b8:	e0bffe85 	stb	r2,-6(fp)
			for(i = 1; i < 5; i++){
 80003bc:	00800044 	movi	r2,1
 80003c0:	e0bffc15 	stw	r2,-16(fp)
 80003c4:	00000906 	br	80003ec <changeImageSize+0xc8>
				receive[i] = readRx();
 80003c8:	8000a880 	call	8000a88 <readRx>
 80003cc:	1009883a 	mov	r4,r2
 80003d0:	e0fffe84 	addi	r3,fp,-6
 80003d4:	e0bffc17 	ldw	r2,-16(fp)
 80003d8:	1885883a 	add	r2,r3,r2
 80003dc:	11000005 	stb	r4,0(r2)
	
	while(1){
		firstData = readRx();
		if(firstData == 0x76){
			receive[0] = firstData;
			for(i = 1; i < 5; i++){
 80003e0:	e0bffc17 	ldw	r2,-16(fp)
 80003e4:	10800044 	addi	r2,r2,1
 80003e8:	e0bffc15 	stw	r2,-16(fp)
 80003ec:	e0bffc17 	ldw	r2,-16(fp)
 80003f0:	10800150 	cmplti	r2,r2,5
 80003f4:	103ff41e 	bne	r2,zero,80003c8 <__alt_data_end+0xfc0003c8>
				receive[i] = readRx();
			}
			break;
 80003f8:	0001883a 	nop
		}
	}
	for (i = 0; i < 5; i++){
 80003fc:	e03ffc15 	stw	zero,-16(fp)
 8000400:	00000d06 	br	8000438 <changeImageSize+0x114>
			for(i = 1; i < 5; i++){
				receive[i] = readRx();
			}
			break;
		}
	}
 8000404:	003fe606 	br	80003a0 <__alt_data_end+0xfc0003a0>
	for (i = 0; i < 5; i++){
	  printf("data: %02X\n", receive[i]);
 8000408:	e0fffe84 	addi	r3,fp,-6
 800040c:	e0bffc17 	ldw	r2,-16(fp)
 8000410:	1885883a 	add	r2,r3,r2
 8000414:	10800003 	ldbu	r2,0(r2)
 8000418:	10803fcc 	andi	r2,r2,255
 800041c:	01020074 	movhi	r4,2049
 8000420:	21010604 	addi	r4,r4,1048
 8000424:	100b883a 	mov	r5,r2
 8000428:	8000c7c0 	call	8000c7c <printf>
				receive[i] = readRx();
			}
			break;
		}
	}
	for (i = 0; i < 5; i++){
 800042c:	e0bffc17 	ldw	r2,-16(fp)
 8000430:	10800044 	addi	r2,r2,1
 8000434:	e0bffc15 	stw	r2,-16(fp)
 8000438:	e0bffc17 	ldw	r2,-16(fp)
 800043c:	10800150 	cmplti	r2,r2,5
 8000440:	103ff11e 	bne	r2,zero,8000408 <__alt_data_end+0xfc000408>
	  printf("data: %02X\n", receive[i]);
	}
	
	return 1;
 8000444:	00800044 	movi	r2,1
}
 8000448:	e037883a 	mov	sp,fp
 800044c:	dfc00117 	ldw	ra,4(sp)
 8000450:	df000017 	ldw	fp,0(sp)
 8000454:	dec00204 	addi	sp,sp,8
 8000458:	f800283a 	ret

0800045c <takePicture>:

int takePicture(void){
 800045c:	defffa04 	addi	sp,sp,-24
 8000460:	dfc00515 	stw	ra,20(sp)
 8000464:	df000415 	stw	fp,16(sp)
 8000468:	df000404 	addi	fp,sp,16
	int i;
	uint8_t firstData;
	printf("Take picture now:\n");
 800046c:	01020074 	movhi	r4,2049
 8000470:	21010904 	addi	r4,r4,1060
 8000474:	8000d700 	call	8000d70 <puts>
	uint8_t send[5] = {
 8000478:	00801584 	movi	r2,86
 800047c:	e0bffd45 	stb	r2,-11(fp)
 8000480:	e03ffd85 	stb	zero,-10(fp)
 8000484:	00800d84 	movi	r2,54
 8000488:	e0bffdc5 	stb	r2,-9(fp)
 800048c:	00800044 	movi	r2,1
 8000490:	e0bffe05 	stb	r2,-8(fp)
 8000494:	e03ffe45 	stb	zero,-7(fp)
	      0x01,
	      0x00
	};

	uint8_t receive[5];
	writeTx(0x56);
 8000498:	01001584 	movi	r4,86
 800049c:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 80004a0:	0009883a 	mov	r4,zero
 80004a4:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x36);
 80004a8:	01000d84 	movi	r4,54
 80004ac:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x01);
 80004b0:	01000044 	movi	r4,1
 80004b4:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 80004b8:	0009883a 	mov	r4,zero
 80004bc:	8000ad40 	call	8000ad4 <writeTx>
	for (i = 0; i < 5; i++) {
	      writeTx(send[i]);
	}
	*/
	while(1){
		firstData = readRx();
 80004c0:	8000a880 	call	8000a88 <readRx>
 80004c4:	e0bffd05 	stb	r2,-12(fp)
		if(firstData == 0x76){
 80004c8:	e0bffd03 	ldbu	r2,-12(fp)
 80004cc:	10801d98 	cmpnei	r2,r2,118
 80004d0:	1000121e 	bne	r2,zero,800051c <takePicture+0xc0>
			receive[0] = firstData;
 80004d4:	e0bffd03 	ldbu	r2,-12(fp)
 80004d8:	e0bffe85 	stb	r2,-6(fp)
			for(i = 1; i < 5; i++){
 80004dc:	00800044 	movi	r2,1
 80004e0:	e0bffc15 	stw	r2,-16(fp)
 80004e4:	00000906 	br	800050c <takePicture+0xb0>
				receive[i] = readRx();
 80004e8:	8000a880 	call	8000a88 <readRx>
 80004ec:	1009883a 	mov	r4,r2
 80004f0:	e0fffe84 	addi	r3,fp,-6
 80004f4:	e0bffc17 	ldw	r2,-16(fp)
 80004f8:	1885883a 	add	r2,r3,r2
 80004fc:	11000005 	stb	r4,0(r2)
	*/
	while(1){
		firstData = readRx();
		if(firstData == 0x76){
			receive[0] = firstData;
			for(i = 1; i < 5; i++){
 8000500:	e0bffc17 	ldw	r2,-16(fp)
 8000504:	10800044 	addi	r2,r2,1
 8000508:	e0bffc15 	stw	r2,-16(fp)
 800050c:	e0bffc17 	ldw	r2,-16(fp)
 8000510:	10800150 	cmplti	r2,r2,5
 8000514:	103ff41e 	bne	r2,zero,80004e8 <__alt_data_end+0xfc0004e8>
				receive[i] = readRx();
			}
			break;
 8000518:	00000106 	br	8000520 <takePicture+0xc4>
		}
	}
 800051c:	003fe806 	br	80004c0 <__alt_data_end+0xfc0004c0>
	/*
	for (i = 0; i < 5; i++){
	  printf("data: %02X\n", receive[i]);
	}
	*/
	return 1;
 8000520:	00800044 	movi	r2,1
}
 8000524:	e037883a 	mov	sp,fp
 8000528:	dfc00117 	ldw	ra,4(sp)
 800052c:	df000017 	ldw	fp,0(sp)
 8000530:	dec00204 	addi	sp,sp,8
 8000534:	f800283a 	ret

08000538 <changeBaudRate>:

int changeBaudRate(void){
 8000538:	defff904 	addi	sp,sp,-28
 800053c:	dfc00615 	stw	ra,24(sp)
 8000540:	df000515 	stw	fp,20(sp)
 8000544:	df000504 	addi	fp,sp,20
	int i;
	uint8_t firstData;
	printf("Change baud rate: \n");
 8000548:	01020074 	movhi	r4,2049
 800054c:	21010e04 	addi	r4,r4,1080
 8000550:	8000d700 	call	8000d70 <puts>
	uint8_t send[7] = {
 8000554:	00801584 	movi	r2,86
 8000558:	e0bffc45 	stb	r2,-15(fp)
 800055c:	e03ffc85 	stb	zero,-14(fp)
 8000560:	00800904 	movi	r2,36
 8000564:	e0bffcc5 	stb	r2,-13(fp)
 8000568:	008000c4 	movi	r2,3
 800056c:	e0bffd05 	stb	r2,-12(fp)
 8000570:	00800044 	movi	r2,1
 8000574:	e0bffd45 	stb	r2,-11(fp)
 8000578:	00800a84 	movi	r2,42
 800057c:	e0bffd85 	stb	r2,-10(fp)
 8000580:	00bffc84 	movi	r2,-14
 8000584:	e0bffdc5 	stb	r2,-9(fp)
	      0xF2
	};

	uint8_t receive[5];

	for (i = 0; i < 7; i++) {
 8000588:	e03ffb15 	stw	zero,-20(fp)
 800058c:	00000a06 	br	80005b8 <changeBaudRate+0x80>
	      writeTx(send[i]);
 8000590:	e0fffc44 	addi	r3,fp,-15
 8000594:	e0bffb17 	ldw	r2,-20(fp)
 8000598:	1885883a 	add	r2,r3,r2
 800059c:	10800003 	ldbu	r2,0(r2)
 80005a0:	10803fcc 	andi	r2,r2,255
 80005a4:	1009883a 	mov	r4,r2
 80005a8:	8000ad40 	call	8000ad4 <writeTx>
	      0xF2
	};

	uint8_t receive[5];

	for (i = 0; i < 7; i++) {
 80005ac:	e0bffb17 	ldw	r2,-20(fp)
 80005b0:	10800044 	addi	r2,r2,1
 80005b4:	e0bffb15 	stw	r2,-20(fp)
 80005b8:	e0bffb17 	ldw	r2,-20(fp)
 80005bc:	108001d0 	cmplti	r2,r2,7
 80005c0:	103ff31e 	bne	r2,zero,8000590 <__alt_data_end+0xfc000590>
	      writeTx(send[i]);
	}

	while(1){
		firstData = readRx();
 80005c4:	8000a880 	call	8000a88 <readRx>
 80005c8:	e0bffc05 	stb	r2,-16(fp)
		if(firstData == 0x76){
 80005cc:	e0bffc03 	ldbu	r2,-16(fp)
 80005d0:	10801d98 	cmpnei	r2,r2,118
 80005d4:	1000141e 	bne	r2,zero,8000628 <changeBaudRate+0xf0>
			receive[0] = firstData;
 80005d8:	e0bffc03 	ldbu	r2,-16(fp)
 80005dc:	e0bffe05 	stb	r2,-8(fp)
			for(i = 1; i < 5; i++){
 80005e0:	00800044 	movi	r2,1
 80005e4:	e0bffb15 	stw	r2,-20(fp)
 80005e8:	00000906 	br	8000610 <changeBaudRate+0xd8>
				receive[i] = readRx();
 80005ec:	8000a880 	call	8000a88 <readRx>
 80005f0:	1009883a 	mov	r4,r2
 80005f4:	e0fffe04 	addi	r3,fp,-8
 80005f8:	e0bffb17 	ldw	r2,-20(fp)
 80005fc:	1885883a 	add	r2,r3,r2
 8000600:	11000005 	stb	r4,0(r2)

	while(1){
		firstData = readRx();
		if(firstData == 0x76){
			receive[0] = firstData;
			for(i = 1; i < 5; i++){
 8000604:	e0bffb17 	ldw	r2,-20(fp)
 8000608:	10800044 	addi	r2,r2,1
 800060c:	e0bffb15 	stw	r2,-20(fp)
 8000610:	e0bffb17 	ldw	r2,-20(fp)
 8000614:	10800150 	cmplti	r2,r2,5
 8000618:	103ff41e 	bne	r2,zero,80005ec <__alt_data_end+0xfc0005ec>
				receive[i] = readRx();
			}
			break;
 800061c:	0001883a 	nop
		}
	}
	
	for (i = 0; i < 5; i++){
 8000620:	e03ffb15 	stw	zero,-20(fp)
 8000624:	00000d06 	br	800065c <changeBaudRate+0x124>
			for(i = 1; i < 5; i++){
				receive[i] = readRx();
			}
			break;
		}
	}
 8000628:	003fe606 	br	80005c4 <__alt_data_end+0xfc0005c4>
	
	for (i = 0; i < 5; i++){
	  printf("data: %02X\n", receive[i]);
 800062c:	e0fffe04 	addi	r3,fp,-8
 8000630:	e0bffb17 	ldw	r2,-20(fp)
 8000634:	1885883a 	add	r2,r3,r2
 8000638:	10800003 	ldbu	r2,0(r2)
 800063c:	10803fcc 	andi	r2,r2,255
 8000640:	01020074 	movhi	r4,2049
 8000644:	21010604 	addi	r4,r4,1048
 8000648:	100b883a 	mov	r5,r2
 800064c:	8000c7c0 	call	8000c7c <printf>
			}
			break;
		}
	}
	
	for (i = 0; i < 5; i++){
 8000650:	e0bffb17 	ldw	r2,-20(fp)
 8000654:	10800044 	addi	r2,r2,1
 8000658:	e0bffb15 	stw	r2,-20(fp)
 800065c:	e0bffb17 	ldw	r2,-20(fp)
 8000660:	10800150 	cmplti	r2,r2,5
 8000664:	103ff11e 	bne	r2,zero,800062c <__alt_data_end+0xfc00062c>
	  printf("data: %02X\n", receive[i]);
	}
	
}
 8000668:	e037883a 	mov	sp,fp
 800066c:	dfc00117 	ldw	ra,4(sp)
 8000670:	df000017 	ldw	fp,0(sp)
 8000674:	dec00204 	addi	sp,sp,8
 8000678:	f800283a 	ret

0800067c <getImageLength>:

int getImageLength(void){
 800067c:	defff904 	addi	sp,sp,-28
 8000680:	dfc00615 	stw	ra,24(sp)
 8000684:	df000515 	stw	fp,20(sp)
 8000688:	df000504 	addi	fp,sp,20
	int i;
	uint8_t firstData, data;
	printf("Get length: \n");
 800068c:	01020074 	movhi	r4,2049
 8000690:	21011304 	addi	r4,r4,1100
 8000694:	8000d700 	call	8000d70 <puts>
	//flushOut();
	uint8_t send[5] = {
 8000698:	00801584 	movi	r2,86
 800069c:	e0bffc85 	stb	r2,-14(fp)
 80006a0:	e03ffcc5 	stb	zero,-13(fp)
 80006a4:	00800d04 	movi	r2,52
 80006a8:	e0bffd05 	stb	r2,-12(fp)
 80006ac:	00800044 	movi	r2,1
 80006b0:	e0bffd45 	stb	r2,-11(fp)
 80006b4:	e03ffd85 	stb	zero,-10(fp)
	      0x00
	};

	uint8_t receive[9];

	writeTx(0x56);
 80006b8:	01001584 	movi	r4,86
 80006bc:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 80006c0:	0009883a 	mov	r4,zero
 80006c4:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x34);
 80006c8:	01000d04 	movi	r4,52
 80006cc:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x01);
 80006d0:	01000044 	movi	r4,1
 80006d4:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 80006d8:	0009883a 	mov	r4,zero
 80006dc:	8000ad40 	call	8000ad4 <writeTx>
	for (i = 0; i < 5; i++) {
	      writeTx(send[i]);
	}
	*/
	while(1){
		firstData = readRx();
 80006e0:	8000a880 	call	8000a88 <readRx>
 80006e4:	e0bffc05 	stb	r2,-16(fp)
		if(firstData == 0x76){
 80006e8:	e0bffc03 	ldbu	r2,-16(fp)
 80006ec:	10801d98 	cmpnei	r2,r2,118
 80006f0:	1000151e 	bne	r2,zero,8000748 <getImageLength+0xcc>
			receive[0] = firstData;
 80006f4:	e0bffc03 	ldbu	r2,-16(fp)
 80006f8:	e0bffdc5 	stb	r2,-9(fp)
			for(i = 1; i < 9; i++){
 80006fc:	00800044 	movi	r2,1
 8000700:	e0bffb15 	stw	r2,-20(fp)
 8000704:	00000c06 	br	8000738 <getImageLength+0xbc>
				data = readRx();
 8000708:	8000a880 	call	8000a88 <readRx>
 800070c:	e0bffc45 	stb	r2,-15(fp)
				usleep(1);
 8000710:	01000044 	movi	r4,1
 8000714:	800de580 	call	800de58 <usleep>
				receive[i] = data;
 8000718:	e0fffdc4 	addi	r3,fp,-9
 800071c:	e0bffb17 	ldw	r2,-20(fp)
 8000720:	1885883a 	add	r2,r3,r2
 8000724:	e0fffc43 	ldbu	r3,-15(fp)
 8000728:	10c00005 	stb	r3,0(r2)
	*/
	while(1){
		firstData = readRx();
		if(firstData == 0x76){
			receive[0] = firstData;
			for(i = 1; i < 9; i++){
 800072c:	e0bffb17 	ldw	r2,-20(fp)
 8000730:	10800044 	addi	r2,r2,1
 8000734:	e0bffb15 	stw	r2,-20(fp)
 8000738:	e0bffb17 	ldw	r2,-20(fp)
 800073c:	10800250 	cmplti	r2,r2,9
 8000740:	103ff11e 	bne	r2,zero,8000708 <__alt_data_end+0xfc000708>
				data = readRx();
				usleep(1);
				receive[i] = data;
			}
			break;
 8000744:	00000106 	br	800074c <getImageLength+0xd0>
		}
	}
 8000748:	003fe506 	br	80006e0 <__alt_data_end+0xfc0006e0>
	/*
	for (i = 0; i < 9; i++){
	  printf("data: %02X\n", receive[i]);
	}
	*/
	imageLength[0] = receive[7];
 800074c:	e0bfff83 	ldbu	r2,-2(fp)
 8000750:	d0a6d705 	stb	r2,-25764(gp)
	imageLength[1] = receive[8];
 8000754:	e0ffffc3 	ldbu	r3,-1(fp)
 8000758:	d0a6d744 	addi	r2,gp,-25763
 800075c:	10c00005 	stb	r3,0(r2)
	//printf("Image length: %02X %02X\n", imageLength[0], imageLength[1]);
	
	return 1;
 8000760:	00800044 	movi	r2,1
}
 8000764:	e037883a 	mov	sp,fp
 8000768:	dfc00117 	ldw	ra,4(sp)
 800076c:	df000017 	ldw	fp,0(sp)
 8000770:	dec00204 	addi	sp,sp,8
 8000774:	f800283a 	ret

08000778 <readImage>:

int readImage(void){
 8000778:	deec6e04 	addi	sp,sp,-20040
 800077c:	dfd39115 	stw	ra,20036(sp)
 8000780:	df139015 	stw	fp,20032(sp)
 8000784:	df139004 	addi	fp,sp,20032
	int i;
	uint8_t firstData, data;

	uint8_t send[16] = {
 8000788:	00801584 	movi	r2,86
 800078c:	e0ac7405 	stb	r2,-20016(fp)
 8000790:	e02c7445 	stb	zero,-20015(fp)
 8000794:	00800c84 	movi	r2,50
 8000798:	e0ac7485 	stb	r2,-20014(fp)
 800079c:	00800304 	movi	r2,12
 80007a0:	e0ac74c5 	stb	r2,-20013(fp)
 80007a4:	e02c7505 	stb	zero,-20012(fp)
 80007a8:	00800284 	movi	r2,10
 80007ac:	e0ac7545 	stb	r2,-20011(fp)
 80007b0:	e02c7585 	stb	zero,-20010(fp)
 80007b4:	e02c75c5 	stb	zero,-20009(fp)
 80007b8:	e02c7605 	stb	zero,-20008(fp)
 80007bc:	e02c7645 	stb	zero,-20007(fp)
 80007c0:	e02c7685 	stb	zero,-20006(fp)
 80007c4:	e02c76c5 	stb	zero,-20005(fp)
	      0x00,
	      0x00, // MH
	      0x00, // ML
	      0x00,
	      0x00,
	      imageLength[0], // MSB length
 80007c8:	d0a6d703 	ldbu	r2,-25764(gp)

int readImage(void){
	int i;
	uint8_t firstData, data;

	uint8_t send[16] = {
 80007cc:	e0ac7705 	stb	r2,-20004(fp)
	      0x00, // MH
	      0x00, // ML
	      0x00,
	      0x00,
	      imageLength[0], // MSB length
	      imageLength[1], // LSB length
 80007d0:	d0a6d744 	addi	r2,gp,-25763
 80007d4:	10800003 	ldbu	r2,0(r2)

int readImage(void){
	int i;
	uint8_t firstData, data;

	uint8_t send[16] = {
 80007d8:	e0ac7745 	stb	r2,-20003(fp)
 80007dc:	e02c7785 	stb	zero,-20002(fp)
 80007e0:	00800284 	movi	r2,10
 80007e4:	e0ac77c5 	stb	r2,-20001(fp)
	      0x00, // Spacing 0x0b
	      0x0A  // Spacing 0xba
	};
	
	uint8_t receive[20000];
	writeTx(0x56);
 80007e8:	01001584 	movi	r4,86
 80007ec:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 80007f0:	0009883a 	mov	r4,zero
 80007f4:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x32);
 80007f8:	01000c84 	movi	r4,50
 80007fc:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x0C);
 8000800:	01000304 	movi	r4,12
 8000804:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 8000808:	0009883a 	mov	r4,zero
 800080c:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x0A);
 8000810:	01000284 	movi	r4,10
 8000814:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 8000818:	0009883a 	mov	r4,zero
 800081c:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 8000820:	0009883a 	mov	r4,zero
 8000824:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 8000828:	0009883a 	mov	r4,zero
 800082c:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 8000830:	0009883a 	mov	r4,zero
 8000834:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 8000838:	0009883a 	mov	r4,zero
 800083c:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 8000840:	0009883a 	mov	r4,zero
 8000844:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(imageLength[0]);
 8000848:	d0a6d703 	ldbu	r2,-25764(gp)
 800084c:	10803fcc 	andi	r2,r2,255
 8000850:	1009883a 	mov	r4,r2
 8000854:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(imageLength[1]);
 8000858:	d0a6d744 	addi	r2,gp,-25763
 800085c:	10800003 	ldbu	r2,0(r2)
 8000860:	10803fcc 	andi	r2,r2,255
 8000864:	1009883a 	mov	r4,r2
 8000868:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x00);
 800086c:	0009883a 	mov	r4,zero
 8000870:	8000ad40 	call	8000ad4 <writeTx>
	writeTx(0x0A);
 8000874:	01000284 	movi	r4,10
 8000878:	8000ad40 	call	8000ad4 <writeTx>
	/*
	for (i = 0; i < 16; i++) {
	      writeTx(send[i]);
	}
	*/
	int flag = 0;
 800087c:	e02c7115 	stw	zero,-20028(fp)
	int count;
	i = 0;
 8000880:	e02c7015 	stw	zero,-20032(fp)
	imageLengthInt = 0;
 8000884:	d026d615 	stw	zero,-25768(gp)
	while(1){
		data = readRx();
 8000888:	8000a880 	call	8000a88 <readRx>
 800088c:	e0ac7205 	stb	r2,-20024(fp)
		usleep(1);
 8000890:	01000044 	movi	r4,1
 8000894:	800de580 	call	800de58 <usleep>
		receive[0] = data;
 8000898:	e0ac7203 	ldbu	r2,-20024(fp)
 800089c:	e0ac7805 	stb	r2,-20000(fp)
		i = 1;
 80008a0:	00800044 	movi	r2,1
 80008a4:	e0ac7015 	stw	r2,-20032(fp)
		while(1){
			data = readRx();
 80008a8:	8000a880 	call	8000a88 <readRx>
 80008ac:	e0ac7205 	stb	r2,-20024(fp)
			usleep(1);
 80008b0:	01000044 	movi	r4,1
 80008b4:	800de580 	call	800de58 <usleep>
			receive[i] = data;
 80008b8:	e0ec7804 	addi	r3,fp,-20000
 80008bc:	e0ac7017 	ldw	r2,-20032(fp)
 80008c0:	1885883a 	add	r2,r3,r2
 80008c4:	e0ec7203 	ldbu	r3,-20024(fp)
 80008c8:	10c00005 	stb	r3,0(r2)
			if(receive[i-1] == 0xFF && receive[i] == 0xD9){
 80008cc:	e0ac7017 	ldw	r2,-20032(fp)
 80008d0:	10bfffc4 	addi	r2,r2,-1
 80008d4:	e0ec7804 	addi	r3,fp,-20000
 80008d8:	1885883a 	add	r2,r3,r2
 80008dc:	10800003 	ldbu	r2,0(r2)
 80008e0:	10803fcc 	andi	r2,r2,255
 80008e4:	10803fd8 	cmpnei	r2,r2,255
 80008e8:	10000d1e 	bne	r2,zero,8000920 <readImage+0x1a8>
 80008ec:	e0ec7804 	addi	r3,fp,-20000
 80008f0:	e0ac7017 	ldw	r2,-20032(fp)
 80008f4:	1885883a 	add	r2,r3,r2
 80008f8:	10800003 	ldbu	r2,0(r2)
 80008fc:	10803fcc 	andi	r2,r2,255
 8000900:	10803658 	cmpnei	r2,r2,217
 8000904:	1000061e 	bne	r2,zero,8000920 <readImage+0x1a8>
				}
				else{
					flag = 1;
				}
				*/
				count = i;
 8000908:	e0ac7017 	ldw	r2,-20032(fp)
 800090c:	e0ac7315 	stw	r2,-20020(fp)
				break;
 8000910:	0001883a 	nop
			}
			i++;
		}
		break;
 8000914:	0001883a 	nop
	}
	/*
	for(i = 0; i <= imageLengthInt; i++){
		cameraImage[i] = receive[i];
	}*/
	for (i = 0; i <= count; i++){
 8000918:	e02c7015 	stw	zero,-20032(fp)
 800091c:	00001006 	br	8000960 <readImage+0x1e8>
				}
				*/
				count = i;
				break;
			}
			i++;
 8000920:	e0ac7017 	ldw	r2,-20032(fp)
 8000924:	10800044 	addi	r2,r2,1
 8000928:	e0ac7015 	stw	r2,-20032(fp)
		}
 800092c:	003fde06 	br	80008a8 <__alt_data_end+0xfc0008a8>
	for (i = 0; i <= count; i++){
		/*
		if (receive[i] < 0x10){
			printf("0");
		}*/
    	printf("%02X", (uint8_t) receive[i]);
 8000930:	e0ec7804 	addi	r3,fp,-20000
 8000934:	e0ac7017 	ldw	r2,-20032(fp)
 8000938:	1885883a 	add	r2,r3,r2
 800093c:	10800003 	ldbu	r2,0(r2)
 8000940:	10803fcc 	andi	r2,r2,255
 8000944:	01020074 	movhi	r4,2049
 8000948:	21011704 	addi	r4,r4,1116
 800094c:	100b883a 	mov	r5,r2
 8000950:	8000c7c0 	call	8000c7c <printf>
	}
	/*
	for(i = 0; i <= imageLengthInt; i++){
		cameraImage[i] = receive[i];
	}*/
	for (i = 0; i <= count; i++){
 8000954:	e0ac7017 	ldw	r2,-20032(fp)
 8000958:	10800044 	addi	r2,r2,1
 800095c:	e0ac7015 	stw	r2,-20032(fp)
 8000960:	e0ac7017 	ldw	r2,-20032(fp)
 8000964:	e0ec7317 	ldw	r3,-20020(fp)
 8000968:	18bff10e 	bge	r3,r2,8000930 <__alt_data_end+0xfc000930>
		}*/
    	printf("%02X", (uint8_t) receive[i]);
	}
	

	printf("\nDONE at %d\n", count);
 800096c:	01020074 	movhi	r4,2049
 8000970:	21011904 	addi	r4,r4,1124
 8000974:	e16c7317 	ldw	r5,-20020(fp)
 8000978:	8000c7c0 	call	8000c7c <printf>
	return 1;
 800097c:	00800044 	movi	r2,1
}
 8000980:	e037883a 	mov	sp,fp
 8000984:	dfc00117 	ldw	ra,4(sp)
 8000988:	df000017 	ldw	fp,0(sp)
 800098c:	dec00204 	addi	sp,sp,8
 8000990:	f800283a 	ret

08000994 <stopTakingImage>:

int stopTakingImage(void){
 8000994:	defffa04 	addi	sp,sp,-24
 8000998:	dfc00515 	stw	ra,20(sp)
 800099c:	df000415 	stw	fp,16(sp)
 80009a0:	df000404 	addi	fp,sp,16
	int i;
	uint8_t firstData;
	printf("\nStop taking image: \n");
 80009a4:	01020074 	movhi	r4,2049
 80009a8:	21011d04 	addi	r4,r4,1140
 80009ac:	8000d700 	call	8000d70 <puts>
	uint8_t send[5] = {
 80009b0:	00801584 	movi	r2,86
 80009b4:	e0bffd45 	stb	r2,-11(fp)
 80009b8:	e03ffd85 	stb	zero,-10(fp)
 80009bc:	00800d84 	movi	r2,54
 80009c0:	e0bffdc5 	stb	r2,-9(fp)
 80009c4:	00800044 	movi	r2,1
 80009c8:	e0bffe05 	stb	r2,-8(fp)
 80009cc:	00800084 	movi	r2,2
 80009d0:	e0bffe45 	stb	r2,-7(fp)
	      0x02
	};

	uint8_t receive[5];

	for (i = 0; i < 5; i++) {
 80009d4:	e03ffc15 	stw	zero,-16(fp)
 80009d8:	00000a06 	br	8000a04 <stopTakingImage+0x70>
	      writeTx(send[i]);
 80009dc:	e0fffd44 	addi	r3,fp,-11
 80009e0:	e0bffc17 	ldw	r2,-16(fp)
 80009e4:	1885883a 	add	r2,r3,r2
 80009e8:	10800003 	ldbu	r2,0(r2)
 80009ec:	10803fcc 	andi	r2,r2,255
 80009f0:	1009883a 	mov	r4,r2
 80009f4:	8000ad40 	call	8000ad4 <writeTx>
	      0x02
	};

	uint8_t receive[5];

	for (i = 0; i < 5; i++) {
 80009f8:	e0bffc17 	ldw	r2,-16(fp)
 80009fc:	10800044 	addi	r2,r2,1
 8000a00:	e0bffc15 	stw	r2,-16(fp)
 8000a04:	e0bffc17 	ldw	r2,-16(fp)
 8000a08:	10800150 	cmplti	r2,r2,5
 8000a0c:	103ff31e 	bne	r2,zero,80009dc <__alt_data_end+0xfc0009dc>
	      writeTx(send[i]);
	}

	while(1){
		firstData = readRx();
 8000a10:	8000a880 	call	8000a88 <readRx>
 8000a14:	e0bffd05 	stb	r2,-12(fp)
		if(firstData == 0x76){
 8000a18:	e0bffd03 	ldbu	r2,-12(fp)
 8000a1c:	10801d98 	cmpnei	r2,r2,118
 8000a20:	1000121e 	bne	r2,zero,8000a6c <stopTakingImage+0xd8>
			receive[0] = firstData;
 8000a24:	e0bffd03 	ldbu	r2,-12(fp)
 8000a28:	e0bffe85 	stb	r2,-6(fp)
			for(i = 1; i < 5; i++){
 8000a2c:	00800044 	movi	r2,1
 8000a30:	e0bffc15 	stw	r2,-16(fp)
 8000a34:	00000906 	br	8000a5c <stopTakingImage+0xc8>
				receive[i] = readRx();
 8000a38:	8000a880 	call	8000a88 <readRx>
 8000a3c:	1009883a 	mov	r4,r2
 8000a40:	e0fffe84 	addi	r3,fp,-6
 8000a44:	e0bffc17 	ldw	r2,-16(fp)
 8000a48:	1885883a 	add	r2,r3,r2
 8000a4c:	11000005 	stb	r4,0(r2)

	while(1){
		firstData = readRx();
		if(firstData == 0x76){
			receive[0] = firstData;
			for(i = 1; i < 5; i++){
 8000a50:	e0bffc17 	ldw	r2,-16(fp)
 8000a54:	10800044 	addi	r2,r2,1
 8000a58:	e0bffc15 	stw	r2,-16(fp)
 8000a5c:	e0bffc17 	ldw	r2,-16(fp)
 8000a60:	10800150 	cmplti	r2,r2,5
 8000a64:	103ff41e 	bne	r2,zero,8000a38 <__alt_data_end+0xfc000a38>
				receive[i] = readRx();
			}
			break;
 8000a68:	00000106 	br	8000a70 <stopTakingImage+0xdc>
		}
	}
 8000a6c:	003fe806 	br	8000a10 <__alt_data_end+0xfc000a10>
	/*
	for (i = 0; i < 5; i++){
	  	printf("data: %x\n", receive[i]);
	}
	*/
	return 1;
 8000a70:	00800044 	movi	r2,1
}
 8000a74:	e037883a 	mov	sp,fp
 8000a78:	dfc00117 	ldw	ra,4(sp)
 8000a7c:	df000017 	ldw	fp,0(sp)
 8000a80:	dec00204 	addi	sp,sp,8
 8000a84:	f800283a 	ret

08000a88 <readRx>:

uint8_t readRx(void) {
 8000a88:	defffe04 	addi	sp,sp,-8
 8000a8c:	df000115 	stw	fp,4(sp)
 8000a90:	df000104 	addi	fp,sp,4
	// poll Rx bit in 6850 status register. Wait for it to become '1' or we've timed out
	while ((Camera_Status & 0x01) != 0x01) {}
 8000a94:	0001883a 	nop
 8000a98:	00a10034 	movhi	r2,33792
 8000a9c:	10809404 	addi	r2,r2,592
 8000aa0:	10800003 	ldbu	r2,0(r2)
 8000aa4:	10803fcc 	andi	r2,r2,255
 8000aa8:	1080004c 	andi	r2,r2,1
 8000aac:	103ffa26 	beq	r2,zero,8000a98 <__alt_data_end+0xfc000a98>
	uint8_t val = Camera_RxData;
 8000ab0:	00a10034 	movhi	r2,33792
 8000ab4:	10809484 	addi	r2,r2,594
 8000ab8:	10800003 	ldbu	r2,0(r2)
 8000abc:	e0bfff05 	stb	r2,-4(fp)
	return val;
 8000ac0:	e0bfff03 	ldbu	r2,-4(fp)
}
 8000ac4:	e037883a 	mov	sp,fp
 8000ac8:	df000017 	ldw	fp,0(sp)
 8000acc:	dec00104 	addi	sp,sp,4
 8000ad0:	f800283a 	ret

08000ad4 <writeTx>:

void writeTx(uint8_t val) {
 8000ad4:	defffe04 	addi	sp,sp,-8
 8000ad8:	df000115 	stw	fp,4(sp)
 8000adc:	df000104 	addi	fp,sp,4
 8000ae0:	2005883a 	mov	r2,r4
 8000ae4:	e0bfff05 	stb	r2,-4(fp)
	// poll tx bit in 6850 status register. Wait for it to become '2'
	while ((Camera_Status & 0x02) != 0x02) {}
 8000ae8:	0001883a 	nop
 8000aec:	00a10034 	movhi	r2,33792
 8000af0:	10809404 	addi	r2,r2,592
 8000af4:	10800003 	ldbu	r2,0(r2)
 8000af8:	10803fcc 	andi	r2,r2,255
 8000afc:	1080008c 	andi	r2,r2,2
 8000b00:	103ffa26 	beq	r2,zero,8000aec <__alt_data_end+0xfc000aec>
	Camera_TxData = val;
 8000b04:	00a10034 	movhi	r2,33792
 8000b08:	10809484 	addi	r2,r2,594
 8000b0c:	e0ffff03 	ldbu	r3,-4(fp)
 8000b10:	10c00005 	stb	r3,0(r2)
}
 8000b14:	e037883a 	mov	sp,fp
 8000b18:	df000017 	ldw	fp,0(sp)
 8000b1c:	dec00104 	addi	sp,sp,4
 8000b20:	f800283a 	ret

08000b24 <main>:
#include <time.h>
#include <stdlib.h>

#include "camera.h"

int main() {
 8000b24:	defffd04 	addi	sp,sp,-12
 8000b28:	dfc00215 	stw	ra,8(sp)
 8000b2c:	df000115 	stw	fp,4(sp)
 8000b30:	df000104 	addi	fp,sp,4
	printf("Starting Camera Testing\n");
 8000b34:	01020074 	movhi	r4,2049
 8000b38:	21012304 	addi	r4,r4,1164
 8000b3c:	8000d700 	call	8000d70 <puts>
	uint8_t byte;

	// Initialize the camera
	Camera_Init();
 8000b40:	80001f80 	call	80001f8 <Camera_Init>

	while((Camera_Status & 0x01) == 0x01){
 8000b44:	00000406 	br	8000b58 <main+0x34>
		byte = Camera_RxData;
 8000b48:	00a10034 	movhi	r2,33792
 8000b4c:	10809484 	addi	r2,r2,594
 8000b50:	10800003 	ldbu	r2,0(r2)
 8000b54:	e0bfff05 	stb	r2,-4(fp)
	uint8_t byte;

	// Initialize the camera
	Camera_Init();

	while((Camera_Status & 0x01) == 0x01){
 8000b58:	00a10034 	movhi	r2,33792
 8000b5c:	10809404 	addi	r2,r2,592
 8000b60:	10800003 	ldbu	r2,0(r2)
 8000b64:	10803fcc 	andi	r2,r2,255
 8000b68:	1080004c 	andi	r2,r2,1
 8000b6c:	103ff61e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
		byte = Camera_RxData;
	}

	//usleep(1000000);
	reset();
 8000b70:	80002580 	call	8000258 <reset>
	
	while((Camera_Status & 0x01) == 0x01){
		byte = Camera_RxData;
	}
	*/
	usleep(5000000);
 8000b74:	01001334 	movhi	r4,76
 8000b78:	2112d004 	addi	r4,r4,19264
 8000b7c:	800de580 	call	800de58 <usleep>
	takePicture();
 8000b80:	800045c0 	call	800045c <takePicture>

	while((Camera_Status & 0x01) == 0x01){
 8000b84:	00000406 	br	8000b98 <main+0x74>
		byte = Camera_RxData;
 8000b88:	00a10034 	movhi	r2,33792
 8000b8c:	10809484 	addi	r2,r2,594
 8000b90:	10800003 	ldbu	r2,0(r2)
 8000b94:	e0bfff05 	stb	r2,-4(fp)
	}
	*/
	usleep(5000000);
	takePicture();

	while((Camera_Status & 0x01) == 0x01){
 8000b98:	00a10034 	movhi	r2,33792
 8000b9c:	10809404 	addi	r2,r2,592
 8000ba0:	10800003 	ldbu	r2,0(r2)
 8000ba4:	10803fcc 	andi	r2,r2,255
 8000ba8:	1080004c 	andi	r2,r2,1
 8000bac:	103ff61e 	bne	r2,zero,8000b88 <__alt_data_end+0xfc000b88>
		byte = Camera_RxData;
	}

	usleep(1000000);
 8000bb0:	010003f4 	movhi	r4,15
 8000bb4:	21109004 	addi	r4,r4,16960
 8000bb8:	800de580 	call	800de58 <usleep>
	getImageLength();
 8000bbc:	800067c0 	call	800067c <getImageLength>

	while((Camera_Status & 0x01) == 0x01){
 8000bc0:	00000406 	br	8000bd4 <main+0xb0>
		byte = Camera_RxData;
 8000bc4:	00a10034 	movhi	r2,33792
 8000bc8:	10809484 	addi	r2,r2,594
 8000bcc:	10800003 	ldbu	r2,0(r2)
 8000bd0:	e0bfff05 	stb	r2,-4(fp)
	}

	usleep(1000000);
	getImageLength();

	while((Camera_Status & 0x01) == 0x01){
 8000bd4:	00a10034 	movhi	r2,33792
 8000bd8:	10809404 	addi	r2,r2,592
 8000bdc:	10800003 	ldbu	r2,0(r2)
 8000be0:	10803fcc 	andi	r2,r2,255
 8000be4:	1080004c 	andi	r2,r2,1
 8000be8:	103ff61e 	bne	r2,zero,8000bc4 <__alt_data_end+0xfc000bc4>
		byte = Camera_RxData;
	}
	
	usleep(100000);
 8000bec:	010000b4 	movhi	r4,2
 8000bf0:	2121a804 	addi	r4,r4,-31072
 8000bf4:	800de580 	call	800de58 <usleep>
	readImage();
 8000bf8:	80007780 	call	8000778 <readImage>

	while((Camera_Status & 0x01) == 0x01){
 8000bfc:	00000406 	br	8000c10 <main+0xec>
		byte = Camera_RxData;
 8000c00:	00a10034 	movhi	r2,33792
 8000c04:	10809484 	addi	r2,r2,594
 8000c08:	10800003 	ldbu	r2,0(r2)
 8000c0c:	e0bfff05 	stb	r2,-4(fp)
	}
	
	usleep(100000);
	readImage();

	while((Camera_Status & 0x01) == 0x01){
 8000c10:	00a10034 	movhi	r2,33792
 8000c14:	10809404 	addi	r2,r2,592
 8000c18:	10800003 	ldbu	r2,0(r2)
 8000c1c:	10803fcc 	andi	r2,r2,255
 8000c20:	1080004c 	andi	r2,r2,1
 8000c24:	103ff61e 	bne	r2,zero,8000c00 <__alt_data_end+0xfc000c00>
		byte = Camera_RxData;
	}

	usleep(1000000);
 8000c28:	010003f4 	movhi	r4,15
 8000c2c:	21109004 	addi	r4,r4,16960
 8000c30:	800de580 	call	800de58 <usleep>
	stopTakingImage();
 8000c34:	80009940 	call	8000994 <stopTakingImage>
			printf("0");
		}
    	printf("%X ", (uint8_t) cameraImage[i]);
	}
	*/
	return 0;
 8000c38:	0005883a 	mov	r2,zero
}
 8000c3c:	e037883a 	mov	sp,fp
 8000c40:	dfc00117 	ldw	ra,4(sp)
 8000c44:	df000017 	ldw	fp,0(sp)
 8000c48:	dec00204 	addi	sp,sp,8
 8000c4c:	f800283a 	ret

08000c50 <_printf_r>:
 8000c50:	defffd04 	addi	sp,sp,-12
 8000c54:	dfc00015 	stw	ra,0(sp)
 8000c58:	d9800115 	stw	r6,4(sp)
 8000c5c:	d9c00215 	stw	r7,8(sp)
 8000c60:	280d883a 	mov	r6,r5
 8000c64:	21400217 	ldw	r5,8(r4)
 8000c68:	d9c00104 	addi	r7,sp,4
 8000c6c:	8000e1c0 	call	8000e1c <___vfprintf_internal_r>
 8000c70:	dfc00017 	ldw	ra,0(sp)
 8000c74:	dec00304 	addi	sp,sp,12
 8000c78:	f800283a 	ret

08000c7c <printf>:
 8000c7c:	defffc04 	addi	sp,sp,-16
 8000c80:	dfc00015 	stw	ra,0(sp)
 8000c84:	d9400115 	stw	r5,4(sp)
 8000c88:	d9800215 	stw	r6,8(sp)
 8000c8c:	d9c00315 	stw	r7,12(sp)
 8000c90:	00820074 	movhi	r2,2049
 8000c94:	1088a604 	addi	r2,r2,8856
 8000c98:	10800017 	ldw	r2,0(r2)
 8000c9c:	200b883a 	mov	r5,r4
 8000ca0:	d9800104 	addi	r6,sp,4
 8000ca4:	11000217 	ldw	r4,8(r2)
 8000ca8:	8002f180 	call	8002f18 <__vfprintf_internal>
 8000cac:	dfc00017 	ldw	ra,0(sp)
 8000cb0:	dec00404 	addi	sp,sp,16
 8000cb4:	f800283a 	ret

08000cb8 <_puts_r>:
 8000cb8:	defff604 	addi	sp,sp,-40
 8000cbc:	dc000715 	stw	r16,28(sp)
 8000cc0:	2021883a 	mov	r16,r4
 8000cc4:	2809883a 	mov	r4,r5
 8000cc8:	dc400815 	stw	r17,32(sp)
 8000ccc:	dfc00915 	stw	ra,36(sp)
 8000cd0:	2823883a 	mov	r17,r5
 8000cd4:	8000d840 	call	8000d84 <strlen>
 8000cd8:	00c20074 	movhi	r3,2049
 8000cdc:	18c8a604 	addi	r3,r3,8856
 8000ce0:	18c00017 	ldw	r3,0(r3)
 8000ce4:	11000044 	addi	r4,r2,1
 8000ce8:	d8800115 	stw	r2,4(sp)
 8000cec:	18c00217 	ldw	r3,8(r3)
 8000cf0:	01420074 	movhi	r5,2049
 8000cf4:	29412904 	addi	r5,r5,1188
 8000cf8:	1880030b 	ldhu	r2,12(r3)
 8000cfc:	d9400215 	stw	r5,8(sp)
 8000d00:	d9000615 	stw	r4,24(sp)
 8000d04:	01400044 	movi	r5,1
 8000d08:	01000084 	movi	r4,2
 8000d0c:	d9000515 	stw	r4,20(sp)
 8000d10:	dc400015 	stw	r17,0(sp)
 8000d14:	d9400315 	stw	r5,12(sp)
 8000d18:	dec00415 	stw	sp,16(sp)
 8000d1c:	1108000c 	andi	r4,r2,8192
 8000d20:	2000061e 	bne	r4,zero,8000d3c <_puts_r+0x84>
 8000d24:	19401917 	ldw	r5,100(r3)
 8000d28:	0137ffc4 	movi	r4,-8193
 8000d2c:	10880014 	ori	r2,r2,8192
 8000d30:	2908703a 	and	r4,r5,r4
 8000d34:	1880030d 	sth	r2,12(r3)
 8000d38:	19001915 	stw	r4,100(r3)
 8000d3c:	81400217 	ldw	r5,8(r16)
 8000d40:	8009883a 	mov	r4,r16
 8000d44:	d9800404 	addi	r6,sp,16
 8000d48:	80053dc0 	call	80053dc <__sfvwrite_r>
 8000d4c:	1000061e 	bne	r2,zero,8000d68 <_puts_r+0xb0>
 8000d50:	00800284 	movi	r2,10
 8000d54:	dfc00917 	ldw	ra,36(sp)
 8000d58:	dc400817 	ldw	r17,32(sp)
 8000d5c:	dc000717 	ldw	r16,28(sp)
 8000d60:	dec00a04 	addi	sp,sp,40
 8000d64:	f800283a 	ret
 8000d68:	00bfffc4 	movi	r2,-1
 8000d6c:	003ff906 	br	8000d54 <__alt_data_end+0xfc000d54>

08000d70 <puts>:
 8000d70:	00820074 	movhi	r2,2049
 8000d74:	1088a604 	addi	r2,r2,8856
 8000d78:	200b883a 	mov	r5,r4
 8000d7c:	11000017 	ldw	r4,0(r2)
 8000d80:	8000cb81 	jmpi	8000cb8 <_puts_r>

08000d84 <strlen>:
 8000d84:	208000cc 	andi	r2,r4,3
 8000d88:	10002026 	beq	r2,zero,8000e0c <strlen+0x88>
 8000d8c:	20800007 	ldb	r2,0(r4)
 8000d90:	10002026 	beq	r2,zero,8000e14 <strlen+0x90>
 8000d94:	2005883a 	mov	r2,r4
 8000d98:	00000206 	br	8000da4 <strlen+0x20>
 8000d9c:	10c00007 	ldb	r3,0(r2)
 8000da0:	18001826 	beq	r3,zero,8000e04 <strlen+0x80>
 8000da4:	10800044 	addi	r2,r2,1
 8000da8:	10c000cc 	andi	r3,r2,3
 8000dac:	183ffb1e 	bne	r3,zero,8000d9c <__alt_data_end+0xfc000d9c>
 8000db0:	10c00017 	ldw	r3,0(r2)
 8000db4:	01ffbff4 	movhi	r7,65279
 8000db8:	39ffbfc4 	addi	r7,r7,-257
 8000dbc:	00ca303a 	nor	r5,zero,r3
 8000dc0:	01a02074 	movhi	r6,32897
 8000dc4:	19c7883a 	add	r3,r3,r7
 8000dc8:	31a02004 	addi	r6,r6,-32640
 8000dcc:	1946703a 	and	r3,r3,r5
 8000dd0:	1986703a 	and	r3,r3,r6
 8000dd4:	1800091e 	bne	r3,zero,8000dfc <strlen+0x78>
 8000dd8:	10800104 	addi	r2,r2,4
 8000ddc:	10c00017 	ldw	r3,0(r2)
 8000de0:	19cb883a 	add	r5,r3,r7
 8000de4:	00c6303a 	nor	r3,zero,r3
 8000de8:	28c6703a 	and	r3,r5,r3
 8000dec:	1986703a 	and	r3,r3,r6
 8000df0:	183ff926 	beq	r3,zero,8000dd8 <__alt_data_end+0xfc000dd8>
 8000df4:	00000106 	br	8000dfc <strlen+0x78>
 8000df8:	10800044 	addi	r2,r2,1
 8000dfc:	10c00007 	ldb	r3,0(r2)
 8000e00:	183ffd1e 	bne	r3,zero,8000df8 <__alt_data_end+0xfc000df8>
 8000e04:	1105c83a 	sub	r2,r2,r4
 8000e08:	f800283a 	ret
 8000e0c:	2005883a 	mov	r2,r4
 8000e10:	003fe706 	br	8000db0 <__alt_data_end+0xfc000db0>
 8000e14:	0005883a 	mov	r2,zero
 8000e18:	f800283a 	ret

08000e1c <___vfprintf_internal_r>:
 8000e1c:	defeb604 	addi	sp,sp,-1320
 8000e20:	dfc14915 	stw	ra,1316(sp)
 8000e24:	ddc14715 	stw	r23,1308(sp)
 8000e28:	dd814615 	stw	r22,1304(sp)
 8000e2c:	202f883a 	mov	r23,r4
 8000e30:	282d883a 	mov	r22,r5
 8000e34:	d9812a15 	stw	r6,1192(sp)
 8000e38:	d9c12d15 	stw	r7,1204(sp)
 8000e3c:	df014815 	stw	fp,1312(sp)
 8000e40:	dd414515 	stw	r21,1300(sp)
 8000e44:	dd014415 	stw	r20,1296(sp)
 8000e48:	dcc14315 	stw	r19,1292(sp)
 8000e4c:	dc814215 	stw	r18,1288(sp)
 8000e50:	dc414115 	stw	r17,1284(sp)
 8000e54:	dc014015 	stw	r16,1280(sp)
 8000e58:	8005a9c0 	call	8005a9c <_localeconv_r>
 8000e5c:	10800017 	ldw	r2,0(r2)
 8000e60:	1009883a 	mov	r4,r2
 8000e64:	d8813515 	stw	r2,1236(sp)
 8000e68:	8000d840 	call	8000d84 <strlen>
 8000e6c:	d8813815 	stw	r2,1248(sp)
 8000e70:	b8000226 	beq	r23,zero,8000e7c <___vfprintf_internal_r+0x60>
 8000e74:	b8800e17 	ldw	r2,56(r23)
 8000e78:	10010526 	beq	r2,zero,8001290 <___vfprintf_internal_r+0x474>
 8000e7c:	b0c0030b 	ldhu	r3,12(r22)
 8000e80:	1908000c 	andi	r4,r3,8192
 8000e84:	1805883a 	mov	r2,r3
 8000e88:	2000071e 	bne	r4,zero,8000ea8 <___vfprintf_internal_r+0x8c>
 8000e8c:	b1001917 	ldw	r4,100(r22)
 8000e90:	18880014 	ori	r2,r3,8192
 8000e94:	00f7ffc4 	movi	r3,-8193
 8000e98:	20c8703a 	and	r4,r4,r3
 8000e9c:	b080030d 	sth	r2,12(r22)
 8000ea0:	1007883a 	mov	r3,r2
 8000ea4:	b1001915 	stw	r4,100(r22)
 8000ea8:	1100020c 	andi	r4,r2,8
 8000eac:	2000a826 	beq	r4,zero,8001150 <___vfprintf_internal_r+0x334>
 8000eb0:	b1000417 	ldw	r4,16(r22)
 8000eb4:	2000a626 	beq	r4,zero,8001150 <___vfprintf_internal_r+0x334>
 8000eb8:	1080068c 	andi	r2,r2,26
 8000ebc:	01000284 	movi	r4,10
 8000ec0:	1100ac26 	beq	r2,r4,8001174 <___vfprintf_internal_r+0x358>
 8000ec4:	d8c10e04 	addi	r3,sp,1080
 8000ec8:	d9010dc4 	addi	r4,sp,1079
 8000ecc:	d9400404 	addi	r5,sp,16
 8000ed0:	05020074 	movhi	r20,2049
 8000ed4:	1905c83a 	sub	r2,r3,r4
 8000ed8:	a5013a84 	addi	r20,r20,1258
 8000edc:	d8c12815 	stw	r3,1184(sp)
 8000ee0:	d9012915 	stw	r4,1188(sp)
 8000ee4:	d9411e15 	stw	r5,1144(sp)
 8000ee8:	d8012015 	stw	zero,1152(sp)
 8000eec:	d8011f15 	stw	zero,1148(sp)
 8000ef0:	d8013315 	stw	zero,1228(sp)
 8000ef4:	d8013715 	stw	zero,1244(sp)
 8000ef8:	d8013915 	stw	zero,1252(sp)
 8000efc:	d8013b15 	stw	zero,1260(sp)
 8000f00:	d8013a15 	stw	zero,1256(sp)
 8000f04:	d8012f15 	stw	zero,1212(sp)
 8000f08:	2811883a 	mov	r8,r5
 8000f0c:	d8813c15 	stw	r2,1264(sp)
 8000f10:	d8c12a17 	ldw	r3,1192(sp)
 8000f14:	18800007 	ldb	r2,0(r3)
 8000f18:	10021326 	beq	r2,zero,8001768 <___vfprintf_internal_r+0x94c>
 8000f1c:	00c00944 	movi	r3,37
 8000f20:	dc012a17 	ldw	r16,1192(sp)
 8000f24:	10c0021e 	bne	r2,r3,8000f30 <___vfprintf_internal_r+0x114>
 8000f28:	00001606 	br	8000f84 <___vfprintf_internal_r+0x168>
 8000f2c:	10c08526 	beq	r2,r3,8001144 <___vfprintf_internal_r+0x328>
 8000f30:	84000044 	addi	r16,r16,1
 8000f34:	80800007 	ldb	r2,0(r16)
 8000f38:	103ffc1e 	bne	r2,zero,8000f2c <__alt_data_end+0xfc000f2c>
 8000f3c:	d9012a17 	ldw	r4,1192(sp)
 8000f40:	8123c83a 	sub	r17,r16,r4
 8000f44:	88000f26 	beq	r17,zero,8000f84 <___vfprintf_internal_r+0x168>
 8000f48:	d8812a17 	ldw	r2,1192(sp)
 8000f4c:	d8c12017 	ldw	r3,1152(sp)
 8000f50:	44400115 	stw	r17,4(r8)
 8000f54:	40800015 	stw	r2,0(r8)
 8000f58:	d8811f17 	ldw	r2,1148(sp)
 8000f5c:	1c47883a 	add	r3,r3,r17
 8000f60:	d8c12015 	stw	r3,1152(sp)
 8000f64:	10800044 	addi	r2,r2,1
 8000f68:	d8811f15 	stw	r2,1148(sp)
 8000f6c:	00c001c4 	movi	r3,7
 8000f70:	1880b516 	blt	r3,r2,8001248 <___vfprintf_internal_r+0x42c>
 8000f74:	42000204 	addi	r8,r8,8
 8000f78:	d8c12f17 	ldw	r3,1212(sp)
 8000f7c:	1c47883a 	add	r3,r3,r17
 8000f80:	d8c12f15 	stw	r3,1212(sp)
 8000f84:	80800007 	ldb	r2,0(r16)
 8000f88:	1000b626 	beq	r2,zero,8001264 <___vfprintf_internal_r+0x448>
 8000f8c:	80800044 	addi	r2,r16,1
 8000f90:	84000047 	ldb	r16,1(r16)
 8000f94:	0027883a 	mov	r19,zero
 8000f98:	0039883a 	mov	fp,zero
 8000f9c:	dcc12b05 	stb	r19,1196(sp)
 8000fa0:	d8012785 	stb	zero,1182(sp)
 8000fa4:	027fffc4 	movi	r9,-1
 8000fa8:	d8012e15 	stw	zero,1208(sp)
 8000fac:	04401604 	movi	r17,88
 8000fb0:	04800244 	movi	r18,9
 8000fb4:	da012a15 	stw	r8,1192(sp)
 8000fb8:	e027883a 	mov	r19,fp
 8000fbc:	17000044 	addi	fp,r2,1
 8000fc0:	80bff804 	addi	r2,r16,-32
 8000fc4:	88831236 	bltu	r17,r2,8001c10 <___vfprintf_internal_r+0xdf4>
 8000fc8:	100490ba 	slli	r2,r2,2
 8000fcc:	01020034 	movhi	r4,2048
 8000fd0:	2103f804 	addi	r4,r4,4064
 8000fd4:	1105883a 	add	r2,r2,r4
 8000fd8:	10800017 	ldw	r2,0(r2)
 8000fdc:	1000683a 	jmp	r2
 8000fe0:	08001b2c 	andhi	zero,at,108
 8000fe4:	08001c10 	cmplti	zero,at,112
 8000fe8:	08001c10 	cmplti	zero,at,112
 8000fec:	08001b48 	cmpgei	zero,at,109
 8000ff0:	08001c10 	cmplti	zero,at,112
 8000ff4:	08001c10 	cmplti	zero,at,112
 8000ff8:	08001c10 	cmplti	zero,at,112
 8000ffc:	08001c10 	cmplti	zero,at,112
 8001000:	08001c10 	cmplti	zero,at,112
 8001004:	08001c10 	cmplti	zero,at,112
 8001008:	08001b58 	cmpnei	zero,at,109
 800100c:	08001b80 	call	8001b8 <__reset-0x77ffe48>
 8001010:	08001c10 	cmplti	zero,at,112
 8001014:	0800129c 	xori	zero,at,74
 8001018:	080012ac 	andhi	zero,at,74
 800101c:	08001c10 	cmplti	zero,at,112
 8001020:	080012fc 	xorhi	zero,at,75
 8001024:	0800130c 	andi	zero,at,76
 8001028:	0800130c 	andi	zero,at,76
 800102c:	0800130c 	andi	zero,at,76
 8001030:	0800130c 	andi	zero,at,76
 8001034:	0800130c 	andi	zero,at,76
 8001038:	0800130c 	andi	zero,at,76
 800103c:	0800130c 	andi	zero,at,76
 8001040:	0800130c 	andi	zero,at,76
 8001044:	0800130c 	andi	zero,at,76
 8001048:	08001c10 	cmplti	zero,at,112
 800104c:	08001c10 	cmplti	zero,at,112
 8001050:	08001c10 	cmplti	zero,at,112
 8001054:	08001c10 	cmplti	zero,at,112
 8001058:	08001c10 	cmplti	zero,at,112
 800105c:	08001c10 	cmplti	zero,at,112
 8001060:	08001c10 	cmplti	zero,at,112
 8001064:	08001c10 	cmplti	zero,at,112
 8001068:	08001c10 	cmplti	zero,at,112
 800106c:	08001c10 	cmplti	zero,at,112
 8001070:	08001350 	cmplti	zero,at,77
 8001074:	08001770 	cmpltui	zero,at,93
 8001078:	08001c10 	cmplti	zero,at,112
 800107c:	08001770 	cmpltui	zero,at,93
 8001080:	08001c10 	cmplti	zero,at,112
 8001084:	08001c10 	cmplti	zero,at,112
 8001088:	08001c10 	cmplti	zero,at,112
 800108c:	08001c10 	cmplti	zero,at,112
 8001090:	08001818 	cmpnei	zero,at,96
 8001094:	08001c10 	cmplti	zero,at,112
 8001098:	08001c10 	cmplti	zero,at,112
 800109c:	08001828 	cmpgeui	zero,at,96
 80010a0:	08001c10 	cmplti	zero,at,112
 80010a4:	08001c10 	cmplti	zero,at,112
 80010a8:	08001c10 	cmplti	zero,at,112
 80010ac:	08001c10 	cmplti	zero,at,112
 80010b0:	08001c10 	cmplti	zero,at,112
 80010b4:	0800186c 	andhi	zero,at,97
 80010b8:	08001c10 	cmplti	zero,at,112
 80010bc:	08001c10 	cmplti	zero,at,112
 80010c0:	080018a4 	muli	zero,at,98
 80010c4:	08001c10 	cmplti	zero,at,112
 80010c8:	08001c10 	cmplti	zero,at,112
 80010cc:	08001c10 	cmplti	zero,at,112
 80010d0:	08001c10 	cmplti	zero,at,112
 80010d4:	08001c10 	cmplti	zero,at,112
 80010d8:	08001c10 	cmplti	zero,at,112
 80010dc:	08001c10 	cmplti	zero,at,112
 80010e0:	08001c10 	cmplti	zero,at,112
 80010e4:	08001c10 	cmplti	zero,at,112
 80010e8:	08001c10 	cmplti	zero,at,112
 80010ec:	08001ae0 	cmpeqi	zero,at,107
 80010f0:	08001a8c 	andi	zero,at,106
 80010f4:	08001770 	cmpltui	zero,at,93
 80010f8:	08001770 	cmpltui	zero,at,93
 80010fc:	08001770 	cmpltui	zero,at,93
 8001100:	08001ad0 	cmplti	zero,at,107
 8001104:	08001a8c 	andi	zero,at,106
 8001108:	08001c10 	cmplti	zero,at,112
 800110c:	08001c10 	cmplti	zero,at,112
 8001110:	080019a8 	cmpgeui	zero,at,102
 8001114:	08001c10 	cmplti	zero,at,112
 8001118:	080019c0 	call	80019c <__reset-0x77ffe64>
 800111c:	08001a00 	call	8001a0 <__reset-0x77ffe60>
 8001120:	08001a40 	call	8001a4 <__reset-0x77ffe5c>
 8001124:	0800190c 	andi	zero,at,100
 8001128:	08001c10 	cmplti	zero,at,112
 800112c:	08001b94 	ori	zero,at,110
 8001130:	08001c10 	cmplti	zero,at,112
 8001134:	0800191c 	xori	zero,at,100
 8001138:	08001c10 	cmplti	zero,at,112
 800113c:	08001c10 	cmplti	zero,at,112
 8001140:	0800195c 	xori	zero,at,101
 8001144:	d9412a17 	ldw	r5,1192(sp)
 8001148:	8163c83a 	sub	r17,r16,r5
 800114c:	003f7d06 	br	8000f44 <__alt_data_end+0xfc000f44>
 8001150:	b809883a 	mov	r4,r23
 8001154:	b00b883a 	mov	r5,r22
 8001158:	8002f3c0 	call	8002f3c <__swsetup_r>
 800115c:	10002d1e 	bne	r2,zero,8001214 <___vfprintf_internal_r+0x3f8>
 8001160:	b0c0030b 	ldhu	r3,12(r22)
 8001164:	01000284 	movi	r4,10
 8001168:	1805883a 	mov	r2,r3
 800116c:	1080068c 	andi	r2,r2,26
 8001170:	113f541e 	bne	r2,r4,8000ec4 <__alt_data_end+0xfc000ec4>
 8001174:	b080038b 	ldhu	r2,14(r22)
 8001178:	113fffcc 	andi	r4,r2,65535
 800117c:	2120001c 	xori	r4,r4,32768
 8001180:	21200004 	addi	r4,r4,-32768
 8001184:	203f4f16 	blt	r4,zero,8000ec4 <__alt_data_end+0xfc000ec4>
 8001188:	b2c01917 	ldw	r11,100(r22)
 800118c:	b2800717 	ldw	r10,28(r22)
 8001190:	b2400917 	ldw	r9,36(r22)
 8001194:	d9812a17 	ldw	r6,1192(sp)
 8001198:	d9c12d17 	ldw	r7,1204(sp)
 800119c:	02010004 	movi	r8,1024
 80011a0:	18ffff4c 	andi	r3,r3,65533
 80011a4:	d881078d 	sth	r2,1054(sp)
 80011a8:	b809883a 	mov	r4,r23
 80011ac:	d8800404 	addi	r2,sp,16
 80011b0:	d9410404 	addi	r5,sp,1040
 80011b4:	d8c1070d 	sth	r3,1052(sp)
 80011b8:	dac11d15 	stw	r11,1140(sp)
 80011bc:	da810b15 	stw	r10,1068(sp)
 80011c0:	da410d15 	stw	r9,1076(sp)
 80011c4:	d8810415 	stw	r2,1040(sp)
 80011c8:	d8810815 	stw	r2,1056(sp)
 80011cc:	da010615 	stw	r8,1048(sp)
 80011d0:	da010915 	stw	r8,1060(sp)
 80011d4:	d8010a15 	stw	zero,1064(sp)
 80011d8:	8000e1c0 	call	8000e1c <___vfprintf_internal_r>
 80011dc:	1021883a 	mov	r16,r2
 80011e0:	10000416 	blt	r2,zero,80011f4 <___vfprintf_internal_r+0x3d8>
 80011e4:	b809883a 	mov	r4,r23
 80011e8:	d9410404 	addi	r5,sp,1040
 80011ec:	80049bc0 	call	80049bc <_fflush_r>
 80011f0:	1007301e 	bne	r2,zero,8002eb4 <___vfprintf_internal_r+0x2098>
 80011f4:	d881070b 	ldhu	r2,1052(sp)
 80011f8:	1080100c 	andi	r2,r2,64
 80011fc:	10000326 	beq	r2,zero,800120c <___vfprintf_internal_r+0x3f0>
 8001200:	b080030b 	ldhu	r2,12(r22)
 8001204:	10801014 	ori	r2,r2,64
 8001208:	b080030d 	sth	r2,12(r22)
 800120c:	8005883a 	mov	r2,r16
 8001210:	00000106 	br	8001218 <___vfprintf_internal_r+0x3fc>
 8001214:	00bfffc4 	movi	r2,-1
 8001218:	dfc14917 	ldw	ra,1316(sp)
 800121c:	df014817 	ldw	fp,1312(sp)
 8001220:	ddc14717 	ldw	r23,1308(sp)
 8001224:	dd814617 	ldw	r22,1304(sp)
 8001228:	dd414517 	ldw	r21,1300(sp)
 800122c:	dd014417 	ldw	r20,1296(sp)
 8001230:	dcc14317 	ldw	r19,1292(sp)
 8001234:	dc814217 	ldw	r18,1288(sp)
 8001238:	dc414117 	ldw	r17,1284(sp)
 800123c:	dc014017 	ldw	r16,1280(sp)
 8001240:	dec14a04 	addi	sp,sp,1320
 8001244:	f800283a 	ret
 8001248:	b809883a 	mov	r4,r23
 800124c:	b00b883a 	mov	r5,r22
 8001250:	d9811e04 	addi	r6,sp,1144
 8001254:	800825c0 	call	800825c <__sprint_r>
 8001258:	1000081e 	bne	r2,zero,800127c <___vfprintf_internal_r+0x460>
 800125c:	da000404 	addi	r8,sp,16
 8001260:	003f4506 	br	8000f78 <__alt_data_end+0xfc000f78>
 8001264:	d8812017 	ldw	r2,1152(sp)
 8001268:	10000426 	beq	r2,zero,800127c <___vfprintf_internal_r+0x460>
 800126c:	b809883a 	mov	r4,r23
 8001270:	b00b883a 	mov	r5,r22
 8001274:	d9811e04 	addi	r6,sp,1144
 8001278:	800825c0 	call	800825c <__sprint_r>
 800127c:	b080030b 	ldhu	r2,12(r22)
 8001280:	1080100c 	andi	r2,r2,64
 8001284:	103fe31e 	bne	r2,zero,8001214 <__alt_data_end+0xfc001214>
 8001288:	d8812f17 	ldw	r2,1212(sp)
 800128c:	003fe206 	br	8001218 <__alt_data_end+0xfc001218>
 8001290:	b809883a 	mov	r4,r23
 8001294:	8004f780 	call	8004f78 <__sinit>
 8001298:	003ef806 	br	8000e7c <__alt_data_end+0xfc000e7c>
 800129c:	e005883a 	mov	r2,fp
 80012a0:	9cc00114 	ori	r19,r19,4
 80012a4:	e4000007 	ldb	r16,0(fp)
 80012a8:	003f4406 	br	8000fbc <__alt_data_end+0xfc000fbc>
 80012ac:	e4000007 	ldb	r16,0(fp)
 80012b0:	01000a84 	movi	r4,42
 80012b4:	e0800044 	addi	r2,fp,1
 80012b8:	8106f626 	beq	r16,r4,8002e94 <___vfprintf_internal_r+0x2078>
 80012bc:	857ff404 	addi	r21,r16,-48
 80012c0:	1039883a 	mov	fp,r2
 80012c4:	0013883a 	mov	r9,zero
 80012c8:	957f3d36 	bltu	r18,r21,8000fc0 <__alt_data_end+0xfc000fc0>
 80012cc:	0009883a 	mov	r4,zero
 80012d0:	01400284 	movi	r5,10
 80012d4:	800ad900 	call	800ad90 <__mulsi3>
 80012d8:	e4000007 	ldb	r16,0(fp)
 80012dc:	a889883a 	add	r4,r21,r2
 80012e0:	e7000044 	addi	fp,fp,1
 80012e4:	857ff404 	addi	r21,r16,-48
 80012e8:	957ff92e 	bgeu	r18,r21,80012d0 <__alt_data_end+0xfc0012d0>
 80012ec:	2013883a 	mov	r9,r4
 80012f0:	203f330e 	bge	r4,zero,8000fc0 <__alt_data_end+0xfc000fc0>
 80012f4:	027fffc4 	movi	r9,-1
 80012f8:	003f3106 	br	8000fc0 <__alt_data_end+0xfc000fc0>
 80012fc:	9cc02014 	ori	r19,r19,128
 8001300:	e005883a 	mov	r2,fp
 8001304:	e4000007 	ldb	r16,0(fp)
 8001308:	003f2c06 	br	8000fbc <__alt_data_end+0xfc000fbc>
 800130c:	857ff404 	addi	r21,r16,-48
 8001310:	d8012e15 	stw	zero,1208(sp)
 8001314:	e021883a 	mov	r16,fp
 8001318:	0009883a 	mov	r4,zero
 800131c:	da412c15 	stw	r9,1200(sp)
 8001320:	01400284 	movi	r5,10
 8001324:	800ad900 	call	800ad90 <__mulsi3>
 8001328:	81400007 	ldb	r5,0(r16)
 800132c:	1549883a 	add	r4,r2,r21
 8001330:	e7000044 	addi	fp,fp,1
 8001334:	2d7ff404 	addi	r21,r5,-48
 8001338:	e021883a 	mov	r16,fp
 800133c:	957ff82e 	bgeu	r18,r21,8001320 <__alt_data_end+0xfc001320>
 8001340:	2821883a 	mov	r16,r5
 8001344:	d9012e15 	stw	r4,1208(sp)
 8001348:	da412c17 	ldw	r9,1200(sp)
 800134c:	003f1c06 	br	8000fc0 <__alt_data_end+0xfc000fc0>
 8001350:	da012a17 	ldw	r8,1192(sp)
 8001354:	df012a15 	stw	fp,1192(sp)
 8001358:	9839883a 	mov	fp,r19
 800135c:	dcc12b03 	ldbu	r19,1196(sp)
 8001360:	e7000414 	ori	fp,fp,16
 8001364:	e080080c 	andi	r2,fp,32
 8001368:	dcc12785 	stb	r19,1182(sp)
 800136c:	d8c12d17 	ldw	r3,1204(sp)
 8001370:	1001ce26 	beq	r2,zero,8001aac <___vfprintf_internal_r+0xc90>
 8001374:	d9012d17 	ldw	r4,1204(sp)
 8001378:	18800117 	ldw	r2,4(r3)
 800137c:	1c800017 	ldw	r18,0(r3)
 8001380:	21000204 	addi	r4,r4,8
 8001384:	d9012d15 	stw	r4,1204(sp)
 8001388:	102b883a 	mov	r21,r2
 800138c:	10044916 	blt	r2,zero,80024b4 <___vfprintf_internal_r+0x1698>
 8001390:	dcc12783 	ldbu	r19,1182(sp)
 8001394:	da413215 	stw	r9,1224(sp)
 8001398:	00800044 	movi	r2,1
 800139c:	9546b03a 	or	r3,r18,r21
 80013a0:	48000216 	blt	r9,zero,80013ac <___vfprintf_internal_r+0x590>
 80013a4:	013fdfc4 	movi	r4,-129
 80013a8:	e138703a 	and	fp,fp,r4
 80013ac:	1802251e 	bne	r3,zero,8001c44 <___vfprintf_internal_r+0xe28>
 80013b0:	48031726 	beq	r9,zero,8002010 <___vfprintf_internal_r+0x11f4>
 80013b4:	10803fcc 	andi	r2,r2,255
 80013b8:	00c00044 	movi	r3,1
 80013bc:	10c24526 	beq	r2,r3,8001cd4 <___vfprintf_internal_r+0xeb8>
 80013c0:	00c00084 	movi	r3,2
 80013c4:	10c33426 	beq	r2,r3,8002098 <___vfprintf_internal_r+0x127c>
 80013c8:	d8c10e04 	addi	r3,sp,1080
 80013cc:	9008d0fa 	srli	r4,r18,3
 80013d0:	a80a977a 	slli	r5,r21,29
 80013d4:	a82ad0fa 	srli	r21,r21,3
 80013d8:	948001cc 	andi	r18,r18,7
 80013dc:	90800c04 	addi	r2,r18,48
 80013e0:	18ffffc4 	addi	r3,r3,-1
 80013e4:	2924b03a 	or	r18,r5,r4
 80013e8:	18800005 	stb	r2,0(r3)
 80013ec:	9548b03a 	or	r4,r18,r21
 80013f0:	203ff61e 	bne	r4,zero,80013cc <__alt_data_end+0xfc0013cc>
 80013f4:	e100004c 	andi	r4,fp,1
 80013f8:	d8c13115 	stw	r3,1220(sp)
 80013fc:	20039a1e 	bne	r4,zero,8002268 <___vfprintf_internal_r+0x144c>
 8001400:	d8812817 	ldw	r2,1184(sp)
 8001404:	10e3c83a 	sub	r17,r2,r3
 8001408:	8805883a 	mov	r2,r17
 800140c:	8a40010e 	bge	r17,r9,8001414 <___vfprintf_internal_r+0x5f8>
 8001410:	4805883a 	mov	r2,r9
 8001414:	d8812b15 	stw	r2,1196(sp)
 8001418:	d8013415 	stw	zero,1232(sp)
 800141c:	98803fcc 	andi	r2,r19,255
 8001420:	1080201c 	xori	r2,r2,128
 8001424:	10bfe004 	addi	r2,r2,-128
 8001428:	10000326 	beq	r2,zero,8001438 <___vfprintf_internal_r+0x61c>
 800142c:	d8c12b17 	ldw	r3,1196(sp)
 8001430:	18c00044 	addi	r3,r3,1
 8001434:	d8c12b15 	stw	r3,1196(sp)
 8001438:	e0c0008c 	andi	r3,fp,2
 800143c:	d8c12c15 	stw	r3,1200(sp)
 8001440:	18000326 	beq	r3,zero,8001450 <___vfprintf_internal_r+0x634>
 8001444:	d8c12b17 	ldw	r3,1196(sp)
 8001448:	18c00084 	addi	r3,r3,2
 800144c:	d8c12b15 	stw	r3,1196(sp)
 8001450:	e0c0210c 	andi	r3,fp,132
 8001454:	d8c13015 	stw	r3,1216(sp)
 8001458:	1801f81e 	bne	r3,zero,8001c3c <___vfprintf_internal_r+0xe20>
 800145c:	d9012e17 	ldw	r4,1208(sp)
 8001460:	d8c12b17 	ldw	r3,1196(sp)
 8001464:	20ebc83a 	sub	r21,r4,r3
 8001468:	0541f40e 	bge	zero,r21,8001c3c <___vfprintf_internal_r+0xe20>
 800146c:	02400404 	movi	r9,16
 8001470:	d8c12017 	ldw	r3,1152(sp)
 8001474:	d8811f17 	ldw	r2,1148(sp)
 8001478:	4d45750e 	bge	r9,r21,8002a50 <___vfprintf_internal_r+0x1c34>
 800147c:	01420074 	movhi	r5,2049
 8001480:	29413e84 	addi	r5,r5,1274
 8001484:	d9413615 	stw	r5,1240(sp)
 8001488:	4827883a 	mov	r19,r9
 800148c:	048001c4 	movi	r18,7
 8001490:	00000306 	br	80014a0 <___vfprintf_internal_r+0x684>
 8001494:	ad7ffc04 	addi	r21,r21,-16
 8001498:	42000204 	addi	r8,r8,8
 800149c:	9d40130e 	bge	r19,r21,80014ec <___vfprintf_internal_r+0x6d0>
 80014a0:	01020074 	movhi	r4,2049
 80014a4:	18c00404 	addi	r3,r3,16
 80014a8:	10800044 	addi	r2,r2,1
 80014ac:	21013e84 	addi	r4,r4,1274
 80014b0:	41000015 	stw	r4,0(r8)
 80014b4:	44c00115 	stw	r19,4(r8)
 80014b8:	d8c12015 	stw	r3,1152(sp)
 80014bc:	d8811f15 	stw	r2,1148(sp)
 80014c0:	90bff40e 	bge	r18,r2,8001494 <__alt_data_end+0xfc001494>
 80014c4:	b809883a 	mov	r4,r23
 80014c8:	b00b883a 	mov	r5,r22
 80014cc:	d9811e04 	addi	r6,sp,1144
 80014d0:	800825c0 	call	800825c <__sprint_r>
 80014d4:	103f691e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 80014d8:	ad7ffc04 	addi	r21,r21,-16
 80014dc:	d8c12017 	ldw	r3,1152(sp)
 80014e0:	d8811f17 	ldw	r2,1148(sp)
 80014e4:	da000404 	addi	r8,sp,16
 80014e8:	9d7fed16 	blt	r19,r21,80014a0 <__alt_data_end+0xfc0014a0>
 80014ec:	d9413617 	ldw	r5,1240(sp)
 80014f0:	a8c7883a 	add	r3,r21,r3
 80014f4:	10800044 	addi	r2,r2,1
 80014f8:	41400015 	stw	r5,0(r8)
 80014fc:	45400115 	stw	r21,4(r8)
 8001500:	d8c12015 	stw	r3,1152(sp)
 8001504:	d8811f15 	stw	r2,1148(sp)
 8001508:	010001c4 	movi	r4,7
 800150c:	20832b16 	blt	r4,r2,80021bc <___vfprintf_internal_r+0x13a0>
 8001510:	d8812787 	ldb	r2,1182(sp)
 8001514:	42000204 	addi	r8,r8,8
 8001518:	10000c26 	beq	r2,zero,800154c <___vfprintf_internal_r+0x730>
 800151c:	d8811f17 	ldw	r2,1148(sp)
 8001520:	d9012784 	addi	r4,sp,1182
 8001524:	18c00044 	addi	r3,r3,1
 8001528:	10800044 	addi	r2,r2,1
 800152c:	41000015 	stw	r4,0(r8)
 8001530:	01000044 	movi	r4,1
 8001534:	41000115 	stw	r4,4(r8)
 8001538:	d8c12015 	stw	r3,1152(sp)
 800153c:	d8811f15 	stw	r2,1148(sp)
 8001540:	010001c4 	movi	r4,7
 8001544:	2082c416 	blt	r4,r2,8002058 <___vfprintf_internal_r+0x123c>
 8001548:	42000204 	addi	r8,r8,8
 800154c:	d8812c17 	ldw	r2,1200(sp)
 8001550:	10000c26 	beq	r2,zero,8001584 <___vfprintf_internal_r+0x768>
 8001554:	d8811f17 	ldw	r2,1148(sp)
 8001558:	d9012704 	addi	r4,sp,1180
 800155c:	18c00084 	addi	r3,r3,2
 8001560:	10800044 	addi	r2,r2,1
 8001564:	41000015 	stw	r4,0(r8)
 8001568:	01000084 	movi	r4,2
 800156c:	41000115 	stw	r4,4(r8)
 8001570:	d8c12015 	stw	r3,1152(sp)
 8001574:	d8811f15 	stw	r2,1148(sp)
 8001578:	010001c4 	movi	r4,7
 800157c:	2082be16 	blt	r4,r2,8002078 <___vfprintf_internal_r+0x125c>
 8001580:	42000204 	addi	r8,r8,8
 8001584:	d9013017 	ldw	r4,1216(sp)
 8001588:	00802004 	movi	r2,128
 800158c:	20822026 	beq	r4,r2,8001e10 <___vfprintf_internal_r+0xff4>
 8001590:	d9413217 	ldw	r5,1224(sp)
 8001594:	2c67c83a 	sub	r19,r5,r17
 8001598:	04c0260e 	bge	zero,r19,8001634 <___vfprintf_internal_r+0x818>
 800159c:	05400404 	movi	r21,16
 80015a0:	d8811f17 	ldw	r2,1148(sp)
 80015a4:	acc4720e 	bge	r21,r19,8002770 <___vfprintf_internal_r+0x1954>
 80015a8:	01420074 	movhi	r5,2049
 80015ac:	29413a84 	addi	r5,r5,1258
 80015b0:	d9412c15 	stw	r5,1200(sp)
 80015b4:	048001c4 	movi	r18,7
 80015b8:	00000306 	br	80015c8 <___vfprintf_internal_r+0x7ac>
 80015bc:	9cfffc04 	addi	r19,r19,-16
 80015c0:	42000204 	addi	r8,r8,8
 80015c4:	acc0110e 	bge	r21,r19,800160c <___vfprintf_internal_r+0x7f0>
 80015c8:	18c00404 	addi	r3,r3,16
 80015cc:	10800044 	addi	r2,r2,1
 80015d0:	45000015 	stw	r20,0(r8)
 80015d4:	45400115 	stw	r21,4(r8)
 80015d8:	d8c12015 	stw	r3,1152(sp)
 80015dc:	d8811f15 	stw	r2,1148(sp)
 80015e0:	90bff60e 	bge	r18,r2,80015bc <__alt_data_end+0xfc0015bc>
 80015e4:	b809883a 	mov	r4,r23
 80015e8:	b00b883a 	mov	r5,r22
 80015ec:	d9811e04 	addi	r6,sp,1144
 80015f0:	800825c0 	call	800825c <__sprint_r>
 80015f4:	103f211e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 80015f8:	9cfffc04 	addi	r19,r19,-16
 80015fc:	d8c12017 	ldw	r3,1152(sp)
 8001600:	d8811f17 	ldw	r2,1148(sp)
 8001604:	da000404 	addi	r8,sp,16
 8001608:	acffef16 	blt	r21,r19,80015c8 <__alt_data_end+0xfc0015c8>
 800160c:	d9012c17 	ldw	r4,1200(sp)
 8001610:	1cc7883a 	add	r3,r3,r19
 8001614:	10800044 	addi	r2,r2,1
 8001618:	41000015 	stw	r4,0(r8)
 800161c:	44c00115 	stw	r19,4(r8)
 8001620:	d8c12015 	stw	r3,1152(sp)
 8001624:	d8811f15 	stw	r2,1148(sp)
 8001628:	010001c4 	movi	r4,7
 800162c:	20828216 	blt	r4,r2,8002038 <___vfprintf_internal_r+0x121c>
 8001630:	42000204 	addi	r8,r8,8
 8001634:	e080400c 	andi	r2,fp,256
 8001638:	1001ac1e 	bne	r2,zero,8001cec <___vfprintf_internal_r+0xed0>
 800163c:	d8811f17 	ldw	r2,1148(sp)
 8001640:	d9413117 	ldw	r5,1220(sp)
 8001644:	1c47883a 	add	r3,r3,r17
 8001648:	10800044 	addi	r2,r2,1
 800164c:	41400015 	stw	r5,0(r8)
 8001650:	44400115 	stw	r17,4(r8)
 8001654:	d8c12015 	stw	r3,1152(sp)
 8001658:	d8811f15 	stw	r2,1148(sp)
 800165c:	010001c4 	movi	r4,7
 8001660:	20825d16 	blt	r4,r2,8001fd8 <___vfprintf_internal_r+0x11bc>
 8001664:	42000204 	addi	r8,r8,8
 8001668:	e080010c 	andi	r2,fp,4
 800166c:	10003126 	beq	r2,zero,8001734 <___vfprintf_internal_r+0x918>
 8001670:	d8812e17 	ldw	r2,1208(sp)
 8001674:	d9012b17 	ldw	r4,1196(sp)
 8001678:	1121c83a 	sub	r16,r2,r4
 800167c:	04002d0e 	bge	zero,r16,8001734 <___vfprintf_internal_r+0x918>
 8001680:	04400404 	movi	r17,16
 8001684:	d8811f17 	ldw	r2,1148(sp)
 8001688:	8c05340e 	bge	r17,r16,8002b5c <___vfprintf_internal_r+0x1d40>
 800168c:	01020074 	movhi	r4,2049
 8001690:	21013e84 	addi	r4,r4,1274
 8001694:	d9013615 	stw	r4,1240(sp)
 8001698:	048001c4 	movi	r18,7
 800169c:	00000306 	br	80016ac <___vfprintf_internal_r+0x890>
 80016a0:	843ffc04 	addi	r16,r16,-16
 80016a4:	42000204 	addi	r8,r8,8
 80016a8:	8c00130e 	bge	r17,r16,80016f8 <___vfprintf_internal_r+0x8dc>
 80016ac:	01420074 	movhi	r5,2049
 80016b0:	18c00404 	addi	r3,r3,16
 80016b4:	10800044 	addi	r2,r2,1
 80016b8:	29413e84 	addi	r5,r5,1274
 80016bc:	41400015 	stw	r5,0(r8)
 80016c0:	44400115 	stw	r17,4(r8)
 80016c4:	d8c12015 	stw	r3,1152(sp)
 80016c8:	d8811f15 	stw	r2,1148(sp)
 80016cc:	90bff40e 	bge	r18,r2,80016a0 <__alt_data_end+0xfc0016a0>
 80016d0:	b809883a 	mov	r4,r23
 80016d4:	b00b883a 	mov	r5,r22
 80016d8:	d9811e04 	addi	r6,sp,1144
 80016dc:	800825c0 	call	800825c <__sprint_r>
 80016e0:	103ee61e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 80016e4:	843ffc04 	addi	r16,r16,-16
 80016e8:	d8c12017 	ldw	r3,1152(sp)
 80016ec:	d8811f17 	ldw	r2,1148(sp)
 80016f0:	da000404 	addi	r8,sp,16
 80016f4:	8c3fed16 	blt	r17,r16,80016ac <__alt_data_end+0xfc0016ac>
 80016f8:	d9013617 	ldw	r4,1240(sp)
 80016fc:	1c07883a 	add	r3,r3,r16
 8001700:	10800044 	addi	r2,r2,1
 8001704:	41000015 	stw	r4,0(r8)
 8001708:	44000115 	stw	r16,4(r8)
 800170c:	d8c12015 	stw	r3,1152(sp)
 8001710:	d8811f15 	stw	r2,1148(sp)
 8001714:	010001c4 	movi	r4,7
 8001718:	2080060e 	bge	r4,r2,8001734 <___vfprintf_internal_r+0x918>
 800171c:	b809883a 	mov	r4,r23
 8001720:	b00b883a 	mov	r5,r22
 8001724:	d9811e04 	addi	r6,sp,1144
 8001728:	800825c0 	call	800825c <__sprint_r>
 800172c:	103ed31e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8001730:	d8c12017 	ldw	r3,1152(sp)
 8001734:	df012b17 	ldw	fp,1196(sp)
 8001738:	d9412e17 	ldw	r5,1208(sp)
 800173c:	e140010e 	bge	fp,r5,8001744 <___vfprintf_internal_r+0x928>
 8001740:	2839883a 	mov	fp,r5
 8001744:	d8812f17 	ldw	r2,1212(sp)
 8001748:	1705883a 	add	r2,r2,fp
 800174c:	d8812f15 	stw	r2,1212(sp)
 8001750:	1802291e 	bne	r3,zero,8001ff8 <___vfprintf_internal_r+0x11dc>
 8001754:	d8c12a17 	ldw	r3,1192(sp)
 8001758:	d8011f15 	stw	zero,1148(sp)
 800175c:	da000404 	addi	r8,sp,16
 8001760:	18800007 	ldb	r2,0(r3)
 8001764:	103ded1e 	bne	r2,zero,8000f1c <__alt_data_end+0xfc000f1c>
 8001768:	dc012a17 	ldw	r16,1192(sp)
 800176c:	003e0506 	br	8000f84 <__alt_data_end+0xfc000f84>
 8001770:	d9012d17 	ldw	r4,1204(sp)
 8001774:	d9412d17 	ldw	r5,1204(sp)
 8001778:	da012a17 	ldw	r8,1192(sp)
 800177c:	21000017 	ldw	r4,0(r4)
 8001780:	29400117 	ldw	r5,4(r5)
 8001784:	df012a15 	stw	fp,1192(sp)
 8001788:	9839883a 	mov	fp,r19
 800178c:	dcc12b03 	ldbu	r19,1196(sp)
 8001790:	d9013715 	stw	r4,1244(sp)
 8001794:	d9413915 	stw	r5,1252(sp)
 8001798:	da013f15 	stw	r8,1276(sp)
 800179c:	da413e15 	stw	r9,1272(sp)
 80017a0:	dcc12785 	stb	r19,1182(sp)
 80017a4:	8007eb80 	call	8007eb8 <__fpclassifyd>
 80017a8:	d8c12d17 	ldw	r3,1204(sp)
 80017ac:	04400044 	movi	r17,1
 80017b0:	da013f17 	ldw	r8,1276(sp)
 80017b4:	1c800204 	addi	r18,r3,8
 80017b8:	da413e17 	ldw	r9,1272(sp)
 80017bc:	d9013717 	ldw	r4,1244(sp)
 80017c0:	d9413917 	ldw	r5,1252(sp)
 80017c4:	1443451e 	bne	r2,r17,80024dc <___vfprintf_internal_r+0x16c0>
 80017c8:	000d883a 	mov	r6,zero
 80017cc:	000f883a 	mov	r7,zero
 80017d0:	800c1380 	call	800c138 <__ledf2>
 80017d4:	da013f17 	ldw	r8,1276(sp)
 80017d8:	1004fe16 	blt	r2,zero,8002bd4 <___vfprintf_internal_r+0x1db8>
 80017dc:	dcc12783 	ldbu	r19,1182(sp)
 80017e0:	008011c4 	movi	r2,71
 80017e4:	14045d0e 	bge	r2,r16,800295c <___vfprintf_internal_r+0x1b40>
 80017e8:	01420074 	movhi	r5,2049
 80017ec:	29412b04 	addi	r5,r5,1196
 80017f0:	d9413115 	stw	r5,1220(sp)
 80017f4:	00c000c4 	movi	r3,3
 80017f8:	00bfdfc4 	movi	r2,-129
 80017fc:	d8c12b15 	stw	r3,1196(sp)
 8001800:	e0b8703a 	and	fp,fp,r2
 8001804:	dc812d15 	stw	r18,1204(sp)
 8001808:	1823883a 	mov	r17,r3
 800180c:	d8013215 	stw	zero,1224(sp)
 8001810:	d8013415 	stw	zero,1232(sp)
 8001814:	003f0106 	br	800141c <__alt_data_end+0xfc00141c>
 8001818:	9cc00214 	ori	r19,r19,8
 800181c:	e005883a 	mov	r2,fp
 8001820:	e4000007 	ldb	r16,0(fp)
 8001824:	003de506 	br	8000fbc <__alt_data_end+0xfc000fbc>
 8001828:	da012a17 	ldw	r8,1192(sp)
 800182c:	df012a15 	stw	fp,1192(sp)
 8001830:	9f000414 	ori	fp,r19,16
 8001834:	e0c0080c 	andi	r3,fp,32
 8001838:	d8812d17 	ldw	r2,1204(sp)
 800183c:	18007626 	beq	r3,zero,8001a18 <___vfprintf_internal_r+0xbfc>
 8001840:	d9412d17 	ldw	r5,1204(sp)
 8001844:	14800017 	ldw	r18,0(r2)
 8001848:	15400117 	ldw	r21,4(r2)
 800184c:	29400204 	addi	r5,r5,8
 8001850:	d9412d15 	stw	r5,1204(sp)
 8001854:	0005883a 	mov	r2,zero
 8001858:	9546b03a 	or	r3,r18,r21
 800185c:	d8012785 	stb	zero,1182(sp)
 8001860:	da413215 	stw	r9,1224(sp)
 8001864:	0027883a 	mov	r19,zero
 8001868:	003ecd06 	br	80013a0 <__alt_data_end+0xfc0013a0>
 800186c:	da012a17 	ldw	r8,1192(sp)
 8001870:	df012a15 	stw	fp,1192(sp)
 8001874:	9f000414 	ori	fp,r19,16
 8001878:	e0c0080c 	andi	r3,fp,32
 800187c:	d8812d17 	ldw	r2,1204(sp)
 8001880:	18002c26 	beq	r3,zero,8001934 <___vfprintf_internal_r+0xb18>
 8001884:	d9012d17 	ldw	r4,1204(sp)
 8001888:	14800017 	ldw	r18,0(r2)
 800188c:	15400117 	ldw	r21,4(r2)
 8001890:	21000204 	addi	r4,r4,8
 8001894:	d9012d15 	stw	r4,1204(sp)
 8001898:	00800044 	movi	r2,1
 800189c:	9546b03a 	or	r3,r18,r21
 80018a0:	003fee06 	br	800185c <__alt_data_end+0xfc00185c>
 80018a4:	da012a17 	ldw	r8,1192(sp)
 80018a8:	df012a15 	stw	fp,1192(sp)
 80018ac:	9839883a 	mov	fp,r19
 80018b0:	dcc12b03 	ldbu	r19,1196(sp)
 80018b4:	01420074 	movhi	r5,2049
 80018b8:	29412e04 	addi	r5,r5,1208
 80018bc:	dcc12785 	stb	r19,1182(sp)
 80018c0:	d9413b15 	stw	r5,1260(sp)
 80018c4:	e0c0080c 	andi	r3,fp,32
 80018c8:	d8812d17 	ldw	r2,1204(sp)
 80018cc:	18002e26 	beq	r3,zero,8001988 <___vfprintf_internal_r+0xb6c>
 80018d0:	d9412d17 	ldw	r5,1204(sp)
 80018d4:	14800017 	ldw	r18,0(r2)
 80018d8:	15400117 	ldw	r21,4(r2)
 80018dc:	29400204 	addi	r5,r5,8
 80018e0:	d9412d15 	stw	r5,1204(sp)
 80018e4:	e080004c 	andi	r2,fp,1
 80018e8:	10025c26 	beq	r2,zero,800225c <___vfprintf_internal_r+0x1440>
 80018ec:	9546b03a 	or	r3,r18,r21
 80018f0:	18038f26 	beq	r3,zero,8002730 <___vfprintf_internal_r+0x1914>
 80018f4:	00800c04 	movi	r2,48
 80018f8:	d8812705 	stb	r2,1180(sp)
 80018fc:	dc012745 	stb	r16,1181(sp)
 8001900:	e7000094 	ori	fp,fp,2
 8001904:	00800084 	movi	r2,2
 8001908:	003fd406 	br	800185c <__alt_data_end+0xfc00185c>
 800190c:	9cc00814 	ori	r19,r19,32
 8001910:	e005883a 	mov	r2,fp
 8001914:	e4000007 	ldb	r16,0(fp)
 8001918:	003da806 	br	8000fbc <__alt_data_end+0xfc000fbc>
 800191c:	da012a17 	ldw	r8,1192(sp)
 8001920:	df012a15 	stw	fp,1192(sp)
 8001924:	9839883a 	mov	fp,r19
 8001928:	e0c0080c 	andi	r3,fp,32
 800192c:	d8812d17 	ldw	r2,1204(sp)
 8001930:	183fd41e 	bne	r3,zero,8001884 <__alt_data_end+0xfc001884>
 8001934:	e0c0040c 	andi	r3,fp,16
 8001938:	18035f26 	beq	r3,zero,80026b8 <___vfprintf_internal_r+0x189c>
 800193c:	d9412d17 	ldw	r5,1204(sp)
 8001940:	14800017 	ldw	r18,0(r2)
 8001944:	002b883a 	mov	r21,zero
 8001948:	29400104 	addi	r5,r5,4
 800194c:	d9412d15 	stw	r5,1204(sp)
 8001950:	00800044 	movi	r2,1
 8001954:	9007883a 	mov	r3,r18
 8001958:	003fc006 	br	800185c <__alt_data_end+0xfc00185c>
 800195c:	da012a17 	ldw	r8,1192(sp)
 8001960:	df012a15 	stw	fp,1192(sp)
 8001964:	9839883a 	mov	fp,r19
 8001968:	dcc12b03 	ldbu	r19,1196(sp)
 800196c:	01020074 	movhi	r4,2049
 8001970:	21013304 	addi	r4,r4,1228
 8001974:	d9013b15 	stw	r4,1260(sp)
 8001978:	dcc12785 	stb	r19,1182(sp)
 800197c:	e0c0080c 	andi	r3,fp,32
 8001980:	d8812d17 	ldw	r2,1204(sp)
 8001984:	183fd21e 	bne	r3,zero,80018d0 <__alt_data_end+0xfc0018d0>
 8001988:	e0c0040c 	andi	r3,fp,16
 800198c:	18035426 	beq	r3,zero,80026e0 <___vfprintf_internal_r+0x18c4>
 8001990:	d8c12d17 	ldw	r3,1204(sp)
 8001994:	14800017 	ldw	r18,0(r2)
 8001998:	002b883a 	mov	r21,zero
 800199c:	18c00104 	addi	r3,r3,4
 80019a0:	d8c12d15 	stw	r3,1204(sp)
 80019a4:	003fcf06 	br	80018e4 <__alt_data_end+0xfc0018e4>
 80019a8:	e4000007 	ldb	r16,0(fp)
 80019ac:	00801b04 	movi	r2,108
 80019b0:	8083f726 	beq	r16,r2,8002990 <___vfprintf_internal_r+0x1b74>
 80019b4:	9cc00414 	ori	r19,r19,16
 80019b8:	e005883a 	mov	r2,fp
 80019bc:	003d7f06 	br	8000fbc <__alt_data_end+0xfc000fbc>
 80019c0:	da012a17 	ldw	r8,1192(sp)
 80019c4:	df012a15 	stw	fp,1192(sp)
 80019c8:	9839883a 	mov	fp,r19
 80019cc:	dcc12b03 	ldbu	r19,1196(sp)
 80019d0:	e080080c 	andi	r2,fp,32
 80019d4:	dcc12785 	stb	r19,1182(sp)
 80019d8:	10032226 	beq	r2,zero,8002664 <___vfprintf_internal_r+0x1848>
 80019dc:	d9412d17 	ldw	r5,1204(sp)
 80019e0:	d9012f17 	ldw	r4,1212(sp)
 80019e4:	28800017 	ldw	r2,0(r5)
 80019e8:	2007d7fa 	srai	r3,r4,31
 80019ec:	29400104 	addi	r5,r5,4
 80019f0:	d9412d15 	stw	r5,1204(sp)
 80019f4:	11000015 	stw	r4,0(r2)
 80019f8:	10c00115 	stw	r3,4(r2)
 80019fc:	003d4406 	br	8000f10 <__alt_data_end+0xfc000f10>
 8001a00:	da012a17 	ldw	r8,1192(sp)
 8001a04:	df012a15 	stw	fp,1192(sp)
 8001a08:	9839883a 	mov	fp,r19
 8001a0c:	e0c0080c 	andi	r3,fp,32
 8001a10:	d8812d17 	ldw	r2,1204(sp)
 8001a14:	183f8a1e 	bne	r3,zero,8001840 <__alt_data_end+0xfc001840>
 8001a18:	e0c0040c 	andi	r3,fp,16
 8001a1c:	18031c26 	beq	r3,zero,8002690 <___vfprintf_internal_r+0x1874>
 8001a20:	14800017 	ldw	r18,0(r2)
 8001a24:	d8812d17 	ldw	r2,1204(sp)
 8001a28:	002b883a 	mov	r21,zero
 8001a2c:	9007883a 	mov	r3,r18
 8001a30:	10800104 	addi	r2,r2,4
 8001a34:	d8812d15 	stw	r2,1204(sp)
 8001a38:	0005883a 	mov	r2,zero
 8001a3c:	003f8706 	br	800185c <__alt_data_end+0xfc00185c>
 8001a40:	d9412d17 	ldw	r5,1204(sp)
 8001a44:	00800c04 	movi	r2,48
 8001a48:	d8812705 	stb	r2,1180(sp)
 8001a4c:	2c800017 	ldw	r18,0(r5)
 8001a50:	00801e04 	movi	r2,120
 8001a54:	d8812745 	stb	r2,1181(sp)
 8001a58:	00820074 	movhi	r2,2049
 8001a5c:	10813304 	addi	r2,r2,1228
 8001a60:	29400104 	addi	r5,r5,4
 8001a64:	da012a17 	ldw	r8,1192(sp)
 8001a68:	d8813b15 	stw	r2,1260(sp)
 8001a6c:	df012a15 	stw	fp,1192(sp)
 8001a70:	002b883a 	mov	r21,zero
 8001a74:	9f000094 	ori	fp,r19,2
 8001a78:	d9412d15 	stw	r5,1204(sp)
 8001a7c:	00800084 	movi	r2,2
 8001a80:	04001e04 	movi	r16,120
 8001a84:	9007883a 	mov	r3,r18
 8001a88:	003f7406 	br	800185c <__alt_data_end+0xfc00185c>
 8001a8c:	da012a17 	ldw	r8,1192(sp)
 8001a90:	df012a15 	stw	fp,1192(sp)
 8001a94:	9839883a 	mov	fp,r19
 8001a98:	dcc12b03 	ldbu	r19,1196(sp)
 8001a9c:	e080080c 	andi	r2,fp,32
 8001aa0:	d8c12d17 	ldw	r3,1204(sp)
 8001aa4:	dcc12785 	stb	r19,1182(sp)
 8001aa8:	103e321e 	bne	r2,zero,8001374 <__alt_data_end+0xfc001374>
 8001aac:	e080040c 	andi	r2,fp,16
 8001ab0:	10031326 	beq	r2,zero,8002700 <___vfprintf_internal_r+0x18e4>
 8001ab4:	1c800017 	ldw	r18,0(r3)
 8001ab8:	d9412d17 	ldw	r5,1204(sp)
 8001abc:	902bd7fa 	srai	r21,r18,31
 8001ac0:	29400104 	addi	r5,r5,4
 8001ac4:	d9412d15 	stw	r5,1204(sp)
 8001ac8:	a805883a 	mov	r2,r21
 8001acc:	003e2f06 	br	800138c <__alt_data_end+0xfc00138c>
 8001ad0:	9cc01014 	ori	r19,r19,64
 8001ad4:	e005883a 	mov	r2,fp
 8001ad8:	e4000007 	ldb	r16,0(fp)
 8001adc:	003d3706 	br	8000fbc <__alt_data_end+0xfc000fbc>
 8001ae0:	d8c12d17 	ldw	r3,1204(sp)
 8001ae4:	d9012d17 	ldw	r4,1204(sp)
 8001ae8:	da012a17 	ldw	r8,1192(sp)
 8001aec:	18800017 	ldw	r2,0(r3)
 8001af0:	21000104 	addi	r4,r4,4
 8001af4:	00c00044 	movi	r3,1
 8001af8:	df012a15 	stw	fp,1192(sp)
 8001afc:	d8c12b15 	stw	r3,1196(sp)
 8001b00:	9839883a 	mov	fp,r19
 8001b04:	d8012785 	stb	zero,1182(sp)
 8001b08:	d8810405 	stb	r2,1040(sp)
 8001b0c:	d9012d15 	stw	r4,1204(sp)
 8001b10:	1823883a 	mov	r17,r3
 8001b14:	d8c10404 	addi	r3,sp,1040
 8001b18:	d8013215 	stw	zero,1224(sp)
 8001b1c:	d8013415 	stw	zero,1232(sp)
 8001b20:	d8c13115 	stw	r3,1220(sp)
 8001b24:	0005883a 	mov	r2,zero
 8001b28:	003e4306 	br	8001438 <__alt_data_end+0xfc001438>
 8001b2c:	d8812b07 	ldb	r2,1196(sp)
 8001b30:	1002fc1e 	bne	r2,zero,8002724 <___vfprintf_internal_r+0x1908>
 8001b34:	00c00804 	movi	r3,32
 8001b38:	d8c12b05 	stb	r3,1196(sp)
 8001b3c:	e005883a 	mov	r2,fp
 8001b40:	e4000007 	ldb	r16,0(fp)
 8001b44:	003d1d06 	br	8000fbc <__alt_data_end+0xfc000fbc>
 8001b48:	9cc00054 	ori	r19,r19,1
 8001b4c:	e005883a 	mov	r2,fp
 8001b50:	e4000007 	ldb	r16,0(fp)
 8001b54:	003d1906 	br	8000fbc <__alt_data_end+0xfc000fbc>
 8001b58:	d9012d17 	ldw	r4,1204(sp)
 8001b5c:	d9412d17 	ldw	r5,1204(sp)
 8001b60:	21000017 	ldw	r4,0(r4)
 8001b64:	28c00104 	addi	r3,r5,4
 8001b68:	d9012e15 	stw	r4,1208(sp)
 8001b6c:	20038c16 	blt	r4,zero,80029a0 <___vfprintf_internal_r+0x1b84>
 8001b70:	d8c12d15 	stw	r3,1204(sp)
 8001b74:	e005883a 	mov	r2,fp
 8001b78:	e4000007 	ldb	r16,0(fp)
 8001b7c:	003d0f06 	br	8000fbc <__alt_data_end+0xfc000fbc>
 8001b80:	00c00ac4 	movi	r3,43
 8001b84:	d8c12b05 	stb	r3,1196(sp)
 8001b88:	e005883a 	mov	r2,fp
 8001b8c:	e4000007 	ldb	r16,0(fp)
 8001b90:	003d0a06 	br	8000fbc <__alt_data_end+0xfc000fbc>
 8001b94:	d8c12d17 	ldw	r3,1204(sp)
 8001b98:	d9012d17 	ldw	r4,1204(sp)
 8001b9c:	da012a17 	ldw	r8,1192(sp)
 8001ba0:	18c00017 	ldw	r3,0(r3)
 8001ba4:	df012a15 	stw	fp,1192(sp)
 8001ba8:	d8012785 	stb	zero,1182(sp)
 8001bac:	d8c13115 	stw	r3,1220(sp)
 8001bb0:	9839883a 	mov	fp,r19
 8001bb4:	24800104 	addi	r18,r4,4
 8001bb8:	1803f726 	beq	r3,zero,8002b98 <___vfprintf_internal_r+0x1d7c>
 8001bbc:	d9013117 	ldw	r4,1220(sp)
 8001bc0:	48038916 	blt	r9,zero,80029e8 <___vfprintf_internal_r+0x1bcc>
 8001bc4:	480d883a 	mov	r6,r9
 8001bc8:	000b883a 	mov	r5,zero
 8001bcc:	da013f15 	stw	r8,1276(sp)
 8001bd0:	da413e15 	stw	r9,1272(sp)
 8001bd4:	80064300 	call	8006430 <memchr>
 8001bd8:	da013f17 	ldw	r8,1276(sp)
 8001bdc:	da413e17 	ldw	r9,1272(sp)
 8001be0:	10045926 	beq	r2,zero,8002d48 <___vfprintf_internal_r+0x1f2c>
 8001be4:	d8c13117 	ldw	r3,1220(sp)
 8001be8:	10e3c83a 	sub	r17,r2,r3
 8001bec:	4c433516 	blt	r9,r17,80028c4 <___vfprintf_internal_r+0x1aa8>
 8001bf0:	8805883a 	mov	r2,r17
 8001bf4:	88038116 	blt	r17,zero,80029fc <___vfprintf_internal_r+0x1be0>
 8001bf8:	dcc12783 	ldbu	r19,1182(sp)
 8001bfc:	d8812b15 	stw	r2,1196(sp)
 8001c00:	dc812d15 	stw	r18,1204(sp)
 8001c04:	d8013215 	stw	zero,1224(sp)
 8001c08:	d8013415 	stw	zero,1232(sp)
 8001c0c:	003e0306 	br	800141c <__alt_data_end+0xfc00141c>
 8001c10:	da012a17 	ldw	r8,1192(sp)
 8001c14:	df012a15 	stw	fp,1192(sp)
 8001c18:	9839883a 	mov	fp,r19
 8001c1c:	dcc12b03 	ldbu	r19,1196(sp)
 8001c20:	dcc12785 	stb	r19,1182(sp)
 8001c24:	803d8f26 	beq	r16,zero,8001264 <__alt_data_end+0xfc001264>
 8001c28:	00c00044 	movi	r3,1
 8001c2c:	d8c12b15 	stw	r3,1196(sp)
 8001c30:	dc010405 	stb	r16,1040(sp)
 8001c34:	d8012785 	stb	zero,1182(sp)
 8001c38:	003fb506 	br	8001b10 <__alt_data_end+0xfc001b10>
 8001c3c:	d8c12017 	ldw	r3,1152(sp)
 8001c40:	003e3506 	br	8001518 <__alt_data_end+0xfc001518>
 8001c44:	10803fcc 	andi	r2,r2,255
 8001c48:	00c00044 	movi	r3,1
 8001c4c:	10fddc1e 	bne	r2,r3,80013c0 <__alt_data_end+0xfc0013c0>
 8001c50:	a800021e 	bne	r21,zero,8001c5c <___vfprintf_internal_r+0xe40>
 8001c54:	00800244 	movi	r2,9
 8001c58:	14801e2e 	bgeu	r2,r18,8001cd4 <___vfprintf_internal_r+0xeb8>
 8001c5c:	dc012b15 	stw	r16,1196(sp)
 8001c60:	dc410e04 	addi	r17,sp,1080
 8001c64:	9021883a 	mov	r16,r18
 8001c68:	da012c15 	stw	r8,1200(sp)
 8001c6c:	a825883a 	mov	r18,r21
 8001c70:	482b883a 	mov	r21,r9
 8001c74:	8009883a 	mov	r4,r16
 8001c78:	900b883a 	mov	r5,r18
 8001c7c:	01800284 	movi	r6,10
 8001c80:	000f883a 	mov	r7,zero
 8001c84:	800a6480 	call	800a648 <__umoddi3>
 8001c88:	10800c04 	addi	r2,r2,48
 8001c8c:	8c7fffc4 	addi	r17,r17,-1
 8001c90:	8009883a 	mov	r4,r16
 8001c94:	900b883a 	mov	r5,r18
 8001c98:	01800284 	movi	r6,10
 8001c9c:	000f883a 	mov	r7,zero
 8001ca0:	88800005 	stb	r2,0(r17)
 8001ca4:	800a0080 	call	800a008 <__udivdi3>
 8001ca8:	1021883a 	mov	r16,r2
 8001cac:	10c4b03a 	or	r2,r2,r3
 8001cb0:	1825883a 	mov	r18,r3
 8001cb4:	103fef1e 	bne	r2,zero,8001c74 <__alt_data_end+0xfc001c74>
 8001cb8:	d9012817 	ldw	r4,1184(sp)
 8001cbc:	dc413115 	stw	r17,1220(sp)
 8001cc0:	dc012b17 	ldw	r16,1196(sp)
 8001cc4:	da012c17 	ldw	r8,1200(sp)
 8001cc8:	a813883a 	mov	r9,r21
 8001ccc:	2463c83a 	sub	r17,r4,r17
 8001cd0:	003dcd06 	br	8001408 <__alt_data_end+0xfc001408>
 8001cd4:	94800c04 	addi	r18,r18,48
 8001cd8:	d8c10dc4 	addi	r3,sp,1079
 8001cdc:	dc810dc5 	stb	r18,1079(sp)
 8001ce0:	dc413c17 	ldw	r17,1264(sp)
 8001ce4:	d8c13115 	stw	r3,1220(sp)
 8001ce8:	003dc706 	br	8001408 <__alt_data_end+0xfc001408>
 8001cec:	00801944 	movi	r2,101
 8001cf0:	1400720e 	bge	r2,r16,8001ebc <___vfprintf_internal_r+0x10a0>
 8001cf4:	d9013717 	ldw	r4,1244(sp)
 8001cf8:	d9413917 	ldw	r5,1252(sp)
 8001cfc:	000d883a 	mov	r6,zero
 8001d00:	000f883a 	mov	r7,zero
 8001d04:	d8c13d15 	stw	r3,1268(sp)
 8001d08:	da013f15 	stw	r8,1276(sp)
 8001d0c:	800bfd40 	call	800bfd4 <__eqdf2>
 8001d10:	d8c13d17 	ldw	r3,1268(sp)
 8001d14:	da013f17 	ldw	r8,1276(sp)
 8001d18:	1000f41e 	bne	r2,zero,80020ec <___vfprintf_internal_r+0x12d0>
 8001d1c:	d8811f17 	ldw	r2,1148(sp)
 8001d20:	01020074 	movhi	r4,2049
 8001d24:	21013a04 	addi	r4,r4,1256
 8001d28:	18c00044 	addi	r3,r3,1
 8001d2c:	10800044 	addi	r2,r2,1
 8001d30:	41000015 	stw	r4,0(r8)
 8001d34:	01000044 	movi	r4,1
 8001d38:	41000115 	stw	r4,4(r8)
 8001d3c:	d8c12015 	stw	r3,1152(sp)
 8001d40:	d8811f15 	stw	r2,1148(sp)
 8001d44:	010001c4 	movi	r4,7
 8001d48:	20828d16 	blt	r4,r2,8002780 <___vfprintf_internal_r+0x1964>
 8001d4c:	42000204 	addi	r8,r8,8
 8001d50:	d8812617 	ldw	r2,1176(sp)
 8001d54:	d9413317 	ldw	r5,1228(sp)
 8001d58:	11400216 	blt	r2,r5,8001d64 <___vfprintf_internal_r+0xf48>
 8001d5c:	e080004c 	andi	r2,fp,1
 8001d60:	103e4126 	beq	r2,zero,8001668 <__alt_data_end+0xfc001668>
 8001d64:	d8813817 	ldw	r2,1248(sp)
 8001d68:	d9013517 	ldw	r4,1236(sp)
 8001d6c:	d9413817 	ldw	r5,1248(sp)
 8001d70:	1887883a 	add	r3,r3,r2
 8001d74:	d8811f17 	ldw	r2,1148(sp)
 8001d78:	41000015 	stw	r4,0(r8)
 8001d7c:	41400115 	stw	r5,4(r8)
 8001d80:	10800044 	addi	r2,r2,1
 8001d84:	d8c12015 	stw	r3,1152(sp)
 8001d88:	d8811f15 	stw	r2,1148(sp)
 8001d8c:	010001c4 	movi	r4,7
 8001d90:	20830916 	blt	r4,r2,80029b8 <___vfprintf_internal_r+0x1b9c>
 8001d94:	42000204 	addi	r8,r8,8
 8001d98:	d8813317 	ldw	r2,1228(sp)
 8001d9c:	143fffc4 	addi	r16,r2,-1
 8001da0:	043e310e 	bge	zero,r16,8001668 <__alt_data_end+0xfc001668>
 8001da4:	04400404 	movi	r17,16
 8001da8:	d8811f17 	ldw	r2,1148(sp)
 8001dac:	8c007e0e 	bge	r17,r16,8001fa8 <___vfprintf_internal_r+0x118c>
 8001db0:	01420074 	movhi	r5,2049
 8001db4:	29413a84 	addi	r5,r5,1258
 8001db8:	d9412c15 	stw	r5,1200(sp)
 8001dbc:	04c001c4 	movi	r19,7
 8001dc0:	00000306 	br	8001dd0 <___vfprintf_internal_r+0xfb4>
 8001dc4:	42000204 	addi	r8,r8,8
 8001dc8:	843ffc04 	addi	r16,r16,-16
 8001dcc:	8c00790e 	bge	r17,r16,8001fb4 <___vfprintf_internal_r+0x1198>
 8001dd0:	18c00404 	addi	r3,r3,16
 8001dd4:	10800044 	addi	r2,r2,1
 8001dd8:	45000015 	stw	r20,0(r8)
 8001ddc:	44400115 	stw	r17,4(r8)
 8001de0:	d8c12015 	stw	r3,1152(sp)
 8001de4:	d8811f15 	stw	r2,1148(sp)
 8001de8:	98bff60e 	bge	r19,r2,8001dc4 <__alt_data_end+0xfc001dc4>
 8001dec:	b809883a 	mov	r4,r23
 8001df0:	b00b883a 	mov	r5,r22
 8001df4:	d9811e04 	addi	r6,sp,1144
 8001df8:	800825c0 	call	800825c <__sprint_r>
 8001dfc:	103d1f1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8001e00:	d8c12017 	ldw	r3,1152(sp)
 8001e04:	d8811f17 	ldw	r2,1148(sp)
 8001e08:	da000404 	addi	r8,sp,16
 8001e0c:	003fee06 	br	8001dc8 <__alt_data_end+0xfc001dc8>
 8001e10:	d9412e17 	ldw	r5,1208(sp)
 8001e14:	d8812b17 	ldw	r2,1196(sp)
 8001e18:	28a7c83a 	sub	r19,r5,r2
 8001e1c:	04fddc0e 	bge	zero,r19,8001590 <__alt_data_end+0xfc001590>
 8001e20:	05400404 	movi	r21,16
 8001e24:	d8811f17 	ldw	r2,1148(sp)
 8001e28:	acc3870e 	bge	r21,r19,8002c48 <___vfprintf_internal_r+0x1e2c>
 8001e2c:	01420074 	movhi	r5,2049
 8001e30:	29413a84 	addi	r5,r5,1258
 8001e34:	d9412c15 	stw	r5,1200(sp)
 8001e38:	048001c4 	movi	r18,7
 8001e3c:	00000306 	br	8001e4c <___vfprintf_internal_r+0x1030>
 8001e40:	9cfffc04 	addi	r19,r19,-16
 8001e44:	42000204 	addi	r8,r8,8
 8001e48:	acc0110e 	bge	r21,r19,8001e90 <___vfprintf_internal_r+0x1074>
 8001e4c:	18c00404 	addi	r3,r3,16
 8001e50:	10800044 	addi	r2,r2,1
 8001e54:	45000015 	stw	r20,0(r8)
 8001e58:	45400115 	stw	r21,4(r8)
 8001e5c:	d8c12015 	stw	r3,1152(sp)
 8001e60:	d8811f15 	stw	r2,1148(sp)
 8001e64:	90bff60e 	bge	r18,r2,8001e40 <__alt_data_end+0xfc001e40>
 8001e68:	b809883a 	mov	r4,r23
 8001e6c:	b00b883a 	mov	r5,r22
 8001e70:	d9811e04 	addi	r6,sp,1144
 8001e74:	800825c0 	call	800825c <__sprint_r>
 8001e78:	103d001e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8001e7c:	9cfffc04 	addi	r19,r19,-16
 8001e80:	d8c12017 	ldw	r3,1152(sp)
 8001e84:	d8811f17 	ldw	r2,1148(sp)
 8001e88:	da000404 	addi	r8,sp,16
 8001e8c:	acffef16 	blt	r21,r19,8001e4c <__alt_data_end+0xfc001e4c>
 8001e90:	d9012c17 	ldw	r4,1200(sp)
 8001e94:	1cc7883a 	add	r3,r3,r19
 8001e98:	10800044 	addi	r2,r2,1
 8001e9c:	41000015 	stw	r4,0(r8)
 8001ea0:	44c00115 	stw	r19,4(r8)
 8001ea4:	d8c12015 	stw	r3,1152(sp)
 8001ea8:	d8811f15 	stw	r2,1148(sp)
 8001eac:	010001c4 	movi	r4,7
 8001eb0:	20817816 	blt	r4,r2,8002494 <___vfprintf_internal_r+0x1678>
 8001eb4:	42000204 	addi	r8,r8,8
 8001eb8:	003db506 	br	8001590 <__alt_data_end+0xfc001590>
 8001ebc:	d9413317 	ldw	r5,1228(sp)
 8001ec0:	00800044 	movi	r2,1
 8001ec4:	18c00044 	addi	r3,r3,1
 8001ec8:	11413e0e 	bge	r2,r5,80023c4 <___vfprintf_internal_r+0x15a8>
 8001ecc:	dc011f17 	ldw	r16,1148(sp)
 8001ed0:	d8813117 	ldw	r2,1220(sp)
 8001ed4:	d8c12015 	stw	r3,1152(sp)
 8001ed8:	84000044 	addi	r16,r16,1
 8001edc:	40800015 	stw	r2,0(r8)
 8001ee0:	00800044 	movi	r2,1
 8001ee4:	40800115 	stw	r2,4(r8)
 8001ee8:	dc011f15 	stw	r16,1148(sp)
 8001eec:	008001c4 	movi	r2,7
 8001ef0:	14015616 	blt	r2,r16,800244c <___vfprintf_internal_r+0x1630>
 8001ef4:	42000204 	addi	r8,r8,8
 8001ef8:	d9013817 	ldw	r4,1248(sp)
 8001efc:	d9413517 	ldw	r5,1236(sp)
 8001f00:	84000044 	addi	r16,r16,1
 8001f04:	1907883a 	add	r3,r3,r4
 8001f08:	41400015 	stw	r5,0(r8)
 8001f0c:	41000115 	stw	r4,4(r8)
 8001f10:	d8c12015 	stw	r3,1152(sp)
 8001f14:	dc011f15 	stw	r16,1148(sp)
 8001f18:	008001c4 	movi	r2,7
 8001f1c:	14015416 	blt	r2,r16,8002470 <___vfprintf_internal_r+0x1654>
 8001f20:	44400204 	addi	r17,r8,8
 8001f24:	d9013717 	ldw	r4,1244(sp)
 8001f28:	d9413917 	ldw	r5,1252(sp)
 8001f2c:	000d883a 	mov	r6,zero
 8001f30:	000f883a 	mov	r7,zero
 8001f34:	d8c13d15 	stw	r3,1268(sp)
 8001f38:	800bfd40 	call	800bfd4 <__eqdf2>
 8001f3c:	d8c13d17 	ldw	r3,1268(sp)
 8001f40:	1000a726 	beq	r2,zero,80021e0 <___vfprintf_internal_r+0x13c4>
 8001f44:	d9013317 	ldw	r4,1228(sp)
 8001f48:	d9413117 	ldw	r5,1220(sp)
 8001f4c:	84000044 	addi	r16,r16,1
 8001f50:	20bfffc4 	addi	r2,r4,-1
 8001f54:	1887883a 	add	r3,r3,r2
 8001f58:	29000044 	addi	r4,r5,1
 8001f5c:	88800115 	stw	r2,4(r17)
 8001f60:	89000015 	stw	r4,0(r17)
 8001f64:	d8c12015 	stw	r3,1152(sp)
 8001f68:	dc011f15 	stw	r16,1148(sp)
 8001f6c:	008001c4 	movi	r2,7
 8001f70:	14012d16 	blt	r2,r16,8002428 <___vfprintf_internal_r+0x160c>
 8001f74:	8c400204 	addi	r17,r17,8
 8001f78:	d9413a17 	ldw	r5,1256(sp)
 8001f7c:	dcc122c4 	addi	r19,sp,1163
 8001f80:	84000044 	addi	r16,r16,1
 8001f84:	28c7883a 	add	r3,r5,r3
 8001f88:	8cc00015 	stw	r19,0(r17)
 8001f8c:	89400115 	stw	r5,4(r17)
 8001f90:	d8c12015 	stw	r3,1152(sp)
 8001f94:	dc011f15 	stw	r16,1148(sp)
 8001f98:	008001c4 	movi	r2,7
 8001f9c:	14000e16 	blt	r2,r16,8001fd8 <___vfprintf_internal_r+0x11bc>
 8001fa0:	8a000204 	addi	r8,r17,8
 8001fa4:	003db006 	br	8001668 <__alt_data_end+0xfc001668>
 8001fa8:	01020074 	movhi	r4,2049
 8001fac:	21013a84 	addi	r4,r4,1258
 8001fb0:	d9012c15 	stw	r4,1200(sp)
 8001fb4:	d9012c17 	ldw	r4,1200(sp)
 8001fb8:	1c07883a 	add	r3,r3,r16
 8001fbc:	44000115 	stw	r16,4(r8)
 8001fc0:	41000015 	stw	r4,0(r8)
 8001fc4:	10800044 	addi	r2,r2,1
 8001fc8:	d8c12015 	stw	r3,1152(sp)
 8001fcc:	d8811f15 	stw	r2,1148(sp)
 8001fd0:	010001c4 	movi	r4,7
 8001fd4:	20bda30e 	bge	r4,r2,8001664 <__alt_data_end+0xfc001664>
 8001fd8:	b809883a 	mov	r4,r23
 8001fdc:	b00b883a 	mov	r5,r22
 8001fe0:	d9811e04 	addi	r6,sp,1144
 8001fe4:	800825c0 	call	800825c <__sprint_r>
 8001fe8:	103ca41e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8001fec:	d8c12017 	ldw	r3,1152(sp)
 8001ff0:	da000404 	addi	r8,sp,16
 8001ff4:	003d9c06 	br	8001668 <__alt_data_end+0xfc001668>
 8001ff8:	b809883a 	mov	r4,r23
 8001ffc:	b00b883a 	mov	r5,r22
 8002000:	d9811e04 	addi	r6,sp,1144
 8002004:	800825c0 	call	800825c <__sprint_r>
 8002008:	103dd226 	beq	r2,zero,8001754 <__alt_data_end+0xfc001754>
 800200c:	003c9b06 	br	800127c <__alt_data_end+0xfc00127c>
 8002010:	10803fcc 	andi	r2,r2,255
 8002014:	1000311e 	bne	r2,zero,80020dc <___vfprintf_internal_r+0x12c0>
 8002018:	e080004c 	andi	r2,fp,1
 800201c:	10002f26 	beq	r2,zero,80020dc <___vfprintf_internal_r+0x12c0>
 8002020:	00800c04 	movi	r2,48
 8002024:	d8c10dc4 	addi	r3,sp,1079
 8002028:	d8810dc5 	stb	r2,1079(sp)
 800202c:	dc413c17 	ldw	r17,1264(sp)
 8002030:	d8c13115 	stw	r3,1220(sp)
 8002034:	003cf406 	br	8001408 <__alt_data_end+0xfc001408>
 8002038:	b809883a 	mov	r4,r23
 800203c:	b00b883a 	mov	r5,r22
 8002040:	d9811e04 	addi	r6,sp,1144
 8002044:	800825c0 	call	800825c <__sprint_r>
 8002048:	103c8c1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 800204c:	d8c12017 	ldw	r3,1152(sp)
 8002050:	da000404 	addi	r8,sp,16
 8002054:	003d7706 	br	8001634 <__alt_data_end+0xfc001634>
 8002058:	b809883a 	mov	r4,r23
 800205c:	b00b883a 	mov	r5,r22
 8002060:	d9811e04 	addi	r6,sp,1144
 8002064:	800825c0 	call	800825c <__sprint_r>
 8002068:	103c841e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 800206c:	d8c12017 	ldw	r3,1152(sp)
 8002070:	da000404 	addi	r8,sp,16
 8002074:	003d3506 	br	800154c <__alt_data_end+0xfc00154c>
 8002078:	b809883a 	mov	r4,r23
 800207c:	b00b883a 	mov	r5,r22
 8002080:	d9811e04 	addi	r6,sp,1144
 8002084:	800825c0 	call	800825c <__sprint_r>
 8002088:	103c7c1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 800208c:	d8c12017 	ldw	r3,1152(sp)
 8002090:	da000404 	addi	r8,sp,16
 8002094:	003d3b06 	br	8001584 <__alt_data_end+0xfc001584>
 8002098:	d9413b17 	ldw	r5,1260(sp)
 800209c:	d8c10e04 	addi	r3,sp,1080
 80020a0:	908003cc 	andi	r2,r18,15
 80020a4:	a808973a 	slli	r4,r21,28
 80020a8:	2885883a 	add	r2,r5,r2
 80020ac:	9024d13a 	srli	r18,r18,4
 80020b0:	10800003 	ldbu	r2,0(r2)
 80020b4:	a82ad13a 	srli	r21,r21,4
 80020b8:	18ffffc4 	addi	r3,r3,-1
 80020bc:	24a4b03a 	or	r18,r4,r18
 80020c0:	18800005 	stb	r2,0(r3)
 80020c4:	9544b03a 	or	r2,r18,r21
 80020c8:	103ff51e 	bne	r2,zero,80020a0 <__alt_data_end+0xfc0020a0>
 80020cc:	d9412817 	ldw	r5,1184(sp)
 80020d0:	d8c13115 	stw	r3,1220(sp)
 80020d4:	28e3c83a 	sub	r17,r5,r3
 80020d8:	003ccb06 	br	8001408 <__alt_data_end+0xfc001408>
 80020dc:	d8c10e04 	addi	r3,sp,1080
 80020e0:	0023883a 	mov	r17,zero
 80020e4:	d8c13115 	stw	r3,1220(sp)
 80020e8:	003cc706 	br	8001408 <__alt_data_end+0xfc001408>
 80020ec:	dc012617 	ldw	r16,1176(sp)
 80020f0:	0401ab0e 	bge	zero,r16,80027a0 <___vfprintf_internal_r+0x1984>
 80020f4:	d8813317 	ldw	r2,1228(sp)
 80020f8:	d9413117 	ldw	r5,1220(sp)
 80020fc:	d9013417 	ldw	r4,1232(sp)
 8002100:	1023883a 	mov	r17,r2
 8002104:	28a1883a 	add	r16,r5,r2
 8002108:	2080010e 	bge	r4,r2,8002110 <___vfprintf_internal_r+0x12f4>
 800210c:	2023883a 	mov	r17,r4
 8002110:	04400b0e 	bge	zero,r17,8002140 <___vfprintf_internal_r+0x1324>
 8002114:	d8811f17 	ldw	r2,1148(sp)
 8002118:	d9413117 	ldw	r5,1220(sp)
 800211c:	1c47883a 	add	r3,r3,r17
 8002120:	10800044 	addi	r2,r2,1
 8002124:	41400015 	stw	r5,0(r8)
 8002128:	44400115 	stw	r17,4(r8)
 800212c:	d8c12015 	stw	r3,1152(sp)
 8002130:	d8811f15 	stw	r2,1148(sp)
 8002134:	010001c4 	movi	r4,7
 8002138:	20826716 	blt	r4,r2,8002ad8 <___vfprintf_internal_r+0x1cbc>
 800213c:	42000204 	addi	r8,r8,8
 8002140:	88026316 	blt	r17,zero,8002ad0 <___vfprintf_internal_r+0x1cb4>
 8002144:	d8813417 	ldw	r2,1232(sp)
 8002148:	1463c83a 	sub	r17,r2,r17
 800214c:	0440590e 	bge	zero,r17,80022b4 <___vfprintf_internal_r+0x1498>
 8002150:	04c00404 	movi	r19,16
 8002154:	d8811f17 	ldw	r2,1148(sp)
 8002158:	9c41770e 	bge	r19,r17,8002738 <___vfprintf_internal_r+0x191c>
 800215c:	01420074 	movhi	r5,2049
 8002160:	29413a84 	addi	r5,r5,1258
 8002164:	d9412c15 	stw	r5,1200(sp)
 8002168:	054001c4 	movi	r21,7
 800216c:	00000306 	br	800217c <___vfprintf_internal_r+0x1360>
 8002170:	42000204 	addi	r8,r8,8
 8002174:	8c7ffc04 	addi	r17,r17,-16
 8002178:	9c41720e 	bge	r19,r17,8002744 <___vfprintf_internal_r+0x1928>
 800217c:	18c00404 	addi	r3,r3,16
 8002180:	10800044 	addi	r2,r2,1
 8002184:	45000015 	stw	r20,0(r8)
 8002188:	44c00115 	stw	r19,4(r8)
 800218c:	d8c12015 	stw	r3,1152(sp)
 8002190:	d8811f15 	stw	r2,1148(sp)
 8002194:	a8bff60e 	bge	r21,r2,8002170 <__alt_data_end+0xfc002170>
 8002198:	b809883a 	mov	r4,r23
 800219c:	b00b883a 	mov	r5,r22
 80021a0:	d9811e04 	addi	r6,sp,1144
 80021a4:	800825c0 	call	800825c <__sprint_r>
 80021a8:	103c341e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 80021ac:	d8c12017 	ldw	r3,1152(sp)
 80021b0:	d8811f17 	ldw	r2,1148(sp)
 80021b4:	da000404 	addi	r8,sp,16
 80021b8:	003fee06 	br	8002174 <__alt_data_end+0xfc002174>
 80021bc:	b809883a 	mov	r4,r23
 80021c0:	b00b883a 	mov	r5,r22
 80021c4:	d9811e04 	addi	r6,sp,1144
 80021c8:	800825c0 	call	800825c <__sprint_r>
 80021cc:	103c2b1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 80021d0:	d8c12017 	ldw	r3,1152(sp)
 80021d4:	d8812787 	ldb	r2,1182(sp)
 80021d8:	da000404 	addi	r8,sp,16
 80021dc:	003cce06 	br	8001518 <__alt_data_end+0xfc001518>
 80021e0:	d8813317 	ldw	r2,1228(sp)
 80021e4:	14ffffc4 	addi	r19,r2,-1
 80021e8:	04ff630e 	bge	zero,r19,8001f78 <__alt_data_end+0xfc001f78>
 80021ec:	05400404 	movi	r21,16
 80021f0:	acc0810e 	bge	r21,r19,80023f8 <___vfprintf_internal_r+0x15dc>
 80021f4:	01420074 	movhi	r5,2049
 80021f8:	29413a84 	addi	r5,r5,1258
 80021fc:	d9412c15 	stw	r5,1200(sp)
 8002200:	01c001c4 	movi	r7,7
 8002204:	00000306 	br	8002214 <___vfprintf_internal_r+0x13f8>
 8002208:	8c400204 	addi	r17,r17,8
 800220c:	9cfffc04 	addi	r19,r19,-16
 8002210:	acc07c0e 	bge	r21,r19,8002404 <___vfprintf_internal_r+0x15e8>
 8002214:	18c00404 	addi	r3,r3,16
 8002218:	84000044 	addi	r16,r16,1
 800221c:	8d000015 	stw	r20,0(r17)
 8002220:	8d400115 	stw	r21,4(r17)
 8002224:	d8c12015 	stw	r3,1152(sp)
 8002228:	dc011f15 	stw	r16,1148(sp)
 800222c:	3c3ff60e 	bge	r7,r16,8002208 <__alt_data_end+0xfc002208>
 8002230:	b809883a 	mov	r4,r23
 8002234:	b00b883a 	mov	r5,r22
 8002238:	d9811e04 	addi	r6,sp,1144
 800223c:	d9c13d15 	stw	r7,1268(sp)
 8002240:	800825c0 	call	800825c <__sprint_r>
 8002244:	d9c13d17 	ldw	r7,1268(sp)
 8002248:	103c0c1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 800224c:	d8c12017 	ldw	r3,1152(sp)
 8002250:	dc011f17 	ldw	r16,1148(sp)
 8002254:	dc400404 	addi	r17,sp,16
 8002258:	003fec06 	br	800220c <__alt_data_end+0xfc00220c>
 800225c:	00800084 	movi	r2,2
 8002260:	9546b03a 	or	r3,r18,r21
 8002264:	003d7d06 	br	800185c <__alt_data_end+0xfc00185c>
 8002268:	10803fcc 	andi	r2,r2,255
 800226c:	1080201c 	xori	r2,r2,128
 8002270:	10bfe004 	addi	r2,r2,-128
 8002274:	01000c04 	movi	r4,48
 8002278:	1101d726 	beq	r2,r4,80029d8 <___vfprintf_internal_r+0x1bbc>
 800227c:	d9413117 	ldw	r5,1220(sp)
 8002280:	d8812817 	ldw	r2,1184(sp)
 8002284:	193fffc5 	stb	r4,-1(r3)
 8002288:	297fffc4 	addi	r5,r5,-1
 800228c:	d9413115 	stw	r5,1220(sp)
 8002290:	1163c83a 	sub	r17,r2,r5
 8002294:	003c5c06 	br	8001408 <__alt_data_end+0xfc001408>
 8002298:	b809883a 	mov	r4,r23
 800229c:	b00b883a 	mov	r5,r22
 80022a0:	d9811e04 	addi	r6,sp,1144
 80022a4:	800825c0 	call	800825c <__sprint_r>
 80022a8:	103bf41e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 80022ac:	d8c12017 	ldw	r3,1152(sp)
 80022b0:	da000404 	addi	r8,sp,16
 80022b4:	d9413117 	ldw	r5,1220(sp)
 80022b8:	d9013417 	ldw	r4,1232(sp)
 80022bc:	d8812617 	ldw	r2,1176(sp)
 80022c0:	2923883a 	add	r17,r5,r4
 80022c4:	d9413317 	ldw	r5,1228(sp)
 80022c8:	11400216 	blt	r2,r5,80022d4 <___vfprintf_internal_r+0x14b8>
 80022cc:	e100004c 	andi	r4,fp,1
 80022d0:	20000d26 	beq	r4,zero,8002308 <___vfprintf_internal_r+0x14ec>
 80022d4:	d9013817 	ldw	r4,1248(sp)
 80022d8:	d9413517 	ldw	r5,1236(sp)
 80022dc:	1907883a 	add	r3,r3,r4
 80022e0:	d9011f17 	ldw	r4,1148(sp)
 80022e4:	41400015 	stw	r5,0(r8)
 80022e8:	d9413817 	ldw	r5,1248(sp)
 80022ec:	21000044 	addi	r4,r4,1
 80022f0:	d8c12015 	stw	r3,1152(sp)
 80022f4:	41400115 	stw	r5,4(r8)
 80022f8:	d9011f15 	stw	r4,1148(sp)
 80022fc:	014001c4 	movi	r5,7
 8002300:	2901fd16 	blt	r5,r4,8002af8 <___vfprintf_internal_r+0x1cdc>
 8002304:	42000204 	addi	r8,r8,8
 8002308:	d9013317 	ldw	r4,1228(sp)
 800230c:	2085c83a 	sub	r2,r4,r2
 8002310:	8449c83a 	sub	r4,r16,r17
 8002314:	1021883a 	mov	r16,r2
 8002318:	2080010e 	bge	r4,r2,8002320 <___vfprintf_internal_r+0x1504>
 800231c:	2021883a 	mov	r16,r4
 8002320:	04000a0e 	bge	zero,r16,800234c <___vfprintf_internal_r+0x1530>
 8002324:	d9011f17 	ldw	r4,1148(sp)
 8002328:	1c07883a 	add	r3,r3,r16
 800232c:	44400015 	stw	r17,0(r8)
 8002330:	21000044 	addi	r4,r4,1
 8002334:	44000115 	stw	r16,4(r8)
 8002338:	d8c12015 	stw	r3,1152(sp)
 800233c:	d9011f15 	stw	r4,1148(sp)
 8002340:	014001c4 	movi	r5,7
 8002344:	29020916 	blt	r5,r4,8002b6c <___vfprintf_internal_r+0x1d50>
 8002348:	42000204 	addi	r8,r8,8
 800234c:	80020116 	blt	r16,zero,8002b54 <___vfprintf_internal_r+0x1d38>
 8002350:	1421c83a 	sub	r16,r2,r16
 8002354:	043cc40e 	bge	zero,r16,8001668 <__alt_data_end+0xfc001668>
 8002358:	04400404 	movi	r17,16
 800235c:	d8811f17 	ldw	r2,1148(sp)
 8002360:	8c3f110e 	bge	r17,r16,8001fa8 <__alt_data_end+0xfc001fa8>
 8002364:	01420074 	movhi	r5,2049
 8002368:	29413a84 	addi	r5,r5,1258
 800236c:	d9412c15 	stw	r5,1200(sp)
 8002370:	04c001c4 	movi	r19,7
 8002374:	00000306 	br	8002384 <___vfprintf_internal_r+0x1568>
 8002378:	42000204 	addi	r8,r8,8
 800237c:	843ffc04 	addi	r16,r16,-16
 8002380:	8c3f0c0e 	bge	r17,r16,8001fb4 <__alt_data_end+0xfc001fb4>
 8002384:	18c00404 	addi	r3,r3,16
 8002388:	10800044 	addi	r2,r2,1
 800238c:	45000015 	stw	r20,0(r8)
 8002390:	44400115 	stw	r17,4(r8)
 8002394:	d8c12015 	stw	r3,1152(sp)
 8002398:	d8811f15 	stw	r2,1148(sp)
 800239c:	98bff60e 	bge	r19,r2,8002378 <__alt_data_end+0xfc002378>
 80023a0:	b809883a 	mov	r4,r23
 80023a4:	b00b883a 	mov	r5,r22
 80023a8:	d9811e04 	addi	r6,sp,1144
 80023ac:	800825c0 	call	800825c <__sprint_r>
 80023b0:	103bb21e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 80023b4:	d8c12017 	ldw	r3,1152(sp)
 80023b8:	d8811f17 	ldw	r2,1148(sp)
 80023bc:	da000404 	addi	r8,sp,16
 80023c0:	003fee06 	br	800237c <__alt_data_end+0xfc00237c>
 80023c4:	e088703a 	and	r4,fp,r2
 80023c8:	203ec01e 	bne	r4,zero,8001ecc <__alt_data_end+0xfc001ecc>
 80023cc:	dc011f17 	ldw	r16,1148(sp)
 80023d0:	d9013117 	ldw	r4,1220(sp)
 80023d4:	40800115 	stw	r2,4(r8)
 80023d8:	84000044 	addi	r16,r16,1
 80023dc:	41000015 	stw	r4,0(r8)
 80023e0:	d8c12015 	stw	r3,1152(sp)
 80023e4:	dc011f15 	stw	r16,1148(sp)
 80023e8:	008001c4 	movi	r2,7
 80023ec:	14000e16 	blt	r2,r16,8002428 <___vfprintf_internal_r+0x160c>
 80023f0:	44400204 	addi	r17,r8,8
 80023f4:	003ee006 	br	8001f78 <__alt_data_end+0xfc001f78>
 80023f8:	01020074 	movhi	r4,2049
 80023fc:	21013a84 	addi	r4,r4,1258
 8002400:	d9012c15 	stw	r4,1200(sp)
 8002404:	d8812c17 	ldw	r2,1200(sp)
 8002408:	1cc7883a 	add	r3,r3,r19
 800240c:	84000044 	addi	r16,r16,1
 8002410:	88800015 	stw	r2,0(r17)
 8002414:	8cc00115 	stw	r19,4(r17)
 8002418:	d8c12015 	stw	r3,1152(sp)
 800241c:	dc011f15 	stw	r16,1148(sp)
 8002420:	008001c4 	movi	r2,7
 8002424:	143ed30e 	bge	r2,r16,8001f74 <__alt_data_end+0xfc001f74>
 8002428:	b809883a 	mov	r4,r23
 800242c:	b00b883a 	mov	r5,r22
 8002430:	d9811e04 	addi	r6,sp,1144
 8002434:	800825c0 	call	800825c <__sprint_r>
 8002438:	103b901e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 800243c:	d8c12017 	ldw	r3,1152(sp)
 8002440:	dc011f17 	ldw	r16,1148(sp)
 8002444:	dc400404 	addi	r17,sp,16
 8002448:	003ecb06 	br	8001f78 <__alt_data_end+0xfc001f78>
 800244c:	b809883a 	mov	r4,r23
 8002450:	b00b883a 	mov	r5,r22
 8002454:	d9811e04 	addi	r6,sp,1144
 8002458:	800825c0 	call	800825c <__sprint_r>
 800245c:	103b871e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8002460:	d8c12017 	ldw	r3,1152(sp)
 8002464:	dc011f17 	ldw	r16,1148(sp)
 8002468:	da000404 	addi	r8,sp,16
 800246c:	003ea206 	br	8001ef8 <__alt_data_end+0xfc001ef8>
 8002470:	b809883a 	mov	r4,r23
 8002474:	b00b883a 	mov	r5,r22
 8002478:	d9811e04 	addi	r6,sp,1144
 800247c:	800825c0 	call	800825c <__sprint_r>
 8002480:	103b7e1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8002484:	d8c12017 	ldw	r3,1152(sp)
 8002488:	dc011f17 	ldw	r16,1148(sp)
 800248c:	dc400404 	addi	r17,sp,16
 8002490:	003ea406 	br	8001f24 <__alt_data_end+0xfc001f24>
 8002494:	b809883a 	mov	r4,r23
 8002498:	b00b883a 	mov	r5,r22
 800249c:	d9811e04 	addi	r6,sp,1144
 80024a0:	800825c0 	call	800825c <__sprint_r>
 80024a4:	103b751e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 80024a8:	d8c12017 	ldw	r3,1152(sp)
 80024ac:	da000404 	addi	r8,sp,16
 80024b0:	003c3706 	br	8001590 <__alt_data_end+0xfc001590>
 80024b4:	04a5c83a 	sub	r18,zero,r18
 80024b8:	9004c03a 	cmpne	r2,r18,zero
 80024bc:	056bc83a 	sub	r21,zero,r21
 80024c0:	a8abc83a 	sub	r21,r21,r2
 80024c4:	04c00b44 	movi	r19,45
 80024c8:	dcc12785 	stb	r19,1182(sp)
 80024cc:	da413215 	stw	r9,1224(sp)
 80024d0:	00800044 	movi	r2,1
 80024d4:	9546b03a 	or	r3,r18,r21
 80024d8:	003bb106 	br	80013a0 <__alt_data_end+0xfc0013a0>
 80024dc:	da013f15 	stw	r8,1276(sp)
 80024e0:	da413e15 	stw	r9,1272(sp)
 80024e4:	8007eb80 	call	8007eb8 <__fpclassifyd>
 80024e8:	da013f17 	ldw	r8,1276(sp)
 80024ec:	da413e17 	ldw	r9,1272(sp)
 80024f0:	1000e526 	beq	r2,zero,8002888 <___vfprintf_internal_r+0x1a6c>
 80024f4:	04fff7c4 	movi	r19,-33
 80024f8:	00bfffc4 	movi	r2,-1
 80024fc:	84e6703a 	and	r19,r16,r19
 8002500:	48822926 	beq	r9,r2,8002da8 <___vfprintf_internal_r+0x1f8c>
 8002504:	008011c4 	movi	r2,71
 8002508:	98821626 	beq	r19,r2,8002d64 <___vfprintf_internal_r+0x1f48>
 800250c:	d9013917 	ldw	r4,1252(sp)
 8002510:	e0c04014 	ori	r3,fp,256
 8002514:	d8c12d15 	stw	r3,1204(sp)
 8002518:	20021f16 	blt	r4,zero,8002d98 <___vfprintf_internal_r+0x1f7c>
 800251c:	dc413917 	ldw	r17,1252(sp)
 8002520:	d8012b05 	stb	zero,1196(sp)
 8002524:	00801984 	movi	r2,102
 8002528:	80814d26 	beq	r16,r2,8002a60 <___vfprintf_internal_r+0x1c44>
 800252c:	00801184 	movi	r2,70
 8002530:	80814b26 	beq	r16,r2,8002a60 <___vfprintf_internal_r+0x1c44>
 8002534:	00801144 	movi	r2,69
 8002538:	98821d26 	beq	r19,r2,8002db0 <___vfprintf_internal_r+0x1f94>
 800253c:	482b883a 	mov	r21,r9
 8002540:	d8812604 	addi	r2,sp,1176
 8002544:	d8800115 	stw	r2,4(sp)
 8002548:	d9413717 	ldw	r5,1244(sp)
 800254c:	d8812504 	addi	r2,sp,1172
 8002550:	d8800215 	stw	r2,8(sp)
 8002554:	d8812104 	addi	r2,sp,1156
 8002558:	dd400015 	stw	r21,0(sp)
 800255c:	d8800315 	stw	r2,12(sp)
 8002560:	b809883a 	mov	r4,r23
 8002564:	880d883a 	mov	r6,r17
 8002568:	01c00084 	movi	r7,2
 800256c:	da013f15 	stw	r8,1276(sp)
 8002570:	da413e15 	stw	r9,1272(sp)
 8002574:	80032940 	call	8003294 <_dtoa_r>
 8002578:	d8813115 	stw	r2,1220(sp)
 800257c:	008019c4 	movi	r2,103
 8002580:	da013f17 	ldw	r8,1276(sp)
 8002584:	da413e17 	ldw	r9,1272(sp)
 8002588:	80800226 	beq	r16,r2,8002594 <___vfprintf_internal_r+0x1778>
 800258c:	008011c4 	movi	r2,71
 8002590:	8081451e 	bne	r16,r2,8002aa8 <___vfprintf_internal_r+0x1c8c>
 8002594:	e080004c 	andi	r2,fp,1
 8002598:	10021e26 	beq	r2,zero,8002e14 <___vfprintf_internal_r+0x1ff8>
 800259c:	d8c13117 	ldw	r3,1220(sp)
 80025a0:	1d55883a 	add	r10,r3,r21
 80025a4:	d9013717 	ldw	r4,1244(sp)
 80025a8:	880b883a 	mov	r5,r17
 80025ac:	000d883a 	mov	r6,zero
 80025b0:	000f883a 	mov	r7,zero
 80025b4:	da013f15 	stw	r8,1276(sp)
 80025b8:	da413e15 	stw	r9,1272(sp)
 80025bc:	da813d15 	stw	r10,1268(sp)
 80025c0:	800bfd40 	call	800bfd4 <__eqdf2>
 80025c4:	da013f17 	ldw	r8,1276(sp)
 80025c8:	da413e17 	ldw	r9,1272(sp)
 80025cc:	da813d17 	ldw	r10,1268(sp)
 80025d0:	1001a126 	beq	r2,zero,8002c58 <___vfprintf_internal_r+0x1e3c>
 80025d4:	d8812117 	ldw	r2,1156(sp)
 80025d8:	1280062e 	bgeu	r2,r10,80025f4 <___vfprintf_internal_r+0x17d8>
 80025dc:	01000c04 	movi	r4,48
 80025e0:	10c00044 	addi	r3,r2,1
 80025e4:	d8c12115 	stw	r3,1156(sp)
 80025e8:	11000005 	stb	r4,0(r2)
 80025ec:	d8812117 	ldw	r2,1156(sp)
 80025f0:	12bffb36 	bltu	r2,r10,80025e0 <__alt_data_end+0xfc0025e0>
 80025f4:	d8c13117 	ldw	r3,1220(sp)
 80025f8:	10c5c83a 	sub	r2,r2,r3
 80025fc:	d8813315 	stw	r2,1228(sp)
 8002600:	008011c4 	movi	r2,71
 8002604:	98818926 	beq	r19,r2,8002c2c <___vfprintf_internal_r+0x1e10>
 8002608:	00801944 	movi	r2,101
 800260c:	14023c0e 	bge	r2,r16,8002f00 <___vfprintf_internal_r+0x20e4>
 8002610:	d8c12617 	ldw	r3,1176(sp)
 8002614:	00801984 	movi	r2,102
 8002618:	d8c13415 	stw	r3,1232(sp)
 800261c:	8081ef26 	beq	r16,r2,8002ddc <___vfprintf_internal_r+0x1fc0>
 8002620:	d8c13417 	ldw	r3,1232(sp)
 8002624:	d9013317 	ldw	r4,1228(sp)
 8002628:	1901e316 	blt	r3,r4,8002db8 <___vfprintf_internal_r+0x1f9c>
 800262c:	e080004c 	andi	r2,fp,1
 8002630:	1001f426 	beq	r2,zero,8002e04 <___vfprintf_internal_r+0x1fe8>
 8002634:	d8c13417 	ldw	r3,1232(sp)
 8002638:	1c400044 	addi	r17,r3,1
 800263c:	8839883a 	mov	fp,r17
 8002640:	8801e416 	blt	r17,zero,8002dd4 <___vfprintf_internal_r+0x1fb8>
 8002644:	dd412b07 	ldb	r21,1196(sp)
 8002648:	a801701e 	bne	r21,zero,8002c0c <___vfprintf_internal_r+0x1df0>
 800264c:	df012b15 	stw	fp,1196(sp)
 8002650:	dcc12783 	ldbu	r19,1182(sp)
 8002654:	df012d17 	ldw	fp,1204(sp)
 8002658:	d8013215 	stw	zero,1224(sp)
 800265c:	dc812d15 	stw	r18,1204(sp)
 8002660:	003b6e06 	br	800141c <__alt_data_end+0xfc00141c>
 8002664:	e080040c 	andi	r2,fp,16
 8002668:	1000b51e 	bne	r2,zero,8002940 <___vfprintf_internal_r+0x1b24>
 800266c:	e080100c 	andi	r2,fp,64
 8002670:	10015b26 	beq	r2,zero,8002be0 <___vfprintf_internal_r+0x1dc4>
 8002674:	d9012d17 	ldw	r4,1204(sp)
 8002678:	d9412f17 	ldw	r5,1212(sp)
 800267c:	20800017 	ldw	r2,0(r4)
 8002680:	21000104 	addi	r4,r4,4
 8002684:	d9012d15 	stw	r4,1204(sp)
 8002688:	1140000d 	sth	r5,0(r2)
 800268c:	003a2006 	br	8000f10 <__alt_data_end+0xfc000f10>
 8002690:	e0c0100c 	andi	r3,fp,64
 8002694:	1800a226 	beq	r3,zero,8002920 <___vfprintf_internal_r+0x1b04>
 8002698:	d8c12d17 	ldw	r3,1204(sp)
 800269c:	1480000b 	ldhu	r18,0(r2)
 80026a0:	002b883a 	mov	r21,zero
 80026a4:	18c00104 	addi	r3,r3,4
 80026a8:	d8c12d15 	stw	r3,1204(sp)
 80026ac:	0005883a 	mov	r2,zero
 80026b0:	9007883a 	mov	r3,r18
 80026b4:	003c6906 	br	800185c <__alt_data_end+0xfc00185c>
 80026b8:	e0c0100c 	andi	r3,fp,64
 80026bc:	18009026 	beq	r3,zero,8002900 <___vfprintf_internal_r+0x1ae4>
 80026c0:	1480000b 	ldhu	r18,0(r2)
 80026c4:	d8812d17 	ldw	r2,1204(sp)
 80026c8:	002b883a 	mov	r21,zero
 80026cc:	9007883a 	mov	r3,r18
 80026d0:	10800104 	addi	r2,r2,4
 80026d4:	d8812d15 	stw	r2,1204(sp)
 80026d8:	00800044 	movi	r2,1
 80026dc:	003c5f06 	br	800185c <__alt_data_end+0xfc00185c>
 80026e0:	e0c0100c 	andi	r3,fp,64
 80026e4:	18008026 	beq	r3,zero,80028e8 <___vfprintf_internal_r+0x1acc>
 80026e8:	d9012d17 	ldw	r4,1204(sp)
 80026ec:	1480000b 	ldhu	r18,0(r2)
 80026f0:	002b883a 	mov	r21,zero
 80026f4:	21000104 	addi	r4,r4,4
 80026f8:	d9012d15 	stw	r4,1204(sp)
 80026fc:	003c7906 	br	80018e4 <__alt_data_end+0xfc0018e4>
 8002700:	e080100c 	andi	r2,fp,64
 8002704:	10007126 	beq	r2,zero,80028cc <___vfprintf_internal_r+0x1ab0>
 8002708:	1c80000f 	ldh	r18,0(r3)
 800270c:	d8812d17 	ldw	r2,1204(sp)
 8002710:	902bd7fa 	srai	r21,r18,31
 8002714:	10800104 	addi	r2,r2,4
 8002718:	d8812d15 	stw	r2,1204(sp)
 800271c:	a805883a 	mov	r2,r21
 8002720:	003b1a06 	br	800138c <__alt_data_end+0xfc00138c>
 8002724:	e4000007 	ldb	r16,0(fp)
 8002728:	e005883a 	mov	r2,fp
 800272c:	003a2306 	br	8000fbc <__alt_data_end+0xfc000fbc>
 8002730:	00800084 	movi	r2,2
 8002734:	003c4906 	br	800185c <__alt_data_end+0xfc00185c>
 8002738:	01020074 	movhi	r4,2049
 800273c:	21013a84 	addi	r4,r4,1258
 8002740:	d9012c15 	stw	r4,1200(sp)
 8002744:	d9012c17 	ldw	r4,1200(sp)
 8002748:	1c47883a 	add	r3,r3,r17
 800274c:	10800044 	addi	r2,r2,1
 8002750:	41000015 	stw	r4,0(r8)
 8002754:	44400115 	stw	r17,4(r8)
 8002758:	d8c12015 	stw	r3,1152(sp)
 800275c:	d8811f15 	stw	r2,1148(sp)
 8002760:	010001c4 	movi	r4,7
 8002764:	20becc16 	blt	r4,r2,8002298 <__alt_data_end+0xfc002298>
 8002768:	42000204 	addi	r8,r8,8
 800276c:	003ed106 	br	80022b4 <__alt_data_end+0xfc0022b4>
 8002770:	01020074 	movhi	r4,2049
 8002774:	21013a84 	addi	r4,r4,1258
 8002778:	d9012c15 	stw	r4,1200(sp)
 800277c:	003ba306 	br	800160c <__alt_data_end+0xfc00160c>
 8002780:	b809883a 	mov	r4,r23
 8002784:	b00b883a 	mov	r5,r22
 8002788:	d9811e04 	addi	r6,sp,1144
 800278c:	800825c0 	call	800825c <__sprint_r>
 8002790:	103aba1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8002794:	d8c12017 	ldw	r3,1152(sp)
 8002798:	da000404 	addi	r8,sp,16
 800279c:	003d6c06 	br	8001d50 <__alt_data_end+0xfc001d50>
 80027a0:	d8811f17 	ldw	r2,1148(sp)
 80027a4:	01420074 	movhi	r5,2049
 80027a8:	01000044 	movi	r4,1
 80027ac:	18c00044 	addi	r3,r3,1
 80027b0:	10800044 	addi	r2,r2,1
 80027b4:	29413a04 	addi	r5,r5,1256
 80027b8:	41000115 	stw	r4,4(r8)
 80027bc:	41400015 	stw	r5,0(r8)
 80027c0:	d8c12015 	stw	r3,1152(sp)
 80027c4:	d8811f15 	stw	r2,1148(sp)
 80027c8:	010001c4 	movi	r4,7
 80027cc:	20806716 	blt	r4,r2,800296c <___vfprintf_internal_r+0x1b50>
 80027d0:	42000204 	addi	r8,r8,8
 80027d4:	8000041e 	bne	r16,zero,80027e8 <___vfprintf_internal_r+0x19cc>
 80027d8:	d8813317 	ldw	r2,1228(sp)
 80027dc:	1000021e 	bne	r2,zero,80027e8 <___vfprintf_internal_r+0x19cc>
 80027e0:	e080004c 	andi	r2,fp,1
 80027e4:	103ba026 	beq	r2,zero,8001668 <__alt_data_end+0xfc001668>
 80027e8:	d9013817 	ldw	r4,1248(sp)
 80027ec:	d8811f17 	ldw	r2,1148(sp)
 80027f0:	d9413517 	ldw	r5,1236(sp)
 80027f4:	1907883a 	add	r3,r3,r4
 80027f8:	10800044 	addi	r2,r2,1
 80027fc:	41000115 	stw	r4,4(r8)
 8002800:	41400015 	stw	r5,0(r8)
 8002804:	d8c12015 	stw	r3,1152(sp)
 8002808:	d8811f15 	stw	r2,1148(sp)
 800280c:	010001c4 	movi	r4,7
 8002810:	20815716 	blt	r4,r2,8002d70 <___vfprintf_internal_r+0x1f54>
 8002814:	42000204 	addi	r8,r8,8
 8002818:	0421c83a 	sub	r16,zero,r16
 800281c:	0400810e 	bge	zero,r16,8002a24 <___vfprintf_internal_r+0x1c08>
 8002820:	04400404 	movi	r17,16
 8002824:	8c00bd0e 	bge	r17,r16,8002b1c <___vfprintf_internal_r+0x1d00>
 8002828:	01420074 	movhi	r5,2049
 800282c:	29413a84 	addi	r5,r5,1258
 8002830:	d9412c15 	stw	r5,1200(sp)
 8002834:	04c001c4 	movi	r19,7
 8002838:	00000306 	br	8002848 <___vfprintf_internal_r+0x1a2c>
 800283c:	42000204 	addi	r8,r8,8
 8002840:	843ffc04 	addi	r16,r16,-16
 8002844:	8c00b80e 	bge	r17,r16,8002b28 <___vfprintf_internal_r+0x1d0c>
 8002848:	18c00404 	addi	r3,r3,16
 800284c:	10800044 	addi	r2,r2,1
 8002850:	45000015 	stw	r20,0(r8)
 8002854:	44400115 	stw	r17,4(r8)
 8002858:	d8c12015 	stw	r3,1152(sp)
 800285c:	d8811f15 	stw	r2,1148(sp)
 8002860:	98bff60e 	bge	r19,r2,800283c <__alt_data_end+0xfc00283c>
 8002864:	b809883a 	mov	r4,r23
 8002868:	b00b883a 	mov	r5,r22
 800286c:	d9811e04 	addi	r6,sp,1144
 8002870:	800825c0 	call	800825c <__sprint_r>
 8002874:	103a811e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8002878:	d8c12017 	ldw	r3,1152(sp)
 800287c:	d8811f17 	ldw	r2,1148(sp)
 8002880:	da000404 	addi	r8,sp,16
 8002884:	003fee06 	br	8002840 <__alt_data_end+0xfc002840>
 8002888:	008011c4 	movi	r2,71
 800288c:	1400db16 	blt	r2,r16,8002bfc <___vfprintf_internal_r+0x1de0>
 8002890:	01020074 	movhi	r4,2049
 8002894:	21012c04 	addi	r4,r4,1200
 8002898:	d9013115 	stw	r4,1220(sp)
 800289c:	00c000c4 	movi	r3,3
 80028a0:	00bfdfc4 	movi	r2,-129
 80028a4:	d8c12b15 	stw	r3,1196(sp)
 80028a8:	e0b8703a 	and	fp,fp,r2
 80028ac:	dcc12783 	ldbu	r19,1182(sp)
 80028b0:	dc812d15 	stw	r18,1204(sp)
 80028b4:	1823883a 	mov	r17,r3
 80028b8:	d8013215 	stw	zero,1224(sp)
 80028bc:	d8013415 	stw	zero,1232(sp)
 80028c0:	003ad606 	br	800141c <__alt_data_end+0xfc00141c>
 80028c4:	4823883a 	mov	r17,r9
 80028c8:	003cc906 	br	8001bf0 <__alt_data_end+0xfc001bf0>
 80028cc:	1c800017 	ldw	r18,0(r3)
 80028d0:	d8c12d17 	ldw	r3,1204(sp)
 80028d4:	902bd7fa 	srai	r21,r18,31
 80028d8:	18c00104 	addi	r3,r3,4
 80028dc:	d8c12d15 	stw	r3,1204(sp)
 80028e0:	a805883a 	mov	r2,r21
 80028e4:	003aa906 	br	800138c <__alt_data_end+0xfc00138c>
 80028e8:	d9412d17 	ldw	r5,1204(sp)
 80028ec:	14800017 	ldw	r18,0(r2)
 80028f0:	002b883a 	mov	r21,zero
 80028f4:	29400104 	addi	r5,r5,4
 80028f8:	d9412d15 	stw	r5,1204(sp)
 80028fc:	003bf906 	br	80018e4 <__alt_data_end+0xfc0018e4>
 8002900:	d8c12d17 	ldw	r3,1204(sp)
 8002904:	14800017 	ldw	r18,0(r2)
 8002908:	002b883a 	mov	r21,zero
 800290c:	18c00104 	addi	r3,r3,4
 8002910:	d8c12d15 	stw	r3,1204(sp)
 8002914:	00800044 	movi	r2,1
 8002918:	9007883a 	mov	r3,r18
 800291c:	003bcf06 	br	800185c <__alt_data_end+0xfc00185c>
 8002920:	d9012d17 	ldw	r4,1204(sp)
 8002924:	14800017 	ldw	r18,0(r2)
 8002928:	002b883a 	mov	r21,zero
 800292c:	21000104 	addi	r4,r4,4
 8002930:	d9012d15 	stw	r4,1204(sp)
 8002934:	0005883a 	mov	r2,zero
 8002938:	9007883a 	mov	r3,r18
 800293c:	003bc706 	br	800185c <__alt_data_end+0xfc00185c>
 8002940:	d9412d17 	ldw	r5,1204(sp)
 8002944:	d8c12f17 	ldw	r3,1212(sp)
 8002948:	28800017 	ldw	r2,0(r5)
 800294c:	29400104 	addi	r5,r5,4
 8002950:	d9412d15 	stw	r5,1204(sp)
 8002954:	10c00015 	stw	r3,0(r2)
 8002958:	00396d06 	br	8000f10 <__alt_data_end+0xfc000f10>
 800295c:	01020074 	movhi	r4,2049
 8002960:	21012a04 	addi	r4,r4,1192
 8002964:	d9013115 	stw	r4,1220(sp)
 8002968:	003ba206 	br	80017f4 <__alt_data_end+0xfc0017f4>
 800296c:	b809883a 	mov	r4,r23
 8002970:	b00b883a 	mov	r5,r22
 8002974:	d9811e04 	addi	r6,sp,1144
 8002978:	800825c0 	call	800825c <__sprint_r>
 800297c:	103a3f1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8002980:	dc012617 	ldw	r16,1176(sp)
 8002984:	d8c12017 	ldw	r3,1152(sp)
 8002988:	da000404 	addi	r8,sp,16
 800298c:	003f9106 	br	80027d4 <__alt_data_end+0xfc0027d4>
 8002990:	e0800044 	addi	r2,fp,1
 8002994:	9cc00814 	ori	r19,r19,32
 8002998:	e4000047 	ldb	r16,1(fp)
 800299c:	00398706 	br	8000fbc <__alt_data_end+0xfc000fbc>
 80029a0:	d8812e17 	ldw	r2,1208(sp)
 80029a4:	d8c12d15 	stw	r3,1204(sp)
 80029a8:	0085c83a 	sub	r2,zero,r2
 80029ac:	d8812e15 	stw	r2,1208(sp)
 80029b0:	e005883a 	mov	r2,fp
 80029b4:	003a3a06 	br	80012a0 <__alt_data_end+0xfc0012a0>
 80029b8:	b809883a 	mov	r4,r23
 80029bc:	b00b883a 	mov	r5,r22
 80029c0:	d9811e04 	addi	r6,sp,1144
 80029c4:	800825c0 	call	800825c <__sprint_r>
 80029c8:	103a2c1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 80029cc:	d8c12017 	ldw	r3,1152(sp)
 80029d0:	da000404 	addi	r8,sp,16
 80029d4:	003cf006 	br	8001d98 <__alt_data_end+0xfc001d98>
 80029d8:	d8c12817 	ldw	r3,1184(sp)
 80029dc:	d9013117 	ldw	r4,1220(sp)
 80029e0:	1923c83a 	sub	r17,r3,r4
 80029e4:	003a8806 	br	8001408 <__alt_data_end+0xfc001408>
 80029e8:	da013f15 	stw	r8,1276(sp)
 80029ec:	8000d840 	call	8000d84 <strlen>
 80029f0:	1023883a 	mov	r17,r2
 80029f4:	da013f17 	ldw	r8,1276(sp)
 80029f8:	883c7f0e 	bge	r17,zero,8001bf8 <__alt_data_end+0xfc001bf8>
 80029fc:	0005883a 	mov	r2,zero
 8002a00:	003c7d06 	br	8001bf8 <__alt_data_end+0xfc001bf8>
 8002a04:	b809883a 	mov	r4,r23
 8002a08:	b00b883a 	mov	r5,r22
 8002a0c:	d9811e04 	addi	r6,sp,1144
 8002a10:	800825c0 	call	800825c <__sprint_r>
 8002a14:	103a191e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8002a18:	d8c12017 	ldw	r3,1152(sp)
 8002a1c:	d8811f17 	ldw	r2,1148(sp)
 8002a20:	da000404 	addi	r8,sp,16
 8002a24:	d9413317 	ldw	r5,1228(sp)
 8002a28:	d9013117 	ldw	r4,1220(sp)
 8002a2c:	10800044 	addi	r2,r2,1
 8002a30:	28c7883a 	add	r3,r5,r3
 8002a34:	41000015 	stw	r4,0(r8)
 8002a38:	41400115 	stw	r5,4(r8)
 8002a3c:	d8c12015 	stw	r3,1152(sp)
 8002a40:	d8811f15 	stw	r2,1148(sp)
 8002a44:	010001c4 	movi	r4,7
 8002a48:	20bb060e 	bge	r4,r2,8001664 <__alt_data_end+0xfc001664>
 8002a4c:	003d6206 	br	8001fd8 <__alt_data_end+0xfc001fd8>
 8002a50:	01020074 	movhi	r4,2049
 8002a54:	21013e84 	addi	r4,r4,1274
 8002a58:	d9013615 	stw	r4,1240(sp)
 8002a5c:	003aa306 	br	80014ec <__alt_data_end+0xfc0014ec>
 8002a60:	d8812604 	addi	r2,sp,1176
 8002a64:	d8800115 	stw	r2,4(sp)
 8002a68:	d9413717 	ldw	r5,1244(sp)
 8002a6c:	d8812504 	addi	r2,sp,1172
 8002a70:	d8800215 	stw	r2,8(sp)
 8002a74:	d8812104 	addi	r2,sp,1156
 8002a78:	da400015 	stw	r9,0(sp)
 8002a7c:	d8800315 	stw	r2,12(sp)
 8002a80:	b809883a 	mov	r4,r23
 8002a84:	880d883a 	mov	r6,r17
 8002a88:	01c000c4 	movi	r7,3
 8002a8c:	da013f15 	stw	r8,1276(sp)
 8002a90:	da413e15 	stw	r9,1272(sp)
 8002a94:	80032940 	call	8003294 <_dtoa_r>
 8002a98:	da413e17 	ldw	r9,1272(sp)
 8002a9c:	da013f17 	ldw	r8,1276(sp)
 8002aa0:	d8813115 	stw	r2,1220(sp)
 8002aa4:	482b883a 	mov	r21,r9
 8002aa8:	d8c13117 	ldw	r3,1220(sp)
 8002aac:	00801184 	movi	r2,70
 8002ab0:	1d55883a 	add	r10,r3,r21
 8002ab4:	98bebb1e 	bne	r19,r2,80025a4 <__alt_data_end+0xfc0025a4>
 8002ab8:	19000007 	ldb	r4,0(r3)
 8002abc:	00800c04 	movi	r2,48
 8002ac0:	2080dd26 	beq	r4,r2,8002e38 <___vfprintf_internal_r+0x201c>
 8002ac4:	d8c12617 	ldw	r3,1176(sp)
 8002ac8:	50d5883a 	add	r10,r10,r3
 8002acc:	003eb506 	br	80025a4 <__alt_data_end+0xfc0025a4>
 8002ad0:	0023883a 	mov	r17,zero
 8002ad4:	003d9b06 	br	8002144 <__alt_data_end+0xfc002144>
 8002ad8:	b809883a 	mov	r4,r23
 8002adc:	b00b883a 	mov	r5,r22
 8002ae0:	d9811e04 	addi	r6,sp,1144
 8002ae4:	800825c0 	call	800825c <__sprint_r>
 8002ae8:	1039e41e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8002aec:	d8c12017 	ldw	r3,1152(sp)
 8002af0:	da000404 	addi	r8,sp,16
 8002af4:	003d9206 	br	8002140 <__alt_data_end+0xfc002140>
 8002af8:	b809883a 	mov	r4,r23
 8002afc:	b00b883a 	mov	r5,r22
 8002b00:	d9811e04 	addi	r6,sp,1144
 8002b04:	800825c0 	call	800825c <__sprint_r>
 8002b08:	1039dc1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8002b0c:	d8812617 	ldw	r2,1176(sp)
 8002b10:	d8c12017 	ldw	r3,1152(sp)
 8002b14:	da000404 	addi	r8,sp,16
 8002b18:	003dfb06 	br	8002308 <__alt_data_end+0xfc002308>
 8002b1c:	01020074 	movhi	r4,2049
 8002b20:	21013a84 	addi	r4,r4,1258
 8002b24:	d9012c15 	stw	r4,1200(sp)
 8002b28:	d9012c17 	ldw	r4,1200(sp)
 8002b2c:	1c07883a 	add	r3,r3,r16
 8002b30:	10800044 	addi	r2,r2,1
 8002b34:	41000015 	stw	r4,0(r8)
 8002b38:	44000115 	stw	r16,4(r8)
 8002b3c:	d8c12015 	stw	r3,1152(sp)
 8002b40:	d8811f15 	stw	r2,1148(sp)
 8002b44:	010001c4 	movi	r4,7
 8002b48:	20bfae16 	blt	r4,r2,8002a04 <__alt_data_end+0xfc002a04>
 8002b4c:	42000204 	addi	r8,r8,8
 8002b50:	003fb406 	br	8002a24 <__alt_data_end+0xfc002a24>
 8002b54:	0021883a 	mov	r16,zero
 8002b58:	003dfd06 	br	8002350 <__alt_data_end+0xfc002350>
 8002b5c:	01420074 	movhi	r5,2049
 8002b60:	29413e84 	addi	r5,r5,1274
 8002b64:	d9413615 	stw	r5,1240(sp)
 8002b68:	003ae306 	br	80016f8 <__alt_data_end+0xfc0016f8>
 8002b6c:	b809883a 	mov	r4,r23
 8002b70:	b00b883a 	mov	r5,r22
 8002b74:	d9811e04 	addi	r6,sp,1144
 8002b78:	800825c0 	call	800825c <__sprint_r>
 8002b7c:	1039bf1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8002b80:	d8812617 	ldw	r2,1176(sp)
 8002b84:	d9413317 	ldw	r5,1228(sp)
 8002b88:	d8c12017 	ldw	r3,1152(sp)
 8002b8c:	da000404 	addi	r8,sp,16
 8002b90:	2885c83a 	sub	r2,r5,r2
 8002b94:	003ded06 	br	800234c <__alt_data_end+0xfc00234c>
 8002b98:	00800184 	movi	r2,6
 8002b9c:	1240012e 	bgeu	r2,r9,8002ba4 <___vfprintf_internal_r+0x1d88>
 8002ba0:	1013883a 	mov	r9,r2
 8002ba4:	4823883a 	mov	r17,r9
 8002ba8:	4805883a 	mov	r2,r9
 8002bac:	4800b216 	blt	r9,zero,8002e78 <___vfprintf_internal_r+0x205c>
 8002bb0:	01420074 	movhi	r5,2049
 8002bb4:	29413804 	addi	r5,r5,1248
 8002bb8:	d8812b15 	stw	r2,1196(sp)
 8002bbc:	dc812d15 	stw	r18,1204(sp)
 8002bc0:	d8013215 	stw	zero,1224(sp)
 8002bc4:	d8013415 	stw	zero,1232(sp)
 8002bc8:	d9413115 	stw	r5,1220(sp)
 8002bcc:	0005883a 	mov	r2,zero
 8002bd0:	003a1906 	br	8001438 <__alt_data_end+0xfc001438>
 8002bd4:	04c00b44 	movi	r19,45
 8002bd8:	dcc12785 	stb	r19,1182(sp)
 8002bdc:	003b0006 	br	80017e0 <__alt_data_end+0xfc0017e0>
 8002be0:	d8c12d17 	ldw	r3,1204(sp)
 8002be4:	d9012f17 	ldw	r4,1212(sp)
 8002be8:	18800017 	ldw	r2,0(r3)
 8002bec:	18c00104 	addi	r3,r3,4
 8002bf0:	d8c12d15 	stw	r3,1204(sp)
 8002bf4:	11000015 	stw	r4,0(r2)
 8002bf8:	0038c506 	br	8000f10 <__alt_data_end+0xfc000f10>
 8002bfc:	01420074 	movhi	r5,2049
 8002c00:	29412d04 	addi	r5,r5,1204
 8002c04:	d9413115 	stw	r5,1220(sp)
 8002c08:	003f2406 	br	800289c <__alt_data_end+0xfc00289c>
 8002c0c:	00800b44 	movi	r2,45
 8002c10:	d8812785 	stb	r2,1182(sp)
 8002c14:	df012b15 	stw	fp,1196(sp)
 8002c18:	d8013215 	stw	zero,1224(sp)
 8002c1c:	df012d17 	ldw	fp,1204(sp)
 8002c20:	00800b44 	movi	r2,45
 8002c24:	dc812d15 	stw	r18,1204(sp)
 8002c28:	003a0006 	br	800142c <__alt_data_end+0xfc00142c>
 8002c2c:	d8c12617 	ldw	r3,1176(sp)
 8002c30:	00bfff44 	movi	r2,-3
 8002c34:	18800a16 	blt	r3,r2,8002c60 <___vfprintf_internal_r+0x1e44>
 8002c38:	48c00916 	blt	r9,r3,8002c60 <___vfprintf_internal_r+0x1e44>
 8002c3c:	d8c13415 	stw	r3,1232(sp)
 8002c40:	040019c4 	movi	r16,103
 8002c44:	003e7606 	br	8002620 <__alt_data_end+0xfc002620>
 8002c48:	01020074 	movhi	r4,2049
 8002c4c:	21013a84 	addi	r4,r4,1258
 8002c50:	d9012c15 	stw	r4,1200(sp)
 8002c54:	003c8e06 	br	8001e90 <__alt_data_end+0xfc001e90>
 8002c58:	5005883a 	mov	r2,r10
 8002c5c:	003e6506 	br	80025f4 <__alt_data_end+0xfc0025f4>
 8002c60:	843fff84 	addi	r16,r16,-2
 8002c64:	1d7fffc4 	addi	r21,r3,-1
 8002c68:	dd412615 	stw	r21,1176(sp)
 8002c6c:	dc0122c5 	stb	r16,1163(sp)
 8002c70:	a8009216 	blt	r21,zero,8002ebc <___vfprintf_internal_r+0x20a0>
 8002c74:	00800ac4 	movi	r2,43
 8002c78:	d8812305 	stb	r2,1164(sp)
 8002c7c:	00800244 	movi	r2,9
 8002c80:	1540660e 	bge	r2,r21,8002e1c <___vfprintf_internal_r+0x2000>
 8002c84:	dcc122c4 	addi	r19,sp,1163
 8002c88:	dc012c15 	stw	r16,1200(sp)
 8002c8c:	4023883a 	mov	r17,r8
 8002c90:	9821883a 	mov	r16,r19
 8002c94:	a809883a 	mov	r4,r21
 8002c98:	01400284 	movi	r5,10
 8002c9c:	800ad240 	call	800ad24 <__modsi3>
 8002ca0:	10800c04 	addi	r2,r2,48
 8002ca4:	843fffc4 	addi	r16,r16,-1
 8002ca8:	a809883a 	mov	r4,r21
 8002cac:	01400284 	movi	r5,10
 8002cb0:	80800005 	stb	r2,0(r16)
 8002cb4:	800acd00 	call	800acd0 <__divsi3>
 8002cb8:	01000244 	movi	r4,9
 8002cbc:	102b883a 	mov	r21,r2
 8002cc0:	20bff416 	blt	r4,r2,8002c94 <__alt_data_end+0xfc002c94>
 8002cc4:	8811883a 	mov	r8,r17
 8002cc8:	10800c04 	addi	r2,r2,48
 8002ccc:	8023883a 	mov	r17,r16
 8002cd0:	897fffc4 	addi	r5,r17,-1
 8002cd4:	88bfffc5 	stb	r2,-1(r17)
 8002cd8:	dc012c17 	ldw	r16,1200(sp)
 8002cdc:	2cc08a2e 	bgeu	r5,r19,8002f08 <___vfprintf_internal_r+0x20ec>
 8002ce0:	d9812384 	addi	r6,sp,1166
 8002ce4:	344dc83a 	sub	r6,r6,r17
 8002ce8:	d9012344 	addi	r4,sp,1165
 8002cec:	998d883a 	add	r6,r19,r6
 8002cf0:	00000106 	br	8002cf8 <___vfprintf_internal_r+0x1edc>
 8002cf4:	28800003 	ldbu	r2,0(r5)
 8002cf8:	20800005 	stb	r2,0(r4)
 8002cfc:	21000044 	addi	r4,r4,1
 8002d00:	29400044 	addi	r5,r5,1
 8002d04:	21bffb1e 	bne	r4,r6,8002cf4 <__alt_data_end+0xfc002cf4>
 8002d08:	d8812304 	addi	r2,sp,1164
 8002d0c:	1445c83a 	sub	r2,r2,r17
 8002d10:	d9412344 	addi	r5,sp,1165
 8002d14:	2885883a 	add	r2,r5,r2
 8002d18:	14e7c83a 	sub	r19,r2,r19
 8002d1c:	d8813317 	ldw	r2,1228(sp)
 8002d20:	d8c13317 	ldw	r3,1228(sp)
 8002d24:	dcc13a15 	stw	r19,1256(sp)
 8002d28:	14e3883a 	add	r17,r2,r19
 8002d2c:	00800044 	movi	r2,1
 8002d30:	10c0550e 	bge	r2,r3,8002e88 <___vfprintf_internal_r+0x206c>
 8002d34:	8c400044 	addi	r17,r17,1
 8002d38:	8839883a 	mov	fp,r17
 8002d3c:	88005016 	blt	r17,zero,8002e80 <___vfprintf_internal_r+0x2064>
 8002d40:	d8013415 	stw	zero,1232(sp)
 8002d44:	003e3f06 	br	8002644 <__alt_data_end+0xfc002644>
 8002d48:	da412b15 	stw	r9,1196(sp)
 8002d4c:	dcc12783 	ldbu	r19,1182(sp)
 8002d50:	4823883a 	mov	r17,r9
 8002d54:	dc812d15 	stw	r18,1204(sp)
 8002d58:	d8013215 	stw	zero,1224(sp)
 8002d5c:	d8013415 	stw	zero,1232(sp)
 8002d60:	0039ae06 	br	800141c <__alt_data_end+0xfc00141c>
 8002d64:	483de91e 	bne	r9,zero,800250c <__alt_data_end+0xfc00250c>
 8002d68:	8813883a 	mov	r9,r17
 8002d6c:	003de706 	br	800250c <__alt_data_end+0xfc00250c>
 8002d70:	b809883a 	mov	r4,r23
 8002d74:	b00b883a 	mov	r5,r22
 8002d78:	d9811e04 	addi	r6,sp,1144
 8002d7c:	800825c0 	call	800825c <__sprint_r>
 8002d80:	10393e1e 	bne	r2,zero,800127c <__alt_data_end+0xfc00127c>
 8002d84:	dc012617 	ldw	r16,1176(sp)
 8002d88:	d8c12017 	ldw	r3,1152(sp)
 8002d8c:	d8811f17 	ldw	r2,1148(sp)
 8002d90:	da000404 	addi	r8,sp,16
 8002d94:	003ea006 	br	8002818 <__alt_data_end+0xfc002818>
 8002d98:	00c00b44 	movi	r3,45
 8002d9c:	2460003c 	xorhi	r17,r4,32768
 8002da0:	d8c12b05 	stb	r3,1196(sp)
 8002da4:	003ddf06 	br	8002524 <__alt_data_end+0xfc002524>
 8002da8:	02400184 	movi	r9,6
 8002dac:	003dd706 	br	800250c <__alt_data_end+0xfc00250c>
 8002db0:	4d400044 	addi	r21,r9,1
 8002db4:	003de206 	br	8002540 <__alt_data_end+0xfc002540>
 8002db8:	d8c13417 	ldw	r3,1232(sp)
 8002dbc:	00c0490e 	bge	zero,r3,8002ee4 <___vfprintf_internal_r+0x20c8>
 8002dc0:	04400044 	movi	r17,1
 8002dc4:	d9013317 	ldw	r4,1228(sp)
 8002dc8:	8923883a 	add	r17,r17,r4
 8002dcc:	8839883a 	mov	fp,r17
 8002dd0:	883e1c0e 	bge	r17,zero,8002644 <__alt_data_end+0xfc002644>
 8002dd4:	0039883a 	mov	fp,zero
 8002dd8:	003e1a06 	br	8002644 <__alt_data_end+0xfc002644>
 8002ddc:	00c03b0e 	bge	zero,r3,8002ecc <___vfprintf_internal_r+0x20b0>
 8002de0:	4800021e 	bne	r9,zero,8002dec <___vfprintf_internal_r+0x1fd0>
 8002de4:	e080004c 	andi	r2,fp,1
 8002de8:	10000626 	beq	r2,zero,8002e04 <___vfprintf_internal_r+0x1fe8>
 8002dec:	d8c13417 	ldw	r3,1232(sp)
 8002df0:	4a400044 	addi	r9,r9,1
 8002df4:	1a63883a 	add	r17,r3,r9
 8002df8:	8839883a 	mov	fp,r17
 8002dfc:	883e110e 	bge	r17,zero,8002644 <__alt_data_end+0xfc002644>
 8002e00:	003ff406 	br	8002dd4 <__alt_data_end+0xfc002dd4>
 8002e04:	1839883a 	mov	fp,r3
 8002e08:	18004116 	blt	r3,zero,8002f10 <___vfprintf_internal_r+0x20f4>
 8002e0c:	dc413417 	ldw	r17,1232(sp)
 8002e10:	003e0c06 	br	8002644 <__alt_data_end+0xfc002644>
 8002e14:	d8812117 	ldw	r2,1156(sp)
 8002e18:	003df606 	br	80025f4 <__alt_data_end+0xfc0025f4>
 8002e1c:	00800c04 	movi	r2,48
 8002e20:	a8c00c04 	addi	r3,r21,48
 8002e24:	d8812345 	stb	r2,1165(sp)
 8002e28:	d8c12385 	stb	r3,1166(sp)
 8002e2c:	d88123c4 	addi	r2,sp,1167
 8002e30:	dcc122c4 	addi	r19,sp,1163
 8002e34:	003fb806 	br	8002d18 <__alt_data_end+0xfc002d18>
 8002e38:	d9013717 	ldw	r4,1244(sp)
 8002e3c:	880b883a 	mov	r5,r17
 8002e40:	000d883a 	mov	r6,zero
 8002e44:	000f883a 	mov	r7,zero
 8002e48:	da013f15 	stw	r8,1276(sp)
 8002e4c:	da413e15 	stw	r9,1272(sp)
 8002e50:	da813d15 	stw	r10,1268(sp)
 8002e54:	800bfd40 	call	800bfd4 <__eqdf2>
 8002e58:	da013f17 	ldw	r8,1276(sp)
 8002e5c:	da413e17 	ldw	r9,1272(sp)
 8002e60:	da813d17 	ldw	r10,1268(sp)
 8002e64:	103f1726 	beq	r2,zero,8002ac4 <__alt_data_end+0xfc002ac4>
 8002e68:	00800044 	movi	r2,1
 8002e6c:	1547c83a 	sub	r3,r2,r21
 8002e70:	d8c12615 	stw	r3,1176(sp)
 8002e74:	003f1406 	br	8002ac8 <__alt_data_end+0xfc002ac8>
 8002e78:	0005883a 	mov	r2,zero
 8002e7c:	003f4c06 	br	8002bb0 <__alt_data_end+0xfc002bb0>
 8002e80:	0039883a 	mov	fp,zero
 8002e84:	003fae06 	br	8002d40 <__alt_data_end+0xfc002d40>
 8002e88:	e084703a 	and	r2,fp,r2
 8002e8c:	103faa26 	beq	r2,zero,8002d38 <__alt_data_end+0xfc002d38>
 8002e90:	003fa806 	br	8002d34 <__alt_data_end+0xfc002d34>
 8002e94:	d9412d17 	ldw	r5,1204(sp)
 8002e98:	2a400017 	ldw	r9,0(r5)
 8002e9c:	28c00104 	addi	r3,r5,4
 8002ea0:	d8c12d15 	stw	r3,1204(sp)
 8002ea4:	483ebc0e 	bge	r9,zero,8002998 <__alt_data_end+0xfc002998>
 8002ea8:	027fffc4 	movi	r9,-1
 8002eac:	e4000047 	ldb	r16,1(fp)
 8002eb0:	00384206 	br	8000fbc <__alt_data_end+0xfc000fbc>
 8002eb4:	043fffc4 	movi	r16,-1
 8002eb8:	0038ce06 	br	80011f4 <__alt_data_end+0xfc0011f4>
 8002ebc:	00800b44 	movi	r2,45
 8002ec0:	056bc83a 	sub	r21,zero,r21
 8002ec4:	d8812305 	stb	r2,1164(sp)
 8002ec8:	003f6c06 	br	8002c7c <__alt_data_end+0xfc002c7c>
 8002ecc:	4800081e 	bne	r9,zero,8002ef0 <___vfprintf_internal_r+0x20d4>
 8002ed0:	e080004c 	andi	r2,fp,1
 8002ed4:	1000061e 	bne	r2,zero,8002ef0 <___vfprintf_internal_r+0x20d4>
 8002ed8:	07000044 	movi	fp,1
 8002edc:	e023883a 	mov	r17,fp
 8002ee0:	003dd806 	br	8002644 <__alt_data_end+0xfc002644>
 8002ee4:	04400084 	movi	r17,2
 8002ee8:	88e3c83a 	sub	r17,r17,r3
 8002eec:	003fb506 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 8002ef0:	4c400084 	addi	r17,r9,2
 8002ef4:	8839883a 	mov	fp,r17
 8002ef8:	883dd20e 	bge	r17,zero,8002644 <__alt_data_end+0xfc002644>
 8002efc:	003fb506 	br	8002dd4 <__alt_data_end+0xfc002dd4>
 8002f00:	d8c12617 	ldw	r3,1176(sp)
 8002f04:	003f5706 	br	8002c64 <__alt_data_end+0xfc002c64>
 8002f08:	d8812344 	addi	r2,sp,1165
 8002f0c:	003f8206 	br	8002d18 <__alt_data_end+0xfc002d18>
 8002f10:	0039883a 	mov	fp,zero
 8002f14:	003fbd06 	br	8002e0c <__alt_data_end+0xfc002e0c>

08002f18 <__vfprintf_internal>:
 8002f18:	2007883a 	mov	r3,r4
 8002f1c:	01020074 	movhi	r4,2049
 8002f20:	2108a604 	addi	r4,r4,8856
 8002f24:	21000017 	ldw	r4,0(r4)
 8002f28:	2805883a 	mov	r2,r5
 8002f2c:	300f883a 	mov	r7,r6
 8002f30:	180b883a 	mov	r5,r3
 8002f34:	100d883a 	mov	r6,r2
 8002f38:	8000e1c1 	jmpi	8000e1c <___vfprintf_internal_r>

08002f3c <__swsetup_r>:
 8002f3c:	00820074 	movhi	r2,2049
 8002f40:	defffd04 	addi	sp,sp,-12
 8002f44:	1088a604 	addi	r2,r2,8856
 8002f48:	dc400115 	stw	r17,4(sp)
 8002f4c:	2023883a 	mov	r17,r4
 8002f50:	11000017 	ldw	r4,0(r2)
 8002f54:	dc000015 	stw	r16,0(sp)
 8002f58:	dfc00215 	stw	ra,8(sp)
 8002f5c:	2821883a 	mov	r16,r5
 8002f60:	20000226 	beq	r4,zero,8002f6c <__swsetup_r+0x30>
 8002f64:	20c00e17 	ldw	r3,56(r4)
 8002f68:	18002e26 	beq	r3,zero,8003024 <__swsetup_r+0xe8>
 8002f6c:	8080030b 	ldhu	r2,12(r16)
 8002f70:	10c0020c 	andi	r3,r2,8
 8002f74:	100d883a 	mov	r6,r2
 8002f78:	18000f26 	beq	r3,zero,8002fb8 <__swsetup_r+0x7c>
 8002f7c:	80c00417 	ldw	r3,16(r16)
 8002f80:	18001526 	beq	r3,zero,8002fd8 <__swsetup_r+0x9c>
 8002f84:	1100004c 	andi	r4,r2,1
 8002f88:	20001c1e 	bne	r4,zero,8002ffc <__swsetup_r+0xc0>
 8002f8c:	1080008c 	andi	r2,r2,2
 8002f90:	1000261e 	bne	r2,zero,800302c <__swsetup_r+0xf0>
 8002f94:	80800517 	ldw	r2,20(r16)
 8002f98:	80800215 	stw	r2,8(r16)
 8002f9c:	18001c26 	beq	r3,zero,8003010 <__swsetup_r+0xd4>
 8002fa0:	0005883a 	mov	r2,zero
 8002fa4:	dfc00217 	ldw	ra,8(sp)
 8002fa8:	dc400117 	ldw	r17,4(sp)
 8002fac:	dc000017 	ldw	r16,0(sp)
 8002fb0:	dec00304 	addi	sp,sp,12
 8002fb4:	f800283a 	ret
 8002fb8:	3080040c 	andi	r2,r6,16
 8002fbc:	10001726 	beq	r2,zero,800301c <__swsetup_r+0xe0>
 8002fc0:	3080010c 	andi	r2,r6,4
 8002fc4:	10001b1e 	bne	r2,zero,8003034 <__swsetup_r+0xf8>
 8002fc8:	80c00417 	ldw	r3,16(r16)
 8002fcc:	30800214 	ori	r2,r6,8
 8002fd0:	8080030d 	sth	r2,12(r16)
 8002fd4:	183feb1e 	bne	r3,zero,8002f84 <__alt_data_end+0xfc002f84>
 8002fd8:	1140a00c 	andi	r5,r2,640
 8002fdc:	01008004 	movi	r4,512
 8002fe0:	293fe826 	beq	r5,r4,8002f84 <__alt_data_end+0xfc002f84>
 8002fe4:	8809883a 	mov	r4,r17
 8002fe8:	800b883a 	mov	r5,r16
 8002fec:	8005ad00 	call	8005ad0 <__smakebuf_r>
 8002ff0:	8080030b 	ldhu	r2,12(r16)
 8002ff4:	80c00417 	ldw	r3,16(r16)
 8002ff8:	003fe206 	br	8002f84 <__alt_data_end+0xfc002f84>
 8002ffc:	80800517 	ldw	r2,20(r16)
 8003000:	80000215 	stw	zero,8(r16)
 8003004:	0085c83a 	sub	r2,zero,r2
 8003008:	80800615 	stw	r2,24(r16)
 800300c:	183fe41e 	bne	r3,zero,8002fa0 <__alt_data_end+0xfc002fa0>
 8003010:	8080030b 	ldhu	r2,12(r16)
 8003014:	1080200c 	andi	r2,r2,128
 8003018:	103fe226 	beq	r2,zero,8002fa4 <__alt_data_end+0xfc002fa4>
 800301c:	00bfffc4 	movi	r2,-1
 8003020:	003fe006 	br	8002fa4 <__alt_data_end+0xfc002fa4>
 8003024:	8004f780 	call	8004f78 <__sinit>
 8003028:	003fd006 	br	8002f6c <__alt_data_end+0xfc002f6c>
 800302c:	0005883a 	mov	r2,zero
 8003030:	003fd906 	br	8002f98 <__alt_data_end+0xfc002f98>
 8003034:	81400c17 	ldw	r5,48(r16)
 8003038:	28000626 	beq	r5,zero,8003054 <__swsetup_r+0x118>
 800303c:	80801004 	addi	r2,r16,64
 8003040:	28800326 	beq	r5,r2,8003050 <__swsetup_r+0x114>
 8003044:	8809883a 	mov	r4,r17
 8003048:	80050ec0 	call	80050ec <_free_r>
 800304c:	8180030b 	ldhu	r6,12(r16)
 8003050:	80000c15 	stw	zero,48(r16)
 8003054:	80c00417 	ldw	r3,16(r16)
 8003058:	00bff6c4 	movi	r2,-37
 800305c:	118c703a 	and	r6,r2,r6
 8003060:	80000115 	stw	zero,4(r16)
 8003064:	80c00015 	stw	r3,0(r16)
 8003068:	003fd806 	br	8002fcc <__alt_data_end+0xfc002fcc>

0800306c <quorem>:
 800306c:	defff204 	addi	sp,sp,-56
 8003070:	ddc00b15 	stw	r23,44(sp)
 8003074:	20800417 	ldw	r2,16(r4)
 8003078:	2dc00417 	ldw	r23,16(r5)
 800307c:	dfc00d15 	stw	ra,52(sp)
 8003080:	df000c15 	stw	fp,48(sp)
 8003084:	dd800a15 	stw	r22,40(sp)
 8003088:	dd400915 	stw	r21,36(sp)
 800308c:	dd000815 	stw	r20,32(sp)
 8003090:	dcc00715 	stw	r19,28(sp)
 8003094:	dc800615 	stw	r18,24(sp)
 8003098:	dc400515 	stw	r17,20(sp)
 800309c:	dc000415 	stw	r16,16(sp)
 80030a0:	15c07a16 	blt	r2,r23,800328c <quorem+0x220>
 80030a4:	bdffffc4 	addi	r23,r23,-1
 80030a8:	bde9883a 	add	r20,r23,r23
 80030ac:	28c00504 	addi	r3,r5,20
 80030b0:	a529883a 	add	r20,r20,r20
 80030b4:	1d39883a 	add	fp,r3,r20
 80030b8:	24c00504 	addi	r19,r4,20
 80030bc:	d9400215 	stw	r5,8(sp)
 80030c0:	9d29883a 	add	r20,r19,r20
 80030c4:	e1400017 	ldw	r5,0(fp)
 80030c8:	d9000015 	stw	r4,0(sp)
 80030cc:	a1000017 	ldw	r4,0(r20)
 80030d0:	29400044 	addi	r5,r5,1
 80030d4:	d8c00115 	stw	r3,4(sp)
 80030d8:	dd000315 	stw	r20,12(sp)
 80030dc:	800ad800 	call	800ad80 <__udivsi3>
 80030e0:	1025883a 	mov	r18,r2
 80030e4:	10003026 	beq	r2,zero,80031a8 <quorem+0x13c>
 80030e8:	dc400117 	ldw	r17,4(sp)
 80030ec:	9829883a 	mov	r20,r19
 80030f0:	002d883a 	mov	r22,zero
 80030f4:	0021883a 	mov	r16,zero
 80030f8:	8d400017 	ldw	r21,0(r17)
 80030fc:	900b883a 	mov	r5,r18
 8003100:	8c400104 	addi	r17,r17,4
 8003104:	a93fffcc 	andi	r4,r21,65535
 8003108:	800ad900 	call	800ad90 <__mulsi3>
 800310c:	a808d43a 	srli	r4,r21,16
 8003110:	900b883a 	mov	r5,r18
 8003114:	b0ad883a 	add	r22,r22,r2
 8003118:	800ad900 	call	800ad90 <__mulsi3>
 800311c:	a1000017 	ldw	r4,0(r20)
 8003120:	b00cd43a 	srli	r6,r22,16
 8003124:	b0ffffcc 	andi	r3,r22,65535
 8003128:	217fffcc 	andi	r5,r4,65535
 800312c:	2c21883a 	add	r16,r5,r16
 8003130:	80c7c83a 	sub	r3,r16,r3
 8003134:	2008d43a 	srli	r4,r4,16
 8003138:	3085883a 	add	r2,r6,r2
 800313c:	1821d43a 	srai	r16,r3,16
 8003140:	117fffcc 	andi	r5,r2,65535
 8003144:	2149c83a 	sub	r4,r4,r5
 8003148:	2421883a 	add	r16,r4,r16
 800314c:	8008943a 	slli	r4,r16,16
 8003150:	18ffffcc 	andi	r3,r3,65535
 8003154:	102cd43a 	srli	r22,r2,16
 8003158:	20c8b03a 	or	r4,r4,r3
 800315c:	a1000015 	stw	r4,0(r20)
 8003160:	8021d43a 	srai	r16,r16,16
 8003164:	a5000104 	addi	r20,r20,4
 8003168:	e47fe32e 	bgeu	fp,r17,80030f8 <__alt_data_end+0xfc0030f8>
 800316c:	d8c00317 	ldw	r3,12(sp)
 8003170:	18800017 	ldw	r2,0(r3)
 8003174:	10000c1e 	bne	r2,zero,80031a8 <quorem+0x13c>
 8003178:	18bfff04 	addi	r2,r3,-4
 800317c:	9880082e 	bgeu	r19,r2,80031a0 <quorem+0x134>
 8003180:	18ffff17 	ldw	r3,-4(r3)
 8003184:	18000326 	beq	r3,zero,8003194 <quorem+0x128>
 8003188:	00000506 	br	80031a0 <quorem+0x134>
 800318c:	10c00017 	ldw	r3,0(r2)
 8003190:	1800031e 	bne	r3,zero,80031a0 <quorem+0x134>
 8003194:	10bfff04 	addi	r2,r2,-4
 8003198:	bdffffc4 	addi	r23,r23,-1
 800319c:	98bffb36 	bltu	r19,r2,800318c <__alt_data_end+0xfc00318c>
 80031a0:	d8c00017 	ldw	r3,0(sp)
 80031a4:	1dc00415 	stw	r23,16(r3)
 80031a8:	d9000017 	ldw	r4,0(sp)
 80031ac:	d9400217 	ldw	r5,8(sp)
 80031b0:	800724c0 	call	800724c <__mcmp>
 80031b4:	10002816 	blt	r2,zero,8003258 <quorem+0x1ec>
 80031b8:	dc400117 	ldw	r17,4(sp)
 80031bc:	94800044 	addi	r18,r18,1
 80031c0:	980d883a 	mov	r6,r19
 80031c4:	0007883a 	mov	r3,zero
 80031c8:	31000017 	ldw	r4,0(r6)
 80031cc:	89400017 	ldw	r5,0(r17)
 80031d0:	31800104 	addi	r6,r6,4
 80031d4:	20bfffcc 	andi	r2,r4,65535
 80031d8:	10c7883a 	add	r3,r2,r3
 80031dc:	28bfffcc 	andi	r2,r5,65535
 80031e0:	1885c83a 	sub	r2,r3,r2
 80031e4:	280ad43a 	srli	r5,r5,16
 80031e8:	2008d43a 	srli	r4,r4,16
 80031ec:	1007d43a 	srai	r3,r2,16
 80031f0:	10bfffcc 	andi	r2,r2,65535
 80031f4:	2149c83a 	sub	r4,r4,r5
 80031f8:	20c9883a 	add	r4,r4,r3
 80031fc:	200a943a 	slli	r5,r4,16
 8003200:	8c400104 	addi	r17,r17,4
 8003204:	2007d43a 	srai	r3,r4,16
 8003208:	2884b03a 	or	r2,r5,r2
 800320c:	30bfff15 	stw	r2,-4(r6)
 8003210:	e47fed2e 	bgeu	fp,r17,80031c8 <__alt_data_end+0xfc0031c8>
 8003214:	bdc5883a 	add	r2,r23,r23
 8003218:	1085883a 	add	r2,r2,r2
 800321c:	9887883a 	add	r3,r19,r2
 8003220:	18800017 	ldw	r2,0(r3)
 8003224:	10000c1e 	bne	r2,zero,8003258 <quorem+0x1ec>
 8003228:	18bfff04 	addi	r2,r3,-4
 800322c:	9880082e 	bgeu	r19,r2,8003250 <quorem+0x1e4>
 8003230:	18ffff17 	ldw	r3,-4(r3)
 8003234:	18000326 	beq	r3,zero,8003244 <quorem+0x1d8>
 8003238:	00000506 	br	8003250 <quorem+0x1e4>
 800323c:	10c00017 	ldw	r3,0(r2)
 8003240:	1800031e 	bne	r3,zero,8003250 <quorem+0x1e4>
 8003244:	10bfff04 	addi	r2,r2,-4
 8003248:	bdffffc4 	addi	r23,r23,-1
 800324c:	98bffb36 	bltu	r19,r2,800323c <__alt_data_end+0xfc00323c>
 8003250:	d8c00017 	ldw	r3,0(sp)
 8003254:	1dc00415 	stw	r23,16(r3)
 8003258:	9005883a 	mov	r2,r18
 800325c:	dfc00d17 	ldw	ra,52(sp)
 8003260:	df000c17 	ldw	fp,48(sp)
 8003264:	ddc00b17 	ldw	r23,44(sp)
 8003268:	dd800a17 	ldw	r22,40(sp)
 800326c:	dd400917 	ldw	r21,36(sp)
 8003270:	dd000817 	ldw	r20,32(sp)
 8003274:	dcc00717 	ldw	r19,28(sp)
 8003278:	dc800617 	ldw	r18,24(sp)
 800327c:	dc400517 	ldw	r17,20(sp)
 8003280:	dc000417 	ldw	r16,16(sp)
 8003284:	dec00e04 	addi	sp,sp,56
 8003288:	f800283a 	ret
 800328c:	0005883a 	mov	r2,zero
 8003290:	003ff206 	br	800325c <__alt_data_end+0xfc00325c>

08003294 <_dtoa_r>:
 8003294:	20801017 	ldw	r2,64(r4)
 8003298:	deffde04 	addi	sp,sp,-136
 800329c:	dd401d15 	stw	r21,116(sp)
 80032a0:	dcc01b15 	stw	r19,108(sp)
 80032a4:	dc801a15 	stw	r18,104(sp)
 80032a8:	dc401915 	stw	r17,100(sp)
 80032ac:	dc001815 	stw	r16,96(sp)
 80032b0:	dfc02115 	stw	ra,132(sp)
 80032b4:	df002015 	stw	fp,128(sp)
 80032b8:	ddc01f15 	stw	r23,124(sp)
 80032bc:	dd801e15 	stw	r22,120(sp)
 80032c0:	dd001c15 	stw	r20,112(sp)
 80032c4:	d9c00315 	stw	r7,12(sp)
 80032c8:	2021883a 	mov	r16,r4
 80032cc:	302b883a 	mov	r21,r6
 80032d0:	2825883a 	mov	r18,r5
 80032d4:	dc402417 	ldw	r17,144(sp)
 80032d8:	3027883a 	mov	r19,r6
 80032dc:	10000826 	beq	r2,zero,8003300 <_dtoa_r+0x6c>
 80032e0:	21801117 	ldw	r6,68(r4)
 80032e4:	00c00044 	movi	r3,1
 80032e8:	100b883a 	mov	r5,r2
 80032ec:	1986983a 	sll	r3,r3,r6
 80032f0:	11800115 	stw	r6,4(r2)
 80032f4:	10c00215 	stw	r3,8(r2)
 80032f8:	80069780 	call	8006978 <_Bfree>
 80032fc:	80001015 	stw	zero,64(r16)
 8003300:	a8002d16 	blt	r21,zero,80033b8 <_dtoa_r+0x124>
 8003304:	88000015 	stw	zero,0(r17)
 8003308:	a8dffc2c 	andhi	r3,r21,32752
 800330c:	009ffc34 	movhi	r2,32752
 8003310:	18801b26 	beq	r3,r2,8003380 <_dtoa_r+0xec>
 8003314:	9009883a 	mov	r4,r18
 8003318:	980b883a 	mov	r5,r19
 800331c:	000d883a 	mov	r6,zero
 8003320:	000f883a 	mov	r7,zero
 8003324:	800bfd40 	call	800bfd4 <__eqdf2>
 8003328:	10002a1e 	bne	r2,zero,80033d4 <_dtoa_r+0x140>
 800332c:	d8c02317 	ldw	r3,140(sp)
 8003330:	d9002517 	ldw	r4,148(sp)
 8003334:	00800044 	movi	r2,1
 8003338:	18800015 	stw	r2,0(r3)
 800333c:	2001a226 	beq	r4,zero,80039c8 <_dtoa_r+0x734>
 8003340:	00820074 	movhi	r2,2049
 8003344:	10813a44 	addi	r2,r2,1257
 8003348:	20800015 	stw	r2,0(r4)
 800334c:	10bfffc4 	addi	r2,r2,-1
 8003350:	dfc02117 	ldw	ra,132(sp)
 8003354:	df002017 	ldw	fp,128(sp)
 8003358:	ddc01f17 	ldw	r23,124(sp)
 800335c:	dd801e17 	ldw	r22,120(sp)
 8003360:	dd401d17 	ldw	r21,116(sp)
 8003364:	dd001c17 	ldw	r20,112(sp)
 8003368:	dcc01b17 	ldw	r19,108(sp)
 800336c:	dc801a17 	ldw	r18,104(sp)
 8003370:	dc401917 	ldw	r17,100(sp)
 8003374:	dc001817 	ldw	r16,96(sp)
 8003378:	dec02204 	addi	sp,sp,136
 800337c:	f800283a 	ret
 8003380:	d8c02317 	ldw	r3,140(sp)
 8003384:	0089c3c4 	movi	r2,9999
 8003388:	18800015 	stw	r2,0(r3)
 800338c:	90017c26 	beq	r18,zero,8003980 <_dtoa_r+0x6ec>
 8003390:	00820074 	movhi	r2,2049
 8003394:	10814604 	addi	r2,r2,1304
 8003398:	d9002517 	ldw	r4,148(sp)
 800339c:	203fec26 	beq	r4,zero,8003350 <__alt_data_end+0xfc003350>
 80033a0:	10c000c7 	ldb	r3,3(r2)
 80033a4:	18017d1e 	bne	r3,zero,800399c <_dtoa_r+0x708>
 80033a8:	10c000c4 	addi	r3,r2,3
 80033ac:	d9802517 	ldw	r6,148(sp)
 80033b0:	30c00015 	stw	r3,0(r6)
 80033b4:	003fe606 	br	8003350 <__alt_data_end+0xfc003350>
 80033b8:	04e00034 	movhi	r19,32768
 80033bc:	9cffffc4 	addi	r19,r19,-1
 80033c0:	00800044 	movi	r2,1
 80033c4:	ace6703a 	and	r19,r21,r19
 80033c8:	88800015 	stw	r2,0(r17)
 80033cc:	982b883a 	mov	r21,r19
 80033d0:	003fcd06 	br	8003308 <__alt_data_end+0xfc003308>
 80033d4:	d8800204 	addi	r2,sp,8
 80033d8:	a822d53a 	srli	r17,r21,20
 80033dc:	d8800015 	stw	r2,0(sp)
 80033e0:	8009883a 	mov	r4,r16
 80033e4:	900b883a 	mov	r5,r18
 80033e8:	980d883a 	mov	r6,r19
 80033ec:	d9c00104 	addi	r7,sp,4
 80033f0:	80075c00 	call	80075c0 <__d2b>
 80033f4:	1039883a 	mov	fp,r2
 80033f8:	88016a1e 	bne	r17,zero,80039a4 <_dtoa_r+0x710>
 80033fc:	dd000217 	ldw	r20,8(sp)
 8003400:	dc400117 	ldw	r17,4(sp)
 8003404:	00befbc4 	movi	r2,-1041
 8003408:	a463883a 	add	r17,r20,r17
 800340c:	8882ea16 	blt	r17,r2,8003fb8 <_dtoa_r+0xd24>
 8003410:	00bf0384 	movi	r2,-1010
 8003414:	1445c83a 	sub	r2,r2,r17
 8003418:	89010484 	addi	r4,r17,1042
 800341c:	a8aa983a 	sll	r21,r21,r2
 8003420:	9108d83a 	srl	r4,r18,r4
 8003424:	a908b03a 	or	r4,r21,r4
 8003428:	800d4ac0 	call	800d4ac <__floatunsidf>
 800342c:	017f8434 	movhi	r5,65040
 8003430:	01800044 	movi	r6,1
 8003434:	1009883a 	mov	r4,r2
 8003438:	194b883a 	add	r5,r3,r5
 800343c:	8c7fffc4 	addi	r17,r17,-1
 8003440:	d9800f15 	stw	r6,60(sp)
 8003444:	000d883a 	mov	r6,zero
 8003448:	01cffe34 	movhi	r7,16376
 800344c:	800ca840 	call	800ca84 <__subdf3>
 8003450:	0198dbf4 	movhi	r6,25455
 8003454:	01cff4f4 	movhi	r7,16339
 8003458:	1009883a 	mov	r4,r2
 800345c:	180b883a 	mov	r5,r3
 8003460:	3190d844 	addi	r6,r6,17249
 8003464:	39e1e9c4 	addi	r7,r7,-30809
 8003468:	800c2180 	call	800c218 <__muldf3>
 800346c:	01a2d874 	movhi	r6,35681
 8003470:	01cff1f4 	movhi	r7,16327
 8003474:	180b883a 	mov	r5,r3
 8003478:	31b22cc4 	addi	r6,r6,-14157
 800347c:	39e28a04 	addi	r7,r7,-30168
 8003480:	1009883a 	mov	r4,r2
 8003484:	800adb80 	call	800adb8 <__adddf3>
 8003488:	8809883a 	mov	r4,r17
 800348c:	102d883a 	mov	r22,r2
 8003490:	182b883a 	mov	r21,r3
 8003494:	800d3dc0 	call	800d3dc <__floatsidf>
 8003498:	019427f4 	movhi	r6,20639
 800349c:	01cff4f4 	movhi	r7,16339
 80034a0:	1009883a 	mov	r4,r2
 80034a4:	180b883a 	mov	r5,r3
 80034a8:	319e7ec4 	addi	r6,r6,31227
 80034ac:	39d104c4 	addi	r7,r7,17427
 80034b0:	800c2180 	call	800c218 <__muldf3>
 80034b4:	b009883a 	mov	r4,r22
 80034b8:	a80b883a 	mov	r5,r21
 80034bc:	100d883a 	mov	r6,r2
 80034c0:	180f883a 	mov	r7,r3
 80034c4:	800adb80 	call	800adb8 <__adddf3>
 80034c8:	1009883a 	mov	r4,r2
 80034cc:	180b883a 	mov	r5,r3
 80034d0:	102d883a 	mov	r22,r2
 80034d4:	182b883a 	mov	r21,r3
 80034d8:	800d3540 	call	800d354 <__fixdfsi>
 80034dc:	b009883a 	mov	r4,r22
 80034e0:	a80b883a 	mov	r5,r21
 80034e4:	000d883a 	mov	r6,zero
 80034e8:	000f883a 	mov	r7,zero
 80034ec:	d8800515 	stw	r2,20(sp)
 80034f0:	800c1380 	call	800c138 <__ledf2>
 80034f4:	10023116 	blt	r2,zero,8003dbc <_dtoa_r+0xb28>
 80034f8:	d8c00517 	ldw	r3,20(sp)
 80034fc:	00800584 	movi	r2,22
 8003500:	10c21f36 	bltu	r2,r3,8003d80 <_dtoa_r+0xaec>
 8003504:	180490fa 	slli	r2,r3,3
 8003508:	00c20074 	movhi	r3,2049
 800350c:	18c16204 	addi	r3,r3,1416
 8003510:	1885883a 	add	r2,r3,r2
 8003514:	11000017 	ldw	r4,0(r2)
 8003518:	11400117 	ldw	r5,4(r2)
 800351c:	900d883a 	mov	r6,r18
 8003520:	980f883a 	mov	r7,r19
 8003524:	800c0580 	call	800c058 <__gedf2>
 8003528:	0082a70e 	bge	zero,r2,8003fc8 <_dtoa_r+0xd34>
 800352c:	d9000517 	ldw	r4,20(sp)
 8003530:	d8000c15 	stw	zero,48(sp)
 8003534:	213fffc4 	addi	r4,r4,-1
 8003538:	d9000515 	stw	r4,20(sp)
 800353c:	a463c83a 	sub	r17,r20,r17
 8003540:	8dbfffc4 	addi	r22,r17,-1
 8003544:	b0021916 	blt	r22,zero,8003dac <_dtoa_r+0xb18>
 8003548:	d8000815 	stw	zero,32(sp)
 800354c:	d8800517 	ldw	r2,20(sp)
 8003550:	10020e16 	blt	r2,zero,8003d8c <_dtoa_r+0xaf8>
 8003554:	b0ad883a 	add	r22,r22,r2
 8003558:	d8800a15 	stw	r2,40(sp)
 800355c:	d8000915 	stw	zero,36(sp)
 8003560:	d8c00317 	ldw	r3,12(sp)
 8003564:	00800244 	movi	r2,9
 8003568:	10c11a36 	bltu	r2,r3,80039d4 <_dtoa_r+0x740>
 800356c:	00800144 	movi	r2,5
 8003570:	10c4fc0e 	bge	r2,r3,8004964 <_dtoa_r+0x16d0>
 8003574:	18ffff04 	addi	r3,r3,-4
 8003578:	d8c00315 	stw	r3,12(sp)
 800357c:	0029883a 	mov	r20,zero
 8003580:	d9800317 	ldw	r6,12(sp)
 8003584:	008000c4 	movi	r2,3
 8003588:	3083bd26 	beq	r6,r2,8004480 <_dtoa_r+0x11ec>
 800358c:	1183670e 	bge	r2,r6,800432c <_dtoa_r+0x1098>
 8003590:	d8c00317 	ldw	r3,12(sp)
 8003594:	00800104 	movi	r2,4
 8003598:	1882e726 	beq	r3,r2,8004138 <_dtoa_r+0xea4>
 800359c:	00800144 	movi	r2,5
 80035a0:	1884f21e 	bne	r3,r2,800496c <_dtoa_r+0x16d8>
 80035a4:	00800044 	movi	r2,1
 80035a8:	d8800b15 	stw	r2,44(sp)
 80035ac:	d8c02217 	ldw	r3,136(sp)
 80035b0:	d9000517 	ldw	r4,20(sp)
 80035b4:	1907883a 	add	r3,r3,r4
 80035b8:	19800044 	addi	r6,r3,1
 80035bc:	d8c00d15 	stw	r3,52(sp)
 80035c0:	d9800615 	stw	r6,24(sp)
 80035c4:	0183c30e 	bge	zero,r6,80044d4 <_dtoa_r+0x1240>
 80035c8:	d9800617 	ldw	r6,24(sp)
 80035cc:	3023883a 	mov	r17,r6
 80035d0:	80001115 	stw	zero,68(r16)
 80035d4:	008005c4 	movi	r2,23
 80035d8:	1184f62e 	bgeu	r2,r6,80049b4 <_dtoa_r+0x1720>
 80035dc:	00c00044 	movi	r3,1
 80035e0:	00800104 	movi	r2,4
 80035e4:	1085883a 	add	r2,r2,r2
 80035e8:	11000504 	addi	r4,r2,20
 80035ec:	180b883a 	mov	r5,r3
 80035f0:	18c00044 	addi	r3,r3,1
 80035f4:	313ffb2e 	bgeu	r6,r4,80035e4 <__alt_data_end+0xfc0035e4>
 80035f8:	81401115 	stw	r5,68(r16)
 80035fc:	8009883a 	mov	r4,r16
 8003600:	80068d00 	call	80068d0 <_Balloc>
 8003604:	d8800715 	stw	r2,28(sp)
 8003608:	80801015 	stw	r2,64(r16)
 800360c:	00800384 	movi	r2,14
 8003610:	1440fd36 	bltu	r2,r17,8003a08 <_dtoa_r+0x774>
 8003614:	a000fc26 	beq	r20,zero,8003a08 <_dtoa_r+0x774>
 8003618:	d8800517 	ldw	r2,20(sp)
 800361c:	0083b90e 	bge	zero,r2,8004504 <_dtoa_r+0x1270>
 8003620:	d8c00517 	ldw	r3,20(sp)
 8003624:	108003cc 	andi	r2,r2,15
 8003628:	100490fa 	slli	r2,r2,3
 800362c:	182fd13a 	srai	r23,r3,4
 8003630:	00c20074 	movhi	r3,2049
 8003634:	18c16204 	addi	r3,r3,1416
 8003638:	1885883a 	add	r2,r3,r2
 800363c:	b8c0040c 	andi	r3,r23,16
 8003640:	12c00017 	ldw	r11,0(r2)
 8003644:	12800117 	ldw	r10,4(r2)
 8003648:	18039726 	beq	r3,zero,80044a8 <_dtoa_r+0x1214>
 800364c:	00820074 	movhi	r2,2049
 8003650:	10815804 	addi	r2,r2,1376
 8003654:	11800817 	ldw	r6,32(r2)
 8003658:	11c00917 	ldw	r7,36(r2)
 800365c:	9009883a 	mov	r4,r18
 8003660:	980b883a 	mov	r5,r19
 8003664:	da801615 	stw	r10,88(sp)
 8003668:	dac01515 	stw	r11,84(sp)
 800366c:	800b6540 	call	800b654 <__divdf3>
 8003670:	da801617 	ldw	r10,88(sp)
 8003674:	dac01517 	ldw	r11,84(sp)
 8003678:	bdc003cc 	andi	r23,r23,15
 800367c:	044000c4 	movi	r17,3
 8003680:	d8800e15 	stw	r2,56(sp)
 8003684:	182b883a 	mov	r21,r3
 8003688:	b8001126 	beq	r23,zero,80036d0 <_dtoa_r+0x43c>
 800368c:	05020074 	movhi	r20,2049
 8003690:	a5015804 	addi	r20,r20,1376
 8003694:	5805883a 	mov	r2,r11
 8003698:	5007883a 	mov	r3,r10
 800369c:	b980004c 	andi	r6,r23,1
 80036a0:	1009883a 	mov	r4,r2
 80036a4:	b82fd07a 	srai	r23,r23,1
 80036a8:	180b883a 	mov	r5,r3
 80036ac:	30000426 	beq	r6,zero,80036c0 <_dtoa_r+0x42c>
 80036b0:	a1800017 	ldw	r6,0(r20)
 80036b4:	a1c00117 	ldw	r7,4(r20)
 80036b8:	8c400044 	addi	r17,r17,1
 80036bc:	800c2180 	call	800c218 <__muldf3>
 80036c0:	a5000204 	addi	r20,r20,8
 80036c4:	b83ff51e 	bne	r23,zero,800369c <__alt_data_end+0xfc00369c>
 80036c8:	1017883a 	mov	r11,r2
 80036cc:	1815883a 	mov	r10,r3
 80036d0:	d9000e17 	ldw	r4,56(sp)
 80036d4:	a80b883a 	mov	r5,r21
 80036d8:	580d883a 	mov	r6,r11
 80036dc:	500f883a 	mov	r7,r10
 80036e0:	800b6540 	call	800b654 <__divdf3>
 80036e4:	1029883a 	mov	r20,r2
 80036e8:	182b883a 	mov	r21,r3
 80036ec:	d9800c17 	ldw	r6,48(sp)
 80036f0:	30000626 	beq	r6,zero,800370c <_dtoa_r+0x478>
 80036f4:	a009883a 	mov	r4,r20
 80036f8:	a80b883a 	mov	r5,r21
 80036fc:	000d883a 	mov	r6,zero
 8003700:	01cffc34 	movhi	r7,16368
 8003704:	800c1380 	call	800c138 <__ledf2>
 8003708:	10043216 	blt	r2,zero,80047d4 <_dtoa_r+0x1540>
 800370c:	8809883a 	mov	r4,r17
 8003710:	800d3dc0 	call	800d3dc <__floatsidf>
 8003714:	1009883a 	mov	r4,r2
 8003718:	180b883a 	mov	r5,r3
 800371c:	a00d883a 	mov	r6,r20
 8003720:	a80f883a 	mov	r7,r21
 8003724:	800c2180 	call	800c218 <__muldf3>
 8003728:	000d883a 	mov	r6,zero
 800372c:	1009883a 	mov	r4,r2
 8003730:	180b883a 	mov	r5,r3
 8003734:	01d00734 	movhi	r7,16412
 8003738:	800adb80 	call	800adb8 <__adddf3>
 800373c:	1023883a 	mov	r17,r2
 8003740:	d9800617 	ldw	r6,24(sp)
 8003744:	00bf3034 	movhi	r2,64704
 8003748:	1885883a 	add	r2,r3,r2
 800374c:	d8800e15 	stw	r2,56(sp)
 8003750:	30032e26 	beq	r6,zero,800440c <_dtoa_r+0x1178>
 8003754:	d8c00517 	ldw	r3,20(sp)
 8003758:	da800617 	ldw	r10,24(sp)
 800375c:	d8c01215 	stw	r3,72(sp)
 8003760:	d9000b17 	ldw	r4,44(sp)
 8003764:	2003b026 	beq	r4,zero,8004628 <_dtoa_r+0x1394>
 8003768:	50bfffc4 	addi	r2,r10,-1
 800376c:	100490fa 	slli	r2,r2,3
 8003770:	00c20074 	movhi	r3,2049
 8003774:	18c16204 	addi	r3,r3,1416
 8003778:	1885883a 	add	r2,r3,r2
 800377c:	11800017 	ldw	r6,0(r2)
 8003780:	11c00117 	ldw	r7,4(r2)
 8003784:	d8800717 	ldw	r2,28(sp)
 8003788:	0009883a 	mov	r4,zero
 800378c:	014ff834 	movhi	r5,16352
 8003790:	da801615 	stw	r10,88(sp)
 8003794:	15c00044 	addi	r23,r2,1
 8003798:	800b6540 	call	800b654 <__divdf3>
 800379c:	d9c00e17 	ldw	r7,56(sp)
 80037a0:	880d883a 	mov	r6,r17
 80037a4:	1009883a 	mov	r4,r2
 80037a8:	180b883a 	mov	r5,r3
 80037ac:	800ca840 	call	800ca84 <__subdf3>
 80037b0:	a80b883a 	mov	r5,r21
 80037b4:	a009883a 	mov	r4,r20
 80037b8:	d8c01015 	stw	r3,64(sp)
 80037bc:	d8800e15 	stw	r2,56(sp)
 80037c0:	800d3540 	call	800d354 <__fixdfsi>
 80037c4:	1009883a 	mov	r4,r2
 80037c8:	d8801715 	stw	r2,92(sp)
 80037cc:	800d3dc0 	call	800d3dc <__floatsidf>
 80037d0:	a009883a 	mov	r4,r20
 80037d4:	a80b883a 	mov	r5,r21
 80037d8:	100d883a 	mov	r6,r2
 80037dc:	180f883a 	mov	r7,r3
 80037e0:	800ca840 	call	800ca84 <__subdf3>
 80037e4:	da001717 	ldw	r8,92(sp)
 80037e8:	1829883a 	mov	r20,r3
 80037ec:	d8c00717 	ldw	r3,28(sp)
 80037f0:	d9000e17 	ldw	r4,56(sp)
 80037f4:	d9401017 	ldw	r5,64(sp)
 80037f8:	42000c04 	addi	r8,r8,48
 80037fc:	1023883a 	mov	r17,r2
 8003800:	1a000005 	stb	r8,0(r3)
 8003804:	880d883a 	mov	r6,r17
 8003808:	a00f883a 	mov	r7,r20
 800380c:	402b883a 	mov	r21,r8
 8003810:	800c0580 	call	800c058 <__gedf2>
 8003814:	00844516 	blt	zero,r2,800492c <_dtoa_r+0x1698>
 8003818:	0009883a 	mov	r4,zero
 800381c:	014ffc34 	movhi	r5,16368
 8003820:	880d883a 	mov	r6,r17
 8003824:	a00f883a 	mov	r7,r20
 8003828:	800ca840 	call	800ca84 <__subdf3>
 800382c:	d9000e17 	ldw	r4,56(sp)
 8003830:	d9401017 	ldw	r5,64(sp)
 8003834:	100d883a 	mov	r6,r2
 8003838:	180f883a 	mov	r7,r3
 800383c:	800c0580 	call	800c058 <__gedf2>
 8003840:	da801617 	ldw	r10,88(sp)
 8003844:	00843616 	blt	zero,r2,8004920 <_dtoa_r+0x168c>
 8003848:	00800044 	movi	r2,1
 800384c:	12806e0e 	bge	r2,r10,8003a08 <_dtoa_r+0x774>
 8003850:	d9000717 	ldw	r4,28(sp)
 8003854:	dd801315 	stw	r22,76(sp)
 8003858:	dc001115 	stw	r16,68(sp)
 800385c:	2295883a 	add	r10,r4,r10
 8003860:	dcc01415 	stw	r19,80(sp)
 8003864:	502d883a 	mov	r22,r10
 8003868:	dcc01017 	ldw	r19,64(sp)
 800386c:	b821883a 	mov	r16,r23
 8003870:	dc801015 	stw	r18,64(sp)
 8003874:	dc800e17 	ldw	r18,56(sp)
 8003878:	00000906 	br	80038a0 <_dtoa_r+0x60c>
 800387c:	800ca840 	call	800ca84 <__subdf3>
 8003880:	1009883a 	mov	r4,r2
 8003884:	180b883a 	mov	r5,r3
 8003888:	900d883a 	mov	r6,r18
 800388c:	980f883a 	mov	r7,r19
 8003890:	800c1380 	call	800c138 <__ledf2>
 8003894:	10040e16 	blt	r2,zero,80048d0 <_dtoa_r+0x163c>
 8003898:	b821883a 	mov	r16,r23
 800389c:	bd841026 	beq	r23,r22,80048e0 <_dtoa_r+0x164c>
 80038a0:	9009883a 	mov	r4,r18
 80038a4:	980b883a 	mov	r5,r19
 80038a8:	000d883a 	mov	r6,zero
 80038ac:	01d00934 	movhi	r7,16420
 80038b0:	800c2180 	call	800c218 <__muldf3>
 80038b4:	000d883a 	mov	r6,zero
 80038b8:	01d00934 	movhi	r7,16420
 80038bc:	8809883a 	mov	r4,r17
 80038c0:	a00b883a 	mov	r5,r20
 80038c4:	1025883a 	mov	r18,r2
 80038c8:	1827883a 	mov	r19,r3
 80038cc:	800c2180 	call	800c218 <__muldf3>
 80038d0:	180b883a 	mov	r5,r3
 80038d4:	1009883a 	mov	r4,r2
 80038d8:	1823883a 	mov	r17,r3
 80038dc:	1029883a 	mov	r20,r2
 80038e0:	800d3540 	call	800d354 <__fixdfsi>
 80038e4:	1009883a 	mov	r4,r2
 80038e8:	102b883a 	mov	r21,r2
 80038ec:	800d3dc0 	call	800d3dc <__floatsidf>
 80038f0:	a009883a 	mov	r4,r20
 80038f4:	880b883a 	mov	r5,r17
 80038f8:	100d883a 	mov	r6,r2
 80038fc:	180f883a 	mov	r7,r3
 8003900:	800ca840 	call	800ca84 <__subdf3>
 8003904:	ad400c04 	addi	r21,r21,48
 8003908:	1009883a 	mov	r4,r2
 800390c:	180b883a 	mov	r5,r3
 8003910:	900d883a 	mov	r6,r18
 8003914:	980f883a 	mov	r7,r19
 8003918:	85400005 	stb	r21,0(r16)
 800391c:	1023883a 	mov	r17,r2
 8003920:	1829883a 	mov	r20,r3
 8003924:	800c1380 	call	800c138 <__ledf2>
 8003928:	bdc00044 	addi	r23,r23,1
 800392c:	0009883a 	mov	r4,zero
 8003930:	014ffc34 	movhi	r5,16368
 8003934:	880d883a 	mov	r6,r17
 8003938:	a00f883a 	mov	r7,r20
 800393c:	103fcf0e 	bge	r2,zero,800387c <__alt_data_end+0xfc00387c>
 8003940:	d9801217 	ldw	r6,72(sp)
 8003944:	dc001117 	ldw	r16,68(sp)
 8003948:	d9800515 	stw	r6,20(sp)
 800394c:	8009883a 	mov	r4,r16
 8003950:	e00b883a 	mov	r5,fp
 8003954:	80069780 	call	8006978 <_Bfree>
 8003958:	d8c00517 	ldw	r3,20(sp)
 800395c:	d9002317 	ldw	r4,140(sp)
 8003960:	d9802517 	ldw	r6,148(sp)
 8003964:	b8000005 	stb	zero,0(r23)
 8003968:	18800044 	addi	r2,r3,1
 800396c:	20800015 	stw	r2,0(r4)
 8003970:	30027226 	beq	r6,zero,800433c <_dtoa_r+0x10a8>
 8003974:	35c00015 	stw	r23,0(r6)
 8003978:	d8800717 	ldw	r2,28(sp)
 800397c:	003e7406 	br	8003350 <__alt_data_end+0xfc003350>
 8003980:	00800434 	movhi	r2,16
 8003984:	10bfffc4 	addi	r2,r2,-1
 8003988:	a8aa703a 	and	r21,r21,r2
 800398c:	a83e801e 	bne	r21,zero,8003390 <__alt_data_end+0xfc003390>
 8003990:	00820074 	movhi	r2,2049
 8003994:	10814304 	addi	r2,r2,1292
 8003998:	003e7f06 	br	8003398 <__alt_data_end+0xfc003398>
 800399c:	10c00204 	addi	r3,r2,8
 80039a0:	003e8206 	br	80033ac <__alt_data_end+0xfc0033ac>
 80039a4:	01400434 	movhi	r5,16
 80039a8:	297fffc4 	addi	r5,r5,-1
 80039ac:	994a703a 	and	r5,r19,r5
 80039b0:	9009883a 	mov	r4,r18
 80039b4:	8c7f0044 	addi	r17,r17,-1023
 80039b8:	294ffc34 	orhi	r5,r5,16368
 80039bc:	dd000217 	ldw	r20,8(sp)
 80039c0:	d8000f15 	stw	zero,60(sp)
 80039c4:	003e9f06 	br	8003444 <__alt_data_end+0xfc003444>
 80039c8:	00820074 	movhi	r2,2049
 80039cc:	10813a04 	addi	r2,r2,1256
 80039d0:	003e5f06 	br	8003350 <__alt_data_end+0xfc003350>
 80039d4:	80001115 	stw	zero,68(r16)
 80039d8:	8009883a 	mov	r4,r16
 80039dc:	000b883a 	mov	r5,zero
 80039e0:	80068d00 	call	80068d0 <_Balloc>
 80039e4:	01bfffc4 	movi	r6,-1
 80039e8:	d8800715 	stw	r2,28(sp)
 80039ec:	80801015 	stw	r2,64(r16)
 80039f0:	00800044 	movi	r2,1
 80039f4:	d9800615 	stw	r6,24(sp)
 80039f8:	d8800b15 	stw	r2,44(sp)
 80039fc:	d8002215 	stw	zero,136(sp)
 8003a00:	d9800d15 	stw	r6,52(sp)
 8003a04:	d8000315 	stw	zero,12(sp)
 8003a08:	d8800117 	ldw	r2,4(sp)
 8003a0c:	10008e16 	blt	r2,zero,8003c48 <_dtoa_r+0x9b4>
 8003a10:	d9000517 	ldw	r4,20(sp)
 8003a14:	00c00384 	movi	r3,14
 8003a18:	19008b16 	blt	r3,r4,8003c48 <_dtoa_r+0x9b4>
 8003a1c:	200490fa 	slli	r2,r4,3
 8003a20:	00c20074 	movhi	r3,2049
 8003a24:	d9802217 	ldw	r6,136(sp)
 8003a28:	18c16204 	addi	r3,r3,1416
 8003a2c:	1885883a 	add	r2,r3,r2
 8003a30:	14400017 	ldw	r17,0(r2)
 8003a34:	15000117 	ldw	r20,4(r2)
 8003a38:	3001c716 	blt	r6,zero,8004158 <_dtoa_r+0xec4>
 8003a3c:	880d883a 	mov	r6,r17
 8003a40:	a00f883a 	mov	r7,r20
 8003a44:	9009883a 	mov	r4,r18
 8003a48:	980b883a 	mov	r5,r19
 8003a4c:	800b6540 	call	800b654 <__divdf3>
 8003a50:	180b883a 	mov	r5,r3
 8003a54:	1009883a 	mov	r4,r2
 8003a58:	800d3540 	call	800d354 <__fixdfsi>
 8003a5c:	1009883a 	mov	r4,r2
 8003a60:	102d883a 	mov	r22,r2
 8003a64:	800d3dc0 	call	800d3dc <__floatsidf>
 8003a68:	1009883a 	mov	r4,r2
 8003a6c:	180b883a 	mov	r5,r3
 8003a70:	880d883a 	mov	r6,r17
 8003a74:	a00f883a 	mov	r7,r20
 8003a78:	800c2180 	call	800c218 <__muldf3>
 8003a7c:	9009883a 	mov	r4,r18
 8003a80:	980b883a 	mov	r5,r19
 8003a84:	100d883a 	mov	r6,r2
 8003a88:	180f883a 	mov	r7,r3
 8003a8c:	800ca840 	call	800ca84 <__subdf3>
 8003a90:	d9000717 	ldw	r4,28(sp)
 8003a94:	d9800617 	ldw	r6,24(sp)
 8003a98:	180b883a 	mov	r5,r3
 8003a9c:	b0c00c04 	addi	r3,r22,48
 8003aa0:	20c00005 	stb	r3,0(r4)
 8003aa4:	25c00044 	addi	r23,r4,1
 8003aa8:	01000044 	movi	r4,1
 8003aac:	1011883a 	mov	r8,r2
 8003ab0:	2807883a 	mov	r3,r5
 8003ab4:	31003d26 	beq	r6,r4,8003bac <_dtoa_r+0x918>
 8003ab8:	000d883a 	mov	r6,zero
 8003abc:	01d00934 	movhi	r7,16420
 8003ac0:	1009883a 	mov	r4,r2
 8003ac4:	800c2180 	call	800c218 <__muldf3>
 8003ac8:	1009883a 	mov	r4,r2
 8003acc:	180b883a 	mov	r5,r3
 8003ad0:	000d883a 	mov	r6,zero
 8003ad4:	000f883a 	mov	r7,zero
 8003ad8:	1027883a 	mov	r19,r2
 8003adc:	182b883a 	mov	r21,r3
 8003ae0:	800bfd40 	call	800bfd4 <__eqdf2>
 8003ae4:	103f9926 	beq	r2,zero,800394c <__alt_data_end+0xfc00394c>
 8003ae8:	d8c00617 	ldw	r3,24(sp)
 8003aec:	d9000717 	ldw	r4,28(sp)
 8003af0:	b825883a 	mov	r18,r23
 8003af4:	18bfffc4 	addi	r2,r3,-1
 8003af8:	20ad883a 	add	r22,r4,r2
 8003afc:	dc000315 	stw	r16,12(sp)
 8003b00:	00000a06 	br	8003b2c <_dtoa_r+0x898>
 8003b04:	800c2180 	call	800c218 <__muldf3>
 8003b08:	1009883a 	mov	r4,r2
 8003b0c:	180b883a 	mov	r5,r3
 8003b10:	000d883a 	mov	r6,zero
 8003b14:	000f883a 	mov	r7,zero
 8003b18:	1027883a 	mov	r19,r2
 8003b1c:	182b883a 	mov	r21,r3
 8003b20:	b825883a 	mov	r18,r23
 8003b24:	800bfd40 	call	800bfd4 <__eqdf2>
 8003b28:	10022626 	beq	r2,zero,80043c4 <_dtoa_r+0x1130>
 8003b2c:	880d883a 	mov	r6,r17
 8003b30:	a00f883a 	mov	r7,r20
 8003b34:	9809883a 	mov	r4,r19
 8003b38:	a80b883a 	mov	r5,r21
 8003b3c:	800b6540 	call	800b654 <__divdf3>
 8003b40:	180b883a 	mov	r5,r3
 8003b44:	1009883a 	mov	r4,r2
 8003b48:	800d3540 	call	800d354 <__fixdfsi>
 8003b4c:	1009883a 	mov	r4,r2
 8003b50:	1021883a 	mov	r16,r2
 8003b54:	800d3dc0 	call	800d3dc <__floatsidf>
 8003b58:	1009883a 	mov	r4,r2
 8003b5c:	180b883a 	mov	r5,r3
 8003b60:	880d883a 	mov	r6,r17
 8003b64:	a00f883a 	mov	r7,r20
 8003b68:	800c2180 	call	800c218 <__muldf3>
 8003b6c:	9809883a 	mov	r4,r19
 8003b70:	a80b883a 	mov	r5,r21
 8003b74:	100d883a 	mov	r6,r2
 8003b78:	180f883a 	mov	r7,r3
 8003b7c:	800ca840 	call	800ca84 <__subdf3>
 8003b80:	82000c04 	addi	r8,r16,48
 8003b84:	92000005 	stb	r8,0(r18)
 8003b88:	1009883a 	mov	r4,r2
 8003b8c:	180b883a 	mov	r5,r3
 8003b90:	000d883a 	mov	r6,zero
 8003b94:	01d00934 	movhi	r7,16420
 8003b98:	1011883a 	mov	r8,r2
 8003b9c:	bdc00044 	addi	r23,r23,1
 8003ba0:	95bfd81e 	bne	r18,r22,8003b04 <__alt_data_end+0xfc003b04>
 8003ba4:	802d883a 	mov	r22,r16
 8003ba8:	dc000317 	ldw	r16,12(sp)
 8003bac:	4009883a 	mov	r4,r8
 8003bb0:	180b883a 	mov	r5,r3
 8003bb4:	400d883a 	mov	r6,r8
 8003bb8:	180f883a 	mov	r7,r3
 8003bbc:	800adb80 	call	800adb8 <__adddf3>
 8003bc0:	8809883a 	mov	r4,r17
 8003bc4:	a00b883a 	mov	r5,r20
 8003bc8:	100d883a 	mov	r6,r2
 8003bcc:	180f883a 	mov	r7,r3
 8003bd0:	1027883a 	mov	r19,r2
 8003bd4:	1825883a 	mov	r18,r3
 8003bd8:	800c1380 	call	800c138 <__ledf2>
 8003bdc:	10000816 	blt	r2,zero,8003c00 <_dtoa_r+0x96c>
 8003be0:	8809883a 	mov	r4,r17
 8003be4:	a00b883a 	mov	r5,r20
 8003be8:	980d883a 	mov	r6,r19
 8003bec:	900f883a 	mov	r7,r18
 8003bf0:	800bfd40 	call	800bfd4 <__eqdf2>
 8003bf4:	103f551e 	bne	r2,zero,800394c <__alt_data_end+0xfc00394c>
 8003bf8:	b580004c 	andi	r22,r22,1
 8003bfc:	b03f5326 	beq	r22,zero,800394c <__alt_data_end+0xfc00394c>
 8003c00:	bd7fffc3 	ldbu	r21,-1(r23)
 8003c04:	b8bfffc4 	addi	r2,r23,-1
 8003c08:	1007883a 	mov	r3,r2
 8003c0c:	01400e44 	movi	r5,57
 8003c10:	d9800717 	ldw	r6,28(sp)
 8003c14:	00000506 	br	8003c2c <_dtoa_r+0x998>
 8003c18:	18ffffc4 	addi	r3,r3,-1
 8003c1c:	30825e26 	beq	r6,r2,8004598 <_dtoa_r+0x1304>
 8003c20:	1d400003 	ldbu	r21,0(r3)
 8003c24:	102f883a 	mov	r23,r2
 8003c28:	10bfffc4 	addi	r2,r2,-1
 8003c2c:	a9003fcc 	andi	r4,r21,255
 8003c30:	2100201c 	xori	r4,r4,128
 8003c34:	213fe004 	addi	r4,r4,-128
 8003c38:	217ff726 	beq	r4,r5,8003c18 <__alt_data_end+0xfc003c18>
 8003c3c:	aa000044 	addi	r8,r21,1
 8003c40:	12000005 	stb	r8,0(r2)
 8003c44:	003f4106 	br	800394c <__alt_data_end+0xfc00394c>
 8003c48:	d8c00b17 	ldw	r3,44(sp)
 8003c4c:	18006726 	beq	r3,zero,8003dec <_dtoa_r+0xb58>
 8003c50:	d9000317 	ldw	r4,12(sp)
 8003c54:	00c00044 	movi	r3,1
 8003c58:	19016a0e 	bge	r3,r4,8004204 <_dtoa_r+0xf70>
 8003c5c:	d8800617 	ldw	r2,24(sp)
 8003c60:	d8c00917 	ldw	r3,36(sp)
 8003c64:	157fffc4 	addi	r21,r2,-1
 8003c68:	1d420716 	blt	r3,r21,8004488 <_dtoa_r+0x11f4>
 8003c6c:	1d6bc83a 	sub	r21,r3,r21
 8003c70:	d8800617 	ldw	r2,24(sp)
 8003c74:	1002c716 	blt	r2,zero,8004794 <_dtoa_r+0x1500>
 8003c78:	dd000817 	ldw	r20,32(sp)
 8003c7c:	d8800617 	ldw	r2,24(sp)
 8003c80:	d9800817 	ldw	r6,32(sp)
 8003c84:	8009883a 	mov	r4,r16
 8003c88:	01400044 	movi	r5,1
 8003c8c:	308d883a 	add	r6,r6,r2
 8003c90:	d9800815 	stw	r6,32(sp)
 8003c94:	b0ad883a 	add	r22,r22,r2
 8003c98:	8006cf80 	call	8006cf8 <__i2b>
 8003c9c:	1023883a 	mov	r17,r2
 8003ca0:	a0000826 	beq	r20,zero,8003cc4 <_dtoa_r+0xa30>
 8003ca4:	0580070e 	bge	zero,r22,8003cc4 <_dtoa_r+0xa30>
 8003ca8:	b005883a 	mov	r2,r22
 8003cac:	a5812016 	blt	r20,r22,8004130 <_dtoa_r+0xe9c>
 8003cb0:	d8c00817 	ldw	r3,32(sp)
 8003cb4:	a0a9c83a 	sub	r20,r20,r2
 8003cb8:	b0adc83a 	sub	r22,r22,r2
 8003cbc:	1887c83a 	sub	r3,r3,r2
 8003cc0:	d8c00815 	stw	r3,32(sp)
 8003cc4:	d9000917 	ldw	r4,36(sp)
 8003cc8:	0100140e 	bge	zero,r4,8003d1c <_dtoa_r+0xa88>
 8003ccc:	d9800b17 	ldw	r6,44(sp)
 8003cd0:	3001e526 	beq	r6,zero,8004468 <_dtoa_r+0x11d4>
 8003cd4:	05400e0e 	bge	zero,r21,8003d10 <_dtoa_r+0xa7c>
 8003cd8:	880b883a 	mov	r5,r17
 8003cdc:	8009883a 	mov	r4,r16
 8003ce0:	a80d883a 	mov	r6,r21
 8003ce4:	8006fc40 	call	8006fc4 <__pow5mult>
 8003ce8:	e00d883a 	mov	r6,fp
 8003cec:	8009883a 	mov	r4,r16
 8003cf0:	100b883a 	mov	r5,r2
 8003cf4:	1023883a 	mov	r17,r2
 8003cf8:	8006d340 	call	8006d34 <__multiply>
 8003cfc:	102f883a 	mov	r23,r2
 8003d00:	e00b883a 	mov	r5,fp
 8003d04:	8009883a 	mov	r4,r16
 8003d08:	80069780 	call	8006978 <_Bfree>
 8003d0c:	b839883a 	mov	fp,r23
 8003d10:	d8800917 	ldw	r2,36(sp)
 8003d14:	154dc83a 	sub	r6,r2,r21
 8003d18:	3001281e 	bne	r6,zero,80041bc <_dtoa_r+0xf28>
 8003d1c:	05c00044 	movi	r23,1
 8003d20:	8009883a 	mov	r4,r16
 8003d24:	b80b883a 	mov	r5,r23
 8003d28:	8006cf80 	call	8006cf8 <__i2b>
 8003d2c:	d8c00a17 	ldw	r3,40(sp)
 8003d30:	102b883a 	mov	r21,r2
 8003d34:	00c0310e 	bge	zero,r3,8003dfc <_dtoa_r+0xb68>
 8003d38:	8009883a 	mov	r4,r16
 8003d3c:	100b883a 	mov	r5,r2
 8003d40:	180d883a 	mov	r6,r3
 8003d44:	8006fc40 	call	8006fc4 <__pow5mult>
 8003d48:	d9000317 	ldw	r4,12(sp)
 8003d4c:	102b883a 	mov	r21,r2
 8003d50:	b9011f0e 	bge	r23,r4,80041d0 <_dtoa_r+0xf3c>
 8003d54:	0027883a 	mov	r19,zero
 8003d58:	a8800417 	ldw	r2,16(r21)
 8003d5c:	10800104 	addi	r2,r2,4
 8003d60:	1085883a 	add	r2,r2,r2
 8003d64:	1085883a 	add	r2,r2,r2
 8003d68:	a885883a 	add	r2,r21,r2
 8003d6c:	11000017 	ldw	r4,0(r2)
 8003d70:	8006be00 	call	8006be0 <__hi0bits>
 8003d74:	00c00804 	movi	r3,32
 8003d78:	1885c83a 	sub	r2,r3,r2
 8003d7c:	00002506 	br	8003e14 <_dtoa_r+0xb80>
 8003d80:	01800044 	movi	r6,1
 8003d84:	d9800c15 	stw	r6,48(sp)
 8003d88:	003dec06 	br	800353c <__alt_data_end+0xfc00353c>
 8003d8c:	d8c00817 	ldw	r3,32(sp)
 8003d90:	d9000517 	ldw	r4,20(sp)
 8003d94:	d8000a15 	stw	zero,40(sp)
 8003d98:	1907c83a 	sub	r3,r3,r4
 8003d9c:	010dc83a 	sub	r6,zero,r4
 8003da0:	d8c00815 	stw	r3,32(sp)
 8003da4:	d9800915 	stw	r6,36(sp)
 8003da8:	003ded06 	br	8003560 <__alt_data_end+0xfc003560>
 8003dac:	05adc83a 	sub	r22,zero,r22
 8003db0:	dd800815 	stw	r22,32(sp)
 8003db4:	002d883a 	mov	r22,zero
 8003db8:	003de406 	br	800354c <__alt_data_end+0xfc00354c>
 8003dbc:	d9000517 	ldw	r4,20(sp)
 8003dc0:	800d3dc0 	call	800d3dc <__floatsidf>
 8003dc4:	1009883a 	mov	r4,r2
 8003dc8:	180b883a 	mov	r5,r3
 8003dcc:	b00d883a 	mov	r6,r22
 8003dd0:	a80f883a 	mov	r7,r21
 8003dd4:	800bfd40 	call	800bfd4 <__eqdf2>
 8003dd8:	103dc726 	beq	r2,zero,80034f8 <__alt_data_end+0xfc0034f8>
 8003ddc:	d8800517 	ldw	r2,20(sp)
 8003de0:	10bfffc4 	addi	r2,r2,-1
 8003de4:	d8800515 	stw	r2,20(sp)
 8003de8:	003dc306 	br	80034f8 <__alt_data_end+0xfc0034f8>
 8003dec:	dd400917 	ldw	r21,36(sp)
 8003df0:	dd000817 	ldw	r20,32(sp)
 8003df4:	0023883a 	mov	r17,zero
 8003df8:	003fa906 	br	8003ca0 <__alt_data_end+0xfc003ca0>
 8003dfc:	d9800317 	ldw	r6,12(sp)
 8003e00:	b981670e 	bge	r23,r6,80043a0 <_dtoa_r+0x110c>
 8003e04:	0027883a 	mov	r19,zero
 8003e08:	d8c00a17 	ldw	r3,40(sp)
 8003e0c:	183fd21e 	bne	r3,zero,8003d58 <__alt_data_end+0xfc003d58>
 8003e10:	00800044 	movi	r2,1
 8003e14:	1585883a 	add	r2,r2,r22
 8003e18:	108007cc 	andi	r2,r2,31
 8003e1c:	10005f26 	beq	r2,zero,8003f9c <_dtoa_r+0xd08>
 8003e20:	00c00804 	movi	r3,32
 8003e24:	1887c83a 	sub	r3,r3,r2
 8003e28:	01000104 	movi	r4,4
 8003e2c:	20c2dd0e 	bge	r4,r3,80049a4 <_dtoa_r+0x1710>
 8003e30:	d9000817 	ldw	r4,32(sp)
 8003e34:	00c00704 	movi	r3,28
 8003e38:	1885c83a 	sub	r2,r3,r2
 8003e3c:	2089883a 	add	r4,r4,r2
 8003e40:	d9000815 	stw	r4,32(sp)
 8003e44:	a0a9883a 	add	r20,r20,r2
 8003e48:	b0ad883a 	add	r22,r22,r2
 8003e4c:	d8800817 	ldw	r2,32(sp)
 8003e50:	0080050e 	bge	zero,r2,8003e68 <_dtoa_r+0xbd4>
 8003e54:	e00b883a 	mov	r5,fp
 8003e58:	8009883a 	mov	r4,r16
 8003e5c:	100d883a 	mov	r6,r2
 8003e60:	80071040 	call	8007104 <__lshift>
 8003e64:	1039883a 	mov	fp,r2
 8003e68:	0580050e 	bge	zero,r22,8003e80 <_dtoa_r+0xbec>
 8003e6c:	a80b883a 	mov	r5,r21
 8003e70:	8009883a 	mov	r4,r16
 8003e74:	b00d883a 	mov	r6,r22
 8003e78:	80071040 	call	8007104 <__lshift>
 8003e7c:	102b883a 	mov	r21,r2
 8003e80:	d8c00c17 	ldw	r3,48(sp)
 8003e84:	1801161e 	bne	r3,zero,80042e0 <_dtoa_r+0x104c>
 8003e88:	d8c00617 	ldw	r3,24(sp)
 8003e8c:	00c12d0e 	bge	zero,r3,8004344 <_dtoa_r+0x10b0>
 8003e90:	d8c00b17 	ldw	r3,44(sp)
 8003e94:	1800571e 	bne	r3,zero,8003ff4 <_dtoa_r+0xd60>
 8003e98:	dc800717 	ldw	r18,28(sp)
 8003e9c:	dcc00617 	ldw	r19,24(sp)
 8003ea0:	9029883a 	mov	r20,r18
 8003ea4:	00000206 	br	8003eb0 <_dtoa_r+0xc1c>
 8003ea8:	80069a00 	call	80069a0 <__multadd>
 8003eac:	1039883a 	mov	fp,r2
 8003eb0:	e009883a 	mov	r4,fp
 8003eb4:	a80b883a 	mov	r5,r21
 8003eb8:	800306c0 	call	800306c <quorem>
 8003ebc:	10800c04 	addi	r2,r2,48
 8003ec0:	90800005 	stb	r2,0(r18)
 8003ec4:	94800044 	addi	r18,r18,1
 8003ec8:	9507c83a 	sub	r3,r18,r20
 8003ecc:	8009883a 	mov	r4,r16
 8003ed0:	e00b883a 	mov	r5,fp
 8003ed4:	01800284 	movi	r6,10
 8003ed8:	000f883a 	mov	r7,zero
 8003edc:	1cfff216 	blt	r3,r19,8003ea8 <__alt_data_end+0xfc003ea8>
 8003ee0:	1011883a 	mov	r8,r2
 8003ee4:	d8800617 	ldw	r2,24(sp)
 8003ee8:	00822e0e 	bge	zero,r2,80047a4 <_dtoa_r+0x1510>
 8003eec:	d9000717 	ldw	r4,28(sp)
 8003ef0:	0025883a 	mov	r18,zero
 8003ef4:	20af883a 	add	r23,r4,r2
 8003ef8:	e00b883a 	mov	r5,fp
 8003efc:	01800044 	movi	r6,1
 8003f00:	8009883a 	mov	r4,r16
 8003f04:	da001715 	stw	r8,92(sp)
 8003f08:	80071040 	call	8007104 <__lshift>
 8003f0c:	1009883a 	mov	r4,r2
 8003f10:	a80b883a 	mov	r5,r21
 8003f14:	1039883a 	mov	fp,r2
 8003f18:	800724c0 	call	800724c <__mcmp>
 8003f1c:	da001717 	ldw	r8,92(sp)
 8003f20:	00816e0e 	bge	zero,r2,80044dc <_dtoa_r+0x1248>
 8003f24:	b93fffc3 	ldbu	r4,-1(r23)
 8003f28:	b8bfffc4 	addi	r2,r23,-1
 8003f2c:	1007883a 	mov	r3,r2
 8003f30:	01800e44 	movi	r6,57
 8003f34:	d9c00717 	ldw	r7,28(sp)
 8003f38:	00000506 	br	8003f50 <_dtoa_r+0xcbc>
 8003f3c:	18ffffc4 	addi	r3,r3,-1
 8003f40:	38811926 	beq	r7,r2,80043a8 <_dtoa_r+0x1114>
 8003f44:	19000003 	ldbu	r4,0(r3)
 8003f48:	102f883a 	mov	r23,r2
 8003f4c:	10bfffc4 	addi	r2,r2,-1
 8003f50:	21403fcc 	andi	r5,r4,255
 8003f54:	2940201c 	xori	r5,r5,128
 8003f58:	297fe004 	addi	r5,r5,-128
 8003f5c:	29bff726 	beq	r5,r6,8003f3c <__alt_data_end+0xfc003f3c>
 8003f60:	21000044 	addi	r4,r4,1
 8003f64:	11000005 	stb	r4,0(r2)
 8003f68:	8009883a 	mov	r4,r16
 8003f6c:	a80b883a 	mov	r5,r21
 8003f70:	80069780 	call	8006978 <_Bfree>
 8003f74:	883e7526 	beq	r17,zero,800394c <__alt_data_end+0xfc00394c>
 8003f78:	90000426 	beq	r18,zero,8003f8c <_dtoa_r+0xcf8>
 8003f7c:	94400326 	beq	r18,r17,8003f8c <_dtoa_r+0xcf8>
 8003f80:	8009883a 	mov	r4,r16
 8003f84:	900b883a 	mov	r5,r18
 8003f88:	80069780 	call	8006978 <_Bfree>
 8003f8c:	8009883a 	mov	r4,r16
 8003f90:	880b883a 	mov	r5,r17
 8003f94:	80069780 	call	8006978 <_Bfree>
 8003f98:	003e6c06 	br	800394c <__alt_data_end+0xfc00394c>
 8003f9c:	00800704 	movi	r2,28
 8003fa0:	d9800817 	ldw	r6,32(sp)
 8003fa4:	a0a9883a 	add	r20,r20,r2
 8003fa8:	b0ad883a 	add	r22,r22,r2
 8003fac:	308d883a 	add	r6,r6,r2
 8003fb0:	d9800815 	stw	r6,32(sp)
 8003fb4:	003fa506 	br	8003e4c <__alt_data_end+0xfc003e4c>
 8003fb8:	013efb84 	movi	r4,-1042
 8003fbc:	246bc83a 	sub	r21,r4,r17
 8003fc0:	9548983a 	sll	r4,r18,r21
 8003fc4:	003d1806 	br	8003428 <__alt_data_end+0xfc003428>
 8003fc8:	d8000c15 	stw	zero,48(sp)
 8003fcc:	003d5b06 	br	800353c <__alt_data_end+0xfc00353c>
 8003fd0:	880b883a 	mov	r5,r17
 8003fd4:	8009883a 	mov	r4,r16
 8003fd8:	01800284 	movi	r6,10
 8003fdc:	000f883a 	mov	r7,zero
 8003fe0:	80069a00 	call	80069a0 <__multadd>
 8003fe4:	1023883a 	mov	r17,r2
 8003fe8:	d8800d17 	ldw	r2,52(sp)
 8003fec:	0082550e 	bge	zero,r2,8004944 <_dtoa_r+0x16b0>
 8003ff0:	d8800615 	stw	r2,24(sp)
 8003ff4:	0500050e 	bge	zero,r20,800400c <_dtoa_r+0xd78>
 8003ff8:	880b883a 	mov	r5,r17
 8003ffc:	8009883a 	mov	r4,r16
 8004000:	a00d883a 	mov	r6,r20
 8004004:	80071040 	call	8007104 <__lshift>
 8004008:	1023883a 	mov	r17,r2
 800400c:	98016a1e 	bne	r19,zero,80045b8 <_dtoa_r+0x1324>
 8004010:	8829883a 	mov	r20,r17
 8004014:	d9000617 	ldw	r4,24(sp)
 8004018:	dcc00717 	ldw	r19,28(sp)
 800401c:	9480004c 	andi	r18,r18,1
 8004020:	20bfffc4 	addi	r2,r4,-1
 8004024:	9885883a 	add	r2,r19,r2
 8004028:	d8800415 	stw	r2,16(sp)
 800402c:	dc800615 	stw	r18,24(sp)
 8004030:	e009883a 	mov	r4,fp
 8004034:	a80b883a 	mov	r5,r21
 8004038:	800306c0 	call	800306c <quorem>
 800403c:	e009883a 	mov	r4,fp
 8004040:	880b883a 	mov	r5,r17
 8004044:	102f883a 	mov	r23,r2
 8004048:	800724c0 	call	800724c <__mcmp>
 800404c:	8009883a 	mov	r4,r16
 8004050:	a80b883a 	mov	r5,r21
 8004054:	a00d883a 	mov	r6,r20
 8004058:	102d883a 	mov	r22,r2
 800405c:	80072ac0 	call	80072ac <__mdiff>
 8004060:	1007883a 	mov	r3,r2
 8004064:	10800317 	ldw	r2,12(r2)
 8004068:	bc800c04 	addi	r18,r23,48
 800406c:	1000971e 	bne	r2,zero,80042cc <_dtoa_r+0x1038>
 8004070:	180b883a 	mov	r5,r3
 8004074:	e009883a 	mov	r4,fp
 8004078:	d8c01515 	stw	r3,84(sp)
 800407c:	800724c0 	call	800724c <__mcmp>
 8004080:	d8c01517 	ldw	r3,84(sp)
 8004084:	8009883a 	mov	r4,r16
 8004088:	d8801515 	stw	r2,84(sp)
 800408c:	180b883a 	mov	r5,r3
 8004090:	80069780 	call	8006978 <_Bfree>
 8004094:	d8801517 	ldw	r2,84(sp)
 8004098:	1000041e 	bne	r2,zero,80040ac <_dtoa_r+0xe18>
 800409c:	d9800317 	ldw	r6,12(sp)
 80040a0:	3000021e 	bne	r6,zero,80040ac <_dtoa_r+0xe18>
 80040a4:	d8c00617 	ldw	r3,24(sp)
 80040a8:	18007626 	beq	r3,zero,8004284 <_dtoa_r+0xff0>
 80040ac:	b0005b16 	blt	r22,zero,800421c <_dtoa_r+0xf88>
 80040b0:	b000041e 	bne	r22,zero,80040c4 <_dtoa_r+0xe30>
 80040b4:	d9000317 	ldw	r4,12(sp)
 80040b8:	2000021e 	bne	r4,zero,80040c4 <_dtoa_r+0xe30>
 80040bc:	d8c00617 	ldw	r3,24(sp)
 80040c0:	18005626 	beq	r3,zero,800421c <_dtoa_r+0xf88>
 80040c4:	00814d16 	blt	zero,r2,80045fc <_dtoa_r+0x1368>
 80040c8:	d8c00417 	ldw	r3,16(sp)
 80040cc:	9d800044 	addi	r22,r19,1
 80040d0:	9c800005 	stb	r18,0(r19)
 80040d4:	b02f883a 	mov	r23,r22
 80040d8:	98c14c26 	beq	r19,r3,800460c <_dtoa_r+0x1378>
 80040dc:	e00b883a 	mov	r5,fp
 80040e0:	8009883a 	mov	r4,r16
 80040e4:	01800284 	movi	r6,10
 80040e8:	000f883a 	mov	r7,zero
 80040ec:	80069a00 	call	80069a0 <__multadd>
 80040f0:	1039883a 	mov	fp,r2
 80040f4:	8d006d26 	beq	r17,r20,80042ac <_dtoa_r+0x1018>
 80040f8:	880b883a 	mov	r5,r17
 80040fc:	01800284 	movi	r6,10
 8004100:	000f883a 	mov	r7,zero
 8004104:	8009883a 	mov	r4,r16
 8004108:	80069a00 	call	80069a0 <__multadd>
 800410c:	a00b883a 	mov	r5,r20
 8004110:	8009883a 	mov	r4,r16
 8004114:	01800284 	movi	r6,10
 8004118:	000f883a 	mov	r7,zero
 800411c:	1023883a 	mov	r17,r2
 8004120:	80069a00 	call	80069a0 <__multadd>
 8004124:	1029883a 	mov	r20,r2
 8004128:	b027883a 	mov	r19,r22
 800412c:	003fc006 	br	8004030 <__alt_data_end+0xfc004030>
 8004130:	a005883a 	mov	r2,r20
 8004134:	003ede06 	br	8003cb0 <__alt_data_end+0xfc003cb0>
 8004138:	01000044 	movi	r4,1
 800413c:	d9000b15 	stw	r4,44(sp)
 8004140:	d9802217 	ldw	r6,136(sp)
 8004144:	0180dc0e 	bge	zero,r6,80044b8 <_dtoa_r+0x1224>
 8004148:	3023883a 	mov	r17,r6
 800414c:	d9800d15 	stw	r6,52(sp)
 8004150:	d9800615 	stw	r6,24(sp)
 8004154:	003d1e06 	br	80035d0 <__alt_data_end+0xfc0035d0>
 8004158:	d8800617 	ldw	r2,24(sp)
 800415c:	00be3716 	blt	zero,r2,8003a3c <__alt_data_end+0xfc003a3c>
 8004160:	1000be1e 	bne	r2,zero,800445c <_dtoa_r+0x11c8>
 8004164:	8809883a 	mov	r4,r17
 8004168:	a00b883a 	mov	r5,r20
 800416c:	000d883a 	mov	r6,zero
 8004170:	01d00534 	movhi	r7,16404
 8004174:	800c2180 	call	800c218 <__muldf3>
 8004178:	1009883a 	mov	r4,r2
 800417c:	180b883a 	mov	r5,r3
 8004180:	900d883a 	mov	r6,r18
 8004184:	980f883a 	mov	r7,r19
 8004188:	800c0580 	call	800c058 <__gedf2>
 800418c:	002b883a 	mov	r21,zero
 8004190:	0023883a 	mov	r17,zero
 8004194:	10007a16 	blt	r2,zero,8004380 <_dtoa_r+0x10ec>
 8004198:	d9002217 	ldw	r4,136(sp)
 800419c:	ddc00717 	ldw	r23,28(sp)
 80041a0:	0108303a 	nor	r4,zero,r4
 80041a4:	d9000515 	stw	r4,20(sp)
 80041a8:	8009883a 	mov	r4,r16
 80041ac:	a80b883a 	mov	r5,r21
 80041b0:	80069780 	call	8006978 <_Bfree>
 80041b4:	883f751e 	bne	r17,zero,8003f8c <__alt_data_end+0xfc003f8c>
 80041b8:	003de406 	br	800394c <__alt_data_end+0xfc00394c>
 80041bc:	e00b883a 	mov	r5,fp
 80041c0:	8009883a 	mov	r4,r16
 80041c4:	8006fc40 	call	8006fc4 <__pow5mult>
 80041c8:	1039883a 	mov	fp,r2
 80041cc:	003ed306 	br	8003d1c <__alt_data_end+0xfc003d1c>
 80041d0:	903ee01e 	bne	r18,zero,8003d54 <__alt_data_end+0xfc003d54>
 80041d4:	00800434 	movhi	r2,16
 80041d8:	10bfffc4 	addi	r2,r2,-1
 80041dc:	9884703a 	and	r2,r19,r2
 80041e0:	103f081e 	bne	r2,zero,8003e04 <__alt_data_end+0xfc003e04>
 80041e4:	9cdffc2c 	andhi	r19,r19,32752
 80041e8:	983f0626 	beq	r19,zero,8003e04 <__alt_data_end+0xfc003e04>
 80041ec:	d8800817 	ldw	r2,32(sp)
 80041f0:	b5800044 	addi	r22,r22,1
 80041f4:	04c00044 	movi	r19,1
 80041f8:	10800044 	addi	r2,r2,1
 80041fc:	d8800815 	stw	r2,32(sp)
 8004200:	003f0106 	br	8003e08 <__alt_data_end+0xfc003e08>
 8004204:	d9800f17 	ldw	r6,60(sp)
 8004208:	30016826 	beq	r6,zero,80047ac <_dtoa_r+0x1518>
 800420c:	10810cc4 	addi	r2,r2,1075
 8004210:	dd400917 	ldw	r21,36(sp)
 8004214:	dd000817 	ldw	r20,32(sp)
 8004218:	003e9906 	br	8003c80 <__alt_data_end+0xfc003c80>
 800421c:	9011883a 	mov	r8,r18
 8004220:	4007883a 	mov	r3,r8
 8004224:	e02d883a 	mov	r22,fp
 8004228:	0080100e 	bge	zero,r2,800426c <_dtoa_r+0xfd8>
 800422c:	01800044 	movi	r6,1
 8004230:	8009883a 	mov	r4,r16
 8004234:	e00b883a 	mov	r5,fp
 8004238:	da001515 	stw	r8,84(sp)
 800423c:	da001715 	stw	r8,92(sp)
 8004240:	80071040 	call	8007104 <__lshift>
 8004244:	1009883a 	mov	r4,r2
 8004248:	a80b883a 	mov	r5,r21
 800424c:	102d883a 	mov	r22,r2
 8004250:	800724c0 	call	800724c <__mcmp>
 8004254:	d8c01517 	ldw	r3,84(sp)
 8004258:	da001717 	ldw	r8,92(sp)
 800425c:	0081a50e 	bge	zero,r2,80048f4 <_dtoa_r+0x1660>
 8004260:	00800e44 	movi	r2,57
 8004264:	40817b26 	beq	r8,r2,8004854 <_dtoa_r+0x15c0>
 8004268:	40c00044 	addi	r3,r8,1
 800426c:	8825883a 	mov	r18,r17
 8004270:	9dc00044 	addi	r23,r19,1
 8004274:	98c00005 	stb	r3,0(r19)
 8004278:	a023883a 	mov	r17,r20
 800427c:	b039883a 	mov	fp,r22
 8004280:	003f3906 	br	8003f68 <__alt_data_end+0xfc003f68>
 8004284:	00800e44 	movi	r2,57
 8004288:	9011883a 	mov	r8,r18
 800428c:	90817226 	beq	r18,r2,8004858 <_dtoa_r+0x15c4>
 8004290:	0580010e 	bge	zero,r22,8004298 <_dtoa_r+0x1004>
 8004294:	ba000c44 	addi	r8,r23,49
 8004298:	8825883a 	mov	r18,r17
 800429c:	9dc00044 	addi	r23,r19,1
 80042a0:	9a000005 	stb	r8,0(r19)
 80042a4:	a023883a 	mov	r17,r20
 80042a8:	003f2f06 	br	8003f68 <__alt_data_end+0xfc003f68>
 80042ac:	880b883a 	mov	r5,r17
 80042b0:	8009883a 	mov	r4,r16
 80042b4:	01800284 	movi	r6,10
 80042b8:	000f883a 	mov	r7,zero
 80042bc:	80069a00 	call	80069a0 <__multadd>
 80042c0:	1023883a 	mov	r17,r2
 80042c4:	1029883a 	mov	r20,r2
 80042c8:	003f9706 	br	8004128 <__alt_data_end+0xfc004128>
 80042cc:	8009883a 	mov	r4,r16
 80042d0:	180b883a 	mov	r5,r3
 80042d4:	80069780 	call	8006978 <_Bfree>
 80042d8:	00800044 	movi	r2,1
 80042dc:	003f7306 	br	80040ac <__alt_data_end+0xfc0040ac>
 80042e0:	e009883a 	mov	r4,fp
 80042e4:	a80b883a 	mov	r5,r21
 80042e8:	800724c0 	call	800724c <__mcmp>
 80042ec:	103ee60e 	bge	r2,zero,8003e88 <__alt_data_end+0xfc003e88>
 80042f0:	8009883a 	mov	r4,r16
 80042f4:	e00b883a 	mov	r5,fp
 80042f8:	01800284 	movi	r6,10
 80042fc:	000f883a 	mov	r7,zero
 8004300:	80069a00 	call	80069a0 <__multadd>
 8004304:	d9000517 	ldw	r4,20(sp)
 8004308:	d9800b17 	ldw	r6,44(sp)
 800430c:	1039883a 	mov	fp,r2
 8004310:	213fffc4 	addi	r4,r4,-1
 8004314:	d9000515 	stw	r4,20(sp)
 8004318:	303f2d1e 	bne	r6,zero,8003fd0 <__alt_data_end+0xfc003fd0>
 800431c:	d9000d17 	ldw	r4,52(sp)
 8004320:	0101780e 	bge	zero,r4,8004904 <_dtoa_r+0x1670>
 8004324:	d9000615 	stw	r4,24(sp)
 8004328:	003edb06 	br	8003e98 <__alt_data_end+0xfc003e98>
 800432c:	00800084 	movi	r2,2
 8004330:	30818e1e 	bne	r6,r2,800496c <_dtoa_r+0x16d8>
 8004334:	d8000b15 	stw	zero,44(sp)
 8004338:	003f8106 	br	8004140 <__alt_data_end+0xfc004140>
 800433c:	d8800717 	ldw	r2,28(sp)
 8004340:	003c0306 	br	8003350 <__alt_data_end+0xfc003350>
 8004344:	d9000317 	ldw	r4,12(sp)
 8004348:	00800084 	movi	r2,2
 800434c:	113ed00e 	bge	r2,r4,8003e90 <__alt_data_end+0xfc003e90>
 8004350:	d8c00617 	ldw	r3,24(sp)
 8004354:	183f901e 	bne	r3,zero,8004198 <__alt_data_end+0xfc004198>
 8004358:	a80b883a 	mov	r5,r21
 800435c:	8009883a 	mov	r4,r16
 8004360:	01800144 	movi	r6,5
 8004364:	000f883a 	mov	r7,zero
 8004368:	80069a00 	call	80069a0 <__multadd>
 800436c:	e009883a 	mov	r4,fp
 8004370:	100b883a 	mov	r5,r2
 8004374:	102b883a 	mov	r21,r2
 8004378:	800724c0 	call	800724c <__mcmp>
 800437c:	00bf860e 	bge	zero,r2,8004198 <__alt_data_end+0xfc004198>
 8004380:	d9800717 	ldw	r6,28(sp)
 8004384:	00800c44 	movi	r2,49
 8004388:	30800005 	stb	r2,0(r6)
 800438c:	d8800517 	ldw	r2,20(sp)
 8004390:	35c00044 	addi	r23,r6,1
 8004394:	10800044 	addi	r2,r2,1
 8004398:	d8800515 	stw	r2,20(sp)
 800439c:	003f8206 	br	80041a8 <__alt_data_end+0xfc0041a8>
 80043a0:	903e981e 	bne	r18,zero,8003e04 <__alt_data_end+0xfc003e04>
 80043a4:	003f8b06 	br	80041d4 <__alt_data_end+0xfc0041d4>
 80043a8:	d9800517 	ldw	r6,20(sp)
 80043ac:	d8c00717 	ldw	r3,28(sp)
 80043b0:	00800c44 	movi	r2,49
 80043b4:	31800044 	addi	r6,r6,1
 80043b8:	d9800515 	stw	r6,20(sp)
 80043bc:	18800005 	stb	r2,0(r3)
 80043c0:	003ee906 	br	8003f68 <__alt_data_end+0xfc003f68>
 80043c4:	dc000317 	ldw	r16,12(sp)
 80043c8:	003d6006 	br	800394c <__alt_data_end+0xfc00394c>
 80043cc:	8809883a 	mov	r4,r17
 80043d0:	800d3dc0 	call	800d3dc <__floatsidf>
 80043d4:	a009883a 	mov	r4,r20
 80043d8:	a80b883a 	mov	r5,r21
 80043dc:	100d883a 	mov	r6,r2
 80043e0:	180f883a 	mov	r7,r3
 80043e4:	800c2180 	call	800c218 <__muldf3>
 80043e8:	1009883a 	mov	r4,r2
 80043ec:	180b883a 	mov	r5,r3
 80043f0:	000d883a 	mov	r6,zero
 80043f4:	01d00734 	movhi	r7,16412
 80043f8:	800adb80 	call	800adb8 <__adddf3>
 80043fc:	1023883a 	mov	r17,r2
 8004400:	00bf3034 	movhi	r2,64704
 8004404:	1885883a 	add	r2,r3,r2
 8004408:	d8800e15 	stw	r2,56(sp)
 800440c:	a009883a 	mov	r4,r20
 8004410:	a80b883a 	mov	r5,r21
 8004414:	000d883a 	mov	r6,zero
 8004418:	01d00534 	movhi	r7,16404
 800441c:	800ca840 	call	800ca84 <__subdf3>
 8004420:	d9c00e17 	ldw	r7,56(sp)
 8004424:	1009883a 	mov	r4,r2
 8004428:	180b883a 	mov	r5,r3
 800442c:	880d883a 	mov	r6,r17
 8004430:	102b883a 	mov	r21,r2
 8004434:	1829883a 	mov	r20,r3
 8004438:	800c0580 	call	800c058 <__gedf2>
 800443c:	00807716 	blt	zero,r2,800461c <_dtoa_r+0x1388>
 8004440:	d8800e17 	ldw	r2,56(sp)
 8004444:	a809883a 	mov	r4,r21
 8004448:	a00b883a 	mov	r5,r20
 800444c:	11e0003c 	xorhi	r7,r2,32768
 8004450:	880d883a 	mov	r6,r17
 8004454:	800c1380 	call	800c138 <__ledf2>
 8004458:	103d6b0e 	bge	r2,zero,8003a08 <__alt_data_end+0xfc003a08>
 800445c:	002b883a 	mov	r21,zero
 8004460:	0023883a 	mov	r17,zero
 8004464:	003f4c06 	br	8004198 <__alt_data_end+0xfc004198>
 8004468:	d9800917 	ldw	r6,36(sp)
 800446c:	e00b883a 	mov	r5,fp
 8004470:	8009883a 	mov	r4,r16
 8004474:	8006fc40 	call	8006fc4 <__pow5mult>
 8004478:	1039883a 	mov	fp,r2
 800447c:	003e2706 	br	8003d1c <__alt_data_end+0xfc003d1c>
 8004480:	d8000b15 	stw	zero,44(sp)
 8004484:	003c4906 	br	80035ac <__alt_data_end+0xfc0035ac>
 8004488:	d9000917 	ldw	r4,36(sp)
 800448c:	d9800a17 	ldw	r6,40(sp)
 8004490:	dd400915 	stw	r21,36(sp)
 8004494:	a905c83a 	sub	r2,r21,r4
 8004498:	308d883a 	add	r6,r6,r2
 800449c:	d9800a15 	stw	r6,40(sp)
 80044a0:	002b883a 	mov	r21,zero
 80044a4:	003df206 	br	8003c70 <__alt_data_end+0xfc003c70>
 80044a8:	dc800e15 	stw	r18,56(sp)
 80044ac:	982b883a 	mov	r21,r19
 80044b0:	04400084 	movi	r17,2
 80044b4:	003c7406 	br	8003688 <__alt_data_end+0xfc003688>
 80044b8:	04400044 	movi	r17,1
 80044bc:	dc400d15 	stw	r17,52(sp)
 80044c0:	dc400615 	stw	r17,24(sp)
 80044c4:	dc402215 	stw	r17,136(sp)
 80044c8:	80001115 	stw	zero,68(r16)
 80044cc:	000b883a 	mov	r5,zero
 80044d0:	003c4a06 	br	80035fc <__alt_data_end+0xfc0035fc>
 80044d4:	3023883a 	mov	r17,r6
 80044d8:	003ffb06 	br	80044c8 <__alt_data_end+0xfc0044c8>
 80044dc:	1000021e 	bne	r2,zero,80044e8 <_dtoa_r+0x1254>
 80044e0:	4200004c 	andi	r8,r8,1
 80044e4:	403e8f1e 	bne	r8,zero,8003f24 <__alt_data_end+0xfc003f24>
 80044e8:	01000c04 	movi	r4,48
 80044ec:	00000106 	br	80044f4 <_dtoa_r+0x1260>
 80044f0:	102f883a 	mov	r23,r2
 80044f4:	b8bfffc4 	addi	r2,r23,-1
 80044f8:	10c00007 	ldb	r3,0(r2)
 80044fc:	193ffc26 	beq	r3,r4,80044f0 <__alt_data_end+0xfc0044f0>
 8004500:	003e9906 	br	8003f68 <__alt_data_end+0xfc003f68>
 8004504:	d9000517 	ldw	r4,20(sp)
 8004508:	012fc83a 	sub	r23,zero,r4
 800450c:	b800ad26 	beq	r23,zero,80047c4 <_dtoa_r+0x1530>
 8004510:	b88003cc 	andi	r2,r23,15
 8004514:	100490fa 	slli	r2,r2,3
 8004518:	00c20074 	movhi	r3,2049
 800451c:	18c16204 	addi	r3,r3,1416
 8004520:	1885883a 	add	r2,r3,r2
 8004524:	11800017 	ldw	r6,0(r2)
 8004528:	11c00117 	ldw	r7,4(r2)
 800452c:	b82fd13a 	srai	r23,r23,4
 8004530:	9009883a 	mov	r4,r18
 8004534:	980b883a 	mov	r5,r19
 8004538:	800c2180 	call	800c218 <__muldf3>
 800453c:	1029883a 	mov	r20,r2
 8004540:	182b883a 	mov	r21,r3
 8004544:	b800f426 	beq	r23,zero,8004918 <_dtoa_r+0x1684>
 8004548:	02020074 	movhi	r8,2049
 800454c:	42015804 	addi	r8,r8,1376
 8004550:	8029883a 	mov	r20,r16
 8004554:	04400084 	movi	r17,2
 8004558:	4021883a 	mov	r16,r8
 800455c:	b980004c 	andi	r6,r23,1
 8004560:	1009883a 	mov	r4,r2
 8004564:	b82fd07a 	srai	r23,r23,1
 8004568:	180b883a 	mov	r5,r3
 800456c:	30000426 	beq	r6,zero,8004580 <_dtoa_r+0x12ec>
 8004570:	81800017 	ldw	r6,0(r16)
 8004574:	81c00117 	ldw	r7,4(r16)
 8004578:	8c400044 	addi	r17,r17,1
 800457c:	800c2180 	call	800c218 <__muldf3>
 8004580:	84000204 	addi	r16,r16,8
 8004584:	b83ff51e 	bne	r23,zero,800455c <__alt_data_end+0xfc00455c>
 8004588:	a021883a 	mov	r16,r20
 800458c:	182b883a 	mov	r21,r3
 8004590:	1029883a 	mov	r20,r2
 8004594:	003c5506 	br	80036ec <__alt_data_end+0xfc0036ec>
 8004598:	d9800517 	ldw	r6,20(sp)
 800459c:	d9000717 	ldw	r4,28(sp)
 80045a0:	00c00c04 	movi	r3,48
 80045a4:	31800044 	addi	r6,r6,1
 80045a8:	d9800515 	stw	r6,20(sp)
 80045ac:	20c00005 	stb	r3,0(r4)
 80045b0:	02000c44 	movi	r8,49
 80045b4:	003da206 	br	8003c40 <__alt_data_end+0xfc003c40>
 80045b8:	89400117 	ldw	r5,4(r17)
 80045bc:	8009883a 	mov	r4,r16
 80045c0:	80068d00 	call	80068d0 <_Balloc>
 80045c4:	89800417 	ldw	r6,16(r17)
 80045c8:	11000304 	addi	r4,r2,12
 80045cc:	89400304 	addi	r5,r17,12
 80045d0:	31800084 	addi	r6,r6,2
 80045d4:	318d883a 	add	r6,r6,r6
 80045d8:	318d883a 	add	r6,r6,r6
 80045dc:	1027883a 	mov	r19,r2
 80045e0:	80065180 	call	8006518 <memcpy>
 80045e4:	8009883a 	mov	r4,r16
 80045e8:	980b883a 	mov	r5,r19
 80045ec:	01800044 	movi	r6,1
 80045f0:	80071040 	call	8007104 <__lshift>
 80045f4:	1029883a 	mov	r20,r2
 80045f8:	003e8606 	br	8004014 <__alt_data_end+0xfc004014>
 80045fc:	00800e44 	movi	r2,57
 8004600:	90809526 	beq	r18,r2,8004858 <_dtoa_r+0x15c4>
 8004604:	92000044 	addi	r8,r18,1
 8004608:	003f2306 	br	8004298 <__alt_data_end+0xfc004298>
 800460c:	9011883a 	mov	r8,r18
 8004610:	8825883a 	mov	r18,r17
 8004614:	a023883a 	mov	r17,r20
 8004618:	003e3706 	br	8003ef8 <__alt_data_end+0xfc003ef8>
 800461c:	002b883a 	mov	r21,zero
 8004620:	0023883a 	mov	r17,zero
 8004624:	003f5606 	br	8004380 <__alt_data_end+0xfc004380>
 8004628:	51bfffc4 	addi	r6,r10,-1
 800462c:	300490fa 	slli	r2,r6,3
 8004630:	00c20074 	movhi	r3,2049
 8004634:	18c16204 	addi	r3,r3,1416
 8004638:	1885883a 	add	r2,r3,r2
 800463c:	d9c00e17 	ldw	r7,56(sp)
 8004640:	11000017 	ldw	r4,0(r2)
 8004644:	11400117 	ldw	r5,4(r2)
 8004648:	d8800717 	ldw	r2,28(sp)
 800464c:	d9801015 	stw	r6,64(sp)
 8004650:	880d883a 	mov	r6,r17
 8004654:	da801615 	stw	r10,88(sp)
 8004658:	15c00044 	addi	r23,r2,1
 800465c:	800c2180 	call	800c218 <__muldf3>
 8004660:	a80b883a 	mov	r5,r21
 8004664:	a009883a 	mov	r4,r20
 8004668:	d8c01115 	stw	r3,68(sp)
 800466c:	d8800e15 	stw	r2,56(sp)
 8004670:	800d3540 	call	800d354 <__fixdfsi>
 8004674:	1009883a 	mov	r4,r2
 8004678:	1023883a 	mov	r17,r2
 800467c:	800d3dc0 	call	800d3dc <__floatsidf>
 8004680:	a009883a 	mov	r4,r20
 8004684:	a80b883a 	mov	r5,r21
 8004688:	100d883a 	mov	r6,r2
 800468c:	180f883a 	mov	r7,r3
 8004690:	800ca840 	call	800ca84 <__subdf3>
 8004694:	1813883a 	mov	r9,r3
 8004698:	d8c00717 	ldw	r3,28(sp)
 800469c:	8c400c04 	addi	r17,r17,48
 80046a0:	1011883a 	mov	r8,r2
 80046a4:	1c400005 	stb	r17,0(r3)
 80046a8:	da801617 	ldw	r10,88(sp)
 80046ac:	00800044 	movi	r2,1
 80046b0:	50802326 	beq	r10,r2,8004740 <_dtoa_r+0x14ac>
 80046b4:	d8800717 	ldw	r2,28(sp)
 80046b8:	b82b883a 	mov	r21,r23
 80046bc:	dc001315 	stw	r16,76(sp)
 80046c0:	12a9883a 	add	r20,r2,r10
 80046c4:	4807883a 	mov	r3,r9
 80046c8:	4005883a 	mov	r2,r8
 80046cc:	dc801415 	stw	r18,80(sp)
 80046d0:	000d883a 	mov	r6,zero
 80046d4:	01d00934 	movhi	r7,16420
 80046d8:	1009883a 	mov	r4,r2
 80046dc:	180b883a 	mov	r5,r3
 80046e0:	800c2180 	call	800c218 <__muldf3>
 80046e4:	180b883a 	mov	r5,r3
 80046e8:	1009883a 	mov	r4,r2
 80046ec:	1821883a 	mov	r16,r3
 80046f0:	1025883a 	mov	r18,r2
 80046f4:	800d3540 	call	800d354 <__fixdfsi>
 80046f8:	1009883a 	mov	r4,r2
 80046fc:	1023883a 	mov	r17,r2
 8004700:	800d3dc0 	call	800d3dc <__floatsidf>
 8004704:	9009883a 	mov	r4,r18
 8004708:	800b883a 	mov	r5,r16
 800470c:	100d883a 	mov	r6,r2
 8004710:	180f883a 	mov	r7,r3
 8004714:	8c400c04 	addi	r17,r17,48
 8004718:	800ca840 	call	800ca84 <__subdf3>
 800471c:	ad400044 	addi	r21,r21,1
 8004720:	ac7fffc5 	stb	r17,-1(r21)
 8004724:	ad3fea1e 	bne	r21,r20,80046d0 <__alt_data_end+0xfc0046d0>
 8004728:	1813883a 	mov	r9,r3
 800472c:	d8c01017 	ldw	r3,64(sp)
 8004730:	dc001317 	ldw	r16,76(sp)
 8004734:	dc801417 	ldw	r18,80(sp)
 8004738:	1011883a 	mov	r8,r2
 800473c:	b8ef883a 	add	r23,r23,r3
 8004740:	d9000e17 	ldw	r4,56(sp)
 8004744:	d9401117 	ldw	r5,68(sp)
 8004748:	000d883a 	mov	r6,zero
 800474c:	01cff834 	movhi	r7,16352
 8004750:	da001715 	stw	r8,92(sp)
 8004754:	da401515 	stw	r9,84(sp)
 8004758:	800adb80 	call	800adb8 <__adddf3>
 800475c:	da001717 	ldw	r8,92(sp)
 8004760:	da401517 	ldw	r9,84(sp)
 8004764:	1009883a 	mov	r4,r2
 8004768:	400d883a 	mov	r6,r8
 800476c:	480f883a 	mov	r7,r9
 8004770:	180b883a 	mov	r5,r3
 8004774:	800c1380 	call	800c138 <__ledf2>
 8004778:	da001717 	ldw	r8,92(sp)
 800477c:	da401517 	ldw	r9,84(sp)
 8004780:	10003b0e 	bge	r2,zero,8004870 <_dtoa_r+0x15dc>
 8004784:	d9001217 	ldw	r4,72(sp)
 8004788:	bd7fffc3 	ldbu	r21,-1(r23)
 800478c:	d9000515 	stw	r4,20(sp)
 8004790:	003d1c06 	br	8003c04 <__alt_data_end+0xfc003c04>
 8004794:	d8c00817 	ldw	r3,32(sp)
 8004798:	18a9c83a 	sub	r20,r3,r2
 800479c:	0005883a 	mov	r2,zero
 80047a0:	003d3706 	br	8003c80 <__alt_data_end+0xfc003c80>
 80047a4:	00800044 	movi	r2,1
 80047a8:	003dd006 	br	8003eec <__alt_data_end+0xfc003eec>
 80047ac:	d8c00217 	ldw	r3,8(sp)
 80047b0:	00800d84 	movi	r2,54
 80047b4:	dd400917 	ldw	r21,36(sp)
 80047b8:	10c5c83a 	sub	r2,r2,r3
 80047bc:	dd000817 	ldw	r20,32(sp)
 80047c0:	003d2f06 	br	8003c80 <__alt_data_end+0xfc003c80>
 80047c4:	9029883a 	mov	r20,r18
 80047c8:	982b883a 	mov	r21,r19
 80047cc:	04400084 	movi	r17,2
 80047d0:	003bc606 	br	80036ec <__alt_data_end+0xfc0036ec>
 80047d4:	d8800617 	ldw	r2,24(sp)
 80047d8:	103efc26 	beq	r2,zero,80043cc <__alt_data_end+0xfc0043cc>
 80047dc:	d8c00d17 	ldw	r3,52(sp)
 80047e0:	00fc890e 	bge	zero,r3,8003a08 <__alt_data_end+0xfc003a08>
 80047e4:	a80b883a 	mov	r5,r21
 80047e8:	a009883a 	mov	r4,r20
 80047ec:	000d883a 	mov	r6,zero
 80047f0:	01d00934 	movhi	r7,16420
 80047f4:	800c2180 	call	800c218 <__muldf3>
 80047f8:	89000044 	addi	r4,r17,1
 80047fc:	1029883a 	mov	r20,r2
 8004800:	182b883a 	mov	r21,r3
 8004804:	800d3dc0 	call	800d3dc <__floatsidf>
 8004808:	a009883a 	mov	r4,r20
 800480c:	a80b883a 	mov	r5,r21
 8004810:	100d883a 	mov	r6,r2
 8004814:	180f883a 	mov	r7,r3
 8004818:	800c2180 	call	800c218 <__muldf3>
 800481c:	1009883a 	mov	r4,r2
 8004820:	180b883a 	mov	r5,r3
 8004824:	000d883a 	mov	r6,zero
 8004828:	01d00734 	movhi	r7,16412
 800482c:	800adb80 	call	800adb8 <__adddf3>
 8004830:	d9000517 	ldw	r4,20(sp)
 8004834:	1023883a 	mov	r17,r2
 8004838:	00bf3034 	movhi	r2,64704
 800483c:	213fffc4 	addi	r4,r4,-1
 8004840:	1885883a 	add	r2,r3,r2
 8004844:	d9001215 	stw	r4,72(sp)
 8004848:	d8800e15 	stw	r2,56(sp)
 800484c:	da800d17 	ldw	r10,52(sp)
 8004850:	003bc306 	br	8003760 <__alt_data_end+0xfc003760>
 8004854:	b039883a 	mov	fp,r22
 8004858:	01000e44 	movi	r4,57
 800485c:	8825883a 	mov	r18,r17
 8004860:	9dc00044 	addi	r23,r19,1
 8004864:	99000005 	stb	r4,0(r19)
 8004868:	a023883a 	mov	r17,r20
 800486c:	003dae06 	br	8003f28 <__alt_data_end+0xfc003f28>
 8004870:	d9800e17 	ldw	r6,56(sp)
 8004874:	d9c01117 	ldw	r7,68(sp)
 8004878:	0009883a 	mov	r4,zero
 800487c:	014ff834 	movhi	r5,16352
 8004880:	da001715 	stw	r8,92(sp)
 8004884:	da401515 	stw	r9,84(sp)
 8004888:	800ca840 	call	800ca84 <__subdf3>
 800488c:	da001717 	ldw	r8,92(sp)
 8004890:	da401517 	ldw	r9,84(sp)
 8004894:	1009883a 	mov	r4,r2
 8004898:	180b883a 	mov	r5,r3
 800489c:	400d883a 	mov	r6,r8
 80048a0:	480f883a 	mov	r7,r9
 80048a4:	800c0580 	call	800c058 <__gedf2>
 80048a8:	00bc570e 	bge	zero,r2,8003a08 <__alt_data_end+0xfc003a08>
 80048ac:	01000c04 	movi	r4,48
 80048b0:	00000106 	br	80048b8 <_dtoa_r+0x1624>
 80048b4:	102f883a 	mov	r23,r2
 80048b8:	b8bfffc4 	addi	r2,r23,-1
 80048bc:	10c00007 	ldb	r3,0(r2)
 80048c0:	193ffc26 	beq	r3,r4,80048b4 <__alt_data_end+0xfc0048b4>
 80048c4:	d9801217 	ldw	r6,72(sp)
 80048c8:	d9800515 	stw	r6,20(sp)
 80048cc:	003c1f06 	br	800394c <__alt_data_end+0xfc00394c>
 80048d0:	d8801217 	ldw	r2,72(sp)
 80048d4:	dc001117 	ldw	r16,68(sp)
 80048d8:	d8800515 	stw	r2,20(sp)
 80048dc:	003cc906 	br	8003c04 <__alt_data_end+0xfc003c04>
 80048e0:	dd801317 	ldw	r22,76(sp)
 80048e4:	dc001117 	ldw	r16,68(sp)
 80048e8:	dcc01417 	ldw	r19,80(sp)
 80048ec:	dc801017 	ldw	r18,64(sp)
 80048f0:	003c4506 	br	8003a08 <__alt_data_end+0xfc003a08>
 80048f4:	103e5d1e 	bne	r2,zero,800426c <__alt_data_end+0xfc00426c>
 80048f8:	4080004c 	andi	r2,r8,1
 80048fc:	103e5b26 	beq	r2,zero,800426c <__alt_data_end+0xfc00426c>
 8004900:	003e5706 	br	8004260 <__alt_data_end+0xfc004260>
 8004904:	d8c00317 	ldw	r3,12(sp)
 8004908:	00800084 	movi	r2,2
 800490c:	10c00a16 	blt	r2,r3,8004938 <_dtoa_r+0x16a4>
 8004910:	d9000d17 	ldw	r4,52(sp)
 8004914:	003e8306 	br	8004324 <__alt_data_end+0xfc004324>
 8004918:	04400084 	movi	r17,2
 800491c:	003b7306 	br	80036ec <__alt_data_end+0xfc0036ec>
 8004920:	d9801217 	ldw	r6,72(sp)
 8004924:	d9800515 	stw	r6,20(sp)
 8004928:	003cb606 	br	8003c04 <__alt_data_end+0xfc003c04>
 800492c:	d9001217 	ldw	r4,72(sp)
 8004930:	d9000515 	stw	r4,20(sp)
 8004934:	003c0506 	br	800394c <__alt_data_end+0xfc00394c>
 8004938:	d9800d17 	ldw	r6,52(sp)
 800493c:	d9800615 	stw	r6,24(sp)
 8004940:	003e8306 	br	8004350 <__alt_data_end+0xfc004350>
 8004944:	d9800317 	ldw	r6,12(sp)
 8004948:	00800084 	movi	r2,2
 800494c:	11800216 	blt	r2,r6,8004958 <_dtoa_r+0x16c4>
 8004950:	d8800d17 	ldw	r2,52(sp)
 8004954:	003da606 	br	8003ff0 <__alt_data_end+0xfc003ff0>
 8004958:	d8800d17 	ldw	r2,52(sp)
 800495c:	d8800615 	stw	r2,24(sp)
 8004960:	003e7b06 	br	8004350 <__alt_data_end+0xfc004350>
 8004964:	05000044 	movi	r20,1
 8004968:	003b0506 	br	8003580 <__alt_data_end+0xfc003580>
 800496c:	8009883a 	mov	r4,r16
 8004970:	80001115 	stw	zero,68(r16)
 8004974:	000b883a 	mov	r5,zero
 8004978:	80068d00 	call	80068d0 <_Balloc>
 800497c:	d8800715 	stw	r2,28(sp)
 8004980:	d8c00717 	ldw	r3,28(sp)
 8004984:	00bfffc4 	movi	r2,-1
 8004988:	01000044 	movi	r4,1
 800498c:	d8800615 	stw	r2,24(sp)
 8004990:	80c01015 	stw	r3,64(r16)
 8004994:	d9000b15 	stw	r4,44(sp)
 8004998:	d8002215 	stw	zero,136(sp)
 800499c:	d8800d15 	stw	r2,52(sp)
 80049a0:	003c1906 	br	8003a08 <__alt_data_end+0xfc003a08>
 80049a4:	193d2926 	beq	r3,r4,8003e4c <__alt_data_end+0xfc003e4c>
 80049a8:	00c00f04 	movi	r3,60
 80049ac:	1885c83a 	sub	r2,r3,r2
 80049b0:	003d7b06 	br	8003fa0 <__alt_data_end+0xfc003fa0>
 80049b4:	000b883a 	mov	r5,zero
 80049b8:	003b1006 	br	80035fc <__alt_data_end+0xfc0035fc>

080049bc <_fflush_r>:
 80049bc:	defffb04 	addi	sp,sp,-20
 80049c0:	dcc00315 	stw	r19,12(sp)
 80049c4:	dc000015 	stw	r16,0(sp)
 80049c8:	dfc00415 	stw	ra,16(sp)
 80049cc:	dc800215 	stw	r18,8(sp)
 80049d0:	dc400115 	stw	r17,4(sp)
 80049d4:	2027883a 	mov	r19,r4
 80049d8:	2821883a 	mov	r16,r5
 80049dc:	20000226 	beq	r4,zero,80049e8 <_fflush_r+0x2c>
 80049e0:	20800e17 	ldw	r2,56(r4)
 80049e4:	10005326 	beq	r2,zero,8004b34 <_fflush_r+0x178>
 80049e8:	8080030b 	ldhu	r2,12(r16)
 80049ec:	10ffffcc 	andi	r3,r2,65535
 80049f0:	18e0001c 	xori	r3,r3,32768
 80049f4:	18e00004 	addi	r3,r3,-32768
 80049f8:	18002c26 	beq	r3,zero,8004aac <_fflush_r+0xf0>
 80049fc:	10c0020c 	andi	r3,r2,8
 8004a00:	1800321e 	bne	r3,zero,8004acc <_fflush_r+0x110>
 8004a04:	80c00117 	ldw	r3,4(r16)
 8004a08:	10820014 	ori	r2,r2,2048
 8004a0c:	8080030d 	sth	r2,12(r16)
 8004a10:	00c0570e 	bge	zero,r3,8004b70 <_fflush_r+0x1b4>
 8004a14:	82000a17 	ldw	r8,40(r16)
 8004a18:	40002426 	beq	r8,zero,8004aac <_fflush_r+0xf0>
 8004a1c:	9c400017 	ldw	r17,0(r19)
 8004a20:	10c4000c 	andi	r3,r2,4096
 8004a24:	98000015 	stw	zero,0(r19)
 8004a28:	18004626 	beq	r3,zero,8004b44 <_fflush_r+0x188>
 8004a2c:	81801417 	ldw	r6,80(r16)
 8004a30:	10c0010c 	andi	r3,r2,4
 8004a34:	18000626 	beq	r3,zero,8004a50 <_fflush_r+0x94>
 8004a38:	80c00117 	ldw	r3,4(r16)
 8004a3c:	80800c17 	ldw	r2,48(r16)
 8004a40:	30cdc83a 	sub	r6,r6,r3
 8004a44:	10000226 	beq	r2,zero,8004a50 <_fflush_r+0x94>
 8004a48:	80800f17 	ldw	r2,60(r16)
 8004a4c:	308dc83a 	sub	r6,r6,r2
 8004a50:	81400717 	ldw	r5,28(r16)
 8004a54:	9809883a 	mov	r4,r19
 8004a58:	000f883a 	mov	r7,zero
 8004a5c:	403ee83a 	callr	r8
 8004a60:	00ffffc4 	movi	r3,-1
 8004a64:	10c04526 	beq	r2,r3,8004b7c <_fflush_r+0x1c0>
 8004a68:	80c0030b 	ldhu	r3,12(r16)
 8004a6c:	81000417 	ldw	r4,16(r16)
 8004a70:	80000115 	stw	zero,4(r16)
 8004a74:	197dffcc 	andi	r5,r3,63487
 8004a78:	8140030d 	sth	r5,12(r16)
 8004a7c:	81000015 	stw	r4,0(r16)
 8004a80:	18c4000c 	andi	r3,r3,4096
 8004a84:	18000126 	beq	r3,zero,8004a8c <_fflush_r+0xd0>
 8004a88:	80801415 	stw	r2,80(r16)
 8004a8c:	81400c17 	ldw	r5,48(r16)
 8004a90:	9c400015 	stw	r17,0(r19)
 8004a94:	28000526 	beq	r5,zero,8004aac <_fflush_r+0xf0>
 8004a98:	80801004 	addi	r2,r16,64
 8004a9c:	28800226 	beq	r5,r2,8004aa8 <_fflush_r+0xec>
 8004aa0:	9809883a 	mov	r4,r19
 8004aa4:	80050ec0 	call	80050ec <_free_r>
 8004aa8:	80000c15 	stw	zero,48(r16)
 8004aac:	0005883a 	mov	r2,zero
 8004ab0:	dfc00417 	ldw	ra,16(sp)
 8004ab4:	dcc00317 	ldw	r19,12(sp)
 8004ab8:	dc800217 	ldw	r18,8(sp)
 8004abc:	dc400117 	ldw	r17,4(sp)
 8004ac0:	dc000017 	ldw	r16,0(sp)
 8004ac4:	dec00504 	addi	sp,sp,20
 8004ac8:	f800283a 	ret
 8004acc:	84800417 	ldw	r18,16(r16)
 8004ad0:	903ff626 	beq	r18,zero,8004aac <__alt_data_end+0xfc004aac>
 8004ad4:	84400017 	ldw	r17,0(r16)
 8004ad8:	108000cc 	andi	r2,r2,3
 8004adc:	84800015 	stw	r18,0(r16)
 8004ae0:	8ca3c83a 	sub	r17,r17,r18
 8004ae4:	10001526 	beq	r2,zero,8004b3c <_fflush_r+0x180>
 8004ae8:	0005883a 	mov	r2,zero
 8004aec:	80800215 	stw	r2,8(r16)
 8004af0:	04400316 	blt	zero,r17,8004b00 <_fflush_r+0x144>
 8004af4:	003fed06 	br	8004aac <__alt_data_end+0xfc004aac>
 8004af8:	90a5883a 	add	r18,r18,r2
 8004afc:	047feb0e 	bge	zero,r17,8004aac <__alt_data_end+0xfc004aac>
 8004b00:	80800917 	ldw	r2,36(r16)
 8004b04:	81400717 	ldw	r5,28(r16)
 8004b08:	880f883a 	mov	r7,r17
 8004b0c:	900d883a 	mov	r6,r18
 8004b10:	9809883a 	mov	r4,r19
 8004b14:	103ee83a 	callr	r2
 8004b18:	88a3c83a 	sub	r17,r17,r2
 8004b1c:	00bff616 	blt	zero,r2,8004af8 <__alt_data_end+0xfc004af8>
 8004b20:	80c0030b 	ldhu	r3,12(r16)
 8004b24:	00bfffc4 	movi	r2,-1
 8004b28:	18c01014 	ori	r3,r3,64
 8004b2c:	80c0030d 	sth	r3,12(r16)
 8004b30:	003fdf06 	br	8004ab0 <__alt_data_end+0xfc004ab0>
 8004b34:	8004f780 	call	8004f78 <__sinit>
 8004b38:	003fab06 	br	80049e8 <__alt_data_end+0xfc0049e8>
 8004b3c:	80800517 	ldw	r2,20(r16)
 8004b40:	003fea06 	br	8004aec <__alt_data_end+0xfc004aec>
 8004b44:	81400717 	ldw	r5,28(r16)
 8004b48:	000d883a 	mov	r6,zero
 8004b4c:	9809883a 	mov	r4,r19
 8004b50:	01c00044 	movi	r7,1
 8004b54:	403ee83a 	callr	r8
 8004b58:	100d883a 	mov	r6,r2
 8004b5c:	00bfffc4 	movi	r2,-1
 8004b60:	30801326 	beq	r6,r2,8004bb0 <_fflush_r+0x1f4>
 8004b64:	8080030b 	ldhu	r2,12(r16)
 8004b68:	82000a17 	ldw	r8,40(r16)
 8004b6c:	003fb006 	br	8004a30 <__alt_data_end+0xfc004a30>
 8004b70:	80c00f17 	ldw	r3,60(r16)
 8004b74:	00ffa716 	blt	zero,r3,8004a14 <__alt_data_end+0xfc004a14>
 8004b78:	003fcc06 	br	8004aac <__alt_data_end+0xfc004aac>
 8004b7c:	98c00017 	ldw	r3,0(r19)
 8004b80:	183fb926 	beq	r3,zero,8004a68 <__alt_data_end+0xfc004a68>
 8004b84:	01000744 	movi	r4,29
 8004b88:	19000226 	beq	r3,r4,8004b94 <_fflush_r+0x1d8>
 8004b8c:	01000584 	movi	r4,22
 8004b90:	1900101e 	bne	r3,r4,8004bd4 <_fflush_r+0x218>
 8004b94:	8080030b 	ldhu	r2,12(r16)
 8004b98:	80c00417 	ldw	r3,16(r16)
 8004b9c:	80000115 	stw	zero,4(r16)
 8004ba0:	10bdffcc 	andi	r2,r2,63487
 8004ba4:	8080030d 	sth	r2,12(r16)
 8004ba8:	80c00015 	stw	r3,0(r16)
 8004bac:	003fb706 	br	8004a8c <__alt_data_end+0xfc004a8c>
 8004bb0:	98800017 	ldw	r2,0(r19)
 8004bb4:	103feb26 	beq	r2,zero,8004b64 <__alt_data_end+0xfc004b64>
 8004bb8:	00c00744 	movi	r3,29
 8004bbc:	10c00226 	beq	r2,r3,8004bc8 <_fflush_r+0x20c>
 8004bc0:	00c00584 	movi	r3,22
 8004bc4:	10ffd61e 	bne	r2,r3,8004b20 <__alt_data_end+0xfc004b20>
 8004bc8:	9c400015 	stw	r17,0(r19)
 8004bcc:	0005883a 	mov	r2,zero
 8004bd0:	003fb706 	br	8004ab0 <__alt_data_end+0xfc004ab0>
 8004bd4:	80c0030b 	ldhu	r3,12(r16)
 8004bd8:	18c01014 	ori	r3,r3,64
 8004bdc:	80c0030d 	sth	r3,12(r16)
 8004be0:	003fb306 	br	8004ab0 <__alt_data_end+0xfc004ab0>

08004be4 <fflush>:
 8004be4:	20000526 	beq	r4,zero,8004bfc <fflush+0x18>
 8004be8:	00820074 	movhi	r2,2049
 8004bec:	1088a604 	addi	r2,r2,8856
 8004bf0:	200b883a 	mov	r5,r4
 8004bf4:	11000017 	ldw	r4,0(r2)
 8004bf8:	80049bc1 	jmpi	80049bc <_fflush_r>
 8004bfc:	00820074 	movhi	r2,2049
 8004c00:	1088a504 	addi	r2,r2,8852
 8004c04:	11000017 	ldw	r4,0(r2)
 8004c08:	01420034 	movhi	r5,2048
 8004c0c:	29526f04 	addi	r5,r5,18876
 8004c10:	80059381 	jmpi	8005938 <_fwalk_reent>

08004c14 <__fp_lock>:
 8004c14:	0005883a 	mov	r2,zero
 8004c18:	f800283a 	ret

08004c1c <__fp_unlock>:
 8004c1c:	0005883a 	mov	r2,zero
 8004c20:	f800283a 	ret

08004c24 <_cleanup_r>:
 8004c24:	01420074 	movhi	r5,2049
 8004c28:	29665104 	addi	r5,r5,-26300
 8004c2c:	80058801 	jmpi	8005880 <_fwalk>

08004c30 <__sinit.part.1>:
 8004c30:	defff604 	addi	sp,sp,-40
 8004c34:	00c20034 	movhi	r3,2048
 8004c38:	dfc00915 	stw	ra,36(sp)
 8004c3c:	df000815 	stw	fp,32(sp)
 8004c40:	ddc00715 	stw	r23,28(sp)
 8004c44:	dd800615 	stw	r22,24(sp)
 8004c48:	dd400515 	stw	r21,20(sp)
 8004c4c:	dd000415 	stw	r20,16(sp)
 8004c50:	dcc00315 	stw	r19,12(sp)
 8004c54:	dc800215 	stw	r18,8(sp)
 8004c58:	dc400115 	stw	r17,4(sp)
 8004c5c:	dc000015 	stw	r16,0(sp)
 8004c60:	18d30904 	addi	r3,r3,19492
 8004c64:	24000117 	ldw	r16,4(r4)
 8004c68:	20c00f15 	stw	r3,60(r4)
 8004c6c:	07000044 	movi	fp,1
 8004c70:	00c000c4 	movi	r3,3
 8004c74:	2080bb04 	addi	r2,r4,748
 8004c78:	20c0b915 	stw	r3,740(r4)
 8004c7c:	27000e15 	stw	fp,56(r4)
 8004c80:	2080ba15 	stw	r2,744(r4)
 8004c84:	2000b815 	stw	zero,736(r4)
 8004c88:	05c00204 	movi	r23,8
 8004c8c:	00800104 	movi	r2,4
 8004c90:	2025883a 	mov	r18,r4
 8004c94:	b80d883a 	mov	r6,r23
 8004c98:	81001704 	addi	r4,r16,92
 8004c9c:	000b883a 	mov	r5,zero
 8004ca0:	80000015 	stw	zero,0(r16)
 8004ca4:	80000115 	stw	zero,4(r16)
 8004ca8:	80000215 	stw	zero,8(r16)
 8004cac:	8080030d 	sth	r2,12(r16)
 8004cb0:	80001915 	stw	zero,100(r16)
 8004cb4:	8000038d 	sth	zero,14(r16)
 8004cb8:	80000415 	stw	zero,16(r16)
 8004cbc:	80000515 	stw	zero,20(r16)
 8004cc0:	80000615 	stw	zero,24(r16)
 8004cc4:	80067ac0 	call	80067ac <memset>
 8004cc8:	05820034 	movhi	r22,2048
 8004ccc:	94400217 	ldw	r17,8(r18)
 8004cd0:	05420034 	movhi	r21,2048
 8004cd4:	05020074 	movhi	r20,2049
 8004cd8:	04c20074 	movhi	r19,2049
 8004cdc:	b59fe004 	addi	r22,r22,32640
 8004ce0:	ad5ff704 	addi	r21,r21,32732
 8004ce4:	a5201604 	addi	r20,r20,-32680
 8004ce8:	9ce02d04 	addi	r19,r19,-32588
 8004cec:	85800815 	stw	r22,32(r16)
 8004cf0:	85400915 	stw	r21,36(r16)
 8004cf4:	85000a15 	stw	r20,40(r16)
 8004cf8:	84c00b15 	stw	r19,44(r16)
 8004cfc:	84000715 	stw	r16,28(r16)
 8004d00:	00800284 	movi	r2,10
 8004d04:	89001704 	addi	r4,r17,92
 8004d08:	b80d883a 	mov	r6,r23
 8004d0c:	000b883a 	mov	r5,zero
 8004d10:	88000015 	stw	zero,0(r17)
 8004d14:	88000115 	stw	zero,4(r17)
 8004d18:	88000215 	stw	zero,8(r17)
 8004d1c:	8880030d 	sth	r2,12(r17)
 8004d20:	88001915 	stw	zero,100(r17)
 8004d24:	8f00038d 	sth	fp,14(r17)
 8004d28:	88000415 	stw	zero,16(r17)
 8004d2c:	88000515 	stw	zero,20(r17)
 8004d30:	88000615 	stw	zero,24(r17)
 8004d34:	80067ac0 	call	80067ac <memset>
 8004d38:	94000317 	ldw	r16,12(r18)
 8004d3c:	00800484 	movi	r2,18
 8004d40:	8c400715 	stw	r17,28(r17)
 8004d44:	8d800815 	stw	r22,32(r17)
 8004d48:	8d400915 	stw	r21,36(r17)
 8004d4c:	8d000a15 	stw	r20,40(r17)
 8004d50:	8cc00b15 	stw	r19,44(r17)
 8004d54:	8080030d 	sth	r2,12(r16)
 8004d58:	00800084 	movi	r2,2
 8004d5c:	80000015 	stw	zero,0(r16)
 8004d60:	80000115 	stw	zero,4(r16)
 8004d64:	80000215 	stw	zero,8(r16)
 8004d68:	80001915 	stw	zero,100(r16)
 8004d6c:	8080038d 	sth	r2,14(r16)
 8004d70:	80000415 	stw	zero,16(r16)
 8004d74:	80000515 	stw	zero,20(r16)
 8004d78:	80000615 	stw	zero,24(r16)
 8004d7c:	81001704 	addi	r4,r16,92
 8004d80:	000b883a 	mov	r5,zero
 8004d84:	b80d883a 	mov	r6,r23
 8004d88:	80067ac0 	call	80067ac <memset>
 8004d8c:	84000715 	stw	r16,28(r16)
 8004d90:	85800815 	stw	r22,32(r16)
 8004d94:	85400915 	stw	r21,36(r16)
 8004d98:	85000a15 	stw	r20,40(r16)
 8004d9c:	84c00b15 	stw	r19,44(r16)
 8004da0:	dfc00917 	ldw	ra,36(sp)
 8004da4:	df000817 	ldw	fp,32(sp)
 8004da8:	ddc00717 	ldw	r23,28(sp)
 8004dac:	dd800617 	ldw	r22,24(sp)
 8004db0:	dd400517 	ldw	r21,20(sp)
 8004db4:	dd000417 	ldw	r20,16(sp)
 8004db8:	dcc00317 	ldw	r19,12(sp)
 8004dbc:	dc800217 	ldw	r18,8(sp)
 8004dc0:	dc400117 	ldw	r17,4(sp)
 8004dc4:	dc000017 	ldw	r16,0(sp)
 8004dc8:	dec00a04 	addi	sp,sp,40
 8004dcc:	f800283a 	ret

08004dd0 <__sfmoreglue>:
 8004dd0:	defffc04 	addi	sp,sp,-16
 8004dd4:	dc800215 	stw	r18,8(sp)
 8004dd8:	2825883a 	mov	r18,r5
 8004ddc:	dc000015 	stw	r16,0(sp)
 8004de0:	01401a04 	movi	r5,104
 8004de4:	2021883a 	mov	r16,r4
 8004de8:	9009883a 	mov	r4,r18
 8004dec:	dfc00315 	stw	ra,12(sp)
 8004df0:	dc400115 	stw	r17,4(sp)
 8004df4:	800ad900 	call	800ad90 <__mulsi3>
 8004df8:	8009883a 	mov	r4,r16
 8004dfc:	11400304 	addi	r5,r2,12
 8004e00:	1023883a 	mov	r17,r2
 8004e04:	8005c880 	call	8005c88 <_malloc_r>
 8004e08:	1021883a 	mov	r16,r2
 8004e0c:	10000726 	beq	r2,zero,8004e2c <__sfmoreglue+0x5c>
 8004e10:	11000304 	addi	r4,r2,12
 8004e14:	10000015 	stw	zero,0(r2)
 8004e18:	14800115 	stw	r18,4(r2)
 8004e1c:	11000215 	stw	r4,8(r2)
 8004e20:	000b883a 	mov	r5,zero
 8004e24:	880d883a 	mov	r6,r17
 8004e28:	80067ac0 	call	80067ac <memset>
 8004e2c:	8005883a 	mov	r2,r16
 8004e30:	dfc00317 	ldw	ra,12(sp)
 8004e34:	dc800217 	ldw	r18,8(sp)
 8004e38:	dc400117 	ldw	r17,4(sp)
 8004e3c:	dc000017 	ldw	r16,0(sp)
 8004e40:	dec00404 	addi	sp,sp,16
 8004e44:	f800283a 	ret

08004e48 <__sfp>:
 8004e48:	00820074 	movhi	r2,2049
 8004e4c:	defffb04 	addi	sp,sp,-20
 8004e50:	1088a504 	addi	r2,r2,8852
 8004e54:	dc800215 	stw	r18,8(sp)
 8004e58:	14800017 	ldw	r18,0(r2)
 8004e5c:	dcc00315 	stw	r19,12(sp)
 8004e60:	dfc00415 	stw	ra,16(sp)
 8004e64:	90800e17 	ldw	r2,56(r18)
 8004e68:	dc400115 	stw	r17,4(sp)
 8004e6c:	dc000015 	stw	r16,0(sp)
 8004e70:	2027883a 	mov	r19,r4
 8004e74:	1000021e 	bne	r2,zero,8004e80 <__sfp+0x38>
 8004e78:	9009883a 	mov	r4,r18
 8004e7c:	8004c300 	call	8004c30 <__sinit.part.1>
 8004e80:	9480b804 	addi	r18,r18,736
 8004e84:	047fffc4 	movi	r17,-1
 8004e88:	91400117 	ldw	r5,4(r18)
 8004e8c:	94000217 	ldw	r16,8(r18)
 8004e90:	297fffc4 	addi	r5,r5,-1
 8004e94:	28000a16 	blt	r5,zero,8004ec0 <__sfp+0x78>
 8004e98:	8080030f 	ldh	r2,12(r16)
 8004e9c:	10000c26 	beq	r2,zero,8004ed0 <__sfp+0x88>
 8004ea0:	80c01d04 	addi	r3,r16,116
 8004ea4:	00000206 	br	8004eb0 <__sfp+0x68>
 8004ea8:	18bfe60f 	ldh	r2,-104(r3)
 8004eac:	10000826 	beq	r2,zero,8004ed0 <__sfp+0x88>
 8004eb0:	297fffc4 	addi	r5,r5,-1
 8004eb4:	1c3ffd04 	addi	r16,r3,-12
 8004eb8:	18c01a04 	addi	r3,r3,104
 8004ebc:	2c7ffa1e 	bne	r5,r17,8004ea8 <__alt_data_end+0xfc004ea8>
 8004ec0:	90800017 	ldw	r2,0(r18)
 8004ec4:	10001d26 	beq	r2,zero,8004f3c <__sfp+0xf4>
 8004ec8:	1025883a 	mov	r18,r2
 8004ecc:	003fee06 	br	8004e88 <__alt_data_end+0xfc004e88>
 8004ed0:	00bfffc4 	movi	r2,-1
 8004ed4:	8080038d 	sth	r2,14(r16)
 8004ed8:	00800044 	movi	r2,1
 8004edc:	8080030d 	sth	r2,12(r16)
 8004ee0:	80001915 	stw	zero,100(r16)
 8004ee4:	80000015 	stw	zero,0(r16)
 8004ee8:	80000215 	stw	zero,8(r16)
 8004eec:	80000115 	stw	zero,4(r16)
 8004ef0:	80000415 	stw	zero,16(r16)
 8004ef4:	80000515 	stw	zero,20(r16)
 8004ef8:	80000615 	stw	zero,24(r16)
 8004efc:	81001704 	addi	r4,r16,92
 8004f00:	000b883a 	mov	r5,zero
 8004f04:	01800204 	movi	r6,8
 8004f08:	80067ac0 	call	80067ac <memset>
 8004f0c:	8005883a 	mov	r2,r16
 8004f10:	80000c15 	stw	zero,48(r16)
 8004f14:	80000d15 	stw	zero,52(r16)
 8004f18:	80001115 	stw	zero,68(r16)
 8004f1c:	80001215 	stw	zero,72(r16)
 8004f20:	dfc00417 	ldw	ra,16(sp)
 8004f24:	dcc00317 	ldw	r19,12(sp)
 8004f28:	dc800217 	ldw	r18,8(sp)
 8004f2c:	dc400117 	ldw	r17,4(sp)
 8004f30:	dc000017 	ldw	r16,0(sp)
 8004f34:	dec00504 	addi	sp,sp,20
 8004f38:	f800283a 	ret
 8004f3c:	9809883a 	mov	r4,r19
 8004f40:	01400104 	movi	r5,4
 8004f44:	8004dd00 	call	8004dd0 <__sfmoreglue>
 8004f48:	90800015 	stw	r2,0(r18)
 8004f4c:	103fde1e 	bne	r2,zero,8004ec8 <__alt_data_end+0xfc004ec8>
 8004f50:	00800304 	movi	r2,12
 8004f54:	98800015 	stw	r2,0(r19)
 8004f58:	0005883a 	mov	r2,zero
 8004f5c:	003ff006 	br	8004f20 <__alt_data_end+0xfc004f20>

08004f60 <_cleanup>:
 8004f60:	00820074 	movhi	r2,2049
 8004f64:	1088a504 	addi	r2,r2,8852
 8004f68:	11000017 	ldw	r4,0(r2)
 8004f6c:	01420074 	movhi	r5,2049
 8004f70:	29665104 	addi	r5,r5,-26300
 8004f74:	80058801 	jmpi	8005880 <_fwalk>

08004f78 <__sinit>:
 8004f78:	20800e17 	ldw	r2,56(r4)
 8004f7c:	10000126 	beq	r2,zero,8004f84 <__sinit+0xc>
 8004f80:	f800283a 	ret
 8004f84:	8004c301 	jmpi	8004c30 <__sinit.part.1>

08004f88 <__sfp_lock_acquire>:
 8004f88:	f800283a 	ret

08004f8c <__sfp_lock_release>:
 8004f8c:	f800283a 	ret

08004f90 <__sinit_lock_acquire>:
 8004f90:	f800283a 	ret

08004f94 <__sinit_lock_release>:
 8004f94:	f800283a 	ret

08004f98 <__fp_lock_all>:
 8004f98:	00820074 	movhi	r2,2049
 8004f9c:	1088a604 	addi	r2,r2,8856
 8004fa0:	11000017 	ldw	r4,0(r2)
 8004fa4:	01420034 	movhi	r5,2048
 8004fa8:	29530504 	addi	r5,r5,19476
 8004fac:	80058801 	jmpi	8005880 <_fwalk>

08004fb0 <__fp_unlock_all>:
 8004fb0:	00820074 	movhi	r2,2049
 8004fb4:	1088a604 	addi	r2,r2,8856
 8004fb8:	11000017 	ldw	r4,0(r2)
 8004fbc:	01420034 	movhi	r5,2048
 8004fc0:	29530704 	addi	r5,r5,19484
 8004fc4:	80058801 	jmpi	8005880 <_fwalk>

08004fc8 <_malloc_trim_r>:
 8004fc8:	defffb04 	addi	sp,sp,-20
 8004fcc:	dcc00315 	stw	r19,12(sp)
 8004fd0:	04c20074 	movhi	r19,2049
 8004fd4:	dc800215 	stw	r18,8(sp)
 8004fd8:	dc400115 	stw	r17,4(sp)
 8004fdc:	dc000015 	stw	r16,0(sp)
 8004fe0:	dfc00415 	stw	ra,16(sp)
 8004fe4:	2821883a 	mov	r16,r5
 8004fe8:	9cc31604 	addi	r19,r19,3160
 8004fec:	2025883a 	mov	r18,r4
 8004ff0:	800db940 	call	800db94 <__malloc_lock>
 8004ff4:	98800217 	ldw	r2,8(r19)
 8004ff8:	14400117 	ldw	r17,4(r2)
 8004ffc:	00bfff04 	movi	r2,-4
 8005000:	88a2703a 	and	r17,r17,r2
 8005004:	8c21c83a 	sub	r16,r17,r16
 8005008:	8403fbc4 	addi	r16,r16,4079
 800500c:	8020d33a 	srli	r16,r16,12
 8005010:	0083ffc4 	movi	r2,4095
 8005014:	843fffc4 	addi	r16,r16,-1
 8005018:	8020933a 	slli	r16,r16,12
 800501c:	1400060e 	bge	r2,r16,8005038 <_malloc_trim_r+0x70>
 8005020:	9009883a 	mov	r4,r18
 8005024:	000b883a 	mov	r5,zero
 8005028:	8007f2c0 	call	8007f2c <_sbrk_r>
 800502c:	98c00217 	ldw	r3,8(r19)
 8005030:	1c47883a 	add	r3,r3,r17
 8005034:	10c00a26 	beq	r2,r3,8005060 <_malloc_trim_r+0x98>
 8005038:	9009883a 	mov	r4,r18
 800503c:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8005040:	0005883a 	mov	r2,zero
 8005044:	dfc00417 	ldw	ra,16(sp)
 8005048:	dcc00317 	ldw	r19,12(sp)
 800504c:	dc800217 	ldw	r18,8(sp)
 8005050:	dc400117 	ldw	r17,4(sp)
 8005054:	dc000017 	ldw	r16,0(sp)
 8005058:	dec00504 	addi	sp,sp,20
 800505c:	f800283a 	ret
 8005060:	9009883a 	mov	r4,r18
 8005064:	040bc83a 	sub	r5,zero,r16
 8005068:	8007f2c0 	call	8007f2c <_sbrk_r>
 800506c:	00ffffc4 	movi	r3,-1
 8005070:	10c00d26 	beq	r2,r3,80050a8 <_malloc_trim_r+0xe0>
 8005074:	00c20074 	movhi	r3,2049
 8005078:	18cf8b04 	addi	r3,r3,15916
 800507c:	18800017 	ldw	r2,0(r3)
 8005080:	99000217 	ldw	r4,8(r19)
 8005084:	8c23c83a 	sub	r17,r17,r16
 8005088:	8c400054 	ori	r17,r17,1
 800508c:	1421c83a 	sub	r16,r2,r16
 8005090:	24400115 	stw	r17,4(r4)
 8005094:	9009883a 	mov	r4,r18
 8005098:	1c000015 	stw	r16,0(r3)
 800509c:	800dbb40 	call	800dbb4 <__malloc_unlock>
 80050a0:	00800044 	movi	r2,1
 80050a4:	003fe706 	br	8005044 <__alt_data_end+0xfc005044>
 80050a8:	9009883a 	mov	r4,r18
 80050ac:	000b883a 	mov	r5,zero
 80050b0:	8007f2c0 	call	8007f2c <_sbrk_r>
 80050b4:	99000217 	ldw	r4,8(r19)
 80050b8:	014003c4 	movi	r5,15
 80050bc:	1107c83a 	sub	r3,r2,r4
 80050c0:	28ffdd0e 	bge	r5,r3,8005038 <__alt_data_end+0xfc005038>
 80050c4:	01420074 	movhi	r5,2049
 80050c8:	2948a804 	addi	r5,r5,8864
 80050cc:	29400017 	ldw	r5,0(r5)
 80050d0:	18c00054 	ori	r3,r3,1
 80050d4:	20c00115 	stw	r3,4(r4)
 80050d8:	00c20074 	movhi	r3,2049
 80050dc:	1145c83a 	sub	r2,r2,r5
 80050e0:	18cf8b04 	addi	r3,r3,15916
 80050e4:	18800015 	stw	r2,0(r3)
 80050e8:	003fd306 	br	8005038 <__alt_data_end+0xfc005038>

080050ec <_free_r>:
 80050ec:	28004c26 	beq	r5,zero,8005220 <_free_r+0x134>
 80050f0:	defffd04 	addi	sp,sp,-12
 80050f4:	dc400115 	stw	r17,4(sp)
 80050f8:	dc000015 	stw	r16,0(sp)
 80050fc:	2023883a 	mov	r17,r4
 8005100:	2821883a 	mov	r16,r5
 8005104:	dfc00215 	stw	ra,8(sp)
 8005108:	800db940 	call	800db94 <__malloc_lock>
 800510c:	813fff17 	ldw	r4,-4(r16)
 8005110:	00bfff84 	movi	r2,-2
 8005114:	02420074 	movhi	r9,2049
 8005118:	81bffe04 	addi	r6,r16,-8
 800511c:	2084703a 	and	r2,r4,r2
 8005120:	4a431604 	addi	r9,r9,3160
 8005124:	308b883a 	add	r5,r6,r2
 8005128:	2a000117 	ldw	r8,4(r5)
 800512c:	49c00217 	ldw	r7,8(r9)
 8005130:	00ffff04 	movi	r3,-4
 8005134:	40c6703a 	and	r3,r8,r3
 8005138:	39405326 	beq	r7,r5,8005288 <_free_r+0x19c>
 800513c:	28c00115 	stw	r3,4(r5)
 8005140:	2100004c 	andi	r4,r4,1
 8005144:	2000091e 	bne	r4,zero,800516c <_free_r+0x80>
 8005148:	81fffe17 	ldw	r7,-8(r16)
 800514c:	4a000204 	addi	r8,r9,8
 8005150:	31cdc83a 	sub	r6,r6,r7
 8005154:	31000217 	ldw	r4,8(r6)
 8005158:	11c5883a 	add	r2,r2,r7
 800515c:	22006126 	beq	r4,r8,80052e4 <_free_r+0x1f8>
 8005160:	31c00317 	ldw	r7,12(r6)
 8005164:	21c00315 	stw	r7,12(r4)
 8005168:	39000215 	stw	r4,8(r7)
 800516c:	28c9883a 	add	r4,r5,r3
 8005170:	21c00117 	ldw	r7,4(r4)
 8005174:	39c0004c 	andi	r7,r7,1
 8005178:	38000d1e 	bne	r7,zero,80051b0 <_free_r+0xc4>
 800517c:	29000217 	ldw	r4,8(r5)
 8005180:	10c5883a 	add	r2,r2,r3
 8005184:	00c20074 	movhi	r3,2049
 8005188:	18c31804 	addi	r3,r3,3168
 800518c:	20c07526 	beq	r4,r3,8005364 <_free_r+0x278>
 8005190:	29c00317 	ldw	r7,12(r5)
 8005194:	11400054 	ori	r5,r2,1
 8005198:	3087883a 	add	r3,r6,r2
 800519c:	21c00315 	stw	r7,12(r4)
 80051a0:	39000215 	stw	r4,8(r7)
 80051a4:	31400115 	stw	r5,4(r6)
 80051a8:	18800015 	stw	r2,0(r3)
 80051ac:	00000406 	br	80051c0 <_free_r+0xd4>
 80051b0:	10c00054 	ori	r3,r2,1
 80051b4:	30c00115 	stw	r3,4(r6)
 80051b8:	3087883a 	add	r3,r6,r2
 80051bc:	18800015 	stw	r2,0(r3)
 80051c0:	00c07fc4 	movi	r3,511
 80051c4:	18801736 	bltu	r3,r2,8005224 <_free_r+0x138>
 80051c8:	1004d0fa 	srli	r2,r2,3
 80051cc:	01400044 	movi	r5,1
 80051d0:	49000117 	ldw	r4,4(r9)
 80051d4:	1087883a 	add	r3,r2,r2
 80051d8:	18c7883a 	add	r3,r3,r3
 80051dc:	1005d0ba 	srai	r2,r2,2
 80051e0:	18c7883a 	add	r3,r3,r3
 80051e4:	1a47883a 	add	r3,r3,r9
 80051e8:	19c00217 	ldw	r7,8(r3)
 80051ec:	2884983a 	sll	r2,r5,r2
 80051f0:	30c00315 	stw	r3,12(r6)
 80051f4:	31c00215 	stw	r7,8(r6)
 80051f8:	1104b03a 	or	r2,r2,r4
 80051fc:	19800215 	stw	r6,8(r3)
 8005200:	48800115 	stw	r2,4(r9)
 8005204:	39800315 	stw	r6,12(r7)
 8005208:	8809883a 	mov	r4,r17
 800520c:	dfc00217 	ldw	ra,8(sp)
 8005210:	dc400117 	ldw	r17,4(sp)
 8005214:	dc000017 	ldw	r16,0(sp)
 8005218:	dec00304 	addi	sp,sp,12
 800521c:	800dbb41 	jmpi	800dbb4 <__malloc_unlock>
 8005220:	f800283a 	ret
 8005224:	1006d27a 	srli	r3,r2,9
 8005228:	01000104 	movi	r4,4
 800522c:	20c04036 	bltu	r4,r3,8005330 <_free_r+0x244>
 8005230:	1006d1ba 	srli	r3,r2,6
 8005234:	19400e04 	addi	r5,r3,56
 8005238:	2947883a 	add	r3,r5,r5
 800523c:	18c7883a 	add	r3,r3,r3
 8005240:	18c7883a 	add	r3,r3,r3
 8005244:	1a49883a 	add	r4,r3,r9
 8005248:	20c00217 	ldw	r3,8(r4)
 800524c:	01c20074 	movhi	r7,2049
 8005250:	39c31604 	addi	r7,r7,3160
 8005254:	19003b26 	beq	r3,r4,8005344 <_free_r+0x258>
 8005258:	01ffff04 	movi	r7,-4
 800525c:	19400117 	ldw	r5,4(r3)
 8005260:	29ca703a 	and	r5,r5,r7
 8005264:	1140022e 	bgeu	r2,r5,8005270 <_free_r+0x184>
 8005268:	18c00217 	ldw	r3,8(r3)
 800526c:	20fffb1e 	bne	r4,r3,800525c <__alt_data_end+0xfc00525c>
 8005270:	18800317 	ldw	r2,12(r3)
 8005274:	30800315 	stw	r2,12(r6)
 8005278:	30c00215 	stw	r3,8(r6)
 800527c:	11800215 	stw	r6,8(r2)
 8005280:	19800315 	stw	r6,12(r3)
 8005284:	003fe006 	br	8005208 <__alt_data_end+0xfc005208>
 8005288:	2100004c 	andi	r4,r4,1
 800528c:	1885883a 	add	r2,r3,r2
 8005290:	2000071e 	bne	r4,zero,80052b0 <_free_r+0x1c4>
 8005294:	817ffe17 	ldw	r5,-8(r16)
 8005298:	314dc83a 	sub	r6,r6,r5
 800529c:	30c00317 	ldw	r3,12(r6)
 80052a0:	31000217 	ldw	r4,8(r6)
 80052a4:	1145883a 	add	r2,r2,r5
 80052a8:	20c00315 	stw	r3,12(r4)
 80052ac:	19000215 	stw	r4,8(r3)
 80052b0:	10c00054 	ori	r3,r2,1
 80052b4:	30c00115 	stw	r3,4(r6)
 80052b8:	00c20074 	movhi	r3,2049
 80052bc:	18c8a904 	addi	r3,r3,8868
 80052c0:	18c00017 	ldw	r3,0(r3)
 80052c4:	49800215 	stw	r6,8(r9)
 80052c8:	10ffcf36 	bltu	r2,r3,8005208 <__alt_data_end+0xfc005208>
 80052cc:	00820074 	movhi	r2,2049
 80052d0:	108f8304 	addi	r2,r2,15884
 80052d4:	11400017 	ldw	r5,0(r2)
 80052d8:	8809883a 	mov	r4,r17
 80052dc:	8004fc80 	call	8004fc8 <_malloc_trim_r>
 80052e0:	003fc906 	br	8005208 <__alt_data_end+0xfc005208>
 80052e4:	28c9883a 	add	r4,r5,r3
 80052e8:	21000117 	ldw	r4,4(r4)
 80052ec:	2100004c 	andi	r4,r4,1
 80052f0:	20000a1e 	bne	r4,zero,800531c <_free_r+0x230>
 80052f4:	29000317 	ldw	r4,12(r5)
 80052f8:	29400217 	ldw	r5,8(r5)
 80052fc:	10c5883a 	add	r2,r2,r3
 8005300:	10c00054 	ori	r3,r2,1
 8005304:	29000315 	stw	r4,12(r5)
 8005308:	21400215 	stw	r5,8(r4)
 800530c:	30c00115 	stw	r3,4(r6)
 8005310:	308d883a 	add	r6,r6,r2
 8005314:	30800015 	stw	r2,0(r6)
 8005318:	003fbb06 	br	8005208 <__alt_data_end+0xfc005208>
 800531c:	10c00054 	ori	r3,r2,1
 8005320:	30c00115 	stw	r3,4(r6)
 8005324:	308d883a 	add	r6,r6,r2
 8005328:	30800015 	stw	r2,0(r6)
 800532c:	003fb606 	br	8005208 <__alt_data_end+0xfc005208>
 8005330:	01000504 	movi	r4,20
 8005334:	20c01436 	bltu	r4,r3,8005388 <_free_r+0x29c>
 8005338:	194016c4 	addi	r5,r3,91
 800533c:	2947883a 	add	r3,r5,r5
 8005340:	003fbe06 	br	800523c <__alt_data_end+0xfc00523c>
 8005344:	280bd0ba 	srai	r5,r5,2
 8005348:	00800044 	movi	r2,1
 800534c:	39000117 	ldw	r4,4(r7)
 8005350:	114a983a 	sll	r5,r2,r5
 8005354:	1805883a 	mov	r2,r3
 8005358:	2908b03a 	or	r4,r5,r4
 800535c:	39000115 	stw	r4,4(r7)
 8005360:	003fc406 	br	8005274 <__alt_data_end+0xfc005274>
 8005364:	49800515 	stw	r6,20(r9)
 8005368:	49800415 	stw	r6,16(r9)
 800536c:	10c00054 	ori	r3,r2,1
 8005370:	31000315 	stw	r4,12(r6)
 8005374:	31000215 	stw	r4,8(r6)
 8005378:	30c00115 	stw	r3,4(r6)
 800537c:	308d883a 	add	r6,r6,r2
 8005380:	30800015 	stw	r2,0(r6)
 8005384:	003fa006 	br	8005208 <__alt_data_end+0xfc005208>
 8005388:	01001504 	movi	r4,84
 800538c:	20c00436 	bltu	r4,r3,80053a0 <_free_r+0x2b4>
 8005390:	1006d33a 	srli	r3,r2,12
 8005394:	19401b84 	addi	r5,r3,110
 8005398:	2947883a 	add	r3,r5,r5
 800539c:	003fa706 	br	800523c <__alt_data_end+0xfc00523c>
 80053a0:	01005504 	movi	r4,340
 80053a4:	20c00436 	bltu	r4,r3,80053b8 <_free_r+0x2cc>
 80053a8:	1006d3fa 	srli	r3,r2,15
 80053ac:	19401dc4 	addi	r5,r3,119
 80053b0:	2947883a 	add	r3,r5,r5
 80053b4:	003fa106 	br	800523c <__alt_data_end+0xfc00523c>
 80053b8:	01015504 	movi	r4,1364
 80053bc:	20c00436 	bltu	r4,r3,80053d0 <_free_r+0x2e4>
 80053c0:	1006d4ba 	srli	r3,r2,18
 80053c4:	19401f04 	addi	r5,r3,124
 80053c8:	2947883a 	add	r3,r5,r5
 80053cc:	003f9b06 	br	800523c <__alt_data_end+0xfc00523c>
 80053d0:	00c03f04 	movi	r3,252
 80053d4:	01401f84 	movi	r5,126
 80053d8:	003f9806 	br	800523c <__alt_data_end+0xfc00523c>

080053dc <__sfvwrite_r>:
 80053dc:	30800217 	ldw	r2,8(r6)
 80053e0:	10004526 	beq	r2,zero,80054f8 <__sfvwrite_r+0x11c>
 80053e4:	28c0030b 	ldhu	r3,12(r5)
 80053e8:	defff404 	addi	sp,sp,-48
 80053ec:	dd400715 	stw	r21,28(sp)
 80053f0:	dcc00515 	stw	r19,20(sp)
 80053f4:	dc000215 	stw	r16,8(sp)
 80053f8:	dfc00b15 	stw	ra,44(sp)
 80053fc:	df000a15 	stw	fp,40(sp)
 8005400:	ddc00915 	stw	r23,36(sp)
 8005404:	dd800815 	stw	r22,32(sp)
 8005408:	dd000615 	stw	r20,24(sp)
 800540c:	dc800415 	stw	r18,16(sp)
 8005410:	dc400315 	stw	r17,12(sp)
 8005414:	1880020c 	andi	r2,r3,8
 8005418:	2821883a 	mov	r16,r5
 800541c:	202b883a 	mov	r21,r4
 8005420:	3027883a 	mov	r19,r6
 8005424:	10002526 	beq	r2,zero,80054bc <__sfvwrite_r+0xe0>
 8005428:	28800417 	ldw	r2,16(r5)
 800542c:	10002326 	beq	r2,zero,80054bc <__sfvwrite_r+0xe0>
 8005430:	1880008c 	andi	r2,r3,2
 8005434:	9c400017 	ldw	r17,0(r19)
 8005438:	10003126 	beq	r2,zero,8005500 <__sfvwrite_r+0x124>
 800543c:	0029883a 	mov	r20,zero
 8005440:	0025883a 	mov	r18,zero
 8005444:	05810004 	movi	r22,1024
 8005448:	a00d883a 	mov	r6,r20
 800544c:	a809883a 	mov	r4,r21
 8005450:	90002526 	beq	r18,zero,80054e8 <__sfvwrite_r+0x10c>
 8005454:	900f883a 	mov	r7,r18
 8005458:	81400717 	ldw	r5,28(r16)
 800545c:	b480012e 	bgeu	r22,r18,8005464 <__sfvwrite_r+0x88>
 8005460:	01c10004 	movi	r7,1024
 8005464:	80800917 	ldw	r2,36(r16)
 8005468:	103ee83a 	callr	r2
 800546c:	0080510e 	bge	zero,r2,80055b4 <__sfvwrite_r+0x1d8>
 8005470:	98c00217 	ldw	r3,8(r19)
 8005474:	a0a9883a 	add	r20,r20,r2
 8005478:	90a5c83a 	sub	r18,r18,r2
 800547c:	1885c83a 	sub	r2,r3,r2
 8005480:	98800215 	stw	r2,8(r19)
 8005484:	103ff01e 	bne	r2,zero,8005448 <__alt_data_end+0xfc005448>
 8005488:	0005883a 	mov	r2,zero
 800548c:	dfc00b17 	ldw	ra,44(sp)
 8005490:	df000a17 	ldw	fp,40(sp)
 8005494:	ddc00917 	ldw	r23,36(sp)
 8005498:	dd800817 	ldw	r22,32(sp)
 800549c:	dd400717 	ldw	r21,28(sp)
 80054a0:	dd000617 	ldw	r20,24(sp)
 80054a4:	dcc00517 	ldw	r19,20(sp)
 80054a8:	dc800417 	ldw	r18,16(sp)
 80054ac:	dc400317 	ldw	r17,12(sp)
 80054b0:	dc000217 	ldw	r16,8(sp)
 80054b4:	dec00c04 	addi	sp,sp,48
 80054b8:	f800283a 	ret
 80054bc:	a809883a 	mov	r4,r21
 80054c0:	800b883a 	mov	r5,r16
 80054c4:	8002f3c0 	call	8002f3c <__swsetup_r>
 80054c8:	80c0030b 	ldhu	r3,12(r16)
 80054cc:	103fd826 	beq	r2,zero,8005430 <__alt_data_end+0xfc005430>
 80054d0:	18c01014 	ori	r3,r3,64
 80054d4:	80c0030d 	sth	r3,12(r16)
 80054d8:	00c00244 	movi	r3,9
 80054dc:	00bfffc4 	movi	r2,-1
 80054e0:	a8c00015 	stw	r3,0(r21)
 80054e4:	003fe906 	br	800548c <__alt_data_end+0xfc00548c>
 80054e8:	8d000017 	ldw	r20,0(r17)
 80054ec:	8c800117 	ldw	r18,4(r17)
 80054f0:	8c400204 	addi	r17,r17,8
 80054f4:	003fd406 	br	8005448 <__alt_data_end+0xfc005448>
 80054f8:	0005883a 	mov	r2,zero
 80054fc:	f800283a 	ret
 8005500:	1880004c 	andi	r2,r3,1
 8005504:	1000301e 	bne	r2,zero,80055c8 <__sfvwrite_r+0x1ec>
 8005508:	002f883a 	mov	r23,zero
 800550c:	0025883a 	mov	r18,zero
 8005510:	90001c26 	beq	r18,zero,8005584 <__sfvwrite_r+0x1a8>
 8005514:	1880800c 	andi	r2,r3,512
 8005518:	85000217 	ldw	r20,8(r16)
 800551c:	10006c26 	beq	r2,zero,80056d0 <__sfvwrite_r+0x2f4>
 8005520:	a02d883a 	mov	r22,r20
 8005524:	95008536 	bltu	r18,r20,800573c <__sfvwrite_r+0x360>
 8005528:	1881200c 	andi	r2,r3,1152
 800552c:	10009d1e 	bne	r2,zero,80057a4 <__sfvwrite_r+0x3c8>
 8005530:	81000017 	ldw	r4,0(r16)
 8005534:	a039883a 	mov	fp,r20
 8005538:	9029883a 	mov	r20,r18
 800553c:	b80b883a 	mov	r5,r23
 8005540:	b00d883a 	mov	r6,r22
 8005544:	80066500 	call	8006650 <memmove>
 8005548:	80c00217 	ldw	r3,8(r16)
 800554c:	81000017 	ldw	r4,0(r16)
 8005550:	9005883a 	mov	r2,r18
 8005554:	1f39c83a 	sub	fp,r3,fp
 8005558:	258f883a 	add	r7,r4,r22
 800555c:	87000215 	stw	fp,8(r16)
 8005560:	81c00015 	stw	r7,0(r16)
 8005564:	98c00217 	ldw	r3,8(r19)
 8005568:	b8af883a 	add	r23,r23,r2
 800556c:	90a5c83a 	sub	r18,r18,r2
 8005570:	1d05c83a 	sub	r2,r3,r20
 8005574:	98800215 	stw	r2,8(r19)
 8005578:	103fc326 	beq	r2,zero,8005488 <__alt_data_end+0xfc005488>
 800557c:	80c0030b 	ldhu	r3,12(r16)
 8005580:	903fe41e 	bne	r18,zero,8005514 <__alt_data_end+0xfc005514>
 8005584:	8dc00017 	ldw	r23,0(r17)
 8005588:	8c800117 	ldw	r18,4(r17)
 800558c:	8c400204 	addi	r17,r17,8
 8005590:	003fdf06 	br	8005510 <__alt_data_end+0xfc005510>
 8005594:	80079180 	call	8007918 <_realloc_r>
 8005598:	102d883a 	mov	r22,r2
 800559c:	1000a01e 	bne	r2,zero,8005820 <__sfvwrite_r+0x444>
 80055a0:	81400417 	ldw	r5,16(r16)
 80055a4:	a809883a 	mov	r4,r21
 80055a8:	80050ec0 	call	80050ec <_free_r>
 80055ac:	00800304 	movi	r2,12
 80055b0:	a8800015 	stw	r2,0(r21)
 80055b4:	80c0030b 	ldhu	r3,12(r16)
 80055b8:	00bfffc4 	movi	r2,-1
 80055bc:	18c01014 	ori	r3,r3,64
 80055c0:	80c0030d 	sth	r3,12(r16)
 80055c4:	003fb106 	br	800548c <__alt_data_end+0xfc00548c>
 80055c8:	0029883a 	mov	r20,zero
 80055cc:	0011883a 	mov	r8,zero
 80055d0:	0039883a 	mov	fp,zero
 80055d4:	0025883a 	mov	r18,zero
 80055d8:	90001f26 	beq	r18,zero,8005658 <__sfvwrite_r+0x27c>
 80055dc:	40006826 	beq	r8,zero,8005780 <__sfvwrite_r+0x3a4>
 80055e0:	a02f883a 	mov	r23,r20
 80055e4:	9500012e 	bgeu	r18,r20,80055ec <__sfvwrite_r+0x210>
 80055e8:	902f883a 	mov	r23,r18
 80055ec:	81000017 	ldw	r4,0(r16)
 80055f0:	80800417 	ldw	r2,16(r16)
 80055f4:	b82d883a 	mov	r22,r23
 80055f8:	81800217 	ldw	r6,8(r16)
 80055fc:	81c00517 	ldw	r7,20(r16)
 8005600:	1100022e 	bgeu	r2,r4,800560c <__sfvwrite_r+0x230>
 8005604:	31c7883a 	add	r3,r6,r7
 8005608:	1dc01816 	blt	r3,r23,800566c <__sfvwrite_r+0x290>
 800560c:	b9c03f16 	blt	r23,r7,800570c <__sfvwrite_r+0x330>
 8005610:	80800917 	ldw	r2,36(r16)
 8005614:	81400717 	ldw	r5,28(r16)
 8005618:	a809883a 	mov	r4,r21
 800561c:	da000115 	stw	r8,4(sp)
 8005620:	e00d883a 	mov	r6,fp
 8005624:	103ee83a 	callr	r2
 8005628:	102d883a 	mov	r22,r2
 800562c:	da000117 	ldw	r8,4(sp)
 8005630:	00bfe00e 	bge	zero,r2,80055b4 <__alt_data_end+0xfc0055b4>
 8005634:	a5a9c83a 	sub	r20,r20,r22
 8005638:	a0001f26 	beq	r20,zero,80056b8 <__sfvwrite_r+0x2dc>
 800563c:	98800217 	ldw	r2,8(r19)
 8005640:	e5b9883a 	add	fp,fp,r22
 8005644:	95a5c83a 	sub	r18,r18,r22
 8005648:	15adc83a 	sub	r22,r2,r22
 800564c:	9d800215 	stw	r22,8(r19)
 8005650:	b03f8d26 	beq	r22,zero,8005488 <__alt_data_end+0xfc005488>
 8005654:	903fe11e 	bne	r18,zero,80055dc <__alt_data_end+0xfc0055dc>
 8005658:	8f000017 	ldw	fp,0(r17)
 800565c:	8c800117 	ldw	r18,4(r17)
 8005660:	0011883a 	mov	r8,zero
 8005664:	8c400204 	addi	r17,r17,8
 8005668:	003fdb06 	br	80055d8 <__alt_data_end+0xfc0055d8>
 800566c:	180d883a 	mov	r6,r3
 8005670:	e00b883a 	mov	r5,fp
 8005674:	da000115 	stw	r8,4(sp)
 8005678:	d8c00015 	stw	r3,0(sp)
 800567c:	80066500 	call	8006650 <memmove>
 8005680:	d8c00017 	ldw	r3,0(sp)
 8005684:	80800017 	ldw	r2,0(r16)
 8005688:	a809883a 	mov	r4,r21
 800568c:	800b883a 	mov	r5,r16
 8005690:	10c5883a 	add	r2,r2,r3
 8005694:	80800015 	stw	r2,0(r16)
 8005698:	d8c00015 	stw	r3,0(sp)
 800569c:	80049bc0 	call	80049bc <_fflush_r>
 80056a0:	d8c00017 	ldw	r3,0(sp)
 80056a4:	da000117 	ldw	r8,4(sp)
 80056a8:	103fc21e 	bne	r2,zero,80055b4 <__alt_data_end+0xfc0055b4>
 80056ac:	182d883a 	mov	r22,r3
 80056b0:	a5a9c83a 	sub	r20,r20,r22
 80056b4:	a03fe11e 	bne	r20,zero,800563c <__alt_data_end+0xfc00563c>
 80056b8:	a809883a 	mov	r4,r21
 80056bc:	800b883a 	mov	r5,r16
 80056c0:	80049bc0 	call	80049bc <_fflush_r>
 80056c4:	103fbb1e 	bne	r2,zero,80055b4 <__alt_data_end+0xfc0055b4>
 80056c8:	0011883a 	mov	r8,zero
 80056cc:	003fdb06 	br	800563c <__alt_data_end+0xfc00563c>
 80056d0:	81000017 	ldw	r4,0(r16)
 80056d4:	80800417 	ldw	r2,16(r16)
 80056d8:	1100012e 	bgeu	r2,r4,80056e0 <__sfvwrite_r+0x304>
 80056dc:	a4805a36 	bltu	r20,r18,8005848 <__sfvwrite_r+0x46c>
 80056e0:	81c00517 	ldw	r7,20(r16)
 80056e4:	91c01a36 	bltu	r18,r7,8005750 <__sfvwrite_r+0x374>
 80056e8:	80800917 	ldw	r2,36(r16)
 80056ec:	81400717 	ldw	r5,28(r16)
 80056f0:	a809883a 	mov	r4,r21
 80056f4:	b80d883a 	mov	r6,r23
 80056f8:	103ee83a 	callr	r2
 80056fc:	1029883a 	mov	r20,r2
 8005700:	00bfac0e 	bge	zero,r2,80055b4 <__alt_data_end+0xfc0055b4>
 8005704:	a005883a 	mov	r2,r20
 8005708:	003f9606 	br	8005564 <__alt_data_end+0xfc005564>
 800570c:	b80d883a 	mov	r6,r23
 8005710:	e00b883a 	mov	r5,fp
 8005714:	da000115 	stw	r8,4(sp)
 8005718:	80066500 	call	8006650 <memmove>
 800571c:	80800217 	ldw	r2,8(r16)
 8005720:	80c00017 	ldw	r3,0(r16)
 8005724:	da000117 	ldw	r8,4(sp)
 8005728:	15c5c83a 	sub	r2,r2,r23
 800572c:	1def883a 	add	r23,r3,r23
 8005730:	80800215 	stw	r2,8(r16)
 8005734:	85c00015 	stw	r23,0(r16)
 8005738:	003fbe06 	br	8005634 <__alt_data_end+0xfc005634>
 800573c:	81000017 	ldw	r4,0(r16)
 8005740:	9039883a 	mov	fp,r18
 8005744:	9029883a 	mov	r20,r18
 8005748:	902d883a 	mov	r22,r18
 800574c:	003f7b06 	br	800553c <__alt_data_end+0xfc00553c>
 8005750:	b80b883a 	mov	r5,r23
 8005754:	900d883a 	mov	r6,r18
 8005758:	80066500 	call	8006650 <memmove>
 800575c:	80c00217 	ldw	r3,8(r16)
 8005760:	80800017 	ldw	r2,0(r16)
 8005764:	9029883a 	mov	r20,r18
 8005768:	1c87c83a 	sub	r3,r3,r18
 800576c:	1485883a 	add	r2,r2,r18
 8005770:	80800015 	stw	r2,0(r16)
 8005774:	80c00215 	stw	r3,8(r16)
 8005778:	9005883a 	mov	r2,r18
 800577c:	003f7906 	br	8005564 <__alt_data_end+0xfc005564>
 8005780:	e009883a 	mov	r4,fp
 8005784:	01400284 	movi	r5,10
 8005788:	900d883a 	mov	r6,r18
 800578c:	80064300 	call	8006430 <memchr>
 8005790:	10003826 	beq	r2,zero,8005874 <__sfvwrite_r+0x498>
 8005794:	10800044 	addi	r2,r2,1
 8005798:	1729c83a 	sub	r20,r2,fp
 800579c:	02000044 	movi	r8,1
 80057a0:	003f8f06 	br	80055e0 <__alt_data_end+0xfc0055e0>
 80057a4:	80800517 	ldw	r2,20(r16)
 80057a8:	81400417 	ldw	r5,16(r16)
 80057ac:	87000017 	ldw	fp,0(r16)
 80057b0:	10a9883a 	add	r20,r2,r2
 80057b4:	a085883a 	add	r2,r20,r2
 80057b8:	1028d7fa 	srli	r20,r2,31
 80057bc:	e179c83a 	sub	fp,fp,r5
 80057c0:	e1000044 	addi	r4,fp,1
 80057c4:	a085883a 	add	r2,r20,r2
 80057c8:	1029d07a 	srai	r20,r2,1
 80057cc:	2485883a 	add	r2,r4,r18
 80057d0:	a00d883a 	mov	r6,r20
 80057d4:	a080022e 	bgeu	r20,r2,80057e0 <__sfvwrite_r+0x404>
 80057d8:	1029883a 	mov	r20,r2
 80057dc:	100d883a 	mov	r6,r2
 80057e0:	18c1000c 	andi	r3,r3,1024
 80057e4:	a809883a 	mov	r4,r21
 80057e8:	183f6a26 	beq	r3,zero,8005594 <__alt_data_end+0xfc005594>
 80057ec:	300b883a 	mov	r5,r6
 80057f0:	8005c880 	call	8005c88 <_malloc_r>
 80057f4:	102d883a 	mov	r22,r2
 80057f8:	103f6c26 	beq	r2,zero,80055ac <__alt_data_end+0xfc0055ac>
 80057fc:	81400417 	ldw	r5,16(r16)
 8005800:	1009883a 	mov	r4,r2
 8005804:	e00d883a 	mov	r6,fp
 8005808:	80065180 	call	8006518 <memcpy>
 800580c:	8080030b 	ldhu	r2,12(r16)
 8005810:	00fedfc4 	movi	r3,-1153
 8005814:	10c4703a 	and	r2,r2,r3
 8005818:	10802014 	ori	r2,r2,128
 800581c:	8080030d 	sth	r2,12(r16)
 8005820:	b709883a 	add	r4,r22,fp
 8005824:	a707c83a 	sub	r3,r20,fp
 8005828:	85800415 	stw	r22,16(r16)
 800582c:	85000515 	stw	r20,20(r16)
 8005830:	81000015 	stw	r4,0(r16)
 8005834:	9039883a 	mov	fp,r18
 8005838:	80c00215 	stw	r3,8(r16)
 800583c:	9029883a 	mov	r20,r18
 8005840:	902d883a 	mov	r22,r18
 8005844:	003f3d06 	br	800553c <__alt_data_end+0xfc00553c>
 8005848:	b80b883a 	mov	r5,r23
 800584c:	a00d883a 	mov	r6,r20
 8005850:	80066500 	call	8006650 <memmove>
 8005854:	80800017 	ldw	r2,0(r16)
 8005858:	a809883a 	mov	r4,r21
 800585c:	800b883a 	mov	r5,r16
 8005860:	1505883a 	add	r2,r2,r20
 8005864:	80800015 	stw	r2,0(r16)
 8005868:	80049bc0 	call	80049bc <_fflush_r>
 800586c:	103fa526 	beq	r2,zero,8005704 <__alt_data_end+0xfc005704>
 8005870:	003f5006 	br	80055b4 <__alt_data_end+0xfc0055b4>
 8005874:	95000044 	addi	r20,r18,1
 8005878:	02000044 	movi	r8,1
 800587c:	003f5806 	br	80055e0 <__alt_data_end+0xfc0055e0>

08005880 <_fwalk>:
 8005880:	defff804 	addi	sp,sp,-32
 8005884:	dd400515 	stw	r21,20(sp)
 8005888:	2540b804 	addi	r21,r4,736
 800588c:	dd800615 	stw	r22,24(sp)
 8005890:	dd000415 	stw	r20,16(sp)
 8005894:	dfc00715 	stw	ra,28(sp)
 8005898:	dcc00315 	stw	r19,12(sp)
 800589c:	dc800215 	stw	r18,8(sp)
 80058a0:	dc400115 	stw	r17,4(sp)
 80058a4:	dc000015 	stw	r16,0(sp)
 80058a8:	2829883a 	mov	r20,r5
 80058ac:	002d883a 	mov	r22,zero
 80058b0:	8004f880 	call	8004f88 <__sfp_lock_acquire>
 80058b4:	a8001426 	beq	r21,zero,8005908 <_fwalk+0x88>
 80058b8:	04ffffc4 	movi	r19,-1
 80058bc:	ac400117 	ldw	r17,4(r21)
 80058c0:	ac800217 	ldw	r18,8(r21)
 80058c4:	8c7fffc4 	addi	r17,r17,-1
 80058c8:	88000d16 	blt	r17,zero,8005900 <_fwalk+0x80>
 80058cc:	94000304 	addi	r16,r18,12
 80058d0:	94800384 	addi	r18,r18,14
 80058d4:	80c0000f 	ldh	r3,0(r16)
 80058d8:	8c7fffc4 	addi	r17,r17,-1
 80058dc:	813ffd04 	addi	r4,r16,-12
 80058e0:	18000426 	beq	r3,zero,80058f4 <_fwalk+0x74>
 80058e4:	90c0000f 	ldh	r3,0(r18)
 80058e8:	1cc00226 	beq	r3,r19,80058f4 <_fwalk+0x74>
 80058ec:	a03ee83a 	callr	r20
 80058f0:	b0acb03a 	or	r22,r22,r2
 80058f4:	84001a04 	addi	r16,r16,104
 80058f8:	94801a04 	addi	r18,r18,104
 80058fc:	8cfff51e 	bne	r17,r19,80058d4 <__alt_data_end+0xfc0058d4>
 8005900:	ad400017 	ldw	r21,0(r21)
 8005904:	a83fed1e 	bne	r21,zero,80058bc <__alt_data_end+0xfc0058bc>
 8005908:	8004f8c0 	call	8004f8c <__sfp_lock_release>
 800590c:	b005883a 	mov	r2,r22
 8005910:	dfc00717 	ldw	ra,28(sp)
 8005914:	dd800617 	ldw	r22,24(sp)
 8005918:	dd400517 	ldw	r21,20(sp)
 800591c:	dd000417 	ldw	r20,16(sp)
 8005920:	dcc00317 	ldw	r19,12(sp)
 8005924:	dc800217 	ldw	r18,8(sp)
 8005928:	dc400117 	ldw	r17,4(sp)
 800592c:	dc000017 	ldw	r16,0(sp)
 8005930:	dec00804 	addi	sp,sp,32
 8005934:	f800283a 	ret

08005938 <_fwalk_reent>:
 8005938:	defff804 	addi	sp,sp,-32
 800593c:	dd400515 	stw	r21,20(sp)
 8005940:	2540b804 	addi	r21,r4,736
 8005944:	dd800615 	stw	r22,24(sp)
 8005948:	dd000415 	stw	r20,16(sp)
 800594c:	dcc00315 	stw	r19,12(sp)
 8005950:	dfc00715 	stw	ra,28(sp)
 8005954:	dc800215 	stw	r18,8(sp)
 8005958:	dc400115 	stw	r17,4(sp)
 800595c:	dc000015 	stw	r16,0(sp)
 8005960:	2027883a 	mov	r19,r4
 8005964:	2829883a 	mov	r20,r5
 8005968:	002d883a 	mov	r22,zero
 800596c:	8004f880 	call	8004f88 <__sfp_lock_acquire>
 8005970:	a8001326 	beq	r21,zero,80059c0 <_fwalk_reent+0x88>
 8005974:	04bfffc4 	movi	r18,-1
 8005978:	ac400117 	ldw	r17,4(r21)
 800597c:	ac000217 	ldw	r16,8(r21)
 8005980:	8c7fffc4 	addi	r17,r17,-1
 8005984:	88000c16 	blt	r17,zero,80059b8 <_fwalk_reent+0x80>
 8005988:	84000304 	addi	r16,r16,12
 800598c:	80c0000f 	ldh	r3,0(r16)
 8005990:	8c7fffc4 	addi	r17,r17,-1
 8005994:	817ffd04 	addi	r5,r16,-12
 8005998:	18000526 	beq	r3,zero,80059b0 <_fwalk_reent+0x78>
 800599c:	80c0008f 	ldh	r3,2(r16)
 80059a0:	9809883a 	mov	r4,r19
 80059a4:	1c800226 	beq	r3,r18,80059b0 <_fwalk_reent+0x78>
 80059a8:	a03ee83a 	callr	r20
 80059ac:	b0acb03a 	or	r22,r22,r2
 80059b0:	84001a04 	addi	r16,r16,104
 80059b4:	8cbff51e 	bne	r17,r18,800598c <__alt_data_end+0xfc00598c>
 80059b8:	ad400017 	ldw	r21,0(r21)
 80059bc:	a83fee1e 	bne	r21,zero,8005978 <__alt_data_end+0xfc005978>
 80059c0:	8004f8c0 	call	8004f8c <__sfp_lock_release>
 80059c4:	b005883a 	mov	r2,r22
 80059c8:	dfc00717 	ldw	ra,28(sp)
 80059cc:	dd800617 	ldw	r22,24(sp)
 80059d0:	dd400517 	ldw	r21,20(sp)
 80059d4:	dd000417 	ldw	r20,16(sp)
 80059d8:	dcc00317 	ldw	r19,12(sp)
 80059dc:	dc800217 	ldw	r18,8(sp)
 80059e0:	dc400117 	ldw	r17,4(sp)
 80059e4:	dc000017 	ldw	r16,0(sp)
 80059e8:	dec00804 	addi	sp,sp,32
 80059ec:	f800283a 	ret

080059f0 <_setlocale_r>:
 80059f0:	30001b26 	beq	r6,zero,8005a60 <_setlocale_r+0x70>
 80059f4:	01420074 	movhi	r5,2049
 80059f8:	defffe04 	addi	sp,sp,-8
 80059fc:	29414804 	addi	r5,r5,1312
 8005a00:	3009883a 	mov	r4,r6
 8005a04:	dc000015 	stw	r16,0(sp)
 8005a08:	dfc00115 	stw	ra,4(sp)
 8005a0c:	3021883a 	mov	r16,r6
 8005a10:	80080bc0 	call	80080bc <strcmp>
 8005a14:	1000061e 	bne	r2,zero,8005a30 <_setlocale_r+0x40>
 8005a18:	00820074 	movhi	r2,2049
 8005a1c:	10814704 	addi	r2,r2,1308
 8005a20:	dfc00117 	ldw	ra,4(sp)
 8005a24:	dc000017 	ldw	r16,0(sp)
 8005a28:	dec00204 	addi	sp,sp,8
 8005a2c:	f800283a 	ret
 8005a30:	01420074 	movhi	r5,2049
 8005a34:	29414704 	addi	r5,r5,1308
 8005a38:	8009883a 	mov	r4,r16
 8005a3c:	80080bc0 	call	80080bc <strcmp>
 8005a40:	103ff526 	beq	r2,zero,8005a18 <__alt_data_end+0xfc005a18>
 8005a44:	01420074 	movhi	r5,2049
 8005a48:	29413204 	addi	r5,r5,1224
 8005a4c:	8009883a 	mov	r4,r16
 8005a50:	80080bc0 	call	80080bc <strcmp>
 8005a54:	103ff026 	beq	r2,zero,8005a18 <__alt_data_end+0xfc005a18>
 8005a58:	0005883a 	mov	r2,zero
 8005a5c:	003ff006 	br	8005a20 <__alt_data_end+0xfc005a20>
 8005a60:	00820074 	movhi	r2,2049
 8005a64:	10814704 	addi	r2,r2,1308
 8005a68:	f800283a 	ret

08005a6c <__locale_charset>:
 8005a6c:	00820074 	movhi	r2,2049
 8005a70:	10830004 	addi	r2,r2,3072
 8005a74:	f800283a 	ret

08005a78 <__locale_mb_cur_max>:
 8005a78:	00820074 	movhi	r2,2049
 8005a7c:	1088a704 	addi	r2,r2,8860
 8005a80:	10800017 	ldw	r2,0(r2)
 8005a84:	f800283a 	ret

08005a88 <__locale_msgcharset>:
 8005a88:	00820074 	movhi	r2,2049
 8005a8c:	1082f804 	addi	r2,r2,3040
 8005a90:	f800283a 	ret

08005a94 <__locale_cjk_lang>:
 8005a94:	0005883a 	mov	r2,zero
 8005a98:	f800283a 	ret

08005a9c <_localeconv_r>:
 8005a9c:	00820074 	movhi	r2,2049
 8005aa0:	10830804 	addi	r2,r2,3104
 8005aa4:	f800283a 	ret

08005aa8 <setlocale>:
 8005aa8:	00c20074 	movhi	r3,2049
 8005aac:	18c8a604 	addi	r3,r3,8856
 8005ab0:	2005883a 	mov	r2,r4
 8005ab4:	19000017 	ldw	r4,0(r3)
 8005ab8:	280d883a 	mov	r6,r5
 8005abc:	100b883a 	mov	r5,r2
 8005ac0:	80059f01 	jmpi	80059f0 <_setlocale_r>

08005ac4 <localeconv>:
 8005ac4:	00820074 	movhi	r2,2049
 8005ac8:	10830804 	addi	r2,r2,3104
 8005acc:	f800283a 	ret

08005ad0 <__smakebuf_r>:
 8005ad0:	2880030b 	ldhu	r2,12(r5)
 8005ad4:	10c0008c 	andi	r3,r2,2
 8005ad8:	1800401e 	bne	r3,zero,8005bdc <__smakebuf_r+0x10c>
 8005adc:	deffec04 	addi	sp,sp,-80
 8005ae0:	dc000f15 	stw	r16,60(sp)
 8005ae4:	2821883a 	mov	r16,r5
 8005ae8:	2940038f 	ldh	r5,14(r5)
 8005aec:	dc401015 	stw	r17,64(sp)
 8005af0:	dfc01315 	stw	ra,76(sp)
 8005af4:	dcc01215 	stw	r19,72(sp)
 8005af8:	dc801115 	stw	r18,68(sp)
 8005afc:	2023883a 	mov	r17,r4
 8005b00:	28001b16 	blt	r5,zero,8005b70 <__smakebuf_r+0xa0>
 8005b04:	d80d883a 	mov	r6,sp
 8005b08:	8009b340 	call	8009b34 <_fstat_r>
 8005b0c:	10001716 	blt	r2,zero,8005b6c <__smakebuf_r+0x9c>
 8005b10:	d8800117 	ldw	r2,4(sp)
 8005b14:	00e00014 	movui	r3,32768
 8005b18:	10bc000c 	andi	r2,r2,61440
 8005b1c:	10c03726 	beq	r2,r3,8005bfc <__smakebuf_r+0x12c>
 8005b20:	80c0030b 	ldhu	r3,12(r16)
 8005b24:	18c20014 	ori	r3,r3,2048
 8005b28:	80c0030d 	sth	r3,12(r16)
 8005b2c:	00c80004 	movi	r3,8192
 8005b30:	10c03c1e 	bne	r2,r3,8005c24 <__smakebuf_r+0x154>
 8005b34:	8140038f 	ldh	r5,14(r16)
 8005b38:	8809883a 	mov	r4,r17
 8005b3c:	8009b8c0 	call	8009b8c <_isatty_r>
 8005b40:	10004e26 	beq	r2,zero,8005c7c <__smakebuf_r+0x1ac>
 8005b44:	8080030b 	ldhu	r2,12(r16)
 8005b48:	04c00044 	movi	r19,1
 8005b4c:	80c010c4 	addi	r3,r16,67
 8005b50:	14c4b03a 	or	r2,r2,r19
 8005b54:	8080030d 	sth	r2,12(r16)
 8005b58:	80c00015 	stw	r3,0(r16)
 8005b5c:	80c00415 	stw	r3,16(r16)
 8005b60:	84c00515 	stw	r19,20(r16)
 8005b64:	04810004 	movi	r18,1024
 8005b68:	00000706 	br	8005b88 <__smakebuf_r+0xb8>
 8005b6c:	8080030b 	ldhu	r2,12(r16)
 8005b70:	10c0200c 	andi	r3,r2,128
 8005b74:	18001f1e 	bne	r3,zero,8005bf4 <__smakebuf_r+0x124>
 8005b78:	04810004 	movi	r18,1024
 8005b7c:	10820014 	ori	r2,r2,2048
 8005b80:	8080030d 	sth	r2,12(r16)
 8005b84:	0027883a 	mov	r19,zero
 8005b88:	8809883a 	mov	r4,r17
 8005b8c:	900b883a 	mov	r5,r18
 8005b90:	8005c880 	call	8005c88 <_malloc_r>
 8005b94:	10002e26 	beq	r2,zero,8005c50 <__smakebuf_r+0x180>
 8005b98:	80c0030b 	ldhu	r3,12(r16)
 8005b9c:	01020034 	movhi	r4,2048
 8005ba0:	21130904 	addi	r4,r4,19492
 8005ba4:	89000f15 	stw	r4,60(r17)
 8005ba8:	18c02014 	ori	r3,r3,128
 8005bac:	80c0030d 	sth	r3,12(r16)
 8005bb0:	80800015 	stw	r2,0(r16)
 8005bb4:	80800415 	stw	r2,16(r16)
 8005bb8:	84800515 	stw	r18,20(r16)
 8005bbc:	98001c1e 	bne	r19,zero,8005c30 <__smakebuf_r+0x160>
 8005bc0:	dfc01317 	ldw	ra,76(sp)
 8005bc4:	dcc01217 	ldw	r19,72(sp)
 8005bc8:	dc801117 	ldw	r18,68(sp)
 8005bcc:	dc401017 	ldw	r17,64(sp)
 8005bd0:	dc000f17 	ldw	r16,60(sp)
 8005bd4:	dec01404 	addi	sp,sp,80
 8005bd8:	f800283a 	ret
 8005bdc:	288010c4 	addi	r2,r5,67
 8005be0:	28800015 	stw	r2,0(r5)
 8005be4:	28800415 	stw	r2,16(r5)
 8005be8:	00800044 	movi	r2,1
 8005bec:	28800515 	stw	r2,20(r5)
 8005bf0:	f800283a 	ret
 8005bf4:	04801004 	movi	r18,64
 8005bf8:	003fe006 	br	8005b7c <__alt_data_end+0xfc005b7c>
 8005bfc:	81000a17 	ldw	r4,40(r16)
 8005c00:	00c20074 	movhi	r3,2049
 8005c04:	18e01604 	addi	r3,r3,-32680
 8005c08:	20ffc51e 	bne	r4,r3,8005b20 <__alt_data_end+0xfc005b20>
 8005c0c:	80c0030b 	ldhu	r3,12(r16)
 8005c10:	01010004 	movi	r4,1024
 8005c14:	81001315 	stw	r4,76(r16)
 8005c18:	1906b03a 	or	r3,r3,r4
 8005c1c:	80c0030d 	sth	r3,12(r16)
 8005c20:	003fc206 	br	8005b2c <__alt_data_end+0xfc005b2c>
 8005c24:	0027883a 	mov	r19,zero
 8005c28:	04810004 	movi	r18,1024
 8005c2c:	003fd606 	br	8005b88 <__alt_data_end+0xfc005b88>
 8005c30:	8140038f 	ldh	r5,14(r16)
 8005c34:	8809883a 	mov	r4,r17
 8005c38:	8009b8c0 	call	8009b8c <_isatty_r>
 8005c3c:	103fe026 	beq	r2,zero,8005bc0 <__alt_data_end+0xfc005bc0>
 8005c40:	8080030b 	ldhu	r2,12(r16)
 8005c44:	10800054 	ori	r2,r2,1
 8005c48:	8080030d 	sth	r2,12(r16)
 8005c4c:	003fdc06 	br	8005bc0 <__alt_data_end+0xfc005bc0>
 8005c50:	8080030b 	ldhu	r2,12(r16)
 8005c54:	10c0800c 	andi	r3,r2,512
 8005c58:	183fd91e 	bne	r3,zero,8005bc0 <__alt_data_end+0xfc005bc0>
 8005c5c:	10800094 	ori	r2,r2,2
 8005c60:	80c010c4 	addi	r3,r16,67
 8005c64:	8080030d 	sth	r2,12(r16)
 8005c68:	00800044 	movi	r2,1
 8005c6c:	80c00015 	stw	r3,0(r16)
 8005c70:	80c00415 	stw	r3,16(r16)
 8005c74:	80800515 	stw	r2,20(r16)
 8005c78:	003fd106 	br	8005bc0 <__alt_data_end+0xfc005bc0>
 8005c7c:	04c00044 	movi	r19,1
 8005c80:	04810004 	movi	r18,1024
 8005c84:	003fc006 	br	8005b88 <__alt_data_end+0xfc005b88>

08005c88 <_malloc_r>:
 8005c88:	defff504 	addi	sp,sp,-44
 8005c8c:	dc800315 	stw	r18,12(sp)
 8005c90:	dfc00a15 	stw	ra,40(sp)
 8005c94:	df000915 	stw	fp,36(sp)
 8005c98:	ddc00815 	stw	r23,32(sp)
 8005c9c:	dd800715 	stw	r22,28(sp)
 8005ca0:	dd400615 	stw	r21,24(sp)
 8005ca4:	dd000515 	stw	r20,20(sp)
 8005ca8:	dcc00415 	stw	r19,16(sp)
 8005cac:	dc400215 	stw	r17,8(sp)
 8005cb0:	dc000115 	stw	r16,4(sp)
 8005cb4:	288002c4 	addi	r2,r5,11
 8005cb8:	00c00584 	movi	r3,22
 8005cbc:	2025883a 	mov	r18,r4
 8005cc0:	18802a2e 	bgeu	r3,r2,8005d6c <_malloc_r+0xe4>
 8005cc4:	047ffe04 	movi	r17,-8
 8005cc8:	1462703a 	and	r17,r2,r17
 8005ccc:	88009e16 	blt	r17,zero,8005f48 <_malloc_r+0x2c0>
 8005cd0:	89409d36 	bltu	r17,r5,8005f48 <_malloc_r+0x2c0>
 8005cd4:	800db940 	call	800db94 <__malloc_lock>
 8005cd8:	00807dc4 	movi	r2,503
 8005cdc:	14402736 	bltu	r2,r17,8005d7c <_malloc_r+0xf4>
 8005ce0:	8806d0fa 	srli	r3,r17,3
 8005ce4:	04c20074 	movhi	r19,2049
 8005ce8:	9cc31604 	addi	r19,r19,3160
 8005cec:	18c5883a 	add	r2,r3,r3
 8005cf0:	1085883a 	add	r2,r2,r2
 8005cf4:	1085883a 	add	r2,r2,r2
 8005cf8:	9885883a 	add	r2,r19,r2
 8005cfc:	14000317 	ldw	r16,12(r2)
 8005d00:	80814a26 	beq	r16,r2,800622c <_malloc_r+0x5a4>
 8005d04:	80c00117 	ldw	r3,4(r16)
 8005d08:	81000317 	ldw	r4,12(r16)
 8005d0c:	00bfff04 	movi	r2,-4
 8005d10:	1884703a 	and	r2,r3,r2
 8005d14:	81400217 	ldw	r5,8(r16)
 8005d18:	8085883a 	add	r2,r16,r2
 8005d1c:	10c00117 	ldw	r3,4(r2)
 8005d20:	29000315 	stw	r4,12(r5)
 8005d24:	21400215 	stw	r5,8(r4)
 8005d28:	18c00054 	ori	r3,r3,1
 8005d2c:	10c00115 	stw	r3,4(r2)
 8005d30:	9009883a 	mov	r4,r18
 8005d34:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8005d38:	80800204 	addi	r2,r16,8
 8005d3c:	dfc00a17 	ldw	ra,40(sp)
 8005d40:	df000917 	ldw	fp,36(sp)
 8005d44:	ddc00817 	ldw	r23,32(sp)
 8005d48:	dd800717 	ldw	r22,28(sp)
 8005d4c:	dd400617 	ldw	r21,24(sp)
 8005d50:	dd000517 	ldw	r20,20(sp)
 8005d54:	dcc00417 	ldw	r19,16(sp)
 8005d58:	dc800317 	ldw	r18,12(sp)
 8005d5c:	dc400217 	ldw	r17,8(sp)
 8005d60:	dc000117 	ldw	r16,4(sp)
 8005d64:	dec00b04 	addi	sp,sp,44
 8005d68:	f800283a 	ret
 8005d6c:	04400404 	movi	r17,16
 8005d70:	89407536 	bltu	r17,r5,8005f48 <_malloc_r+0x2c0>
 8005d74:	800db940 	call	800db94 <__malloc_lock>
 8005d78:	003fd906 	br	8005ce0 <__alt_data_end+0xfc005ce0>
 8005d7c:	8806d27a 	srli	r3,r17,9
 8005d80:	18007526 	beq	r3,zero,8005f58 <_malloc_r+0x2d0>
 8005d84:	00800104 	movi	r2,4
 8005d88:	10c0ef36 	bltu	r2,r3,8006148 <_malloc_r+0x4c0>
 8005d8c:	8806d1ba 	srli	r3,r17,6
 8005d90:	19c00e04 	addi	r7,r3,56
 8005d94:	39cb883a 	add	r5,r7,r7
 8005d98:	04c20074 	movhi	r19,2049
 8005d9c:	294b883a 	add	r5,r5,r5
 8005da0:	9cc31604 	addi	r19,r19,3160
 8005da4:	294b883a 	add	r5,r5,r5
 8005da8:	994b883a 	add	r5,r19,r5
 8005dac:	2c000317 	ldw	r16,12(r5)
 8005db0:	2c000e26 	beq	r5,r16,8005dec <_malloc_r+0x164>
 8005db4:	80800117 	ldw	r2,4(r16)
 8005db8:	01bfff04 	movi	r6,-4
 8005dbc:	010003c4 	movi	r4,15
 8005dc0:	1184703a 	and	r2,r2,r6
 8005dc4:	1447c83a 	sub	r3,r2,r17
 8005dc8:	20c00716 	blt	r4,r3,8005de8 <_malloc_r+0x160>
 8005dcc:	1800650e 	bge	r3,zero,8005f64 <_malloc_r+0x2dc>
 8005dd0:	84000317 	ldw	r16,12(r16)
 8005dd4:	2c000526 	beq	r5,r16,8005dec <_malloc_r+0x164>
 8005dd8:	80800117 	ldw	r2,4(r16)
 8005ddc:	1184703a 	and	r2,r2,r6
 8005de0:	1447c83a 	sub	r3,r2,r17
 8005de4:	20fff90e 	bge	r4,r3,8005dcc <__alt_data_end+0xfc005dcc>
 8005de8:	39ffffc4 	addi	r7,r7,-1
 8005dec:	38c00044 	addi	r3,r7,1
 8005df0:	01820074 	movhi	r6,2049
 8005df4:	9c000417 	ldw	r16,16(r19)
 8005df8:	31831604 	addi	r6,r6,3160
 8005dfc:	32400204 	addi	r9,r6,8
 8005e00:	82410326 	beq	r16,r9,8006210 <_malloc_r+0x588>
 8005e04:	81000117 	ldw	r4,4(r16)
 8005e08:	00bfff04 	movi	r2,-4
 8005e0c:	208e703a 	and	r7,r4,r2
 8005e10:	3c45c83a 	sub	r2,r7,r17
 8005e14:	010003c4 	movi	r4,15
 8005e18:	2080ee16 	blt	r4,r2,80061d4 <_malloc_r+0x54c>
 8005e1c:	32400515 	stw	r9,20(r6)
 8005e20:	32400415 	stw	r9,16(r6)
 8005e24:	1000510e 	bge	r2,zero,8005f6c <_malloc_r+0x2e4>
 8005e28:	00807fc4 	movi	r2,511
 8005e2c:	11c0ce36 	bltu	r2,r7,8006168 <_malloc_r+0x4e0>
 8005e30:	3808d0fa 	srli	r4,r7,3
 8005e34:	01c00044 	movi	r7,1
 8005e38:	30800117 	ldw	r2,4(r6)
 8005e3c:	210b883a 	add	r5,r4,r4
 8005e40:	294b883a 	add	r5,r5,r5
 8005e44:	2009d0ba 	srai	r4,r4,2
 8005e48:	294b883a 	add	r5,r5,r5
 8005e4c:	298b883a 	add	r5,r5,r6
 8005e50:	2a000217 	ldw	r8,8(r5)
 8005e54:	3908983a 	sll	r4,r7,r4
 8005e58:	81400315 	stw	r5,12(r16)
 8005e5c:	82000215 	stw	r8,8(r16)
 8005e60:	2088b03a 	or	r4,r4,r2
 8005e64:	2c000215 	stw	r16,8(r5)
 8005e68:	31000115 	stw	r4,4(r6)
 8005e6c:	44000315 	stw	r16,12(r8)
 8005e70:	1805d0ba 	srai	r2,r3,2
 8005e74:	01400044 	movi	r5,1
 8005e78:	288a983a 	sll	r5,r5,r2
 8005e7c:	21404336 	bltu	r4,r5,8005f8c <_malloc_r+0x304>
 8005e80:	2144703a 	and	r2,r4,r5
 8005e84:	10000a1e 	bne	r2,zero,8005eb0 <_malloc_r+0x228>
 8005e88:	00bfff04 	movi	r2,-4
 8005e8c:	294b883a 	add	r5,r5,r5
 8005e90:	1886703a 	and	r3,r3,r2
 8005e94:	2144703a 	and	r2,r4,r5
 8005e98:	18c00104 	addi	r3,r3,4
 8005e9c:	1000041e 	bne	r2,zero,8005eb0 <_malloc_r+0x228>
 8005ea0:	294b883a 	add	r5,r5,r5
 8005ea4:	2144703a 	and	r2,r4,r5
 8005ea8:	18c00104 	addi	r3,r3,4
 8005eac:	103ffc26 	beq	r2,zero,8005ea0 <__alt_data_end+0xfc005ea0>
 8005eb0:	023fff04 	movi	r8,-4
 8005eb4:	01c003c4 	movi	r7,15
 8005eb8:	18c5883a 	add	r2,r3,r3
 8005ebc:	1085883a 	add	r2,r2,r2
 8005ec0:	1085883a 	add	r2,r2,r2
 8005ec4:	9895883a 	add	r10,r19,r2
 8005ec8:	52c00304 	addi	r11,r10,12
 8005ecc:	1819883a 	mov	r12,r3
 8005ed0:	5c000017 	ldw	r16,0(r11)
 8005ed4:	59bffd04 	addi	r6,r11,-12
 8005ed8:	8180041e 	bne	r16,r6,8005eec <_malloc_r+0x264>
 8005edc:	0000ce06 	br	8006218 <_malloc_r+0x590>
 8005ee0:	2000d70e 	bge	r4,zero,8006240 <_malloc_r+0x5b8>
 8005ee4:	84000317 	ldw	r16,12(r16)
 8005ee8:	8180cb26 	beq	r16,r6,8006218 <_malloc_r+0x590>
 8005eec:	80800117 	ldw	r2,4(r16)
 8005ef0:	1204703a 	and	r2,r2,r8
 8005ef4:	1449c83a 	sub	r4,r2,r17
 8005ef8:	393ff90e 	bge	r7,r4,8005ee0 <__alt_data_end+0xfc005ee0>
 8005efc:	80800317 	ldw	r2,12(r16)
 8005f00:	80c00217 	ldw	r3,8(r16)
 8005f04:	89400054 	ori	r5,r17,1
 8005f08:	81400115 	stw	r5,4(r16)
 8005f0c:	18800315 	stw	r2,12(r3)
 8005f10:	10c00215 	stw	r3,8(r2)
 8005f14:	8463883a 	add	r17,r16,r17
 8005f18:	9c400515 	stw	r17,20(r19)
 8005f1c:	9c400415 	stw	r17,16(r19)
 8005f20:	20800054 	ori	r2,r4,1
 8005f24:	88800115 	stw	r2,4(r17)
 8005f28:	8a400315 	stw	r9,12(r17)
 8005f2c:	8a400215 	stw	r9,8(r17)
 8005f30:	8923883a 	add	r17,r17,r4
 8005f34:	89000015 	stw	r4,0(r17)
 8005f38:	9009883a 	mov	r4,r18
 8005f3c:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8005f40:	80800204 	addi	r2,r16,8
 8005f44:	003f7d06 	br	8005d3c <__alt_data_end+0xfc005d3c>
 8005f48:	00800304 	movi	r2,12
 8005f4c:	90800015 	stw	r2,0(r18)
 8005f50:	0005883a 	mov	r2,zero
 8005f54:	003f7906 	br	8005d3c <__alt_data_end+0xfc005d3c>
 8005f58:	01401f84 	movi	r5,126
 8005f5c:	01c00fc4 	movi	r7,63
 8005f60:	003f8d06 	br	8005d98 <__alt_data_end+0xfc005d98>
 8005f64:	81000317 	ldw	r4,12(r16)
 8005f68:	003f6a06 	br	8005d14 <__alt_data_end+0xfc005d14>
 8005f6c:	81c5883a 	add	r2,r16,r7
 8005f70:	10c00117 	ldw	r3,4(r2)
 8005f74:	9009883a 	mov	r4,r18
 8005f78:	18c00054 	ori	r3,r3,1
 8005f7c:	10c00115 	stw	r3,4(r2)
 8005f80:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8005f84:	80800204 	addi	r2,r16,8
 8005f88:	003f6c06 	br	8005d3c <__alt_data_end+0xfc005d3c>
 8005f8c:	9c000217 	ldw	r16,8(r19)
 8005f90:	00bfff04 	movi	r2,-4
 8005f94:	85800117 	ldw	r22,4(r16)
 8005f98:	b0ac703a 	and	r22,r22,r2
 8005f9c:	b4400336 	bltu	r22,r17,8005fac <_malloc_r+0x324>
 8005fa0:	b445c83a 	sub	r2,r22,r17
 8005fa4:	00c003c4 	movi	r3,15
 8005fa8:	18805d16 	blt	r3,r2,8006120 <_malloc_r+0x498>
 8005fac:	05c20074 	movhi	r23,2049
 8005fb0:	00820074 	movhi	r2,2049
 8005fb4:	bdc8a804 	addi	r23,r23,8864
 8005fb8:	108f8304 	addi	r2,r2,15884
 8005fbc:	15400017 	ldw	r21,0(r2)
 8005fc0:	b9000017 	ldw	r4,0(r23)
 8005fc4:	00ffffc4 	movi	r3,-1
 8005fc8:	858d883a 	add	r6,r16,r22
 8005fcc:	8d6b883a 	add	r21,r17,r21
 8005fd0:	20c0e426 	beq	r4,r3,8006364 <_malloc_r+0x6dc>
 8005fd4:	ad4403c4 	addi	r21,r21,4111
 8005fd8:	00fc0004 	movi	r3,-4096
 8005fdc:	a8ea703a 	and	r21,r21,r3
 8005fe0:	9009883a 	mov	r4,r18
 8005fe4:	a80b883a 	mov	r5,r21
 8005fe8:	d9800015 	stw	r6,0(sp)
 8005fec:	8007f2c0 	call	8007f2c <_sbrk_r>
 8005ff0:	00ffffc4 	movi	r3,-1
 8005ff4:	1029883a 	mov	r20,r2
 8005ff8:	d9800017 	ldw	r6,0(sp)
 8005ffc:	10c0a426 	beq	r2,r3,8006290 <_malloc_r+0x608>
 8006000:	1180a236 	bltu	r2,r6,800628c <_malloc_r+0x604>
 8006004:	07020074 	movhi	fp,2049
 8006008:	e70f8b04 	addi	fp,fp,15916
 800600c:	e0c00017 	ldw	r3,0(fp)
 8006010:	a8c7883a 	add	r3,r21,r3
 8006014:	e0c00015 	stw	r3,0(fp)
 8006018:	3500da26 	beq	r6,r20,8006384 <_malloc_r+0x6fc>
 800601c:	b9000017 	ldw	r4,0(r23)
 8006020:	00bfffc4 	movi	r2,-1
 8006024:	2080e426 	beq	r4,r2,80063b8 <_malloc_r+0x730>
 8006028:	a185c83a 	sub	r2,r20,r6
 800602c:	1885883a 	add	r2,r3,r2
 8006030:	e0800015 	stw	r2,0(fp)
 8006034:	a0c001cc 	andi	r3,r20,7
 8006038:	1800b526 	beq	r3,zero,8006310 <_malloc_r+0x688>
 800603c:	a0e9c83a 	sub	r20,r20,r3
 8006040:	00840204 	movi	r2,4104
 8006044:	a5000204 	addi	r20,r20,8
 8006048:	10c7c83a 	sub	r3,r2,r3
 800604c:	a545883a 	add	r2,r20,r21
 8006050:	1083ffcc 	andi	r2,r2,4095
 8006054:	18abc83a 	sub	r21,r3,r2
 8006058:	9009883a 	mov	r4,r18
 800605c:	a80b883a 	mov	r5,r21
 8006060:	8007f2c0 	call	8007f2c <_sbrk_r>
 8006064:	00ffffc4 	movi	r3,-1
 8006068:	10c0d026 	beq	r2,r3,80063ac <_malloc_r+0x724>
 800606c:	1507c83a 	sub	r3,r2,r20
 8006070:	a8c7883a 	add	r3,r21,r3
 8006074:	18c00054 	ori	r3,r3,1
 8006078:	e0800017 	ldw	r2,0(fp)
 800607c:	9d000215 	stw	r20,8(r19)
 8006080:	a0c00115 	stw	r3,4(r20)
 8006084:	a887883a 	add	r3,r21,r2
 8006088:	e0c00015 	stw	r3,0(fp)
 800608c:	84c00e26 	beq	r16,r19,80060c8 <_malloc_r+0x440>
 8006090:	018003c4 	movi	r6,15
 8006094:	3580a02e 	bgeu	r6,r22,8006318 <_malloc_r+0x690>
 8006098:	81400117 	ldw	r5,4(r16)
 800609c:	013ffe04 	movi	r4,-8
 80060a0:	b0bffd04 	addi	r2,r22,-12
 80060a4:	1104703a 	and	r2,r2,r4
 80060a8:	2900004c 	andi	r4,r5,1
 80060ac:	1108b03a 	or	r4,r2,r4
 80060b0:	81000115 	stw	r4,4(r16)
 80060b4:	01400144 	movi	r5,5
 80060b8:	8089883a 	add	r4,r16,r2
 80060bc:	21400115 	stw	r5,4(r4)
 80060c0:	21400215 	stw	r5,8(r4)
 80060c4:	3080c036 	bltu	r6,r2,80063c8 <_malloc_r+0x740>
 80060c8:	00820074 	movhi	r2,2049
 80060cc:	108f8204 	addi	r2,r2,15880
 80060d0:	11000017 	ldw	r4,0(r2)
 80060d4:	20c0012e 	bgeu	r4,r3,80060dc <_malloc_r+0x454>
 80060d8:	10c00015 	stw	r3,0(r2)
 80060dc:	00820074 	movhi	r2,2049
 80060e0:	108f8104 	addi	r2,r2,15876
 80060e4:	11000017 	ldw	r4,0(r2)
 80060e8:	9c000217 	ldw	r16,8(r19)
 80060ec:	20c0012e 	bgeu	r4,r3,80060f4 <_malloc_r+0x46c>
 80060f0:	10c00015 	stw	r3,0(r2)
 80060f4:	80c00117 	ldw	r3,4(r16)
 80060f8:	00bfff04 	movi	r2,-4
 80060fc:	1886703a 	and	r3,r3,r2
 8006100:	1c45c83a 	sub	r2,r3,r17
 8006104:	1c400236 	bltu	r3,r17,8006110 <_malloc_r+0x488>
 8006108:	00c003c4 	movi	r3,15
 800610c:	18800416 	blt	r3,r2,8006120 <_malloc_r+0x498>
 8006110:	9009883a 	mov	r4,r18
 8006114:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8006118:	0005883a 	mov	r2,zero
 800611c:	003f0706 	br	8005d3c <__alt_data_end+0xfc005d3c>
 8006120:	88c00054 	ori	r3,r17,1
 8006124:	80c00115 	stw	r3,4(r16)
 8006128:	8463883a 	add	r17,r16,r17
 800612c:	10800054 	ori	r2,r2,1
 8006130:	9c400215 	stw	r17,8(r19)
 8006134:	88800115 	stw	r2,4(r17)
 8006138:	9009883a 	mov	r4,r18
 800613c:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8006140:	80800204 	addi	r2,r16,8
 8006144:	003efd06 	br	8005d3c <__alt_data_end+0xfc005d3c>
 8006148:	00800504 	movi	r2,20
 800614c:	10c0482e 	bgeu	r2,r3,8006270 <_malloc_r+0x5e8>
 8006150:	00801504 	movi	r2,84
 8006154:	10c06836 	bltu	r2,r3,80062f8 <_malloc_r+0x670>
 8006158:	8806d33a 	srli	r3,r17,12
 800615c:	19c01b84 	addi	r7,r3,110
 8006160:	39cb883a 	add	r5,r7,r7
 8006164:	003f0c06 	br	8005d98 <__alt_data_end+0xfc005d98>
 8006168:	3804d27a 	srli	r2,r7,9
 800616c:	01000104 	movi	r4,4
 8006170:	2080422e 	bgeu	r4,r2,800627c <_malloc_r+0x5f4>
 8006174:	01000504 	movi	r4,20
 8006178:	20807c36 	bltu	r4,r2,800636c <_malloc_r+0x6e4>
 800617c:	110016c4 	addi	r4,r2,91
 8006180:	210b883a 	add	r5,r4,r4
 8006184:	294b883a 	add	r5,r5,r5
 8006188:	294b883a 	add	r5,r5,r5
 800618c:	994b883a 	add	r5,r19,r5
 8006190:	28800217 	ldw	r2,8(r5)
 8006194:	02020074 	movhi	r8,2049
 8006198:	42031604 	addi	r8,r8,3160
 800619c:	11406326 	beq	r2,r5,800632c <_malloc_r+0x6a4>
 80061a0:	01bfff04 	movi	r6,-4
 80061a4:	11000117 	ldw	r4,4(r2)
 80061a8:	2188703a 	and	r4,r4,r6
 80061ac:	3900022e 	bgeu	r7,r4,80061b8 <_malloc_r+0x530>
 80061b0:	10800217 	ldw	r2,8(r2)
 80061b4:	28bffb1e 	bne	r5,r2,80061a4 <__alt_data_end+0xfc0061a4>
 80061b8:	11800317 	ldw	r6,12(r2)
 80061bc:	99000117 	ldw	r4,4(r19)
 80061c0:	81800315 	stw	r6,12(r16)
 80061c4:	80800215 	stw	r2,8(r16)
 80061c8:	34000215 	stw	r16,8(r6)
 80061cc:	14000315 	stw	r16,12(r2)
 80061d0:	003f2706 	br	8005e70 <__alt_data_end+0xfc005e70>
 80061d4:	88c00054 	ori	r3,r17,1
 80061d8:	80c00115 	stw	r3,4(r16)
 80061dc:	8463883a 	add	r17,r16,r17
 80061e0:	34400515 	stw	r17,20(r6)
 80061e4:	34400415 	stw	r17,16(r6)
 80061e8:	10c00054 	ori	r3,r2,1
 80061ec:	8a400315 	stw	r9,12(r17)
 80061f0:	8a400215 	stw	r9,8(r17)
 80061f4:	88c00115 	stw	r3,4(r17)
 80061f8:	88a3883a 	add	r17,r17,r2
 80061fc:	88800015 	stw	r2,0(r17)
 8006200:	9009883a 	mov	r4,r18
 8006204:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8006208:	80800204 	addi	r2,r16,8
 800620c:	003ecb06 	br	8005d3c <__alt_data_end+0xfc005d3c>
 8006210:	31000117 	ldw	r4,4(r6)
 8006214:	003f1606 	br	8005e70 <__alt_data_end+0xfc005e70>
 8006218:	63000044 	addi	r12,r12,1
 800621c:	608000cc 	andi	r2,r12,3
 8006220:	5ac00204 	addi	r11,r11,8
 8006224:	103f2a1e 	bne	r2,zero,8005ed0 <__alt_data_end+0xfc005ed0>
 8006228:	00002106 	br	80062b0 <_malloc_r+0x628>
 800622c:	80800204 	addi	r2,r16,8
 8006230:	84000517 	ldw	r16,20(r16)
 8006234:	143eb31e 	bne	r2,r16,8005d04 <__alt_data_end+0xfc005d04>
 8006238:	18c00084 	addi	r3,r3,2
 800623c:	003eec06 	br	8005df0 <__alt_data_end+0xfc005df0>
 8006240:	8085883a 	add	r2,r16,r2
 8006244:	10c00117 	ldw	r3,4(r2)
 8006248:	81000317 	ldw	r4,12(r16)
 800624c:	81400217 	ldw	r5,8(r16)
 8006250:	18c00054 	ori	r3,r3,1
 8006254:	10c00115 	stw	r3,4(r2)
 8006258:	29000315 	stw	r4,12(r5)
 800625c:	21400215 	stw	r5,8(r4)
 8006260:	9009883a 	mov	r4,r18
 8006264:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8006268:	80800204 	addi	r2,r16,8
 800626c:	003eb306 	br	8005d3c <__alt_data_end+0xfc005d3c>
 8006270:	19c016c4 	addi	r7,r3,91
 8006274:	39cb883a 	add	r5,r7,r7
 8006278:	003ec706 	br	8005d98 <__alt_data_end+0xfc005d98>
 800627c:	3804d1ba 	srli	r2,r7,6
 8006280:	11000e04 	addi	r4,r2,56
 8006284:	210b883a 	add	r5,r4,r4
 8006288:	003fbe06 	br	8006184 <__alt_data_end+0xfc006184>
 800628c:	84ff5d26 	beq	r16,r19,8006004 <__alt_data_end+0xfc006004>
 8006290:	9c000217 	ldw	r16,8(r19)
 8006294:	00bfff04 	movi	r2,-4
 8006298:	80c00117 	ldw	r3,4(r16)
 800629c:	1886703a 	and	r3,r3,r2
 80062a0:	003f9706 	br	8006100 <__alt_data_end+0xfc006100>
 80062a4:	52800017 	ldw	r10,0(r10)
 80062a8:	18ffffc4 	addi	r3,r3,-1
 80062ac:	50805c1e 	bne	r10,r2,8006420 <_malloc_r+0x798>
 80062b0:	190000cc 	andi	r4,r3,3
 80062b4:	50bffe04 	addi	r2,r10,-8
 80062b8:	203ffa1e 	bne	r4,zero,80062a4 <__alt_data_end+0xfc0062a4>
 80062bc:	98800117 	ldw	r2,4(r19)
 80062c0:	0146303a 	nor	r3,zero,r5
 80062c4:	1884703a 	and	r2,r3,r2
 80062c8:	98800115 	stw	r2,4(r19)
 80062cc:	294b883a 	add	r5,r5,r5
 80062d0:	117f2e36 	bltu	r2,r5,8005f8c <__alt_data_end+0xfc005f8c>
 80062d4:	283f2d26 	beq	r5,zero,8005f8c <__alt_data_end+0xfc005f8c>
 80062d8:	1146703a 	and	r3,r2,r5
 80062dc:	1800521e 	bne	r3,zero,8006428 <_malloc_r+0x7a0>
 80062e0:	6007883a 	mov	r3,r12
 80062e4:	294b883a 	add	r5,r5,r5
 80062e8:	1148703a 	and	r4,r2,r5
 80062ec:	18c00104 	addi	r3,r3,4
 80062f0:	203ffc26 	beq	r4,zero,80062e4 <__alt_data_end+0xfc0062e4>
 80062f4:	003ef006 	br	8005eb8 <__alt_data_end+0xfc005eb8>
 80062f8:	00805504 	movi	r2,340
 80062fc:	10c01336 	bltu	r2,r3,800634c <_malloc_r+0x6c4>
 8006300:	8806d3fa 	srli	r3,r17,15
 8006304:	19c01dc4 	addi	r7,r3,119
 8006308:	39cb883a 	add	r5,r7,r7
 800630c:	003ea206 	br	8005d98 <__alt_data_end+0xfc005d98>
 8006310:	00c40004 	movi	r3,4096
 8006314:	003f4d06 	br	800604c <__alt_data_end+0xfc00604c>
 8006318:	00800044 	movi	r2,1
 800631c:	a0800115 	stw	r2,4(r20)
 8006320:	a021883a 	mov	r16,r20
 8006324:	0007883a 	mov	r3,zero
 8006328:	003f7506 	br	8006100 <__alt_data_end+0xfc006100>
 800632c:	200bd0ba 	srai	r5,r4,2
 8006330:	01800044 	movi	r6,1
 8006334:	41000117 	ldw	r4,4(r8)
 8006338:	314a983a 	sll	r5,r6,r5
 800633c:	100d883a 	mov	r6,r2
 8006340:	2908b03a 	or	r4,r5,r4
 8006344:	41000115 	stw	r4,4(r8)
 8006348:	003f9d06 	br	80061c0 <__alt_data_end+0xfc0061c0>
 800634c:	00815504 	movi	r2,1364
 8006350:	10c01336 	bltu	r2,r3,80063a0 <_malloc_r+0x718>
 8006354:	8806d4ba 	srli	r3,r17,18
 8006358:	19c01f04 	addi	r7,r3,124
 800635c:	39cb883a 	add	r5,r7,r7
 8006360:	003e8d06 	br	8005d98 <__alt_data_end+0xfc005d98>
 8006364:	ad400404 	addi	r21,r21,16
 8006368:	003f1d06 	br	8005fe0 <__alt_data_end+0xfc005fe0>
 800636c:	01001504 	movi	r4,84
 8006370:	20801c36 	bltu	r4,r2,80063e4 <_malloc_r+0x75c>
 8006374:	3804d33a 	srli	r2,r7,12
 8006378:	11001b84 	addi	r4,r2,110
 800637c:	210b883a 	add	r5,r4,r4
 8006380:	003f8006 	br	8006184 <__alt_data_end+0xfc006184>
 8006384:	3083ffcc 	andi	r2,r6,4095
 8006388:	103f241e 	bne	r2,zero,800601c <__alt_data_end+0xfc00601c>
 800638c:	99000217 	ldw	r4,8(r19)
 8006390:	ad85883a 	add	r2,r21,r22
 8006394:	10800054 	ori	r2,r2,1
 8006398:	20800115 	stw	r2,4(r4)
 800639c:	003f4a06 	br	80060c8 <__alt_data_end+0xfc0060c8>
 80063a0:	01403f04 	movi	r5,252
 80063a4:	01c01f84 	movi	r7,126
 80063a8:	003e7b06 	br	8005d98 <__alt_data_end+0xfc005d98>
 80063ac:	00c00044 	movi	r3,1
 80063b0:	002b883a 	mov	r21,zero
 80063b4:	003f3006 	br	8006078 <__alt_data_end+0xfc006078>
 80063b8:	00820074 	movhi	r2,2049
 80063bc:	1088a804 	addi	r2,r2,8864
 80063c0:	15000015 	stw	r20,0(r2)
 80063c4:	003f1b06 	br	8006034 <__alt_data_end+0xfc006034>
 80063c8:	9009883a 	mov	r4,r18
 80063cc:	81400204 	addi	r5,r16,8
 80063d0:	80050ec0 	call	80050ec <_free_r>
 80063d4:	00820074 	movhi	r2,2049
 80063d8:	108f8b04 	addi	r2,r2,15916
 80063dc:	10c00017 	ldw	r3,0(r2)
 80063e0:	003f3906 	br	80060c8 <__alt_data_end+0xfc0060c8>
 80063e4:	01005504 	movi	r4,340
 80063e8:	20800436 	bltu	r4,r2,80063fc <_malloc_r+0x774>
 80063ec:	3804d3fa 	srli	r2,r7,15
 80063f0:	11001dc4 	addi	r4,r2,119
 80063f4:	210b883a 	add	r5,r4,r4
 80063f8:	003f6206 	br	8006184 <__alt_data_end+0xfc006184>
 80063fc:	01015504 	movi	r4,1364
 8006400:	20800436 	bltu	r4,r2,8006414 <_malloc_r+0x78c>
 8006404:	3804d4ba 	srli	r2,r7,18
 8006408:	11001f04 	addi	r4,r2,124
 800640c:	210b883a 	add	r5,r4,r4
 8006410:	003f5c06 	br	8006184 <__alt_data_end+0xfc006184>
 8006414:	01403f04 	movi	r5,252
 8006418:	01001f84 	movi	r4,126
 800641c:	003f5906 	br	8006184 <__alt_data_end+0xfc006184>
 8006420:	98800117 	ldw	r2,4(r19)
 8006424:	003fa906 	br	80062cc <__alt_data_end+0xfc0062cc>
 8006428:	6007883a 	mov	r3,r12
 800642c:	003ea206 	br	8005eb8 <__alt_data_end+0xfc005eb8>

08006430 <memchr>:
 8006430:	208000cc 	andi	r2,r4,3
 8006434:	280f883a 	mov	r7,r5
 8006438:	10003526 	beq	r2,zero,8006510 <memchr+0xe0>
 800643c:	30bfffc4 	addi	r2,r6,-1
 8006440:	30001b26 	beq	r6,zero,80064b0 <memchr+0x80>
 8006444:	21800003 	ldbu	r6,0(r4)
 8006448:	28c03fcc 	andi	r3,r5,255
 800644c:	30c01a26 	beq	r6,r3,80064b8 <memchr+0x88>
 8006450:	180d883a 	mov	r6,r3
 8006454:	00000406 	br	8006468 <memchr+0x38>
 8006458:	10001526 	beq	r2,zero,80064b0 <memchr+0x80>
 800645c:	20c00003 	ldbu	r3,0(r4)
 8006460:	10bfffc4 	addi	r2,r2,-1
 8006464:	19801426 	beq	r3,r6,80064b8 <memchr+0x88>
 8006468:	21000044 	addi	r4,r4,1
 800646c:	20c000cc 	andi	r3,r4,3
 8006470:	183ff91e 	bne	r3,zero,8006458 <__alt_data_end+0xfc006458>
 8006474:	024000c4 	movi	r9,3
 8006478:	48801136 	bltu	r9,r2,80064c0 <memchr+0x90>
 800647c:	10000c26 	beq	r2,zero,80064b0 <memchr+0x80>
 8006480:	20c00003 	ldbu	r3,0(r4)
 8006484:	29403fcc 	andi	r5,r5,255
 8006488:	19400b26 	beq	r3,r5,80064b8 <memchr+0x88>
 800648c:	20c00044 	addi	r3,r4,1
 8006490:	2085883a 	add	r2,r4,r2
 8006494:	39803fcc 	andi	r6,r7,255
 8006498:	00000306 	br	80064a8 <memchr+0x78>
 800649c:	18c00044 	addi	r3,r3,1
 80064a0:	197fffc3 	ldbu	r5,-1(r3)
 80064a4:	29800426 	beq	r5,r6,80064b8 <memchr+0x88>
 80064a8:	1809883a 	mov	r4,r3
 80064ac:	18bffb1e 	bne	r3,r2,800649c <__alt_data_end+0xfc00649c>
 80064b0:	0005883a 	mov	r2,zero
 80064b4:	f800283a 	ret
 80064b8:	2005883a 	mov	r2,r4
 80064bc:	f800283a 	ret
 80064c0:	28c03fcc 	andi	r3,r5,255
 80064c4:	1810923a 	slli	r8,r3,8
 80064c8:	02ffbff4 	movhi	r11,65279
 80064cc:	02a02074 	movhi	r10,32897
 80064d0:	40c6b03a 	or	r3,r8,r3
 80064d4:	1810943a 	slli	r8,r3,16
 80064d8:	5affbfc4 	addi	r11,r11,-257
 80064dc:	52a02004 	addi	r10,r10,-32640
 80064e0:	40d0b03a 	or	r8,r8,r3
 80064e4:	20c00017 	ldw	r3,0(r4)
 80064e8:	40c6f03a 	xor	r3,r8,r3
 80064ec:	1acd883a 	add	r6,r3,r11
 80064f0:	00c6303a 	nor	r3,zero,r3
 80064f4:	30c6703a 	and	r3,r6,r3
 80064f8:	1a86703a 	and	r3,r3,r10
 80064fc:	183fdf1e 	bne	r3,zero,800647c <__alt_data_end+0xfc00647c>
 8006500:	10bfff04 	addi	r2,r2,-4
 8006504:	21000104 	addi	r4,r4,4
 8006508:	48bff636 	bltu	r9,r2,80064e4 <__alt_data_end+0xfc0064e4>
 800650c:	003fdb06 	br	800647c <__alt_data_end+0xfc00647c>
 8006510:	3005883a 	mov	r2,r6
 8006514:	003fd706 	br	8006474 <__alt_data_end+0xfc006474>

08006518 <memcpy>:
 8006518:	deffff04 	addi	sp,sp,-4
 800651c:	dc000015 	stw	r16,0(sp)
 8006520:	00c003c4 	movi	r3,15
 8006524:	2005883a 	mov	r2,r4
 8006528:	1980432e 	bgeu	r3,r6,8006638 <memcpy+0x120>
 800652c:	2146b03a 	or	r3,r4,r5
 8006530:	18c000cc 	andi	r3,r3,3
 8006534:	1800421e 	bne	r3,zero,8006640 <memcpy+0x128>
 8006538:	343ffc04 	addi	r16,r6,-16
 800653c:	8020d13a 	srli	r16,r16,4
 8006540:	28c00104 	addi	r3,r5,4
 8006544:	23400104 	addi	r13,r4,4
 8006548:	801e913a 	slli	r15,r16,4
 800654c:	2b000204 	addi	r12,r5,8
 8006550:	22c00204 	addi	r11,r4,8
 8006554:	7bc00504 	addi	r15,r15,20
 8006558:	2a800304 	addi	r10,r5,12
 800655c:	22400304 	addi	r9,r4,12
 8006560:	2bdf883a 	add	r15,r5,r15
 8006564:	2811883a 	mov	r8,r5
 8006568:	200f883a 	mov	r7,r4
 800656c:	41000017 	ldw	r4,0(r8)
 8006570:	39c00404 	addi	r7,r7,16
 8006574:	18c00404 	addi	r3,r3,16
 8006578:	393ffc15 	stw	r4,-16(r7)
 800657c:	1bbffc17 	ldw	r14,-16(r3)
 8006580:	6b400404 	addi	r13,r13,16
 8006584:	5ac00404 	addi	r11,r11,16
 8006588:	6bbffc15 	stw	r14,-16(r13)
 800658c:	63800017 	ldw	r14,0(r12)
 8006590:	4a400404 	addi	r9,r9,16
 8006594:	42000404 	addi	r8,r8,16
 8006598:	5bbffc15 	stw	r14,-16(r11)
 800659c:	53800017 	ldw	r14,0(r10)
 80065a0:	63000404 	addi	r12,r12,16
 80065a4:	52800404 	addi	r10,r10,16
 80065a8:	4bbffc15 	stw	r14,-16(r9)
 80065ac:	1bffef1e 	bne	r3,r15,800656c <__alt_data_end+0xfc00656c>
 80065b0:	81c00044 	addi	r7,r16,1
 80065b4:	380e913a 	slli	r7,r7,4
 80065b8:	310003cc 	andi	r4,r6,15
 80065bc:	02c000c4 	movi	r11,3
 80065c0:	11c7883a 	add	r3,r2,r7
 80065c4:	29cb883a 	add	r5,r5,r7
 80065c8:	59001f2e 	bgeu	r11,r4,8006648 <memcpy+0x130>
 80065cc:	1813883a 	mov	r9,r3
 80065d0:	2811883a 	mov	r8,r5
 80065d4:	200f883a 	mov	r7,r4
 80065d8:	42800017 	ldw	r10,0(r8)
 80065dc:	4a400104 	addi	r9,r9,4
 80065e0:	39ffff04 	addi	r7,r7,-4
 80065e4:	4abfff15 	stw	r10,-4(r9)
 80065e8:	42000104 	addi	r8,r8,4
 80065ec:	59fffa36 	bltu	r11,r7,80065d8 <__alt_data_end+0xfc0065d8>
 80065f0:	213fff04 	addi	r4,r4,-4
 80065f4:	2008d0ba 	srli	r4,r4,2
 80065f8:	318000cc 	andi	r6,r6,3
 80065fc:	21000044 	addi	r4,r4,1
 8006600:	2109883a 	add	r4,r4,r4
 8006604:	2109883a 	add	r4,r4,r4
 8006608:	1907883a 	add	r3,r3,r4
 800660c:	290b883a 	add	r5,r5,r4
 8006610:	30000626 	beq	r6,zero,800662c <memcpy+0x114>
 8006614:	198d883a 	add	r6,r3,r6
 8006618:	29c00003 	ldbu	r7,0(r5)
 800661c:	18c00044 	addi	r3,r3,1
 8006620:	29400044 	addi	r5,r5,1
 8006624:	19ffffc5 	stb	r7,-1(r3)
 8006628:	19bffb1e 	bne	r3,r6,8006618 <__alt_data_end+0xfc006618>
 800662c:	dc000017 	ldw	r16,0(sp)
 8006630:	dec00104 	addi	sp,sp,4
 8006634:	f800283a 	ret
 8006638:	2007883a 	mov	r3,r4
 800663c:	003ff406 	br	8006610 <__alt_data_end+0xfc006610>
 8006640:	2007883a 	mov	r3,r4
 8006644:	003ff306 	br	8006614 <__alt_data_end+0xfc006614>
 8006648:	200d883a 	mov	r6,r4
 800664c:	003ff006 	br	8006610 <__alt_data_end+0xfc006610>

08006650 <memmove>:
 8006650:	2005883a 	mov	r2,r4
 8006654:	29000b2e 	bgeu	r5,r4,8006684 <memmove+0x34>
 8006658:	298f883a 	add	r7,r5,r6
 800665c:	21c0092e 	bgeu	r4,r7,8006684 <memmove+0x34>
 8006660:	2187883a 	add	r3,r4,r6
 8006664:	198bc83a 	sub	r5,r3,r6
 8006668:	30004b26 	beq	r6,zero,8006798 <memmove+0x148>
 800666c:	39ffffc4 	addi	r7,r7,-1
 8006670:	39000003 	ldbu	r4,0(r7)
 8006674:	18ffffc4 	addi	r3,r3,-1
 8006678:	19000005 	stb	r4,0(r3)
 800667c:	197ffb1e 	bne	r3,r5,800666c <__alt_data_end+0xfc00666c>
 8006680:	f800283a 	ret
 8006684:	00c003c4 	movi	r3,15
 8006688:	1980412e 	bgeu	r3,r6,8006790 <memmove+0x140>
 800668c:	1146b03a 	or	r3,r2,r5
 8006690:	18c000cc 	andi	r3,r3,3
 8006694:	1800411e 	bne	r3,zero,800679c <memmove+0x14c>
 8006698:	33fffc04 	addi	r15,r6,-16
 800669c:	781ed13a 	srli	r15,r15,4
 80066a0:	28c00104 	addi	r3,r5,4
 80066a4:	13400104 	addi	r13,r2,4
 80066a8:	781c913a 	slli	r14,r15,4
 80066ac:	2b000204 	addi	r12,r5,8
 80066b0:	12c00204 	addi	r11,r2,8
 80066b4:	73800504 	addi	r14,r14,20
 80066b8:	2a800304 	addi	r10,r5,12
 80066bc:	12400304 	addi	r9,r2,12
 80066c0:	2b9d883a 	add	r14,r5,r14
 80066c4:	2811883a 	mov	r8,r5
 80066c8:	100f883a 	mov	r7,r2
 80066cc:	41000017 	ldw	r4,0(r8)
 80066d0:	39c00404 	addi	r7,r7,16
 80066d4:	18c00404 	addi	r3,r3,16
 80066d8:	393ffc15 	stw	r4,-16(r7)
 80066dc:	193ffc17 	ldw	r4,-16(r3)
 80066e0:	6b400404 	addi	r13,r13,16
 80066e4:	5ac00404 	addi	r11,r11,16
 80066e8:	693ffc15 	stw	r4,-16(r13)
 80066ec:	61000017 	ldw	r4,0(r12)
 80066f0:	4a400404 	addi	r9,r9,16
 80066f4:	42000404 	addi	r8,r8,16
 80066f8:	593ffc15 	stw	r4,-16(r11)
 80066fc:	51000017 	ldw	r4,0(r10)
 8006700:	63000404 	addi	r12,r12,16
 8006704:	52800404 	addi	r10,r10,16
 8006708:	493ffc15 	stw	r4,-16(r9)
 800670c:	1bbfef1e 	bne	r3,r14,80066cc <__alt_data_end+0xfc0066cc>
 8006710:	79000044 	addi	r4,r15,1
 8006714:	2008913a 	slli	r4,r4,4
 8006718:	328003cc 	andi	r10,r6,15
 800671c:	02c000c4 	movi	r11,3
 8006720:	1107883a 	add	r3,r2,r4
 8006724:	290b883a 	add	r5,r5,r4
 8006728:	5a801e2e 	bgeu	r11,r10,80067a4 <memmove+0x154>
 800672c:	1813883a 	mov	r9,r3
 8006730:	2811883a 	mov	r8,r5
 8006734:	500f883a 	mov	r7,r10
 8006738:	41000017 	ldw	r4,0(r8)
 800673c:	4a400104 	addi	r9,r9,4
 8006740:	39ffff04 	addi	r7,r7,-4
 8006744:	493fff15 	stw	r4,-4(r9)
 8006748:	42000104 	addi	r8,r8,4
 800674c:	59fffa36 	bltu	r11,r7,8006738 <__alt_data_end+0xfc006738>
 8006750:	513fff04 	addi	r4,r10,-4
 8006754:	2008d0ba 	srli	r4,r4,2
 8006758:	318000cc 	andi	r6,r6,3
 800675c:	21000044 	addi	r4,r4,1
 8006760:	2109883a 	add	r4,r4,r4
 8006764:	2109883a 	add	r4,r4,r4
 8006768:	1907883a 	add	r3,r3,r4
 800676c:	290b883a 	add	r5,r5,r4
 8006770:	30000926 	beq	r6,zero,8006798 <memmove+0x148>
 8006774:	198d883a 	add	r6,r3,r6
 8006778:	29c00003 	ldbu	r7,0(r5)
 800677c:	18c00044 	addi	r3,r3,1
 8006780:	29400044 	addi	r5,r5,1
 8006784:	19ffffc5 	stb	r7,-1(r3)
 8006788:	19bffb1e 	bne	r3,r6,8006778 <__alt_data_end+0xfc006778>
 800678c:	f800283a 	ret
 8006790:	1007883a 	mov	r3,r2
 8006794:	003ff606 	br	8006770 <__alt_data_end+0xfc006770>
 8006798:	f800283a 	ret
 800679c:	1007883a 	mov	r3,r2
 80067a0:	003ff406 	br	8006774 <__alt_data_end+0xfc006774>
 80067a4:	500d883a 	mov	r6,r10
 80067a8:	003ff106 	br	8006770 <__alt_data_end+0xfc006770>

080067ac <memset>:
 80067ac:	20c000cc 	andi	r3,r4,3
 80067b0:	2005883a 	mov	r2,r4
 80067b4:	18004326 	beq	r3,zero,80068c4 <memset+0x118>
 80067b8:	31ffffc4 	addi	r7,r6,-1
 80067bc:	30004026 	beq	r6,zero,80068c0 <memset+0x114>
 80067c0:	2813883a 	mov	r9,r5
 80067c4:	200d883a 	mov	r6,r4
 80067c8:	2007883a 	mov	r3,r4
 80067cc:	00000406 	br	80067e0 <memset+0x34>
 80067d0:	3a3fffc4 	addi	r8,r7,-1
 80067d4:	31800044 	addi	r6,r6,1
 80067d8:	38003926 	beq	r7,zero,80068c0 <memset+0x114>
 80067dc:	400f883a 	mov	r7,r8
 80067e0:	18c00044 	addi	r3,r3,1
 80067e4:	32400005 	stb	r9,0(r6)
 80067e8:	1a0000cc 	andi	r8,r3,3
 80067ec:	403ff81e 	bne	r8,zero,80067d0 <__alt_data_end+0xfc0067d0>
 80067f0:	010000c4 	movi	r4,3
 80067f4:	21c02d2e 	bgeu	r4,r7,80068ac <memset+0x100>
 80067f8:	29803fcc 	andi	r6,r5,255
 80067fc:	3008923a 	slli	r4,r6,8
 8006800:	218cb03a 	or	r6,r4,r6
 8006804:	3008943a 	slli	r4,r6,16
 8006808:	218cb03a 	or	r6,r4,r6
 800680c:	010003c4 	movi	r4,15
 8006810:	21c0182e 	bgeu	r4,r7,8006874 <memset+0xc8>
 8006814:	3b3ffc04 	addi	r12,r7,-16
 8006818:	6018d13a 	srli	r12,r12,4
 800681c:	1a000104 	addi	r8,r3,4
 8006820:	1ac00204 	addi	r11,r3,8
 8006824:	6008913a 	slli	r4,r12,4
 8006828:	1a800304 	addi	r10,r3,12
 800682c:	1813883a 	mov	r9,r3
 8006830:	21000504 	addi	r4,r4,20
 8006834:	1909883a 	add	r4,r3,r4
 8006838:	49800015 	stw	r6,0(r9)
 800683c:	41800015 	stw	r6,0(r8)
 8006840:	59800015 	stw	r6,0(r11)
 8006844:	51800015 	stw	r6,0(r10)
 8006848:	42000404 	addi	r8,r8,16
 800684c:	4a400404 	addi	r9,r9,16
 8006850:	5ac00404 	addi	r11,r11,16
 8006854:	52800404 	addi	r10,r10,16
 8006858:	413ff71e 	bne	r8,r4,8006838 <__alt_data_end+0xfc006838>
 800685c:	63000044 	addi	r12,r12,1
 8006860:	6018913a 	slli	r12,r12,4
 8006864:	39c003cc 	andi	r7,r7,15
 8006868:	010000c4 	movi	r4,3
 800686c:	1b07883a 	add	r3,r3,r12
 8006870:	21c00e2e 	bgeu	r4,r7,80068ac <memset+0x100>
 8006874:	1813883a 	mov	r9,r3
 8006878:	3811883a 	mov	r8,r7
 800687c:	010000c4 	movi	r4,3
 8006880:	49800015 	stw	r6,0(r9)
 8006884:	423fff04 	addi	r8,r8,-4
 8006888:	4a400104 	addi	r9,r9,4
 800688c:	223ffc36 	bltu	r4,r8,8006880 <__alt_data_end+0xfc006880>
 8006890:	393fff04 	addi	r4,r7,-4
 8006894:	2008d0ba 	srli	r4,r4,2
 8006898:	39c000cc 	andi	r7,r7,3
 800689c:	21000044 	addi	r4,r4,1
 80068a0:	2109883a 	add	r4,r4,r4
 80068a4:	2109883a 	add	r4,r4,r4
 80068a8:	1907883a 	add	r3,r3,r4
 80068ac:	38000426 	beq	r7,zero,80068c0 <memset+0x114>
 80068b0:	19cf883a 	add	r7,r3,r7
 80068b4:	19400005 	stb	r5,0(r3)
 80068b8:	18c00044 	addi	r3,r3,1
 80068bc:	19fffd1e 	bne	r3,r7,80068b4 <__alt_data_end+0xfc0068b4>
 80068c0:	f800283a 	ret
 80068c4:	2007883a 	mov	r3,r4
 80068c8:	300f883a 	mov	r7,r6
 80068cc:	003fc806 	br	80067f0 <__alt_data_end+0xfc0067f0>

080068d0 <_Balloc>:
 80068d0:	20801317 	ldw	r2,76(r4)
 80068d4:	defffc04 	addi	sp,sp,-16
 80068d8:	dc400115 	stw	r17,4(sp)
 80068dc:	dc000015 	stw	r16,0(sp)
 80068e0:	dfc00315 	stw	ra,12(sp)
 80068e4:	dc800215 	stw	r18,8(sp)
 80068e8:	2023883a 	mov	r17,r4
 80068ec:	2821883a 	mov	r16,r5
 80068f0:	10000f26 	beq	r2,zero,8006930 <_Balloc+0x60>
 80068f4:	8407883a 	add	r3,r16,r16
 80068f8:	18c7883a 	add	r3,r3,r3
 80068fc:	10c7883a 	add	r3,r2,r3
 8006900:	18800017 	ldw	r2,0(r3)
 8006904:	10001126 	beq	r2,zero,800694c <_Balloc+0x7c>
 8006908:	11000017 	ldw	r4,0(r2)
 800690c:	19000015 	stw	r4,0(r3)
 8006910:	10000415 	stw	zero,16(r2)
 8006914:	10000315 	stw	zero,12(r2)
 8006918:	dfc00317 	ldw	ra,12(sp)
 800691c:	dc800217 	ldw	r18,8(sp)
 8006920:	dc400117 	ldw	r17,4(sp)
 8006924:	dc000017 	ldw	r16,0(sp)
 8006928:	dec00404 	addi	sp,sp,16
 800692c:	f800283a 	ret
 8006930:	01400104 	movi	r5,4
 8006934:	01800844 	movi	r6,33
 8006938:	800976c0 	call	800976c <_calloc_r>
 800693c:	88801315 	stw	r2,76(r17)
 8006940:	103fec1e 	bne	r2,zero,80068f4 <__alt_data_end+0xfc0068f4>
 8006944:	0005883a 	mov	r2,zero
 8006948:	003ff306 	br	8006918 <__alt_data_end+0xfc006918>
 800694c:	01400044 	movi	r5,1
 8006950:	2c24983a 	sll	r18,r5,r16
 8006954:	8809883a 	mov	r4,r17
 8006958:	91800144 	addi	r6,r18,5
 800695c:	318d883a 	add	r6,r6,r6
 8006960:	318d883a 	add	r6,r6,r6
 8006964:	800976c0 	call	800976c <_calloc_r>
 8006968:	103ff626 	beq	r2,zero,8006944 <__alt_data_end+0xfc006944>
 800696c:	14000115 	stw	r16,4(r2)
 8006970:	14800215 	stw	r18,8(r2)
 8006974:	003fe606 	br	8006910 <__alt_data_end+0xfc006910>

08006978 <_Bfree>:
 8006978:	28000826 	beq	r5,zero,800699c <_Bfree+0x24>
 800697c:	28c00117 	ldw	r3,4(r5)
 8006980:	20801317 	ldw	r2,76(r4)
 8006984:	18c7883a 	add	r3,r3,r3
 8006988:	18c7883a 	add	r3,r3,r3
 800698c:	10c5883a 	add	r2,r2,r3
 8006990:	10c00017 	ldw	r3,0(r2)
 8006994:	28c00015 	stw	r3,0(r5)
 8006998:	11400015 	stw	r5,0(r2)
 800699c:	f800283a 	ret

080069a0 <__multadd>:
 80069a0:	defff704 	addi	sp,sp,-36
 80069a4:	dc800215 	stw	r18,8(sp)
 80069a8:	2c800417 	ldw	r18,16(r5)
 80069ac:	ddc00715 	stw	r23,28(sp)
 80069b0:	dd800615 	stw	r22,24(sp)
 80069b4:	dd000415 	stw	r20,16(sp)
 80069b8:	dcc00315 	stw	r19,12(sp)
 80069bc:	dc400115 	stw	r17,4(sp)
 80069c0:	dc000015 	stw	r16,0(sp)
 80069c4:	dfc00815 	stw	ra,32(sp)
 80069c8:	dd400515 	stw	r21,20(sp)
 80069cc:	2827883a 	mov	r19,r5
 80069d0:	2029883a 	mov	r20,r4
 80069d4:	3023883a 	mov	r17,r6
 80069d8:	3821883a 	mov	r16,r7
 80069dc:	2d800504 	addi	r22,r5,20
 80069e0:	002f883a 	mov	r23,zero
 80069e4:	b5400017 	ldw	r21,0(r22)
 80069e8:	880b883a 	mov	r5,r17
 80069ec:	bdc00044 	addi	r23,r23,1
 80069f0:	a93fffcc 	andi	r4,r21,65535
 80069f4:	800ad900 	call	800ad90 <__mulsi3>
 80069f8:	1421883a 	add	r16,r2,r16
 80069fc:	a808d43a 	srli	r4,r21,16
 8006a00:	802ad43a 	srli	r21,r16,16
 8006a04:	880b883a 	mov	r5,r17
 8006a08:	800ad900 	call	800ad90 <__mulsi3>
 8006a0c:	a88f883a 	add	r7,r21,r2
 8006a10:	3804943a 	slli	r2,r7,16
 8006a14:	80ffffcc 	andi	r3,r16,65535
 8006a18:	b5800104 	addi	r22,r22,4
 8006a1c:	10c7883a 	add	r3,r2,r3
 8006a20:	b0ffff15 	stw	r3,-4(r22)
 8006a24:	3820d43a 	srli	r16,r7,16
 8006a28:	bcbfee16 	blt	r23,r18,80069e4 <__alt_data_end+0xfc0069e4>
 8006a2c:	80000926 	beq	r16,zero,8006a54 <__multadd+0xb4>
 8006a30:	98800217 	ldw	r2,8(r19)
 8006a34:	9080130e 	bge	r18,r2,8006a84 <__multadd+0xe4>
 8006a38:	90800144 	addi	r2,r18,5
 8006a3c:	1085883a 	add	r2,r2,r2
 8006a40:	1085883a 	add	r2,r2,r2
 8006a44:	9885883a 	add	r2,r19,r2
 8006a48:	14000015 	stw	r16,0(r2)
 8006a4c:	94800044 	addi	r18,r18,1
 8006a50:	9c800415 	stw	r18,16(r19)
 8006a54:	9805883a 	mov	r2,r19
 8006a58:	dfc00817 	ldw	ra,32(sp)
 8006a5c:	ddc00717 	ldw	r23,28(sp)
 8006a60:	dd800617 	ldw	r22,24(sp)
 8006a64:	dd400517 	ldw	r21,20(sp)
 8006a68:	dd000417 	ldw	r20,16(sp)
 8006a6c:	dcc00317 	ldw	r19,12(sp)
 8006a70:	dc800217 	ldw	r18,8(sp)
 8006a74:	dc400117 	ldw	r17,4(sp)
 8006a78:	dc000017 	ldw	r16,0(sp)
 8006a7c:	dec00904 	addi	sp,sp,36
 8006a80:	f800283a 	ret
 8006a84:	99400117 	ldw	r5,4(r19)
 8006a88:	a009883a 	mov	r4,r20
 8006a8c:	29400044 	addi	r5,r5,1
 8006a90:	80068d00 	call	80068d0 <_Balloc>
 8006a94:	99800417 	ldw	r6,16(r19)
 8006a98:	99400304 	addi	r5,r19,12
 8006a9c:	11000304 	addi	r4,r2,12
 8006aa0:	31800084 	addi	r6,r6,2
 8006aa4:	318d883a 	add	r6,r6,r6
 8006aa8:	318d883a 	add	r6,r6,r6
 8006aac:	1023883a 	mov	r17,r2
 8006ab0:	80065180 	call	8006518 <memcpy>
 8006ab4:	99000117 	ldw	r4,4(r19)
 8006ab8:	a0c01317 	ldw	r3,76(r20)
 8006abc:	2109883a 	add	r4,r4,r4
 8006ac0:	2109883a 	add	r4,r4,r4
 8006ac4:	1907883a 	add	r3,r3,r4
 8006ac8:	18800017 	ldw	r2,0(r3)
 8006acc:	98800015 	stw	r2,0(r19)
 8006ad0:	1cc00015 	stw	r19,0(r3)
 8006ad4:	8827883a 	mov	r19,r17
 8006ad8:	003fd706 	br	8006a38 <__alt_data_end+0xfc006a38>

08006adc <__s2b>:
 8006adc:	defff904 	addi	sp,sp,-28
 8006ae0:	dc400115 	stw	r17,4(sp)
 8006ae4:	dc000015 	stw	r16,0(sp)
 8006ae8:	2023883a 	mov	r17,r4
 8006aec:	2821883a 	mov	r16,r5
 8006af0:	39000204 	addi	r4,r7,8
 8006af4:	01400244 	movi	r5,9
 8006af8:	dcc00315 	stw	r19,12(sp)
 8006afc:	dc800215 	stw	r18,8(sp)
 8006b00:	dfc00615 	stw	ra,24(sp)
 8006b04:	dd400515 	stw	r21,20(sp)
 8006b08:	dd000415 	stw	r20,16(sp)
 8006b0c:	3825883a 	mov	r18,r7
 8006b10:	3027883a 	mov	r19,r6
 8006b14:	800acd00 	call	800acd0 <__divsi3>
 8006b18:	00c00044 	movi	r3,1
 8006b1c:	000b883a 	mov	r5,zero
 8006b20:	1880030e 	bge	r3,r2,8006b30 <__s2b+0x54>
 8006b24:	18c7883a 	add	r3,r3,r3
 8006b28:	29400044 	addi	r5,r5,1
 8006b2c:	18bffd16 	blt	r3,r2,8006b24 <__alt_data_end+0xfc006b24>
 8006b30:	8809883a 	mov	r4,r17
 8006b34:	80068d00 	call	80068d0 <_Balloc>
 8006b38:	d8c00717 	ldw	r3,28(sp)
 8006b3c:	10c00515 	stw	r3,20(r2)
 8006b40:	00c00044 	movi	r3,1
 8006b44:	10c00415 	stw	r3,16(r2)
 8006b48:	00c00244 	movi	r3,9
 8006b4c:	1cc0210e 	bge	r3,r19,8006bd4 <__s2b+0xf8>
 8006b50:	80eb883a 	add	r21,r16,r3
 8006b54:	a829883a 	mov	r20,r21
 8006b58:	84e1883a 	add	r16,r16,r19
 8006b5c:	a1c00007 	ldb	r7,0(r20)
 8006b60:	8809883a 	mov	r4,r17
 8006b64:	a5000044 	addi	r20,r20,1
 8006b68:	100b883a 	mov	r5,r2
 8006b6c:	01800284 	movi	r6,10
 8006b70:	39fff404 	addi	r7,r7,-48
 8006b74:	80069a00 	call	80069a0 <__multadd>
 8006b78:	a43ff81e 	bne	r20,r16,8006b5c <__alt_data_end+0xfc006b5c>
 8006b7c:	ace1883a 	add	r16,r21,r19
 8006b80:	843ffe04 	addi	r16,r16,-8
 8006b84:	9c800a0e 	bge	r19,r18,8006bb0 <__s2b+0xd4>
 8006b88:	94e5c83a 	sub	r18,r18,r19
 8006b8c:	84a5883a 	add	r18,r16,r18
 8006b90:	81c00007 	ldb	r7,0(r16)
 8006b94:	8809883a 	mov	r4,r17
 8006b98:	84000044 	addi	r16,r16,1
 8006b9c:	100b883a 	mov	r5,r2
 8006ba0:	01800284 	movi	r6,10
 8006ba4:	39fff404 	addi	r7,r7,-48
 8006ba8:	80069a00 	call	80069a0 <__multadd>
 8006bac:	84bff81e 	bne	r16,r18,8006b90 <__alt_data_end+0xfc006b90>
 8006bb0:	dfc00617 	ldw	ra,24(sp)
 8006bb4:	dd400517 	ldw	r21,20(sp)
 8006bb8:	dd000417 	ldw	r20,16(sp)
 8006bbc:	dcc00317 	ldw	r19,12(sp)
 8006bc0:	dc800217 	ldw	r18,8(sp)
 8006bc4:	dc400117 	ldw	r17,4(sp)
 8006bc8:	dc000017 	ldw	r16,0(sp)
 8006bcc:	dec00704 	addi	sp,sp,28
 8006bd0:	f800283a 	ret
 8006bd4:	84000284 	addi	r16,r16,10
 8006bd8:	1827883a 	mov	r19,r3
 8006bdc:	003fe906 	br	8006b84 <__alt_data_end+0xfc006b84>

08006be0 <__hi0bits>:
 8006be0:	20bfffec 	andhi	r2,r4,65535
 8006be4:	1000141e 	bne	r2,zero,8006c38 <__hi0bits+0x58>
 8006be8:	2008943a 	slli	r4,r4,16
 8006bec:	00800404 	movi	r2,16
 8006bf0:	20ffc02c 	andhi	r3,r4,65280
 8006bf4:	1800021e 	bne	r3,zero,8006c00 <__hi0bits+0x20>
 8006bf8:	2008923a 	slli	r4,r4,8
 8006bfc:	10800204 	addi	r2,r2,8
 8006c00:	20fc002c 	andhi	r3,r4,61440
 8006c04:	1800021e 	bne	r3,zero,8006c10 <__hi0bits+0x30>
 8006c08:	2008913a 	slli	r4,r4,4
 8006c0c:	10800104 	addi	r2,r2,4
 8006c10:	20f0002c 	andhi	r3,r4,49152
 8006c14:	1800031e 	bne	r3,zero,8006c24 <__hi0bits+0x44>
 8006c18:	2109883a 	add	r4,r4,r4
 8006c1c:	10800084 	addi	r2,r2,2
 8006c20:	2109883a 	add	r4,r4,r4
 8006c24:	20000316 	blt	r4,zero,8006c34 <__hi0bits+0x54>
 8006c28:	2110002c 	andhi	r4,r4,16384
 8006c2c:	2000041e 	bne	r4,zero,8006c40 <__hi0bits+0x60>
 8006c30:	00800804 	movi	r2,32
 8006c34:	f800283a 	ret
 8006c38:	0005883a 	mov	r2,zero
 8006c3c:	003fec06 	br	8006bf0 <__alt_data_end+0xfc006bf0>
 8006c40:	10800044 	addi	r2,r2,1
 8006c44:	f800283a 	ret

08006c48 <__lo0bits>:
 8006c48:	20c00017 	ldw	r3,0(r4)
 8006c4c:	188001cc 	andi	r2,r3,7
 8006c50:	10000826 	beq	r2,zero,8006c74 <__lo0bits+0x2c>
 8006c54:	1880004c 	andi	r2,r3,1
 8006c58:	1000211e 	bne	r2,zero,8006ce0 <__lo0bits+0x98>
 8006c5c:	1880008c 	andi	r2,r3,2
 8006c60:	1000211e 	bne	r2,zero,8006ce8 <__lo0bits+0xa0>
 8006c64:	1806d0ba 	srli	r3,r3,2
 8006c68:	00800084 	movi	r2,2
 8006c6c:	20c00015 	stw	r3,0(r4)
 8006c70:	f800283a 	ret
 8006c74:	18bfffcc 	andi	r2,r3,65535
 8006c78:	10001326 	beq	r2,zero,8006cc8 <__lo0bits+0x80>
 8006c7c:	0005883a 	mov	r2,zero
 8006c80:	19403fcc 	andi	r5,r3,255
 8006c84:	2800021e 	bne	r5,zero,8006c90 <__lo0bits+0x48>
 8006c88:	1806d23a 	srli	r3,r3,8
 8006c8c:	10800204 	addi	r2,r2,8
 8006c90:	194003cc 	andi	r5,r3,15
 8006c94:	2800021e 	bne	r5,zero,8006ca0 <__lo0bits+0x58>
 8006c98:	1806d13a 	srli	r3,r3,4
 8006c9c:	10800104 	addi	r2,r2,4
 8006ca0:	194000cc 	andi	r5,r3,3
 8006ca4:	2800021e 	bne	r5,zero,8006cb0 <__lo0bits+0x68>
 8006ca8:	1806d0ba 	srli	r3,r3,2
 8006cac:	10800084 	addi	r2,r2,2
 8006cb0:	1940004c 	andi	r5,r3,1
 8006cb4:	2800081e 	bne	r5,zero,8006cd8 <__lo0bits+0x90>
 8006cb8:	1806d07a 	srli	r3,r3,1
 8006cbc:	1800051e 	bne	r3,zero,8006cd4 <__lo0bits+0x8c>
 8006cc0:	00800804 	movi	r2,32
 8006cc4:	f800283a 	ret
 8006cc8:	1806d43a 	srli	r3,r3,16
 8006ccc:	00800404 	movi	r2,16
 8006cd0:	003feb06 	br	8006c80 <__alt_data_end+0xfc006c80>
 8006cd4:	10800044 	addi	r2,r2,1
 8006cd8:	20c00015 	stw	r3,0(r4)
 8006cdc:	f800283a 	ret
 8006ce0:	0005883a 	mov	r2,zero
 8006ce4:	f800283a 	ret
 8006ce8:	1806d07a 	srli	r3,r3,1
 8006cec:	00800044 	movi	r2,1
 8006cf0:	20c00015 	stw	r3,0(r4)
 8006cf4:	f800283a 	ret

08006cf8 <__i2b>:
 8006cf8:	defffd04 	addi	sp,sp,-12
 8006cfc:	dc000015 	stw	r16,0(sp)
 8006d00:	04000044 	movi	r16,1
 8006d04:	dc400115 	stw	r17,4(sp)
 8006d08:	2823883a 	mov	r17,r5
 8006d0c:	800b883a 	mov	r5,r16
 8006d10:	dfc00215 	stw	ra,8(sp)
 8006d14:	80068d00 	call	80068d0 <_Balloc>
 8006d18:	14400515 	stw	r17,20(r2)
 8006d1c:	14000415 	stw	r16,16(r2)
 8006d20:	dfc00217 	ldw	ra,8(sp)
 8006d24:	dc400117 	ldw	r17,4(sp)
 8006d28:	dc000017 	ldw	r16,0(sp)
 8006d2c:	dec00304 	addi	sp,sp,12
 8006d30:	f800283a 	ret

08006d34 <__multiply>:
 8006d34:	deffef04 	addi	sp,sp,-68
 8006d38:	dc400815 	stw	r17,32(sp)
 8006d3c:	dc000715 	stw	r16,28(sp)
 8006d40:	2c400417 	ldw	r17,16(r5)
 8006d44:	34000417 	ldw	r16,16(r6)
 8006d48:	dd800d15 	stw	r22,52(sp)
 8006d4c:	dc800915 	stw	r18,36(sp)
 8006d50:	dfc01015 	stw	ra,64(sp)
 8006d54:	df000f15 	stw	fp,60(sp)
 8006d58:	ddc00e15 	stw	r23,56(sp)
 8006d5c:	dd400c15 	stw	r21,48(sp)
 8006d60:	dd000b15 	stw	r20,44(sp)
 8006d64:	dcc00a15 	stw	r19,40(sp)
 8006d68:	2825883a 	mov	r18,r5
 8006d6c:	302d883a 	mov	r22,r6
 8006d70:	8c009116 	blt	r17,r16,8006fb8 <__multiply+0x284>
 8006d74:	8005883a 	mov	r2,r16
 8006d78:	8821883a 	mov	r16,r17
 8006d7c:	1023883a 	mov	r17,r2
 8006d80:	90800217 	ldw	r2,8(r18)
 8006d84:	8447883a 	add	r3,r16,r17
 8006d88:	d8c00215 	stw	r3,8(sp)
 8006d8c:	91400117 	ldw	r5,4(r18)
 8006d90:	10c0010e 	bge	r2,r3,8006d98 <__multiply+0x64>
 8006d94:	29400044 	addi	r5,r5,1
 8006d98:	80068d00 	call	80068d0 <_Balloc>
 8006d9c:	d8c00217 	ldw	r3,8(sp)
 8006da0:	d8800615 	stw	r2,24(sp)
 8006da4:	18eb883a 	add	r21,r3,r3
 8006da8:	ad6b883a 	add	r21,r21,r21
 8006dac:	10c00504 	addi	r3,r2,20
 8006db0:	1d6b883a 	add	r21,r3,r21
 8006db4:	d8c00115 	stw	r3,4(sp)
 8006db8:	dd400315 	stw	r21,12(sp)
 8006dbc:	1805883a 	mov	r2,r3
 8006dc0:	1d40042e 	bgeu	r3,r21,8006dd4 <__multiply+0xa0>
 8006dc4:	d8c00317 	ldw	r3,12(sp)
 8006dc8:	10000015 	stw	zero,0(r2)
 8006dcc:	10800104 	addi	r2,r2,4
 8006dd0:	10fffc36 	bltu	r2,r3,8006dc4 <__alt_data_end+0xfc006dc4>
 8006dd4:	8c63883a 	add	r17,r17,r17
 8006dd8:	b5800504 	addi	r22,r22,20
 8006ddc:	8c63883a 	add	r17,r17,r17
 8006de0:	94800504 	addi	r18,r18,20
 8006de4:	8421883a 	add	r16,r16,r16
 8006de8:	b463883a 	add	r17,r22,r17
 8006dec:	8421883a 	add	r16,r16,r16
 8006df0:	dd800015 	stw	r22,0(sp)
 8006df4:	dc800415 	stw	r18,16(sp)
 8006df8:	dc400515 	stw	r17,20(sp)
 8006dfc:	9429883a 	add	r20,r18,r16
 8006e00:	b4404f2e 	bgeu	r22,r17,8006f40 <__multiply+0x20c>
 8006e04:	d8c00017 	ldw	r3,0(sp)
 8006e08:	1c800017 	ldw	r18,0(r3)
 8006e0c:	943fffcc 	andi	r16,r18,65535
 8006e10:	80001e26 	beq	r16,zero,8006e8c <__multiply+0x158>
 8006e14:	dd800117 	ldw	r22,4(sp)
 8006e18:	dd400417 	ldw	r21,16(sp)
 8006e1c:	0025883a 	mov	r18,zero
 8006e20:	adc00017 	ldw	r23,0(r21)
 8006e24:	b4c00017 	ldw	r19,0(r22)
 8006e28:	800b883a 	mov	r5,r16
 8006e2c:	b93fffcc 	andi	r4,r23,65535
 8006e30:	800ad900 	call	800ad90 <__mulsi3>
 8006e34:	9c7fffcc 	andi	r17,r19,65535
 8006e38:	8885883a 	add	r2,r17,r2
 8006e3c:	b808d43a 	srli	r4,r23,16
 8006e40:	14a3883a 	add	r17,r2,r18
 8006e44:	9826d43a 	srli	r19,r19,16
 8006e48:	8824d43a 	srli	r18,r17,16
 8006e4c:	800b883a 	mov	r5,r16
 8006e50:	800ad900 	call	800ad90 <__mulsi3>
 8006e54:	9885883a 	add	r2,r19,r2
 8006e58:	14a7883a 	add	r19,r2,r18
 8006e5c:	88ffffcc 	andi	r3,r17,65535
 8006e60:	9822943a 	slli	r17,r19,16
 8006e64:	ad400104 	addi	r21,r21,4
 8006e68:	b005883a 	mov	r2,r22
 8006e6c:	88c6b03a 	or	r3,r17,r3
 8006e70:	b0c00015 	stw	r3,0(r22)
 8006e74:	9824d43a 	srli	r18,r19,16
 8006e78:	b5800104 	addi	r22,r22,4
 8006e7c:	ad3fe836 	bltu	r21,r20,8006e20 <__alt_data_end+0xfc006e20>
 8006e80:	d8c00017 	ldw	r3,0(sp)
 8006e84:	14800115 	stw	r18,4(r2)
 8006e88:	1c800017 	ldw	r18,0(r3)
 8006e8c:	9024d43a 	srli	r18,r18,16
 8006e90:	90002226 	beq	r18,zero,8006f1c <__multiply+0x1e8>
 8006e94:	d8c00117 	ldw	r3,4(sp)
 8006e98:	dd800417 	ldw	r22,16(sp)
 8006e9c:	002f883a 	mov	r23,zero
 8006ea0:	1f000017 	ldw	fp,0(r3)
 8006ea4:	1823883a 	mov	r17,r3
 8006ea8:	182b883a 	mov	r21,r3
 8006eac:	e021883a 	mov	r16,fp
 8006eb0:	00000106 	br	8006eb8 <__multiply+0x184>
 8006eb4:	982b883a 	mov	r21,r19
 8006eb8:	b100000b 	ldhu	r4,0(r22)
 8006ebc:	8020d43a 	srli	r16,r16,16
 8006ec0:	900b883a 	mov	r5,r18
 8006ec4:	800ad900 	call	800ad90 <__mulsi3>
 8006ec8:	1405883a 	add	r2,r2,r16
 8006ecc:	15ef883a 	add	r23,r2,r23
 8006ed0:	b804943a 	slli	r2,r23,16
 8006ed4:	e0ffffcc 	andi	r3,fp,65535
 8006ed8:	8c400104 	addi	r17,r17,4
 8006edc:	10c6b03a 	or	r3,r2,r3
 8006ee0:	88ffff15 	stw	r3,-4(r17)
 8006ee4:	b5800104 	addi	r22,r22,4
 8006ee8:	b13fff17 	ldw	r4,-4(r22)
 8006eec:	acc00104 	addi	r19,r21,4
 8006ef0:	900b883a 	mov	r5,r18
 8006ef4:	2008d43a 	srli	r4,r4,16
 8006ef8:	9c000017 	ldw	r16,0(r19)
 8006efc:	800ad900 	call	800ad90 <__mulsi3>
 8006f00:	b806d43a 	srli	r3,r23,16
 8006f04:	813fffcc 	andi	r4,r16,65535
 8006f08:	1105883a 	add	r2,r2,r4
 8006f0c:	10f9883a 	add	fp,r2,r3
 8006f10:	e02ed43a 	srli	r23,fp,16
 8006f14:	b53fe736 	bltu	r22,r20,8006eb4 <__alt_data_end+0xfc006eb4>
 8006f18:	af000115 	stw	fp,4(r21)
 8006f1c:	d8c00017 	ldw	r3,0(sp)
 8006f20:	d9000517 	ldw	r4,20(sp)
 8006f24:	18c00104 	addi	r3,r3,4
 8006f28:	d8c00015 	stw	r3,0(sp)
 8006f2c:	d8c00117 	ldw	r3,4(sp)
 8006f30:	18c00104 	addi	r3,r3,4
 8006f34:	d8c00115 	stw	r3,4(sp)
 8006f38:	d8c00017 	ldw	r3,0(sp)
 8006f3c:	193fb136 	bltu	r3,r4,8006e04 <__alt_data_end+0xfc006e04>
 8006f40:	d8c00217 	ldw	r3,8(sp)
 8006f44:	00c00c0e 	bge	zero,r3,8006f78 <__multiply+0x244>
 8006f48:	d8c00317 	ldw	r3,12(sp)
 8006f4c:	18bfff17 	ldw	r2,-4(r3)
 8006f50:	1d7fff04 	addi	r21,r3,-4
 8006f54:	10000326 	beq	r2,zero,8006f64 <__multiply+0x230>
 8006f58:	00000706 	br	8006f78 <__multiply+0x244>
 8006f5c:	a8800017 	ldw	r2,0(r21)
 8006f60:	1000051e 	bne	r2,zero,8006f78 <__multiply+0x244>
 8006f64:	d8c00217 	ldw	r3,8(sp)
 8006f68:	ad7fff04 	addi	r21,r21,-4
 8006f6c:	18ffffc4 	addi	r3,r3,-1
 8006f70:	d8c00215 	stw	r3,8(sp)
 8006f74:	183ff91e 	bne	r3,zero,8006f5c <__alt_data_end+0xfc006f5c>
 8006f78:	d8c00617 	ldw	r3,24(sp)
 8006f7c:	d9000217 	ldw	r4,8(sp)
 8006f80:	1805883a 	mov	r2,r3
 8006f84:	19000415 	stw	r4,16(r3)
 8006f88:	dfc01017 	ldw	ra,64(sp)
 8006f8c:	df000f17 	ldw	fp,60(sp)
 8006f90:	ddc00e17 	ldw	r23,56(sp)
 8006f94:	dd800d17 	ldw	r22,52(sp)
 8006f98:	dd400c17 	ldw	r21,48(sp)
 8006f9c:	dd000b17 	ldw	r20,44(sp)
 8006fa0:	dcc00a17 	ldw	r19,40(sp)
 8006fa4:	dc800917 	ldw	r18,36(sp)
 8006fa8:	dc400817 	ldw	r17,32(sp)
 8006fac:	dc000717 	ldw	r16,28(sp)
 8006fb0:	dec01104 	addi	sp,sp,68
 8006fb4:	f800283a 	ret
 8006fb8:	3025883a 	mov	r18,r6
 8006fbc:	282d883a 	mov	r22,r5
 8006fc0:	003f6f06 	br	8006d80 <__alt_data_end+0xfc006d80>

08006fc4 <__pow5mult>:
 8006fc4:	defffa04 	addi	sp,sp,-24
 8006fc8:	dcc00315 	stw	r19,12(sp)
 8006fcc:	dc800215 	stw	r18,8(sp)
 8006fd0:	dc000015 	stw	r16,0(sp)
 8006fd4:	dfc00515 	stw	ra,20(sp)
 8006fd8:	dd000415 	stw	r20,16(sp)
 8006fdc:	dc400115 	stw	r17,4(sp)
 8006fe0:	308000cc 	andi	r2,r6,3
 8006fe4:	3021883a 	mov	r16,r6
 8006fe8:	2027883a 	mov	r19,r4
 8006fec:	2825883a 	mov	r18,r5
 8006ff0:	10002e1e 	bne	r2,zero,80070ac <__pow5mult+0xe8>
 8006ff4:	8021d0ba 	srai	r16,r16,2
 8006ff8:	80001a26 	beq	r16,zero,8007064 <__pow5mult+0xa0>
 8006ffc:	9c401217 	ldw	r17,72(r19)
 8007000:	8800061e 	bne	r17,zero,800701c <__pow5mult+0x58>
 8007004:	00003406 	br	80070d8 <__pow5mult+0x114>
 8007008:	8021d07a 	srai	r16,r16,1
 800700c:	80001526 	beq	r16,zero,8007064 <__pow5mult+0xa0>
 8007010:	88800017 	ldw	r2,0(r17)
 8007014:	10001c26 	beq	r2,zero,8007088 <__pow5mult+0xc4>
 8007018:	1023883a 	mov	r17,r2
 800701c:	80c0004c 	andi	r3,r16,1
 8007020:	183ff926 	beq	r3,zero,8007008 <__alt_data_end+0xfc007008>
 8007024:	900b883a 	mov	r5,r18
 8007028:	880d883a 	mov	r6,r17
 800702c:	9809883a 	mov	r4,r19
 8007030:	8006d340 	call	8006d34 <__multiply>
 8007034:	90001b26 	beq	r18,zero,80070a4 <__pow5mult+0xe0>
 8007038:	91c00117 	ldw	r7,4(r18)
 800703c:	98c01317 	ldw	r3,76(r19)
 8007040:	8021d07a 	srai	r16,r16,1
 8007044:	39cf883a 	add	r7,r7,r7
 8007048:	39cf883a 	add	r7,r7,r7
 800704c:	19c7883a 	add	r3,r3,r7
 8007050:	19000017 	ldw	r4,0(r3)
 8007054:	91000015 	stw	r4,0(r18)
 8007058:	1c800015 	stw	r18,0(r3)
 800705c:	1025883a 	mov	r18,r2
 8007060:	803feb1e 	bne	r16,zero,8007010 <__alt_data_end+0xfc007010>
 8007064:	9005883a 	mov	r2,r18
 8007068:	dfc00517 	ldw	ra,20(sp)
 800706c:	dd000417 	ldw	r20,16(sp)
 8007070:	dcc00317 	ldw	r19,12(sp)
 8007074:	dc800217 	ldw	r18,8(sp)
 8007078:	dc400117 	ldw	r17,4(sp)
 800707c:	dc000017 	ldw	r16,0(sp)
 8007080:	dec00604 	addi	sp,sp,24
 8007084:	f800283a 	ret
 8007088:	9809883a 	mov	r4,r19
 800708c:	880b883a 	mov	r5,r17
 8007090:	880d883a 	mov	r6,r17
 8007094:	8006d340 	call	8006d34 <__multiply>
 8007098:	88800015 	stw	r2,0(r17)
 800709c:	10000015 	stw	zero,0(r2)
 80070a0:	003fdd06 	br	8007018 <__alt_data_end+0xfc007018>
 80070a4:	1025883a 	mov	r18,r2
 80070a8:	003fd706 	br	8007008 <__alt_data_end+0xfc007008>
 80070ac:	10bfffc4 	addi	r2,r2,-1
 80070b0:	1085883a 	add	r2,r2,r2
 80070b4:	00c20074 	movhi	r3,2049
 80070b8:	18c14b04 	addi	r3,r3,1324
 80070bc:	1085883a 	add	r2,r2,r2
 80070c0:	1885883a 	add	r2,r3,r2
 80070c4:	11800017 	ldw	r6,0(r2)
 80070c8:	000f883a 	mov	r7,zero
 80070cc:	80069a00 	call	80069a0 <__multadd>
 80070d0:	1025883a 	mov	r18,r2
 80070d4:	003fc706 	br	8006ff4 <__alt_data_end+0xfc006ff4>
 80070d8:	05000044 	movi	r20,1
 80070dc:	9809883a 	mov	r4,r19
 80070e0:	a00b883a 	mov	r5,r20
 80070e4:	80068d00 	call	80068d0 <_Balloc>
 80070e8:	1023883a 	mov	r17,r2
 80070ec:	00809c44 	movi	r2,625
 80070f0:	88800515 	stw	r2,20(r17)
 80070f4:	8d000415 	stw	r20,16(r17)
 80070f8:	9c401215 	stw	r17,72(r19)
 80070fc:	88000015 	stw	zero,0(r17)
 8007100:	003fc606 	br	800701c <__alt_data_end+0xfc00701c>

08007104 <__lshift>:
 8007104:	defff904 	addi	sp,sp,-28
 8007108:	dd000415 	stw	r20,16(sp)
 800710c:	dcc00315 	stw	r19,12(sp)
 8007110:	3029d17a 	srai	r20,r6,5
 8007114:	2cc00417 	ldw	r19,16(r5)
 8007118:	28800217 	ldw	r2,8(r5)
 800711c:	dd400515 	stw	r21,20(sp)
 8007120:	a4e7883a 	add	r19,r20,r19
 8007124:	dc800215 	stw	r18,8(sp)
 8007128:	dc400115 	stw	r17,4(sp)
 800712c:	dc000015 	stw	r16,0(sp)
 8007130:	dfc00615 	stw	ra,24(sp)
 8007134:	9c000044 	addi	r16,r19,1
 8007138:	2823883a 	mov	r17,r5
 800713c:	302b883a 	mov	r21,r6
 8007140:	2025883a 	mov	r18,r4
 8007144:	29400117 	ldw	r5,4(r5)
 8007148:	1400030e 	bge	r2,r16,8007158 <__lshift+0x54>
 800714c:	1085883a 	add	r2,r2,r2
 8007150:	29400044 	addi	r5,r5,1
 8007154:	143ffd16 	blt	r2,r16,800714c <__alt_data_end+0xfc00714c>
 8007158:	9009883a 	mov	r4,r18
 800715c:	80068d00 	call	80068d0 <_Balloc>
 8007160:	11c00504 	addi	r7,r2,20
 8007164:	0500090e 	bge	zero,r20,800718c <__lshift+0x88>
 8007168:	3811883a 	mov	r8,r7
 800716c:	0007883a 	mov	r3,zero
 8007170:	40000015 	stw	zero,0(r8)
 8007174:	18c00044 	addi	r3,r3,1
 8007178:	42000104 	addi	r8,r8,4
 800717c:	1d3ffc1e 	bne	r3,r20,8007170 <__alt_data_end+0xfc007170>
 8007180:	18c7883a 	add	r3,r3,r3
 8007184:	18c7883a 	add	r3,r3,r3
 8007188:	38cf883a 	add	r7,r7,r3
 800718c:	89000417 	ldw	r4,16(r17)
 8007190:	88c00504 	addi	r3,r17,20
 8007194:	a98007cc 	andi	r6,r21,31
 8007198:	2109883a 	add	r4,r4,r4
 800719c:	2109883a 	add	r4,r4,r4
 80071a0:	1909883a 	add	r4,r3,r4
 80071a4:	30002326 	beq	r6,zero,8007234 <__lshift+0x130>
 80071a8:	01400804 	movi	r5,32
 80071ac:	298bc83a 	sub	r5,r5,r6
 80071b0:	0013883a 	mov	r9,zero
 80071b4:	1a000017 	ldw	r8,0(r3)
 80071b8:	3815883a 	mov	r10,r7
 80071bc:	39c00104 	addi	r7,r7,4
 80071c0:	4190983a 	sll	r8,r8,r6
 80071c4:	18c00104 	addi	r3,r3,4
 80071c8:	4a10b03a 	or	r8,r9,r8
 80071cc:	3a3fff15 	stw	r8,-4(r7)
 80071d0:	1a3fff17 	ldw	r8,-4(r3)
 80071d4:	4152d83a 	srl	r9,r8,r5
 80071d8:	193ff636 	bltu	r3,r4,80071b4 <__alt_data_end+0xfc0071b4>
 80071dc:	52400115 	stw	r9,4(r10)
 80071e0:	48000126 	beq	r9,zero,80071e8 <__lshift+0xe4>
 80071e4:	9c000084 	addi	r16,r19,2
 80071e8:	89000117 	ldw	r4,4(r17)
 80071ec:	90c01317 	ldw	r3,76(r18)
 80071f0:	843fffc4 	addi	r16,r16,-1
 80071f4:	2109883a 	add	r4,r4,r4
 80071f8:	2109883a 	add	r4,r4,r4
 80071fc:	1907883a 	add	r3,r3,r4
 8007200:	19000017 	ldw	r4,0(r3)
 8007204:	14000415 	stw	r16,16(r2)
 8007208:	89000015 	stw	r4,0(r17)
 800720c:	1c400015 	stw	r17,0(r3)
 8007210:	dfc00617 	ldw	ra,24(sp)
 8007214:	dd400517 	ldw	r21,20(sp)
 8007218:	dd000417 	ldw	r20,16(sp)
 800721c:	dcc00317 	ldw	r19,12(sp)
 8007220:	dc800217 	ldw	r18,8(sp)
 8007224:	dc400117 	ldw	r17,4(sp)
 8007228:	dc000017 	ldw	r16,0(sp)
 800722c:	dec00704 	addi	sp,sp,28
 8007230:	f800283a 	ret
 8007234:	19400017 	ldw	r5,0(r3)
 8007238:	39c00104 	addi	r7,r7,4
 800723c:	18c00104 	addi	r3,r3,4
 8007240:	397fff15 	stw	r5,-4(r7)
 8007244:	193ffb36 	bltu	r3,r4,8007234 <__alt_data_end+0xfc007234>
 8007248:	003fe706 	br	80071e8 <__alt_data_end+0xfc0071e8>

0800724c <__mcmp>:
 800724c:	20800417 	ldw	r2,16(r4)
 8007250:	28c00417 	ldw	r3,16(r5)
 8007254:	10c5c83a 	sub	r2,r2,r3
 8007258:	1000111e 	bne	r2,zero,80072a0 <__mcmp+0x54>
 800725c:	18c7883a 	add	r3,r3,r3
 8007260:	18c7883a 	add	r3,r3,r3
 8007264:	21000504 	addi	r4,r4,20
 8007268:	29400504 	addi	r5,r5,20
 800726c:	20c5883a 	add	r2,r4,r3
 8007270:	28cb883a 	add	r5,r5,r3
 8007274:	00000106 	br	800727c <__mcmp+0x30>
 8007278:	20800a2e 	bgeu	r4,r2,80072a4 <__mcmp+0x58>
 800727c:	10bfff04 	addi	r2,r2,-4
 8007280:	297fff04 	addi	r5,r5,-4
 8007284:	11800017 	ldw	r6,0(r2)
 8007288:	28c00017 	ldw	r3,0(r5)
 800728c:	30fffa26 	beq	r6,r3,8007278 <__alt_data_end+0xfc007278>
 8007290:	30c00236 	bltu	r6,r3,800729c <__mcmp+0x50>
 8007294:	00800044 	movi	r2,1
 8007298:	f800283a 	ret
 800729c:	00bfffc4 	movi	r2,-1
 80072a0:	f800283a 	ret
 80072a4:	0005883a 	mov	r2,zero
 80072a8:	f800283a 	ret

080072ac <__mdiff>:
 80072ac:	defffb04 	addi	sp,sp,-20
 80072b0:	dc000015 	stw	r16,0(sp)
 80072b4:	2821883a 	mov	r16,r5
 80072b8:	dcc00315 	stw	r19,12(sp)
 80072bc:	300b883a 	mov	r5,r6
 80072c0:	2027883a 	mov	r19,r4
 80072c4:	8009883a 	mov	r4,r16
 80072c8:	dc800215 	stw	r18,8(sp)
 80072cc:	dfc00415 	stw	ra,16(sp)
 80072d0:	dc400115 	stw	r17,4(sp)
 80072d4:	3025883a 	mov	r18,r6
 80072d8:	800724c0 	call	800724c <__mcmp>
 80072dc:	10005226 	beq	r2,zero,8007428 <__mdiff+0x17c>
 80072e0:	10004c16 	blt	r2,zero,8007414 <__mdiff+0x168>
 80072e4:	0023883a 	mov	r17,zero
 80072e8:	81400117 	ldw	r5,4(r16)
 80072ec:	9809883a 	mov	r4,r19
 80072f0:	80068d00 	call	80068d0 <_Balloc>
 80072f4:	83400417 	ldw	r13,16(r16)
 80072f8:	93800417 	ldw	r14,16(r18)
 80072fc:	81000504 	addi	r4,r16,20
 8007300:	6b59883a 	add	r12,r13,r13
 8007304:	739d883a 	add	r14,r14,r14
 8007308:	6319883a 	add	r12,r12,r12
 800730c:	91800504 	addi	r6,r18,20
 8007310:	739d883a 	add	r14,r14,r14
 8007314:	14400315 	stw	r17,12(r2)
 8007318:	2319883a 	add	r12,r4,r12
 800731c:	339d883a 	add	r14,r6,r14
 8007320:	12400504 	addi	r9,r2,20
 8007324:	0007883a 	mov	r3,zero
 8007328:	22000017 	ldw	r8,0(r4)
 800732c:	32800017 	ldw	r10,0(r6)
 8007330:	4ac00104 	addi	r11,r9,4
 8007334:	41ffffcc 	andi	r7,r8,65535
 8007338:	38c7883a 	add	r3,r7,r3
 800733c:	51ffffcc 	andi	r7,r10,65535
 8007340:	19cfc83a 	sub	r7,r3,r7
 8007344:	4010d43a 	srli	r8,r8,16
 8007348:	5014d43a 	srli	r10,r10,16
 800734c:	3807d43a 	srai	r3,r7,16
 8007350:	39ffffcc 	andi	r7,r7,65535
 8007354:	4291c83a 	sub	r8,r8,r10
 8007358:	40c7883a 	add	r3,r8,r3
 800735c:	1810943a 	slli	r8,r3,16
 8007360:	31800104 	addi	r6,r6,4
 8007364:	21000104 	addi	r4,r4,4
 8007368:	41ceb03a 	or	r7,r8,r7
 800736c:	49c00015 	stw	r7,0(r9)
 8007370:	1807d43a 	srai	r3,r3,16
 8007374:	580b883a 	mov	r5,r11
 8007378:	5813883a 	mov	r9,r11
 800737c:	33bfea36 	bltu	r6,r14,8007328 <__alt_data_end+0xfc007328>
 8007380:	2011883a 	mov	r8,r4
 8007384:	2300152e 	bgeu	r4,r12,80073dc <__mdiff+0x130>
 8007388:	21400017 	ldw	r5,0(r4)
 800738c:	4a400104 	addi	r9,r9,4
 8007390:	21000104 	addi	r4,r4,4
 8007394:	29ffffcc 	andi	r7,r5,65535
 8007398:	38c7883a 	add	r3,r7,r3
 800739c:	280ad43a 	srli	r5,r5,16
 80073a0:	180dd43a 	srai	r6,r3,16
 80073a4:	19ffffcc 	andi	r7,r3,65535
 80073a8:	3147883a 	add	r3,r6,r5
 80073ac:	180a943a 	slli	r5,r3,16
 80073b0:	1807d43a 	srai	r3,r3,16
 80073b4:	29ceb03a 	or	r7,r5,r7
 80073b8:	49ffff15 	stw	r7,-4(r9)
 80073bc:	233ff236 	bltu	r4,r12,8007388 <__alt_data_end+0xfc007388>
 80073c0:	0206303a 	nor	r3,zero,r8
 80073c4:	1b07883a 	add	r3,r3,r12
 80073c8:	1806d0ba 	srli	r3,r3,2
 80073cc:	18c00044 	addi	r3,r3,1
 80073d0:	18c7883a 	add	r3,r3,r3
 80073d4:	18c7883a 	add	r3,r3,r3
 80073d8:	58cb883a 	add	r5,r11,r3
 80073dc:	28ffff04 	addi	r3,r5,-4
 80073e0:	3800041e 	bne	r7,zero,80073f4 <__mdiff+0x148>
 80073e4:	18ffff04 	addi	r3,r3,-4
 80073e8:	19000017 	ldw	r4,0(r3)
 80073ec:	6b7fffc4 	addi	r13,r13,-1
 80073f0:	203ffc26 	beq	r4,zero,80073e4 <__alt_data_end+0xfc0073e4>
 80073f4:	13400415 	stw	r13,16(r2)
 80073f8:	dfc00417 	ldw	ra,16(sp)
 80073fc:	dcc00317 	ldw	r19,12(sp)
 8007400:	dc800217 	ldw	r18,8(sp)
 8007404:	dc400117 	ldw	r17,4(sp)
 8007408:	dc000017 	ldw	r16,0(sp)
 800740c:	dec00504 	addi	sp,sp,20
 8007410:	f800283a 	ret
 8007414:	8005883a 	mov	r2,r16
 8007418:	04400044 	movi	r17,1
 800741c:	9021883a 	mov	r16,r18
 8007420:	1025883a 	mov	r18,r2
 8007424:	003fb006 	br	80072e8 <__alt_data_end+0xfc0072e8>
 8007428:	9809883a 	mov	r4,r19
 800742c:	000b883a 	mov	r5,zero
 8007430:	80068d00 	call	80068d0 <_Balloc>
 8007434:	00c00044 	movi	r3,1
 8007438:	10c00415 	stw	r3,16(r2)
 800743c:	10000515 	stw	zero,20(r2)
 8007440:	003fed06 	br	80073f8 <__alt_data_end+0xfc0073f8>

08007444 <__ulp>:
 8007444:	295ffc2c 	andhi	r5,r5,32752
 8007448:	00bf3034 	movhi	r2,64704
 800744c:	2887883a 	add	r3,r5,r2
 8007450:	00c0020e 	bge	zero,r3,800745c <__ulp+0x18>
 8007454:	0005883a 	mov	r2,zero
 8007458:	f800283a 	ret
 800745c:	00c7c83a 	sub	r3,zero,r3
 8007460:	180bd53a 	srai	r5,r3,20
 8007464:	008004c4 	movi	r2,19
 8007468:	11400a0e 	bge	r2,r5,8007494 <__ulp+0x50>
 800746c:	00800c84 	movi	r2,50
 8007470:	0007883a 	mov	r3,zero
 8007474:	11400516 	blt	r2,r5,800748c <__ulp+0x48>
 8007478:	00800cc4 	movi	r2,51
 800747c:	114bc83a 	sub	r5,r2,r5
 8007480:	00800044 	movi	r2,1
 8007484:	1144983a 	sll	r2,r2,r5
 8007488:	f800283a 	ret
 800748c:	00800044 	movi	r2,1
 8007490:	f800283a 	ret
 8007494:	00800234 	movhi	r2,8
 8007498:	1147d83a 	sra	r3,r2,r5
 800749c:	0005883a 	mov	r2,zero
 80074a0:	f800283a 	ret

080074a4 <__b2d>:
 80074a4:	defffa04 	addi	sp,sp,-24
 80074a8:	dc000015 	stw	r16,0(sp)
 80074ac:	24000417 	ldw	r16,16(r4)
 80074b0:	dc400115 	stw	r17,4(sp)
 80074b4:	24400504 	addi	r17,r4,20
 80074b8:	8421883a 	add	r16,r16,r16
 80074bc:	8421883a 	add	r16,r16,r16
 80074c0:	8c21883a 	add	r16,r17,r16
 80074c4:	dc800215 	stw	r18,8(sp)
 80074c8:	84bfff17 	ldw	r18,-4(r16)
 80074cc:	dd000415 	stw	r20,16(sp)
 80074d0:	dcc00315 	stw	r19,12(sp)
 80074d4:	9009883a 	mov	r4,r18
 80074d8:	2829883a 	mov	r20,r5
 80074dc:	dfc00515 	stw	ra,20(sp)
 80074e0:	8006be00 	call	8006be0 <__hi0bits>
 80074e4:	00c00804 	movi	r3,32
 80074e8:	1887c83a 	sub	r3,r3,r2
 80074ec:	a0c00015 	stw	r3,0(r20)
 80074f0:	00c00284 	movi	r3,10
 80074f4:	84ffff04 	addi	r19,r16,-4
 80074f8:	18801216 	blt	r3,r2,8007544 <__b2d+0xa0>
 80074fc:	014002c4 	movi	r5,11
 8007500:	2889c83a 	sub	r4,r5,r2
 8007504:	9106d83a 	srl	r3,r18,r4
 8007508:	18cffc34 	orhi	r3,r3,16368
 800750c:	8cc0282e 	bgeu	r17,r19,80075b0 <__b2d+0x10c>
 8007510:	817ffe17 	ldw	r5,-8(r16)
 8007514:	290ad83a 	srl	r5,r5,r4
 8007518:	10800544 	addi	r2,r2,21
 800751c:	9084983a 	sll	r2,r18,r2
 8007520:	2884b03a 	or	r2,r5,r2
 8007524:	dfc00517 	ldw	ra,20(sp)
 8007528:	dd000417 	ldw	r20,16(sp)
 800752c:	dcc00317 	ldw	r19,12(sp)
 8007530:	dc800217 	ldw	r18,8(sp)
 8007534:	dc400117 	ldw	r17,4(sp)
 8007538:	dc000017 	ldw	r16,0(sp)
 800753c:	dec00604 	addi	sp,sp,24
 8007540:	f800283a 	ret
 8007544:	113ffd44 	addi	r4,r2,-11
 8007548:	8cc00f2e 	bgeu	r17,r19,8007588 <__b2d+0xe4>
 800754c:	81bffe04 	addi	r6,r16,-8
 8007550:	817ffe17 	ldw	r5,-8(r16)
 8007554:	20001326 	beq	r4,zero,80075a4 <__b2d+0x100>
 8007558:	00c00ac4 	movi	r3,43
 800755c:	1885c83a 	sub	r2,r3,r2
 8007560:	2886d83a 	srl	r3,r5,r2
 8007564:	9124983a 	sll	r18,r18,r4
 8007568:	90e4b03a 	or	r18,r18,r3
 800756c:	90cffc34 	orhi	r3,r18,16368
 8007570:	8980112e 	bgeu	r17,r6,80075b8 <__b2d+0x114>
 8007574:	81bffd17 	ldw	r6,-12(r16)
 8007578:	308cd83a 	srl	r6,r6,r2
 800757c:	2904983a 	sll	r2,r5,r4
 8007580:	1184b03a 	or	r2,r2,r6
 8007584:	003fe706 	br	8007524 <__alt_data_end+0xfc007524>
 8007588:	20000526 	beq	r4,zero,80075a0 <__b2d+0xfc>
 800758c:	9124983a 	sll	r18,r18,r4
 8007590:	000d883a 	mov	r6,zero
 8007594:	000b883a 	mov	r5,zero
 8007598:	90cffc34 	orhi	r3,r18,16368
 800759c:	003ff706 	br	800757c <__alt_data_end+0xfc00757c>
 80075a0:	000b883a 	mov	r5,zero
 80075a4:	90cffc34 	orhi	r3,r18,16368
 80075a8:	2805883a 	mov	r2,r5
 80075ac:	003fdd06 	br	8007524 <__alt_data_end+0xfc007524>
 80075b0:	000b883a 	mov	r5,zero
 80075b4:	003fd806 	br	8007518 <__alt_data_end+0xfc007518>
 80075b8:	000d883a 	mov	r6,zero
 80075bc:	003fef06 	br	800757c <__alt_data_end+0xfc00757c>

080075c0 <__d2b>:
 80075c0:	defff704 	addi	sp,sp,-36
 80075c4:	dc000215 	stw	r16,8(sp)
 80075c8:	3021883a 	mov	r16,r6
 80075cc:	dc400315 	stw	r17,12(sp)
 80075d0:	8022907a 	slli	r17,r16,1
 80075d4:	dd400715 	stw	r21,28(sp)
 80075d8:	282b883a 	mov	r21,r5
 80075dc:	01400044 	movi	r5,1
 80075e0:	dd000615 	stw	r20,24(sp)
 80075e4:	dcc00515 	stw	r19,20(sp)
 80075e8:	dc800415 	stw	r18,16(sp)
 80075ec:	dfc00815 	stw	ra,32(sp)
 80075f0:	3829883a 	mov	r20,r7
 80075f4:	dc800917 	ldw	r18,36(sp)
 80075f8:	8822d57a 	srli	r17,r17,21
 80075fc:	80068d00 	call	80068d0 <_Balloc>
 8007600:	1027883a 	mov	r19,r2
 8007604:	00800434 	movhi	r2,16
 8007608:	10bfffc4 	addi	r2,r2,-1
 800760c:	808c703a 	and	r6,r16,r2
 8007610:	88000126 	beq	r17,zero,8007618 <__d2b+0x58>
 8007614:	31800434 	orhi	r6,r6,16
 8007618:	d9800015 	stw	r6,0(sp)
 800761c:	a8001f26 	beq	r21,zero,800769c <__d2b+0xdc>
 8007620:	d9000104 	addi	r4,sp,4
 8007624:	dd400115 	stw	r21,4(sp)
 8007628:	8006c480 	call	8006c48 <__lo0bits>
 800762c:	d8c00017 	ldw	r3,0(sp)
 8007630:	1000291e 	bne	r2,zero,80076d8 <__d2b+0x118>
 8007634:	d9000117 	ldw	r4,4(sp)
 8007638:	99000515 	stw	r4,20(r19)
 800763c:	1820c03a 	cmpne	r16,r3,zero
 8007640:	84000044 	addi	r16,r16,1
 8007644:	98c00615 	stw	r3,24(r19)
 8007648:	9c000415 	stw	r16,16(r19)
 800764c:	88001b1e 	bne	r17,zero,80076bc <__d2b+0xfc>
 8007650:	800690ba 	slli	r3,r16,2
 8007654:	10bef384 	addi	r2,r2,-1074
 8007658:	a0800015 	stw	r2,0(r20)
 800765c:	98c5883a 	add	r2,r19,r3
 8007660:	11000417 	ldw	r4,16(r2)
 8007664:	8020917a 	slli	r16,r16,5
 8007668:	8006be00 	call	8006be0 <__hi0bits>
 800766c:	8085c83a 	sub	r2,r16,r2
 8007670:	90800015 	stw	r2,0(r18)
 8007674:	9805883a 	mov	r2,r19
 8007678:	dfc00817 	ldw	ra,32(sp)
 800767c:	dd400717 	ldw	r21,28(sp)
 8007680:	dd000617 	ldw	r20,24(sp)
 8007684:	dcc00517 	ldw	r19,20(sp)
 8007688:	dc800417 	ldw	r18,16(sp)
 800768c:	dc400317 	ldw	r17,12(sp)
 8007690:	dc000217 	ldw	r16,8(sp)
 8007694:	dec00904 	addi	sp,sp,36
 8007698:	f800283a 	ret
 800769c:	d809883a 	mov	r4,sp
 80076a0:	8006c480 	call	8006c48 <__lo0bits>
 80076a4:	d8c00017 	ldw	r3,0(sp)
 80076a8:	04000044 	movi	r16,1
 80076ac:	9c000415 	stw	r16,16(r19)
 80076b0:	98c00515 	stw	r3,20(r19)
 80076b4:	10800804 	addi	r2,r2,32
 80076b8:	883fe526 	beq	r17,zero,8007650 <__alt_data_end+0xfc007650>
 80076bc:	8c7ef344 	addi	r17,r17,-1075
 80076c0:	88a3883a 	add	r17,r17,r2
 80076c4:	00c00d44 	movi	r3,53
 80076c8:	a4400015 	stw	r17,0(r20)
 80076cc:	1885c83a 	sub	r2,r3,r2
 80076d0:	90800015 	stw	r2,0(r18)
 80076d4:	003fe706 	br	8007674 <__alt_data_end+0xfc007674>
 80076d8:	01000804 	movi	r4,32
 80076dc:	2089c83a 	sub	r4,r4,r2
 80076e0:	1908983a 	sll	r4,r3,r4
 80076e4:	d9400117 	ldw	r5,4(sp)
 80076e8:	1886d83a 	srl	r3,r3,r2
 80076ec:	2148b03a 	or	r4,r4,r5
 80076f0:	99000515 	stw	r4,20(r19)
 80076f4:	d8c00015 	stw	r3,0(sp)
 80076f8:	003fd006 	br	800763c <__alt_data_end+0xfc00763c>

080076fc <__ratio>:
 80076fc:	defff904 	addi	sp,sp,-28
 8007700:	dc400315 	stw	r17,12(sp)
 8007704:	2823883a 	mov	r17,r5
 8007708:	d9400104 	addi	r5,sp,4
 800770c:	dfc00615 	stw	ra,24(sp)
 8007710:	dcc00515 	stw	r19,20(sp)
 8007714:	dc800415 	stw	r18,16(sp)
 8007718:	2027883a 	mov	r19,r4
 800771c:	dc000215 	stw	r16,8(sp)
 8007720:	80074a40 	call	80074a4 <__b2d>
 8007724:	8809883a 	mov	r4,r17
 8007728:	d80b883a 	mov	r5,sp
 800772c:	1025883a 	mov	r18,r2
 8007730:	1821883a 	mov	r16,r3
 8007734:	80074a40 	call	80074a4 <__b2d>
 8007738:	8a400417 	ldw	r9,16(r17)
 800773c:	9a000417 	ldw	r8,16(r19)
 8007740:	100d883a 	mov	r6,r2
 8007744:	d8800017 	ldw	r2,0(sp)
 8007748:	4251c83a 	sub	r8,r8,r9
 800774c:	4012917a 	slli	r9,r8,5
 8007750:	da000117 	ldw	r8,4(sp)
 8007754:	4091c83a 	sub	r8,r8,r2
 8007758:	4251883a 	add	r8,r8,r9
 800775c:	02000d0e 	bge	zero,r8,8007794 <__ratio+0x98>
 8007760:	4010953a 	slli	r8,r8,20
 8007764:	4421883a 	add	r16,r8,r16
 8007768:	9009883a 	mov	r4,r18
 800776c:	800b883a 	mov	r5,r16
 8007770:	180f883a 	mov	r7,r3
 8007774:	800b6540 	call	800b654 <__divdf3>
 8007778:	dfc00617 	ldw	ra,24(sp)
 800777c:	dcc00517 	ldw	r19,20(sp)
 8007780:	dc800417 	ldw	r18,16(sp)
 8007784:	dc400317 	ldw	r17,12(sp)
 8007788:	dc000217 	ldw	r16,8(sp)
 800778c:	dec00704 	addi	sp,sp,28
 8007790:	f800283a 	ret
 8007794:	4010953a 	slli	r8,r8,20
 8007798:	1a07c83a 	sub	r3,r3,r8
 800779c:	003ff206 	br	8007768 <__alt_data_end+0xfc007768>

080077a0 <_mprec_log10>:
 80077a0:	defffe04 	addi	sp,sp,-8
 80077a4:	dc000015 	stw	r16,0(sp)
 80077a8:	dfc00115 	stw	ra,4(sp)
 80077ac:	008005c4 	movi	r2,23
 80077b0:	2021883a 	mov	r16,r4
 80077b4:	11000d0e 	bge	r2,r4,80077ec <_mprec_log10+0x4c>
 80077b8:	0005883a 	mov	r2,zero
 80077bc:	00cffc34 	movhi	r3,16368
 80077c0:	843fffc4 	addi	r16,r16,-1
 80077c4:	1009883a 	mov	r4,r2
 80077c8:	180b883a 	mov	r5,r3
 80077cc:	000d883a 	mov	r6,zero
 80077d0:	01d00934 	movhi	r7,16420
 80077d4:	800c2180 	call	800c218 <__muldf3>
 80077d8:	803ff91e 	bne	r16,zero,80077c0 <__alt_data_end+0xfc0077c0>
 80077dc:	dfc00117 	ldw	ra,4(sp)
 80077e0:	dc000017 	ldw	r16,0(sp)
 80077e4:	dec00204 	addi	sp,sp,8
 80077e8:	f800283a 	ret
 80077ec:	202090fa 	slli	r16,r4,3
 80077f0:	00820074 	movhi	r2,2049
 80077f4:	10816204 	addi	r2,r2,1416
 80077f8:	1421883a 	add	r16,r2,r16
 80077fc:	80800017 	ldw	r2,0(r16)
 8007800:	80c00117 	ldw	r3,4(r16)
 8007804:	dfc00117 	ldw	ra,4(sp)
 8007808:	dc000017 	ldw	r16,0(sp)
 800780c:	dec00204 	addi	sp,sp,8
 8007810:	f800283a 	ret

08007814 <__copybits>:
 8007814:	297fffc4 	addi	r5,r5,-1
 8007818:	280fd17a 	srai	r7,r5,5
 800781c:	30c00417 	ldw	r3,16(r6)
 8007820:	30800504 	addi	r2,r6,20
 8007824:	39c00044 	addi	r7,r7,1
 8007828:	18c7883a 	add	r3,r3,r3
 800782c:	39cf883a 	add	r7,r7,r7
 8007830:	18c7883a 	add	r3,r3,r3
 8007834:	39cf883a 	add	r7,r7,r7
 8007838:	10c7883a 	add	r3,r2,r3
 800783c:	21cf883a 	add	r7,r4,r7
 8007840:	10c00d2e 	bgeu	r2,r3,8007878 <__copybits+0x64>
 8007844:	200b883a 	mov	r5,r4
 8007848:	12000017 	ldw	r8,0(r2)
 800784c:	29400104 	addi	r5,r5,4
 8007850:	10800104 	addi	r2,r2,4
 8007854:	2a3fff15 	stw	r8,-4(r5)
 8007858:	10fffb36 	bltu	r2,r3,8007848 <__alt_data_end+0xfc007848>
 800785c:	1985c83a 	sub	r2,r3,r6
 8007860:	10bffac4 	addi	r2,r2,-21
 8007864:	1004d0ba 	srli	r2,r2,2
 8007868:	10800044 	addi	r2,r2,1
 800786c:	1085883a 	add	r2,r2,r2
 8007870:	1085883a 	add	r2,r2,r2
 8007874:	2089883a 	add	r4,r4,r2
 8007878:	21c0032e 	bgeu	r4,r7,8007888 <__copybits+0x74>
 800787c:	20000015 	stw	zero,0(r4)
 8007880:	21000104 	addi	r4,r4,4
 8007884:	21fffd36 	bltu	r4,r7,800787c <__alt_data_end+0xfc00787c>
 8007888:	f800283a 	ret

0800788c <__any_on>:
 800788c:	20c00417 	ldw	r3,16(r4)
 8007890:	2805d17a 	srai	r2,r5,5
 8007894:	21000504 	addi	r4,r4,20
 8007898:	18800d0e 	bge	r3,r2,80078d0 <__any_on+0x44>
 800789c:	18c7883a 	add	r3,r3,r3
 80078a0:	18c7883a 	add	r3,r3,r3
 80078a4:	20c7883a 	add	r3,r4,r3
 80078a8:	20c0192e 	bgeu	r4,r3,8007910 <__any_on+0x84>
 80078ac:	18bfff17 	ldw	r2,-4(r3)
 80078b0:	18ffff04 	addi	r3,r3,-4
 80078b4:	1000041e 	bne	r2,zero,80078c8 <__any_on+0x3c>
 80078b8:	20c0142e 	bgeu	r4,r3,800790c <__any_on+0x80>
 80078bc:	18ffff04 	addi	r3,r3,-4
 80078c0:	19400017 	ldw	r5,0(r3)
 80078c4:	283ffc26 	beq	r5,zero,80078b8 <__alt_data_end+0xfc0078b8>
 80078c8:	00800044 	movi	r2,1
 80078cc:	f800283a 	ret
 80078d0:	10c00a0e 	bge	r2,r3,80078fc <__any_on+0x70>
 80078d4:	1085883a 	add	r2,r2,r2
 80078d8:	1085883a 	add	r2,r2,r2
 80078dc:	294007cc 	andi	r5,r5,31
 80078e0:	2087883a 	add	r3,r4,r2
 80078e4:	283ff026 	beq	r5,zero,80078a8 <__alt_data_end+0xfc0078a8>
 80078e8:	19800017 	ldw	r6,0(r3)
 80078ec:	3144d83a 	srl	r2,r6,r5
 80078f0:	114a983a 	sll	r5,r2,r5
 80078f4:	29bff41e 	bne	r5,r6,80078c8 <__alt_data_end+0xfc0078c8>
 80078f8:	003feb06 	br	80078a8 <__alt_data_end+0xfc0078a8>
 80078fc:	1085883a 	add	r2,r2,r2
 8007900:	1085883a 	add	r2,r2,r2
 8007904:	2087883a 	add	r3,r4,r2
 8007908:	003fe706 	br	80078a8 <__alt_data_end+0xfc0078a8>
 800790c:	f800283a 	ret
 8007910:	0005883a 	mov	r2,zero
 8007914:	f800283a 	ret

08007918 <_realloc_r>:
 8007918:	defff604 	addi	sp,sp,-40
 800791c:	dcc00315 	stw	r19,12(sp)
 8007920:	dc400115 	stw	r17,4(sp)
 8007924:	dfc00915 	stw	ra,36(sp)
 8007928:	df000815 	stw	fp,32(sp)
 800792c:	ddc00715 	stw	r23,28(sp)
 8007930:	dd800615 	stw	r22,24(sp)
 8007934:	dd400515 	stw	r21,20(sp)
 8007938:	dd000415 	stw	r20,16(sp)
 800793c:	dc800215 	stw	r18,8(sp)
 8007940:	dc000015 	stw	r16,0(sp)
 8007944:	2827883a 	mov	r19,r5
 8007948:	3023883a 	mov	r17,r6
 800794c:	2800bf26 	beq	r5,zero,8007c4c <_realloc_r+0x334>
 8007950:	2025883a 	mov	r18,r4
 8007954:	800db940 	call	800db94 <__malloc_lock>
 8007958:	98ffff17 	ldw	r3,-4(r19)
 800795c:	01bfff04 	movi	r6,-4
 8007960:	890002c4 	addi	r4,r17,11
 8007964:	01c00584 	movi	r7,22
 8007968:	9d7ffe04 	addi	r21,r19,-8
 800796c:	19a0703a 	and	r16,r3,r6
 8007970:	39003f2e 	bgeu	r7,r4,8007a70 <_realloc_r+0x158>
 8007974:	053ffe04 	movi	r20,-8
 8007978:	2528703a 	and	r20,r4,r20
 800797c:	a00f883a 	mov	r7,r20
 8007980:	a0008216 	blt	r20,zero,8007b8c <_realloc_r+0x274>
 8007984:	a4408136 	bltu	r20,r17,8007b8c <_realloc_r+0x274>
 8007988:	81c03c0e 	bge	r16,r7,8007a7c <_realloc_r+0x164>
 800798c:	07020074 	movhi	fp,2049
 8007990:	e7031604 	addi	fp,fp,3160
 8007994:	e1000217 	ldw	r4,8(fp)
 8007998:	ac05883a 	add	r2,r21,r16
 800799c:	2080bf26 	beq	r4,r2,8007c9c <_realloc_r+0x384>
 80079a0:	11000117 	ldw	r4,4(r2)
 80079a4:	023fff84 	movi	r8,-2
 80079a8:	2210703a 	and	r8,r4,r8
 80079ac:	1211883a 	add	r8,r2,r8
 80079b0:	41400117 	ldw	r5,4(r8)
 80079b4:	2940004c 	andi	r5,r5,1
 80079b8:	28004a1e 	bne	r5,zero,8007ae4 <_realloc_r+0x1cc>
 80079bc:	017fff04 	movi	r5,-4
 80079c0:	2148703a 	and	r4,r4,r5
 80079c4:	2409883a 	add	r4,r4,r16
 80079c8:	21c0ad0e 	bge	r4,r7,8007c80 <_realloc_r+0x368>
 80079cc:	18c0004c 	andi	r3,r3,1
 80079d0:	18007f1e 	bne	r3,zero,8007bd0 <_realloc_r+0x2b8>
 80079d4:	9dfffe17 	ldw	r23,-8(r19)
 80079d8:	adefc83a 	sub	r23,r21,r23
 80079dc:	bd800117 	ldw	r22,4(r23)
 80079e0:	b14a703a 	and	r5,r22,r5
 80079e4:	216d883a 	add	r22,r4,r5
 80079e8:	b1c04516 	blt	r22,r7,8007b00 <_realloc_r+0x1e8>
 80079ec:	10c00317 	ldw	r3,12(r2)
 80079f0:	10800217 	ldw	r2,8(r2)
 80079f4:	81bfff04 	addi	r6,r16,-4
 80079f8:	bc400204 	addi	r17,r23,8
 80079fc:	10c00315 	stw	r3,12(r2)
 8007a00:	18800215 	stw	r2,8(r3)
 8007a04:	b9400217 	ldw	r5,8(r23)
 8007a08:	b8c00317 	ldw	r3,12(r23)
 8007a0c:	00800904 	movi	r2,36
 8007a10:	28c00315 	stw	r3,12(r5)
 8007a14:	19400215 	stw	r5,8(r3)
 8007a18:	1180ef36 	bltu	r2,r6,8007dd8 <_realloc_r+0x4c0>
 8007a1c:	008004c4 	movi	r2,19
 8007a20:	1180da2e 	bgeu	r2,r6,8007d8c <_realloc_r+0x474>
 8007a24:	98800017 	ldw	r2,0(r19)
 8007a28:	b8800215 	stw	r2,8(r23)
 8007a2c:	98800117 	ldw	r2,4(r19)
 8007a30:	b8800315 	stw	r2,12(r23)
 8007a34:	008006c4 	movi	r2,27
 8007a38:	1180fc2e 	bgeu	r2,r6,8007e2c <_realloc_r+0x514>
 8007a3c:	98800217 	ldw	r2,8(r19)
 8007a40:	b8800415 	stw	r2,16(r23)
 8007a44:	98800317 	ldw	r2,12(r19)
 8007a48:	b8800515 	stw	r2,20(r23)
 8007a4c:	00800904 	movi	r2,36
 8007a50:	3080421e 	bne	r6,r2,8007b5c <_realloc_r+0x244>
 8007a54:	98800417 	ldw	r2,16(r19)
 8007a58:	9cc00604 	addi	r19,r19,24
 8007a5c:	b8c00804 	addi	r3,r23,32
 8007a60:	b8800615 	stw	r2,24(r23)
 8007a64:	98bfff17 	ldw	r2,-4(r19)
 8007a68:	b8800715 	stw	r2,28(r23)
 8007a6c:	00003d06 	br	8007b64 <_realloc_r+0x24c>
 8007a70:	01c00404 	movi	r7,16
 8007a74:	3829883a 	mov	r20,r7
 8007a78:	003fc206 	br	8007984 <__alt_data_end+0xfc007984>
 8007a7c:	9823883a 	mov	r17,r19
 8007a80:	850fc83a 	sub	r7,r16,r20
 8007a84:	008003c4 	movi	r2,15
 8007a88:	18c0004c 	andi	r3,r3,1
 8007a8c:	11c04336 	bltu	r2,r7,8007b9c <_realloc_r+0x284>
 8007a90:	1c06b03a 	or	r3,r3,r16
 8007a94:	a8c00115 	stw	r3,4(r21)
 8007a98:	ac21883a 	add	r16,r21,r16
 8007a9c:	80c00117 	ldw	r3,4(r16)
 8007aa0:	18c00054 	ori	r3,r3,1
 8007aa4:	80c00115 	stw	r3,4(r16)
 8007aa8:	9009883a 	mov	r4,r18
 8007aac:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8007ab0:	8805883a 	mov	r2,r17
 8007ab4:	dfc00917 	ldw	ra,36(sp)
 8007ab8:	df000817 	ldw	fp,32(sp)
 8007abc:	ddc00717 	ldw	r23,28(sp)
 8007ac0:	dd800617 	ldw	r22,24(sp)
 8007ac4:	dd400517 	ldw	r21,20(sp)
 8007ac8:	dd000417 	ldw	r20,16(sp)
 8007acc:	dcc00317 	ldw	r19,12(sp)
 8007ad0:	dc800217 	ldw	r18,8(sp)
 8007ad4:	dc400117 	ldw	r17,4(sp)
 8007ad8:	dc000017 	ldw	r16,0(sp)
 8007adc:	dec00a04 	addi	sp,sp,40
 8007ae0:	f800283a 	ret
 8007ae4:	18c0004c 	andi	r3,r3,1
 8007ae8:	1800391e 	bne	r3,zero,8007bd0 <_realloc_r+0x2b8>
 8007aec:	9dfffe17 	ldw	r23,-8(r19)
 8007af0:	00bfff04 	movi	r2,-4
 8007af4:	adefc83a 	sub	r23,r21,r23
 8007af8:	b9400117 	ldw	r5,4(r23)
 8007afc:	288a703a 	and	r5,r5,r2
 8007b00:	2c2d883a 	add	r22,r5,r16
 8007b04:	b1c03216 	blt	r22,r7,8007bd0 <_realloc_r+0x2b8>
 8007b08:	b8800317 	ldw	r2,12(r23)
 8007b0c:	b8c00217 	ldw	r3,8(r23)
 8007b10:	81bfff04 	addi	r6,r16,-4
 8007b14:	01000904 	movi	r4,36
 8007b18:	18800315 	stw	r2,12(r3)
 8007b1c:	10c00215 	stw	r3,8(r2)
 8007b20:	bc400204 	addi	r17,r23,8
 8007b24:	2180ac36 	bltu	r4,r6,8007dd8 <_realloc_r+0x4c0>
 8007b28:	008004c4 	movi	r2,19
 8007b2c:	1180972e 	bgeu	r2,r6,8007d8c <_realloc_r+0x474>
 8007b30:	98800017 	ldw	r2,0(r19)
 8007b34:	b8800215 	stw	r2,8(r23)
 8007b38:	98800117 	ldw	r2,4(r19)
 8007b3c:	b8800315 	stw	r2,12(r23)
 8007b40:	008006c4 	movi	r2,27
 8007b44:	1180b92e 	bgeu	r2,r6,8007e2c <_realloc_r+0x514>
 8007b48:	98800217 	ldw	r2,8(r19)
 8007b4c:	b8800415 	stw	r2,16(r23)
 8007b50:	98800317 	ldw	r2,12(r19)
 8007b54:	b8800515 	stw	r2,20(r23)
 8007b58:	313fbe26 	beq	r6,r4,8007a54 <__alt_data_end+0xfc007a54>
 8007b5c:	b8c00604 	addi	r3,r23,24
 8007b60:	9cc00404 	addi	r19,r19,16
 8007b64:	98800017 	ldw	r2,0(r19)
 8007b68:	b021883a 	mov	r16,r22
 8007b6c:	b82b883a 	mov	r21,r23
 8007b70:	18800015 	stw	r2,0(r3)
 8007b74:	98800117 	ldw	r2,4(r19)
 8007b78:	18800115 	stw	r2,4(r3)
 8007b7c:	98800217 	ldw	r2,8(r19)
 8007b80:	18800215 	stw	r2,8(r3)
 8007b84:	b8c00117 	ldw	r3,4(r23)
 8007b88:	003fbd06 	br	8007a80 <__alt_data_end+0xfc007a80>
 8007b8c:	00800304 	movi	r2,12
 8007b90:	90800015 	stw	r2,0(r18)
 8007b94:	0005883a 	mov	r2,zero
 8007b98:	003fc606 	br	8007ab4 <__alt_data_end+0xfc007ab4>
 8007b9c:	1d06b03a 	or	r3,r3,r20
 8007ba0:	ad0b883a 	add	r5,r21,r20
 8007ba4:	a8c00115 	stw	r3,4(r21)
 8007ba8:	38800054 	ori	r2,r7,1
 8007bac:	28800115 	stw	r2,4(r5)
 8007bb0:	29cf883a 	add	r7,r5,r7
 8007bb4:	38800117 	ldw	r2,4(r7)
 8007bb8:	9009883a 	mov	r4,r18
 8007bbc:	29400204 	addi	r5,r5,8
 8007bc0:	10800054 	ori	r2,r2,1
 8007bc4:	38800115 	stw	r2,4(r7)
 8007bc8:	80050ec0 	call	80050ec <_free_r>
 8007bcc:	003fb606 	br	8007aa8 <__alt_data_end+0xfc007aa8>
 8007bd0:	880b883a 	mov	r5,r17
 8007bd4:	9009883a 	mov	r4,r18
 8007bd8:	8005c880 	call	8005c88 <_malloc_r>
 8007bdc:	1023883a 	mov	r17,r2
 8007be0:	1000aa26 	beq	r2,zero,8007e8c <_realloc_r+0x574>
 8007be4:	98ffff17 	ldw	r3,-4(r19)
 8007be8:	113ffe04 	addi	r4,r2,-8
 8007bec:	00bfff84 	movi	r2,-2
 8007bf0:	1884703a 	and	r2,r3,r2
 8007bf4:	a885883a 	add	r2,r21,r2
 8007bf8:	20808626 	beq	r4,r2,8007e14 <_realloc_r+0x4fc>
 8007bfc:	81bfff04 	addi	r6,r16,-4
 8007c00:	00800904 	movi	r2,36
 8007c04:	11807036 	bltu	r2,r6,8007dc8 <_realloc_r+0x4b0>
 8007c08:	00c004c4 	movi	r3,19
 8007c0c:	19805636 	bltu	r3,r6,8007d68 <_realloc_r+0x450>
 8007c10:	8805883a 	mov	r2,r17
 8007c14:	9807883a 	mov	r3,r19
 8007c18:	19000017 	ldw	r4,0(r3)
 8007c1c:	11000015 	stw	r4,0(r2)
 8007c20:	19000117 	ldw	r4,4(r3)
 8007c24:	11000115 	stw	r4,4(r2)
 8007c28:	18c00217 	ldw	r3,8(r3)
 8007c2c:	10c00215 	stw	r3,8(r2)
 8007c30:	980b883a 	mov	r5,r19
 8007c34:	9009883a 	mov	r4,r18
 8007c38:	80050ec0 	call	80050ec <_free_r>
 8007c3c:	9009883a 	mov	r4,r18
 8007c40:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8007c44:	8805883a 	mov	r2,r17
 8007c48:	003f9a06 	br	8007ab4 <__alt_data_end+0xfc007ab4>
 8007c4c:	300b883a 	mov	r5,r6
 8007c50:	dfc00917 	ldw	ra,36(sp)
 8007c54:	df000817 	ldw	fp,32(sp)
 8007c58:	ddc00717 	ldw	r23,28(sp)
 8007c5c:	dd800617 	ldw	r22,24(sp)
 8007c60:	dd400517 	ldw	r21,20(sp)
 8007c64:	dd000417 	ldw	r20,16(sp)
 8007c68:	dcc00317 	ldw	r19,12(sp)
 8007c6c:	dc800217 	ldw	r18,8(sp)
 8007c70:	dc400117 	ldw	r17,4(sp)
 8007c74:	dc000017 	ldw	r16,0(sp)
 8007c78:	dec00a04 	addi	sp,sp,40
 8007c7c:	8005c881 	jmpi	8005c88 <_malloc_r>
 8007c80:	11400317 	ldw	r5,12(r2)
 8007c84:	10800217 	ldw	r2,8(r2)
 8007c88:	9823883a 	mov	r17,r19
 8007c8c:	2021883a 	mov	r16,r4
 8007c90:	11400315 	stw	r5,12(r2)
 8007c94:	28800215 	stw	r2,8(r5)
 8007c98:	003f7906 	br	8007a80 <__alt_data_end+0xfc007a80>
 8007c9c:	21000117 	ldw	r4,4(r4)
 8007ca0:	00bfff04 	movi	r2,-4
 8007ca4:	a1800404 	addi	r6,r20,16
 8007ca8:	2088703a 	and	r4,r4,r2
 8007cac:	2409883a 	add	r4,r4,r16
 8007cb0:	2180380e 	bge	r4,r6,8007d94 <_realloc_r+0x47c>
 8007cb4:	18c0004c 	andi	r3,r3,1
 8007cb8:	183fc51e 	bne	r3,zero,8007bd0 <__alt_data_end+0xfc007bd0>
 8007cbc:	9dfffe17 	ldw	r23,-8(r19)
 8007cc0:	adefc83a 	sub	r23,r21,r23
 8007cc4:	b9400117 	ldw	r5,4(r23)
 8007cc8:	288a703a 	and	r5,r5,r2
 8007ccc:	216d883a 	add	r22,r4,r5
 8007cd0:	b1bf8b16 	blt	r22,r6,8007b00 <__alt_data_end+0xfc007b00>
 8007cd4:	b8800317 	ldw	r2,12(r23)
 8007cd8:	b8c00217 	ldw	r3,8(r23)
 8007cdc:	81bfff04 	addi	r6,r16,-4
 8007ce0:	01000904 	movi	r4,36
 8007ce4:	18800315 	stw	r2,12(r3)
 8007ce8:	10c00215 	stw	r3,8(r2)
 8007cec:	bc400204 	addi	r17,r23,8
 8007cf0:	21805a36 	bltu	r4,r6,8007e5c <_realloc_r+0x544>
 8007cf4:	008004c4 	movi	r2,19
 8007cf8:	1180562e 	bgeu	r2,r6,8007e54 <_realloc_r+0x53c>
 8007cfc:	98800017 	ldw	r2,0(r19)
 8007d00:	b8800215 	stw	r2,8(r23)
 8007d04:	98800117 	ldw	r2,4(r19)
 8007d08:	b8800315 	stw	r2,12(r23)
 8007d0c:	008006c4 	movi	r2,27
 8007d10:	11805636 	bltu	r2,r6,8007e6c <_realloc_r+0x554>
 8007d14:	b8800404 	addi	r2,r23,16
 8007d18:	9cc00204 	addi	r19,r19,8
 8007d1c:	98c00017 	ldw	r3,0(r19)
 8007d20:	10c00015 	stw	r3,0(r2)
 8007d24:	98c00117 	ldw	r3,4(r19)
 8007d28:	10c00115 	stw	r3,4(r2)
 8007d2c:	98c00217 	ldw	r3,8(r19)
 8007d30:	10c00215 	stw	r3,8(r2)
 8007d34:	bd07883a 	add	r3,r23,r20
 8007d38:	b505c83a 	sub	r2,r22,r20
 8007d3c:	e0c00215 	stw	r3,8(fp)
 8007d40:	10800054 	ori	r2,r2,1
 8007d44:	18800115 	stw	r2,4(r3)
 8007d48:	b8800117 	ldw	r2,4(r23)
 8007d4c:	9009883a 	mov	r4,r18
 8007d50:	1080004c 	andi	r2,r2,1
 8007d54:	a0a8b03a 	or	r20,r20,r2
 8007d58:	bd000115 	stw	r20,4(r23)
 8007d5c:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8007d60:	8805883a 	mov	r2,r17
 8007d64:	003f5306 	br	8007ab4 <__alt_data_end+0xfc007ab4>
 8007d68:	98c00017 	ldw	r3,0(r19)
 8007d6c:	88c00015 	stw	r3,0(r17)
 8007d70:	98c00117 	ldw	r3,4(r19)
 8007d74:	88c00115 	stw	r3,4(r17)
 8007d78:	00c006c4 	movi	r3,27
 8007d7c:	19801d36 	bltu	r3,r6,8007df4 <_realloc_r+0x4dc>
 8007d80:	88800204 	addi	r2,r17,8
 8007d84:	98c00204 	addi	r3,r19,8
 8007d88:	003fa306 	br	8007c18 <__alt_data_end+0xfc007c18>
 8007d8c:	8807883a 	mov	r3,r17
 8007d90:	003f7406 	br	8007b64 <__alt_data_end+0xfc007b64>
 8007d94:	ad2b883a 	add	r21,r21,r20
 8007d98:	2505c83a 	sub	r2,r4,r20
 8007d9c:	e5400215 	stw	r21,8(fp)
 8007da0:	10800054 	ori	r2,r2,1
 8007da4:	a8800115 	stw	r2,4(r21)
 8007da8:	98bfff17 	ldw	r2,-4(r19)
 8007dac:	9009883a 	mov	r4,r18
 8007db0:	1080004c 	andi	r2,r2,1
 8007db4:	a0a8b03a 	or	r20,r20,r2
 8007db8:	9d3fff15 	stw	r20,-4(r19)
 8007dbc:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8007dc0:	9805883a 	mov	r2,r19
 8007dc4:	003f3b06 	br	8007ab4 <__alt_data_end+0xfc007ab4>
 8007dc8:	8809883a 	mov	r4,r17
 8007dcc:	980b883a 	mov	r5,r19
 8007dd0:	80066500 	call	8006650 <memmove>
 8007dd4:	003f9606 	br	8007c30 <__alt_data_end+0xfc007c30>
 8007dd8:	8809883a 	mov	r4,r17
 8007ddc:	980b883a 	mov	r5,r19
 8007de0:	80066500 	call	8006650 <memmove>
 8007de4:	b8c00117 	ldw	r3,4(r23)
 8007de8:	b021883a 	mov	r16,r22
 8007dec:	b82b883a 	mov	r21,r23
 8007df0:	003f2306 	br	8007a80 <__alt_data_end+0xfc007a80>
 8007df4:	98c00217 	ldw	r3,8(r19)
 8007df8:	88c00215 	stw	r3,8(r17)
 8007dfc:	98c00317 	ldw	r3,12(r19)
 8007e00:	88c00315 	stw	r3,12(r17)
 8007e04:	30800c26 	beq	r6,r2,8007e38 <_realloc_r+0x520>
 8007e08:	88800404 	addi	r2,r17,16
 8007e0c:	98c00404 	addi	r3,r19,16
 8007e10:	003f8106 	br	8007c18 <__alt_data_end+0xfc007c18>
 8007e14:	893fff17 	ldw	r4,-4(r17)
 8007e18:	00bfff04 	movi	r2,-4
 8007e1c:	9823883a 	mov	r17,r19
 8007e20:	2084703a 	and	r2,r4,r2
 8007e24:	80a1883a 	add	r16,r16,r2
 8007e28:	003f1506 	br	8007a80 <__alt_data_end+0xfc007a80>
 8007e2c:	b8c00404 	addi	r3,r23,16
 8007e30:	9cc00204 	addi	r19,r19,8
 8007e34:	003f4b06 	br	8007b64 <__alt_data_end+0xfc007b64>
 8007e38:	99000417 	ldw	r4,16(r19)
 8007e3c:	88800604 	addi	r2,r17,24
 8007e40:	98c00604 	addi	r3,r19,24
 8007e44:	89000415 	stw	r4,16(r17)
 8007e48:	99000517 	ldw	r4,20(r19)
 8007e4c:	89000515 	stw	r4,20(r17)
 8007e50:	003f7106 	br	8007c18 <__alt_data_end+0xfc007c18>
 8007e54:	8805883a 	mov	r2,r17
 8007e58:	003fb006 	br	8007d1c <__alt_data_end+0xfc007d1c>
 8007e5c:	8809883a 	mov	r4,r17
 8007e60:	980b883a 	mov	r5,r19
 8007e64:	80066500 	call	8006650 <memmove>
 8007e68:	003fb206 	br	8007d34 <__alt_data_end+0xfc007d34>
 8007e6c:	98800217 	ldw	r2,8(r19)
 8007e70:	b8800415 	stw	r2,16(r23)
 8007e74:	98800317 	ldw	r2,12(r19)
 8007e78:	b8800515 	stw	r2,20(r23)
 8007e7c:	31000726 	beq	r6,r4,8007e9c <_realloc_r+0x584>
 8007e80:	b8800604 	addi	r2,r23,24
 8007e84:	9cc00404 	addi	r19,r19,16
 8007e88:	003fa406 	br	8007d1c <__alt_data_end+0xfc007d1c>
 8007e8c:	9009883a 	mov	r4,r18
 8007e90:	800dbb40 	call	800dbb4 <__malloc_unlock>
 8007e94:	0005883a 	mov	r2,zero
 8007e98:	003f0606 	br	8007ab4 <__alt_data_end+0xfc007ab4>
 8007e9c:	98c00417 	ldw	r3,16(r19)
 8007ea0:	9cc00604 	addi	r19,r19,24
 8007ea4:	b8800804 	addi	r2,r23,32
 8007ea8:	b8c00615 	stw	r3,24(r23)
 8007eac:	98ffff17 	ldw	r3,-4(r19)
 8007eb0:	b8c00715 	stw	r3,28(r23)
 8007eb4:	003f9906 	br	8007d1c <__alt_data_end+0xfc007d1c>

08007eb8 <__fpclassifyd>:
 8007eb8:	00a00034 	movhi	r2,32768
 8007ebc:	10bfffc4 	addi	r2,r2,-1
 8007ec0:	2884703a 	and	r2,r5,r2
 8007ec4:	10000726 	beq	r2,zero,8007ee4 <__fpclassifyd+0x2c>
 8007ec8:	00fffc34 	movhi	r3,65520
 8007ecc:	019ff834 	movhi	r6,32736
 8007ed0:	28c7883a 	add	r3,r5,r3
 8007ed4:	31bfffc4 	addi	r6,r6,-1
 8007ed8:	30c00536 	bltu	r6,r3,8007ef0 <__fpclassifyd+0x38>
 8007edc:	00800104 	movi	r2,4
 8007ee0:	f800283a 	ret
 8007ee4:	2000021e 	bne	r4,zero,8007ef0 <__fpclassifyd+0x38>
 8007ee8:	00800084 	movi	r2,2
 8007eec:	f800283a 	ret
 8007ef0:	00dffc34 	movhi	r3,32752
 8007ef4:	019ff834 	movhi	r6,32736
 8007ef8:	28cb883a 	add	r5,r5,r3
 8007efc:	31bfffc4 	addi	r6,r6,-1
 8007f00:	317ff62e 	bgeu	r6,r5,8007edc <__alt_data_end+0xfc007edc>
 8007f04:	01400434 	movhi	r5,16
 8007f08:	297fffc4 	addi	r5,r5,-1
 8007f0c:	28800236 	bltu	r5,r2,8007f18 <__fpclassifyd+0x60>
 8007f10:	008000c4 	movi	r2,3
 8007f14:	f800283a 	ret
 8007f18:	10c00226 	beq	r2,r3,8007f24 <__fpclassifyd+0x6c>
 8007f1c:	0005883a 	mov	r2,zero
 8007f20:	f800283a 	ret
 8007f24:	2005003a 	cmpeq	r2,r4,zero
 8007f28:	f800283a 	ret

08007f2c <_sbrk_r>:
 8007f2c:	defffd04 	addi	sp,sp,-12
 8007f30:	dc000015 	stw	r16,0(sp)
 8007f34:	04020074 	movhi	r16,2049
 8007f38:	dc400115 	stw	r17,4(sp)
 8007f3c:	840f8404 	addi	r16,r16,15888
 8007f40:	2023883a 	mov	r17,r4
 8007f44:	2809883a 	mov	r4,r5
 8007f48:	dfc00215 	stw	ra,8(sp)
 8007f4c:	80000015 	stw	zero,0(r16)
 8007f50:	800dda80 	call	800dda8 <sbrk>
 8007f54:	00ffffc4 	movi	r3,-1
 8007f58:	10c00526 	beq	r2,r3,8007f70 <_sbrk_r+0x44>
 8007f5c:	dfc00217 	ldw	ra,8(sp)
 8007f60:	dc400117 	ldw	r17,4(sp)
 8007f64:	dc000017 	ldw	r16,0(sp)
 8007f68:	dec00304 	addi	sp,sp,12
 8007f6c:	f800283a 	ret
 8007f70:	80c00017 	ldw	r3,0(r16)
 8007f74:	183ff926 	beq	r3,zero,8007f5c <__alt_data_end+0xfc007f5c>
 8007f78:	88c00015 	stw	r3,0(r17)
 8007f7c:	003ff706 	br	8007f5c <__alt_data_end+0xfc007f5c>

08007f80 <__sread>:
 8007f80:	defffe04 	addi	sp,sp,-8
 8007f84:	dc000015 	stw	r16,0(sp)
 8007f88:	2821883a 	mov	r16,r5
 8007f8c:	2940038f 	ldh	r5,14(r5)
 8007f90:	dfc00115 	stw	ra,4(sp)
 8007f94:	8009c3c0 	call	8009c3c <_read_r>
 8007f98:	10000716 	blt	r2,zero,8007fb8 <__sread+0x38>
 8007f9c:	80c01417 	ldw	r3,80(r16)
 8007fa0:	1887883a 	add	r3,r3,r2
 8007fa4:	80c01415 	stw	r3,80(r16)
 8007fa8:	dfc00117 	ldw	ra,4(sp)
 8007fac:	dc000017 	ldw	r16,0(sp)
 8007fb0:	dec00204 	addi	sp,sp,8
 8007fb4:	f800283a 	ret
 8007fb8:	80c0030b 	ldhu	r3,12(r16)
 8007fbc:	18fbffcc 	andi	r3,r3,61439
 8007fc0:	80c0030d 	sth	r3,12(r16)
 8007fc4:	dfc00117 	ldw	ra,4(sp)
 8007fc8:	dc000017 	ldw	r16,0(sp)
 8007fcc:	dec00204 	addi	sp,sp,8
 8007fd0:	f800283a 	ret

08007fd4 <__seofread>:
 8007fd4:	0005883a 	mov	r2,zero
 8007fd8:	f800283a 	ret

08007fdc <__swrite>:
 8007fdc:	2880030b 	ldhu	r2,12(r5)
 8007fe0:	defffb04 	addi	sp,sp,-20
 8007fe4:	dcc00315 	stw	r19,12(sp)
 8007fe8:	dc800215 	stw	r18,8(sp)
 8007fec:	dc400115 	stw	r17,4(sp)
 8007ff0:	dc000015 	stw	r16,0(sp)
 8007ff4:	dfc00415 	stw	ra,16(sp)
 8007ff8:	10c0400c 	andi	r3,r2,256
 8007ffc:	2821883a 	mov	r16,r5
 8008000:	2027883a 	mov	r19,r4
 8008004:	3025883a 	mov	r18,r6
 8008008:	3823883a 	mov	r17,r7
 800800c:	18000526 	beq	r3,zero,8008024 <__swrite+0x48>
 8008010:	2940038f 	ldh	r5,14(r5)
 8008014:	000d883a 	mov	r6,zero
 8008018:	01c00084 	movi	r7,2
 800801c:	8009be00 	call	8009be0 <_lseek_r>
 8008020:	8080030b 	ldhu	r2,12(r16)
 8008024:	8140038f 	ldh	r5,14(r16)
 8008028:	10bbffcc 	andi	r2,r2,61439
 800802c:	9809883a 	mov	r4,r19
 8008030:	900d883a 	mov	r6,r18
 8008034:	880f883a 	mov	r7,r17
 8008038:	8080030d 	sth	r2,12(r16)
 800803c:	dfc00417 	ldw	ra,16(sp)
 8008040:	dcc00317 	ldw	r19,12(sp)
 8008044:	dc800217 	ldw	r18,8(sp)
 8008048:	dc400117 	ldw	r17,4(sp)
 800804c:	dc000017 	ldw	r16,0(sp)
 8008050:	dec00504 	addi	sp,sp,20
 8008054:	80096bc1 	jmpi	80096bc <_write_r>

08008058 <__sseek>:
 8008058:	defffe04 	addi	sp,sp,-8
 800805c:	dc000015 	stw	r16,0(sp)
 8008060:	2821883a 	mov	r16,r5
 8008064:	2940038f 	ldh	r5,14(r5)
 8008068:	dfc00115 	stw	ra,4(sp)
 800806c:	8009be00 	call	8009be0 <_lseek_r>
 8008070:	00ffffc4 	movi	r3,-1
 8008074:	10c00826 	beq	r2,r3,8008098 <__sseek+0x40>
 8008078:	80c0030b 	ldhu	r3,12(r16)
 800807c:	80801415 	stw	r2,80(r16)
 8008080:	18c40014 	ori	r3,r3,4096
 8008084:	80c0030d 	sth	r3,12(r16)
 8008088:	dfc00117 	ldw	ra,4(sp)
 800808c:	dc000017 	ldw	r16,0(sp)
 8008090:	dec00204 	addi	sp,sp,8
 8008094:	f800283a 	ret
 8008098:	80c0030b 	ldhu	r3,12(r16)
 800809c:	18fbffcc 	andi	r3,r3,61439
 80080a0:	80c0030d 	sth	r3,12(r16)
 80080a4:	dfc00117 	ldw	ra,4(sp)
 80080a8:	dc000017 	ldw	r16,0(sp)
 80080ac:	dec00204 	addi	sp,sp,8
 80080b0:	f800283a 	ret

080080b4 <__sclose>:
 80080b4:	2940038f 	ldh	r5,14(r5)
 80080b8:	80097181 	jmpi	8009718 <_close_r>

080080bc <strcmp>:
 80080bc:	2144b03a 	or	r2,r4,r5
 80080c0:	108000cc 	andi	r2,r2,3
 80080c4:	1000171e 	bne	r2,zero,8008124 <strcmp+0x68>
 80080c8:	20800017 	ldw	r2,0(r4)
 80080cc:	28c00017 	ldw	r3,0(r5)
 80080d0:	10c0141e 	bne	r2,r3,8008124 <strcmp+0x68>
 80080d4:	027fbff4 	movhi	r9,65279
 80080d8:	4a7fbfc4 	addi	r9,r9,-257
 80080dc:	0086303a 	nor	r3,zero,r2
 80080e0:	02202074 	movhi	r8,32897
 80080e4:	1245883a 	add	r2,r2,r9
 80080e8:	42202004 	addi	r8,r8,-32640
 80080ec:	10c4703a 	and	r2,r2,r3
 80080f0:	1204703a 	and	r2,r2,r8
 80080f4:	10000226 	beq	r2,zero,8008100 <strcmp+0x44>
 80080f8:	00001706 	br	8008158 <strcmp+0x9c>
 80080fc:	1000161e 	bne	r2,zero,8008158 <strcmp+0x9c>
 8008100:	21000104 	addi	r4,r4,4
 8008104:	20c00017 	ldw	r3,0(r4)
 8008108:	29400104 	addi	r5,r5,4
 800810c:	29800017 	ldw	r6,0(r5)
 8008110:	1a4f883a 	add	r7,r3,r9
 8008114:	00c4303a 	nor	r2,zero,r3
 8008118:	3884703a 	and	r2,r7,r2
 800811c:	1204703a 	and	r2,r2,r8
 8008120:	19bff626 	beq	r3,r6,80080fc <__alt_data_end+0xfc0080fc>
 8008124:	20800007 	ldb	r2,0(r4)
 8008128:	1000051e 	bne	r2,zero,8008140 <strcmp+0x84>
 800812c:	00000606 	br	8008148 <strcmp+0x8c>
 8008130:	21000044 	addi	r4,r4,1
 8008134:	20800007 	ldb	r2,0(r4)
 8008138:	29400044 	addi	r5,r5,1
 800813c:	10000226 	beq	r2,zero,8008148 <strcmp+0x8c>
 8008140:	28c00007 	ldb	r3,0(r5)
 8008144:	10fffa26 	beq	r2,r3,8008130 <__alt_data_end+0xfc008130>
 8008148:	20800003 	ldbu	r2,0(r4)
 800814c:	28c00003 	ldbu	r3,0(r5)
 8008150:	10c5c83a 	sub	r2,r2,r3
 8008154:	f800283a 	ret
 8008158:	0005883a 	mov	r2,zero
 800815c:	f800283a 	ret

08008160 <__sprint_r.part.0>:
 8008160:	28801917 	ldw	r2,100(r5)
 8008164:	defff604 	addi	sp,sp,-40
 8008168:	dd400515 	stw	r21,20(sp)
 800816c:	dcc00315 	stw	r19,12(sp)
 8008170:	dfc00915 	stw	ra,36(sp)
 8008174:	df000815 	stw	fp,32(sp)
 8008178:	ddc00715 	stw	r23,28(sp)
 800817c:	dd800615 	stw	r22,24(sp)
 8008180:	dd000415 	stw	r20,16(sp)
 8008184:	dc800215 	stw	r18,8(sp)
 8008188:	dc400115 	stw	r17,4(sp)
 800818c:	dc000015 	stw	r16,0(sp)
 8008190:	1088000c 	andi	r2,r2,8192
 8008194:	2827883a 	mov	r19,r5
 8008198:	302b883a 	mov	r21,r6
 800819c:	10002d26 	beq	r2,zero,8008254 <__sprint_r.part.0+0xf4>
 80081a0:	30800217 	ldw	r2,8(r6)
 80081a4:	35800017 	ldw	r22,0(r6)
 80081a8:	10002826 	beq	r2,zero,800824c <__sprint_r.part.0+0xec>
 80081ac:	2029883a 	mov	r20,r4
 80081b0:	b5c00104 	addi	r23,r22,4
 80081b4:	04bfffc4 	movi	r18,-1
 80081b8:	bc400017 	ldw	r17,0(r23)
 80081bc:	b4000017 	ldw	r16,0(r22)
 80081c0:	0039883a 	mov	fp,zero
 80081c4:	8822d0ba 	srli	r17,r17,2
 80081c8:	04400316 	blt	zero,r17,80081d8 <__sprint_r.part.0+0x78>
 80081cc:	00001706 	br	800822c <__sprint_r.part.0+0xcc>
 80081d0:	84000104 	addi	r16,r16,4
 80081d4:	8f001526 	beq	r17,fp,800822c <__sprint_r.part.0+0xcc>
 80081d8:	81400017 	ldw	r5,0(r16)
 80081dc:	a009883a 	mov	r4,r20
 80081e0:	980d883a 	mov	r6,r19
 80081e4:	80099580 	call	8009958 <_fputwc_r>
 80081e8:	e7000044 	addi	fp,fp,1
 80081ec:	14bff81e 	bne	r2,r18,80081d0 <__alt_data_end+0xfc0081d0>
 80081f0:	9005883a 	mov	r2,r18
 80081f4:	a8000215 	stw	zero,8(r21)
 80081f8:	a8000115 	stw	zero,4(r21)
 80081fc:	dfc00917 	ldw	ra,36(sp)
 8008200:	df000817 	ldw	fp,32(sp)
 8008204:	ddc00717 	ldw	r23,28(sp)
 8008208:	dd800617 	ldw	r22,24(sp)
 800820c:	dd400517 	ldw	r21,20(sp)
 8008210:	dd000417 	ldw	r20,16(sp)
 8008214:	dcc00317 	ldw	r19,12(sp)
 8008218:	dc800217 	ldw	r18,8(sp)
 800821c:	dc400117 	ldw	r17,4(sp)
 8008220:	dc000017 	ldw	r16,0(sp)
 8008224:	dec00a04 	addi	sp,sp,40
 8008228:	f800283a 	ret
 800822c:	a8c00217 	ldw	r3,8(r21)
 8008230:	8c63883a 	add	r17,r17,r17
 8008234:	8c63883a 	add	r17,r17,r17
 8008238:	1c45c83a 	sub	r2,r3,r17
 800823c:	a8800215 	stw	r2,8(r21)
 8008240:	b5800204 	addi	r22,r22,8
 8008244:	bdc00204 	addi	r23,r23,8
 8008248:	103fdb1e 	bne	r2,zero,80081b8 <__alt_data_end+0xfc0081b8>
 800824c:	0005883a 	mov	r2,zero
 8008250:	003fe806 	br	80081f4 <__alt_data_end+0xfc0081f4>
 8008254:	80053dc0 	call	80053dc <__sfvwrite_r>
 8008258:	003fe606 	br	80081f4 <__alt_data_end+0xfc0081f4>

0800825c <__sprint_r>:
 800825c:	30c00217 	ldw	r3,8(r6)
 8008260:	18000126 	beq	r3,zero,8008268 <__sprint_r+0xc>
 8008264:	80081601 	jmpi	8008160 <__sprint_r.part.0>
 8008268:	30000115 	stw	zero,4(r6)
 800826c:	0005883a 	mov	r2,zero
 8008270:	f800283a 	ret

08008274 <___vfiprintf_internal_r>:
 8008274:	defeca04 	addi	sp,sp,-1240
 8008278:	dcc12f15 	stw	r19,1212(sp)
 800827c:	dfc13515 	stw	ra,1236(sp)
 8008280:	df013415 	stw	fp,1232(sp)
 8008284:	ddc13315 	stw	r23,1228(sp)
 8008288:	dd813215 	stw	r22,1224(sp)
 800828c:	dd413115 	stw	r21,1220(sp)
 8008290:	dd013015 	stw	r20,1216(sp)
 8008294:	dc812e15 	stw	r18,1208(sp)
 8008298:	dc412d15 	stw	r17,1204(sp)
 800829c:	dc012c15 	stw	r16,1200(sp)
 80082a0:	d9012115 	stw	r4,1156(sp)
 80082a4:	d9412015 	stw	r5,1152(sp)
 80082a8:	d9c12315 	stw	r7,1164(sp)
 80082ac:	3027883a 	mov	r19,r6
 80082b0:	20000226 	beq	r4,zero,80082bc <___vfiprintf_internal_r+0x48>
 80082b4:	20800e17 	ldw	r2,56(r4)
 80082b8:	1000f726 	beq	r2,zero,8008698 <___vfiprintf_internal_r+0x424>
 80082bc:	d8812017 	ldw	r2,1152(sp)
 80082c0:	10c0030b 	ldhu	r3,12(r2)
 80082c4:	1908000c 	andi	r4,r3,8192
 80082c8:	1805883a 	mov	r2,r3
 80082cc:	2000081e 	bne	r4,zero,80082f0 <___vfiprintf_internal_r+0x7c>
 80082d0:	d9412017 	ldw	r5,1152(sp)
 80082d4:	18880014 	ori	r2,r3,8192
 80082d8:	00f7ffc4 	movi	r3,-8193
 80082dc:	29001917 	ldw	r4,100(r5)
 80082e0:	2880030d 	sth	r2,12(r5)
 80082e4:	20c8703a 	and	r4,r4,r3
 80082e8:	29001915 	stw	r4,100(r5)
 80082ec:	1007883a 	mov	r3,r2
 80082f0:	1100020c 	andi	r4,r2,8
 80082f4:	2000a726 	beq	r4,zero,8008594 <___vfiprintf_internal_r+0x320>
 80082f8:	d9412017 	ldw	r5,1152(sp)
 80082fc:	29000417 	ldw	r4,16(r5)
 8008300:	2000a426 	beq	r4,zero,8008594 <___vfiprintf_internal_r+0x320>
 8008304:	1080068c 	andi	r2,r2,26
 8008308:	01000284 	movi	r4,10
 800830c:	1100ab26 	beq	r2,r4,80085bc <___vfiprintf_internal_r+0x348>
 8008310:	d9010a04 	addi	r4,sp,1064
 8008314:	d94109c4 	addi	r5,sp,1063
 8008318:	07020074 	movhi	fp,2049
 800831c:	04420074 	movhi	r17,2049
 8008320:	2145c83a 	sub	r2,r4,r5
 8008324:	e7019804 	addi	fp,fp,1632
 8008328:	8c419404 	addi	r17,r17,1616
 800832c:	d9011e15 	stw	r4,1144(sp)
 8008330:	d9411f15 	stw	r5,1148(sp)
 8008334:	dec11a15 	stw	sp,1128(sp)
 8008338:	d8011c15 	stw	zero,1136(sp)
 800833c:	d8011b15 	stw	zero,1132(sp)
 8008340:	d8012715 	stw	zero,1180(sp)
 8008344:	d8012515 	stw	zero,1172(sp)
 8008348:	d811883a 	mov	r8,sp
 800834c:	d8812815 	stw	r2,1184(sp)
 8008350:	982f883a 	mov	r23,r19
 8008354:	b8800007 	ldb	r2,0(r23)
 8008358:	1003b026 	beq	r2,zero,800921c <___vfiprintf_internal_r+0xfa8>
 800835c:	01000944 	movi	r4,37
 8008360:	1103ae26 	beq	r2,r4,800921c <___vfiprintf_internal_r+0xfa8>
 8008364:	b805883a 	mov	r2,r23
 8008368:	00000106 	br	8008370 <___vfiprintf_internal_r+0xfc>
 800836c:	19000326 	beq	r3,r4,800837c <___vfiprintf_internal_r+0x108>
 8008370:	10800044 	addi	r2,r2,1
 8008374:	10c00007 	ldb	r3,0(r2)
 8008378:	183ffc1e 	bne	r3,zero,800836c <__alt_data_end+0xfc00836c>
 800837c:	15e1c83a 	sub	r16,r2,r23
 8008380:	1029883a 	mov	r20,r2
 8008384:	80001026 	beq	r16,zero,80083c8 <___vfiprintf_internal_r+0x154>
 8008388:	d8c11c17 	ldw	r3,1136(sp)
 800838c:	d8811b17 	ldw	r2,1132(sp)
 8008390:	45c00015 	stw	r23,0(r8)
 8008394:	80c7883a 	add	r3,r16,r3
 8008398:	10800044 	addi	r2,r2,1
 800839c:	44000115 	stw	r16,4(r8)
 80083a0:	d8c11c15 	stw	r3,1136(sp)
 80083a4:	d8811b15 	stw	r2,1132(sp)
 80083a8:	010001c4 	movi	r4,7
 80083ac:	2080740e 	bge	r4,r2,8008580 <___vfiprintf_internal_r+0x30c>
 80083b0:	1803a71e 	bne	r3,zero,8009250 <___vfiprintf_internal_r+0xfdc>
 80083b4:	d8c12517 	ldw	r3,1172(sp)
 80083b8:	d8011b15 	stw	zero,1132(sp)
 80083bc:	d811883a 	mov	r8,sp
 80083c0:	1c07883a 	add	r3,r3,r16
 80083c4:	d8c12515 	stw	r3,1172(sp)
 80083c8:	a0800007 	ldb	r2,0(r20)
 80083cc:	1002bf26 	beq	r2,zero,8008ecc <___vfiprintf_internal_r+0xc58>
 80083d0:	a5c00044 	addi	r23,r20,1
 80083d4:	a1800047 	ldb	r6,1(r20)
 80083d8:	d8011d85 	stb	zero,1142(sp)
 80083dc:	d8012205 	stb	zero,1160(sp)
 80083e0:	043fffc4 	movi	r16,-1
 80083e4:	d8012415 	stw	zero,1168(sp)
 80083e8:	0025883a 	mov	r18,zero
 80083ec:	05001604 	movi	r20,88
 80083f0:	05400244 	movi	r21,9
 80083f4:	4027883a 	mov	r19,r8
 80083f8:	bdc00044 	addi	r23,r23,1
 80083fc:	30bff804 	addi	r2,r6,-32
 8008400:	a0825636 	bltu	r20,r2,8008d5c <___vfiprintf_internal_r+0xae8>
 8008404:	100490ba 	slli	r2,r2,2
 8008408:	01020074 	movhi	r4,2049
 800840c:	21210704 	addi	r4,r4,-31716
 8008410:	1105883a 	add	r2,r2,r4
 8008414:	10800017 	ldw	r2,0(r2)
 8008418:	1000683a 	jmp	r2
 800841c:	08008cec 	andhi	zero,at,563
 8008420:	08008d5c 	xori	zero,at,565
 8008424:	08008d5c 	xori	zero,at,565
 8008428:	08008d50 	cmplti	zero,at,565
 800842c:	08008d5c 	xori	zero,at,565
 8008430:	08008d5c 	xori	zero,at,565
 8008434:	08008d5c 	xori	zero,at,565
 8008438:	08008d5c 	xori	zero,at,565
 800843c:	08008d5c 	xori	zero,at,565
 8008440:	08008d5c 	xori	zero,at,565
 8008444:	08008adc 	xori	zero,at,555
 8008448:	08008d04 	addi	zero,at,564
 800844c:	08008d5c 	xori	zero,at,565
 8008450:	080086b0 	cmpltui	zero,at,538
 8008454:	08008b00 	call	8008b0 <__reset-0x77ff750>
 8008458:	08008d5c 	xori	zero,at,565
 800845c:	080086bc 	xorhi	zero,at,538
 8008460:	080086c8 	cmpgei	zero,at,539
 8008464:	080086c8 	cmpgei	zero,at,539
 8008468:	080086c8 	cmpgei	zero,at,539
 800846c:	080086c8 	cmpgei	zero,at,539
 8008470:	080086c8 	cmpgei	zero,at,539
 8008474:	080086c8 	cmpgei	zero,at,539
 8008478:	080086c8 	cmpgei	zero,at,539
 800847c:	080086c8 	cmpgei	zero,at,539
 8008480:	080086c8 	cmpgei	zero,at,539
 8008484:	08008d5c 	xori	zero,at,565
 8008488:	08008d5c 	xori	zero,at,565
 800848c:	08008d5c 	xori	zero,at,565
 8008490:	08008d5c 	xori	zero,at,565
 8008494:	08008d5c 	xori	zero,at,565
 8008498:	08008d5c 	xori	zero,at,565
 800849c:	08008d5c 	xori	zero,at,565
 80084a0:	08008d5c 	xori	zero,at,565
 80084a4:	08008d5c 	xori	zero,at,565
 80084a8:	08008d5c 	xori	zero,at,565
 80084ac:	08008708 	cmpgei	zero,at,540
 80084b0:	08008d5c 	xori	zero,at,565
 80084b4:	08008d5c 	xori	zero,at,565
 80084b8:	08008d5c 	xori	zero,at,565
 80084bc:	08008d5c 	xori	zero,at,565
 80084c0:	08008d5c 	xori	zero,at,565
 80084c4:	08008d5c 	xori	zero,at,565
 80084c8:	08008d5c 	xori	zero,at,565
 80084cc:	08008d5c 	xori	zero,at,565
 80084d0:	08008d5c 	xori	zero,at,565
 80084d4:	08008d5c 	xori	zero,at,565
 80084d8:	080089f8 	rdprs	zero,at,551
 80084dc:	08008d5c 	xori	zero,at,565
 80084e0:	08008d5c 	xori	zero,at,565
 80084e4:	08008d5c 	xori	zero,at,565
 80084e8:	08008d5c 	xori	zero,at,565
 80084ec:	08008d5c 	xori	zero,at,565
 80084f0:	08008a38 	rdprs	zero,at,552
 80084f4:	08008d5c 	xori	zero,at,565
 80084f8:	08008d5c 	xori	zero,at,565
 80084fc:	08008a7c 	xorhi	zero,at,553
 8008500:	08008d5c 	xori	zero,at,565
 8008504:	08008d5c 	xori	zero,at,565
 8008508:	08008d5c 	xori	zero,at,565
 800850c:	08008d5c 	xori	zero,at,565
 8008510:	08008d5c 	xori	zero,at,565
 8008514:	08008d5c 	xori	zero,at,565
 8008518:	08008d5c 	xori	zero,at,565
 800851c:	08008d5c 	xori	zero,at,565
 8008520:	08008d5c 	xori	zero,at,565
 8008524:	08008d5c 	xori	zero,at,565
 8008528:	080089c4 	addi	zero,at,551
 800852c:	08008d14 	ori	zero,at,564
 8008530:	08008d5c 	xori	zero,at,565
 8008534:	08008d5c 	xori	zero,at,565
 8008538:	08008d5c 	xori	zero,at,565
 800853c:	08008b50 	cmplti	zero,at,557
 8008540:	08008d14 	ori	zero,at,564
 8008544:	08008d5c 	xori	zero,at,565
 8008548:	08008d5c 	xori	zero,at,565
 800854c:	08008a68 	cmpgeui	zero,at,553
 8008550:	08008d5c 	xori	zero,at,565
 8008554:	08008cb4 	orhi	zero,at,562
 8008558:	08008c3c 	xorhi	zero,at,560
 800855c:	08008c70 	cmpltui	zero,at,561
 8008560:	08008b5c 	xori	zero,at,557
 8008564:	08008d5c 	xori	zero,at,565
 8008568:	08008b68 	cmpgeui	zero,at,557
 800856c:	08008d5c 	xori	zero,at,565
 8008570:	08008bc4 	addi	zero,at,559
 8008574:	08008d5c 	xori	zero,at,565
 8008578:	08008d5c 	xori	zero,at,565
 800857c:	08008bf8 	rdprs	zero,at,559
 8008580:	42000204 	addi	r8,r8,8
 8008584:	d8c12517 	ldw	r3,1172(sp)
 8008588:	1c07883a 	add	r3,r3,r16
 800858c:	d8c12515 	stw	r3,1172(sp)
 8008590:	003f8d06 	br	80083c8 <__alt_data_end+0xfc0083c8>
 8008594:	d9012117 	ldw	r4,1156(sp)
 8008598:	d9412017 	ldw	r5,1152(sp)
 800859c:	8002f3c0 	call	8002f3c <__swsetup_r>
 80085a0:	1000301e 	bne	r2,zero,8008664 <___vfiprintf_internal_r+0x3f0>
 80085a4:	d8812017 	ldw	r2,1152(sp)
 80085a8:	01000284 	movi	r4,10
 80085ac:	10c0030b 	ldhu	r3,12(r2)
 80085b0:	1805883a 	mov	r2,r3
 80085b4:	1080068c 	andi	r2,r2,26
 80085b8:	113f551e 	bne	r2,r4,8008310 <__alt_data_end+0xfc008310>
 80085bc:	d9012017 	ldw	r4,1152(sp)
 80085c0:	2080038b 	ldhu	r2,14(r4)
 80085c4:	113fffcc 	andi	r4,r2,65535
 80085c8:	2120001c 	xori	r4,r4,32768
 80085cc:	21200004 	addi	r4,r4,-32768
 80085d0:	203f4f16 	blt	r4,zero,8008310 <__alt_data_end+0xfc008310>
 80085d4:	d9412017 	ldw	r5,1152(sp)
 80085d8:	d9012117 	ldw	r4,1156(sp)
 80085dc:	d9c12317 	ldw	r7,1164(sp)
 80085e0:	2b001917 	ldw	r12,100(r5)
 80085e4:	2ac00717 	ldw	r11,28(r5)
 80085e8:	2a800917 	ldw	r10,36(r5)
 80085ec:	02010004 	movi	r8,1024
 80085f0:	18ffff4c 	andi	r3,r3,65533
 80085f4:	da0b883a 	add	r5,sp,r8
 80085f8:	980d883a 	mov	r6,r19
 80085fc:	d8c1030d 	sth	r3,1036(sp)
 8008600:	db011915 	stw	r12,1124(sp)
 8008604:	d881038d 	sth	r2,1038(sp)
 8008608:	dac10715 	stw	r11,1052(sp)
 800860c:	da810915 	stw	r10,1060(sp)
 8008610:	dec10015 	stw	sp,1024(sp)
 8008614:	dec10415 	stw	sp,1040(sp)
 8008618:	da010215 	stw	r8,1032(sp)
 800861c:	da010515 	stw	r8,1044(sp)
 8008620:	d8010615 	stw	zero,1048(sp)
 8008624:	80082740 	call	8008274 <___vfiprintf_internal_r>
 8008628:	1021883a 	mov	r16,r2
 800862c:	10000416 	blt	r2,zero,8008640 <___vfiprintf_internal_r+0x3cc>
 8008630:	d9012117 	ldw	r4,1156(sp)
 8008634:	d9410004 	addi	r5,sp,1024
 8008638:	80049bc0 	call	80049bc <_fflush_r>
 800863c:	10040f1e 	bne	r2,zero,800967c <___vfiprintf_internal_r+0x1408>
 8008640:	d881030b 	ldhu	r2,1036(sp)
 8008644:	1080100c 	andi	r2,r2,64
 8008648:	10000426 	beq	r2,zero,800865c <___vfiprintf_internal_r+0x3e8>
 800864c:	d8c12017 	ldw	r3,1152(sp)
 8008650:	1880030b 	ldhu	r2,12(r3)
 8008654:	10801014 	ori	r2,r2,64
 8008658:	1880030d 	sth	r2,12(r3)
 800865c:	8005883a 	mov	r2,r16
 8008660:	00000106 	br	8008668 <___vfiprintf_internal_r+0x3f4>
 8008664:	00bfffc4 	movi	r2,-1
 8008668:	dfc13517 	ldw	ra,1236(sp)
 800866c:	df013417 	ldw	fp,1232(sp)
 8008670:	ddc13317 	ldw	r23,1228(sp)
 8008674:	dd813217 	ldw	r22,1224(sp)
 8008678:	dd413117 	ldw	r21,1220(sp)
 800867c:	dd013017 	ldw	r20,1216(sp)
 8008680:	dcc12f17 	ldw	r19,1212(sp)
 8008684:	dc812e17 	ldw	r18,1208(sp)
 8008688:	dc412d17 	ldw	r17,1204(sp)
 800868c:	dc012c17 	ldw	r16,1200(sp)
 8008690:	dec13604 	addi	sp,sp,1240
 8008694:	f800283a 	ret
 8008698:	8004f780 	call	8004f78 <__sinit>
 800869c:	003f0706 	br	80082bc <__alt_data_end+0xfc0082bc>
 80086a0:	d8c12417 	ldw	r3,1168(sp)
 80086a4:	d8812315 	stw	r2,1164(sp)
 80086a8:	00c7c83a 	sub	r3,zero,r3
 80086ac:	d8c12415 	stw	r3,1168(sp)
 80086b0:	94800114 	ori	r18,r18,4
 80086b4:	b9800007 	ldb	r6,0(r23)
 80086b8:	003f4f06 	br	80083f8 <__alt_data_end+0xfc0083f8>
 80086bc:	94802014 	ori	r18,r18,128
 80086c0:	b9800007 	ldb	r6,0(r23)
 80086c4:	003f4c06 	br	80083f8 <__alt_data_end+0xfc0083f8>
 80086c8:	dc012615 	stw	r16,1176(sp)
 80086cc:	d8012415 	stw	zero,1168(sp)
 80086d0:	35bff404 	addi	r22,r6,-48
 80086d4:	0009883a 	mov	r4,zero
 80086d8:	b821883a 	mov	r16,r23
 80086dc:	01400284 	movi	r5,10
 80086e0:	800ad900 	call	800ad90 <__mulsi3>
 80086e4:	81800007 	ldb	r6,0(r16)
 80086e8:	1589883a 	add	r4,r2,r22
 80086ec:	bdc00044 	addi	r23,r23,1
 80086f0:	35bff404 	addi	r22,r6,-48
 80086f4:	b821883a 	mov	r16,r23
 80086f8:	adbff82e 	bgeu	r21,r22,80086dc <__alt_data_end+0xfc0086dc>
 80086fc:	d9012415 	stw	r4,1168(sp)
 8008700:	dc012617 	ldw	r16,1176(sp)
 8008704:	003f3d06 	br	80083fc <__alt_data_end+0xfc0083fc>
 8008708:	d8c12203 	ldbu	r3,1160(sp)
 800870c:	94800414 	ori	r18,r18,16
 8008710:	9080080c 	andi	r2,r18,32
 8008714:	d8c11d85 	stb	r3,1142(sp)
 8008718:	9811883a 	mov	r8,r19
 800871c:	d8c12317 	ldw	r3,1164(sp)
 8008720:	10018226 	beq	r2,zero,8008d2c <___vfiprintf_internal_r+0xab8>
 8008724:	d9012317 	ldw	r4,1164(sp)
 8008728:	18800117 	ldw	r2,4(r3)
 800872c:	1cc00017 	ldw	r19,0(r3)
 8008730:	21000204 	addi	r4,r4,8
 8008734:	d9012315 	stw	r4,1164(sp)
 8008738:	102b883a 	mov	r21,r2
 800873c:	10030016 	blt	r2,zero,8009340 <___vfiprintf_internal_r+0x10cc>
 8008740:	dd811d83 	ldbu	r22,1142(sp)
 8008744:	8029883a 	mov	r20,r16
 8008748:	00800044 	movi	r2,1
 800874c:	9d46b03a 	or	r3,r19,r21
 8008750:	80000216 	blt	r16,zero,800875c <___vfiprintf_internal_r+0x4e8>
 8008754:	013fdfc4 	movi	r4,-129
 8008758:	9124703a 	and	r18,r18,r4
 800875c:	1801b41e 	bne	r3,zero,8008e30 <___vfiprintf_internal_r+0xbbc>
 8008760:	80028126 	beq	r16,zero,8009168 <___vfiprintf_internal_r+0xef4>
 8008764:	10803fcc 	andi	r2,r2,255
 8008768:	00c00044 	movi	r3,1
 800876c:	10c1d126 	beq	r2,r3,8008eb4 <___vfiprintf_internal_r+0xc40>
 8008770:	00c00084 	movi	r3,2
 8008774:	10c28626 	beq	r2,r3,8009190 <___vfiprintf_internal_r+0xf1c>
 8008778:	d8c10a04 	addi	r3,sp,1064
 800877c:	9808d0fa 	srli	r4,r19,3
 8008780:	a80a977a 	slli	r5,r21,29
 8008784:	a82ad0fa 	srli	r21,r21,3
 8008788:	9cc001cc 	andi	r19,r19,7
 800878c:	98800c04 	addi	r2,r19,48
 8008790:	18ffffc4 	addi	r3,r3,-1
 8008794:	2926b03a 	or	r19,r5,r4
 8008798:	18800005 	stb	r2,0(r3)
 800879c:	9d48b03a 	or	r4,r19,r21
 80087a0:	203ff61e 	bne	r4,zero,800877c <__alt_data_end+0xfc00877c>
 80087a4:	9100004c 	andi	r4,r18,1
 80087a8:	d8c12215 	stw	r3,1160(sp)
 80087ac:	2002b31e 	bne	r4,zero,800927c <___vfiprintf_internal_r+0x1008>
 80087b0:	d9411e17 	ldw	r5,1144(sp)
 80087b4:	28e9c83a 	sub	r20,r5,r3
 80087b8:	a02b883a 	mov	r21,r20
 80087bc:	a400010e 	bge	r20,r16,80087c4 <___vfiprintf_internal_r+0x550>
 80087c0:	802b883a 	mov	r21,r16
 80087c4:	b5803fcc 	andi	r22,r22,255
 80087c8:	b580201c 	xori	r22,r22,128
 80087cc:	b5bfe004 	addi	r22,r22,-128
 80087d0:	b0000126 	beq	r22,zero,80087d8 <___vfiprintf_internal_r+0x564>
 80087d4:	ad400044 	addi	r21,r21,1
 80087d8:	9280008c 	andi	r10,r18,2
 80087dc:	50000126 	beq	r10,zero,80087e4 <___vfiprintf_internal_r+0x570>
 80087e0:	ad400084 	addi	r21,r21,2
 80087e4:	9580210c 	andi	r22,r18,132
 80087e8:	b001751e 	bne	r22,zero,8008dc0 <___vfiprintf_internal_r+0xb4c>
 80087ec:	d9012417 	ldw	r4,1168(sp)
 80087f0:	2567c83a 	sub	r19,r4,r21
 80087f4:	04c1720e 	bge	zero,r19,8008dc0 <___vfiprintf_internal_r+0xb4c>
 80087f8:	01c00404 	movi	r7,16
 80087fc:	d8c11c17 	ldw	r3,1136(sp)
 8008800:	3cc36b0e 	bge	r7,r19,80095b0 <___vfiprintf_internal_r+0x133c>
 8008804:	00820074 	movhi	r2,2049
 8008808:	10819804 	addi	r2,r2,1632
 800880c:	dc012915 	stw	r16,1188(sp)
 8008810:	d9011b17 	ldw	r4,1132(sp)
 8008814:	9821883a 	mov	r16,r19
 8008818:	d8812615 	stw	r2,1176(sp)
 800881c:	030001c4 	movi	r12,7
 8008820:	5027883a 	mov	r19,r10
 8008824:	00000506 	br	800883c <___vfiprintf_internal_r+0x5c8>
 8008828:	21400084 	addi	r5,r4,2
 800882c:	42000204 	addi	r8,r8,8
 8008830:	1009883a 	mov	r4,r2
 8008834:	843ffc04 	addi	r16,r16,-16
 8008838:	3c000d0e 	bge	r7,r16,8008870 <___vfiprintf_internal_r+0x5fc>
 800883c:	18c00404 	addi	r3,r3,16
 8008840:	20800044 	addi	r2,r4,1
 8008844:	47000015 	stw	fp,0(r8)
 8008848:	41c00115 	stw	r7,4(r8)
 800884c:	d8c11c15 	stw	r3,1136(sp)
 8008850:	d8811b15 	stw	r2,1132(sp)
 8008854:	60bff40e 	bge	r12,r2,8008828 <__alt_data_end+0xfc008828>
 8008858:	18014b1e 	bne	r3,zero,8008d88 <___vfiprintf_internal_r+0xb14>
 800885c:	843ffc04 	addi	r16,r16,-16
 8008860:	0009883a 	mov	r4,zero
 8008864:	01400044 	movi	r5,1
 8008868:	d811883a 	mov	r8,sp
 800886c:	3c3ff316 	blt	r7,r16,800883c <__alt_data_end+0xfc00883c>
 8008870:	9815883a 	mov	r10,r19
 8008874:	8027883a 	mov	r19,r16
 8008878:	dc012917 	ldw	r16,1188(sp)
 800887c:	d9012617 	ldw	r4,1176(sp)
 8008880:	98c7883a 	add	r3,r19,r3
 8008884:	44c00115 	stw	r19,4(r8)
 8008888:	41000015 	stw	r4,0(r8)
 800888c:	d8c11c15 	stw	r3,1136(sp)
 8008890:	d9411b15 	stw	r5,1132(sp)
 8008894:	008001c4 	movi	r2,7
 8008898:	11425116 	blt	r2,r5,80091e0 <___vfiprintf_internal_r+0xf6c>
 800889c:	d9011d87 	ldb	r4,1142(sp)
 80088a0:	42000204 	addi	r8,r8,8
 80088a4:	28800044 	addi	r2,r5,1
 80088a8:	20014a1e 	bne	r4,zero,8008dd4 <___vfiprintf_internal_r+0xb60>
 80088ac:	50000c26 	beq	r10,zero,80088e0 <___vfiprintf_internal_r+0x66c>
 80088b0:	d9011d04 	addi	r4,sp,1140
 80088b4:	18c00084 	addi	r3,r3,2
 80088b8:	41000015 	stw	r4,0(r8)
 80088bc:	01000084 	movi	r4,2
 80088c0:	41000115 	stw	r4,4(r8)
 80088c4:	d8c11c15 	stw	r3,1136(sp)
 80088c8:	d8811b15 	stw	r2,1132(sp)
 80088cc:	010001c4 	movi	r4,7
 80088d0:	20822016 	blt	r4,r2,8009154 <___vfiprintf_internal_r+0xee0>
 80088d4:	100b883a 	mov	r5,r2
 80088d8:	42000204 	addi	r8,r8,8
 80088dc:	10800044 	addi	r2,r2,1
 80088e0:	01002004 	movi	r4,128
 80088e4:	b101de26 	beq	r22,r4,8009060 <___vfiprintf_internal_r+0xdec>
 80088e8:	8521c83a 	sub	r16,r16,r20
 80088ec:	0400230e 	bge	zero,r16,800897c <___vfiprintf_internal_r+0x708>
 80088f0:	04c00404 	movi	r19,16
 80088f4:	9c030d0e 	bge	r19,r16,800952c <___vfiprintf_internal_r+0x12b8>
 80088f8:	00820074 	movhi	r2,2049
 80088fc:	10819404 	addi	r2,r2,1616
 8008900:	d8812615 	stw	r2,1176(sp)
 8008904:	058001c4 	movi	r22,7
 8008908:	00000506 	br	8008920 <___vfiprintf_internal_r+0x6ac>
 800890c:	28800084 	addi	r2,r5,2
 8008910:	42000204 	addi	r8,r8,8
 8008914:	200b883a 	mov	r5,r4
 8008918:	843ffc04 	addi	r16,r16,-16
 800891c:	9c000d0e 	bge	r19,r16,8008954 <___vfiprintf_internal_r+0x6e0>
 8008920:	18c00404 	addi	r3,r3,16
 8008924:	29000044 	addi	r4,r5,1
 8008928:	44400015 	stw	r17,0(r8)
 800892c:	44c00115 	stw	r19,4(r8)
 8008930:	d8c11c15 	stw	r3,1136(sp)
 8008934:	d9011b15 	stw	r4,1132(sp)
 8008938:	b13ff40e 	bge	r22,r4,800890c <__alt_data_end+0xfc00890c>
 800893c:	1801321e 	bne	r3,zero,8008e08 <___vfiprintf_internal_r+0xb94>
 8008940:	843ffc04 	addi	r16,r16,-16
 8008944:	000b883a 	mov	r5,zero
 8008948:	00800044 	movi	r2,1
 800894c:	d811883a 	mov	r8,sp
 8008950:	9c3ff316 	blt	r19,r16,8008920 <__alt_data_end+0xfc008920>
 8008954:	d9012617 	ldw	r4,1176(sp)
 8008958:	1c07883a 	add	r3,r3,r16
 800895c:	44000115 	stw	r16,4(r8)
 8008960:	41000015 	stw	r4,0(r8)
 8008964:	d8c11c15 	stw	r3,1136(sp)
 8008968:	d8811b15 	stw	r2,1132(sp)
 800896c:	010001c4 	movi	r4,7
 8008970:	20816216 	blt	r4,r2,8008efc <___vfiprintf_internal_r+0xc88>
 8008974:	42000204 	addi	r8,r8,8
 8008978:	10800044 	addi	r2,r2,1
 800897c:	d9012217 	ldw	r4,1160(sp)
 8008980:	1d07883a 	add	r3,r3,r20
 8008984:	45000115 	stw	r20,4(r8)
 8008988:	41000015 	stw	r4,0(r8)
 800898c:	d8c11c15 	stw	r3,1136(sp)
 8008990:	d8811b15 	stw	r2,1132(sp)
 8008994:	010001c4 	movi	r4,7
 8008998:	2081610e 	bge	r4,r2,8008f20 <___vfiprintf_internal_r+0xcac>
 800899c:	1802211e 	bne	r3,zero,8009224 <___vfiprintf_internal_r+0xfb0>
 80089a0:	d8011b15 	stw	zero,1132(sp)
 80089a4:	9480010c 	andi	r18,r18,4
 80089a8:	9002171e 	bne	r18,zero,8009208 <___vfiprintf_internal_r+0xf94>
 80089ac:	d9412417 	ldw	r5,1168(sp)
 80089b0:	a9433716 	blt	r21,r5,8009690 <___vfiprintf_internal_r+0x141c>
 80089b4:	d8812517 	ldw	r2,1172(sp)
 80089b8:	1545883a 	add	r2,r2,r21
 80089bc:	d8812515 	stw	r2,1172(sp)
 80089c0:	00019a06 	br	800902c <___vfiprintf_internal_r+0xdb8>
 80089c4:	d8c12317 	ldw	r3,1164(sp)
 80089c8:	05400044 	movi	r21,1
 80089cc:	9811883a 	mov	r8,r19
 80089d0:	18800017 	ldw	r2,0(r3)
 80089d4:	18c00104 	addi	r3,r3,4
 80089d8:	d8c12315 	stw	r3,1164(sp)
 80089dc:	d8c10004 	addi	r3,sp,1024
 80089e0:	d8011d85 	stb	zero,1142(sp)
 80089e4:	d8810005 	stb	r2,1024(sp)
 80089e8:	a829883a 	mov	r20,r21
 80089ec:	d8c12215 	stw	r3,1160(sp)
 80089f0:	0021883a 	mov	r16,zero
 80089f4:	003f7806 	br	80087d8 <__alt_data_end+0xfc0087d8>
 80089f8:	94800414 	ori	r18,r18,16
 80089fc:	9080080c 	andi	r2,r18,32
 8008a00:	9811883a 	mov	r8,r19
 8008a04:	10009026 	beq	r2,zero,8008c48 <___vfiprintf_internal_r+0x9d4>
 8008a08:	d8812317 	ldw	r2,1164(sp)
 8008a0c:	d8c12317 	ldw	r3,1164(sp)
 8008a10:	14c00017 	ldw	r19,0(r2)
 8008a14:	15400117 	ldw	r21,4(r2)
 8008a18:	18c00204 	addi	r3,r3,8
 8008a1c:	d8c12315 	stw	r3,1164(sp)
 8008a20:	0005883a 	mov	r2,zero
 8008a24:	9d46b03a 	or	r3,r19,r21
 8008a28:	d8011d85 	stb	zero,1142(sp)
 8008a2c:	8029883a 	mov	r20,r16
 8008a30:	002d883a 	mov	r22,zero
 8008a34:	003f4606 	br	8008750 <__alt_data_end+0xfc008750>
 8008a38:	94800414 	ori	r18,r18,16
 8008a3c:	9080080c 	andi	r2,r18,32
 8008a40:	9811883a 	mov	r8,r19
 8008a44:	10006226 	beq	r2,zero,8008bd0 <___vfiprintf_internal_r+0x95c>
 8008a48:	d9012317 	ldw	r4,1164(sp)
 8008a4c:	00800044 	movi	r2,1
 8008a50:	24c00017 	ldw	r19,0(r4)
 8008a54:	25400117 	ldw	r21,4(r4)
 8008a58:	21000204 	addi	r4,r4,8
 8008a5c:	d9012315 	stw	r4,1164(sp)
 8008a60:	9d46b03a 	or	r3,r19,r21
 8008a64:	003ff006 	br	8008a28 <__alt_data_end+0xfc008a28>
 8008a68:	b9800007 	ldb	r6,0(r23)
 8008a6c:	00801b04 	movi	r2,108
 8008a70:	3082b226 	beq	r6,r2,800953c <___vfiprintf_internal_r+0x12c8>
 8008a74:	94800414 	ori	r18,r18,16
 8008a78:	003e5f06 	br	80083f8 <__alt_data_end+0xfc0083f8>
 8008a7c:	d8c12203 	ldbu	r3,1160(sp)
 8008a80:	01020074 	movhi	r4,2049
 8008a84:	21012e04 	addi	r4,r4,1208
 8008a88:	d8c11d85 	stb	r3,1142(sp)
 8008a8c:	d9012715 	stw	r4,1180(sp)
 8008a90:	90c0080c 	andi	r3,r18,32
 8008a94:	9811883a 	mov	r8,r19
 8008a98:	d8812317 	ldw	r2,1164(sp)
 8008a9c:	18005f26 	beq	r3,zero,8008c1c <___vfiprintf_internal_r+0x9a8>
 8008aa0:	d9012317 	ldw	r4,1164(sp)
 8008aa4:	14c00017 	ldw	r19,0(r2)
 8008aa8:	15400117 	ldw	r21,4(r2)
 8008aac:	21000204 	addi	r4,r4,8
 8008ab0:	d9012315 	stw	r4,1164(sp)
 8008ab4:	9080004c 	andi	r2,r18,1
 8008ab8:	1001e226 	beq	r2,zero,8009244 <___vfiprintf_internal_r+0xfd0>
 8008abc:	9d46b03a 	or	r3,r19,r21
 8008ac0:	18024e26 	beq	r3,zero,80093fc <___vfiprintf_internal_r+0x1188>
 8008ac4:	00800c04 	movi	r2,48
 8008ac8:	d8811d05 	stb	r2,1140(sp)
 8008acc:	d9811d45 	stb	r6,1141(sp)
 8008ad0:	94800094 	ori	r18,r18,2
 8008ad4:	00800084 	movi	r2,2
 8008ad8:	003fd306 	br	8008a28 <__alt_data_end+0xfc008a28>
 8008adc:	d9012317 	ldw	r4,1164(sp)
 8008ae0:	d9412317 	ldw	r5,1164(sp)
 8008ae4:	21000017 	ldw	r4,0(r4)
 8008ae8:	28800104 	addi	r2,r5,4
 8008aec:	d9012415 	stw	r4,1168(sp)
 8008af0:	203eeb16 	blt	r4,zero,80086a0 <__alt_data_end+0xfc0086a0>
 8008af4:	d8812315 	stw	r2,1164(sp)
 8008af8:	b9800007 	ldb	r6,0(r23)
 8008afc:	003e3e06 	br	80083f8 <__alt_data_end+0xfc0083f8>
 8008b00:	b9800007 	ldb	r6,0(r23)
 8008b04:	01000a84 	movi	r4,42
 8008b08:	b8800044 	addi	r2,r23,1
 8008b0c:	3102d226 	beq	r6,r4,8009658 <___vfiprintf_internal_r+0x13e4>
 8008b10:	35bff404 	addi	r22,r6,-48
 8008b14:	102f883a 	mov	r23,r2
 8008b18:	0021883a 	mov	r16,zero
 8008b1c:	adbe3736 	bltu	r21,r22,80083fc <__alt_data_end+0xfc0083fc>
 8008b20:	0009883a 	mov	r4,zero
 8008b24:	01400284 	movi	r5,10
 8008b28:	800ad900 	call	800ad90 <__mulsi3>
 8008b2c:	b9800007 	ldb	r6,0(r23)
 8008b30:	b089883a 	add	r4,r22,r2
 8008b34:	bdc00044 	addi	r23,r23,1
 8008b38:	35bff404 	addi	r22,r6,-48
 8008b3c:	adbff92e 	bgeu	r21,r22,8008b24 <__alt_data_end+0xfc008b24>
 8008b40:	2021883a 	mov	r16,r4
 8008b44:	203e2d0e 	bge	r4,zero,80083fc <__alt_data_end+0xfc0083fc>
 8008b48:	043fffc4 	movi	r16,-1
 8008b4c:	003e2b06 	br	80083fc <__alt_data_end+0xfc0083fc>
 8008b50:	94801014 	ori	r18,r18,64
 8008b54:	b9800007 	ldb	r6,0(r23)
 8008b58:	003e2706 	br	80083f8 <__alt_data_end+0xfc0083f8>
 8008b5c:	94800814 	ori	r18,r18,32
 8008b60:	b9800007 	ldb	r6,0(r23)
 8008b64:	003e2406 	br	80083f8 <__alt_data_end+0xfc0083f8>
 8008b68:	d9412317 	ldw	r5,1164(sp)
 8008b6c:	d8812317 	ldw	r2,1164(sp)
 8008b70:	d8011d85 	stb	zero,1142(sp)
 8008b74:	29400017 	ldw	r5,0(r5)
 8008b78:	9811883a 	mov	r8,r19
 8008b7c:	14c00104 	addi	r19,r2,4
 8008b80:	d9412215 	stw	r5,1160(sp)
 8008b84:	28029026 	beq	r5,zero,80095c8 <___vfiprintf_internal_r+0x1354>
 8008b88:	d9012217 	ldw	r4,1160(sp)
 8008b8c:	80027616 	blt	r16,zero,8009568 <___vfiprintf_internal_r+0x12f4>
 8008b90:	000b883a 	mov	r5,zero
 8008b94:	800d883a 	mov	r6,r16
 8008b98:	da012a15 	stw	r8,1192(sp)
 8008b9c:	80064300 	call	8006430 <memchr>
 8008ba0:	da012a17 	ldw	r8,1192(sp)
 8008ba4:	1002a026 	beq	r2,zero,8009628 <___vfiprintf_internal_r+0x13b4>
 8008ba8:	d8c12217 	ldw	r3,1160(sp)
 8008bac:	10e9c83a 	sub	r20,r2,r3
 8008bb0:	85023816 	blt	r16,r20,8009494 <___vfiprintf_internal_r+0x1220>
 8008bb4:	dd811d83 	ldbu	r22,1142(sp)
 8008bb8:	dcc12315 	stw	r19,1164(sp)
 8008bbc:	0021883a 	mov	r16,zero
 8008bc0:	003efd06 	br	80087b8 <__alt_data_end+0xfc0087b8>
 8008bc4:	9080080c 	andi	r2,r18,32
 8008bc8:	9811883a 	mov	r8,r19
 8008bcc:	103f9e1e 	bne	r2,zero,8008a48 <__alt_data_end+0xfc008a48>
 8008bd0:	9080040c 	andi	r2,r18,16
 8008bd4:	10021726 	beq	r2,zero,8009434 <___vfiprintf_internal_r+0x11c0>
 8008bd8:	d9412317 	ldw	r5,1164(sp)
 8008bdc:	002b883a 	mov	r21,zero
 8008be0:	00800044 	movi	r2,1
 8008be4:	2cc00017 	ldw	r19,0(r5)
 8008be8:	29400104 	addi	r5,r5,4
 8008bec:	d9412315 	stw	r5,1164(sp)
 8008bf0:	9807883a 	mov	r3,r19
 8008bf4:	003f8c06 	br	8008a28 <__alt_data_end+0xfc008a28>
 8008bf8:	d8c12203 	ldbu	r3,1160(sp)
 8008bfc:	01020074 	movhi	r4,2049
 8008c00:	21013304 	addi	r4,r4,1228
 8008c04:	d8c11d85 	stb	r3,1142(sp)
 8008c08:	d9012715 	stw	r4,1180(sp)
 8008c0c:	90c0080c 	andi	r3,r18,32
 8008c10:	9811883a 	mov	r8,r19
 8008c14:	d8812317 	ldw	r2,1164(sp)
 8008c18:	183fa11e 	bne	r3,zero,8008aa0 <__alt_data_end+0xfc008aa0>
 8008c1c:	90c0040c 	andi	r3,r18,16
 8008c20:	1801e526 	beq	r3,zero,80093b8 <___vfiprintf_internal_r+0x1144>
 8008c24:	d9412317 	ldw	r5,1164(sp)
 8008c28:	14c00017 	ldw	r19,0(r2)
 8008c2c:	002b883a 	mov	r21,zero
 8008c30:	29400104 	addi	r5,r5,4
 8008c34:	d9412315 	stw	r5,1164(sp)
 8008c38:	003f9e06 	br	8008ab4 <__alt_data_end+0xfc008ab4>
 8008c3c:	9080080c 	andi	r2,r18,32
 8008c40:	9811883a 	mov	r8,r19
 8008c44:	103f701e 	bne	r2,zero,8008a08 <__alt_data_end+0xfc008a08>
 8008c48:	9080040c 	andi	r2,r18,16
 8008c4c:	1001ef26 	beq	r2,zero,800940c <___vfiprintf_internal_r+0x1198>
 8008c50:	d9012317 	ldw	r4,1164(sp)
 8008c54:	002b883a 	mov	r21,zero
 8008c58:	0005883a 	mov	r2,zero
 8008c5c:	24c00017 	ldw	r19,0(r4)
 8008c60:	21000104 	addi	r4,r4,4
 8008c64:	d9012315 	stw	r4,1164(sp)
 8008c68:	9807883a 	mov	r3,r19
 8008c6c:	003f6e06 	br	8008a28 <__alt_data_end+0xfc008a28>
 8008c70:	d8c12317 	ldw	r3,1164(sp)
 8008c74:	9811883a 	mov	r8,r19
 8008c78:	00800c04 	movi	r2,48
 8008c7c:	1cc00017 	ldw	r19,0(r3)
 8008c80:	01020074 	movhi	r4,2049
 8008c84:	18c00104 	addi	r3,r3,4
 8008c88:	d8811d05 	stb	r2,1140(sp)
 8008c8c:	21013304 	addi	r4,r4,1228
 8008c90:	00801e04 	movi	r2,120
 8008c94:	d8811d45 	stb	r2,1141(sp)
 8008c98:	d8c12315 	stw	r3,1164(sp)
 8008c9c:	002b883a 	mov	r21,zero
 8008ca0:	94800094 	ori	r18,r18,2
 8008ca4:	d9012715 	stw	r4,1180(sp)
 8008ca8:	00800084 	movi	r2,2
 8008cac:	9807883a 	mov	r3,r19
 8008cb0:	003f5d06 	br	8008a28 <__alt_data_end+0xfc008a28>
 8008cb4:	d8c12203 	ldbu	r3,1160(sp)
 8008cb8:	9080080c 	andi	r2,r18,32
 8008cbc:	9811883a 	mov	r8,r19
 8008cc0:	d8c11d85 	stb	r3,1142(sp)
 8008cc4:	1001b126 	beq	r2,zero,800938c <___vfiprintf_internal_r+0x1118>
 8008cc8:	d9012317 	ldw	r4,1164(sp)
 8008ccc:	d9412517 	ldw	r5,1172(sp)
 8008cd0:	20800017 	ldw	r2,0(r4)
 8008cd4:	2807d7fa 	srai	r3,r5,31
 8008cd8:	21000104 	addi	r4,r4,4
 8008cdc:	d9012315 	stw	r4,1164(sp)
 8008ce0:	11400015 	stw	r5,0(r2)
 8008ce4:	10c00115 	stw	r3,4(r2)
 8008ce8:	003d9a06 	br	8008354 <__alt_data_end+0xfc008354>
 8008cec:	d8812207 	ldb	r2,1160(sp)
 8008cf0:	1001c41e 	bne	r2,zero,8009404 <___vfiprintf_internal_r+0x1190>
 8008cf4:	00c00804 	movi	r3,32
 8008cf8:	d8c12205 	stb	r3,1160(sp)
 8008cfc:	b9800007 	ldb	r6,0(r23)
 8008d00:	003dbd06 	br	80083f8 <__alt_data_end+0xfc0083f8>
 8008d04:	00c00ac4 	movi	r3,43
 8008d08:	d8c12205 	stb	r3,1160(sp)
 8008d0c:	b9800007 	ldb	r6,0(r23)
 8008d10:	003db906 	br	80083f8 <__alt_data_end+0xfc0083f8>
 8008d14:	d8c12203 	ldbu	r3,1160(sp)
 8008d18:	9080080c 	andi	r2,r18,32
 8008d1c:	9811883a 	mov	r8,r19
 8008d20:	d8c11d85 	stb	r3,1142(sp)
 8008d24:	d8c12317 	ldw	r3,1164(sp)
 8008d28:	103e7e1e 	bne	r2,zero,8008724 <__alt_data_end+0xfc008724>
 8008d2c:	9080040c 	andi	r2,r18,16
 8008d30:	1001a926 	beq	r2,zero,80093d8 <___vfiprintf_internal_r+0x1164>
 8008d34:	1cc00017 	ldw	r19,0(r3)
 8008d38:	d9412317 	ldw	r5,1164(sp)
 8008d3c:	982bd7fa 	srai	r21,r19,31
 8008d40:	29400104 	addi	r5,r5,4
 8008d44:	d9412315 	stw	r5,1164(sp)
 8008d48:	a805883a 	mov	r2,r21
 8008d4c:	003e7b06 	br	800873c <__alt_data_end+0xfc00873c>
 8008d50:	94800054 	ori	r18,r18,1
 8008d54:	b9800007 	ldb	r6,0(r23)
 8008d58:	003da706 	br	80083f8 <__alt_data_end+0xfc0083f8>
 8008d5c:	d8c12203 	ldbu	r3,1160(sp)
 8008d60:	9811883a 	mov	r8,r19
 8008d64:	d8c11d85 	stb	r3,1142(sp)
 8008d68:	30005826 	beq	r6,zero,8008ecc <___vfiprintf_internal_r+0xc58>
 8008d6c:	05400044 	movi	r21,1
 8008d70:	d8c10004 	addi	r3,sp,1024
 8008d74:	d9810005 	stb	r6,1024(sp)
 8008d78:	d8011d85 	stb	zero,1142(sp)
 8008d7c:	a829883a 	mov	r20,r21
 8008d80:	d8c12215 	stw	r3,1160(sp)
 8008d84:	003f1a06 	br	80089f0 <__alt_data_end+0xfc0089f0>
 8008d88:	d9012117 	ldw	r4,1156(sp)
 8008d8c:	d9412017 	ldw	r5,1152(sp)
 8008d90:	d9811a04 	addi	r6,sp,1128
 8008d94:	d9c12a15 	stw	r7,1192(sp)
 8008d98:	db012b15 	stw	r12,1196(sp)
 8008d9c:	80081600 	call	8008160 <__sprint_r.part.0>
 8008da0:	d9c12a17 	ldw	r7,1192(sp)
 8008da4:	db012b17 	ldw	r12,1196(sp)
 8008da8:	10004e1e 	bne	r2,zero,8008ee4 <___vfiprintf_internal_r+0xc70>
 8008dac:	d9011b17 	ldw	r4,1132(sp)
 8008db0:	d8c11c17 	ldw	r3,1136(sp)
 8008db4:	d811883a 	mov	r8,sp
 8008db8:	21400044 	addi	r5,r4,1
 8008dbc:	003e9d06 	br	8008834 <__alt_data_end+0xfc008834>
 8008dc0:	d9411b17 	ldw	r5,1132(sp)
 8008dc4:	d8c11c17 	ldw	r3,1136(sp)
 8008dc8:	28800044 	addi	r2,r5,1
 8008dcc:	d9011d87 	ldb	r4,1142(sp)
 8008dd0:	203eb626 	beq	r4,zero,80088ac <__alt_data_end+0xfc0088ac>
 8008dd4:	01000044 	movi	r4,1
 8008dd8:	d9411d84 	addi	r5,sp,1142
 8008ddc:	1907883a 	add	r3,r3,r4
 8008de0:	41400015 	stw	r5,0(r8)
 8008de4:	41000115 	stw	r4,4(r8)
 8008de8:	d8c11c15 	stw	r3,1136(sp)
 8008dec:	d8811b15 	stw	r2,1132(sp)
 8008df0:	014001c4 	movi	r5,7
 8008df4:	2880ce16 	blt	r5,r2,8009130 <___vfiprintf_internal_r+0xebc>
 8008df8:	100b883a 	mov	r5,r2
 8008dfc:	42000204 	addi	r8,r8,8
 8008e00:	10800044 	addi	r2,r2,1
 8008e04:	003ea906 	br	80088ac <__alt_data_end+0xfc0088ac>
 8008e08:	d9012117 	ldw	r4,1156(sp)
 8008e0c:	d9412017 	ldw	r5,1152(sp)
 8008e10:	d9811a04 	addi	r6,sp,1128
 8008e14:	80081600 	call	8008160 <__sprint_r.part.0>
 8008e18:	1000321e 	bne	r2,zero,8008ee4 <___vfiprintf_internal_r+0xc70>
 8008e1c:	d9411b17 	ldw	r5,1132(sp)
 8008e20:	d8c11c17 	ldw	r3,1136(sp)
 8008e24:	d811883a 	mov	r8,sp
 8008e28:	28800044 	addi	r2,r5,1
 8008e2c:	003eba06 	br	8008918 <__alt_data_end+0xfc008918>
 8008e30:	10803fcc 	andi	r2,r2,255
 8008e34:	00c00044 	movi	r3,1
 8008e38:	10fe4d1e 	bne	r2,r3,8008770 <__alt_data_end+0xfc008770>
 8008e3c:	a800021e 	bne	r21,zero,8008e48 <___vfiprintf_internal_r+0xbd4>
 8008e40:	00800244 	movi	r2,9
 8008e44:	14c01b2e 	bgeu	r2,r19,8008eb4 <___vfiprintf_internal_r+0xc40>
 8008e48:	dc012215 	stw	r16,1160(sp)
 8008e4c:	dd010a04 	addi	r20,sp,1064
 8008e50:	a821883a 	mov	r16,r21
 8008e54:	402b883a 	mov	r21,r8
 8008e58:	9809883a 	mov	r4,r19
 8008e5c:	800b883a 	mov	r5,r16
 8008e60:	01800284 	movi	r6,10
 8008e64:	000f883a 	mov	r7,zero
 8008e68:	800a6480 	call	800a648 <__umoddi3>
 8008e6c:	10800c04 	addi	r2,r2,48
 8008e70:	a53fffc4 	addi	r20,r20,-1
 8008e74:	9809883a 	mov	r4,r19
 8008e78:	800b883a 	mov	r5,r16
 8008e7c:	01800284 	movi	r6,10
 8008e80:	000f883a 	mov	r7,zero
 8008e84:	a0800005 	stb	r2,0(r20)
 8008e88:	800a0080 	call	800a008 <__udivdi3>
 8008e8c:	1027883a 	mov	r19,r2
 8008e90:	10c4b03a 	or	r2,r2,r3
 8008e94:	1821883a 	mov	r16,r3
 8008e98:	103fef1e 	bne	r2,zero,8008e58 <__alt_data_end+0xfc008e58>
 8008e9c:	d9011e17 	ldw	r4,1144(sp)
 8008ea0:	dc012217 	ldw	r16,1160(sp)
 8008ea4:	a811883a 	mov	r8,r21
 8008ea8:	dd012215 	stw	r20,1160(sp)
 8008eac:	2529c83a 	sub	r20,r4,r20
 8008eb0:	003e4106 	br	80087b8 <__alt_data_end+0xfc0087b8>
 8008eb4:	9cc00c04 	addi	r19,r19,48
 8008eb8:	d8c109c4 	addi	r3,sp,1063
 8008ebc:	dcc109c5 	stb	r19,1063(sp)
 8008ec0:	dd012817 	ldw	r20,1184(sp)
 8008ec4:	d8c12215 	stw	r3,1160(sp)
 8008ec8:	003e3b06 	br	80087b8 <__alt_data_end+0xfc0087b8>
 8008ecc:	d8811c17 	ldw	r2,1136(sp)
 8008ed0:	10000426 	beq	r2,zero,8008ee4 <___vfiprintf_internal_r+0xc70>
 8008ed4:	d9012117 	ldw	r4,1156(sp)
 8008ed8:	d9412017 	ldw	r5,1152(sp)
 8008edc:	d9811a04 	addi	r6,sp,1128
 8008ee0:	80081600 	call	8008160 <__sprint_r.part.0>
 8008ee4:	d9412017 	ldw	r5,1152(sp)
 8008ee8:	2880030b 	ldhu	r2,12(r5)
 8008eec:	1080100c 	andi	r2,r2,64
 8008ef0:	103ddc1e 	bne	r2,zero,8008664 <__alt_data_end+0xfc008664>
 8008ef4:	d8812517 	ldw	r2,1172(sp)
 8008ef8:	003ddb06 	br	8008668 <__alt_data_end+0xfc008668>
 8008efc:	1801061e 	bne	r3,zero,8009318 <___vfiprintf_internal_r+0x10a4>
 8008f00:	d8c12217 	ldw	r3,1160(sp)
 8008f04:	00800044 	movi	r2,1
 8008f08:	dd000115 	stw	r20,4(sp)
 8008f0c:	d8c00015 	stw	r3,0(sp)
 8008f10:	dd011c15 	stw	r20,1136(sp)
 8008f14:	d8811b15 	stw	r2,1132(sp)
 8008f18:	a007883a 	mov	r3,r20
 8008f1c:	d811883a 	mov	r8,sp
 8008f20:	42000204 	addi	r8,r8,8
 8008f24:	9480010c 	andi	r18,r18,4
 8008f28:	90003426 	beq	r18,zero,8008ffc <___vfiprintf_internal_r+0xd88>
 8008f2c:	d9412417 	ldw	r5,1168(sp)
 8008f30:	2d65c83a 	sub	r18,r5,r21
 8008f34:	0480310e 	bge	zero,r18,8008ffc <___vfiprintf_internal_r+0xd88>
 8008f38:	04000404 	movi	r16,16
 8008f3c:	8481ad0e 	bge	r16,r18,80095f4 <___vfiprintf_internal_r+0x1380>
 8008f40:	01420074 	movhi	r5,2049
 8008f44:	29419804 	addi	r5,r5,1632
 8008f48:	d9011b17 	ldw	r4,1132(sp)
 8008f4c:	d9412615 	stw	r5,1176(sp)
 8008f50:	04c001c4 	movi	r19,7
 8008f54:	dd012117 	ldw	r20,1156(sp)
 8008f58:	dd812017 	ldw	r22,1152(sp)
 8008f5c:	00000506 	br	8008f74 <___vfiprintf_internal_r+0xd00>
 8008f60:	21400084 	addi	r5,r4,2
 8008f64:	42000204 	addi	r8,r8,8
 8008f68:	1009883a 	mov	r4,r2
 8008f6c:	94bffc04 	addi	r18,r18,-16
 8008f70:	84800d0e 	bge	r16,r18,8008fa8 <___vfiprintf_internal_r+0xd34>
 8008f74:	18c00404 	addi	r3,r3,16
 8008f78:	20800044 	addi	r2,r4,1
 8008f7c:	47000015 	stw	fp,0(r8)
 8008f80:	44000115 	stw	r16,4(r8)
 8008f84:	d8c11c15 	stw	r3,1136(sp)
 8008f88:	d8811b15 	stw	r2,1132(sp)
 8008f8c:	98bff40e 	bge	r19,r2,8008f60 <__alt_data_end+0xfc008f60>
 8008f90:	1800291e 	bne	r3,zero,8009038 <___vfiprintf_internal_r+0xdc4>
 8008f94:	94bffc04 	addi	r18,r18,-16
 8008f98:	0009883a 	mov	r4,zero
 8008f9c:	01400044 	movi	r5,1
 8008fa0:	d811883a 	mov	r8,sp
 8008fa4:	84bff316 	blt	r16,r18,8008f74 <__alt_data_end+0xfc008f74>
 8008fa8:	d8812617 	ldw	r2,1176(sp)
 8008fac:	1c87883a 	add	r3,r3,r18
 8008fb0:	44800115 	stw	r18,4(r8)
 8008fb4:	40800015 	stw	r2,0(r8)
 8008fb8:	d8c11c15 	stw	r3,1136(sp)
 8008fbc:	d9411b15 	stw	r5,1132(sp)
 8008fc0:	008001c4 	movi	r2,7
 8008fc4:	11400d0e 	bge	r2,r5,8008ffc <___vfiprintf_internal_r+0xd88>
 8008fc8:	1800061e 	bne	r3,zero,8008fe4 <___vfiprintf_internal_r+0xd70>
 8008fcc:	d8c12417 	ldw	r3,1168(sp)
 8008fd0:	a8c12e16 	blt	r21,r3,800948c <___vfiprintf_internal_r+0x1218>
 8008fd4:	d9012517 	ldw	r4,1172(sp)
 8008fd8:	2549883a 	add	r4,r4,r21
 8008fdc:	d9012515 	stw	r4,1172(sp)
 8008fe0:	00001206 	br	800902c <___vfiprintf_internal_r+0xdb8>
 8008fe4:	d9012117 	ldw	r4,1156(sp)
 8008fe8:	d9412017 	ldw	r5,1152(sp)
 8008fec:	d9811a04 	addi	r6,sp,1128
 8008ff0:	80081600 	call	8008160 <__sprint_r.part.0>
 8008ff4:	103fbb1e 	bne	r2,zero,8008ee4 <__alt_data_end+0xfc008ee4>
 8008ff8:	d8c11c17 	ldw	r3,1136(sp)
 8008ffc:	d8812417 	ldw	r2,1168(sp)
 8009000:	a880010e 	bge	r21,r2,8009008 <___vfiprintf_internal_r+0xd94>
 8009004:	102b883a 	mov	r21,r2
 8009008:	d9012517 	ldw	r4,1172(sp)
 800900c:	2549883a 	add	r4,r4,r21
 8009010:	d9012515 	stw	r4,1172(sp)
 8009014:	18000526 	beq	r3,zero,800902c <___vfiprintf_internal_r+0xdb8>
 8009018:	d9012117 	ldw	r4,1156(sp)
 800901c:	d9412017 	ldw	r5,1152(sp)
 8009020:	d9811a04 	addi	r6,sp,1128
 8009024:	80081600 	call	8008160 <__sprint_r.part.0>
 8009028:	103fae1e 	bne	r2,zero,8008ee4 <__alt_data_end+0xfc008ee4>
 800902c:	d8011b15 	stw	zero,1132(sp)
 8009030:	d811883a 	mov	r8,sp
 8009034:	003cc706 	br	8008354 <__alt_data_end+0xfc008354>
 8009038:	a009883a 	mov	r4,r20
 800903c:	b00b883a 	mov	r5,r22
 8009040:	d9811a04 	addi	r6,sp,1128
 8009044:	80081600 	call	8008160 <__sprint_r.part.0>
 8009048:	103fa61e 	bne	r2,zero,8008ee4 <__alt_data_end+0xfc008ee4>
 800904c:	d9011b17 	ldw	r4,1132(sp)
 8009050:	d8c11c17 	ldw	r3,1136(sp)
 8009054:	d811883a 	mov	r8,sp
 8009058:	21400044 	addi	r5,r4,1
 800905c:	003fc306 	br	8008f6c <__alt_data_end+0xfc008f6c>
 8009060:	d9012417 	ldw	r4,1168(sp)
 8009064:	256dc83a 	sub	r22,r4,r21
 8009068:	05be1f0e 	bge	zero,r22,80088e8 <__alt_data_end+0xfc0088e8>
 800906c:	04c00404 	movi	r19,16
 8009070:	9d81720e 	bge	r19,r22,800963c <___vfiprintf_internal_r+0x13c8>
 8009074:	00820074 	movhi	r2,2049
 8009078:	10819404 	addi	r2,r2,1616
 800907c:	d8812615 	stw	r2,1176(sp)
 8009080:	028001c4 	movi	r10,7
 8009084:	00000506 	br	800909c <___vfiprintf_internal_r+0xe28>
 8009088:	29000084 	addi	r4,r5,2
 800908c:	42000204 	addi	r8,r8,8
 8009090:	100b883a 	mov	r5,r2
 8009094:	b5bffc04 	addi	r22,r22,-16
 8009098:	9d800d0e 	bge	r19,r22,80090d0 <___vfiprintf_internal_r+0xe5c>
 800909c:	18c00404 	addi	r3,r3,16
 80090a0:	28800044 	addi	r2,r5,1
 80090a4:	44400015 	stw	r17,0(r8)
 80090a8:	44c00115 	stw	r19,4(r8)
 80090ac:	d8c11c15 	stw	r3,1136(sp)
 80090b0:	d8811b15 	stw	r2,1132(sp)
 80090b4:	50bff40e 	bge	r10,r2,8009088 <__alt_data_end+0xfc009088>
 80090b8:	1800111e 	bne	r3,zero,8009100 <___vfiprintf_internal_r+0xe8c>
 80090bc:	b5bffc04 	addi	r22,r22,-16
 80090c0:	000b883a 	mov	r5,zero
 80090c4:	01000044 	movi	r4,1
 80090c8:	d811883a 	mov	r8,sp
 80090cc:	9dbff316 	blt	r19,r22,800909c <__alt_data_end+0xfc00909c>
 80090d0:	d9412617 	ldw	r5,1176(sp)
 80090d4:	1d87883a 	add	r3,r3,r22
 80090d8:	45800115 	stw	r22,4(r8)
 80090dc:	41400015 	stw	r5,0(r8)
 80090e0:	d8c11c15 	stw	r3,1136(sp)
 80090e4:	d9011b15 	stw	r4,1132(sp)
 80090e8:	008001c4 	movi	r2,7
 80090ec:	11008516 	blt	r2,r4,8009304 <___vfiprintf_internal_r+0x1090>
 80090f0:	42000204 	addi	r8,r8,8
 80090f4:	20800044 	addi	r2,r4,1
 80090f8:	200b883a 	mov	r5,r4
 80090fc:	003dfa06 	br	80088e8 <__alt_data_end+0xfc0088e8>
 8009100:	d9012117 	ldw	r4,1156(sp)
 8009104:	d9412017 	ldw	r5,1152(sp)
 8009108:	d9811a04 	addi	r6,sp,1128
 800910c:	da812a15 	stw	r10,1192(sp)
 8009110:	80081600 	call	8008160 <__sprint_r.part.0>
 8009114:	da812a17 	ldw	r10,1192(sp)
 8009118:	103f721e 	bne	r2,zero,8008ee4 <__alt_data_end+0xfc008ee4>
 800911c:	d9411b17 	ldw	r5,1132(sp)
 8009120:	d8c11c17 	ldw	r3,1136(sp)
 8009124:	d811883a 	mov	r8,sp
 8009128:	29000044 	addi	r4,r5,1
 800912c:	003fd906 	br	8009094 <__alt_data_end+0xfc009094>
 8009130:	1800681e 	bne	r3,zero,80092d4 <___vfiprintf_internal_r+0x1060>
 8009134:	50004d26 	beq	r10,zero,800926c <___vfiprintf_internal_r+0xff8>
 8009138:	d8811d04 	addi	r2,sp,1140
 800913c:	00c00084 	movi	r3,2
 8009140:	d8800015 	stw	r2,0(sp)
 8009144:	d8c00115 	stw	r3,4(sp)
 8009148:	2005883a 	mov	r2,r4
 800914c:	d811883a 	mov	r8,sp
 8009150:	003de006 	br	80088d4 <__alt_data_end+0xfc0088d4>
 8009154:	1800551e 	bne	r3,zero,80092ac <___vfiprintf_internal_r+0x1038>
 8009158:	000b883a 	mov	r5,zero
 800915c:	00800044 	movi	r2,1
 8009160:	d811883a 	mov	r8,sp
 8009164:	003dde06 	br	80088e0 <__alt_data_end+0xfc0088e0>
 8009168:	10803fcc 	andi	r2,r2,255
 800916c:	1000191e 	bne	r2,zero,80091d4 <___vfiprintf_internal_r+0xf60>
 8009170:	9080004c 	andi	r2,r18,1
 8009174:	10001726 	beq	r2,zero,80091d4 <___vfiprintf_internal_r+0xf60>
 8009178:	00800c04 	movi	r2,48
 800917c:	d8c109c4 	addi	r3,sp,1063
 8009180:	d88109c5 	stb	r2,1063(sp)
 8009184:	dd012817 	ldw	r20,1184(sp)
 8009188:	d8c12215 	stw	r3,1160(sp)
 800918c:	003d8a06 	br	80087b8 <__alt_data_end+0xfc0087b8>
 8009190:	d9012717 	ldw	r4,1180(sp)
 8009194:	dd010a04 	addi	r20,sp,1064
 8009198:	988003cc 	andi	r2,r19,15
 800919c:	a806973a 	slli	r3,r21,28
 80091a0:	2085883a 	add	r2,r4,r2
 80091a4:	9826d13a 	srli	r19,r19,4
 80091a8:	10800003 	ldbu	r2,0(r2)
 80091ac:	a82ad13a 	srli	r21,r21,4
 80091b0:	a53fffc4 	addi	r20,r20,-1
 80091b4:	1ce6b03a 	or	r19,r3,r19
 80091b8:	a0800005 	stb	r2,0(r20)
 80091bc:	9d44b03a 	or	r2,r19,r21
 80091c0:	103ff51e 	bne	r2,zero,8009198 <__alt_data_end+0xfc009198>
 80091c4:	d9411e17 	ldw	r5,1144(sp)
 80091c8:	dd012215 	stw	r20,1160(sp)
 80091cc:	2d29c83a 	sub	r20,r5,r20
 80091d0:	003d7906 	br	80087b8 <__alt_data_end+0xfc0087b8>
 80091d4:	d8c10a04 	addi	r3,sp,1064
 80091d8:	d8c12215 	stw	r3,1160(sp)
 80091dc:	003d7606 	br	80087b8 <__alt_data_end+0xfc0087b8>
 80091e0:	18009e1e 	bne	r3,zero,800945c <___vfiprintf_internal_r+0x11e8>
 80091e4:	d8811d87 	ldb	r2,1142(sp)
 80091e8:	10005f26 	beq	r2,zero,8009368 <___vfiprintf_internal_r+0x10f4>
 80091ec:	00c00044 	movi	r3,1
 80091f0:	d9011d84 	addi	r4,sp,1142
 80091f4:	1805883a 	mov	r2,r3
 80091f8:	d9000015 	stw	r4,0(sp)
 80091fc:	d8c00115 	stw	r3,4(sp)
 8009200:	d811883a 	mov	r8,sp
 8009204:	003efc06 	br	8008df8 <__alt_data_end+0xfc008df8>
 8009208:	d9412417 	ldw	r5,1168(sp)
 800920c:	d811883a 	mov	r8,sp
 8009210:	2d65c83a 	sub	r18,r5,r21
 8009214:	04bf4816 	blt	zero,r18,8008f38 <__alt_data_end+0xfc008f38>
 8009218:	003f6c06 	br	8008fcc <__alt_data_end+0xfc008fcc>
 800921c:	b829883a 	mov	r20,r23
 8009220:	003c6906 	br	80083c8 <__alt_data_end+0xfc0083c8>
 8009224:	d9012117 	ldw	r4,1156(sp)
 8009228:	d9412017 	ldw	r5,1152(sp)
 800922c:	d9811a04 	addi	r6,sp,1128
 8009230:	80081600 	call	8008160 <__sprint_r.part.0>
 8009234:	103f2b1e 	bne	r2,zero,8008ee4 <__alt_data_end+0xfc008ee4>
 8009238:	d8c11c17 	ldw	r3,1136(sp)
 800923c:	d811883a 	mov	r8,sp
 8009240:	003f3806 	br	8008f24 <__alt_data_end+0xfc008f24>
 8009244:	00800084 	movi	r2,2
 8009248:	9d46b03a 	or	r3,r19,r21
 800924c:	003df606 	br	8008a28 <__alt_data_end+0xfc008a28>
 8009250:	d9012117 	ldw	r4,1156(sp)
 8009254:	d9412017 	ldw	r5,1152(sp)
 8009258:	d9811a04 	addi	r6,sp,1128
 800925c:	80081600 	call	8008160 <__sprint_r.part.0>
 8009260:	103f201e 	bne	r2,zero,8008ee4 <__alt_data_end+0xfc008ee4>
 8009264:	d811883a 	mov	r8,sp
 8009268:	003cc606 	br	8008584 <__alt_data_end+0xfc008584>
 800926c:	000b883a 	mov	r5,zero
 8009270:	2005883a 	mov	r2,r4
 8009274:	d811883a 	mov	r8,sp
 8009278:	003d9906 	br	80088e0 <__alt_data_end+0xfc0088e0>
 800927c:	10803fcc 	andi	r2,r2,255
 8009280:	1080201c 	xori	r2,r2,128
 8009284:	10bfe004 	addi	r2,r2,-128
 8009288:	01000c04 	movi	r4,48
 800928c:	1100b226 	beq	r2,r4,8009558 <___vfiprintf_internal_r+0x12e4>
 8009290:	d9412217 	ldw	r5,1160(sp)
 8009294:	d8811e17 	ldw	r2,1144(sp)
 8009298:	193fffc5 	stb	r4,-1(r3)
 800929c:	297fffc4 	addi	r5,r5,-1
 80092a0:	d9412215 	stw	r5,1160(sp)
 80092a4:	1169c83a 	sub	r20,r2,r5
 80092a8:	003d4306 	br	80087b8 <__alt_data_end+0xfc0087b8>
 80092ac:	d9012117 	ldw	r4,1156(sp)
 80092b0:	d9412017 	ldw	r5,1152(sp)
 80092b4:	d9811a04 	addi	r6,sp,1128
 80092b8:	80081600 	call	8008160 <__sprint_r.part.0>
 80092bc:	103f091e 	bne	r2,zero,8008ee4 <__alt_data_end+0xfc008ee4>
 80092c0:	d9411b17 	ldw	r5,1132(sp)
 80092c4:	d8c11c17 	ldw	r3,1136(sp)
 80092c8:	d811883a 	mov	r8,sp
 80092cc:	28800044 	addi	r2,r5,1
 80092d0:	003d8306 	br	80088e0 <__alt_data_end+0xfc0088e0>
 80092d4:	d9012117 	ldw	r4,1156(sp)
 80092d8:	d9412017 	ldw	r5,1152(sp)
 80092dc:	d9811a04 	addi	r6,sp,1128
 80092e0:	da812a15 	stw	r10,1192(sp)
 80092e4:	80081600 	call	8008160 <__sprint_r.part.0>
 80092e8:	da812a17 	ldw	r10,1192(sp)
 80092ec:	103efd1e 	bne	r2,zero,8008ee4 <__alt_data_end+0xfc008ee4>
 80092f0:	d9411b17 	ldw	r5,1132(sp)
 80092f4:	d8c11c17 	ldw	r3,1136(sp)
 80092f8:	d811883a 	mov	r8,sp
 80092fc:	28800044 	addi	r2,r5,1
 8009300:	003d6a06 	br	80088ac <__alt_data_end+0xfc0088ac>
 8009304:	1800a01e 	bne	r3,zero,8009588 <___vfiprintf_internal_r+0x1314>
 8009308:	000b883a 	mov	r5,zero
 800930c:	00800044 	movi	r2,1
 8009310:	d811883a 	mov	r8,sp
 8009314:	003d7406 	br	80088e8 <__alt_data_end+0xfc0088e8>
 8009318:	d9012117 	ldw	r4,1156(sp)
 800931c:	d9412017 	ldw	r5,1152(sp)
 8009320:	d9811a04 	addi	r6,sp,1128
 8009324:	80081600 	call	8008160 <__sprint_r.part.0>
 8009328:	103eee1e 	bne	r2,zero,8008ee4 <__alt_data_end+0xfc008ee4>
 800932c:	d8811b17 	ldw	r2,1132(sp)
 8009330:	d8c11c17 	ldw	r3,1136(sp)
 8009334:	d811883a 	mov	r8,sp
 8009338:	10800044 	addi	r2,r2,1
 800933c:	003d8f06 	br	800897c <__alt_data_end+0xfc00897c>
 8009340:	04e7c83a 	sub	r19,zero,r19
 8009344:	9804c03a 	cmpne	r2,r19,zero
 8009348:	056bc83a 	sub	r21,zero,r21
 800934c:	a8abc83a 	sub	r21,r21,r2
 8009350:	05800b44 	movi	r22,45
 8009354:	dd811d85 	stb	r22,1142(sp)
 8009358:	8029883a 	mov	r20,r16
 800935c:	00800044 	movi	r2,1
 8009360:	9d46b03a 	or	r3,r19,r21
 8009364:	003cfa06 	br	8008750 <__alt_data_end+0xfc008750>
 8009368:	000b883a 	mov	r5,zero
 800936c:	00800044 	movi	r2,1
 8009370:	d811883a 	mov	r8,sp
 8009374:	503d5a26 	beq	r10,zero,80088e0 <__alt_data_end+0xfc0088e0>
 8009378:	00c00084 	movi	r3,2
 800937c:	d9011d04 	addi	r4,sp,1140
 8009380:	d9000015 	stw	r4,0(sp)
 8009384:	d8c00115 	stw	r3,4(sp)
 8009388:	003d5206 	br	80088d4 <__alt_data_end+0xfc0088d4>
 800938c:	9080040c 	andi	r2,r18,16
 8009390:	1000421e 	bne	r2,zero,800949c <___vfiprintf_internal_r+0x1228>
 8009394:	9480100c 	andi	r18,r18,64
 8009398:	90009c26 	beq	r18,zero,800960c <___vfiprintf_internal_r+0x1398>
 800939c:	d9412317 	ldw	r5,1164(sp)
 80093a0:	d8c12517 	ldw	r3,1172(sp)
 80093a4:	28800017 	ldw	r2,0(r5)
 80093a8:	29400104 	addi	r5,r5,4
 80093ac:	d9412315 	stw	r5,1164(sp)
 80093b0:	10c0000d 	sth	r3,0(r2)
 80093b4:	003be706 	br	8008354 <__alt_data_end+0xfc008354>
 80093b8:	90c0100c 	andi	r3,r18,64
 80093bc:	18003e26 	beq	r3,zero,80094b8 <___vfiprintf_internal_r+0x1244>
 80093c0:	d8c12317 	ldw	r3,1164(sp)
 80093c4:	14c0000b 	ldhu	r19,0(r2)
 80093c8:	002b883a 	mov	r21,zero
 80093cc:	18c00104 	addi	r3,r3,4
 80093d0:	d8c12315 	stw	r3,1164(sp)
 80093d4:	003db706 	br	8008ab4 <__alt_data_end+0xfc008ab4>
 80093d8:	9080100c 	andi	r2,r18,64
 80093dc:	10004c26 	beq	r2,zero,8009510 <___vfiprintf_internal_r+0x129c>
 80093e0:	1cc0000f 	ldh	r19,0(r3)
 80093e4:	d8812317 	ldw	r2,1164(sp)
 80093e8:	982bd7fa 	srai	r21,r19,31
 80093ec:	10800104 	addi	r2,r2,4
 80093f0:	d8812315 	stw	r2,1164(sp)
 80093f4:	a805883a 	mov	r2,r21
 80093f8:	003cd006 	br	800873c <__alt_data_end+0xfc00873c>
 80093fc:	00800084 	movi	r2,2
 8009400:	003d8906 	br	8008a28 <__alt_data_end+0xfc008a28>
 8009404:	b9800007 	ldb	r6,0(r23)
 8009408:	003bfb06 	br	80083f8 <__alt_data_end+0xfc0083f8>
 800940c:	9080100c 	andi	r2,r18,64
 8009410:	10003726 	beq	r2,zero,80094f0 <___vfiprintf_internal_r+0x127c>
 8009414:	d9412317 	ldw	r5,1164(sp)
 8009418:	002b883a 	mov	r21,zero
 800941c:	0005883a 	mov	r2,zero
 8009420:	2cc0000b 	ldhu	r19,0(r5)
 8009424:	29400104 	addi	r5,r5,4
 8009428:	d9412315 	stw	r5,1164(sp)
 800942c:	9807883a 	mov	r3,r19
 8009430:	003d7d06 	br	8008a28 <__alt_data_end+0xfc008a28>
 8009434:	9080100c 	andi	r2,r18,64
 8009438:	10002526 	beq	r2,zero,80094d0 <___vfiprintf_internal_r+0x125c>
 800943c:	d8812317 	ldw	r2,1164(sp)
 8009440:	002b883a 	mov	r21,zero
 8009444:	14c0000b 	ldhu	r19,0(r2)
 8009448:	10800104 	addi	r2,r2,4
 800944c:	d8812315 	stw	r2,1164(sp)
 8009450:	9807883a 	mov	r3,r19
 8009454:	00800044 	movi	r2,1
 8009458:	003d7306 	br	8008a28 <__alt_data_end+0xfc008a28>
 800945c:	d9012117 	ldw	r4,1156(sp)
 8009460:	d9412017 	ldw	r5,1152(sp)
 8009464:	d9811a04 	addi	r6,sp,1128
 8009468:	da812a15 	stw	r10,1192(sp)
 800946c:	80081600 	call	8008160 <__sprint_r.part.0>
 8009470:	da812a17 	ldw	r10,1192(sp)
 8009474:	103e9b1e 	bne	r2,zero,8008ee4 <__alt_data_end+0xfc008ee4>
 8009478:	d9411b17 	ldw	r5,1132(sp)
 800947c:	d8c11c17 	ldw	r3,1136(sp)
 8009480:	d811883a 	mov	r8,sp
 8009484:	28800044 	addi	r2,r5,1
 8009488:	003e5006 	br	8008dcc <__alt_data_end+0xfc008dcc>
 800948c:	182b883a 	mov	r21,r3
 8009490:	003ed006 	br	8008fd4 <__alt_data_end+0xfc008fd4>
 8009494:	8029883a 	mov	r20,r16
 8009498:	003dc606 	br	8008bb4 <__alt_data_end+0xfc008bb4>
 800949c:	d8c12317 	ldw	r3,1164(sp)
 80094a0:	d9012517 	ldw	r4,1172(sp)
 80094a4:	18800017 	ldw	r2,0(r3)
 80094a8:	18c00104 	addi	r3,r3,4
 80094ac:	d8c12315 	stw	r3,1164(sp)
 80094b0:	11000015 	stw	r4,0(r2)
 80094b4:	003ba706 	br	8008354 <__alt_data_end+0xfc008354>
 80094b8:	d9012317 	ldw	r4,1164(sp)
 80094bc:	14c00017 	ldw	r19,0(r2)
 80094c0:	002b883a 	mov	r21,zero
 80094c4:	21000104 	addi	r4,r4,4
 80094c8:	d9012315 	stw	r4,1164(sp)
 80094cc:	003d7906 	br	8008ab4 <__alt_data_end+0xfc008ab4>
 80094d0:	d8c12317 	ldw	r3,1164(sp)
 80094d4:	002b883a 	mov	r21,zero
 80094d8:	00800044 	movi	r2,1
 80094dc:	1cc00017 	ldw	r19,0(r3)
 80094e0:	18c00104 	addi	r3,r3,4
 80094e4:	d8c12315 	stw	r3,1164(sp)
 80094e8:	9807883a 	mov	r3,r19
 80094ec:	003d4e06 	br	8008a28 <__alt_data_end+0xfc008a28>
 80094f0:	d8812317 	ldw	r2,1164(sp)
 80094f4:	002b883a 	mov	r21,zero
 80094f8:	14c00017 	ldw	r19,0(r2)
 80094fc:	10800104 	addi	r2,r2,4
 8009500:	d8812315 	stw	r2,1164(sp)
 8009504:	9807883a 	mov	r3,r19
 8009508:	0005883a 	mov	r2,zero
 800950c:	003d4606 	br	8008a28 <__alt_data_end+0xfc008a28>
 8009510:	1cc00017 	ldw	r19,0(r3)
 8009514:	d8c12317 	ldw	r3,1164(sp)
 8009518:	982bd7fa 	srai	r21,r19,31
 800951c:	18c00104 	addi	r3,r3,4
 8009520:	d8c12315 	stw	r3,1164(sp)
 8009524:	a805883a 	mov	r2,r21
 8009528:	003c8406 	br	800873c <__alt_data_end+0xfc00873c>
 800952c:	01020074 	movhi	r4,2049
 8009530:	21019404 	addi	r4,r4,1616
 8009534:	d9012615 	stw	r4,1176(sp)
 8009538:	003d0606 	br	8008954 <__alt_data_end+0xfc008954>
 800953c:	b9800043 	ldbu	r6,1(r23)
 8009540:	94800814 	ori	r18,r18,32
 8009544:	bdc00044 	addi	r23,r23,1
 8009548:	31803fcc 	andi	r6,r6,255
 800954c:	3180201c 	xori	r6,r6,128
 8009550:	31bfe004 	addi	r6,r6,-128
 8009554:	003ba806 	br	80083f8 <__alt_data_end+0xfc0083f8>
 8009558:	d8811e17 	ldw	r2,1144(sp)
 800955c:	d8c12217 	ldw	r3,1160(sp)
 8009560:	10e9c83a 	sub	r20,r2,r3
 8009564:	003c9406 	br	80087b8 <__alt_data_end+0xfc0087b8>
 8009568:	da012a15 	stw	r8,1192(sp)
 800956c:	8000d840 	call	8000d84 <strlen>
 8009570:	1029883a 	mov	r20,r2
 8009574:	dd811d83 	ldbu	r22,1142(sp)
 8009578:	dcc12315 	stw	r19,1164(sp)
 800957c:	0021883a 	mov	r16,zero
 8009580:	da012a17 	ldw	r8,1192(sp)
 8009584:	003c8c06 	br	80087b8 <__alt_data_end+0xfc0087b8>
 8009588:	d9012117 	ldw	r4,1156(sp)
 800958c:	d9412017 	ldw	r5,1152(sp)
 8009590:	d9811a04 	addi	r6,sp,1128
 8009594:	80081600 	call	8008160 <__sprint_r.part.0>
 8009598:	103e521e 	bne	r2,zero,8008ee4 <__alt_data_end+0xfc008ee4>
 800959c:	d9411b17 	ldw	r5,1132(sp)
 80095a0:	d8c11c17 	ldw	r3,1136(sp)
 80095a4:	d811883a 	mov	r8,sp
 80095a8:	28800044 	addi	r2,r5,1
 80095ac:	003cce06 	br	80088e8 <__alt_data_end+0xfc0088e8>
 80095b0:	01420074 	movhi	r5,2049
 80095b4:	29419804 	addi	r5,r5,1632
 80095b8:	d9412615 	stw	r5,1176(sp)
 80095bc:	d9411b17 	ldw	r5,1132(sp)
 80095c0:	29400044 	addi	r5,r5,1
 80095c4:	003cad06 	br	800887c <__alt_data_end+0xfc00887c>
 80095c8:	00800184 	movi	r2,6
 80095cc:	1400012e 	bgeu	r2,r16,80095d4 <___vfiprintf_internal_r+0x1360>
 80095d0:	1021883a 	mov	r16,r2
 80095d4:	8029883a 	mov	r20,r16
 80095d8:	802b883a 	mov	r21,r16
 80095dc:	80001c16 	blt	r16,zero,8009650 <___vfiprintf_internal_r+0x13dc>
 80095e0:	00c20074 	movhi	r3,2049
 80095e4:	18c13804 	addi	r3,r3,1248
 80095e8:	dcc12315 	stw	r19,1164(sp)
 80095ec:	d8c12215 	stw	r3,1160(sp)
 80095f0:	003cff06 	br	80089f0 <__alt_data_end+0xfc0089f0>
 80095f4:	d9411b17 	ldw	r5,1132(sp)
 80095f8:	00820074 	movhi	r2,2049
 80095fc:	10819804 	addi	r2,r2,1632
 8009600:	d8812615 	stw	r2,1176(sp)
 8009604:	29400044 	addi	r5,r5,1
 8009608:	003e6706 	br	8008fa8 <__alt_data_end+0xfc008fa8>
 800960c:	d9012317 	ldw	r4,1164(sp)
 8009610:	d9412517 	ldw	r5,1172(sp)
 8009614:	20800017 	ldw	r2,0(r4)
 8009618:	21000104 	addi	r4,r4,4
 800961c:	d9012315 	stw	r4,1164(sp)
 8009620:	11400015 	stw	r5,0(r2)
 8009624:	003b4b06 	br	8008354 <__alt_data_end+0xfc008354>
 8009628:	8029883a 	mov	r20,r16
 800962c:	dd811d83 	ldbu	r22,1142(sp)
 8009630:	dcc12315 	stw	r19,1164(sp)
 8009634:	0021883a 	mov	r16,zero
 8009638:	003c5f06 	br	80087b8 <__alt_data_end+0xfc0087b8>
 800963c:	01020074 	movhi	r4,2049
 8009640:	21019404 	addi	r4,r4,1616
 8009644:	d9012615 	stw	r4,1176(sp)
 8009648:	1009883a 	mov	r4,r2
 800964c:	003ea006 	br	80090d0 <__alt_data_end+0xfc0090d0>
 8009650:	002b883a 	mov	r21,zero
 8009654:	003fe206 	br	80095e0 <__alt_data_end+0xfc0095e0>
 8009658:	d9412317 	ldw	r5,1164(sp)
 800965c:	b807883a 	mov	r3,r23
 8009660:	102f883a 	mov	r23,r2
 8009664:	2c000017 	ldw	r16,0(r5)
 8009668:	29000104 	addi	r4,r5,4
 800966c:	d9012315 	stw	r4,1164(sp)
 8009670:	80000416 	blt	r16,zero,8009684 <___vfiprintf_internal_r+0x1410>
 8009674:	19800047 	ldb	r6,1(r3)
 8009678:	003b5f06 	br	80083f8 <__alt_data_end+0xfc0083f8>
 800967c:	043fffc4 	movi	r16,-1
 8009680:	003bef06 	br	8008640 <__alt_data_end+0xfc008640>
 8009684:	043fffc4 	movi	r16,-1
 8009688:	19800047 	ldb	r6,1(r3)
 800968c:	003b5a06 	br	80083f8 <__alt_data_end+0xfc0083f8>
 8009690:	282b883a 	mov	r21,r5
 8009694:	003cc706 	br	80089b4 <__alt_data_end+0xfc0089b4>

08009698 <__vfiprintf_internal>:
 8009698:	2007883a 	mov	r3,r4
 800969c:	01020074 	movhi	r4,2049
 80096a0:	2108a604 	addi	r4,r4,8856
 80096a4:	21000017 	ldw	r4,0(r4)
 80096a8:	2805883a 	mov	r2,r5
 80096ac:	300f883a 	mov	r7,r6
 80096b0:	180b883a 	mov	r5,r3
 80096b4:	100d883a 	mov	r6,r2
 80096b8:	80082741 	jmpi	8008274 <___vfiprintf_internal_r>

080096bc <_write_r>:
 80096bc:	defffd04 	addi	sp,sp,-12
 80096c0:	dc000015 	stw	r16,0(sp)
 80096c4:	04020074 	movhi	r16,2049
 80096c8:	dc400115 	stw	r17,4(sp)
 80096cc:	840f8404 	addi	r16,r16,15888
 80096d0:	2023883a 	mov	r17,r4
 80096d4:	2809883a 	mov	r4,r5
 80096d8:	300b883a 	mov	r5,r6
 80096dc:	380d883a 	mov	r6,r7
 80096e0:	dfc00215 	stw	ra,8(sp)
 80096e4:	80000015 	stw	zero,0(r16)
 80096e8:	800ded80 	call	800ded8 <write>
 80096ec:	00ffffc4 	movi	r3,-1
 80096f0:	10c00526 	beq	r2,r3,8009708 <_write_r+0x4c>
 80096f4:	dfc00217 	ldw	ra,8(sp)
 80096f8:	dc400117 	ldw	r17,4(sp)
 80096fc:	dc000017 	ldw	r16,0(sp)
 8009700:	dec00304 	addi	sp,sp,12
 8009704:	f800283a 	ret
 8009708:	80c00017 	ldw	r3,0(r16)
 800970c:	183ff926 	beq	r3,zero,80096f4 <__alt_data_end+0xfc0096f4>
 8009710:	88c00015 	stw	r3,0(r17)
 8009714:	003ff706 	br	80096f4 <__alt_data_end+0xfc0096f4>

08009718 <_close_r>:
 8009718:	defffd04 	addi	sp,sp,-12
 800971c:	dc000015 	stw	r16,0(sp)
 8009720:	04020074 	movhi	r16,2049
 8009724:	dc400115 	stw	r17,4(sp)
 8009728:	840f8404 	addi	r16,r16,15888
 800972c:	2023883a 	mov	r17,r4
 8009730:	2809883a 	mov	r4,r5
 8009734:	dfc00215 	stw	ra,8(sp)
 8009738:	80000015 	stw	zero,0(r16)
 800973c:	800d6040 	call	800d604 <close>
 8009740:	00ffffc4 	movi	r3,-1
 8009744:	10c00526 	beq	r2,r3,800975c <_close_r+0x44>
 8009748:	dfc00217 	ldw	ra,8(sp)
 800974c:	dc400117 	ldw	r17,4(sp)
 8009750:	dc000017 	ldw	r16,0(sp)
 8009754:	dec00304 	addi	sp,sp,12
 8009758:	f800283a 	ret
 800975c:	80c00017 	ldw	r3,0(r16)
 8009760:	183ff926 	beq	r3,zero,8009748 <__alt_data_end+0xfc009748>
 8009764:	88c00015 	stw	r3,0(r17)
 8009768:	003ff706 	br	8009748 <__alt_data_end+0xfc009748>

0800976c <_calloc_r>:
 800976c:	defffe04 	addi	sp,sp,-8
 8009770:	dc000015 	stw	r16,0(sp)
 8009774:	2021883a 	mov	r16,r4
 8009778:	2809883a 	mov	r4,r5
 800977c:	300b883a 	mov	r5,r6
 8009780:	dfc00115 	stw	ra,4(sp)
 8009784:	800ad900 	call	800ad90 <__mulsi3>
 8009788:	8009883a 	mov	r4,r16
 800978c:	100b883a 	mov	r5,r2
 8009790:	8005c880 	call	8005c88 <_malloc_r>
 8009794:	1021883a 	mov	r16,r2
 8009798:	10002826 	beq	r2,zero,800983c <_calloc_r+0xd0>
 800979c:	11bfff17 	ldw	r6,-4(r2)
 80097a0:	00bfff04 	movi	r2,-4
 80097a4:	00c00904 	movi	r3,36
 80097a8:	308c703a 	and	r6,r6,r2
 80097ac:	308d883a 	add	r6,r6,r2
 80097b0:	19801436 	bltu	r3,r6,8009804 <_calloc_r+0x98>
 80097b4:	008004c4 	movi	r2,19
 80097b8:	11800936 	bltu	r2,r6,80097e0 <_calloc_r+0x74>
 80097bc:	8005883a 	mov	r2,r16
 80097c0:	10000015 	stw	zero,0(r2)
 80097c4:	10000115 	stw	zero,4(r2)
 80097c8:	10000215 	stw	zero,8(r2)
 80097cc:	8005883a 	mov	r2,r16
 80097d0:	dfc00117 	ldw	ra,4(sp)
 80097d4:	dc000017 	ldw	r16,0(sp)
 80097d8:	dec00204 	addi	sp,sp,8
 80097dc:	f800283a 	ret
 80097e0:	80000015 	stw	zero,0(r16)
 80097e4:	80000115 	stw	zero,4(r16)
 80097e8:	008006c4 	movi	r2,27
 80097ec:	11800d2e 	bgeu	r2,r6,8009824 <_calloc_r+0xb8>
 80097f0:	80000215 	stw	zero,8(r16)
 80097f4:	80000315 	stw	zero,12(r16)
 80097f8:	30c00c26 	beq	r6,r3,800982c <_calloc_r+0xc0>
 80097fc:	80800404 	addi	r2,r16,16
 8009800:	003fef06 	br	80097c0 <__alt_data_end+0xfc0097c0>
 8009804:	8009883a 	mov	r4,r16
 8009808:	000b883a 	mov	r5,zero
 800980c:	80067ac0 	call	80067ac <memset>
 8009810:	8005883a 	mov	r2,r16
 8009814:	dfc00117 	ldw	ra,4(sp)
 8009818:	dc000017 	ldw	r16,0(sp)
 800981c:	dec00204 	addi	sp,sp,8
 8009820:	f800283a 	ret
 8009824:	80800204 	addi	r2,r16,8
 8009828:	003fe506 	br	80097c0 <__alt_data_end+0xfc0097c0>
 800982c:	80000415 	stw	zero,16(r16)
 8009830:	80800604 	addi	r2,r16,24
 8009834:	80000515 	stw	zero,20(r16)
 8009838:	003fe106 	br	80097c0 <__alt_data_end+0xfc0097c0>
 800983c:	0005883a 	mov	r2,zero
 8009840:	003fe306 	br	80097d0 <__alt_data_end+0xfc0097d0>

08009844 <_fclose_r>:
 8009844:	28003226 	beq	r5,zero,8009910 <_fclose_r+0xcc>
 8009848:	defffc04 	addi	sp,sp,-16
 800984c:	dc400115 	stw	r17,4(sp)
 8009850:	2023883a 	mov	r17,r4
 8009854:	dc000015 	stw	r16,0(sp)
 8009858:	dfc00315 	stw	ra,12(sp)
 800985c:	dc800215 	stw	r18,8(sp)
 8009860:	2821883a 	mov	r16,r5
 8009864:	8004f880 	call	8004f88 <__sfp_lock_acquire>
 8009868:	88000226 	beq	r17,zero,8009874 <_fclose_r+0x30>
 800986c:	88800e17 	ldw	r2,56(r17)
 8009870:	10002926 	beq	r2,zero,8009918 <_fclose_r+0xd4>
 8009874:	8080030f 	ldh	r2,12(r16)
 8009878:	10002226 	beq	r2,zero,8009904 <_fclose_r+0xc0>
 800987c:	8809883a 	mov	r4,r17
 8009880:	800b883a 	mov	r5,r16
 8009884:	80049bc0 	call	80049bc <_fflush_r>
 8009888:	1025883a 	mov	r18,r2
 800988c:	80800b17 	ldw	r2,44(r16)
 8009890:	10000426 	beq	r2,zero,80098a4 <_fclose_r+0x60>
 8009894:	81400717 	ldw	r5,28(r16)
 8009898:	8809883a 	mov	r4,r17
 800989c:	103ee83a 	callr	r2
 80098a0:	10002616 	blt	r2,zero,800993c <_fclose_r+0xf8>
 80098a4:	8080030b 	ldhu	r2,12(r16)
 80098a8:	1080200c 	andi	r2,r2,128
 80098ac:	10001f1e 	bne	r2,zero,800992c <_fclose_r+0xe8>
 80098b0:	81400c17 	ldw	r5,48(r16)
 80098b4:	28000526 	beq	r5,zero,80098cc <_fclose_r+0x88>
 80098b8:	80801004 	addi	r2,r16,64
 80098bc:	28800226 	beq	r5,r2,80098c8 <_fclose_r+0x84>
 80098c0:	8809883a 	mov	r4,r17
 80098c4:	80050ec0 	call	80050ec <_free_r>
 80098c8:	80000c15 	stw	zero,48(r16)
 80098cc:	81401117 	ldw	r5,68(r16)
 80098d0:	28000326 	beq	r5,zero,80098e0 <_fclose_r+0x9c>
 80098d4:	8809883a 	mov	r4,r17
 80098d8:	80050ec0 	call	80050ec <_free_r>
 80098dc:	80001115 	stw	zero,68(r16)
 80098e0:	8000030d 	sth	zero,12(r16)
 80098e4:	8004f8c0 	call	8004f8c <__sfp_lock_release>
 80098e8:	9005883a 	mov	r2,r18
 80098ec:	dfc00317 	ldw	ra,12(sp)
 80098f0:	dc800217 	ldw	r18,8(sp)
 80098f4:	dc400117 	ldw	r17,4(sp)
 80098f8:	dc000017 	ldw	r16,0(sp)
 80098fc:	dec00404 	addi	sp,sp,16
 8009900:	f800283a 	ret
 8009904:	8004f8c0 	call	8004f8c <__sfp_lock_release>
 8009908:	0005883a 	mov	r2,zero
 800990c:	003ff706 	br	80098ec <__alt_data_end+0xfc0098ec>
 8009910:	0005883a 	mov	r2,zero
 8009914:	f800283a 	ret
 8009918:	8809883a 	mov	r4,r17
 800991c:	8004f780 	call	8004f78 <__sinit>
 8009920:	8080030f 	ldh	r2,12(r16)
 8009924:	103fd51e 	bne	r2,zero,800987c <__alt_data_end+0xfc00987c>
 8009928:	003ff606 	br	8009904 <__alt_data_end+0xfc009904>
 800992c:	81400417 	ldw	r5,16(r16)
 8009930:	8809883a 	mov	r4,r17
 8009934:	80050ec0 	call	80050ec <_free_r>
 8009938:	003fdd06 	br	80098b0 <__alt_data_end+0xfc0098b0>
 800993c:	04bfffc4 	movi	r18,-1
 8009940:	003fd806 	br	80098a4 <__alt_data_end+0xfc0098a4>

08009944 <fclose>:
 8009944:	00820074 	movhi	r2,2049
 8009948:	1088a604 	addi	r2,r2,8856
 800994c:	200b883a 	mov	r5,r4
 8009950:	11000017 	ldw	r4,0(r2)
 8009954:	80098441 	jmpi	8009844 <_fclose_r>

08009958 <_fputwc_r>:
 8009958:	3080030b 	ldhu	r2,12(r6)
 800995c:	defff804 	addi	sp,sp,-32
 8009960:	dcc00415 	stw	r19,16(sp)
 8009964:	dc800315 	stw	r18,12(sp)
 8009968:	dc000115 	stw	r16,4(sp)
 800996c:	dfc00715 	stw	ra,28(sp)
 8009970:	dd400615 	stw	r21,24(sp)
 8009974:	dd000515 	stw	r20,20(sp)
 8009978:	dc400215 	stw	r17,8(sp)
 800997c:	10c8000c 	andi	r3,r2,8192
 8009980:	3021883a 	mov	r16,r6
 8009984:	2027883a 	mov	r19,r4
 8009988:	2825883a 	mov	r18,r5
 800998c:	1800051e 	bne	r3,zero,80099a4 <_fputwc_r+0x4c>
 8009990:	30c01917 	ldw	r3,100(r6)
 8009994:	10880014 	ori	r2,r2,8192
 8009998:	3080030d 	sth	r2,12(r6)
 800999c:	18880014 	ori	r2,r3,8192
 80099a0:	30801915 	stw	r2,100(r6)
 80099a4:	8005a780 	call	8005a78 <__locale_mb_cur_max>
 80099a8:	00c00044 	movi	r3,1
 80099ac:	10c03e26 	beq	r2,r3,8009aa8 <_fputwc_r+0x150>
 80099b0:	9809883a 	mov	r4,r19
 80099b4:	d80b883a 	mov	r5,sp
 80099b8:	900d883a 	mov	r6,r18
 80099bc:	81c01704 	addi	r7,r16,92
 80099c0:	8009e080 	call	8009e08 <_wcrtomb_r>
 80099c4:	1029883a 	mov	r20,r2
 80099c8:	00bfffc4 	movi	r2,-1
 80099cc:	a0802026 	beq	r20,r2,8009a50 <_fputwc_r+0xf8>
 80099d0:	d9400003 	ldbu	r5,0(sp)
 80099d4:	a0001c26 	beq	r20,zero,8009a48 <_fputwc_r+0xf0>
 80099d8:	0023883a 	mov	r17,zero
 80099dc:	05400284 	movi	r21,10
 80099e0:	00000906 	br	8009a08 <_fputwc_r+0xb0>
 80099e4:	80800017 	ldw	r2,0(r16)
 80099e8:	11400005 	stb	r5,0(r2)
 80099ec:	80c00017 	ldw	r3,0(r16)
 80099f0:	18c00044 	addi	r3,r3,1
 80099f4:	80c00015 	stw	r3,0(r16)
 80099f8:	8c400044 	addi	r17,r17,1
 80099fc:	dc45883a 	add	r2,sp,r17
 8009a00:	8d00112e 	bgeu	r17,r20,8009a48 <_fputwc_r+0xf0>
 8009a04:	11400003 	ldbu	r5,0(r2)
 8009a08:	80c00217 	ldw	r3,8(r16)
 8009a0c:	18ffffc4 	addi	r3,r3,-1
 8009a10:	80c00215 	stw	r3,8(r16)
 8009a14:	183ff30e 	bge	r3,zero,80099e4 <__alt_data_end+0xfc0099e4>
 8009a18:	80800617 	ldw	r2,24(r16)
 8009a1c:	18801916 	blt	r3,r2,8009a84 <_fputwc_r+0x12c>
 8009a20:	80800017 	ldw	r2,0(r16)
 8009a24:	11400005 	stb	r5,0(r2)
 8009a28:	80800017 	ldw	r2,0(r16)
 8009a2c:	10c00003 	ldbu	r3,0(r2)
 8009a30:	10800044 	addi	r2,r2,1
 8009a34:	1d402326 	beq	r3,r21,8009ac4 <_fputwc_r+0x16c>
 8009a38:	80800015 	stw	r2,0(r16)
 8009a3c:	8c400044 	addi	r17,r17,1
 8009a40:	dc45883a 	add	r2,sp,r17
 8009a44:	8d3fef36 	bltu	r17,r20,8009a04 <__alt_data_end+0xfc009a04>
 8009a48:	9005883a 	mov	r2,r18
 8009a4c:	00000406 	br	8009a60 <_fputwc_r+0x108>
 8009a50:	80c0030b 	ldhu	r3,12(r16)
 8009a54:	a005883a 	mov	r2,r20
 8009a58:	18c01014 	ori	r3,r3,64
 8009a5c:	80c0030d 	sth	r3,12(r16)
 8009a60:	dfc00717 	ldw	ra,28(sp)
 8009a64:	dd400617 	ldw	r21,24(sp)
 8009a68:	dd000517 	ldw	r20,20(sp)
 8009a6c:	dcc00417 	ldw	r19,16(sp)
 8009a70:	dc800317 	ldw	r18,12(sp)
 8009a74:	dc400217 	ldw	r17,8(sp)
 8009a78:	dc000117 	ldw	r16,4(sp)
 8009a7c:	dec00804 	addi	sp,sp,32
 8009a80:	f800283a 	ret
 8009a84:	9809883a 	mov	r4,r19
 8009a88:	29403fcc 	andi	r5,r5,255
 8009a8c:	800d883a 	mov	r6,r16
 8009a90:	8009c980 	call	8009c98 <__swbuf_r>
 8009a94:	10bfffe0 	cmpeqi	r2,r2,-1
 8009a98:	10803fcc 	andi	r2,r2,255
 8009a9c:	103fd626 	beq	r2,zero,80099f8 <__alt_data_end+0xfc0099f8>
 8009aa0:	00bfffc4 	movi	r2,-1
 8009aa4:	003fee06 	br	8009a60 <__alt_data_end+0xfc009a60>
 8009aa8:	90ffffc4 	addi	r3,r18,-1
 8009aac:	01003f84 	movi	r4,254
 8009ab0:	20ffbf36 	bltu	r4,r3,80099b0 <__alt_data_end+0xfc0099b0>
 8009ab4:	900b883a 	mov	r5,r18
 8009ab8:	dc800005 	stb	r18,0(sp)
 8009abc:	1029883a 	mov	r20,r2
 8009ac0:	003fc506 	br	80099d8 <__alt_data_end+0xfc0099d8>
 8009ac4:	9809883a 	mov	r4,r19
 8009ac8:	a80b883a 	mov	r5,r21
 8009acc:	800d883a 	mov	r6,r16
 8009ad0:	8009c980 	call	8009c98 <__swbuf_r>
 8009ad4:	10bfffe0 	cmpeqi	r2,r2,-1
 8009ad8:	003fef06 	br	8009a98 <__alt_data_end+0xfc009a98>

08009adc <fputwc>:
 8009adc:	defffc04 	addi	sp,sp,-16
 8009ae0:	dc000115 	stw	r16,4(sp)
 8009ae4:	04020074 	movhi	r16,2049
 8009ae8:	8408a604 	addi	r16,r16,8856
 8009aec:	dc400215 	stw	r17,8(sp)
 8009af0:	2023883a 	mov	r17,r4
 8009af4:	81000017 	ldw	r4,0(r16)
 8009af8:	dfc00315 	stw	ra,12(sp)
 8009afc:	280d883a 	mov	r6,r5
 8009b00:	20000626 	beq	r4,zero,8009b1c <fputwc+0x40>
 8009b04:	20800e17 	ldw	r2,56(r4)
 8009b08:	1000041e 	bne	r2,zero,8009b1c <fputwc+0x40>
 8009b0c:	d9400015 	stw	r5,0(sp)
 8009b10:	8004f780 	call	8004f78 <__sinit>
 8009b14:	81000017 	ldw	r4,0(r16)
 8009b18:	d9800017 	ldw	r6,0(sp)
 8009b1c:	880b883a 	mov	r5,r17
 8009b20:	dfc00317 	ldw	ra,12(sp)
 8009b24:	dc400217 	ldw	r17,8(sp)
 8009b28:	dc000117 	ldw	r16,4(sp)
 8009b2c:	dec00404 	addi	sp,sp,16
 8009b30:	80099581 	jmpi	8009958 <_fputwc_r>

08009b34 <_fstat_r>:
 8009b34:	defffd04 	addi	sp,sp,-12
 8009b38:	dc000015 	stw	r16,0(sp)
 8009b3c:	04020074 	movhi	r16,2049
 8009b40:	dc400115 	stw	r17,4(sp)
 8009b44:	840f8404 	addi	r16,r16,15888
 8009b48:	2023883a 	mov	r17,r4
 8009b4c:	2809883a 	mov	r4,r5
 8009b50:	300b883a 	mov	r5,r6
 8009b54:	dfc00215 	stw	ra,8(sp)
 8009b58:	80000015 	stw	zero,0(r16)
 8009b5c:	800d7580 	call	800d758 <fstat>
 8009b60:	00ffffc4 	movi	r3,-1
 8009b64:	10c00526 	beq	r2,r3,8009b7c <_fstat_r+0x48>
 8009b68:	dfc00217 	ldw	ra,8(sp)
 8009b6c:	dc400117 	ldw	r17,4(sp)
 8009b70:	dc000017 	ldw	r16,0(sp)
 8009b74:	dec00304 	addi	sp,sp,12
 8009b78:	f800283a 	ret
 8009b7c:	80c00017 	ldw	r3,0(r16)
 8009b80:	183ff926 	beq	r3,zero,8009b68 <__alt_data_end+0xfc009b68>
 8009b84:	88c00015 	stw	r3,0(r17)
 8009b88:	003ff706 	br	8009b68 <__alt_data_end+0xfc009b68>

08009b8c <_isatty_r>:
 8009b8c:	defffd04 	addi	sp,sp,-12
 8009b90:	dc000015 	stw	r16,0(sp)
 8009b94:	04020074 	movhi	r16,2049
 8009b98:	dc400115 	stw	r17,4(sp)
 8009b9c:	840f8404 	addi	r16,r16,15888
 8009ba0:	2023883a 	mov	r17,r4
 8009ba4:	2809883a 	mov	r4,r5
 8009ba8:	dfc00215 	stw	ra,8(sp)
 8009bac:	80000015 	stw	zero,0(r16)
 8009bb0:	800d8600 	call	800d860 <isatty>
 8009bb4:	00ffffc4 	movi	r3,-1
 8009bb8:	10c00526 	beq	r2,r3,8009bd0 <_isatty_r+0x44>
 8009bbc:	dfc00217 	ldw	ra,8(sp)
 8009bc0:	dc400117 	ldw	r17,4(sp)
 8009bc4:	dc000017 	ldw	r16,0(sp)
 8009bc8:	dec00304 	addi	sp,sp,12
 8009bcc:	f800283a 	ret
 8009bd0:	80c00017 	ldw	r3,0(r16)
 8009bd4:	183ff926 	beq	r3,zero,8009bbc <__alt_data_end+0xfc009bbc>
 8009bd8:	88c00015 	stw	r3,0(r17)
 8009bdc:	003ff706 	br	8009bbc <__alt_data_end+0xfc009bbc>

08009be0 <_lseek_r>:
 8009be0:	defffd04 	addi	sp,sp,-12
 8009be4:	dc000015 	stw	r16,0(sp)
 8009be8:	04020074 	movhi	r16,2049
 8009bec:	dc400115 	stw	r17,4(sp)
 8009bf0:	840f8404 	addi	r16,r16,15888
 8009bf4:	2023883a 	mov	r17,r4
 8009bf8:	2809883a 	mov	r4,r5
 8009bfc:	300b883a 	mov	r5,r6
 8009c00:	380d883a 	mov	r6,r7
 8009c04:	dfc00215 	stw	ra,8(sp)
 8009c08:	80000015 	stw	zero,0(r16)
 8009c0c:	800da400 	call	800da40 <lseek>
 8009c10:	00ffffc4 	movi	r3,-1
 8009c14:	10c00526 	beq	r2,r3,8009c2c <_lseek_r+0x4c>
 8009c18:	dfc00217 	ldw	ra,8(sp)
 8009c1c:	dc400117 	ldw	r17,4(sp)
 8009c20:	dc000017 	ldw	r16,0(sp)
 8009c24:	dec00304 	addi	sp,sp,12
 8009c28:	f800283a 	ret
 8009c2c:	80c00017 	ldw	r3,0(r16)
 8009c30:	183ff926 	beq	r3,zero,8009c18 <__alt_data_end+0xfc009c18>
 8009c34:	88c00015 	stw	r3,0(r17)
 8009c38:	003ff706 	br	8009c18 <__alt_data_end+0xfc009c18>

08009c3c <_read_r>:
 8009c3c:	defffd04 	addi	sp,sp,-12
 8009c40:	dc000015 	stw	r16,0(sp)
 8009c44:	04020074 	movhi	r16,2049
 8009c48:	dc400115 	stw	r17,4(sp)
 8009c4c:	840f8404 	addi	r16,r16,15888
 8009c50:	2023883a 	mov	r17,r4
 8009c54:	2809883a 	mov	r4,r5
 8009c58:	300b883a 	mov	r5,r6
 8009c5c:	380d883a 	mov	r6,r7
 8009c60:	dfc00215 	stw	ra,8(sp)
 8009c64:	80000015 	stw	zero,0(r16)
 8009c68:	800dc240 	call	800dc24 <read>
 8009c6c:	00ffffc4 	movi	r3,-1
 8009c70:	10c00526 	beq	r2,r3,8009c88 <_read_r+0x4c>
 8009c74:	dfc00217 	ldw	ra,8(sp)
 8009c78:	dc400117 	ldw	r17,4(sp)
 8009c7c:	dc000017 	ldw	r16,0(sp)
 8009c80:	dec00304 	addi	sp,sp,12
 8009c84:	f800283a 	ret
 8009c88:	80c00017 	ldw	r3,0(r16)
 8009c8c:	183ff926 	beq	r3,zero,8009c74 <__alt_data_end+0xfc009c74>
 8009c90:	88c00015 	stw	r3,0(r17)
 8009c94:	003ff706 	br	8009c74 <__alt_data_end+0xfc009c74>

08009c98 <__swbuf_r>:
 8009c98:	defffc04 	addi	sp,sp,-16
 8009c9c:	dc800215 	stw	r18,8(sp)
 8009ca0:	dc400115 	stw	r17,4(sp)
 8009ca4:	dc000015 	stw	r16,0(sp)
 8009ca8:	dfc00315 	stw	ra,12(sp)
 8009cac:	2025883a 	mov	r18,r4
 8009cb0:	2823883a 	mov	r17,r5
 8009cb4:	3021883a 	mov	r16,r6
 8009cb8:	20000226 	beq	r4,zero,8009cc4 <__swbuf_r+0x2c>
 8009cbc:	20800e17 	ldw	r2,56(r4)
 8009cc0:	10004126 	beq	r2,zero,8009dc8 <__swbuf_r+0x130>
 8009cc4:	80c00617 	ldw	r3,24(r16)
 8009cc8:	8180030b 	ldhu	r6,12(r16)
 8009ccc:	80c00215 	stw	r3,8(r16)
 8009cd0:	30c0020c 	andi	r3,r6,8
 8009cd4:	18003526 	beq	r3,zero,8009dac <__swbuf_r+0x114>
 8009cd8:	80c00417 	ldw	r3,16(r16)
 8009cdc:	18003326 	beq	r3,zero,8009dac <__swbuf_r+0x114>
 8009ce0:	3088000c 	andi	r2,r6,8192
 8009ce4:	8c403fcc 	andi	r17,r17,255
 8009ce8:	10001726 	beq	r2,zero,8009d48 <__swbuf_r+0xb0>
 8009cec:	80800017 	ldw	r2,0(r16)
 8009cf0:	81000517 	ldw	r4,20(r16)
 8009cf4:	10c7c83a 	sub	r3,r2,r3
 8009cf8:	19001d0e 	bge	r3,r4,8009d70 <__swbuf_r+0xd8>
 8009cfc:	18c00044 	addi	r3,r3,1
 8009d00:	81400217 	ldw	r5,8(r16)
 8009d04:	11000044 	addi	r4,r2,1
 8009d08:	81000015 	stw	r4,0(r16)
 8009d0c:	297fffc4 	addi	r5,r5,-1
 8009d10:	81400215 	stw	r5,8(r16)
 8009d14:	14400005 	stb	r17,0(r2)
 8009d18:	80800517 	ldw	r2,20(r16)
 8009d1c:	10c01d26 	beq	r2,r3,8009d94 <__swbuf_r+0xfc>
 8009d20:	8080030b 	ldhu	r2,12(r16)
 8009d24:	1080004c 	andi	r2,r2,1
 8009d28:	1000181e 	bne	r2,zero,8009d8c <__swbuf_r+0xf4>
 8009d2c:	8805883a 	mov	r2,r17
 8009d30:	dfc00317 	ldw	ra,12(sp)
 8009d34:	dc800217 	ldw	r18,8(sp)
 8009d38:	dc400117 	ldw	r17,4(sp)
 8009d3c:	dc000017 	ldw	r16,0(sp)
 8009d40:	dec00404 	addi	sp,sp,16
 8009d44:	f800283a 	ret
 8009d48:	81001917 	ldw	r4,100(r16)
 8009d4c:	00b7ffc4 	movi	r2,-8193
 8009d50:	31880014 	ori	r6,r6,8192
 8009d54:	2084703a 	and	r2,r4,r2
 8009d58:	80801915 	stw	r2,100(r16)
 8009d5c:	80800017 	ldw	r2,0(r16)
 8009d60:	81000517 	ldw	r4,20(r16)
 8009d64:	8180030d 	sth	r6,12(r16)
 8009d68:	10c7c83a 	sub	r3,r2,r3
 8009d6c:	193fe316 	blt	r3,r4,8009cfc <__alt_data_end+0xfc009cfc>
 8009d70:	9009883a 	mov	r4,r18
 8009d74:	800b883a 	mov	r5,r16
 8009d78:	80049bc0 	call	80049bc <_fflush_r>
 8009d7c:	1000091e 	bne	r2,zero,8009da4 <__swbuf_r+0x10c>
 8009d80:	80800017 	ldw	r2,0(r16)
 8009d84:	00c00044 	movi	r3,1
 8009d88:	003fdd06 	br	8009d00 <__alt_data_end+0xfc009d00>
 8009d8c:	00800284 	movi	r2,10
 8009d90:	88bfe61e 	bne	r17,r2,8009d2c <__alt_data_end+0xfc009d2c>
 8009d94:	9009883a 	mov	r4,r18
 8009d98:	800b883a 	mov	r5,r16
 8009d9c:	80049bc0 	call	80049bc <_fflush_r>
 8009da0:	103fe226 	beq	r2,zero,8009d2c <__alt_data_end+0xfc009d2c>
 8009da4:	00bfffc4 	movi	r2,-1
 8009da8:	003fe106 	br	8009d30 <__alt_data_end+0xfc009d30>
 8009dac:	9009883a 	mov	r4,r18
 8009db0:	800b883a 	mov	r5,r16
 8009db4:	8002f3c0 	call	8002f3c <__swsetup_r>
 8009db8:	1000051e 	bne	r2,zero,8009dd0 <__swbuf_r+0x138>
 8009dbc:	8180030b 	ldhu	r6,12(r16)
 8009dc0:	80c00417 	ldw	r3,16(r16)
 8009dc4:	003fc606 	br	8009ce0 <__alt_data_end+0xfc009ce0>
 8009dc8:	8004f780 	call	8004f78 <__sinit>
 8009dcc:	003fbd06 	br	8009cc4 <__alt_data_end+0xfc009cc4>
 8009dd0:	80c0030b 	ldhu	r3,12(r16)
 8009dd4:	00bfffc4 	movi	r2,-1
 8009dd8:	18c01014 	ori	r3,r3,64
 8009ddc:	80c0030d 	sth	r3,12(r16)
 8009de0:	00c00244 	movi	r3,9
 8009de4:	90c00015 	stw	r3,0(r18)
 8009de8:	003fd106 	br	8009d30 <__alt_data_end+0xfc009d30>

08009dec <__swbuf>:
 8009dec:	00c20074 	movhi	r3,2049
 8009df0:	18c8a604 	addi	r3,r3,8856
 8009df4:	2005883a 	mov	r2,r4
 8009df8:	19000017 	ldw	r4,0(r3)
 8009dfc:	280d883a 	mov	r6,r5
 8009e00:	100b883a 	mov	r5,r2
 8009e04:	8009c981 	jmpi	8009c98 <__swbuf_r>

08009e08 <_wcrtomb_r>:
 8009e08:	defff604 	addi	sp,sp,-40
 8009e0c:	00820074 	movhi	r2,2049
 8009e10:	dc800815 	stw	r18,32(sp)
 8009e14:	dc400715 	stw	r17,28(sp)
 8009e18:	dc000615 	stw	r16,24(sp)
 8009e1c:	1088aa04 	addi	r2,r2,8872
 8009e20:	dfc00915 	stw	ra,36(sp)
 8009e24:	2021883a 	mov	r16,r4
 8009e28:	3823883a 	mov	r17,r7
 8009e2c:	14800017 	ldw	r18,0(r2)
 8009e30:	28001426 	beq	r5,zero,8009e84 <_wcrtomb_r+0x7c>
 8009e34:	d9400415 	stw	r5,16(sp)
 8009e38:	d9800515 	stw	r6,20(sp)
 8009e3c:	8005a6c0 	call	8005a6c <__locale_charset>
 8009e40:	d9400417 	ldw	r5,16(sp)
 8009e44:	d9800517 	ldw	r6,20(sp)
 8009e48:	8009883a 	mov	r4,r16
 8009e4c:	dc400015 	stw	r17,0(sp)
 8009e50:	100f883a 	mov	r7,r2
 8009e54:	903ee83a 	callr	r18
 8009e58:	00ffffc4 	movi	r3,-1
 8009e5c:	10c0031e 	bne	r2,r3,8009e6c <_wcrtomb_r+0x64>
 8009e60:	88000015 	stw	zero,0(r17)
 8009e64:	00c02284 	movi	r3,138
 8009e68:	80c00015 	stw	r3,0(r16)
 8009e6c:	dfc00917 	ldw	ra,36(sp)
 8009e70:	dc800817 	ldw	r18,32(sp)
 8009e74:	dc400717 	ldw	r17,28(sp)
 8009e78:	dc000617 	ldw	r16,24(sp)
 8009e7c:	dec00a04 	addi	sp,sp,40
 8009e80:	f800283a 	ret
 8009e84:	8005a6c0 	call	8005a6c <__locale_charset>
 8009e88:	8009883a 	mov	r4,r16
 8009e8c:	dc400015 	stw	r17,0(sp)
 8009e90:	d9400104 	addi	r5,sp,4
 8009e94:	000d883a 	mov	r6,zero
 8009e98:	100f883a 	mov	r7,r2
 8009e9c:	903ee83a 	callr	r18
 8009ea0:	003fed06 	br	8009e58 <__alt_data_end+0xfc009e58>

08009ea4 <wcrtomb>:
 8009ea4:	defff504 	addi	sp,sp,-44
 8009ea8:	dc400515 	stw	r17,20(sp)
 8009eac:	dc000415 	stw	r16,16(sp)
 8009eb0:	dfc00a15 	stw	ra,40(sp)
 8009eb4:	dd400915 	stw	r21,36(sp)
 8009eb8:	dd000815 	stw	r20,32(sp)
 8009ebc:	dcc00715 	stw	r19,28(sp)
 8009ec0:	dc800615 	stw	r18,24(sp)
 8009ec4:	2021883a 	mov	r16,r4
 8009ec8:	3023883a 	mov	r17,r6
 8009ecc:	20001d26 	beq	r4,zero,8009f44 <wcrtomb+0xa0>
 8009ed0:	04820074 	movhi	r18,2049
 8009ed4:	9488a604 	addi	r18,r18,8856
 8009ed8:	00820074 	movhi	r2,2049
 8009edc:	95400017 	ldw	r21,0(r18)
 8009ee0:	1088aa04 	addi	r2,r2,8872
 8009ee4:	15000017 	ldw	r20,0(r2)
 8009ee8:	2827883a 	mov	r19,r5
 8009eec:	8005a6c0 	call	8005a6c <__locale_charset>
 8009ef0:	a809883a 	mov	r4,r21
 8009ef4:	dc400015 	stw	r17,0(sp)
 8009ef8:	800b883a 	mov	r5,r16
 8009efc:	980d883a 	mov	r6,r19
 8009f00:	100f883a 	mov	r7,r2
 8009f04:	a03ee83a 	callr	r20
 8009f08:	00ffffc4 	movi	r3,-1
 8009f0c:	10c0041e 	bne	r2,r3,8009f20 <wcrtomb+0x7c>
 8009f10:	90c00017 	ldw	r3,0(r18)
 8009f14:	01002284 	movi	r4,138
 8009f18:	88000015 	stw	zero,0(r17)
 8009f1c:	19000015 	stw	r4,0(r3)
 8009f20:	dfc00a17 	ldw	ra,40(sp)
 8009f24:	dd400917 	ldw	r21,36(sp)
 8009f28:	dd000817 	ldw	r20,32(sp)
 8009f2c:	dcc00717 	ldw	r19,28(sp)
 8009f30:	dc800617 	ldw	r18,24(sp)
 8009f34:	dc400517 	ldw	r17,20(sp)
 8009f38:	dc000417 	ldw	r16,16(sp)
 8009f3c:	dec00b04 	addi	sp,sp,44
 8009f40:	f800283a 	ret
 8009f44:	04820074 	movhi	r18,2049
 8009f48:	9488a604 	addi	r18,r18,8856
 8009f4c:	00820074 	movhi	r2,2049
 8009f50:	94c00017 	ldw	r19,0(r18)
 8009f54:	1088aa04 	addi	r2,r2,8872
 8009f58:	14000017 	ldw	r16,0(r2)
 8009f5c:	8005a6c0 	call	8005a6c <__locale_charset>
 8009f60:	9809883a 	mov	r4,r19
 8009f64:	dc400015 	stw	r17,0(sp)
 8009f68:	d9400104 	addi	r5,sp,4
 8009f6c:	000d883a 	mov	r6,zero
 8009f70:	100f883a 	mov	r7,r2
 8009f74:	803ee83a 	callr	r16
 8009f78:	003fe306 	br	8009f08 <__alt_data_end+0xfc009f08>

08009f7c <__ascii_wctomb>:
 8009f7c:	28000526 	beq	r5,zero,8009f94 <__ascii_wctomb+0x18>
 8009f80:	00803fc4 	movi	r2,255
 8009f84:	11800536 	bltu	r2,r6,8009f9c <__ascii_wctomb+0x20>
 8009f88:	29800005 	stb	r6,0(r5)
 8009f8c:	00800044 	movi	r2,1
 8009f90:	f800283a 	ret
 8009f94:	0005883a 	mov	r2,zero
 8009f98:	f800283a 	ret
 8009f9c:	00802284 	movi	r2,138
 8009fa0:	20800015 	stw	r2,0(r4)
 8009fa4:	00bfffc4 	movi	r2,-1
 8009fa8:	f800283a 	ret

08009fac <_wctomb_r>:
 8009fac:	00820074 	movhi	r2,2049
 8009fb0:	defff904 	addi	sp,sp,-28
 8009fb4:	1088aa04 	addi	r2,r2,8872
 8009fb8:	dfc00615 	stw	ra,24(sp)
 8009fbc:	dc400515 	stw	r17,20(sp)
 8009fc0:	dc000415 	stw	r16,16(sp)
 8009fc4:	3823883a 	mov	r17,r7
 8009fc8:	14000017 	ldw	r16,0(r2)
 8009fcc:	d9000115 	stw	r4,4(sp)
 8009fd0:	d9400215 	stw	r5,8(sp)
 8009fd4:	d9800315 	stw	r6,12(sp)
 8009fd8:	8005a6c0 	call	8005a6c <__locale_charset>
 8009fdc:	d9000117 	ldw	r4,4(sp)
 8009fe0:	d9400217 	ldw	r5,8(sp)
 8009fe4:	d9800317 	ldw	r6,12(sp)
 8009fe8:	dc400015 	stw	r17,0(sp)
 8009fec:	100f883a 	mov	r7,r2
 8009ff0:	803ee83a 	callr	r16
 8009ff4:	dfc00617 	ldw	ra,24(sp)
 8009ff8:	dc400517 	ldw	r17,20(sp)
 8009ffc:	dc000417 	ldw	r16,16(sp)
 800a000:	dec00704 	addi	sp,sp,28
 800a004:	f800283a 	ret

0800a008 <__udivdi3>:
 800a008:	defff504 	addi	sp,sp,-44
 800a00c:	dcc00415 	stw	r19,16(sp)
 800a010:	dc000115 	stw	r16,4(sp)
 800a014:	dfc00a15 	stw	ra,40(sp)
 800a018:	df000915 	stw	fp,36(sp)
 800a01c:	ddc00815 	stw	r23,32(sp)
 800a020:	dd800715 	stw	r22,28(sp)
 800a024:	dd400615 	stw	r21,24(sp)
 800a028:	dd000515 	stw	r20,20(sp)
 800a02c:	dc800315 	stw	r18,12(sp)
 800a030:	dc400215 	stw	r17,8(sp)
 800a034:	2027883a 	mov	r19,r4
 800a038:	2821883a 	mov	r16,r5
 800a03c:	3800471e 	bne	r7,zero,800a15c <__udivdi3+0x154>
 800a040:	3025883a 	mov	r18,r6
 800a044:	2023883a 	mov	r17,r4
 800a048:	2980592e 	bgeu	r5,r6,800a1b0 <__udivdi3+0x1a8>
 800a04c:	00bfffd4 	movui	r2,65535
 800a050:	2829883a 	mov	r20,r5
 800a054:	1180b236 	bltu	r2,r6,800a320 <__udivdi3+0x318>
 800a058:	00803fc4 	movi	r2,255
 800a05c:	1181622e 	bgeu	r2,r6,800a5e8 <__udivdi3+0x5e0>
 800a060:	00800204 	movi	r2,8
 800a064:	1007883a 	mov	r3,r2
 800a068:	3084d83a 	srl	r2,r6,r2
 800a06c:	01020074 	movhi	r4,2049
 800a070:	21019c04 	addi	r4,r4,1648
 800a074:	2085883a 	add	r2,r4,r2
 800a078:	11000003 	ldbu	r4,0(r2)
 800a07c:	20c9883a 	add	r4,r4,r3
 800a080:	00c00804 	movi	r3,32
 800a084:	1907c83a 	sub	r3,r3,r4
 800a088:	18000526 	beq	r3,zero,800a0a0 <__udivdi3+0x98>
 800a08c:	80e0983a 	sll	r16,r16,r3
 800a090:	9908d83a 	srl	r4,r19,r4
 800a094:	30e4983a 	sll	r18,r6,r3
 800a098:	98e2983a 	sll	r17,r19,r3
 800a09c:	8128b03a 	or	r20,r16,r4
 800a0a0:	902ad43a 	srli	r21,r18,16
 800a0a4:	a009883a 	mov	r4,r20
 800a0a8:	95bfffcc 	andi	r22,r18,65535
 800a0ac:	a80b883a 	mov	r5,r21
 800a0b0:	800ad880 	call	800ad88 <__umodsi3>
 800a0b4:	a009883a 	mov	r4,r20
 800a0b8:	a80b883a 	mov	r5,r21
 800a0bc:	102f883a 	mov	r23,r2
 800a0c0:	800ad800 	call	800ad80 <__udivsi3>
 800a0c4:	1009883a 	mov	r4,r2
 800a0c8:	b00b883a 	mov	r5,r22
 800a0cc:	1021883a 	mov	r16,r2
 800a0d0:	800ad900 	call	800ad90 <__mulsi3>
 800a0d4:	b82e943a 	slli	r23,r23,16
 800a0d8:	8808d43a 	srli	r4,r17,16
 800a0dc:	b906b03a 	or	r3,r23,r4
 800a0e0:	1880052e 	bgeu	r3,r2,800a0f8 <__udivdi3+0xf0>
 800a0e4:	1c87883a 	add	r3,r3,r18
 800a0e8:	813fffc4 	addi	r4,r16,-1
 800a0ec:	1c800136 	bltu	r3,r18,800a0f4 <__udivdi3+0xec>
 800a0f0:	18815236 	bltu	r3,r2,800a63c <__udivdi3+0x634>
 800a0f4:	2021883a 	mov	r16,r4
 800a0f8:	18a7c83a 	sub	r19,r3,r2
 800a0fc:	9809883a 	mov	r4,r19
 800a100:	a80b883a 	mov	r5,r21
 800a104:	800ad880 	call	800ad88 <__umodsi3>
 800a108:	1029883a 	mov	r20,r2
 800a10c:	9809883a 	mov	r4,r19
 800a110:	a80b883a 	mov	r5,r21
 800a114:	a028943a 	slli	r20,r20,16
 800a118:	800ad800 	call	800ad80 <__udivsi3>
 800a11c:	1009883a 	mov	r4,r2
 800a120:	b00b883a 	mov	r5,r22
 800a124:	8c7fffcc 	andi	r17,r17,65535
 800a128:	1027883a 	mov	r19,r2
 800a12c:	a462b03a 	or	r17,r20,r17
 800a130:	800ad900 	call	800ad90 <__mulsi3>
 800a134:	8880052e 	bgeu	r17,r2,800a14c <__udivdi3+0x144>
 800a138:	8ca3883a 	add	r17,r17,r18
 800a13c:	98ffffc4 	addi	r3,r19,-1
 800a140:	8c811036 	bltu	r17,r18,800a584 <__udivdi3+0x57c>
 800a144:	88810f2e 	bgeu	r17,r2,800a584 <__udivdi3+0x57c>
 800a148:	9cffff84 	addi	r19,r19,-2
 800a14c:	8020943a 	slli	r16,r16,16
 800a150:	0007883a 	mov	r3,zero
 800a154:	9c04b03a 	or	r2,r19,r16
 800a158:	00006006 	br	800a2dc <__udivdi3+0x2d4>
 800a15c:	29c05d36 	bltu	r5,r7,800a2d4 <__udivdi3+0x2cc>
 800a160:	00bfffd4 	movui	r2,65535
 800a164:	11c0692e 	bgeu	r2,r7,800a30c <__udivdi3+0x304>
 800a168:	00804034 	movhi	r2,256
 800a16c:	10bfffc4 	addi	r2,r2,-1
 800a170:	11c10e2e 	bgeu	r2,r7,800a5ac <__udivdi3+0x5a4>
 800a174:	01400604 	movi	r5,24
 800a178:	2811883a 	mov	r8,r5
 800a17c:	394ad83a 	srl	r5,r7,r5
 800a180:	00820074 	movhi	r2,2049
 800a184:	10819c04 	addi	r2,r2,1648
 800a188:	114b883a 	add	r5,r2,r5
 800a18c:	29400003 	ldbu	r5,0(r5)
 800a190:	00c00804 	movi	r3,32
 800a194:	2a0b883a 	add	r5,r5,r8
 800a198:	196fc83a 	sub	r23,r3,r5
 800a19c:	b8006b1e 	bne	r23,zero,800a34c <__udivdi3+0x344>
 800a1a0:	3c011436 	bltu	r7,r16,800a5f4 <__udivdi3+0x5ec>
 800a1a4:	9985403a 	cmpgeu	r2,r19,r6
 800a1a8:	0007883a 	mov	r3,zero
 800a1ac:	00004b06 	br	800a2dc <__udivdi3+0x2d4>
 800a1b0:	3000041e 	bne	r6,zero,800a1c4 <__udivdi3+0x1bc>
 800a1b4:	01000044 	movi	r4,1
 800a1b8:	000b883a 	mov	r5,zero
 800a1bc:	800ad800 	call	800ad80 <__udivsi3>
 800a1c0:	1025883a 	mov	r18,r2
 800a1c4:	00bfffd4 	movui	r2,65535
 800a1c8:	14805b2e 	bgeu	r2,r18,800a338 <__udivdi3+0x330>
 800a1cc:	00804034 	movhi	r2,256
 800a1d0:	10bfffc4 	addi	r2,r2,-1
 800a1d4:	1480fe2e 	bgeu	r2,r18,800a5d0 <__udivdi3+0x5c8>
 800a1d8:	00800604 	movi	r2,24
 800a1dc:	1007883a 	mov	r3,r2
 800a1e0:	9084d83a 	srl	r2,r18,r2
 800a1e4:	01020074 	movhi	r4,2049
 800a1e8:	21019c04 	addi	r4,r4,1648
 800a1ec:	2085883a 	add	r2,r4,r2
 800a1f0:	11800003 	ldbu	r6,0(r2)
 800a1f4:	01c00804 	movi	r7,32
 800a1f8:	30c7883a 	add	r3,r6,r3
 800a1fc:	38cfc83a 	sub	r7,r7,r3
 800a200:	3800a71e 	bne	r7,zero,800a4a0 <__udivdi3+0x498>
 800a204:	9028d43a 	srli	r20,r18,16
 800a208:	84a1c83a 	sub	r16,r16,r18
 800a20c:	957fffcc 	andi	r21,r18,65535
 800a210:	00c00044 	movi	r3,1
 800a214:	8009883a 	mov	r4,r16
 800a218:	a00b883a 	mov	r5,r20
 800a21c:	d8c00015 	stw	r3,0(sp)
 800a220:	800ad880 	call	800ad88 <__umodsi3>
 800a224:	8009883a 	mov	r4,r16
 800a228:	a00b883a 	mov	r5,r20
 800a22c:	102d883a 	mov	r22,r2
 800a230:	800ad800 	call	800ad80 <__udivsi3>
 800a234:	1009883a 	mov	r4,r2
 800a238:	a80b883a 	mov	r5,r21
 800a23c:	1021883a 	mov	r16,r2
 800a240:	800ad900 	call	800ad90 <__mulsi3>
 800a244:	b02c943a 	slli	r22,r22,16
 800a248:	880ed43a 	srli	r7,r17,16
 800a24c:	d8c00017 	ldw	r3,0(sp)
 800a250:	b1ccb03a 	or	r6,r22,r7
 800a254:	3080052e 	bgeu	r6,r2,800a26c <__udivdi3+0x264>
 800a258:	348d883a 	add	r6,r6,r18
 800a25c:	813fffc4 	addi	r4,r16,-1
 800a260:	34800136 	bltu	r6,r18,800a268 <__udivdi3+0x260>
 800a264:	3080f236 	bltu	r6,r2,800a630 <__udivdi3+0x628>
 800a268:	2021883a 	mov	r16,r4
 800a26c:	30a7c83a 	sub	r19,r6,r2
 800a270:	9809883a 	mov	r4,r19
 800a274:	a00b883a 	mov	r5,r20
 800a278:	d8c00015 	stw	r3,0(sp)
 800a27c:	800ad880 	call	800ad88 <__umodsi3>
 800a280:	102d883a 	mov	r22,r2
 800a284:	9809883a 	mov	r4,r19
 800a288:	a00b883a 	mov	r5,r20
 800a28c:	b02c943a 	slli	r22,r22,16
 800a290:	800ad800 	call	800ad80 <__udivsi3>
 800a294:	1009883a 	mov	r4,r2
 800a298:	a80b883a 	mov	r5,r21
 800a29c:	8c7fffcc 	andi	r17,r17,65535
 800a2a0:	1027883a 	mov	r19,r2
 800a2a4:	b462b03a 	or	r17,r22,r17
 800a2a8:	800ad900 	call	800ad90 <__mulsi3>
 800a2ac:	d8c00017 	ldw	r3,0(sp)
 800a2b0:	8880052e 	bgeu	r17,r2,800a2c8 <__udivdi3+0x2c0>
 800a2b4:	8ca3883a 	add	r17,r17,r18
 800a2b8:	993fffc4 	addi	r4,r19,-1
 800a2bc:	8c80af36 	bltu	r17,r18,800a57c <__udivdi3+0x574>
 800a2c0:	8880ae2e 	bgeu	r17,r2,800a57c <__udivdi3+0x574>
 800a2c4:	9cffff84 	addi	r19,r19,-2
 800a2c8:	8020943a 	slli	r16,r16,16
 800a2cc:	9c04b03a 	or	r2,r19,r16
 800a2d0:	00000206 	br	800a2dc <__udivdi3+0x2d4>
 800a2d4:	0007883a 	mov	r3,zero
 800a2d8:	0005883a 	mov	r2,zero
 800a2dc:	dfc00a17 	ldw	ra,40(sp)
 800a2e0:	df000917 	ldw	fp,36(sp)
 800a2e4:	ddc00817 	ldw	r23,32(sp)
 800a2e8:	dd800717 	ldw	r22,28(sp)
 800a2ec:	dd400617 	ldw	r21,24(sp)
 800a2f0:	dd000517 	ldw	r20,20(sp)
 800a2f4:	dcc00417 	ldw	r19,16(sp)
 800a2f8:	dc800317 	ldw	r18,12(sp)
 800a2fc:	dc400217 	ldw	r17,8(sp)
 800a300:	dc000117 	ldw	r16,4(sp)
 800a304:	dec00b04 	addi	sp,sp,44
 800a308:	f800283a 	ret
 800a30c:	00803fc4 	movi	r2,255
 800a310:	11c0a92e 	bgeu	r2,r7,800a5b8 <__udivdi3+0x5b0>
 800a314:	01400204 	movi	r5,8
 800a318:	2811883a 	mov	r8,r5
 800a31c:	003f9706 	br	800a17c <__alt_data_end+0xfc00a17c>
 800a320:	00804034 	movhi	r2,256
 800a324:	10bfffc4 	addi	r2,r2,-1
 800a328:	1180a62e 	bgeu	r2,r6,800a5c4 <__udivdi3+0x5bc>
 800a32c:	00800604 	movi	r2,24
 800a330:	1007883a 	mov	r3,r2
 800a334:	003f4c06 	br	800a068 <__alt_data_end+0xfc00a068>
 800a338:	00803fc4 	movi	r2,255
 800a33c:	1480a72e 	bgeu	r2,r18,800a5dc <__udivdi3+0x5d4>
 800a340:	00800204 	movi	r2,8
 800a344:	1007883a 	mov	r3,r2
 800a348:	003fa506 	br	800a1e0 <__alt_data_end+0xfc00a1e0>
 800a34c:	3178d83a 	srl	fp,r6,r5
 800a350:	3dce983a 	sll	r7,r7,r23
 800a354:	8168d83a 	srl	r20,r16,r5
 800a358:	9950d83a 	srl	r8,r19,r5
 800a35c:	3f38b03a 	or	fp,r7,fp
 800a360:	e024d43a 	srli	r18,fp,16
 800a364:	85e0983a 	sll	r16,r16,r23
 800a368:	a009883a 	mov	r4,r20
 800a36c:	900b883a 	mov	r5,r18
 800a370:	8220b03a 	or	r16,r16,r8
 800a374:	35ea983a 	sll	r21,r6,r23
 800a378:	800ad880 	call	800ad88 <__umodsi3>
 800a37c:	a009883a 	mov	r4,r20
 800a380:	900b883a 	mov	r5,r18
 800a384:	1023883a 	mov	r17,r2
 800a388:	e5bfffcc 	andi	r22,fp,65535
 800a38c:	800ad800 	call	800ad80 <__udivsi3>
 800a390:	1009883a 	mov	r4,r2
 800a394:	b00b883a 	mov	r5,r22
 800a398:	1029883a 	mov	r20,r2
 800a39c:	800ad900 	call	800ad90 <__mulsi3>
 800a3a0:	8806943a 	slli	r3,r17,16
 800a3a4:	8014d43a 	srli	r10,r16,16
 800a3a8:	1a92b03a 	or	r9,r3,r10
 800a3ac:	4880042e 	bgeu	r9,r2,800a3c0 <__udivdi3+0x3b8>
 800a3b0:	4f13883a 	add	r9,r9,fp
 800a3b4:	a0ffffc4 	addi	r3,r20,-1
 800a3b8:	4f00952e 	bgeu	r9,fp,800a610 <__udivdi3+0x608>
 800a3bc:	1829883a 	mov	r20,r3
 800a3c0:	48a3c83a 	sub	r17,r9,r2
 800a3c4:	8809883a 	mov	r4,r17
 800a3c8:	900b883a 	mov	r5,r18
 800a3cc:	800ad880 	call	800ad88 <__umodsi3>
 800a3d0:	8809883a 	mov	r4,r17
 800a3d4:	900b883a 	mov	r5,r18
 800a3d8:	d8800015 	stw	r2,0(sp)
 800a3dc:	800ad800 	call	800ad80 <__udivsi3>
 800a3e0:	1009883a 	mov	r4,r2
 800a3e4:	b00b883a 	mov	r5,r22
 800a3e8:	1023883a 	mov	r17,r2
 800a3ec:	800ad900 	call	800ad90 <__mulsi3>
 800a3f0:	d8c00017 	ldw	r3,0(sp)
 800a3f4:	823fffcc 	andi	r8,r16,65535
 800a3f8:	1806943a 	slli	r3,r3,16
 800a3fc:	1a20b03a 	or	r16,r3,r8
 800a400:	8080042e 	bgeu	r16,r2,800a414 <__udivdi3+0x40c>
 800a404:	8721883a 	add	r16,r16,fp
 800a408:	88ffffc4 	addi	r3,r17,-1
 800a40c:	87007c2e 	bgeu	r16,fp,800a600 <__udivdi3+0x5f8>
 800a410:	1823883a 	mov	r17,r3
 800a414:	a028943a 	slli	r20,r20,16
 800a418:	acbfffcc 	andi	r18,r21,65535
 800a41c:	900b883a 	mov	r5,r18
 800a420:	8d28b03a 	or	r20,r17,r20
 800a424:	a022d43a 	srli	r17,r20,16
 800a428:	a5bfffcc 	andi	r22,r20,65535
 800a42c:	b009883a 	mov	r4,r22
 800a430:	a82ad43a 	srli	r21,r21,16
 800a434:	80a1c83a 	sub	r16,r16,r2
 800a438:	800ad900 	call	800ad90 <__mulsi3>
 800a43c:	8809883a 	mov	r4,r17
 800a440:	900b883a 	mov	r5,r18
 800a444:	1039883a 	mov	fp,r2
 800a448:	800ad900 	call	800ad90 <__mulsi3>
 800a44c:	8809883a 	mov	r4,r17
 800a450:	a80b883a 	mov	r5,r21
 800a454:	1025883a 	mov	r18,r2
 800a458:	800ad900 	call	800ad90 <__mulsi3>
 800a45c:	b009883a 	mov	r4,r22
 800a460:	a80b883a 	mov	r5,r21
 800a464:	1023883a 	mov	r17,r2
 800a468:	800ad900 	call	800ad90 <__mulsi3>
 800a46c:	e006d43a 	srli	r3,fp,16
 800a470:	9085883a 	add	r2,r18,r2
 800a474:	10c7883a 	add	r3,r2,r3
 800a478:	1c80022e 	bgeu	r3,r18,800a484 <__udivdi3+0x47c>
 800a47c:	00800074 	movhi	r2,1
 800a480:	88a3883a 	add	r17,r17,r2
 800a484:	1808d43a 	srli	r4,r3,16
 800a488:	8909883a 	add	r4,r17,r4
 800a48c:	81004436 	bltu	r16,r4,800a5a0 <__udivdi3+0x598>
 800a490:	81003e26 	beq	r16,r4,800a58c <__udivdi3+0x584>
 800a494:	a005883a 	mov	r2,r20
 800a498:	0007883a 	mov	r3,zero
 800a49c:	003f8f06 	br	800a2dc <__alt_data_end+0xfc00a2dc>
 800a4a0:	91e4983a 	sll	r18,r18,r7
 800a4a4:	80eed83a 	srl	r23,r16,r3
 800a4a8:	81cc983a 	sll	r6,r16,r7
 800a4ac:	9028d43a 	srli	r20,r18,16
 800a4b0:	98c6d83a 	srl	r3,r19,r3
 800a4b4:	b809883a 	mov	r4,r23
 800a4b8:	a00b883a 	mov	r5,r20
 800a4bc:	30ecb03a 	or	r22,r6,r3
 800a4c0:	99e2983a 	sll	r17,r19,r7
 800a4c4:	800ad880 	call	800ad88 <__umodsi3>
 800a4c8:	b809883a 	mov	r4,r23
 800a4cc:	a00b883a 	mov	r5,r20
 800a4d0:	1021883a 	mov	r16,r2
 800a4d4:	957fffcc 	andi	r21,r18,65535
 800a4d8:	800ad800 	call	800ad80 <__udivsi3>
 800a4dc:	a80b883a 	mov	r5,r21
 800a4e0:	1009883a 	mov	r4,r2
 800a4e4:	102f883a 	mov	r23,r2
 800a4e8:	800ad900 	call	800ad90 <__mulsi3>
 800a4ec:	8020943a 	slli	r16,r16,16
 800a4f0:	b00ad43a 	srli	r5,r22,16
 800a4f4:	814cb03a 	or	r6,r16,r5
 800a4f8:	3080062e 	bgeu	r6,r2,800a514 <__udivdi3+0x50c>
 800a4fc:	348d883a 	add	r6,r6,r18
 800a500:	b8ffffc4 	addi	r3,r23,-1
 800a504:	34804836 	bltu	r6,r18,800a628 <__udivdi3+0x620>
 800a508:	3080472e 	bgeu	r6,r2,800a628 <__udivdi3+0x620>
 800a50c:	bdffff84 	addi	r23,r23,-2
 800a510:	348d883a 	add	r6,r6,r18
 800a514:	30a7c83a 	sub	r19,r6,r2
 800a518:	9809883a 	mov	r4,r19
 800a51c:	a00b883a 	mov	r5,r20
 800a520:	800ad880 	call	800ad88 <__umodsi3>
 800a524:	9809883a 	mov	r4,r19
 800a528:	a00b883a 	mov	r5,r20
 800a52c:	1039883a 	mov	fp,r2
 800a530:	800ad800 	call	800ad80 <__udivsi3>
 800a534:	1009883a 	mov	r4,r2
 800a538:	a80b883a 	mov	r5,r21
 800a53c:	e038943a 	slli	fp,fp,16
 800a540:	1027883a 	mov	r19,r2
 800a544:	800ad900 	call	800ad90 <__mulsi3>
 800a548:	b1bfffcc 	andi	r6,r22,65535
 800a54c:	e18cb03a 	or	r6,fp,r6
 800a550:	3080062e 	bgeu	r6,r2,800a56c <__udivdi3+0x564>
 800a554:	348d883a 	add	r6,r6,r18
 800a558:	98ffffc4 	addi	r3,r19,-1
 800a55c:	34803036 	bltu	r6,r18,800a620 <__udivdi3+0x618>
 800a560:	30802f2e 	bgeu	r6,r2,800a620 <__udivdi3+0x618>
 800a564:	9cffff84 	addi	r19,r19,-2
 800a568:	348d883a 	add	r6,r6,r18
 800a56c:	b82e943a 	slli	r23,r23,16
 800a570:	30a1c83a 	sub	r16,r6,r2
 800a574:	9dc6b03a 	or	r3,r19,r23
 800a578:	003f2606 	br	800a214 <__alt_data_end+0xfc00a214>
 800a57c:	2027883a 	mov	r19,r4
 800a580:	003f5106 	br	800a2c8 <__alt_data_end+0xfc00a2c8>
 800a584:	1827883a 	mov	r19,r3
 800a588:	003ef006 	br	800a14c <__alt_data_end+0xfc00a14c>
 800a58c:	1808943a 	slli	r4,r3,16
 800a590:	9dc6983a 	sll	r3,r19,r23
 800a594:	e73fffcc 	andi	fp,fp,65535
 800a598:	2709883a 	add	r4,r4,fp
 800a59c:	193fbd2e 	bgeu	r3,r4,800a494 <__alt_data_end+0xfc00a494>
 800a5a0:	a0bfffc4 	addi	r2,r20,-1
 800a5a4:	0007883a 	mov	r3,zero
 800a5a8:	003f4c06 	br	800a2dc <__alt_data_end+0xfc00a2dc>
 800a5ac:	01400404 	movi	r5,16
 800a5b0:	2811883a 	mov	r8,r5
 800a5b4:	003ef106 	br	800a17c <__alt_data_end+0xfc00a17c>
 800a5b8:	000b883a 	mov	r5,zero
 800a5bc:	0011883a 	mov	r8,zero
 800a5c0:	003eee06 	br	800a17c <__alt_data_end+0xfc00a17c>
 800a5c4:	00800404 	movi	r2,16
 800a5c8:	1007883a 	mov	r3,r2
 800a5cc:	003ea606 	br	800a068 <__alt_data_end+0xfc00a068>
 800a5d0:	00800404 	movi	r2,16
 800a5d4:	1007883a 	mov	r3,r2
 800a5d8:	003f0106 	br	800a1e0 <__alt_data_end+0xfc00a1e0>
 800a5dc:	0005883a 	mov	r2,zero
 800a5e0:	0007883a 	mov	r3,zero
 800a5e4:	003efe06 	br	800a1e0 <__alt_data_end+0xfc00a1e0>
 800a5e8:	0005883a 	mov	r2,zero
 800a5ec:	0007883a 	mov	r3,zero
 800a5f0:	003e9d06 	br	800a068 <__alt_data_end+0xfc00a068>
 800a5f4:	0007883a 	mov	r3,zero
 800a5f8:	00800044 	movi	r2,1
 800a5fc:	003f3706 	br	800a2dc <__alt_data_end+0xfc00a2dc>
 800a600:	80bf832e 	bgeu	r16,r2,800a410 <__alt_data_end+0xfc00a410>
 800a604:	8c7fff84 	addi	r17,r17,-2
 800a608:	8721883a 	add	r16,r16,fp
 800a60c:	003f8106 	br	800a414 <__alt_data_end+0xfc00a414>
 800a610:	48bf6a2e 	bgeu	r9,r2,800a3bc <__alt_data_end+0xfc00a3bc>
 800a614:	a53fff84 	addi	r20,r20,-2
 800a618:	4f13883a 	add	r9,r9,fp
 800a61c:	003f6806 	br	800a3c0 <__alt_data_end+0xfc00a3c0>
 800a620:	1827883a 	mov	r19,r3
 800a624:	003fd106 	br	800a56c <__alt_data_end+0xfc00a56c>
 800a628:	182f883a 	mov	r23,r3
 800a62c:	003fb906 	br	800a514 <__alt_data_end+0xfc00a514>
 800a630:	843fff84 	addi	r16,r16,-2
 800a634:	348d883a 	add	r6,r6,r18
 800a638:	003f0c06 	br	800a26c <__alt_data_end+0xfc00a26c>
 800a63c:	843fff84 	addi	r16,r16,-2
 800a640:	1c87883a 	add	r3,r3,r18
 800a644:	003eac06 	br	800a0f8 <__alt_data_end+0xfc00a0f8>

0800a648 <__umoddi3>:
 800a648:	defff404 	addi	sp,sp,-48
 800a64c:	dd800815 	stw	r22,32(sp)
 800a650:	dc400315 	stw	r17,12(sp)
 800a654:	dc000215 	stw	r16,8(sp)
 800a658:	dfc00b15 	stw	ra,44(sp)
 800a65c:	df000a15 	stw	fp,40(sp)
 800a660:	ddc00915 	stw	r23,36(sp)
 800a664:	dd400715 	stw	r21,28(sp)
 800a668:	dd000615 	stw	r20,24(sp)
 800a66c:	dcc00515 	stw	r19,20(sp)
 800a670:	dc800415 	stw	r18,16(sp)
 800a674:	2021883a 	mov	r16,r4
 800a678:	2823883a 	mov	r17,r5
 800a67c:	282d883a 	mov	r22,r5
 800a680:	38003c1e 	bne	r7,zero,800a774 <__umoddi3+0x12c>
 800a684:	3027883a 	mov	r19,r6
 800a688:	2029883a 	mov	r20,r4
 800a68c:	2980522e 	bgeu	r5,r6,800a7d8 <__umoddi3+0x190>
 800a690:	00bfffd4 	movui	r2,65535
 800a694:	1180a436 	bltu	r2,r6,800a928 <__umoddi3+0x2e0>
 800a698:	00803fc4 	movi	r2,255
 800a69c:	11815e2e 	bgeu	r2,r6,800ac18 <__umoddi3+0x5d0>
 800a6a0:	01400204 	movi	r5,8
 800a6a4:	2805883a 	mov	r2,r5
 800a6a8:	314ad83a 	srl	r5,r6,r5
 800a6ac:	00c20074 	movhi	r3,2049
 800a6b0:	18c19c04 	addi	r3,r3,1648
 800a6b4:	194b883a 	add	r5,r3,r5
 800a6b8:	29000003 	ldbu	r4,0(r5)
 800a6bc:	2089883a 	add	r4,r4,r2
 800a6c0:	00800804 	movi	r2,32
 800a6c4:	1105c83a 	sub	r2,r2,r4
 800a6c8:	10010c26 	beq	r2,zero,800aafc <__umoddi3+0x4b4>
 800a6cc:	88a2983a 	sll	r17,r17,r2
 800a6d0:	8108d83a 	srl	r4,r16,r4
 800a6d4:	30a6983a 	sll	r19,r6,r2
 800a6d8:	80a8983a 	sll	r20,r16,r2
 800a6dc:	1025883a 	mov	r18,r2
 800a6e0:	892cb03a 	or	r22,r17,r4
 800a6e4:	9822d43a 	srli	r17,r19,16
 800a6e8:	b009883a 	mov	r4,r22
 800a6ec:	9d7fffcc 	andi	r21,r19,65535
 800a6f0:	880b883a 	mov	r5,r17
 800a6f4:	800ad880 	call	800ad88 <__umodsi3>
 800a6f8:	b009883a 	mov	r4,r22
 800a6fc:	880b883a 	mov	r5,r17
 800a700:	102f883a 	mov	r23,r2
 800a704:	800ad800 	call	800ad80 <__udivsi3>
 800a708:	1009883a 	mov	r4,r2
 800a70c:	a80b883a 	mov	r5,r21
 800a710:	800ad900 	call	800ad90 <__mulsi3>
 800a714:	b82e943a 	slli	r23,r23,16
 800a718:	a008d43a 	srli	r4,r20,16
 800a71c:	b906b03a 	or	r3,r23,r4
 800a720:	1880042e 	bgeu	r3,r2,800a734 <__umoddi3+0xec>
 800a724:	1cc7883a 	add	r3,r3,r19
 800a728:	1cc00236 	bltu	r3,r19,800a734 <__umoddi3+0xec>
 800a72c:	1880012e 	bgeu	r3,r2,800a734 <__umoddi3+0xec>
 800a730:	1cc7883a 	add	r3,r3,r19
 800a734:	18a1c83a 	sub	r16,r3,r2
 800a738:	8009883a 	mov	r4,r16
 800a73c:	880b883a 	mov	r5,r17
 800a740:	800ad880 	call	800ad88 <__umodsi3>
 800a744:	8009883a 	mov	r4,r16
 800a748:	880b883a 	mov	r5,r17
 800a74c:	102d883a 	mov	r22,r2
 800a750:	800ad800 	call	800ad80 <__udivsi3>
 800a754:	1009883a 	mov	r4,r2
 800a758:	a80b883a 	mov	r5,r21
 800a75c:	b02c943a 	slli	r22,r22,16
 800a760:	800ad900 	call	800ad90 <__mulsi3>
 800a764:	a13fffcc 	andi	r4,r20,65535
 800a768:	b106b03a 	or	r3,r22,r4
 800a76c:	1880572e 	bgeu	r3,r2,800a8cc <__umoddi3+0x284>
 800a770:	00005206 	br	800a8bc <__umoddi3+0x274>
 800a774:	29c05936 	bltu	r5,r7,800a8dc <__umoddi3+0x294>
 800a778:	00bfffd4 	movui	r2,65535
 800a77c:	11c0652e 	bgeu	r2,r7,800a914 <__umoddi3+0x2cc>
 800a780:	00804034 	movhi	r2,256
 800a784:	10bfffc4 	addi	r2,r2,-1
 800a788:	11c1172e 	bgeu	r2,r7,800abe8 <__umoddi3+0x5a0>
 800a78c:	01400604 	movi	r5,24
 800a790:	282b883a 	mov	r21,r5
 800a794:	394ad83a 	srl	r5,r7,r5
 800a798:	00c20074 	movhi	r3,2049
 800a79c:	18c19c04 	addi	r3,r3,1648
 800a7a0:	194b883a 	add	r5,r3,r5
 800a7a4:	28800003 	ldbu	r2,0(r5)
 800a7a8:	00c00804 	movi	r3,32
 800a7ac:	156b883a 	add	r21,r2,r21
 800a7b0:	1d69c83a 	sub	r20,r3,r21
 800a7b4:	a000671e 	bne	r20,zero,800a954 <__umoddi3+0x30c>
 800a7b8:	3c400136 	bltu	r7,r17,800a7c0 <__umoddi3+0x178>
 800a7bc:	81812336 	bltu	r16,r6,800ac4c <__umoddi3+0x604>
 800a7c0:	8185c83a 	sub	r2,r16,r6
 800a7c4:	89e3c83a 	sub	r17,r17,r7
 800a7c8:	8087803a 	cmpltu	r3,r16,r2
 800a7cc:	88edc83a 	sub	r22,r17,r3
 800a7d0:	b007883a 	mov	r3,r22
 800a7d4:	00004306 	br	800a8e4 <__umoddi3+0x29c>
 800a7d8:	3000041e 	bne	r6,zero,800a7ec <__umoddi3+0x1a4>
 800a7dc:	01000044 	movi	r4,1
 800a7e0:	000b883a 	mov	r5,zero
 800a7e4:	800ad800 	call	800ad80 <__udivsi3>
 800a7e8:	1027883a 	mov	r19,r2
 800a7ec:	00bfffd4 	movui	r2,65535
 800a7f0:	14c0532e 	bgeu	r2,r19,800a940 <__umoddi3+0x2f8>
 800a7f4:	00804034 	movhi	r2,256
 800a7f8:	10bfffc4 	addi	r2,r2,-1
 800a7fc:	14c1032e 	bgeu	r2,r19,800ac0c <__umoddi3+0x5c4>
 800a800:	00800604 	movi	r2,24
 800a804:	1007883a 	mov	r3,r2
 800a808:	9884d83a 	srl	r2,r19,r2
 800a80c:	01020074 	movhi	r4,2049
 800a810:	21019c04 	addi	r4,r4,1648
 800a814:	2085883a 	add	r2,r4,r2
 800a818:	11000003 	ldbu	r4,0(r2)
 800a81c:	00800804 	movi	r2,32
 800a820:	20c7883a 	add	r3,r4,r3
 800a824:	10c5c83a 	sub	r2,r2,r3
 800a828:	1000b61e 	bne	r2,zero,800ab04 <__umoddi3+0x4bc>
 800a82c:	982ad43a 	srli	r21,r19,16
 800a830:	8ce3c83a 	sub	r17,r17,r19
 800a834:	9dbfffcc 	andi	r22,r19,65535
 800a838:	0025883a 	mov	r18,zero
 800a83c:	8809883a 	mov	r4,r17
 800a840:	a80b883a 	mov	r5,r21
 800a844:	800ad880 	call	800ad88 <__umodsi3>
 800a848:	8809883a 	mov	r4,r17
 800a84c:	a80b883a 	mov	r5,r21
 800a850:	102f883a 	mov	r23,r2
 800a854:	800ad800 	call	800ad80 <__udivsi3>
 800a858:	1009883a 	mov	r4,r2
 800a85c:	b00b883a 	mov	r5,r22
 800a860:	800ad900 	call	800ad90 <__mulsi3>
 800a864:	b82e943a 	slli	r23,r23,16
 800a868:	a008d43a 	srli	r4,r20,16
 800a86c:	b906b03a 	or	r3,r23,r4
 800a870:	1880032e 	bgeu	r3,r2,800a880 <__umoddi3+0x238>
 800a874:	1cc7883a 	add	r3,r3,r19
 800a878:	1cc00136 	bltu	r3,r19,800a880 <__umoddi3+0x238>
 800a87c:	1880f136 	bltu	r3,r2,800ac44 <__umoddi3+0x5fc>
 800a880:	18a1c83a 	sub	r16,r3,r2
 800a884:	8009883a 	mov	r4,r16
 800a888:	a80b883a 	mov	r5,r21
 800a88c:	800ad880 	call	800ad88 <__umodsi3>
 800a890:	8009883a 	mov	r4,r16
 800a894:	a80b883a 	mov	r5,r21
 800a898:	1023883a 	mov	r17,r2
 800a89c:	800ad800 	call	800ad80 <__udivsi3>
 800a8a0:	1009883a 	mov	r4,r2
 800a8a4:	b00b883a 	mov	r5,r22
 800a8a8:	8822943a 	slli	r17,r17,16
 800a8ac:	800ad900 	call	800ad90 <__mulsi3>
 800a8b0:	a13fffcc 	andi	r4,r20,65535
 800a8b4:	8906b03a 	or	r3,r17,r4
 800a8b8:	1880042e 	bgeu	r3,r2,800a8cc <__umoddi3+0x284>
 800a8bc:	1cc7883a 	add	r3,r3,r19
 800a8c0:	1cc00236 	bltu	r3,r19,800a8cc <__umoddi3+0x284>
 800a8c4:	1880012e 	bgeu	r3,r2,800a8cc <__umoddi3+0x284>
 800a8c8:	1cc7883a 	add	r3,r3,r19
 800a8cc:	1887c83a 	sub	r3,r3,r2
 800a8d0:	1c84d83a 	srl	r2,r3,r18
 800a8d4:	0007883a 	mov	r3,zero
 800a8d8:	00000206 	br	800a8e4 <__umoddi3+0x29c>
 800a8dc:	2005883a 	mov	r2,r4
 800a8e0:	2807883a 	mov	r3,r5
 800a8e4:	dfc00b17 	ldw	ra,44(sp)
 800a8e8:	df000a17 	ldw	fp,40(sp)
 800a8ec:	ddc00917 	ldw	r23,36(sp)
 800a8f0:	dd800817 	ldw	r22,32(sp)
 800a8f4:	dd400717 	ldw	r21,28(sp)
 800a8f8:	dd000617 	ldw	r20,24(sp)
 800a8fc:	dcc00517 	ldw	r19,20(sp)
 800a900:	dc800417 	ldw	r18,16(sp)
 800a904:	dc400317 	ldw	r17,12(sp)
 800a908:	dc000217 	ldw	r16,8(sp)
 800a90c:	dec00c04 	addi	sp,sp,48
 800a910:	f800283a 	ret
 800a914:	00803fc4 	movi	r2,255
 800a918:	11c0b02e 	bgeu	r2,r7,800abdc <__umoddi3+0x594>
 800a91c:	01400204 	movi	r5,8
 800a920:	282b883a 	mov	r21,r5
 800a924:	003f9b06 	br	800a794 <__alt_data_end+0xfc00a794>
 800a928:	00804034 	movhi	r2,256
 800a92c:	10bfffc4 	addi	r2,r2,-1
 800a930:	1180b02e 	bgeu	r2,r6,800abf4 <__umoddi3+0x5ac>
 800a934:	01400604 	movi	r5,24
 800a938:	2805883a 	mov	r2,r5
 800a93c:	003f5a06 	br	800a6a8 <__alt_data_end+0xfc00a6a8>
 800a940:	00803fc4 	movi	r2,255
 800a944:	14c0ae2e 	bgeu	r2,r19,800ac00 <__umoddi3+0x5b8>
 800a948:	00800204 	movi	r2,8
 800a94c:	1007883a 	mov	r3,r2
 800a950:	003fad06 	br	800a808 <__alt_data_end+0xfc00a808>
 800a954:	3d0a983a 	sll	r5,r7,r20
 800a958:	356cd83a 	srl	r22,r6,r21
 800a95c:	8d78d83a 	srl	fp,r17,r21
 800a960:	8d10983a 	sll	r8,r17,r20
 800a964:	2dacb03a 	or	r22,r5,r22
 800a968:	b02ed43a 	srli	r23,r22,16
 800a96c:	8564d83a 	srl	r18,r16,r21
 800a970:	e009883a 	mov	r4,fp
 800a974:	b80b883a 	mov	r5,r23
 800a978:	44a4b03a 	or	r18,r8,r18
 800a97c:	3526983a 	sll	r19,r6,r20
 800a980:	800ad880 	call	800ad88 <__umodsi3>
 800a984:	e009883a 	mov	r4,fp
 800a988:	b80b883a 	mov	r5,r23
 800a98c:	b47fffcc 	andi	r17,r22,65535
 800a990:	d8800015 	stw	r2,0(sp)
 800a994:	800ad800 	call	800ad80 <__udivsi3>
 800a998:	1009883a 	mov	r4,r2
 800a99c:	880b883a 	mov	r5,r17
 800a9a0:	1039883a 	mov	fp,r2
 800a9a4:	800ad900 	call	800ad90 <__mulsi3>
 800a9a8:	d9800017 	ldw	r6,0(sp)
 800a9ac:	9008d43a 	srli	r4,r18,16
 800a9b0:	8520983a 	sll	r16,r16,r20
 800a9b4:	300c943a 	slli	r6,r6,16
 800a9b8:	3106b03a 	or	r3,r6,r4
 800a9bc:	1880042e 	bgeu	r3,r2,800a9d0 <__umoddi3+0x388>
 800a9c0:	1d87883a 	add	r3,r3,r22
 800a9c4:	e13fffc4 	addi	r4,fp,-1
 800a9c8:	1d809a2e 	bgeu	r3,r22,800ac34 <__umoddi3+0x5ec>
 800a9cc:	2039883a 	mov	fp,r4
 800a9d0:	1887c83a 	sub	r3,r3,r2
 800a9d4:	1809883a 	mov	r4,r3
 800a9d8:	b80b883a 	mov	r5,r23
 800a9dc:	d8c00115 	stw	r3,4(sp)
 800a9e0:	800ad880 	call	800ad88 <__umodsi3>
 800a9e4:	d8c00117 	ldw	r3,4(sp)
 800a9e8:	b80b883a 	mov	r5,r23
 800a9ec:	d8800015 	stw	r2,0(sp)
 800a9f0:	1809883a 	mov	r4,r3
 800a9f4:	800ad800 	call	800ad80 <__udivsi3>
 800a9f8:	880b883a 	mov	r5,r17
 800a9fc:	1009883a 	mov	r4,r2
 800aa00:	102f883a 	mov	r23,r2
 800aa04:	800ad900 	call	800ad90 <__mulsi3>
 800aa08:	d9800017 	ldw	r6,0(sp)
 800aa0c:	947fffcc 	andi	r17,r18,65535
 800aa10:	300c943a 	slli	r6,r6,16
 800aa14:	3464b03a 	or	r18,r6,r17
 800aa18:	9080042e 	bgeu	r18,r2,800aa2c <__umoddi3+0x3e4>
 800aa1c:	95a5883a 	add	r18,r18,r22
 800aa20:	b8ffffc4 	addi	r3,r23,-1
 800aa24:	95807f2e 	bgeu	r18,r22,800ac24 <__umoddi3+0x5dc>
 800aa28:	182f883a 	mov	r23,r3
 800aa2c:	e038943a 	slli	fp,fp,16
 800aa30:	980cd43a 	srli	r6,r19,16
 800aa34:	98ffffcc 	andi	r3,r19,65535
 800aa38:	bf38b03a 	or	fp,r23,fp
 800aa3c:	e02ed43a 	srli	r23,fp,16
 800aa40:	e73fffcc 	andi	fp,fp,65535
 800aa44:	180b883a 	mov	r5,r3
 800aa48:	e009883a 	mov	r4,fp
 800aa4c:	d9800015 	stw	r6,0(sp)
 800aa50:	d8c00115 	stw	r3,4(sp)
 800aa54:	90a5c83a 	sub	r18,r18,r2
 800aa58:	800ad900 	call	800ad90 <__mulsi3>
 800aa5c:	d8c00117 	ldw	r3,4(sp)
 800aa60:	b809883a 	mov	r4,r23
 800aa64:	1023883a 	mov	r17,r2
 800aa68:	180b883a 	mov	r5,r3
 800aa6c:	800ad900 	call	800ad90 <__mulsi3>
 800aa70:	d9800017 	ldw	r6,0(sp)
 800aa74:	b809883a 	mov	r4,r23
 800aa78:	d8800115 	stw	r2,4(sp)
 800aa7c:	300b883a 	mov	r5,r6
 800aa80:	302f883a 	mov	r23,r6
 800aa84:	800ad900 	call	800ad90 <__mulsi3>
 800aa88:	e009883a 	mov	r4,fp
 800aa8c:	b80b883a 	mov	r5,r23
 800aa90:	d8800015 	stw	r2,0(sp)
 800aa94:	800ad900 	call	800ad90 <__mulsi3>
 800aa98:	d8c00117 	ldw	r3,4(sp)
 800aa9c:	880cd43a 	srli	r6,r17,16
 800aaa0:	d9c00017 	ldw	r7,0(sp)
 800aaa4:	1885883a 	add	r2,r3,r2
 800aaa8:	118d883a 	add	r6,r2,r6
 800aaac:	30c0022e 	bgeu	r6,r3,800aab8 <__umoddi3+0x470>
 800aab0:	00800074 	movhi	r2,1
 800aab4:	388f883a 	add	r7,r7,r2
 800aab8:	3006d43a 	srli	r3,r6,16
 800aabc:	300c943a 	slli	r6,r6,16
 800aac0:	8c7fffcc 	andi	r17,r17,65535
 800aac4:	38c7883a 	add	r3,r7,r3
 800aac8:	3463883a 	add	r17,r6,r17
 800aacc:	90c03d36 	bltu	r18,r3,800abc4 <__umoddi3+0x57c>
 800aad0:	90c06026 	beq	r18,r3,800ac54 <__umoddi3+0x60c>
 800aad4:	90c9c83a 	sub	r4,r18,r3
 800aad8:	880f883a 	mov	r7,r17
 800aadc:	81cfc83a 	sub	r7,r16,r7
 800aae0:	81c7803a 	cmpltu	r3,r16,r7
 800aae4:	20c7c83a 	sub	r3,r4,r3
 800aae8:	1d44983a 	sll	r2,r3,r21
 800aaec:	3d0ed83a 	srl	r7,r7,r20
 800aaf0:	1d06d83a 	srl	r3,r3,r20
 800aaf4:	11c4b03a 	or	r2,r2,r7
 800aaf8:	003f7a06 	br	800a8e4 <__alt_data_end+0xfc00a8e4>
 800aafc:	0025883a 	mov	r18,zero
 800ab00:	003ef806 	br	800a6e4 <__alt_data_end+0xfc00a6e4>
 800ab04:	98a6983a 	sll	r19,r19,r2
 800ab08:	88e8d83a 	srl	r20,r17,r3
 800ab0c:	80c6d83a 	srl	r3,r16,r3
 800ab10:	982ad43a 	srli	r21,r19,16
 800ab14:	88a2983a 	sll	r17,r17,r2
 800ab18:	a009883a 	mov	r4,r20
 800ab1c:	a80b883a 	mov	r5,r21
 800ab20:	88eeb03a 	or	r23,r17,r3
 800ab24:	1025883a 	mov	r18,r2
 800ab28:	800ad880 	call	800ad88 <__umodsi3>
 800ab2c:	a009883a 	mov	r4,r20
 800ab30:	a80b883a 	mov	r5,r21
 800ab34:	1023883a 	mov	r17,r2
 800ab38:	9dbfffcc 	andi	r22,r19,65535
 800ab3c:	800ad800 	call	800ad80 <__udivsi3>
 800ab40:	1009883a 	mov	r4,r2
 800ab44:	b00b883a 	mov	r5,r22
 800ab48:	800ad900 	call	800ad90 <__mulsi3>
 800ab4c:	8822943a 	slli	r17,r17,16
 800ab50:	b808d43a 	srli	r4,r23,16
 800ab54:	84a8983a 	sll	r20,r16,r18
 800ab58:	8906b03a 	or	r3,r17,r4
 800ab5c:	1880042e 	bgeu	r3,r2,800ab70 <__umoddi3+0x528>
 800ab60:	1cc7883a 	add	r3,r3,r19
 800ab64:	1cc00236 	bltu	r3,r19,800ab70 <__umoddi3+0x528>
 800ab68:	1880012e 	bgeu	r3,r2,800ab70 <__umoddi3+0x528>
 800ab6c:	1cc7883a 	add	r3,r3,r19
 800ab70:	18a1c83a 	sub	r16,r3,r2
 800ab74:	8009883a 	mov	r4,r16
 800ab78:	a80b883a 	mov	r5,r21
 800ab7c:	800ad880 	call	800ad88 <__umodsi3>
 800ab80:	8009883a 	mov	r4,r16
 800ab84:	a80b883a 	mov	r5,r21
 800ab88:	1039883a 	mov	fp,r2
 800ab8c:	800ad800 	call	800ad80 <__udivsi3>
 800ab90:	1009883a 	mov	r4,r2
 800ab94:	b00b883a 	mov	r5,r22
 800ab98:	800ad900 	call	800ad90 <__mulsi3>
 800ab9c:	e006943a 	slli	r3,fp,16
 800aba0:	b93fffcc 	andi	r4,r23,65535
 800aba4:	1906b03a 	or	r3,r3,r4
 800aba8:	1880042e 	bgeu	r3,r2,800abbc <__umoddi3+0x574>
 800abac:	1cc7883a 	add	r3,r3,r19
 800abb0:	1cc00236 	bltu	r3,r19,800abbc <__umoddi3+0x574>
 800abb4:	1880012e 	bgeu	r3,r2,800abbc <__umoddi3+0x574>
 800abb8:	1cc7883a 	add	r3,r3,r19
 800abbc:	18a3c83a 	sub	r17,r3,r2
 800abc0:	003f1e06 	br	800a83c <__alt_data_end+0xfc00a83c>
 800abc4:	8ccfc83a 	sub	r7,r17,r19
 800abc8:	1d89c83a 	sub	r4,r3,r22
 800abcc:	89e3803a 	cmpltu	r17,r17,r7
 800abd0:	2463c83a 	sub	r17,r4,r17
 800abd4:	9449c83a 	sub	r4,r18,r17
 800abd8:	003fc006 	br	800aadc <__alt_data_end+0xfc00aadc>
 800abdc:	000b883a 	mov	r5,zero
 800abe0:	002b883a 	mov	r21,zero
 800abe4:	003eeb06 	br	800a794 <__alt_data_end+0xfc00a794>
 800abe8:	01400404 	movi	r5,16
 800abec:	282b883a 	mov	r21,r5
 800abf0:	003ee806 	br	800a794 <__alt_data_end+0xfc00a794>
 800abf4:	01400404 	movi	r5,16
 800abf8:	2805883a 	mov	r2,r5
 800abfc:	003eaa06 	br	800a6a8 <__alt_data_end+0xfc00a6a8>
 800ac00:	0005883a 	mov	r2,zero
 800ac04:	0007883a 	mov	r3,zero
 800ac08:	003eff06 	br	800a808 <__alt_data_end+0xfc00a808>
 800ac0c:	00800404 	movi	r2,16
 800ac10:	1007883a 	mov	r3,r2
 800ac14:	003efc06 	br	800a808 <__alt_data_end+0xfc00a808>
 800ac18:	000b883a 	mov	r5,zero
 800ac1c:	0005883a 	mov	r2,zero
 800ac20:	003ea106 	br	800a6a8 <__alt_data_end+0xfc00a6a8>
 800ac24:	90bf802e 	bgeu	r18,r2,800aa28 <__alt_data_end+0xfc00aa28>
 800ac28:	bdffff84 	addi	r23,r23,-2
 800ac2c:	95a5883a 	add	r18,r18,r22
 800ac30:	003f7e06 	br	800aa2c <__alt_data_end+0xfc00aa2c>
 800ac34:	18bf652e 	bgeu	r3,r2,800a9cc <__alt_data_end+0xfc00a9cc>
 800ac38:	e73fff84 	addi	fp,fp,-2
 800ac3c:	1d87883a 	add	r3,r3,r22
 800ac40:	003f6306 	br	800a9d0 <__alt_data_end+0xfc00a9d0>
 800ac44:	1cc7883a 	add	r3,r3,r19
 800ac48:	003f0d06 	br	800a880 <__alt_data_end+0xfc00a880>
 800ac4c:	8005883a 	mov	r2,r16
 800ac50:	003edf06 	br	800a7d0 <__alt_data_end+0xfc00a7d0>
 800ac54:	847fdb36 	bltu	r16,r17,800abc4 <__alt_data_end+0xfc00abc4>
 800ac58:	880f883a 	mov	r7,r17
 800ac5c:	0009883a 	mov	r4,zero
 800ac60:	003f9e06 	br	800aadc <__alt_data_end+0xfc00aadc>

0800ac64 <udivmodsi4>:
 800ac64:	2900182e 	bgeu	r5,r4,800acc8 <udivmodsi4+0x64>
 800ac68:	28001716 	blt	r5,zero,800acc8 <udivmodsi4+0x64>
 800ac6c:	00800804 	movi	r2,32
 800ac70:	00c00044 	movi	r3,1
 800ac74:	00000206 	br	800ac80 <udivmodsi4+0x1c>
 800ac78:	10001126 	beq	r2,zero,800acc0 <udivmodsi4+0x5c>
 800ac7c:	28000516 	blt	r5,zero,800ac94 <udivmodsi4+0x30>
 800ac80:	294b883a 	add	r5,r5,r5
 800ac84:	10bfffc4 	addi	r2,r2,-1
 800ac88:	18c7883a 	add	r3,r3,r3
 800ac8c:	293ffa36 	bltu	r5,r4,800ac78 <__alt_data_end+0xfc00ac78>
 800ac90:	18000b26 	beq	r3,zero,800acc0 <udivmodsi4+0x5c>
 800ac94:	0005883a 	mov	r2,zero
 800ac98:	21400236 	bltu	r4,r5,800aca4 <udivmodsi4+0x40>
 800ac9c:	2149c83a 	sub	r4,r4,r5
 800aca0:	10c4b03a 	or	r2,r2,r3
 800aca4:	1806d07a 	srli	r3,r3,1
 800aca8:	280ad07a 	srli	r5,r5,1
 800acac:	183ffa1e 	bne	r3,zero,800ac98 <__alt_data_end+0xfc00ac98>
 800acb0:	3000011e 	bne	r6,zero,800acb8 <udivmodsi4+0x54>
 800acb4:	f800283a 	ret
 800acb8:	2005883a 	mov	r2,r4
 800acbc:	f800283a 	ret
 800acc0:	0005883a 	mov	r2,zero
 800acc4:	003ffa06 	br	800acb0 <__alt_data_end+0xfc00acb0>
 800acc8:	00c00044 	movi	r3,1
 800accc:	003ff106 	br	800ac94 <__alt_data_end+0xfc00ac94>

0800acd0 <__divsi3>:
 800acd0:	defffe04 	addi	sp,sp,-8
 800acd4:	dfc00115 	stw	ra,4(sp)
 800acd8:	dc000015 	stw	r16,0(sp)
 800acdc:	20000b16 	blt	r4,zero,800ad0c <__divsi3+0x3c>
 800ace0:	0021883a 	mov	r16,zero
 800ace4:	28000c16 	blt	r5,zero,800ad18 <__divsi3+0x48>
 800ace8:	000d883a 	mov	r6,zero
 800acec:	800ac640 	call	800ac64 <udivmodsi4>
 800acf0:	0407c83a 	sub	r3,zero,r16
 800acf4:	1884f03a 	xor	r2,r3,r2
 800acf8:	1405883a 	add	r2,r2,r16
 800acfc:	dfc00117 	ldw	ra,4(sp)
 800ad00:	dc000017 	ldw	r16,0(sp)
 800ad04:	dec00204 	addi	sp,sp,8
 800ad08:	f800283a 	ret
 800ad0c:	0109c83a 	sub	r4,zero,r4
 800ad10:	04000044 	movi	r16,1
 800ad14:	283ff40e 	bge	r5,zero,800ace8 <__alt_data_end+0xfc00ace8>
 800ad18:	014bc83a 	sub	r5,zero,r5
 800ad1c:	8400005c 	xori	r16,r16,1
 800ad20:	003ff106 	br	800ace8 <__alt_data_end+0xfc00ace8>

0800ad24 <__modsi3>:
 800ad24:	defffd04 	addi	sp,sp,-12
 800ad28:	dfc00215 	stw	ra,8(sp)
 800ad2c:	dc400115 	stw	r17,4(sp)
 800ad30:	dc000015 	stw	r16,0(sp)
 800ad34:	20000c16 	blt	r4,zero,800ad68 <__modsi3+0x44>
 800ad38:	0023883a 	mov	r17,zero
 800ad3c:	0021883a 	mov	r16,zero
 800ad40:	28000d16 	blt	r5,zero,800ad78 <__modsi3+0x54>
 800ad44:	01800044 	movi	r6,1
 800ad48:	800ac640 	call	800ac64 <udivmodsi4>
 800ad4c:	1404f03a 	xor	r2,r2,r16
 800ad50:	8885883a 	add	r2,r17,r2
 800ad54:	dfc00217 	ldw	ra,8(sp)
 800ad58:	dc400117 	ldw	r17,4(sp)
 800ad5c:	dc000017 	ldw	r16,0(sp)
 800ad60:	dec00304 	addi	sp,sp,12
 800ad64:	f800283a 	ret
 800ad68:	0109c83a 	sub	r4,zero,r4
 800ad6c:	04400044 	movi	r17,1
 800ad70:	043fffc4 	movi	r16,-1
 800ad74:	283ff30e 	bge	r5,zero,800ad44 <__alt_data_end+0xfc00ad44>
 800ad78:	014bc83a 	sub	r5,zero,r5
 800ad7c:	003ff106 	br	800ad44 <__alt_data_end+0xfc00ad44>

0800ad80 <__udivsi3>:
 800ad80:	000d883a 	mov	r6,zero
 800ad84:	800ac641 	jmpi	800ac64 <udivmodsi4>

0800ad88 <__umodsi3>:
 800ad88:	01800044 	movi	r6,1
 800ad8c:	800ac641 	jmpi	800ac64 <udivmodsi4>

0800ad90 <__mulsi3>:
 800ad90:	0005883a 	mov	r2,zero
 800ad94:	20000726 	beq	r4,zero,800adb4 <__mulsi3+0x24>
 800ad98:	20c0004c 	andi	r3,r4,1
 800ad9c:	2008d07a 	srli	r4,r4,1
 800ada0:	18000126 	beq	r3,zero,800ada8 <__mulsi3+0x18>
 800ada4:	1145883a 	add	r2,r2,r5
 800ada8:	294b883a 	add	r5,r5,r5
 800adac:	203ffa1e 	bne	r4,zero,800ad98 <__alt_data_end+0xfc00ad98>
 800adb0:	f800283a 	ret
 800adb4:	f800283a 	ret

0800adb8 <__adddf3>:
 800adb8:	02000434 	movhi	r8,16
 800adbc:	423fffc4 	addi	r8,r8,-1
 800adc0:	defffb04 	addi	sp,sp,-20
 800adc4:	2a12703a 	and	r9,r5,r8
 800adc8:	2806d7fa 	srli	r3,r5,31
 800adcc:	3a10703a 	and	r8,r7,r8
 800add0:	3804d53a 	srli	r2,r7,20
 800add4:	3014d77a 	srli	r10,r6,29
 800add8:	dc000015 	stw	r16,0(sp)
 800addc:	481290fa 	slli	r9,r9,3
 800ade0:	2820d53a 	srli	r16,r5,20
 800ade4:	401090fa 	slli	r8,r8,3
 800ade8:	200ad77a 	srli	r5,r4,29
 800adec:	380ed7fa 	srli	r7,r7,31
 800adf0:	dc800215 	stw	r18,8(sp)
 800adf4:	dc400115 	stw	r17,4(sp)
 800adf8:	dfc00415 	stw	ra,16(sp)
 800adfc:	dcc00315 	stw	r19,12(sp)
 800ae00:	1c803fcc 	andi	r18,r3,255
 800ae04:	8401ffcc 	andi	r16,r16,2047
 800ae08:	494ab03a 	or	r5,r9,r5
 800ae0c:	202290fa 	slli	r17,r4,3
 800ae10:	1081ffcc 	andi	r2,r2,2047
 800ae14:	4290b03a 	or	r8,r8,r10
 800ae18:	300c90fa 	slli	r6,r6,3
 800ae1c:	91c07026 	beq	r18,r7,800afe0 <__adddf3+0x228>
 800ae20:	8087c83a 	sub	r3,r16,r2
 800ae24:	00c0b30e 	bge	zero,r3,800b0f4 <__adddf3+0x33c>
 800ae28:	10002a1e 	bne	r2,zero,800aed4 <__adddf3+0x11c>
 800ae2c:	4184b03a 	or	r2,r8,r6
 800ae30:	1000991e 	bne	r2,zero,800b098 <__adddf3+0x2e0>
 800ae34:	888001cc 	andi	r2,r17,7
 800ae38:	10005b26 	beq	r2,zero,800afa8 <__adddf3+0x1f0>
 800ae3c:	88c003cc 	andi	r3,r17,15
 800ae40:	00800104 	movi	r2,4
 800ae44:	18805826 	beq	r3,r2,800afa8 <__adddf3+0x1f0>
 800ae48:	89800104 	addi	r6,r17,4
 800ae4c:	3463803a 	cmpltu	r17,r6,r17
 800ae50:	2c4b883a 	add	r5,r5,r17
 800ae54:	2880202c 	andhi	r2,r5,128
 800ae58:	9007883a 	mov	r3,r18
 800ae5c:	3023883a 	mov	r17,r6
 800ae60:	10005426 	beq	r2,zero,800afb4 <__adddf3+0x1fc>
 800ae64:	84000044 	addi	r16,r16,1
 800ae68:	0081ffc4 	movi	r2,2047
 800ae6c:	8080c126 	beq	r16,r2,800b174 <__adddf3+0x3bc>
 800ae70:	013fe034 	movhi	r4,65408
 800ae74:	213fffc4 	addi	r4,r4,-1
 800ae78:	290a703a 	and	r5,r5,r4
 800ae7c:	2804977a 	slli	r2,r5,29
 800ae80:	280a927a 	slli	r5,r5,9
 800ae84:	8822d0fa 	srli	r17,r17,3
 800ae88:	8401ffcc 	andi	r16,r16,2047
 800ae8c:	2808d33a 	srli	r4,r5,12
 800ae90:	1444b03a 	or	r2,r2,r17
 800ae94:	8401ffcc 	andi	r16,r16,2047
 800ae98:	800a953a 	slli	r5,r16,20
 800ae9c:	18c03fcc 	andi	r3,r3,255
 800aea0:	04000434 	movhi	r16,16
 800aea4:	180697fa 	slli	r3,r3,31
 800aea8:	843fffc4 	addi	r16,r16,-1
 800aeac:	2420703a 	and	r16,r4,r16
 800aeb0:	8160b03a 	or	r16,r16,r5
 800aeb4:	80c6b03a 	or	r3,r16,r3
 800aeb8:	dfc00417 	ldw	ra,16(sp)
 800aebc:	dcc00317 	ldw	r19,12(sp)
 800aec0:	dc800217 	ldw	r18,8(sp)
 800aec4:	dc400117 	ldw	r17,4(sp)
 800aec8:	dc000017 	ldw	r16,0(sp)
 800aecc:	dec00504 	addi	sp,sp,20
 800aed0:	f800283a 	ret
 800aed4:	0081ffc4 	movi	r2,2047
 800aed8:	80bfd626 	beq	r16,r2,800ae34 <__alt_data_end+0xfc00ae34>
 800aedc:	42002034 	orhi	r8,r8,128
 800aee0:	00800e04 	movi	r2,56
 800aee4:	10c0a616 	blt	r2,r3,800b180 <__adddf3+0x3c8>
 800aee8:	008007c4 	movi	r2,31
 800aeec:	10c0c916 	blt	r2,r3,800b214 <__adddf3+0x45c>
 800aef0:	00800804 	movi	r2,32
 800aef4:	10c5c83a 	sub	r2,r2,r3
 800aef8:	408e983a 	sll	r7,r8,r2
 800aefc:	30c8d83a 	srl	r4,r6,r3
 800af00:	3084983a 	sll	r2,r6,r2
 800af04:	40c6d83a 	srl	r3,r8,r3
 800af08:	390cb03a 	or	r6,r7,r4
 800af0c:	1004c03a 	cmpne	r2,r2,zero
 800af10:	308cb03a 	or	r6,r6,r2
 800af14:	898dc83a 	sub	r6,r17,r6
 800af18:	89a3803a 	cmpltu	r17,r17,r6
 800af1c:	28cbc83a 	sub	r5,r5,r3
 800af20:	2c4bc83a 	sub	r5,r5,r17
 800af24:	3023883a 	mov	r17,r6
 800af28:	2880202c 	andhi	r2,r5,128
 800af2c:	10006d26 	beq	r2,zero,800b0e4 <__adddf3+0x32c>
 800af30:	04c02034 	movhi	r19,128
 800af34:	9cffffc4 	addi	r19,r19,-1
 800af38:	2ce6703a 	and	r19,r5,r19
 800af3c:	98007e26 	beq	r19,zero,800b138 <__adddf3+0x380>
 800af40:	9809883a 	mov	r4,r19
 800af44:	800d5500 	call	800d550 <__clzsi2>
 800af48:	10fffe04 	addi	r3,r2,-8
 800af4c:	010007c4 	movi	r4,31
 800af50:	20c07f16 	blt	r4,r3,800b150 <__adddf3+0x398>
 800af54:	01400a04 	movi	r5,40
 800af58:	2885c83a 	sub	r2,r5,r2
 800af5c:	888ad83a 	srl	r5,r17,r2
 800af60:	98e6983a 	sll	r19,r19,r3
 800af64:	88e2983a 	sll	r17,r17,r3
 800af68:	2ce6b03a 	or	r19,r5,r19
 800af6c:	1c007c16 	blt	r3,r16,800b160 <__adddf3+0x3a8>
 800af70:	1c21c83a 	sub	r16,r3,r16
 800af74:	81400044 	addi	r5,r16,1
 800af78:	00c007c4 	movi	r3,31
 800af7c:	19409816 	blt	r3,r5,800b1e0 <__adddf3+0x428>
 800af80:	1c21c83a 	sub	r16,r3,r16
 800af84:	8c08983a 	sll	r4,r17,r16
 800af88:	8946d83a 	srl	r3,r17,r5
 800af8c:	9c20983a 	sll	r16,r19,r16
 800af90:	2008c03a 	cmpne	r4,r4,zero
 800af94:	994ad83a 	srl	r5,r19,r5
 800af98:	1c06b03a 	or	r3,r3,r16
 800af9c:	1922b03a 	or	r17,r3,r4
 800afa0:	0021883a 	mov	r16,zero
 800afa4:	003fa306 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800afa8:	2880202c 	andhi	r2,r5,128
 800afac:	9007883a 	mov	r3,r18
 800afb0:	103fac1e 	bne	r2,zero,800ae64 <__alt_data_end+0xfc00ae64>
 800afb4:	2804977a 	slli	r2,r5,29
 800afb8:	8822d0fa 	srli	r17,r17,3
 800afbc:	0101ffc4 	movi	r4,2047
 800afc0:	280ad0fa 	srli	r5,r5,3
 800afc4:	1444b03a 	or	r2,r2,r17
 800afc8:	81002c26 	beq	r16,r4,800b07c <__adddf3+0x2c4>
 800afcc:	8120703a 	and	r16,r16,r4
 800afd0:	01000434 	movhi	r4,16
 800afd4:	213fffc4 	addi	r4,r4,-1
 800afd8:	2908703a 	and	r4,r5,r4
 800afdc:	003fad06 	br	800ae94 <__alt_data_end+0xfc00ae94>
 800afe0:	8089c83a 	sub	r4,r16,r2
 800afe4:	01006a0e 	bge	zero,r4,800b190 <__adddf3+0x3d8>
 800afe8:	10003326 	beq	r2,zero,800b0b8 <__adddf3+0x300>
 800afec:	0081ffc4 	movi	r2,2047
 800aff0:	80bf9026 	beq	r16,r2,800ae34 <__alt_data_end+0xfc00ae34>
 800aff4:	42002034 	orhi	r8,r8,128
 800aff8:	00800e04 	movi	r2,56
 800affc:	1100b116 	blt	r2,r4,800b2c4 <__adddf3+0x50c>
 800b000:	008007c4 	movi	r2,31
 800b004:	1100e216 	blt	r2,r4,800b390 <__adddf3+0x5d8>
 800b008:	00800804 	movi	r2,32
 800b00c:	1105c83a 	sub	r2,r2,r4
 800b010:	4092983a 	sll	r9,r8,r2
 800b014:	310ed83a 	srl	r7,r6,r4
 800b018:	3084983a 	sll	r2,r6,r2
 800b01c:	4110d83a 	srl	r8,r8,r4
 800b020:	49ccb03a 	or	r6,r9,r7
 800b024:	1004c03a 	cmpne	r2,r2,zero
 800b028:	308cb03a 	or	r6,r6,r2
 800b02c:	344d883a 	add	r6,r6,r17
 800b030:	3463803a 	cmpltu	r17,r6,r17
 800b034:	414b883a 	add	r5,r8,r5
 800b038:	2c4b883a 	add	r5,r5,r17
 800b03c:	3023883a 	mov	r17,r6
 800b040:	2880202c 	andhi	r2,r5,128
 800b044:	10002726 	beq	r2,zero,800b0e4 <__adddf3+0x32c>
 800b048:	84000044 	addi	r16,r16,1
 800b04c:	0081ffc4 	movi	r2,2047
 800b050:	8080ae26 	beq	r16,r2,800b30c <__adddf3+0x554>
 800b054:	00bfe034 	movhi	r2,65408
 800b058:	10bfffc4 	addi	r2,r2,-1
 800b05c:	288a703a 	and	r5,r5,r2
 800b060:	880cd07a 	srli	r6,r17,1
 800b064:	280897fa 	slli	r4,r5,31
 800b068:	88c0004c 	andi	r3,r17,1
 800b06c:	30e2b03a 	or	r17,r6,r3
 800b070:	280ad07a 	srli	r5,r5,1
 800b074:	8922b03a 	or	r17,r17,r4
 800b078:	003f6e06 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b07c:	1148b03a 	or	r4,r2,r5
 800b080:	20003c26 	beq	r4,zero,800b174 <__adddf3+0x3bc>
 800b084:	29000234 	orhi	r4,r5,8
 800b088:	01400434 	movhi	r5,16
 800b08c:	297fffc4 	addi	r5,r5,-1
 800b090:	2148703a 	and	r4,r4,r5
 800b094:	003f7f06 	br	800ae94 <__alt_data_end+0xfc00ae94>
 800b098:	18ffffc4 	addi	r3,r3,-1
 800b09c:	18004d1e 	bne	r3,zero,800b1d4 <__adddf3+0x41c>
 800b0a0:	898dc83a 	sub	r6,r17,r6
 800b0a4:	89a3803a 	cmpltu	r17,r17,r6
 800b0a8:	2a0bc83a 	sub	r5,r5,r8
 800b0ac:	2c4bc83a 	sub	r5,r5,r17
 800b0b0:	3023883a 	mov	r17,r6
 800b0b4:	003f9c06 	br	800af28 <__alt_data_end+0xfc00af28>
 800b0b8:	4184b03a 	or	r2,r8,r6
 800b0bc:	103f5d26 	beq	r2,zero,800ae34 <__alt_data_end+0xfc00ae34>
 800b0c0:	213fffc4 	addi	r4,r4,-1
 800b0c4:	203fd926 	beq	r4,zero,800b02c <__alt_data_end+0xfc00b02c>
 800b0c8:	0081ffc4 	movi	r2,2047
 800b0cc:	80bfca1e 	bne	r16,r2,800aff8 <__alt_data_end+0xfc00aff8>
 800b0d0:	003f5806 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b0d4:	10c8b03a 	or	r4,r2,r3
 800b0d8:	20008b26 	beq	r4,zero,800b308 <__adddf3+0x550>
 800b0dc:	100b883a 	mov	r5,r2
 800b0e0:	1823883a 	mov	r17,r3
 800b0e4:	888001cc 	andi	r2,r17,7
 800b0e8:	103f541e 	bne	r2,zero,800ae3c <__alt_data_end+0xfc00ae3c>
 800b0ec:	9007883a 	mov	r3,r18
 800b0f0:	003fb006 	br	800afb4 <__alt_data_end+0xfc00afb4>
 800b0f4:	1800531e 	bne	r3,zero,800b244 <__adddf3+0x48c>
 800b0f8:	80800044 	addi	r2,r16,1
 800b0fc:	1081ffcc 	andi	r2,r2,2047
 800b100:	00c00044 	movi	r3,1
 800b104:	1880990e 	bge	r3,r2,800b36c <__adddf3+0x5b4>
 800b108:	8985c83a 	sub	r2,r17,r6
 800b10c:	8887803a 	cmpltu	r3,r17,r2
 800b110:	2a27c83a 	sub	r19,r5,r8
 800b114:	98e7c83a 	sub	r19,r19,r3
 800b118:	98c0202c 	andhi	r3,r19,128
 800b11c:	18006226 	beq	r3,zero,800b2a8 <__adddf3+0x4f0>
 800b120:	3463c83a 	sub	r17,r6,r17
 800b124:	4151c83a 	sub	r8,r8,r5
 800b128:	344d803a 	cmpltu	r6,r6,r17
 800b12c:	41a7c83a 	sub	r19,r8,r6
 800b130:	3825883a 	mov	r18,r7
 800b134:	983f821e 	bne	r19,zero,800af40 <__alt_data_end+0xfc00af40>
 800b138:	8809883a 	mov	r4,r17
 800b13c:	800d5500 	call	800d550 <__clzsi2>
 800b140:	10800804 	addi	r2,r2,32
 800b144:	10fffe04 	addi	r3,r2,-8
 800b148:	010007c4 	movi	r4,31
 800b14c:	20ff810e 	bge	r4,r3,800af54 <__alt_data_end+0xfc00af54>
 800b150:	14fff604 	addi	r19,r2,-40
 800b154:	8ce6983a 	sll	r19,r17,r19
 800b158:	0023883a 	mov	r17,zero
 800b15c:	1c3f840e 	bge	r3,r16,800af70 <__alt_data_end+0xfc00af70>
 800b160:	017fe034 	movhi	r5,65408
 800b164:	297fffc4 	addi	r5,r5,-1
 800b168:	80e1c83a 	sub	r16,r16,r3
 800b16c:	994a703a 	and	r5,r19,r5
 800b170:	003f3006 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b174:	0009883a 	mov	r4,zero
 800b178:	0005883a 	mov	r2,zero
 800b17c:	003f4506 	br	800ae94 <__alt_data_end+0xfc00ae94>
 800b180:	418cb03a 	or	r6,r8,r6
 800b184:	300cc03a 	cmpne	r6,r6,zero
 800b188:	0007883a 	mov	r3,zero
 800b18c:	003f6106 	br	800af14 <__alt_data_end+0xfc00af14>
 800b190:	2000921e 	bne	r4,zero,800b3dc <__adddf3+0x624>
 800b194:	80800044 	addi	r2,r16,1
 800b198:	11c1ffcc 	andi	r7,r2,2047
 800b19c:	01000044 	movi	r4,1
 800b1a0:	21c0610e 	bge	r4,r7,800b328 <__adddf3+0x570>
 800b1a4:	0101ffc4 	movi	r4,2047
 800b1a8:	1100a326 	beq	r2,r4,800b438 <__adddf3+0x680>
 800b1ac:	344d883a 	add	r6,r6,r17
 800b1b0:	3463803a 	cmpltu	r17,r6,r17
 800b1b4:	414b883a 	add	r5,r8,r5
 800b1b8:	2c4b883a 	add	r5,r5,r17
 800b1bc:	282297fa 	slli	r17,r5,31
 800b1c0:	300cd07a 	srli	r6,r6,1
 800b1c4:	280ad07a 	srli	r5,r5,1
 800b1c8:	1021883a 	mov	r16,r2
 800b1cc:	89a2b03a 	or	r17,r17,r6
 800b1d0:	003f1806 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b1d4:	0081ffc4 	movi	r2,2047
 800b1d8:	80bf411e 	bne	r16,r2,800aee0 <__alt_data_end+0xfc00aee0>
 800b1dc:	003f1506 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b1e0:	80bff844 	addi	r2,r16,-31
 800b1e4:	00c00804 	movi	r3,32
 800b1e8:	9884d83a 	srl	r2,r19,r2
 800b1ec:	28c04a26 	beq	r5,r3,800b318 <__adddf3+0x560>
 800b1f0:	00c00fc4 	movi	r3,63
 800b1f4:	1c21c83a 	sub	r16,r3,r16
 800b1f8:	9c26983a 	sll	r19,r19,r16
 800b1fc:	9c62b03a 	or	r17,r19,r17
 800b200:	8822c03a 	cmpne	r17,r17,zero
 800b204:	88a2b03a 	or	r17,r17,r2
 800b208:	000b883a 	mov	r5,zero
 800b20c:	0021883a 	mov	r16,zero
 800b210:	003fb406 	br	800b0e4 <__alt_data_end+0xfc00b0e4>
 800b214:	18bff804 	addi	r2,r3,-32
 800b218:	01000804 	movi	r4,32
 800b21c:	4084d83a 	srl	r2,r8,r2
 800b220:	19003f26 	beq	r3,r4,800b320 <__adddf3+0x568>
 800b224:	01001004 	movi	r4,64
 800b228:	20c7c83a 	sub	r3,r4,r3
 800b22c:	40d0983a 	sll	r8,r8,r3
 800b230:	418cb03a 	or	r6,r8,r6
 800b234:	300cc03a 	cmpne	r6,r6,zero
 800b238:	308cb03a 	or	r6,r6,r2
 800b23c:	0007883a 	mov	r3,zero
 800b240:	003f3406 	br	800af14 <__alt_data_end+0xfc00af14>
 800b244:	80002326 	beq	r16,zero,800b2d4 <__adddf3+0x51c>
 800b248:	0101ffc4 	movi	r4,2047
 800b24c:	11005e26 	beq	r2,r4,800b3c8 <__adddf3+0x610>
 800b250:	00c7c83a 	sub	r3,zero,r3
 800b254:	29402034 	orhi	r5,r5,128
 800b258:	01000e04 	movi	r4,56
 800b25c:	20c07216 	blt	r4,r3,800b428 <__adddf3+0x670>
 800b260:	010007c4 	movi	r4,31
 800b264:	20c0ce16 	blt	r4,r3,800b5a0 <__adddf3+0x7e8>
 800b268:	01000804 	movi	r4,32
 800b26c:	20c9c83a 	sub	r4,r4,r3
 800b270:	2914983a 	sll	r10,r5,r4
 800b274:	88d2d83a 	srl	r9,r17,r3
 800b278:	8908983a 	sll	r4,r17,r4
 800b27c:	28c6d83a 	srl	r3,r5,r3
 800b280:	5262b03a 	or	r17,r10,r9
 800b284:	2008c03a 	cmpne	r4,r4,zero
 800b288:	8922b03a 	or	r17,r17,r4
 800b28c:	3463c83a 	sub	r17,r6,r17
 800b290:	40c7c83a 	sub	r3,r8,r3
 800b294:	344d803a 	cmpltu	r6,r6,r17
 800b298:	198bc83a 	sub	r5,r3,r6
 800b29c:	1021883a 	mov	r16,r2
 800b2a0:	3825883a 	mov	r18,r7
 800b2a4:	003f2006 	br	800af28 <__alt_data_end+0xfc00af28>
 800b2a8:	9886b03a 	or	r3,r19,r2
 800b2ac:	1800141e 	bne	r3,zero,800b300 <__adddf3+0x548>
 800b2b0:	0007883a 	mov	r3,zero
 800b2b4:	000b883a 	mov	r5,zero
 800b2b8:	0023883a 	mov	r17,zero
 800b2bc:	0021883a 	mov	r16,zero
 800b2c0:	003f3c06 	br	800afb4 <__alt_data_end+0xfc00afb4>
 800b2c4:	418cb03a 	or	r6,r8,r6
 800b2c8:	300cc03a 	cmpne	r6,r6,zero
 800b2cc:	0011883a 	mov	r8,zero
 800b2d0:	003f5606 	br	800b02c <__alt_data_end+0xfc00b02c>
 800b2d4:	2c48b03a 	or	r4,r5,r17
 800b2d8:	20003b26 	beq	r4,zero,800b3c8 <__adddf3+0x610>
 800b2dc:	00c6303a 	nor	r3,zero,r3
 800b2e0:	1800371e 	bne	r3,zero,800b3c0 <__adddf3+0x608>
 800b2e4:	3463c83a 	sub	r17,r6,r17
 800b2e8:	414bc83a 	sub	r5,r8,r5
 800b2ec:	344d803a 	cmpltu	r6,r6,r17
 800b2f0:	298bc83a 	sub	r5,r5,r6
 800b2f4:	1021883a 	mov	r16,r2
 800b2f8:	3825883a 	mov	r18,r7
 800b2fc:	003f0a06 	br	800af28 <__alt_data_end+0xfc00af28>
 800b300:	1023883a 	mov	r17,r2
 800b304:	003f0d06 	br	800af3c <__alt_data_end+0xfc00af3c>
 800b308:	0007883a 	mov	r3,zero
 800b30c:	000b883a 	mov	r5,zero
 800b310:	0023883a 	mov	r17,zero
 800b314:	003f2706 	br	800afb4 <__alt_data_end+0xfc00afb4>
 800b318:	0027883a 	mov	r19,zero
 800b31c:	003fb706 	br	800b1fc <__alt_data_end+0xfc00b1fc>
 800b320:	0011883a 	mov	r8,zero
 800b324:	003fc206 	br	800b230 <__alt_data_end+0xfc00b230>
 800b328:	2c44b03a 	or	r2,r5,r17
 800b32c:	8000871e 	bne	r16,zero,800b54c <__adddf3+0x794>
 800b330:	1000b126 	beq	r2,zero,800b5f8 <__adddf3+0x840>
 800b334:	4184b03a 	or	r2,r8,r6
 800b338:	103ebe26 	beq	r2,zero,800ae34 <__alt_data_end+0xfc00ae34>
 800b33c:	3445883a 	add	r2,r6,r17
 800b340:	1463803a 	cmpltu	r17,r2,r17
 800b344:	414b883a 	add	r5,r8,r5
 800b348:	2c4b883a 	add	r5,r5,r17
 800b34c:	28c0202c 	andhi	r3,r5,128
 800b350:	1023883a 	mov	r17,r2
 800b354:	183f6326 	beq	r3,zero,800b0e4 <__alt_data_end+0xfc00b0e4>
 800b358:	00bfe034 	movhi	r2,65408
 800b35c:	10bfffc4 	addi	r2,r2,-1
 800b360:	2021883a 	mov	r16,r4
 800b364:	288a703a 	and	r5,r5,r2
 800b368:	003eb206 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b36c:	2c44b03a 	or	r2,r5,r17
 800b370:	8000251e 	bne	r16,zero,800b408 <__adddf3+0x650>
 800b374:	10004b1e 	bne	r2,zero,800b4a4 <__adddf3+0x6ec>
 800b378:	4184b03a 	or	r2,r8,r6
 800b37c:	103fe226 	beq	r2,zero,800b308 <__alt_data_end+0xfc00b308>
 800b380:	400b883a 	mov	r5,r8
 800b384:	3023883a 	mov	r17,r6
 800b388:	3825883a 	mov	r18,r7
 800b38c:	003ea906 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b390:	20bff804 	addi	r2,r4,-32
 800b394:	01c00804 	movi	r7,32
 800b398:	4084d83a 	srl	r2,r8,r2
 800b39c:	21c07e26 	beq	r4,r7,800b598 <__adddf3+0x7e0>
 800b3a0:	01c01004 	movi	r7,64
 800b3a4:	3909c83a 	sub	r4,r7,r4
 800b3a8:	4110983a 	sll	r8,r8,r4
 800b3ac:	418cb03a 	or	r6,r8,r6
 800b3b0:	300cc03a 	cmpne	r6,r6,zero
 800b3b4:	308cb03a 	or	r6,r6,r2
 800b3b8:	0011883a 	mov	r8,zero
 800b3bc:	003f1b06 	br	800b02c <__alt_data_end+0xfc00b02c>
 800b3c0:	0101ffc4 	movi	r4,2047
 800b3c4:	113fa41e 	bne	r2,r4,800b258 <__alt_data_end+0xfc00b258>
 800b3c8:	400b883a 	mov	r5,r8
 800b3cc:	3023883a 	mov	r17,r6
 800b3d0:	1021883a 	mov	r16,r2
 800b3d4:	3825883a 	mov	r18,r7
 800b3d8:	003e9606 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b3dc:	80001a1e 	bne	r16,zero,800b448 <__adddf3+0x690>
 800b3e0:	2c4eb03a 	or	r7,r5,r17
 800b3e4:	38005526 	beq	r7,zero,800b53c <__adddf3+0x784>
 800b3e8:	0108303a 	nor	r4,zero,r4
 800b3ec:	2000511e 	bne	r4,zero,800b534 <__adddf3+0x77c>
 800b3f0:	89a3883a 	add	r17,r17,r6
 800b3f4:	414b883a 	add	r5,r8,r5
 800b3f8:	898d803a 	cmpltu	r6,r17,r6
 800b3fc:	298b883a 	add	r5,r5,r6
 800b400:	1021883a 	mov	r16,r2
 800b404:	003f0e06 	br	800b040 <__alt_data_end+0xfc00b040>
 800b408:	1000341e 	bne	r2,zero,800b4dc <__adddf3+0x724>
 800b40c:	4184b03a 	or	r2,r8,r6
 800b410:	10006f26 	beq	r2,zero,800b5d0 <__adddf3+0x818>
 800b414:	400b883a 	mov	r5,r8
 800b418:	3023883a 	mov	r17,r6
 800b41c:	3825883a 	mov	r18,r7
 800b420:	0401ffc4 	movi	r16,2047
 800b424:	003e8306 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b428:	2c62b03a 	or	r17,r5,r17
 800b42c:	8822c03a 	cmpne	r17,r17,zero
 800b430:	0007883a 	mov	r3,zero
 800b434:	003f9506 	br	800b28c <__alt_data_end+0xfc00b28c>
 800b438:	1021883a 	mov	r16,r2
 800b43c:	000b883a 	mov	r5,zero
 800b440:	0023883a 	mov	r17,zero
 800b444:	003edb06 	br	800afb4 <__alt_data_end+0xfc00afb4>
 800b448:	01c1ffc4 	movi	r7,2047
 800b44c:	11c03b26 	beq	r2,r7,800b53c <__adddf3+0x784>
 800b450:	0109c83a 	sub	r4,zero,r4
 800b454:	29402034 	orhi	r5,r5,128
 800b458:	01c00e04 	movi	r7,56
 800b45c:	39006216 	blt	r7,r4,800b5e8 <__adddf3+0x830>
 800b460:	01c007c4 	movi	r7,31
 800b464:	39006b16 	blt	r7,r4,800b614 <__adddf3+0x85c>
 800b468:	01c00804 	movi	r7,32
 800b46c:	390fc83a 	sub	r7,r7,r4
 800b470:	29d4983a 	sll	r10,r5,r7
 800b474:	8912d83a 	srl	r9,r17,r4
 800b478:	89ce983a 	sll	r7,r17,r7
 800b47c:	2908d83a 	srl	r4,r5,r4
 800b480:	5262b03a 	or	r17,r10,r9
 800b484:	380ac03a 	cmpne	r5,r7,zero
 800b488:	8962b03a 	or	r17,r17,r5
 800b48c:	89a3883a 	add	r17,r17,r6
 800b490:	2211883a 	add	r8,r4,r8
 800b494:	898d803a 	cmpltu	r6,r17,r6
 800b498:	418b883a 	add	r5,r8,r6
 800b49c:	1021883a 	mov	r16,r2
 800b4a0:	003ee706 	br	800b040 <__alt_data_end+0xfc00b040>
 800b4a4:	4184b03a 	or	r2,r8,r6
 800b4a8:	103e6226 	beq	r2,zero,800ae34 <__alt_data_end+0xfc00ae34>
 800b4ac:	8987c83a 	sub	r3,r17,r6
 800b4b0:	88c9803a 	cmpltu	r4,r17,r3
 800b4b4:	2a05c83a 	sub	r2,r5,r8
 800b4b8:	1105c83a 	sub	r2,r2,r4
 800b4bc:	1100202c 	andhi	r4,r2,128
 800b4c0:	203f0426 	beq	r4,zero,800b0d4 <__alt_data_end+0xfc00b0d4>
 800b4c4:	3463c83a 	sub	r17,r6,r17
 800b4c8:	414bc83a 	sub	r5,r8,r5
 800b4cc:	344d803a 	cmpltu	r6,r6,r17
 800b4d0:	298bc83a 	sub	r5,r5,r6
 800b4d4:	3825883a 	mov	r18,r7
 800b4d8:	003e5606 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b4dc:	4184b03a 	or	r2,r8,r6
 800b4e0:	10002b26 	beq	r2,zero,800b590 <__adddf3+0x7d8>
 800b4e4:	2804d0fa 	srli	r2,r5,3
 800b4e8:	8822d0fa 	srli	r17,r17,3
 800b4ec:	280a977a 	slli	r5,r5,29
 800b4f0:	10c0022c 	andhi	r3,r2,8
 800b4f4:	2c62b03a 	or	r17,r5,r17
 800b4f8:	18000826 	beq	r3,zero,800b51c <__adddf3+0x764>
 800b4fc:	4008d0fa 	srli	r4,r8,3
 800b500:	20c0022c 	andhi	r3,r4,8
 800b504:	1800051e 	bne	r3,zero,800b51c <__adddf3+0x764>
 800b508:	300cd0fa 	srli	r6,r6,3
 800b50c:	4010977a 	slli	r8,r8,29
 800b510:	2005883a 	mov	r2,r4
 800b514:	3825883a 	mov	r18,r7
 800b518:	41a2b03a 	or	r17,r8,r6
 800b51c:	880ad77a 	srli	r5,r17,29
 800b520:	100490fa 	slli	r2,r2,3
 800b524:	882290fa 	slli	r17,r17,3
 800b528:	0401ffc4 	movi	r16,2047
 800b52c:	288ab03a 	or	r5,r5,r2
 800b530:	003e4006 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b534:	01c1ffc4 	movi	r7,2047
 800b538:	11ffc71e 	bne	r2,r7,800b458 <__alt_data_end+0xfc00b458>
 800b53c:	400b883a 	mov	r5,r8
 800b540:	3023883a 	mov	r17,r6
 800b544:	1021883a 	mov	r16,r2
 800b548:	003e3a06 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b54c:	10002d26 	beq	r2,zero,800b604 <__adddf3+0x84c>
 800b550:	4184b03a 	or	r2,r8,r6
 800b554:	10000e26 	beq	r2,zero,800b590 <__adddf3+0x7d8>
 800b558:	2804d0fa 	srli	r2,r5,3
 800b55c:	8822d0fa 	srli	r17,r17,3
 800b560:	280a977a 	slli	r5,r5,29
 800b564:	10c0022c 	andhi	r3,r2,8
 800b568:	2c62b03a 	or	r17,r5,r17
 800b56c:	183feb26 	beq	r3,zero,800b51c <__alt_data_end+0xfc00b51c>
 800b570:	4008d0fa 	srli	r4,r8,3
 800b574:	20c0022c 	andhi	r3,r4,8
 800b578:	183fe81e 	bne	r3,zero,800b51c <__alt_data_end+0xfc00b51c>
 800b57c:	300cd0fa 	srli	r6,r6,3
 800b580:	4010977a 	slli	r8,r8,29
 800b584:	2005883a 	mov	r2,r4
 800b588:	41a2b03a 	or	r17,r8,r6
 800b58c:	003fe306 	br	800b51c <__alt_data_end+0xfc00b51c>
 800b590:	0401ffc4 	movi	r16,2047
 800b594:	003e2706 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b598:	0011883a 	mov	r8,zero
 800b59c:	003f8306 	br	800b3ac <__alt_data_end+0xfc00b3ac>
 800b5a0:	193ff804 	addi	r4,r3,-32
 800b5a4:	02400804 	movi	r9,32
 800b5a8:	2908d83a 	srl	r4,r5,r4
 800b5ac:	1a402526 	beq	r3,r9,800b644 <__adddf3+0x88c>
 800b5b0:	02401004 	movi	r9,64
 800b5b4:	48c7c83a 	sub	r3,r9,r3
 800b5b8:	28ca983a 	sll	r5,r5,r3
 800b5bc:	2c62b03a 	or	r17,r5,r17
 800b5c0:	8822c03a 	cmpne	r17,r17,zero
 800b5c4:	8922b03a 	or	r17,r17,r4
 800b5c8:	0007883a 	mov	r3,zero
 800b5cc:	003f2f06 	br	800b28c <__alt_data_end+0xfc00b28c>
 800b5d0:	01402034 	movhi	r5,128
 800b5d4:	0007883a 	mov	r3,zero
 800b5d8:	297fffc4 	addi	r5,r5,-1
 800b5dc:	047ffe04 	movi	r17,-8
 800b5e0:	0401ffc4 	movi	r16,2047
 800b5e4:	003e7306 	br	800afb4 <__alt_data_end+0xfc00afb4>
 800b5e8:	2c62b03a 	or	r17,r5,r17
 800b5ec:	8822c03a 	cmpne	r17,r17,zero
 800b5f0:	0009883a 	mov	r4,zero
 800b5f4:	003fa506 	br	800b48c <__alt_data_end+0xfc00b48c>
 800b5f8:	400b883a 	mov	r5,r8
 800b5fc:	3023883a 	mov	r17,r6
 800b600:	003e0c06 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b604:	400b883a 	mov	r5,r8
 800b608:	3023883a 	mov	r17,r6
 800b60c:	0401ffc4 	movi	r16,2047
 800b610:	003e0806 	br	800ae34 <__alt_data_end+0xfc00ae34>
 800b614:	21fff804 	addi	r7,r4,-32
 800b618:	02400804 	movi	r9,32
 800b61c:	29ced83a 	srl	r7,r5,r7
 800b620:	22400a26 	beq	r4,r9,800b64c <__adddf3+0x894>
 800b624:	02401004 	movi	r9,64
 800b628:	4909c83a 	sub	r4,r9,r4
 800b62c:	290a983a 	sll	r5,r5,r4
 800b630:	2c62b03a 	or	r17,r5,r17
 800b634:	8822c03a 	cmpne	r17,r17,zero
 800b638:	89e2b03a 	or	r17,r17,r7
 800b63c:	0009883a 	mov	r4,zero
 800b640:	003f9206 	br	800b48c <__alt_data_end+0xfc00b48c>
 800b644:	000b883a 	mov	r5,zero
 800b648:	003fdc06 	br	800b5bc <__alt_data_end+0xfc00b5bc>
 800b64c:	000b883a 	mov	r5,zero
 800b650:	003ff706 	br	800b630 <__alt_data_end+0xfc00b630>

0800b654 <__divdf3>:
 800b654:	defff004 	addi	sp,sp,-64
 800b658:	dc800815 	stw	r18,32(sp)
 800b65c:	2824d53a 	srli	r18,r5,20
 800b660:	dd800c15 	stw	r22,48(sp)
 800b664:	282cd7fa 	srli	r22,r5,31
 800b668:	dc000615 	stw	r16,24(sp)
 800b66c:	04000434 	movhi	r16,16
 800b670:	df000e15 	stw	fp,56(sp)
 800b674:	dd000a15 	stw	r20,40(sp)
 800b678:	dcc00915 	stw	r19,36(sp)
 800b67c:	dc400715 	stw	r17,28(sp)
 800b680:	843fffc4 	addi	r16,r16,-1
 800b684:	dfc00f15 	stw	ra,60(sp)
 800b688:	ddc00d15 	stw	r23,52(sp)
 800b68c:	dd400b15 	stw	r21,44(sp)
 800b690:	9481ffcc 	andi	r18,r18,2047
 800b694:	2029883a 	mov	r20,r4
 800b698:	2027883a 	mov	r19,r4
 800b69c:	2c22703a 	and	r17,r5,r16
 800b6a0:	b7003fcc 	andi	fp,r22,255
 800b6a4:	90005e26 	beq	r18,zero,800b820 <__divdf3+0x1cc>
 800b6a8:	0081ffc4 	movi	r2,2047
 800b6ac:	90803526 	beq	r18,r2,800b784 <__divdf3+0x130>
 800b6b0:	8c000434 	orhi	r16,r17,16
 800b6b4:	2004d77a 	srli	r2,r4,29
 800b6b8:	802090fa 	slli	r16,r16,3
 800b6bc:	202690fa 	slli	r19,r4,3
 800b6c0:	94bf0044 	addi	r18,r18,-1023
 800b6c4:	80a2b03a 	or	r17,r16,r2
 800b6c8:	0029883a 	mov	r20,zero
 800b6cc:	0011883a 	mov	r8,zero
 800b6d0:	380ad53a 	srli	r5,r7,20
 800b6d4:	382ed7fa 	srli	r23,r7,31
 800b6d8:	04000434 	movhi	r16,16
 800b6dc:	843fffc4 	addi	r16,r16,-1
 800b6e0:	2941ffcc 	andi	r5,r5,2047
 800b6e4:	302b883a 	mov	r21,r6
 800b6e8:	3c20703a 	and	r16,r7,r16
 800b6ec:	ba403fcc 	andi	r9,r23,255
 800b6f0:	28006726 	beq	r5,zero,800b890 <__divdf3+0x23c>
 800b6f4:	0081ffc4 	movi	r2,2047
 800b6f8:	28805f26 	beq	r5,r2,800b878 <__divdf3+0x224>
 800b6fc:	84000434 	orhi	r16,r16,16
 800b700:	3004d77a 	srli	r2,r6,29
 800b704:	802090fa 	slli	r16,r16,3
 800b708:	302a90fa 	slli	r21,r6,3
 800b70c:	297f0044 	addi	r5,r5,-1023
 800b710:	80a0b03a 	or	r16,r16,r2
 800b714:	000f883a 	mov	r7,zero
 800b718:	3d06b03a 	or	r3,r7,r20
 800b71c:	180690ba 	slli	r3,r3,2
 800b720:	00820074 	movhi	r2,2049
 800b724:	10add104 	addi	r2,r2,-18620
 800b728:	1885883a 	add	r2,r3,r2
 800b72c:	10800017 	ldw	r2,0(r2)
 800b730:	b5c8f03a 	xor	r4,r22,r23
 800b734:	200d883a 	mov	r6,r4
 800b738:	25003fcc 	andi	r20,r4,255
 800b73c:	9165c83a 	sub	r18,r18,r5
 800b740:	1000683a 	jmp	r2
 800b744:	0800b98c 	andi	zero,at,742
 800b748:	0800b7bc 	xorhi	zero,at,734
 800b74c:	0800b950 	cmplti	zero,at,741
 800b750:	0800b7a0 	cmpeqi	zero,at,734
 800b754:	0800b950 	cmplti	zero,at,741
 800b758:	0800b924 	muli	zero,at,740
 800b75c:	0800b950 	cmplti	zero,at,741
 800b760:	0800b7a0 	cmpeqi	zero,at,734
 800b764:	0800b7bc 	xorhi	zero,at,734
 800b768:	0800b7bc 	xorhi	zero,at,734
 800b76c:	0800b924 	muli	zero,at,740
 800b770:	0800b7a0 	cmpeqi	zero,at,734
 800b774:	0800b7b0 	cmpltui	zero,at,734
 800b778:	0800b7b0 	cmpltui	zero,at,734
 800b77c:	0800b7b0 	cmpltui	zero,at,734
 800b780:	0800b960 	cmpeqi	zero,at,741
 800b784:	8904b03a 	or	r2,r17,r4
 800b788:	1000631e 	bne	r2,zero,800b918 <__divdf3+0x2c4>
 800b78c:	05000204 	movi	r20,8
 800b790:	0023883a 	mov	r17,zero
 800b794:	0027883a 	mov	r19,zero
 800b798:	02000084 	movi	r8,2
 800b79c:	003fcc06 	br	800b6d0 <__alt_data_end+0xfc00b6d0>
 800b7a0:	8023883a 	mov	r17,r16
 800b7a4:	a827883a 	mov	r19,r21
 800b7a8:	4839883a 	mov	fp,r9
 800b7ac:	3811883a 	mov	r8,r7
 800b7b0:	00800084 	movi	r2,2
 800b7b4:	4081531e 	bne	r8,r2,800bd04 <__divdf3+0x6b0>
 800b7b8:	e029883a 	mov	r20,fp
 800b7bc:	a180004c 	andi	r6,r20,1
 800b7c0:	0201ffc4 	movi	r8,2047
 800b7c4:	000b883a 	mov	r5,zero
 800b7c8:	0027883a 	mov	r19,zero
 800b7cc:	4010953a 	slli	r8,r8,20
 800b7d0:	30c03fcc 	andi	r3,r6,255
 800b7d4:	04000434 	movhi	r16,16
 800b7d8:	180697fa 	slli	r3,r3,31
 800b7dc:	843fffc4 	addi	r16,r16,-1
 800b7e0:	2c20703a 	and	r16,r5,r16
 800b7e4:	8220b03a 	or	r16,r16,r8
 800b7e8:	80c6b03a 	or	r3,r16,r3
 800b7ec:	9805883a 	mov	r2,r19
 800b7f0:	dfc00f17 	ldw	ra,60(sp)
 800b7f4:	df000e17 	ldw	fp,56(sp)
 800b7f8:	ddc00d17 	ldw	r23,52(sp)
 800b7fc:	dd800c17 	ldw	r22,48(sp)
 800b800:	dd400b17 	ldw	r21,44(sp)
 800b804:	dd000a17 	ldw	r20,40(sp)
 800b808:	dcc00917 	ldw	r19,36(sp)
 800b80c:	dc800817 	ldw	r18,32(sp)
 800b810:	dc400717 	ldw	r17,28(sp)
 800b814:	dc000617 	ldw	r16,24(sp)
 800b818:	dec01004 	addi	sp,sp,64
 800b81c:	f800283a 	ret
 800b820:	8904b03a 	or	r2,r17,r4
 800b824:	10003726 	beq	r2,zero,800b904 <__divdf3+0x2b0>
 800b828:	88014d26 	beq	r17,zero,800bd60 <__divdf3+0x70c>
 800b82c:	8809883a 	mov	r4,r17
 800b830:	d9800215 	stw	r6,8(sp)
 800b834:	d9c00515 	stw	r7,20(sp)
 800b838:	800d5500 	call	800d550 <__clzsi2>
 800b83c:	d9800217 	ldw	r6,8(sp)
 800b840:	d9c00517 	ldw	r7,20(sp)
 800b844:	1007883a 	mov	r3,r2
 800b848:	01000a04 	movi	r4,40
 800b84c:	1cfffe04 	addi	r19,r3,-8
 800b850:	20c9c83a 	sub	r4,r4,r3
 800b854:	8cca983a 	sll	r5,r17,r19
 800b858:	a108d83a 	srl	r4,r20,r4
 800b85c:	a4e6983a 	sll	r19,r20,r19
 800b860:	2162b03a 	or	r17,r4,r5
 800b864:	04bf0344 	movi	r18,-1011
 800b868:	90e5c83a 	sub	r18,r18,r3
 800b86c:	0029883a 	mov	r20,zero
 800b870:	0011883a 	mov	r8,zero
 800b874:	003f9606 	br	800b6d0 <__alt_data_end+0xfc00b6d0>
 800b878:	8184b03a 	or	r2,r16,r6
 800b87c:	10001f1e 	bne	r2,zero,800b8fc <__divdf3+0x2a8>
 800b880:	0021883a 	mov	r16,zero
 800b884:	002b883a 	mov	r21,zero
 800b888:	01c00084 	movi	r7,2
 800b88c:	003fa206 	br	800b718 <__alt_data_end+0xfc00b718>
 800b890:	8184b03a 	or	r2,r16,r6
 800b894:	10001526 	beq	r2,zero,800b8ec <__divdf3+0x298>
 800b898:	80013d26 	beq	r16,zero,800bd90 <__divdf3+0x73c>
 800b89c:	8009883a 	mov	r4,r16
 800b8a0:	d9800215 	stw	r6,8(sp)
 800b8a4:	da000315 	stw	r8,12(sp)
 800b8a8:	da400415 	stw	r9,16(sp)
 800b8ac:	800d5500 	call	800d550 <__clzsi2>
 800b8b0:	d9800217 	ldw	r6,8(sp)
 800b8b4:	da000317 	ldw	r8,12(sp)
 800b8b8:	da400417 	ldw	r9,16(sp)
 800b8bc:	1007883a 	mov	r3,r2
 800b8c0:	01000a04 	movi	r4,40
 800b8c4:	1d7ffe04 	addi	r21,r3,-8
 800b8c8:	20c9c83a 	sub	r4,r4,r3
 800b8cc:	8560983a 	sll	r16,r16,r21
 800b8d0:	3108d83a 	srl	r4,r6,r4
 800b8d4:	356a983a 	sll	r21,r6,r21
 800b8d8:	2420b03a 	or	r16,r4,r16
 800b8dc:	017f0344 	movi	r5,-1011
 800b8e0:	28cbc83a 	sub	r5,r5,r3
 800b8e4:	000f883a 	mov	r7,zero
 800b8e8:	003f8b06 	br	800b718 <__alt_data_end+0xfc00b718>
 800b8ec:	0021883a 	mov	r16,zero
 800b8f0:	002b883a 	mov	r21,zero
 800b8f4:	01c00044 	movi	r7,1
 800b8f8:	003f8706 	br	800b718 <__alt_data_end+0xfc00b718>
 800b8fc:	01c000c4 	movi	r7,3
 800b900:	003f8506 	br	800b718 <__alt_data_end+0xfc00b718>
 800b904:	05000104 	movi	r20,4
 800b908:	0023883a 	mov	r17,zero
 800b90c:	0027883a 	mov	r19,zero
 800b910:	02000044 	movi	r8,1
 800b914:	003f6e06 	br	800b6d0 <__alt_data_end+0xfc00b6d0>
 800b918:	05000304 	movi	r20,12
 800b91c:	020000c4 	movi	r8,3
 800b920:	003f6b06 	br	800b6d0 <__alt_data_end+0xfc00b6d0>
 800b924:	01400434 	movhi	r5,16
 800b928:	000d883a 	mov	r6,zero
 800b92c:	297fffc4 	addi	r5,r5,-1
 800b930:	04ffffc4 	movi	r19,-1
 800b934:	0201ffc4 	movi	r8,2047
 800b938:	003fa406 	br	800b7cc <__alt_data_end+0xfc00b7cc>
 800b93c:	043f0084 	movi	r16,-1022
 800b940:	84a1c83a 	sub	r16,r16,r18
 800b944:	00800e04 	movi	r2,56
 800b948:	14014d0e 	bge	r2,r16,800be80 <__divdf3+0x82c>
 800b94c:	a180004c 	andi	r6,r20,1
 800b950:	0011883a 	mov	r8,zero
 800b954:	000b883a 	mov	r5,zero
 800b958:	0027883a 	mov	r19,zero
 800b95c:	003f9b06 	br	800b7cc <__alt_data_end+0xfc00b7cc>
 800b960:	8880022c 	andhi	r2,r17,8
 800b964:	1000f026 	beq	r2,zero,800bd28 <__divdf3+0x6d4>
 800b968:	8080022c 	andhi	r2,r16,8
 800b96c:	1000ee1e 	bne	r2,zero,800bd28 <__divdf3+0x6d4>
 800b970:	00800434 	movhi	r2,16
 800b974:	81400234 	orhi	r5,r16,8
 800b978:	10bfffc4 	addi	r2,r2,-1
 800b97c:	b80d883a 	mov	r6,r23
 800b980:	288a703a 	and	r5,r5,r2
 800b984:	a827883a 	mov	r19,r21
 800b988:	003fea06 	br	800b934 <__alt_data_end+0xfc00b934>
 800b98c:	84411c36 	bltu	r16,r17,800be00 <__divdf3+0x7ac>
 800b990:	8c011a26 	beq	r17,r16,800bdfc <__divdf3+0x7a8>
 800b994:	94bfffc4 	addi	r18,r18,-1
 800b998:	dcc00015 	stw	r19,0(sp)
 800b99c:	8811883a 	mov	r8,r17
 800b9a0:	002d883a 	mov	r22,zero
 800b9a4:	a80cd63a 	srli	r6,r21,24
 800b9a8:	8020923a 	slli	r16,r16,8
 800b9ac:	a82a923a 	slli	r21,r21,8
 800b9b0:	4009883a 	mov	r4,r8
 800b9b4:	342eb03a 	or	r23,r6,r16
 800b9b8:	dd400115 	stw	r21,4(sp)
 800b9bc:	b82ad43a 	srli	r21,r23,16
 800b9c0:	da000315 	stw	r8,12(sp)
 800b9c4:	bcffffcc 	andi	r19,r23,65535
 800b9c8:	a80b883a 	mov	r5,r21
 800b9cc:	800ad800 	call	800ad80 <__udivsi3>
 800b9d0:	1009883a 	mov	r4,r2
 800b9d4:	980b883a 	mov	r5,r19
 800b9d8:	1023883a 	mov	r17,r2
 800b9dc:	800ad900 	call	800ad90 <__mulsi3>
 800b9e0:	da000317 	ldw	r8,12(sp)
 800b9e4:	a80b883a 	mov	r5,r21
 800b9e8:	1039883a 	mov	fp,r2
 800b9ec:	4009883a 	mov	r4,r8
 800b9f0:	800ad880 	call	800ad88 <__umodsi3>
 800b9f4:	d8c00017 	ldw	r3,0(sp)
 800b9f8:	1004943a 	slli	r2,r2,16
 800b9fc:	1810d43a 	srli	r8,r3,16
 800ba00:	120eb03a 	or	r7,r2,r8
 800ba04:	3f00062e 	bgeu	r7,fp,800ba20 <__divdf3+0x3cc>
 800ba08:	3dcf883a 	add	r7,r7,r23
 800ba0c:	88bfffc4 	addi	r2,r17,-1
 800ba10:	3dc10a36 	bltu	r7,r23,800be3c <__divdf3+0x7e8>
 800ba14:	3f01092e 	bgeu	r7,fp,800be3c <__divdf3+0x7e8>
 800ba18:	8c7fff84 	addi	r17,r17,-2
 800ba1c:	3dcf883a 	add	r7,r7,r23
 800ba20:	3f39c83a 	sub	fp,r7,fp
 800ba24:	e009883a 	mov	r4,fp
 800ba28:	a80b883a 	mov	r5,r21
 800ba2c:	800ad800 	call	800ad80 <__udivsi3>
 800ba30:	1009883a 	mov	r4,r2
 800ba34:	980b883a 	mov	r5,r19
 800ba38:	1021883a 	mov	r16,r2
 800ba3c:	800ad900 	call	800ad90 <__mulsi3>
 800ba40:	e009883a 	mov	r4,fp
 800ba44:	a80b883a 	mov	r5,r21
 800ba48:	d8800315 	stw	r2,12(sp)
 800ba4c:	800ad880 	call	800ad88 <__umodsi3>
 800ba50:	d9000017 	ldw	r4,0(sp)
 800ba54:	1004943a 	slli	r2,r2,16
 800ba58:	da000317 	ldw	r8,12(sp)
 800ba5c:	20ffffcc 	andi	r3,r4,65535
 800ba60:	10ceb03a 	or	r7,r2,r3
 800ba64:	3a00062e 	bgeu	r7,r8,800ba80 <__divdf3+0x42c>
 800ba68:	3dcf883a 	add	r7,r7,r23
 800ba6c:	80bfffc4 	addi	r2,r16,-1
 800ba70:	3dc0f036 	bltu	r7,r23,800be34 <__divdf3+0x7e0>
 800ba74:	3a00ef2e 	bgeu	r7,r8,800be34 <__divdf3+0x7e0>
 800ba78:	843fff84 	addi	r16,r16,-2
 800ba7c:	3dcf883a 	add	r7,r7,r23
 800ba80:	d8c00117 	ldw	r3,4(sp)
 800ba84:	8822943a 	slli	r17,r17,16
 800ba88:	3a0fc83a 	sub	r7,r7,r8
 800ba8c:	1806d43a 	srli	r3,r3,16
 800ba90:	8462b03a 	or	r17,r16,r17
 800ba94:	8affffcc 	andi	r11,r17,65535
 800ba98:	d8c00015 	stw	r3,0(sp)
 800ba9c:	d8c00117 	ldw	r3,4(sp)
 800baa0:	8820d43a 	srli	r16,r17,16
 800baa4:	5809883a 	mov	r4,r11
 800baa8:	1f3fffcc 	andi	fp,r3,65535
 800baac:	e00b883a 	mov	r5,fp
 800bab0:	d9c00515 	stw	r7,20(sp)
 800bab4:	dac00215 	stw	r11,8(sp)
 800bab8:	800ad900 	call	800ad90 <__mulsi3>
 800babc:	8009883a 	mov	r4,r16
 800bac0:	e00b883a 	mov	r5,fp
 800bac4:	d8800415 	stw	r2,16(sp)
 800bac8:	800ad900 	call	800ad90 <__mulsi3>
 800bacc:	d9400017 	ldw	r5,0(sp)
 800bad0:	8009883a 	mov	r4,r16
 800bad4:	d8800315 	stw	r2,12(sp)
 800bad8:	800ad900 	call	800ad90 <__mulsi3>
 800badc:	dac00217 	ldw	r11,8(sp)
 800bae0:	d9400017 	ldw	r5,0(sp)
 800bae4:	d8800215 	stw	r2,8(sp)
 800bae8:	5809883a 	mov	r4,r11
 800baec:	800ad900 	call	800ad90 <__mulsi3>
 800baf0:	da400417 	ldw	r9,16(sp)
 800baf4:	da800317 	ldw	r10,12(sp)
 800baf8:	d9c00517 	ldw	r7,20(sp)
 800bafc:	480ad43a 	srli	r5,r9,16
 800bb00:	5085883a 	add	r2,r10,r2
 800bb04:	db000217 	ldw	r12,8(sp)
 800bb08:	1151883a 	add	r8,r2,r5
 800bb0c:	4280022e 	bgeu	r8,r10,800bb18 <__divdf3+0x4c4>
 800bb10:	00800074 	movhi	r2,1
 800bb14:	6099883a 	add	r12,r12,r2
 800bb18:	400ad43a 	srli	r5,r8,16
 800bb1c:	4010943a 	slli	r8,r8,16
 800bb20:	4c3fffcc 	andi	r16,r9,65535
 800bb24:	6149883a 	add	r4,r12,r5
 800bb28:	4411883a 	add	r8,r8,r16
 800bb2c:	3900a736 	bltu	r7,r4,800bdcc <__divdf3+0x778>
 800bb30:	3900c426 	beq	r7,r4,800be44 <__divdf3+0x7f0>
 800bb34:	3909c83a 	sub	r4,r7,r4
 800bb38:	b221c83a 	sub	r16,r22,r8
 800bb3c:	b42d803a 	cmpltu	r22,r22,r16
 800bb40:	25adc83a 	sub	r22,r4,r22
 800bb44:	b5c0c626 	beq	r22,r23,800be60 <__divdf3+0x80c>
 800bb48:	b009883a 	mov	r4,r22
 800bb4c:	a80b883a 	mov	r5,r21
 800bb50:	800ad800 	call	800ad80 <__udivsi3>
 800bb54:	1009883a 	mov	r4,r2
 800bb58:	980b883a 	mov	r5,r19
 800bb5c:	d8800315 	stw	r2,12(sp)
 800bb60:	800ad900 	call	800ad90 <__mulsi3>
 800bb64:	a80b883a 	mov	r5,r21
 800bb68:	b009883a 	mov	r4,r22
 800bb6c:	d8800415 	stw	r2,16(sp)
 800bb70:	800ad880 	call	800ad88 <__umodsi3>
 800bb74:	1004943a 	slli	r2,r2,16
 800bb78:	800ed43a 	srli	r7,r16,16
 800bb7c:	da400417 	ldw	r9,16(sp)
 800bb80:	da000317 	ldw	r8,12(sp)
 800bb84:	11cab03a 	or	r5,r2,r7
 800bb88:	2a40062e 	bgeu	r5,r9,800bba4 <__divdf3+0x550>
 800bb8c:	2dcb883a 	add	r5,r5,r23
 800bb90:	40bfffc4 	addi	r2,r8,-1
 800bb94:	2dc0b436 	bltu	r5,r23,800be68 <__divdf3+0x814>
 800bb98:	2a40b32e 	bgeu	r5,r9,800be68 <__divdf3+0x814>
 800bb9c:	423fff84 	addi	r8,r8,-2
 800bba0:	2dcb883a 	add	r5,r5,r23
 800bba4:	2a6dc83a 	sub	r22,r5,r9
 800bba8:	b009883a 	mov	r4,r22
 800bbac:	a80b883a 	mov	r5,r21
 800bbb0:	da000315 	stw	r8,12(sp)
 800bbb4:	800ad800 	call	800ad80 <__udivsi3>
 800bbb8:	980b883a 	mov	r5,r19
 800bbbc:	1009883a 	mov	r4,r2
 800bbc0:	d8800415 	stw	r2,16(sp)
 800bbc4:	800ad900 	call	800ad90 <__mulsi3>
 800bbc8:	b009883a 	mov	r4,r22
 800bbcc:	a80b883a 	mov	r5,r21
 800bbd0:	1027883a 	mov	r19,r2
 800bbd4:	800ad880 	call	800ad88 <__umodsi3>
 800bbd8:	1004943a 	slli	r2,r2,16
 800bbdc:	843fffcc 	andi	r16,r16,65535
 800bbe0:	da000317 	ldw	r8,12(sp)
 800bbe4:	140eb03a 	or	r7,r2,r16
 800bbe8:	da400417 	ldw	r9,16(sp)
 800bbec:	3cc0062e 	bgeu	r7,r19,800bc08 <__divdf3+0x5b4>
 800bbf0:	3dcf883a 	add	r7,r7,r23
 800bbf4:	48bfffc4 	addi	r2,r9,-1
 800bbf8:	3dc09d36 	bltu	r7,r23,800be70 <__divdf3+0x81c>
 800bbfc:	3cc09c2e 	bgeu	r7,r19,800be70 <__divdf3+0x81c>
 800bc00:	4a7fff84 	addi	r9,r9,-2
 800bc04:	3dcf883a 	add	r7,r7,r23
 800bc08:	4010943a 	slli	r8,r8,16
 800bc0c:	3cebc83a 	sub	r21,r7,r19
 800bc10:	e00b883a 	mov	r5,fp
 800bc14:	4a26b03a 	or	r19,r9,r8
 800bc18:	99ffffcc 	andi	r7,r19,65535
 800bc1c:	9820d43a 	srli	r16,r19,16
 800bc20:	3809883a 	mov	r4,r7
 800bc24:	d9c00515 	stw	r7,20(sp)
 800bc28:	800ad900 	call	800ad90 <__mulsi3>
 800bc2c:	8009883a 	mov	r4,r16
 800bc30:	e00b883a 	mov	r5,fp
 800bc34:	102d883a 	mov	r22,r2
 800bc38:	800ad900 	call	800ad90 <__mulsi3>
 800bc3c:	d9400017 	ldw	r5,0(sp)
 800bc40:	8009883a 	mov	r4,r16
 800bc44:	1039883a 	mov	fp,r2
 800bc48:	800ad900 	call	800ad90 <__mulsi3>
 800bc4c:	d9c00517 	ldw	r7,20(sp)
 800bc50:	d9400017 	ldw	r5,0(sp)
 800bc54:	1021883a 	mov	r16,r2
 800bc58:	3809883a 	mov	r4,r7
 800bc5c:	800ad900 	call	800ad90 <__mulsi3>
 800bc60:	b008d43a 	srli	r4,r22,16
 800bc64:	e085883a 	add	r2,fp,r2
 800bc68:	1109883a 	add	r4,r2,r4
 800bc6c:	2700022e 	bgeu	r4,fp,800bc78 <__divdf3+0x624>
 800bc70:	00800074 	movhi	r2,1
 800bc74:	80a1883a 	add	r16,r16,r2
 800bc78:	200ad43a 	srli	r5,r4,16
 800bc7c:	2008943a 	slli	r4,r4,16
 800bc80:	b5bfffcc 	andi	r22,r22,65535
 800bc84:	8145883a 	add	r2,r16,r5
 800bc88:	2589883a 	add	r4,r4,r22
 800bc8c:	a8802c36 	bltu	r21,r2,800bd40 <__divdf3+0x6ec>
 800bc90:	a880a426 	beq	r21,r2,800bf24 <__divdf3+0x8d0>
 800bc94:	9cc00054 	ori	r19,r19,1
 800bc98:	9200ffc4 	addi	r8,r18,1023
 800bc9c:	023f270e 	bge	zero,r8,800b93c <__alt_data_end+0xfc00b93c>
 800bca0:	988001cc 	andi	r2,r19,7
 800bca4:	10000726 	beq	r2,zero,800bcc4 <__divdf3+0x670>
 800bca8:	990003cc 	andi	r4,r19,15
 800bcac:	00800104 	movi	r2,4
 800bcb0:	20800426 	beq	r4,r2,800bcc4 <__divdf3+0x670>
 800bcb4:	9885883a 	add	r2,r19,r2
 800bcb8:	14e7803a 	cmpltu	r19,r2,r19
 800bcbc:	8ce3883a 	add	r17,r17,r19
 800bcc0:	1027883a 	mov	r19,r2
 800bcc4:	8880402c 	andhi	r2,r17,256
 800bcc8:	10000426 	beq	r2,zero,800bcdc <__divdf3+0x688>
 800bccc:	00bfc034 	movhi	r2,65280
 800bcd0:	10bfffc4 	addi	r2,r2,-1
 800bcd4:	92010004 	addi	r8,r18,1024
 800bcd8:	88a2703a 	and	r17,r17,r2
 800bcdc:	0081ff84 	movi	r2,2046
 800bce0:	123eb616 	blt	r2,r8,800b7bc <__alt_data_end+0xfc00b7bc>
 800bce4:	9826d0fa 	srli	r19,r19,3
 800bce8:	8804977a 	slli	r2,r17,29
 800bcec:	8820927a 	slli	r16,r17,9
 800bcf0:	4201ffcc 	andi	r8,r8,2047
 800bcf4:	14e6b03a 	or	r19,r2,r19
 800bcf8:	800ad33a 	srli	r5,r16,12
 800bcfc:	a180004c 	andi	r6,r20,1
 800bd00:	003eb206 	br	800b7cc <__alt_data_end+0xfc00b7cc>
 800bd04:	008000c4 	movi	r2,3
 800bd08:	4080ac26 	beq	r8,r2,800bfbc <__divdf3+0x968>
 800bd0c:	00800044 	movi	r2,1
 800bd10:	4080591e 	bne	r8,r2,800be78 <__divdf3+0x824>
 800bd14:	e00d883a 	mov	r6,fp
 800bd18:	0011883a 	mov	r8,zero
 800bd1c:	000b883a 	mov	r5,zero
 800bd20:	0027883a 	mov	r19,zero
 800bd24:	003ea906 	br	800b7cc <__alt_data_end+0xfc00b7cc>
 800bd28:	00800434 	movhi	r2,16
 800bd2c:	89400234 	orhi	r5,r17,8
 800bd30:	10bfffc4 	addi	r2,r2,-1
 800bd34:	b00d883a 	mov	r6,r22
 800bd38:	288a703a 	and	r5,r5,r2
 800bd3c:	003efd06 	br	800b934 <__alt_data_end+0xfc00b934>
 800bd40:	adcf883a 	add	r7,r21,r23
 800bd44:	997fffc4 	addi	r5,r19,-1
 800bd48:	3dc0412e 	bgeu	r7,r23,800be50 <__divdf3+0x7fc>
 800bd4c:	2827883a 	mov	r19,r5
 800bd50:	38bfd01e 	bne	r7,r2,800bc94 <__alt_data_end+0xfc00bc94>
 800bd54:	d8c00117 	ldw	r3,4(sp)
 800bd58:	193fce1e 	bne	r3,r4,800bc94 <__alt_data_end+0xfc00bc94>
 800bd5c:	003fce06 	br	800bc98 <__alt_data_end+0xfc00bc98>
 800bd60:	d9800215 	stw	r6,8(sp)
 800bd64:	d9c00515 	stw	r7,20(sp)
 800bd68:	800d5500 	call	800d550 <__clzsi2>
 800bd6c:	10c00804 	addi	r3,r2,32
 800bd70:	010009c4 	movi	r4,39
 800bd74:	d9800217 	ldw	r6,8(sp)
 800bd78:	d9c00517 	ldw	r7,20(sp)
 800bd7c:	20feb20e 	bge	r4,r3,800b848 <__alt_data_end+0xfc00b848>
 800bd80:	117ffe04 	addi	r5,r2,-8
 800bd84:	a162983a 	sll	r17,r20,r5
 800bd88:	0027883a 	mov	r19,zero
 800bd8c:	003eb506 	br	800b864 <__alt_data_end+0xfc00b864>
 800bd90:	3009883a 	mov	r4,r6
 800bd94:	d9800215 	stw	r6,8(sp)
 800bd98:	da000315 	stw	r8,12(sp)
 800bd9c:	da400415 	stw	r9,16(sp)
 800bda0:	800d5500 	call	800d550 <__clzsi2>
 800bda4:	10c00804 	addi	r3,r2,32
 800bda8:	010009c4 	movi	r4,39
 800bdac:	d9800217 	ldw	r6,8(sp)
 800bdb0:	da000317 	ldw	r8,12(sp)
 800bdb4:	da400417 	ldw	r9,16(sp)
 800bdb8:	20fec10e 	bge	r4,r3,800b8c0 <__alt_data_end+0xfc00b8c0>
 800bdbc:	10bffe04 	addi	r2,r2,-8
 800bdc0:	a8a0983a 	sll	r16,r21,r2
 800bdc4:	002b883a 	mov	r21,zero
 800bdc8:	003ec406 	br	800b8dc <__alt_data_end+0xfc00b8dc>
 800bdcc:	d8c00117 	ldw	r3,4(sp)
 800bdd0:	b0ed883a 	add	r22,r22,r3
 800bdd4:	b0c5803a 	cmpltu	r2,r22,r3
 800bdd8:	15c5883a 	add	r2,r2,r23
 800bddc:	11cf883a 	add	r7,r2,r7
 800bde0:	88bfffc4 	addi	r2,r17,-1
 800bde4:	b9c00d2e 	bgeu	r23,r7,800be1c <__divdf3+0x7c8>
 800bde8:	39003f36 	bltu	r7,r4,800bee8 <__divdf3+0x894>
 800bdec:	21c06a26 	beq	r4,r7,800bf98 <__divdf3+0x944>
 800bdf0:	3909c83a 	sub	r4,r7,r4
 800bdf4:	1023883a 	mov	r17,r2
 800bdf8:	003f4f06 	br	800bb38 <__alt_data_end+0xfc00bb38>
 800bdfc:	9d7ee536 	bltu	r19,r21,800b994 <__alt_data_end+0xfc00b994>
 800be00:	982ed07a 	srli	r23,r19,1
 800be04:	880497fa 	slli	r2,r17,31
 800be08:	8810d07a 	srli	r8,r17,1
 800be0c:	982c97fa 	slli	r22,r19,31
 800be10:	b884b03a 	or	r2,r23,r2
 800be14:	d8800015 	stw	r2,0(sp)
 800be18:	003ee206 	br	800b9a4 <__alt_data_end+0xfc00b9a4>
 800be1c:	3dfff41e 	bne	r7,r23,800bdf0 <__alt_data_end+0xfc00bdf0>
 800be20:	d8c00117 	ldw	r3,4(sp)
 800be24:	b0fff02e 	bgeu	r22,r3,800bde8 <__alt_data_end+0xfc00bde8>
 800be28:	b909c83a 	sub	r4,r23,r4
 800be2c:	1023883a 	mov	r17,r2
 800be30:	003f4106 	br	800bb38 <__alt_data_end+0xfc00bb38>
 800be34:	1021883a 	mov	r16,r2
 800be38:	003f1106 	br	800ba80 <__alt_data_end+0xfc00ba80>
 800be3c:	1023883a 	mov	r17,r2
 800be40:	003ef706 	br	800ba20 <__alt_data_end+0xfc00ba20>
 800be44:	b23fe136 	bltu	r22,r8,800bdcc <__alt_data_end+0xfc00bdcc>
 800be48:	0009883a 	mov	r4,zero
 800be4c:	003f3a06 	br	800bb38 <__alt_data_end+0xfc00bb38>
 800be50:	38802c36 	bltu	r7,r2,800bf04 <__divdf3+0x8b0>
 800be54:	11c05326 	beq	r2,r7,800bfa4 <__divdf3+0x950>
 800be58:	2827883a 	mov	r19,r5
 800be5c:	003f8d06 	br	800bc94 <__alt_data_end+0xfc00bc94>
 800be60:	04ffffc4 	movi	r19,-1
 800be64:	003f8c06 	br	800bc98 <__alt_data_end+0xfc00bc98>
 800be68:	1011883a 	mov	r8,r2
 800be6c:	003f4d06 	br	800bba4 <__alt_data_end+0xfc00bba4>
 800be70:	1013883a 	mov	r9,r2
 800be74:	003f6406 	br	800bc08 <__alt_data_end+0xfc00bc08>
 800be78:	e029883a 	mov	r20,fp
 800be7c:	003f8606 	br	800bc98 <__alt_data_end+0xfc00bc98>
 800be80:	008007c4 	movi	r2,31
 800be84:	14002a16 	blt	r2,r16,800bf30 <__divdf3+0x8dc>
 800be88:	91410784 	addi	r5,r18,1054
 800be8c:	9c0cd83a 	srl	r6,r19,r16
 800be90:	8948983a 	sll	r4,r17,r5
 800be94:	9944983a 	sll	r2,r19,r5
 800be98:	8c20d83a 	srl	r16,r17,r16
 800be9c:	3108b03a 	or	r4,r6,r4
 800bea0:	1004c03a 	cmpne	r2,r2,zero
 800bea4:	2084b03a 	or	r2,r4,r2
 800bea8:	110001cc 	andi	r4,r2,7
 800beac:	20000726 	beq	r4,zero,800becc <__divdf3+0x878>
 800beb0:	114003cc 	andi	r5,r2,15
 800beb4:	01000104 	movi	r4,4
 800beb8:	29000426 	beq	r5,r4,800becc <__divdf3+0x878>
 800bebc:	11000104 	addi	r4,r2,4
 800bec0:	2085803a 	cmpltu	r2,r4,r2
 800bec4:	80a1883a 	add	r16,r16,r2
 800bec8:	2005883a 	mov	r2,r4
 800becc:	8100202c 	andhi	r4,r16,128
 800bed0:	20002d26 	beq	r4,zero,800bf88 <__divdf3+0x934>
 800bed4:	a180004c 	andi	r6,r20,1
 800bed8:	02000044 	movi	r8,1
 800bedc:	000b883a 	mov	r5,zero
 800bee0:	0027883a 	mov	r19,zero
 800bee4:	003e3906 	br	800b7cc <__alt_data_end+0xfc00b7cc>
 800bee8:	d8c00117 	ldw	r3,4(sp)
 800beec:	8c7fff84 	addi	r17,r17,-2
 800bef0:	b0ed883a 	add	r22,r22,r3
 800bef4:	b0c5803a 	cmpltu	r2,r22,r3
 800bef8:	15c5883a 	add	r2,r2,r23
 800befc:	11cf883a 	add	r7,r2,r7
 800bf00:	003f0c06 	br	800bb34 <__alt_data_end+0xfc00bb34>
 800bf04:	d8c00117 	ldw	r3,4(sp)
 800bf08:	997fff84 	addi	r5,r19,-2
 800bf0c:	18d1883a 	add	r8,r3,r3
 800bf10:	40c7803a 	cmpltu	r3,r8,r3
 800bf14:	1dcd883a 	add	r6,r3,r23
 800bf18:	398f883a 	add	r7,r7,r6
 800bf1c:	da000115 	stw	r8,4(sp)
 800bf20:	003f8a06 	br	800bd4c <__alt_data_end+0xfc00bd4c>
 800bf24:	203f861e 	bne	r4,zero,800bd40 <__alt_data_end+0xfc00bd40>
 800bf28:	d8000115 	stw	zero,4(sp)
 800bf2c:	003f8906 	br	800bd54 <__alt_data_end+0xfc00bd54>
 800bf30:	00bef884 	movi	r2,-1054
 800bf34:	1485c83a 	sub	r2,r2,r18
 800bf38:	01000804 	movi	r4,32
 800bf3c:	8884d83a 	srl	r2,r17,r2
 800bf40:	81001c26 	beq	r16,r4,800bfb4 <__divdf3+0x960>
 800bf44:	91010f84 	addi	r4,r18,1086
 800bf48:	8908983a 	sll	r4,r17,r4
 800bf4c:	24c8b03a 	or	r4,r4,r19
 800bf50:	2008c03a 	cmpne	r4,r4,zero
 800bf54:	2084b03a 	or	r2,r4,r2
 800bf58:	140001cc 	andi	r16,r2,7
 800bf5c:	8000061e 	bne	r16,zero,800bf78 <__divdf3+0x924>
 800bf60:	000b883a 	mov	r5,zero
 800bf64:	1004d0fa 	srli	r2,r2,3
 800bf68:	a180004c 	andi	r6,r20,1
 800bf6c:	0011883a 	mov	r8,zero
 800bf70:	1426b03a 	or	r19,r2,r16
 800bf74:	003e1506 	br	800b7cc <__alt_data_end+0xfc00b7cc>
 800bf78:	114003cc 	andi	r5,r2,15
 800bf7c:	01000104 	movi	r4,4
 800bf80:	0021883a 	mov	r16,zero
 800bf84:	293fcd1e 	bne	r5,r4,800bebc <__alt_data_end+0xfc00bebc>
 800bf88:	800a927a 	slli	r5,r16,9
 800bf8c:	8020977a 	slli	r16,r16,29
 800bf90:	280ad33a 	srli	r5,r5,12
 800bf94:	003ff306 	br	800bf64 <__alt_data_end+0xfc00bf64>
 800bf98:	b23fd336 	bltu	r22,r8,800bee8 <__alt_data_end+0xfc00bee8>
 800bf9c:	1023883a 	mov	r17,r2
 800bfa0:	003fa906 	br	800be48 <__alt_data_end+0xfc00be48>
 800bfa4:	d8c00117 	ldw	r3,4(sp)
 800bfa8:	193fd636 	bltu	r3,r4,800bf04 <__alt_data_end+0xfc00bf04>
 800bfac:	2827883a 	mov	r19,r5
 800bfb0:	003f6806 	br	800bd54 <__alt_data_end+0xfc00bd54>
 800bfb4:	0009883a 	mov	r4,zero
 800bfb8:	003fe406 	br	800bf4c <__alt_data_end+0xfc00bf4c>
 800bfbc:	00800434 	movhi	r2,16
 800bfc0:	89400234 	orhi	r5,r17,8
 800bfc4:	10bfffc4 	addi	r2,r2,-1
 800bfc8:	e00d883a 	mov	r6,fp
 800bfcc:	288a703a 	and	r5,r5,r2
 800bfd0:	003e5806 	br	800b934 <__alt_data_end+0xfc00b934>

0800bfd4 <__eqdf2>:
 800bfd4:	2804d53a 	srli	r2,r5,20
 800bfd8:	3806d53a 	srli	r3,r7,20
 800bfdc:	02000434 	movhi	r8,16
 800bfe0:	423fffc4 	addi	r8,r8,-1
 800bfe4:	1081ffcc 	andi	r2,r2,2047
 800bfe8:	0241ffc4 	movi	r9,2047
 800bfec:	2a14703a 	and	r10,r5,r8
 800bff0:	18c1ffcc 	andi	r3,r3,2047
 800bff4:	3a10703a 	and	r8,r7,r8
 800bff8:	280ad7fa 	srli	r5,r5,31
 800bffc:	380ed7fa 	srli	r7,r7,31
 800c000:	12400f26 	beq	r2,r9,800c040 <__eqdf2+0x6c>
 800c004:	0241ffc4 	movi	r9,2047
 800c008:	1a400326 	beq	r3,r9,800c018 <__eqdf2+0x44>
 800c00c:	10c00526 	beq	r2,r3,800c024 <__eqdf2+0x50>
 800c010:	00800044 	movi	r2,1
 800c014:	f800283a 	ret
 800c018:	4192b03a 	or	r9,r8,r6
 800c01c:	483ffc1e 	bne	r9,zero,800c010 <__alt_data_end+0xfc00c010>
 800c020:	10fffb1e 	bne	r2,r3,800c010 <__alt_data_end+0xfc00c010>
 800c024:	523ffa1e 	bne	r10,r8,800c010 <__alt_data_end+0xfc00c010>
 800c028:	21bff91e 	bne	r4,r6,800c010 <__alt_data_end+0xfc00c010>
 800c02c:	29c00826 	beq	r5,r7,800c050 <__eqdf2+0x7c>
 800c030:	103ff71e 	bne	r2,zero,800c010 <__alt_data_end+0xfc00c010>
 800c034:	5104b03a 	or	r2,r10,r4
 800c038:	1004c03a 	cmpne	r2,r2,zero
 800c03c:	f800283a 	ret
 800c040:	5112b03a 	or	r9,r10,r4
 800c044:	483fef26 	beq	r9,zero,800c004 <__alt_data_end+0xfc00c004>
 800c048:	00800044 	movi	r2,1
 800c04c:	f800283a 	ret
 800c050:	0005883a 	mov	r2,zero
 800c054:	f800283a 	ret

0800c058 <__gedf2>:
 800c058:	2804d53a 	srli	r2,r5,20
 800c05c:	3806d53a 	srli	r3,r7,20
 800c060:	02000434 	movhi	r8,16
 800c064:	423fffc4 	addi	r8,r8,-1
 800c068:	0241ffc4 	movi	r9,2047
 800c06c:	1081ffcc 	andi	r2,r2,2047
 800c070:	2a14703a 	and	r10,r5,r8
 800c074:	1a46703a 	and	r3,r3,r9
 800c078:	3a10703a 	and	r8,r7,r8
 800c07c:	280ad7fa 	srli	r5,r5,31
 800c080:	380ed7fa 	srli	r7,r7,31
 800c084:	12400b26 	beq	r2,r9,800c0b4 <__gedf2+0x5c>
 800c088:	1a401626 	beq	r3,r9,800c0e4 <__gedf2+0x8c>
 800c08c:	10000c1e 	bne	r2,zero,800c0c0 <__gedf2+0x68>
 800c090:	5112b03a 	or	r9,r10,r4
 800c094:	4813003a 	cmpeq	r9,r9,zero
 800c098:	4817883a 	mov	r11,r9
 800c09c:	18000c1e 	bne	r3,zero,800c0d0 <__gedf2+0x78>
 800c0a0:	4198b03a 	or	r12,r8,r6
 800c0a4:	60000a1e 	bne	r12,zero,800c0d0 <__gedf2+0x78>
 800c0a8:	48001326 	beq	r9,zero,800c0f8 <__gedf2+0xa0>
 800c0ac:	0005883a 	mov	r2,zero
 800c0b0:	f800283a 	ret
 800c0b4:	5112b03a 	or	r9,r10,r4
 800c0b8:	4800191e 	bne	r9,zero,800c120 <__gedf2+0xc8>
 800c0bc:	18800926 	beq	r3,r2,800c0e4 <__gedf2+0x8c>
 800c0c0:	18000b1e 	bne	r3,zero,800c0f0 <__gedf2+0x98>
 800c0c4:	4192b03a 	or	r9,r8,r6
 800c0c8:	0017883a 	mov	r11,zero
 800c0cc:	48000a26 	beq	r9,zero,800c0f8 <__gedf2+0xa0>
 800c0d0:	39c03fcc 	andi	r7,r7,255
 800c0d4:	58000726 	beq	r11,zero,800c0f4 <__gedf2+0x9c>
 800c0d8:	3800081e 	bne	r7,zero,800c0fc <__gedf2+0xa4>
 800c0dc:	00bfffc4 	movi	r2,-1
 800c0e0:	f800283a 	ret
 800c0e4:	4192b03a 	or	r9,r8,r6
 800c0e8:	48000d1e 	bne	r9,zero,800c120 <__gedf2+0xc8>
 800c0ec:	103fe826 	beq	r2,zero,800c090 <__alt_data_end+0xfc00c090>
 800c0f0:	39c03fcc 	andi	r7,r7,255
 800c0f4:	29c00326 	beq	r5,r7,800c104 <__gedf2+0xac>
 800c0f8:	283ff81e 	bne	r5,zero,800c0dc <__alt_data_end+0xfc00c0dc>
 800c0fc:	00800044 	movi	r2,1
 800c100:	f800283a 	ret
 800c104:	18bffc16 	blt	r3,r2,800c0f8 <__alt_data_end+0xfc00c0f8>
 800c108:	10c00316 	blt	r2,r3,800c118 <__gedf2+0xc0>
 800c10c:	42bffa36 	bltu	r8,r10,800c0f8 <__alt_data_end+0xfc00c0f8>
 800c110:	52000526 	beq	r10,r8,800c128 <__gedf2+0xd0>
 800c114:	523fe52e 	bgeu	r10,r8,800c0ac <__alt_data_end+0xfc00c0ac>
 800c118:	283ff026 	beq	r5,zero,800c0dc <__alt_data_end+0xfc00c0dc>
 800c11c:	003ff706 	br	800c0fc <__alt_data_end+0xfc00c0fc>
 800c120:	00bfff84 	movi	r2,-2
 800c124:	f800283a 	ret
 800c128:	313ff336 	bltu	r6,r4,800c0f8 <__alt_data_end+0xfc00c0f8>
 800c12c:	21bfdf2e 	bgeu	r4,r6,800c0ac <__alt_data_end+0xfc00c0ac>
 800c130:	283fea26 	beq	r5,zero,800c0dc <__alt_data_end+0xfc00c0dc>
 800c134:	003ff106 	br	800c0fc <__alt_data_end+0xfc00c0fc>

0800c138 <__ledf2>:
 800c138:	2804d53a 	srli	r2,r5,20
 800c13c:	3810d53a 	srli	r8,r7,20
 800c140:	00c00434 	movhi	r3,16
 800c144:	18ffffc4 	addi	r3,r3,-1
 800c148:	0241ffc4 	movi	r9,2047
 800c14c:	1081ffcc 	andi	r2,r2,2047
 800c150:	28d4703a 	and	r10,r5,r3
 800c154:	4250703a 	and	r8,r8,r9
 800c158:	38c6703a 	and	r3,r7,r3
 800c15c:	280ad7fa 	srli	r5,r5,31
 800c160:	380ed7fa 	srli	r7,r7,31
 800c164:	12400b26 	beq	r2,r9,800c194 <__ledf2+0x5c>
 800c168:	42401926 	beq	r8,r9,800c1d0 <__ledf2+0x98>
 800c16c:	10000c1e 	bne	r2,zero,800c1a0 <__ledf2+0x68>
 800c170:	5112b03a 	or	r9,r10,r4
 800c174:	4813003a 	cmpeq	r9,r9,zero
 800c178:	4817883a 	mov	r11,r9
 800c17c:	40000f26 	beq	r8,zero,800c1bc <__ledf2+0x84>
 800c180:	39c03fcc 	andi	r7,r7,255
 800c184:	58001826 	beq	r11,zero,800c1e8 <__ledf2+0xb0>
 800c188:	38000a1e 	bne	r7,zero,800c1b4 <__ledf2+0x7c>
 800c18c:	00bfffc4 	movi	r2,-1
 800c190:	f800283a 	ret
 800c194:	5112b03a 	or	r9,r10,r4
 800c198:	48000f1e 	bne	r9,zero,800c1d8 <__ledf2+0xa0>
 800c19c:	40800c26 	beq	r8,r2,800c1d0 <__ledf2+0x98>
 800c1a0:	4000101e 	bne	r8,zero,800c1e4 <__ledf2+0xac>
 800c1a4:	1992b03a 	or	r9,r3,r6
 800c1a8:	0017883a 	mov	r11,zero
 800c1ac:	483ff41e 	bne	r9,zero,800c180 <__alt_data_end+0xfc00c180>
 800c1b0:	283ff61e 	bne	r5,zero,800c18c <__alt_data_end+0xfc00c18c>
 800c1b4:	00800044 	movi	r2,1
 800c1b8:	f800283a 	ret
 800c1bc:	1998b03a 	or	r12,r3,r6
 800c1c0:	603fef1e 	bne	r12,zero,800c180 <__alt_data_end+0xfc00c180>
 800c1c4:	483ffa26 	beq	r9,zero,800c1b0 <__alt_data_end+0xfc00c1b0>
 800c1c8:	0005883a 	mov	r2,zero
 800c1cc:	f800283a 	ret
 800c1d0:	1992b03a 	or	r9,r3,r6
 800c1d4:	48000226 	beq	r9,zero,800c1e0 <__ledf2+0xa8>
 800c1d8:	00800084 	movi	r2,2
 800c1dc:	f800283a 	ret
 800c1e0:	103fe326 	beq	r2,zero,800c170 <__alt_data_end+0xfc00c170>
 800c1e4:	39c03fcc 	andi	r7,r7,255
 800c1e8:	29fff11e 	bne	r5,r7,800c1b0 <__alt_data_end+0xfc00c1b0>
 800c1ec:	40bff016 	blt	r8,r2,800c1b0 <__alt_data_end+0xfc00c1b0>
 800c1f0:	12000316 	blt	r2,r8,800c200 <__ledf2+0xc8>
 800c1f4:	1abfee36 	bltu	r3,r10,800c1b0 <__alt_data_end+0xfc00c1b0>
 800c1f8:	50c00326 	beq	r10,r3,800c208 <__ledf2+0xd0>
 800c1fc:	50fff22e 	bgeu	r10,r3,800c1c8 <__alt_data_end+0xfc00c1c8>
 800c200:	283fe226 	beq	r5,zero,800c18c <__alt_data_end+0xfc00c18c>
 800c204:	003feb06 	br	800c1b4 <__alt_data_end+0xfc00c1b4>
 800c208:	313fe936 	bltu	r6,r4,800c1b0 <__alt_data_end+0xfc00c1b0>
 800c20c:	21bfee2e 	bgeu	r4,r6,800c1c8 <__alt_data_end+0xfc00c1c8>
 800c210:	283fde26 	beq	r5,zero,800c18c <__alt_data_end+0xfc00c18c>
 800c214:	003fe706 	br	800c1b4 <__alt_data_end+0xfc00c1b4>

0800c218 <__muldf3>:
 800c218:	deffee04 	addi	sp,sp,-72
 800c21c:	dd000c15 	stw	r20,48(sp)
 800c220:	2828d53a 	srli	r20,r5,20
 800c224:	dd400d15 	stw	r21,52(sp)
 800c228:	282ad7fa 	srli	r21,r5,31
 800c22c:	dc000815 	stw	r16,32(sp)
 800c230:	04000434 	movhi	r16,16
 800c234:	ddc00f15 	stw	r23,60(sp)
 800c238:	dcc00b15 	stw	r19,44(sp)
 800c23c:	dc800a15 	stw	r18,40(sp)
 800c240:	843fffc4 	addi	r16,r16,-1
 800c244:	dfc01115 	stw	ra,68(sp)
 800c248:	df001015 	stw	fp,64(sp)
 800c24c:	dd800e15 	stw	r22,56(sp)
 800c250:	dc400915 	stw	r17,36(sp)
 800c254:	a501ffcc 	andi	r20,r20,2047
 800c258:	2025883a 	mov	r18,r4
 800c25c:	202f883a 	mov	r23,r4
 800c260:	2c20703a 	and	r16,r5,r16
 800c264:	a827883a 	mov	r19,r21
 800c268:	aa403fcc 	andi	r9,r21,255
 800c26c:	a0005926 	beq	r20,zero,800c3d4 <__muldf3+0x1bc>
 800c270:	0081ffc4 	movi	r2,2047
 800c274:	a0803426 	beq	r20,r2,800c348 <__muldf3+0x130>
 800c278:	84000434 	orhi	r16,r16,16
 800c27c:	2004d77a 	srli	r2,r4,29
 800c280:	802090fa 	slli	r16,r16,3
 800c284:	202e90fa 	slli	r23,r4,3
 800c288:	a53f0044 	addi	r20,r20,-1023
 800c28c:	80a0b03a 	or	r16,r16,r2
 800c290:	000b883a 	mov	r5,zero
 800c294:	0039883a 	mov	fp,zero
 800c298:	3806d53a 	srli	r3,r7,20
 800c29c:	382cd7fa 	srli	r22,r7,31
 800c2a0:	00800434 	movhi	r2,16
 800c2a4:	10bfffc4 	addi	r2,r2,-1
 800c2a8:	18c1ffcc 	andi	r3,r3,2047
 800c2ac:	3025883a 	mov	r18,r6
 800c2b0:	38a2703a 	and	r17,r7,r2
 800c2b4:	b2803fcc 	andi	r10,r22,255
 800c2b8:	18006426 	beq	r3,zero,800c44c <__muldf3+0x234>
 800c2bc:	0081ffc4 	movi	r2,2047
 800c2c0:	18805c26 	beq	r3,r2,800c434 <__muldf3+0x21c>
 800c2c4:	8c400434 	orhi	r17,r17,16
 800c2c8:	3004d77a 	srli	r2,r6,29
 800c2cc:	882290fa 	slli	r17,r17,3
 800c2d0:	302490fa 	slli	r18,r6,3
 800c2d4:	18ff0044 	addi	r3,r3,-1023
 800c2d8:	88a2b03a 	or	r17,r17,r2
 800c2dc:	000f883a 	mov	r7,zero
 800c2e0:	394ab03a 	or	r5,r7,r5
 800c2e4:	280a90ba 	slli	r5,r5,2
 800c2e8:	00820074 	movhi	r2,2049
 800c2ec:	10b0c204 	addi	r2,r2,-15608
 800c2f0:	288b883a 	add	r5,r5,r2
 800c2f4:	28800017 	ldw	r2,0(r5)
 800c2f8:	a0c7883a 	add	r3,r20,r3
 800c2fc:	b54cf03a 	xor	r6,r22,r21
 800c300:	1a000044 	addi	r8,r3,1
 800c304:	1000683a 	jmp	r2
 800c308:	0800c54c 	andi	zero,at,789
 800c30c:	0800c538 	rdprs	zero,at,788
 800c310:	0800c538 	rdprs	zero,at,788
 800c314:	0800c524 	muli	zero,at,788
 800c318:	0800c364 	muli	zero,at,781
 800c31c:	0800c364 	muli	zero,at,781
 800c320:	0800c50c 	andi	zero,at,788
 800c324:	0800c524 	muli	zero,at,788
 800c328:	0800c364 	muli	zero,at,781
 800c32c:	0800c50c 	andi	zero,at,788
 800c330:	0800c364 	muli	zero,at,781
 800c334:	0800c524 	muli	zero,at,788
 800c338:	0800c368 	cmpgeui	zero,at,781
 800c33c:	0800c368 	cmpgeui	zero,at,781
 800c340:	0800c368 	cmpgeui	zero,at,781
 800c344:	0800c888 	cmpgei	zero,at,802
 800c348:	8104b03a 	or	r2,r16,r4
 800c34c:	10006c1e 	bne	r2,zero,800c500 <__muldf3+0x2e8>
 800c350:	01400204 	movi	r5,8
 800c354:	0021883a 	mov	r16,zero
 800c358:	002f883a 	mov	r23,zero
 800c35c:	07000084 	movi	fp,2
 800c360:	003fcd06 	br	800c298 <__alt_data_end+0xfc00c298>
 800c364:	3013883a 	mov	r9,r6
 800c368:	00800084 	movi	r2,2
 800c36c:	e080501e 	bne	fp,r2,800c4b0 <__muldf3+0x298>
 800c370:	4cc0004c 	andi	r19,r9,1
 800c374:	0101ffc4 	movi	r4,2047
 800c378:	0021883a 	mov	r16,zero
 800c37c:	002f883a 	mov	r23,zero
 800c380:	2008953a 	slli	r4,r4,20
 800c384:	98c03fcc 	andi	r3,r19,255
 800c388:	04400434 	movhi	r17,16
 800c38c:	8c7fffc4 	addi	r17,r17,-1
 800c390:	180697fa 	slli	r3,r3,31
 800c394:	8460703a 	and	r16,r16,r17
 800c398:	8120b03a 	or	r16,r16,r4
 800c39c:	80c6b03a 	or	r3,r16,r3
 800c3a0:	b805883a 	mov	r2,r23
 800c3a4:	dfc01117 	ldw	ra,68(sp)
 800c3a8:	df001017 	ldw	fp,64(sp)
 800c3ac:	ddc00f17 	ldw	r23,60(sp)
 800c3b0:	dd800e17 	ldw	r22,56(sp)
 800c3b4:	dd400d17 	ldw	r21,52(sp)
 800c3b8:	dd000c17 	ldw	r20,48(sp)
 800c3bc:	dcc00b17 	ldw	r19,44(sp)
 800c3c0:	dc800a17 	ldw	r18,40(sp)
 800c3c4:	dc400917 	ldw	r17,36(sp)
 800c3c8:	dc000817 	ldw	r16,32(sp)
 800c3cc:	dec01204 	addi	sp,sp,72
 800c3d0:	f800283a 	ret
 800c3d4:	8104b03a 	or	r2,r16,r4
 800c3d8:	10004426 	beq	r2,zero,800c4ec <__muldf3+0x2d4>
 800c3dc:	80014b26 	beq	r16,zero,800c90c <__muldf3+0x6f4>
 800c3e0:	8009883a 	mov	r4,r16
 800c3e4:	d9800715 	stw	r6,28(sp)
 800c3e8:	d9c00215 	stw	r7,8(sp)
 800c3ec:	da400415 	stw	r9,16(sp)
 800c3f0:	800d5500 	call	800d550 <__clzsi2>
 800c3f4:	d9800717 	ldw	r6,28(sp)
 800c3f8:	d9c00217 	ldw	r7,8(sp)
 800c3fc:	da400417 	ldw	r9,16(sp)
 800c400:	1007883a 	mov	r3,r2
 800c404:	01000a04 	movi	r4,40
 800c408:	1dfffe04 	addi	r23,r3,-8
 800c40c:	20c9c83a 	sub	r4,r4,r3
 800c410:	85e0983a 	sll	r16,r16,r23
 800c414:	9108d83a 	srl	r4,r18,r4
 800c418:	95ee983a 	sll	r23,r18,r23
 800c41c:	2420b03a 	or	r16,r4,r16
 800c420:	053f0344 	movi	r20,-1011
 800c424:	a0e9c83a 	sub	r20,r20,r3
 800c428:	000b883a 	mov	r5,zero
 800c42c:	0039883a 	mov	fp,zero
 800c430:	003f9906 	br	800c298 <__alt_data_end+0xfc00c298>
 800c434:	8984b03a 	or	r2,r17,r6
 800c438:	10002a1e 	bne	r2,zero,800c4e4 <__muldf3+0x2cc>
 800c43c:	0023883a 	mov	r17,zero
 800c440:	0025883a 	mov	r18,zero
 800c444:	01c00084 	movi	r7,2
 800c448:	003fa506 	br	800c2e0 <__alt_data_end+0xfc00c2e0>
 800c44c:	8984b03a 	or	r2,r17,r6
 800c450:	10002026 	beq	r2,zero,800c4d4 <__muldf3+0x2bc>
 800c454:	88011c26 	beq	r17,zero,800c8c8 <__muldf3+0x6b0>
 800c458:	8809883a 	mov	r4,r17
 800c45c:	d9400215 	stw	r5,8(sp)
 800c460:	d9800715 	stw	r6,28(sp)
 800c464:	da400415 	stw	r9,16(sp)
 800c468:	da800315 	stw	r10,12(sp)
 800c46c:	800d5500 	call	800d550 <__clzsi2>
 800c470:	d9400217 	ldw	r5,8(sp)
 800c474:	d9800717 	ldw	r6,28(sp)
 800c478:	da400417 	ldw	r9,16(sp)
 800c47c:	da800317 	ldw	r10,12(sp)
 800c480:	1007883a 	mov	r3,r2
 800c484:	01000a04 	movi	r4,40
 800c488:	1cbffe04 	addi	r18,r3,-8
 800c48c:	20c9c83a 	sub	r4,r4,r3
 800c490:	8ca2983a 	sll	r17,r17,r18
 800c494:	3108d83a 	srl	r4,r6,r4
 800c498:	34a4983a 	sll	r18,r6,r18
 800c49c:	2462b03a 	or	r17,r4,r17
 800c4a0:	00bf0344 	movi	r2,-1011
 800c4a4:	10c7c83a 	sub	r3,r2,r3
 800c4a8:	000f883a 	mov	r7,zero
 800c4ac:	003f8c06 	br	800c2e0 <__alt_data_end+0xfc00c2e0>
 800c4b0:	008000c4 	movi	r2,3
 800c4b4:	e0816d26 	beq	fp,r2,800ca6c <__muldf3+0x854>
 800c4b8:	00800044 	movi	r2,1
 800c4bc:	e081321e 	bne	fp,r2,800c988 <__muldf3+0x770>
 800c4c0:	48a6703a 	and	r19,r9,r2
 800c4c4:	0009883a 	mov	r4,zero
 800c4c8:	0021883a 	mov	r16,zero
 800c4cc:	002f883a 	mov	r23,zero
 800c4d0:	003fab06 	br	800c380 <__alt_data_end+0xfc00c380>
 800c4d4:	0023883a 	mov	r17,zero
 800c4d8:	0025883a 	mov	r18,zero
 800c4dc:	01c00044 	movi	r7,1
 800c4e0:	003f7f06 	br	800c2e0 <__alt_data_end+0xfc00c2e0>
 800c4e4:	01c000c4 	movi	r7,3
 800c4e8:	003f7d06 	br	800c2e0 <__alt_data_end+0xfc00c2e0>
 800c4ec:	01400104 	movi	r5,4
 800c4f0:	0021883a 	mov	r16,zero
 800c4f4:	002f883a 	mov	r23,zero
 800c4f8:	07000044 	movi	fp,1
 800c4fc:	003f6606 	br	800c298 <__alt_data_end+0xfc00c298>
 800c500:	01400304 	movi	r5,12
 800c504:	070000c4 	movi	fp,3
 800c508:	003f6306 	br	800c298 <__alt_data_end+0xfc00c298>
 800c50c:	04000434 	movhi	r16,16
 800c510:	0027883a 	mov	r19,zero
 800c514:	843fffc4 	addi	r16,r16,-1
 800c518:	05ffffc4 	movi	r23,-1
 800c51c:	0101ffc4 	movi	r4,2047
 800c520:	003f9706 	br	800c380 <__alt_data_end+0xfc00c380>
 800c524:	8821883a 	mov	r16,r17
 800c528:	902f883a 	mov	r23,r18
 800c52c:	5013883a 	mov	r9,r10
 800c530:	3839883a 	mov	fp,r7
 800c534:	003f8c06 	br	800c368 <__alt_data_end+0xfc00c368>
 800c538:	8821883a 	mov	r16,r17
 800c53c:	902f883a 	mov	r23,r18
 800c540:	3013883a 	mov	r9,r6
 800c544:	3839883a 	mov	fp,r7
 800c548:	003f8706 	br	800c368 <__alt_data_end+0xfc00c368>
 800c54c:	b82ad43a 	srli	r21,r23,16
 800c550:	9038d43a 	srli	fp,r18,16
 800c554:	bdffffcc 	andi	r23,r23,65535
 800c558:	94bfffcc 	andi	r18,r18,65535
 800c55c:	9009883a 	mov	r4,r18
 800c560:	b80b883a 	mov	r5,r23
 800c564:	d8c00515 	stw	r3,20(sp)
 800c568:	d9800715 	stw	r6,28(sp)
 800c56c:	da000615 	stw	r8,24(sp)
 800c570:	800ad900 	call	800ad90 <__mulsi3>
 800c574:	9009883a 	mov	r4,r18
 800c578:	a80b883a 	mov	r5,r21
 800c57c:	1029883a 	mov	r20,r2
 800c580:	800ad900 	call	800ad90 <__mulsi3>
 800c584:	e009883a 	mov	r4,fp
 800c588:	a80b883a 	mov	r5,r21
 800c58c:	102d883a 	mov	r22,r2
 800c590:	800ad900 	call	800ad90 <__mulsi3>
 800c594:	e009883a 	mov	r4,fp
 800c598:	b80b883a 	mov	r5,r23
 800c59c:	1027883a 	mov	r19,r2
 800c5a0:	800ad900 	call	800ad90 <__mulsi3>
 800c5a4:	a008d43a 	srli	r4,r20,16
 800c5a8:	b085883a 	add	r2,r22,r2
 800c5ac:	d8c00517 	ldw	r3,20(sp)
 800c5b0:	110f883a 	add	r7,r2,r4
 800c5b4:	d9800717 	ldw	r6,28(sp)
 800c5b8:	da000617 	ldw	r8,24(sp)
 800c5bc:	3d80022e 	bgeu	r7,r22,800c5c8 <__muldf3+0x3b0>
 800c5c0:	00800074 	movhi	r2,1
 800c5c4:	98a7883a 	add	r19,r19,r2
 800c5c8:	3804943a 	slli	r2,r7,16
 800c5cc:	380ed43a 	srli	r7,r7,16
 800c5d0:	882cd43a 	srli	r22,r17,16
 800c5d4:	a53fffcc 	andi	r20,r20,65535
 800c5d8:	8c7fffcc 	andi	r17,r17,65535
 800c5dc:	1529883a 	add	r20,r2,r20
 800c5e0:	8809883a 	mov	r4,r17
 800c5e4:	b80b883a 	mov	r5,r23
 800c5e8:	d8c00515 	stw	r3,20(sp)
 800c5ec:	d9800715 	stw	r6,28(sp)
 800c5f0:	da000615 	stw	r8,24(sp)
 800c5f4:	d9c00015 	stw	r7,0(sp)
 800c5f8:	dd000115 	stw	r20,4(sp)
 800c5fc:	800ad900 	call	800ad90 <__mulsi3>
 800c600:	a80b883a 	mov	r5,r21
 800c604:	8809883a 	mov	r4,r17
 800c608:	d8800415 	stw	r2,16(sp)
 800c60c:	800ad900 	call	800ad90 <__mulsi3>
 800c610:	a80b883a 	mov	r5,r21
 800c614:	b009883a 	mov	r4,r22
 800c618:	1029883a 	mov	r20,r2
 800c61c:	800ad900 	call	800ad90 <__mulsi3>
 800c620:	b009883a 	mov	r4,r22
 800c624:	b80b883a 	mov	r5,r23
 800c628:	102b883a 	mov	r21,r2
 800c62c:	800ad900 	call	800ad90 <__mulsi3>
 800c630:	da400417 	ldw	r9,16(sp)
 800c634:	a085883a 	add	r2,r20,r2
 800c638:	d8c00517 	ldw	r3,20(sp)
 800c63c:	4808d43a 	srli	r4,r9,16
 800c640:	d9800717 	ldw	r6,28(sp)
 800c644:	da000617 	ldw	r8,24(sp)
 800c648:	1109883a 	add	r4,r2,r4
 800c64c:	2500022e 	bgeu	r4,r20,800c658 <__muldf3+0x440>
 800c650:	00800074 	movhi	r2,1
 800c654:	a8ab883a 	add	r21,r21,r2
 800c658:	200e943a 	slli	r7,r4,16
 800c65c:	2004d43a 	srli	r2,r4,16
 800c660:	802ed43a 	srli	r23,r16,16
 800c664:	843fffcc 	andi	r16,r16,65535
 800c668:	4d3fffcc 	andi	r20,r9,65535
 800c66c:	9009883a 	mov	r4,r18
 800c670:	800b883a 	mov	r5,r16
 800c674:	3d29883a 	add	r20,r7,r20
 800c678:	d8c00515 	stw	r3,20(sp)
 800c67c:	d9800715 	stw	r6,28(sp)
 800c680:	da000615 	stw	r8,24(sp)
 800c684:	a8ab883a 	add	r21,r21,r2
 800c688:	800ad900 	call	800ad90 <__mulsi3>
 800c68c:	9009883a 	mov	r4,r18
 800c690:	b80b883a 	mov	r5,r23
 800c694:	d8800315 	stw	r2,12(sp)
 800c698:	800ad900 	call	800ad90 <__mulsi3>
 800c69c:	e009883a 	mov	r4,fp
 800c6a0:	b80b883a 	mov	r5,r23
 800c6a4:	1025883a 	mov	r18,r2
 800c6a8:	800ad900 	call	800ad90 <__mulsi3>
 800c6ac:	e009883a 	mov	r4,fp
 800c6b0:	800b883a 	mov	r5,r16
 800c6b4:	d8800215 	stw	r2,8(sp)
 800c6b8:	800ad900 	call	800ad90 <__mulsi3>
 800c6bc:	da800317 	ldw	r10,12(sp)
 800c6c0:	d9400017 	ldw	r5,0(sp)
 800c6c4:	9085883a 	add	r2,r18,r2
 800c6c8:	5008d43a 	srli	r4,r10,16
 800c6cc:	a153883a 	add	r9,r20,r5
 800c6d0:	d8c00517 	ldw	r3,20(sp)
 800c6d4:	1109883a 	add	r4,r2,r4
 800c6d8:	d9800717 	ldw	r6,28(sp)
 800c6dc:	da000617 	ldw	r8,24(sp)
 800c6e0:	dac00217 	ldw	r11,8(sp)
 800c6e4:	2480022e 	bgeu	r4,r18,800c6f0 <__muldf3+0x4d8>
 800c6e8:	00800074 	movhi	r2,1
 800c6ec:	5897883a 	add	r11,r11,r2
 800c6f0:	200e943a 	slli	r7,r4,16
 800c6f4:	2038d43a 	srli	fp,r4,16
 800c6f8:	52bfffcc 	andi	r10,r10,65535
 800c6fc:	3a8f883a 	add	r7,r7,r10
 800c700:	8809883a 	mov	r4,r17
 800c704:	800b883a 	mov	r5,r16
 800c708:	d8c00515 	stw	r3,20(sp)
 800c70c:	d9800715 	stw	r6,28(sp)
 800c710:	d9c00215 	stw	r7,8(sp)
 800c714:	da000615 	stw	r8,24(sp)
 800c718:	da400415 	stw	r9,16(sp)
 800c71c:	5f39883a 	add	fp,r11,fp
 800c720:	800ad900 	call	800ad90 <__mulsi3>
 800c724:	8809883a 	mov	r4,r17
 800c728:	b80b883a 	mov	r5,r23
 800c72c:	1025883a 	mov	r18,r2
 800c730:	800ad900 	call	800ad90 <__mulsi3>
 800c734:	b009883a 	mov	r4,r22
 800c738:	b80b883a 	mov	r5,r23
 800c73c:	d8800315 	stw	r2,12(sp)
 800c740:	800ad900 	call	800ad90 <__mulsi3>
 800c744:	b009883a 	mov	r4,r22
 800c748:	800b883a 	mov	r5,r16
 800c74c:	1023883a 	mov	r17,r2
 800c750:	800ad900 	call	800ad90 <__mulsi3>
 800c754:	da800317 	ldw	r10,12(sp)
 800c758:	9008d43a 	srli	r4,r18,16
 800c75c:	d8c00517 	ldw	r3,20(sp)
 800c760:	5085883a 	add	r2,r10,r2
 800c764:	1109883a 	add	r4,r2,r4
 800c768:	d9800717 	ldw	r6,28(sp)
 800c76c:	d9c00217 	ldw	r7,8(sp)
 800c770:	da000617 	ldw	r8,24(sp)
 800c774:	da400417 	ldw	r9,16(sp)
 800c778:	2280022e 	bgeu	r4,r10,800c784 <__muldf3+0x56c>
 800c77c:	00800074 	movhi	r2,1
 800c780:	88a3883a 	add	r17,r17,r2
 800c784:	2004943a 	slli	r2,r4,16
 800c788:	94bfffcc 	andi	r18,r18,65535
 800c78c:	4ce7883a 	add	r19,r9,r19
 800c790:	14a5883a 	add	r18,r2,r18
 800c794:	9d29803a 	cmpltu	r20,r19,r20
 800c798:	9565883a 	add	r18,r18,r21
 800c79c:	9505883a 	add	r2,r18,r20
 800c7a0:	99e7883a 	add	r19,r19,r7
 800c7a4:	99cf803a 	cmpltu	r7,r19,r7
 800c7a8:	e08b883a 	add	r5,fp,r2
 800c7ac:	2008d43a 	srli	r4,r4,16
 800c7b0:	29ef883a 	add	r23,r5,r7
 800c7b4:	1529803a 	cmpltu	r20,r2,r20
 800c7b8:	956b803a 	cmpltu	r21,r18,r21
 800c7bc:	b9cf803a 	cmpltu	r7,r23,r7
 800c7c0:	a564b03a 	or	r18,r20,r21
 800c7c4:	2f39803a 	cmpltu	fp,r5,fp
 800c7c8:	9125883a 	add	r18,r18,r4
 800c7cc:	3f38b03a 	or	fp,r7,fp
 800c7d0:	9725883a 	add	r18,r18,fp
 800c7d4:	9804927a 	slli	r2,r19,9
 800c7d8:	9463883a 	add	r17,r18,r17
 800c7dc:	d9000117 	ldw	r4,4(sp)
 800c7e0:	b820d5fa 	srli	r16,r23,23
 800c7e4:	8822927a 	slli	r17,r17,9
 800c7e8:	9826d5fa 	srli	r19,r19,23
 800c7ec:	1104b03a 	or	r2,r2,r4
 800c7f0:	b82e927a 	slli	r23,r23,9
 800c7f4:	1004c03a 	cmpne	r2,r2,zero
 800c7f8:	8c20b03a 	or	r16,r17,r16
 800c7fc:	14e6b03a 	or	r19,r2,r19
 800c800:	8080402c 	andhi	r2,r16,256
 800c804:	9deeb03a 	or	r23,r19,r23
 800c808:	10000726 	beq	r2,zero,800c828 <__muldf3+0x610>
 800c80c:	b804d07a 	srli	r2,r23,1
 800c810:	800697fa 	slli	r3,r16,31
 800c814:	bdc0004c 	andi	r23,r23,1
 800c818:	8020d07a 	srli	r16,r16,1
 800c81c:	b8aeb03a 	or	r23,r23,r2
 800c820:	b8eeb03a 	or	r23,r23,r3
 800c824:	4007883a 	mov	r3,r8
 800c828:	1900ffc4 	addi	r4,r3,1023
 800c82c:	01004d0e 	bge	zero,r4,800c964 <__muldf3+0x74c>
 800c830:	b88001cc 	andi	r2,r23,7
 800c834:	10000726 	beq	r2,zero,800c854 <__muldf3+0x63c>
 800c838:	b94003cc 	andi	r5,r23,15
 800c83c:	00800104 	movi	r2,4
 800c840:	28800426 	beq	r5,r2,800c854 <__muldf3+0x63c>
 800c844:	b885883a 	add	r2,r23,r2
 800c848:	15ef803a 	cmpltu	r23,r2,r23
 800c84c:	85e1883a 	add	r16,r16,r23
 800c850:	102f883a 	mov	r23,r2
 800c854:	8080402c 	andhi	r2,r16,256
 800c858:	10000426 	beq	r2,zero,800c86c <__muldf3+0x654>
 800c85c:	00bfc034 	movhi	r2,65280
 800c860:	10bfffc4 	addi	r2,r2,-1
 800c864:	19010004 	addi	r4,r3,1024
 800c868:	80a0703a 	and	r16,r16,r2
 800c86c:	0081ff84 	movi	r2,2046
 800c870:	1100340e 	bge	r2,r4,800c944 <__muldf3+0x72c>
 800c874:	34c0004c 	andi	r19,r6,1
 800c878:	0101ffc4 	movi	r4,2047
 800c87c:	0021883a 	mov	r16,zero
 800c880:	002f883a 	mov	r23,zero
 800c884:	003ebe06 	br	800c380 <__alt_data_end+0xfc00c380>
 800c888:	8080022c 	andhi	r2,r16,8
 800c88c:	10000926 	beq	r2,zero,800c8b4 <__muldf3+0x69c>
 800c890:	8880022c 	andhi	r2,r17,8
 800c894:	1000071e 	bne	r2,zero,800c8b4 <__muldf3+0x69c>
 800c898:	00800434 	movhi	r2,16
 800c89c:	8c000234 	orhi	r16,r17,8
 800c8a0:	10bfffc4 	addi	r2,r2,-1
 800c8a4:	b027883a 	mov	r19,r22
 800c8a8:	80a0703a 	and	r16,r16,r2
 800c8ac:	902f883a 	mov	r23,r18
 800c8b0:	003f1a06 	br	800c51c <__alt_data_end+0xfc00c51c>
 800c8b4:	00800434 	movhi	r2,16
 800c8b8:	84000234 	orhi	r16,r16,8
 800c8bc:	10bfffc4 	addi	r2,r2,-1
 800c8c0:	80a0703a 	and	r16,r16,r2
 800c8c4:	003f1506 	br	800c51c <__alt_data_end+0xfc00c51c>
 800c8c8:	3009883a 	mov	r4,r6
 800c8cc:	d9400215 	stw	r5,8(sp)
 800c8d0:	d9800715 	stw	r6,28(sp)
 800c8d4:	da400415 	stw	r9,16(sp)
 800c8d8:	da800315 	stw	r10,12(sp)
 800c8dc:	800d5500 	call	800d550 <__clzsi2>
 800c8e0:	10c00804 	addi	r3,r2,32
 800c8e4:	010009c4 	movi	r4,39
 800c8e8:	d9400217 	ldw	r5,8(sp)
 800c8ec:	d9800717 	ldw	r6,28(sp)
 800c8f0:	da400417 	ldw	r9,16(sp)
 800c8f4:	da800317 	ldw	r10,12(sp)
 800c8f8:	20fee20e 	bge	r4,r3,800c484 <__alt_data_end+0xfc00c484>
 800c8fc:	147ffe04 	addi	r17,r2,-8
 800c900:	9462983a 	sll	r17,r18,r17
 800c904:	0025883a 	mov	r18,zero
 800c908:	003ee506 	br	800c4a0 <__alt_data_end+0xfc00c4a0>
 800c90c:	d9800715 	stw	r6,28(sp)
 800c910:	d9c00215 	stw	r7,8(sp)
 800c914:	da400415 	stw	r9,16(sp)
 800c918:	800d5500 	call	800d550 <__clzsi2>
 800c91c:	10c00804 	addi	r3,r2,32
 800c920:	010009c4 	movi	r4,39
 800c924:	d9800717 	ldw	r6,28(sp)
 800c928:	d9c00217 	ldw	r7,8(sp)
 800c92c:	da400417 	ldw	r9,16(sp)
 800c930:	20feb40e 	bge	r4,r3,800c404 <__alt_data_end+0xfc00c404>
 800c934:	143ffe04 	addi	r16,r2,-8
 800c938:	9420983a 	sll	r16,r18,r16
 800c93c:	002f883a 	mov	r23,zero
 800c940:	003eb706 	br	800c420 <__alt_data_end+0xfc00c420>
 800c944:	8004977a 	slli	r2,r16,29
 800c948:	b82ed0fa 	srli	r23,r23,3
 800c94c:	8020927a 	slli	r16,r16,9
 800c950:	2101ffcc 	andi	r4,r4,2047
 800c954:	15eeb03a 	or	r23,r2,r23
 800c958:	8020d33a 	srli	r16,r16,12
 800c95c:	34c0004c 	andi	r19,r6,1
 800c960:	003e8706 	br	800c380 <__alt_data_end+0xfc00c380>
 800c964:	00bf0084 	movi	r2,-1022
 800c968:	10c5c83a 	sub	r2,r2,r3
 800c96c:	01000e04 	movi	r4,56
 800c970:	2080080e 	bge	r4,r2,800c994 <__muldf3+0x77c>
 800c974:	34c0004c 	andi	r19,r6,1
 800c978:	0009883a 	mov	r4,zero
 800c97c:	0021883a 	mov	r16,zero
 800c980:	002f883a 	mov	r23,zero
 800c984:	003e7e06 	br	800c380 <__alt_data_end+0xfc00c380>
 800c988:	4007883a 	mov	r3,r8
 800c98c:	480d883a 	mov	r6,r9
 800c990:	003fa506 	br	800c828 <__alt_data_end+0xfc00c828>
 800c994:	010007c4 	movi	r4,31
 800c998:	20801816 	blt	r4,r2,800c9fc <__muldf3+0x7e4>
 800c99c:	18c10784 	addi	r3,r3,1054
 800c9a0:	80c8983a 	sll	r4,r16,r3
 800c9a4:	b88ad83a 	srl	r5,r23,r2
 800c9a8:	b8c6983a 	sll	r3,r23,r3
 800c9ac:	80a0d83a 	srl	r16,r16,r2
 800c9b0:	2908b03a 	or	r4,r5,r4
 800c9b4:	1804c03a 	cmpne	r2,r3,zero
 800c9b8:	2088b03a 	or	r4,r4,r2
 800c9bc:	208001cc 	andi	r2,r4,7
 800c9c0:	10000726 	beq	r2,zero,800c9e0 <__muldf3+0x7c8>
 800c9c4:	20c003cc 	andi	r3,r4,15
 800c9c8:	00800104 	movi	r2,4
 800c9cc:	18800426 	beq	r3,r2,800c9e0 <__muldf3+0x7c8>
 800c9d0:	20c00104 	addi	r3,r4,4
 800c9d4:	1905803a 	cmpltu	r2,r3,r4
 800c9d8:	80a1883a 	add	r16,r16,r2
 800c9dc:	1809883a 	mov	r4,r3
 800c9e0:	8080202c 	andhi	r2,r16,128
 800c9e4:	10001b26 	beq	r2,zero,800ca54 <__muldf3+0x83c>
 800c9e8:	34c0004c 	andi	r19,r6,1
 800c9ec:	01000044 	movi	r4,1
 800c9f0:	0021883a 	mov	r16,zero
 800c9f4:	002f883a 	mov	r23,zero
 800c9f8:	003e6106 	br	800c380 <__alt_data_end+0xfc00c380>
 800c9fc:	013ef884 	movi	r4,-1054
 800ca00:	20c9c83a 	sub	r4,r4,r3
 800ca04:	01400804 	movi	r5,32
 800ca08:	8108d83a 	srl	r4,r16,r4
 800ca0c:	11401526 	beq	r2,r5,800ca64 <__muldf3+0x84c>
 800ca10:	18c10f84 	addi	r3,r3,1086
 800ca14:	80e0983a 	sll	r16,r16,r3
 800ca18:	85eeb03a 	or	r23,r16,r23
 800ca1c:	b804c03a 	cmpne	r2,r23,zero
 800ca20:	1108b03a 	or	r4,r2,r4
 800ca24:	20c001cc 	andi	r3,r4,7
 800ca28:	1800061e 	bne	r3,zero,800ca44 <__muldf3+0x82c>
 800ca2c:	0021883a 	mov	r16,zero
 800ca30:	202ed0fa 	srli	r23,r4,3
 800ca34:	34c0004c 	andi	r19,r6,1
 800ca38:	0009883a 	mov	r4,zero
 800ca3c:	b8eeb03a 	or	r23,r23,r3
 800ca40:	003e4f06 	br	800c380 <__alt_data_end+0xfc00c380>
 800ca44:	20c003cc 	andi	r3,r4,15
 800ca48:	00800104 	movi	r2,4
 800ca4c:	0021883a 	mov	r16,zero
 800ca50:	18bfdf1e 	bne	r3,r2,800c9d0 <__alt_data_end+0xfc00c9d0>
 800ca54:	8004927a 	slli	r2,r16,9
 800ca58:	8006977a 	slli	r3,r16,29
 800ca5c:	1020d33a 	srli	r16,r2,12
 800ca60:	003ff306 	br	800ca30 <__alt_data_end+0xfc00ca30>
 800ca64:	0021883a 	mov	r16,zero
 800ca68:	003feb06 	br	800ca18 <__alt_data_end+0xfc00ca18>
 800ca6c:	00800434 	movhi	r2,16
 800ca70:	84000234 	orhi	r16,r16,8
 800ca74:	10bfffc4 	addi	r2,r2,-1
 800ca78:	4cc0004c 	andi	r19,r9,1
 800ca7c:	80a0703a 	and	r16,r16,r2
 800ca80:	003ea606 	br	800c51c <__alt_data_end+0xfc00c51c>

0800ca84 <__subdf3>:
 800ca84:	00c00434 	movhi	r3,16
 800ca88:	18ffffc4 	addi	r3,r3,-1
 800ca8c:	defffb04 	addi	sp,sp,-20
 800ca90:	28d2703a 	and	r9,r5,r3
 800ca94:	3814d53a 	srli	r10,r7,20
 800ca98:	38c6703a 	and	r3,r7,r3
 800ca9c:	3004d77a 	srli	r2,r6,29
 800caa0:	dc800215 	stw	r18,8(sp)
 800caa4:	dc000015 	stw	r16,0(sp)
 800caa8:	2824d7fa 	srli	r18,r5,31
 800caac:	2820d53a 	srli	r16,r5,20
 800cab0:	481290fa 	slli	r9,r9,3
 800cab4:	200ad77a 	srli	r5,r4,29
 800cab8:	180690fa 	slli	r3,r3,3
 800cabc:	dc400115 	stw	r17,4(sp)
 800cac0:	dfc00415 	stw	ra,16(sp)
 800cac4:	202290fa 	slli	r17,r4,3
 800cac8:	dcc00315 	stw	r19,12(sp)
 800cacc:	5281ffcc 	andi	r10,r10,2047
 800cad0:	0101ffc4 	movi	r4,2047
 800cad4:	9011883a 	mov	r8,r18
 800cad8:	8401ffcc 	andi	r16,r16,2047
 800cadc:	94803fcc 	andi	r18,r18,255
 800cae0:	494ab03a 	or	r5,r9,r5
 800cae4:	380ed7fa 	srli	r7,r7,31
 800cae8:	1886b03a 	or	r3,r3,r2
 800caec:	300c90fa 	slli	r6,r6,3
 800caf0:	51009026 	beq	r10,r4,800cd34 <__subdf3+0x2b0>
 800caf4:	39c0005c 	xori	r7,r7,1
 800caf8:	8285c83a 	sub	r2,r16,r10
 800cafc:	91c06f26 	beq	r18,r7,800ccbc <__subdf3+0x238>
 800cb00:	0080b10e 	bge	zero,r2,800cdc8 <__subdf3+0x344>
 800cb04:	50002a1e 	bne	r10,zero,800cbb0 <__subdf3+0x12c>
 800cb08:	1988b03a 	or	r4,r3,r6
 800cb0c:	2000941e 	bne	r4,zero,800cd60 <__subdf3+0x2dc>
 800cb10:	888001cc 	andi	r2,r17,7
 800cb14:	10005b26 	beq	r2,zero,800cc84 <__subdf3+0x200>
 800cb18:	88c003cc 	andi	r3,r17,15
 800cb1c:	00800104 	movi	r2,4
 800cb20:	18805826 	beq	r3,r2,800cc84 <__subdf3+0x200>
 800cb24:	88c00104 	addi	r3,r17,4
 800cb28:	1c63803a 	cmpltu	r17,r3,r17
 800cb2c:	2c4b883a 	add	r5,r5,r17
 800cb30:	2880202c 	andhi	r2,r5,128
 800cb34:	9200004c 	andi	r8,r18,1
 800cb38:	1823883a 	mov	r17,r3
 800cb3c:	10005426 	beq	r2,zero,800cc90 <__subdf3+0x20c>
 800cb40:	84000044 	addi	r16,r16,1
 800cb44:	0081ffc4 	movi	r2,2047
 800cb48:	8080bf26 	beq	r16,r2,800ce48 <__subdf3+0x3c4>
 800cb4c:	013fe034 	movhi	r4,65408
 800cb50:	213fffc4 	addi	r4,r4,-1
 800cb54:	290a703a 	and	r5,r5,r4
 800cb58:	2804977a 	slli	r2,r5,29
 800cb5c:	280a927a 	slli	r5,r5,9
 800cb60:	8822d0fa 	srli	r17,r17,3
 800cb64:	8401ffcc 	andi	r16,r16,2047
 800cb68:	2808d33a 	srli	r4,r5,12
 800cb6c:	1444b03a 	or	r2,r2,r17
 800cb70:	8401ffcc 	andi	r16,r16,2047
 800cb74:	800a953a 	slli	r5,r16,20
 800cb78:	40c03fcc 	andi	r3,r8,255
 800cb7c:	04000434 	movhi	r16,16
 800cb80:	180697fa 	slli	r3,r3,31
 800cb84:	843fffc4 	addi	r16,r16,-1
 800cb88:	2420703a 	and	r16,r4,r16
 800cb8c:	8160b03a 	or	r16,r16,r5
 800cb90:	80c6b03a 	or	r3,r16,r3
 800cb94:	dfc00417 	ldw	ra,16(sp)
 800cb98:	dcc00317 	ldw	r19,12(sp)
 800cb9c:	dc800217 	ldw	r18,8(sp)
 800cba0:	dc400117 	ldw	r17,4(sp)
 800cba4:	dc000017 	ldw	r16,0(sp)
 800cba8:	dec00504 	addi	sp,sp,20
 800cbac:	f800283a 	ret
 800cbb0:	0101ffc4 	movi	r4,2047
 800cbb4:	813fd626 	beq	r16,r4,800cb10 <__alt_data_end+0xfc00cb10>
 800cbb8:	18c02034 	orhi	r3,r3,128
 800cbbc:	01000e04 	movi	r4,56
 800cbc0:	2080a416 	blt	r4,r2,800ce54 <__subdf3+0x3d0>
 800cbc4:	010007c4 	movi	r4,31
 800cbc8:	2080c716 	blt	r4,r2,800cee8 <__subdf3+0x464>
 800cbcc:	01000804 	movi	r4,32
 800cbd0:	2089c83a 	sub	r4,r4,r2
 800cbd4:	1910983a 	sll	r8,r3,r4
 800cbd8:	308ed83a 	srl	r7,r6,r2
 800cbdc:	3108983a 	sll	r4,r6,r4
 800cbe0:	1884d83a 	srl	r2,r3,r2
 800cbe4:	41ccb03a 	or	r6,r8,r7
 800cbe8:	2008c03a 	cmpne	r4,r4,zero
 800cbec:	310cb03a 	or	r6,r6,r4
 800cbf0:	898dc83a 	sub	r6,r17,r6
 800cbf4:	89a3803a 	cmpltu	r17,r17,r6
 800cbf8:	288bc83a 	sub	r5,r5,r2
 800cbfc:	2c4bc83a 	sub	r5,r5,r17
 800cc00:	3023883a 	mov	r17,r6
 800cc04:	2880202c 	andhi	r2,r5,128
 800cc08:	10006b26 	beq	r2,zero,800cdb8 <__subdf3+0x334>
 800cc0c:	04c02034 	movhi	r19,128
 800cc10:	9cffffc4 	addi	r19,r19,-1
 800cc14:	2ce6703a 	and	r19,r5,r19
 800cc18:	98007c26 	beq	r19,zero,800ce0c <__subdf3+0x388>
 800cc1c:	9809883a 	mov	r4,r19
 800cc20:	800d5500 	call	800d550 <__clzsi2>
 800cc24:	10fffe04 	addi	r3,r2,-8
 800cc28:	010007c4 	movi	r4,31
 800cc2c:	20c07d16 	blt	r4,r3,800ce24 <__subdf3+0x3a0>
 800cc30:	01400a04 	movi	r5,40
 800cc34:	2885c83a 	sub	r2,r5,r2
 800cc38:	888ad83a 	srl	r5,r17,r2
 800cc3c:	98e6983a 	sll	r19,r19,r3
 800cc40:	88e2983a 	sll	r17,r17,r3
 800cc44:	2ce6b03a 	or	r19,r5,r19
 800cc48:	1c007a16 	blt	r3,r16,800ce34 <__subdf3+0x3b0>
 800cc4c:	1c21c83a 	sub	r16,r3,r16
 800cc50:	81400044 	addi	r5,r16,1
 800cc54:	00c007c4 	movi	r3,31
 800cc58:	19409616 	blt	r3,r5,800ceb4 <__subdf3+0x430>
 800cc5c:	1c21c83a 	sub	r16,r3,r16
 800cc60:	8c08983a 	sll	r4,r17,r16
 800cc64:	8946d83a 	srl	r3,r17,r5
 800cc68:	9c20983a 	sll	r16,r19,r16
 800cc6c:	2008c03a 	cmpne	r4,r4,zero
 800cc70:	994ad83a 	srl	r5,r19,r5
 800cc74:	1c06b03a 	or	r3,r3,r16
 800cc78:	1922b03a 	or	r17,r3,r4
 800cc7c:	0021883a 	mov	r16,zero
 800cc80:	003fa306 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800cc84:	2880202c 	andhi	r2,r5,128
 800cc88:	9200004c 	andi	r8,r18,1
 800cc8c:	103fac1e 	bne	r2,zero,800cb40 <__alt_data_end+0xfc00cb40>
 800cc90:	2804977a 	slli	r2,r5,29
 800cc94:	8822d0fa 	srli	r17,r17,3
 800cc98:	00c1ffc4 	movi	r3,2047
 800cc9c:	280ad0fa 	srli	r5,r5,3
 800cca0:	1444b03a 	or	r2,r2,r17
 800cca4:	80c02726 	beq	r16,r3,800cd44 <__subdf3+0x2c0>
 800cca8:	01000434 	movhi	r4,16
 800ccac:	213fffc4 	addi	r4,r4,-1
 800ccb0:	80e0703a 	and	r16,r16,r3
 800ccb4:	2908703a 	and	r4,r5,r4
 800ccb8:	003fad06 	br	800cb70 <__alt_data_end+0xfc00cb70>
 800ccbc:	0080690e 	bge	zero,r2,800ce64 <__subdf3+0x3e0>
 800ccc0:	50002f26 	beq	r10,zero,800cd80 <__subdf3+0x2fc>
 800ccc4:	0101ffc4 	movi	r4,2047
 800ccc8:	813f9126 	beq	r16,r4,800cb10 <__alt_data_end+0xfc00cb10>
 800cccc:	18c02034 	orhi	r3,r3,128
 800ccd0:	01000e04 	movi	r4,56
 800ccd4:	2080b00e 	bge	r4,r2,800cf98 <__subdf3+0x514>
 800ccd8:	198cb03a 	or	r6,r3,r6
 800ccdc:	300ec03a 	cmpne	r7,r6,zero
 800cce0:	0005883a 	mov	r2,zero
 800cce4:	3c4f883a 	add	r7,r7,r17
 800cce8:	3c63803a 	cmpltu	r17,r7,r17
 800ccec:	114b883a 	add	r5,r2,r5
 800ccf0:	2c4b883a 	add	r5,r5,r17
 800ccf4:	3823883a 	mov	r17,r7
 800ccf8:	2880202c 	andhi	r2,r5,128
 800ccfc:	10002e26 	beq	r2,zero,800cdb8 <__subdf3+0x334>
 800cd00:	84000044 	addi	r16,r16,1
 800cd04:	0081ffc4 	movi	r2,2047
 800cd08:	8080de26 	beq	r16,r2,800d084 <__subdf3+0x600>
 800cd0c:	00bfe034 	movhi	r2,65408
 800cd10:	10bfffc4 	addi	r2,r2,-1
 800cd14:	288a703a 	and	r5,r5,r2
 800cd18:	880cd07a 	srli	r6,r17,1
 800cd1c:	280897fa 	slli	r4,r5,31
 800cd20:	88c0004c 	andi	r3,r17,1
 800cd24:	30e2b03a 	or	r17,r6,r3
 800cd28:	280ad07a 	srli	r5,r5,1
 800cd2c:	8922b03a 	or	r17,r17,r4
 800cd30:	003f7706 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800cd34:	1984b03a 	or	r2,r3,r6
 800cd38:	103f6e26 	beq	r2,zero,800caf4 <__alt_data_end+0xfc00caf4>
 800cd3c:	39c03fcc 	andi	r7,r7,255
 800cd40:	003f6d06 	br	800caf8 <__alt_data_end+0xfc00caf8>
 800cd44:	1146b03a 	or	r3,r2,r5
 800cd48:	18003f26 	beq	r3,zero,800ce48 <__subdf3+0x3c4>
 800cd4c:	00c00434 	movhi	r3,16
 800cd50:	29000234 	orhi	r4,r5,8
 800cd54:	18ffffc4 	addi	r3,r3,-1
 800cd58:	20c8703a 	and	r4,r4,r3
 800cd5c:	003f8406 	br	800cb70 <__alt_data_end+0xfc00cb70>
 800cd60:	10bfffc4 	addi	r2,r2,-1
 800cd64:	1000501e 	bne	r2,zero,800cea8 <__subdf3+0x424>
 800cd68:	898fc83a 	sub	r7,r17,r6
 800cd6c:	89e3803a 	cmpltu	r17,r17,r7
 800cd70:	28cbc83a 	sub	r5,r5,r3
 800cd74:	2c4bc83a 	sub	r5,r5,r17
 800cd78:	3823883a 	mov	r17,r7
 800cd7c:	003fa106 	br	800cc04 <__alt_data_end+0xfc00cc04>
 800cd80:	1988b03a 	or	r4,r3,r6
 800cd84:	203f6226 	beq	r4,zero,800cb10 <__alt_data_end+0xfc00cb10>
 800cd88:	10bfffc4 	addi	r2,r2,-1
 800cd8c:	10009b1e 	bne	r2,zero,800cffc <__subdf3+0x578>
 800cd90:	344d883a 	add	r6,r6,r17
 800cd94:	3463803a 	cmpltu	r17,r6,r17
 800cd98:	194b883a 	add	r5,r3,r5
 800cd9c:	2c4b883a 	add	r5,r5,r17
 800cda0:	3023883a 	mov	r17,r6
 800cda4:	003fd406 	br	800ccf8 <__alt_data_end+0xfc00ccf8>
 800cda8:	1106b03a 	or	r3,r2,r4
 800cdac:	1800b426 	beq	r3,zero,800d080 <__subdf3+0x5fc>
 800cdb0:	100b883a 	mov	r5,r2
 800cdb4:	2023883a 	mov	r17,r4
 800cdb8:	888001cc 	andi	r2,r17,7
 800cdbc:	103f561e 	bne	r2,zero,800cb18 <__alt_data_end+0xfc00cb18>
 800cdc0:	9200004c 	andi	r8,r18,1
 800cdc4:	003fb206 	br	800cc90 <__alt_data_end+0xfc00cc90>
 800cdc8:	1000531e 	bne	r2,zero,800cf18 <__subdf3+0x494>
 800cdcc:	80800044 	addi	r2,r16,1
 800cdd0:	1081ffcc 	andi	r2,r2,2047
 800cdd4:	01000044 	movi	r4,1
 800cdd8:	2080a00e 	bge	r4,r2,800d05c <__subdf3+0x5d8>
 800cddc:	8985c83a 	sub	r2,r17,r6
 800cde0:	8889803a 	cmpltu	r4,r17,r2
 800cde4:	28e7c83a 	sub	r19,r5,r3
 800cde8:	9927c83a 	sub	r19,r19,r4
 800cdec:	9900202c 	andhi	r4,r19,128
 800cdf0:	20006226 	beq	r4,zero,800cf7c <__subdf3+0x4f8>
 800cdf4:	3463c83a 	sub	r17,r6,r17
 800cdf8:	194bc83a 	sub	r5,r3,r5
 800cdfc:	344d803a 	cmpltu	r6,r6,r17
 800ce00:	29a7c83a 	sub	r19,r5,r6
 800ce04:	3825883a 	mov	r18,r7
 800ce08:	983f841e 	bne	r19,zero,800cc1c <__alt_data_end+0xfc00cc1c>
 800ce0c:	8809883a 	mov	r4,r17
 800ce10:	800d5500 	call	800d550 <__clzsi2>
 800ce14:	10800804 	addi	r2,r2,32
 800ce18:	10fffe04 	addi	r3,r2,-8
 800ce1c:	010007c4 	movi	r4,31
 800ce20:	20ff830e 	bge	r4,r3,800cc30 <__alt_data_end+0xfc00cc30>
 800ce24:	14fff604 	addi	r19,r2,-40
 800ce28:	8ce6983a 	sll	r19,r17,r19
 800ce2c:	0023883a 	mov	r17,zero
 800ce30:	1c3f860e 	bge	r3,r16,800cc4c <__alt_data_end+0xfc00cc4c>
 800ce34:	017fe034 	movhi	r5,65408
 800ce38:	297fffc4 	addi	r5,r5,-1
 800ce3c:	80e1c83a 	sub	r16,r16,r3
 800ce40:	994a703a 	and	r5,r19,r5
 800ce44:	003f3206 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800ce48:	0009883a 	mov	r4,zero
 800ce4c:	0005883a 	mov	r2,zero
 800ce50:	003f4706 	br	800cb70 <__alt_data_end+0xfc00cb70>
 800ce54:	198cb03a 	or	r6,r3,r6
 800ce58:	300cc03a 	cmpne	r6,r6,zero
 800ce5c:	0005883a 	mov	r2,zero
 800ce60:	003f6306 	br	800cbf0 <__alt_data_end+0xfc00cbf0>
 800ce64:	10009d1e 	bne	r2,zero,800d0dc <__subdf3+0x658>
 800ce68:	81c00044 	addi	r7,r16,1
 800ce6c:	3881ffcc 	andi	r2,r7,2047
 800ce70:	02400044 	movi	r9,1
 800ce74:	4880680e 	bge	r9,r2,800d018 <__subdf3+0x594>
 800ce78:	0081ffc4 	movi	r2,2047
 800ce7c:	3880ae26 	beq	r7,r2,800d138 <__subdf3+0x6b4>
 800ce80:	344d883a 	add	r6,r6,r17
 800ce84:	3463803a 	cmpltu	r17,r6,r17
 800ce88:	194b883a 	add	r5,r3,r5
 800ce8c:	2c4b883a 	add	r5,r5,r17
 800ce90:	282297fa 	slli	r17,r5,31
 800ce94:	300cd07a 	srli	r6,r6,1
 800ce98:	280ad07a 	srli	r5,r5,1
 800ce9c:	3821883a 	mov	r16,r7
 800cea0:	89a2b03a 	or	r17,r17,r6
 800cea4:	003f1a06 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800cea8:	0101ffc4 	movi	r4,2047
 800ceac:	813f431e 	bne	r16,r4,800cbbc <__alt_data_end+0xfc00cbbc>
 800ceb0:	003f1706 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800ceb4:	80bff844 	addi	r2,r16,-31
 800ceb8:	00c00804 	movi	r3,32
 800cebc:	9884d83a 	srl	r2,r19,r2
 800cec0:	28c05126 	beq	r5,r3,800d008 <__subdf3+0x584>
 800cec4:	00c00fc4 	movi	r3,63
 800cec8:	1c21c83a 	sub	r16,r3,r16
 800cecc:	9c26983a 	sll	r19,r19,r16
 800ced0:	9c62b03a 	or	r17,r19,r17
 800ced4:	8822c03a 	cmpne	r17,r17,zero
 800ced8:	88a2b03a 	or	r17,r17,r2
 800cedc:	000b883a 	mov	r5,zero
 800cee0:	0021883a 	mov	r16,zero
 800cee4:	003fb406 	br	800cdb8 <__alt_data_end+0xfc00cdb8>
 800cee8:	113ff804 	addi	r4,r2,-32
 800ceec:	01c00804 	movi	r7,32
 800cef0:	1908d83a 	srl	r4,r3,r4
 800cef4:	11c04626 	beq	r2,r7,800d010 <__subdf3+0x58c>
 800cef8:	01c01004 	movi	r7,64
 800cefc:	3885c83a 	sub	r2,r7,r2
 800cf00:	1884983a 	sll	r2,r3,r2
 800cf04:	118cb03a 	or	r6,r2,r6
 800cf08:	300cc03a 	cmpne	r6,r6,zero
 800cf0c:	310cb03a 	or	r6,r6,r4
 800cf10:	0005883a 	mov	r2,zero
 800cf14:	003f3606 	br	800cbf0 <__alt_data_end+0xfc00cbf0>
 800cf18:	80002b26 	beq	r16,zero,800cfc8 <__subdf3+0x544>
 800cf1c:	0101ffc4 	movi	r4,2047
 800cf20:	51006926 	beq	r10,r4,800d0c8 <__subdf3+0x644>
 800cf24:	0085c83a 	sub	r2,zero,r2
 800cf28:	29402034 	orhi	r5,r5,128
 800cf2c:	01000e04 	movi	r4,56
 800cf30:	20807d16 	blt	r4,r2,800d128 <__subdf3+0x6a4>
 800cf34:	010007c4 	movi	r4,31
 800cf38:	2080d916 	blt	r4,r2,800d2a0 <__subdf3+0x81c>
 800cf3c:	01000804 	movi	r4,32
 800cf40:	2089c83a 	sub	r4,r4,r2
 800cf44:	2912983a 	sll	r9,r5,r4
 800cf48:	8890d83a 	srl	r8,r17,r2
 800cf4c:	8908983a 	sll	r4,r17,r4
 800cf50:	2884d83a 	srl	r2,r5,r2
 800cf54:	4a22b03a 	or	r17,r9,r8
 800cf58:	2008c03a 	cmpne	r4,r4,zero
 800cf5c:	8922b03a 	or	r17,r17,r4
 800cf60:	3463c83a 	sub	r17,r6,r17
 800cf64:	1885c83a 	sub	r2,r3,r2
 800cf68:	344d803a 	cmpltu	r6,r6,r17
 800cf6c:	118bc83a 	sub	r5,r2,r6
 800cf70:	5021883a 	mov	r16,r10
 800cf74:	3825883a 	mov	r18,r7
 800cf78:	003f2206 	br	800cc04 <__alt_data_end+0xfc00cc04>
 800cf7c:	9886b03a 	or	r3,r19,r2
 800cf80:	18001c1e 	bne	r3,zero,800cff4 <__subdf3+0x570>
 800cf84:	0011883a 	mov	r8,zero
 800cf88:	000b883a 	mov	r5,zero
 800cf8c:	0023883a 	mov	r17,zero
 800cf90:	0021883a 	mov	r16,zero
 800cf94:	003f3e06 	br	800cc90 <__alt_data_end+0xfc00cc90>
 800cf98:	010007c4 	movi	r4,31
 800cf9c:	20803c16 	blt	r4,r2,800d090 <__subdf3+0x60c>
 800cfa0:	01000804 	movi	r4,32
 800cfa4:	2089c83a 	sub	r4,r4,r2
 800cfa8:	1912983a 	sll	r9,r3,r4
 800cfac:	308ed83a 	srl	r7,r6,r2
 800cfb0:	3108983a 	sll	r4,r6,r4
 800cfb4:	1884d83a 	srl	r2,r3,r2
 800cfb8:	49ceb03a 	or	r7,r9,r7
 800cfbc:	2008c03a 	cmpne	r4,r4,zero
 800cfc0:	390eb03a 	or	r7,r7,r4
 800cfc4:	003f4706 	br	800cce4 <__alt_data_end+0xfc00cce4>
 800cfc8:	2c48b03a 	or	r4,r5,r17
 800cfcc:	20003e26 	beq	r4,zero,800d0c8 <__subdf3+0x644>
 800cfd0:	0084303a 	nor	r2,zero,r2
 800cfd4:	10003a1e 	bne	r2,zero,800d0c0 <__subdf3+0x63c>
 800cfd8:	3463c83a 	sub	r17,r6,r17
 800cfdc:	194bc83a 	sub	r5,r3,r5
 800cfe0:	344d803a 	cmpltu	r6,r6,r17
 800cfe4:	298bc83a 	sub	r5,r5,r6
 800cfe8:	5021883a 	mov	r16,r10
 800cfec:	3825883a 	mov	r18,r7
 800cff0:	003f0406 	br	800cc04 <__alt_data_end+0xfc00cc04>
 800cff4:	1023883a 	mov	r17,r2
 800cff8:	003f0706 	br	800cc18 <__alt_data_end+0xfc00cc18>
 800cffc:	0101ffc4 	movi	r4,2047
 800d000:	813f331e 	bne	r16,r4,800ccd0 <__alt_data_end+0xfc00ccd0>
 800d004:	003ec206 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d008:	0027883a 	mov	r19,zero
 800d00c:	003fb006 	br	800ced0 <__alt_data_end+0xfc00ced0>
 800d010:	0005883a 	mov	r2,zero
 800d014:	003fbb06 	br	800cf04 <__alt_data_end+0xfc00cf04>
 800d018:	2c44b03a 	or	r2,r5,r17
 800d01c:	80008b1e 	bne	r16,zero,800d24c <__subdf3+0x7c8>
 800d020:	1000b526 	beq	r2,zero,800d2f8 <__subdf3+0x874>
 800d024:	1984b03a 	or	r2,r3,r6
 800d028:	103eb926 	beq	r2,zero,800cb10 <__alt_data_end+0xfc00cb10>
 800d02c:	3449883a 	add	r4,r6,r17
 800d030:	2463803a 	cmpltu	r17,r4,r17
 800d034:	194b883a 	add	r5,r3,r5
 800d038:	2c4b883a 	add	r5,r5,r17
 800d03c:	2880202c 	andhi	r2,r5,128
 800d040:	2023883a 	mov	r17,r4
 800d044:	103f5c26 	beq	r2,zero,800cdb8 <__alt_data_end+0xfc00cdb8>
 800d048:	00bfe034 	movhi	r2,65408
 800d04c:	10bfffc4 	addi	r2,r2,-1
 800d050:	4821883a 	mov	r16,r9
 800d054:	288a703a 	and	r5,r5,r2
 800d058:	003ead06 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d05c:	2c44b03a 	or	r2,r5,r17
 800d060:	8000291e 	bne	r16,zero,800d108 <__subdf3+0x684>
 800d064:	10004f1e 	bne	r2,zero,800d1a4 <__subdf3+0x720>
 800d068:	1984b03a 	or	r2,r3,r6
 800d06c:	10000426 	beq	r2,zero,800d080 <__subdf3+0x5fc>
 800d070:	180b883a 	mov	r5,r3
 800d074:	3023883a 	mov	r17,r6
 800d078:	3825883a 	mov	r18,r7
 800d07c:	003ea406 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d080:	0011883a 	mov	r8,zero
 800d084:	000b883a 	mov	r5,zero
 800d088:	0023883a 	mov	r17,zero
 800d08c:	003f0006 	br	800cc90 <__alt_data_end+0xfc00cc90>
 800d090:	11fff804 	addi	r7,r2,-32
 800d094:	19c8d83a 	srl	r4,r3,r7
 800d098:	01c00804 	movi	r7,32
 800d09c:	11c07e26 	beq	r2,r7,800d298 <__subdf3+0x814>
 800d0a0:	01c01004 	movi	r7,64
 800d0a4:	3885c83a 	sub	r2,r7,r2
 800d0a8:	1884983a 	sll	r2,r3,r2
 800d0ac:	118cb03a 	or	r6,r2,r6
 800d0b0:	300ec03a 	cmpne	r7,r6,zero
 800d0b4:	390eb03a 	or	r7,r7,r4
 800d0b8:	0005883a 	mov	r2,zero
 800d0bc:	003f0906 	br	800cce4 <__alt_data_end+0xfc00cce4>
 800d0c0:	0101ffc4 	movi	r4,2047
 800d0c4:	513f991e 	bne	r10,r4,800cf2c <__alt_data_end+0xfc00cf2c>
 800d0c8:	180b883a 	mov	r5,r3
 800d0cc:	3023883a 	mov	r17,r6
 800d0d0:	5021883a 	mov	r16,r10
 800d0d4:	3825883a 	mov	r18,r7
 800d0d8:	003e8d06 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d0dc:	80001a1e 	bne	r16,zero,800d148 <__subdf3+0x6c4>
 800d0e0:	2c48b03a 	or	r4,r5,r17
 800d0e4:	20005526 	beq	r4,zero,800d23c <__subdf3+0x7b8>
 800d0e8:	0084303a 	nor	r2,zero,r2
 800d0ec:	1000511e 	bne	r2,zero,800d234 <__subdf3+0x7b0>
 800d0f0:	89a3883a 	add	r17,r17,r6
 800d0f4:	194b883a 	add	r5,r3,r5
 800d0f8:	898d803a 	cmpltu	r6,r17,r6
 800d0fc:	298b883a 	add	r5,r5,r6
 800d100:	5021883a 	mov	r16,r10
 800d104:	003efc06 	br	800ccf8 <__alt_data_end+0xfc00ccf8>
 800d108:	1000341e 	bne	r2,zero,800d1dc <__subdf3+0x758>
 800d10c:	1984b03a 	or	r2,r3,r6
 800d110:	10006f26 	beq	r2,zero,800d2d0 <__subdf3+0x84c>
 800d114:	180b883a 	mov	r5,r3
 800d118:	3023883a 	mov	r17,r6
 800d11c:	3825883a 	mov	r18,r7
 800d120:	0401ffc4 	movi	r16,2047
 800d124:	003e7a06 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d128:	2c62b03a 	or	r17,r5,r17
 800d12c:	8822c03a 	cmpne	r17,r17,zero
 800d130:	0005883a 	mov	r2,zero
 800d134:	003f8a06 	br	800cf60 <__alt_data_end+0xfc00cf60>
 800d138:	3821883a 	mov	r16,r7
 800d13c:	000b883a 	mov	r5,zero
 800d140:	0023883a 	mov	r17,zero
 800d144:	003ed206 	br	800cc90 <__alt_data_end+0xfc00cc90>
 800d148:	0101ffc4 	movi	r4,2047
 800d14c:	51003b26 	beq	r10,r4,800d23c <__subdf3+0x7b8>
 800d150:	0085c83a 	sub	r2,zero,r2
 800d154:	29402034 	orhi	r5,r5,128
 800d158:	01000e04 	movi	r4,56
 800d15c:	20806216 	blt	r4,r2,800d2e8 <__subdf3+0x864>
 800d160:	010007c4 	movi	r4,31
 800d164:	20806b16 	blt	r4,r2,800d314 <__subdf3+0x890>
 800d168:	01000804 	movi	r4,32
 800d16c:	2089c83a 	sub	r4,r4,r2
 800d170:	2912983a 	sll	r9,r5,r4
 800d174:	888ed83a 	srl	r7,r17,r2
 800d178:	8908983a 	sll	r4,r17,r4
 800d17c:	2884d83a 	srl	r2,r5,r2
 800d180:	49e2b03a 	or	r17,r9,r7
 800d184:	2008c03a 	cmpne	r4,r4,zero
 800d188:	8922b03a 	or	r17,r17,r4
 800d18c:	89a3883a 	add	r17,r17,r6
 800d190:	10c5883a 	add	r2,r2,r3
 800d194:	898d803a 	cmpltu	r6,r17,r6
 800d198:	118b883a 	add	r5,r2,r6
 800d19c:	5021883a 	mov	r16,r10
 800d1a0:	003ed506 	br	800ccf8 <__alt_data_end+0xfc00ccf8>
 800d1a4:	1984b03a 	or	r2,r3,r6
 800d1a8:	103e5926 	beq	r2,zero,800cb10 <__alt_data_end+0xfc00cb10>
 800d1ac:	8989c83a 	sub	r4,r17,r6
 800d1b0:	8911803a 	cmpltu	r8,r17,r4
 800d1b4:	28c5c83a 	sub	r2,r5,r3
 800d1b8:	1205c83a 	sub	r2,r2,r8
 800d1bc:	1200202c 	andhi	r8,r2,128
 800d1c0:	403ef926 	beq	r8,zero,800cda8 <__alt_data_end+0xfc00cda8>
 800d1c4:	3463c83a 	sub	r17,r6,r17
 800d1c8:	194bc83a 	sub	r5,r3,r5
 800d1cc:	344d803a 	cmpltu	r6,r6,r17
 800d1d0:	298bc83a 	sub	r5,r5,r6
 800d1d4:	3825883a 	mov	r18,r7
 800d1d8:	003e4d06 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d1dc:	1984b03a 	or	r2,r3,r6
 800d1e0:	10002b26 	beq	r2,zero,800d290 <__subdf3+0x80c>
 800d1e4:	2808d0fa 	srli	r4,r5,3
 800d1e8:	8822d0fa 	srli	r17,r17,3
 800d1ec:	280a977a 	slli	r5,r5,29
 800d1f0:	2080022c 	andhi	r2,r4,8
 800d1f4:	2c62b03a 	or	r17,r5,r17
 800d1f8:	10000826 	beq	r2,zero,800d21c <__subdf3+0x798>
 800d1fc:	1810d0fa 	srli	r8,r3,3
 800d200:	4080022c 	andhi	r2,r8,8
 800d204:	1000051e 	bne	r2,zero,800d21c <__subdf3+0x798>
 800d208:	300cd0fa 	srli	r6,r6,3
 800d20c:	1804977a 	slli	r2,r3,29
 800d210:	4009883a 	mov	r4,r8
 800d214:	3825883a 	mov	r18,r7
 800d218:	11a2b03a 	or	r17,r2,r6
 800d21c:	880ad77a 	srli	r5,r17,29
 800d220:	200890fa 	slli	r4,r4,3
 800d224:	882290fa 	slli	r17,r17,3
 800d228:	0401ffc4 	movi	r16,2047
 800d22c:	290ab03a 	or	r5,r5,r4
 800d230:	003e3706 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d234:	0101ffc4 	movi	r4,2047
 800d238:	513fc71e 	bne	r10,r4,800d158 <__alt_data_end+0xfc00d158>
 800d23c:	180b883a 	mov	r5,r3
 800d240:	3023883a 	mov	r17,r6
 800d244:	5021883a 	mov	r16,r10
 800d248:	003e3106 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d24c:	10002d26 	beq	r2,zero,800d304 <__subdf3+0x880>
 800d250:	1984b03a 	or	r2,r3,r6
 800d254:	10000e26 	beq	r2,zero,800d290 <__subdf3+0x80c>
 800d258:	2808d0fa 	srli	r4,r5,3
 800d25c:	8822d0fa 	srli	r17,r17,3
 800d260:	280a977a 	slli	r5,r5,29
 800d264:	2080022c 	andhi	r2,r4,8
 800d268:	2c62b03a 	or	r17,r5,r17
 800d26c:	103feb26 	beq	r2,zero,800d21c <__alt_data_end+0xfc00d21c>
 800d270:	180ed0fa 	srli	r7,r3,3
 800d274:	3880022c 	andhi	r2,r7,8
 800d278:	103fe81e 	bne	r2,zero,800d21c <__alt_data_end+0xfc00d21c>
 800d27c:	300cd0fa 	srli	r6,r6,3
 800d280:	1804977a 	slli	r2,r3,29
 800d284:	3809883a 	mov	r4,r7
 800d288:	11a2b03a 	or	r17,r2,r6
 800d28c:	003fe306 	br	800d21c <__alt_data_end+0xfc00d21c>
 800d290:	0401ffc4 	movi	r16,2047
 800d294:	003e1e06 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d298:	0005883a 	mov	r2,zero
 800d29c:	003f8306 	br	800d0ac <__alt_data_end+0xfc00d0ac>
 800d2a0:	113ff804 	addi	r4,r2,-32
 800d2a4:	02000804 	movi	r8,32
 800d2a8:	2908d83a 	srl	r4,r5,r4
 800d2ac:	12002526 	beq	r2,r8,800d344 <__subdf3+0x8c0>
 800d2b0:	02001004 	movi	r8,64
 800d2b4:	4085c83a 	sub	r2,r8,r2
 800d2b8:	288a983a 	sll	r5,r5,r2
 800d2bc:	2c62b03a 	or	r17,r5,r17
 800d2c0:	8822c03a 	cmpne	r17,r17,zero
 800d2c4:	8922b03a 	or	r17,r17,r4
 800d2c8:	0005883a 	mov	r2,zero
 800d2cc:	003f2406 	br	800cf60 <__alt_data_end+0xfc00cf60>
 800d2d0:	01402034 	movhi	r5,128
 800d2d4:	0011883a 	mov	r8,zero
 800d2d8:	297fffc4 	addi	r5,r5,-1
 800d2dc:	047ffe04 	movi	r17,-8
 800d2e0:	0401ffc4 	movi	r16,2047
 800d2e4:	003e6a06 	br	800cc90 <__alt_data_end+0xfc00cc90>
 800d2e8:	2c62b03a 	or	r17,r5,r17
 800d2ec:	8822c03a 	cmpne	r17,r17,zero
 800d2f0:	0005883a 	mov	r2,zero
 800d2f4:	003fa506 	br	800d18c <__alt_data_end+0xfc00d18c>
 800d2f8:	180b883a 	mov	r5,r3
 800d2fc:	3023883a 	mov	r17,r6
 800d300:	003e0306 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d304:	180b883a 	mov	r5,r3
 800d308:	3023883a 	mov	r17,r6
 800d30c:	0401ffc4 	movi	r16,2047
 800d310:	003dff06 	br	800cb10 <__alt_data_end+0xfc00cb10>
 800d314:	113ff804 	addi	r4,r2,-32
 800d318:	01c00804 	movi	r7,32
 800d31c:	2908d83a 	srl	r4,r5,r4
 800d320:	11c00a26 	beq	r2,r7,800d34c <__subdf3+0x8c8>
 800d324:	01c01004 	movi	r7,64
 800d328:	3885c83a 	sub	r2,r7,r2
 800d32c:	288a983a 	sll	r5,r5,r2
 800d330:	2c62b03a 	or	r17,r5,r17
 800d334:	8822c03a 	cmpne	r17,r17,zero
 800d338:	8922b03a 	or	r17,r17,r4
 800d33c:	0005883a 	mov	r2,zero
 800d340:	003f9206 	br	800d18c <__alt_data_end+0xfc00d18c>
 800d344:	000b883a 	mov	r5,zero
 800d348:	003fdc06 	br	800d2bc <__alt_data_end+0xfc00d2bc>
 800d34c:	000b883a 	mov	r5,zero
 800d350:	003ff706 	br	800d330 <__alt_data_end+0xfc00d330>

0800d354 <__fixdfsi>:
 800d354:	2806d53a 	srli	r3,r5,20
 800d358:	00800434 	movhi	r2,16
 800d35c:	10bfffc4 	addi	r2,r2,-1
 800d360:	18c1ffcc 	andi	r3,r3,2047
 800d364:	0180ff84 	movi	r6,1022
 800d368:	2884703a 	and	r2,r5,r2
 800d36c:	280ad7fa 	srli	r5,r5,31
 800d370:	30c0130e 	bge	r6,r3,800d3c0 <__fixdfsi+0x6c>
 800d374:	01810744 	movi	r6,1053
 800d378:	30c00d16 	blt	r6,r3,800d3b0 <__fixdfsi+0x5c>
 800d37c:	01810cc4 	movi	r6,1075
 800d380:	30cdc83a 	sub	r6,r6,r3
 800d384:	01c007c4 	movi	r7,31
 800d388:	10800434 	orhi	r2,r2,16
 800d38c:	39800e0e 	bge	r7,r6,800d3c8 <__fixdfsi+0x74>
 800d390:	010104c4 	movi	r4,1043
 800d394:	20c7c83a 	sub	r3,r4,r3
 800d398:	10c6d83a 	srl	r3,r2,r3
 800d39c:	29403fcc 	andi	r5,r5,255
 800d3a0:	0145c83a 	sub	r2,zero,r5
 800d3a4:	1884f03a 	xor	r2,r3,r2
 800d3a8:	1145883a 	add	r2,r2,r5
 800d3ac:	f800283a 	ret
 800d3b0:	00a00034 	movhi	r2,32768
 800d3b4:	10bfffc4 	addi	r2,r2,-1
 800d3b8:	2885883a 	add	r2,r5,r2
 800d3bc:	f800283a 	ret
 800d3c0:	0005883a 	mov	r2,zero
 800d3c4:	f800283a 	ret
 800d3c8:	18fefb44 	addi	r3,r3,-1043
 800d3cc:	2188d83a 	srl	r4,r4,r6
 800d3d0:	10c6983a 	sll	r3,r2,r3
 800d3d4:	20c6b03a 	or	r3,r4,r3
 800d3d8:	003ff006 	br	800d39c <__alt_data_end+0xfc00d39c>

0800d3dc <__floatsidf>:
 800d3dc:	defffd04 	addi	sp,sp,-12
 800d3e0:	dc400115 	stw	r17,4(sp)
 800d3e4:	dfc00215 	stw	ra,8(sp)
 800d3e8:	dc000015 	stw	r16,0(sp)
 800d3ec:	2023883a 	mov	r17,r4
 800d3f0:	20001426 	beq	r4,zero,800d444 <__floatsidf+0x68>
 800d3f4:	2020d7fa 	srli	r16,r4,31
 800d3f8:	80000126 	beq	r16,zero,800d400 <__floatsidf+0x24>
 800d3fc:	0123c83a 	sub	r17,zero,r4
 800d400:	8809883a 	mov	r4,r17
 800d404:	800d5500 	call	800d550 <__clzsi2>
 800d408:	01410784 	movi	r5,1054
 800d40c:	00c00284 	movi	r3,10
 800d410:	288bc83a 	sub	r5,r5,r2
 800d414:	18801c16 	blt	r3,r2,800d488 <__floatsidf+0xac>
 800d418:	00c002c4 	movi	r3,11
 800d41c:	1887c83a 	sub	r3,r3,r2
 800d420:	88c8d83a 	srl	r4,r17,r3
 800d424:	00c00434 	movhi	r3,16
 800d428:	18ffffc4 	addi	r3,r3,-1
 800d42c:	10800544 	addi	r2,r2,21
 800d430:	20c8703a 	and	r4,r4,r3
 800d434:	8884983a 	sll	r2,r17,r2
 800d438:	28c1ffcc 	andi	r3,r5,2047
 800d43c:	800d883a 	mov	r6,r16
 800d440:	00000406 	br	800d454 <__floatsidf+0x78>
 800d444:	000d883a 	mov	r6,zero
 800d448:	0007883a 	mov	r3,zero
 800d44c:	0009883a 	mov	r4,zero
 800d450:	0005883a 	mov	r2,zero
 800d454:	180a953a 	slli	r5,r3,20
 800d458:	31803fcc 	andi	r6,r6,255
 800d45c:	00c00434 	movhi	r3,16
 800d460:	300c97fa 	slli	r6,r6,31
 800d464:	18ffffc4 	addi	r3,r3,-1
 800d468:	20c6703a 	and	r3,r4,r3
 800d46c:	1946b03a 	or	r3,r3,r5
 800d470:	1986b03a 	or	r3,r3,r6
 800d474:	dfc00217 	ldw	ra,8(sp)
 800d478:	dc400117 	ldw	r17,4(sp)
 800d47c:	dc000017 	ldw	r16,0(sp)
 800d480:	dec00304 	addi	sp,sp,12
 800d484:	f800283a 	ret
 800d488:	10fffd44 	addi	r3,r2,-11
 800d48c:	88c8983a 	sll	r4,r17,r3
 800d490:	00800434 	movhi	r2,16
 800d494:	10bfffc4 	addi	r2,r2,-1
 800d498:	2088703a 	and	r4,r4,r2
 800d49c:	28c1ffcc 	andi	r3,r5,2047
 800d4a0:	800d883a 	mov	r6,r16
 800d4a4:	0005883a 	mov	r2,zero
 800d4a8:	003fea06 	br	800d454 <__alt_data_end+0xfc00d454>

0800d4ac <__floatunsidf>:
 800d4ac:	defffe04 	addi	sp,sp,-8
 800d4b0:	dc000015 	stw	r16,0(sp)
 800d4b4:	dfc00115 	stw	ra,4(sp)
 800d4b8:	2021883a 	mov	r16,r4
 800d4bc:	20001026 	beq	r4,zero,800d500 <__floatunsidf+0x54>
 800d4c0:	800d5500 	call	800d550 <__clzsi2>
 800d4c4:	01410784 	movi	r5,1054
 800d4c8:	100d883a 	mov	r6,r2
 800d4cc:	288bc83a 	sub	r5,r5,r2
 800d4d0:	00800284 	movi	r2,10
 800d4d4:	11801616 	blt	r2,r6,800d530 <__floatunsidf+0x84>
 800d4d8:	008002c4 	movi	r2,11
 800d4dc:	1185c83a 	sub	r2,r2,r6
 800d4e0:	8084d83a 	srl	r2,r16,r2
 800d4e4:	00c00434 	movhi	r3,16
 800d4e8:	31c00544 	addi	r7,r6,21
 800d4ec:	18ffffc4 	addi	r3,r3,-1
 800d4f0:	81e0983a 	sll	r16,r16,r7
 800d4f4:	10cc703a 	and	r6,r2,r3
 800d4f8:	2941ffcc 	andi	r5,r5,2047
 800d4fc:	00000206 	br	800d508 <__floatunsidf+0x5c>
 800d500:	000b883a 	mov	r5,zero
 800d504:	000d883a 	mov	r6,zero
 800d508:	280a953a 	slli	r5,r5,20
 800d50c:	00c00434 	movhi	r3,16
 800d510:	18ffffc4 	addi	r3,r3,-1
 800d514:	30c6703a 	and	r3,r6,r3
 800d518:	8005883a 	mov	r2,r16
 800d51c:	1946b03a 	or	r3,r3,r5
 800d520:	dfc00117 	ldw	ra,4(sp)
 800d524:	dc000017 	ldw	r16,0(sp)
 800d528:	dec00204 	addi	sp,sp,8
 800d52c:	f800283a 	ret
 800d530:	31bffd44 	addi	r6,r6,-11
 800d534:	818c983a 	sll	r6,r16,r6
 800d538:	00800434 	movhi	r2,16
 800d53c:	10bfffc4 	addi	r2,r2,-1
 800d540:	2941ffcc 	andi	r5,r5,2047
 800d544:	0021883a 	mov	r16,zero
 800d548:	308c703a 	and	r6,r6,r2
 800d54c:	003fee06 	br	800d508 <__alt_data_end+0xfc00d508>

0800d550 <__clzsi2>:
 800d550:	00bfffd4 	movui	r2,65535
 800d554:	11000b36 	bltu	r2,r4,800d584 <__clzsi2+0x34>
 800d558:	00803fc4 	movi	r2,255
 800d55c:	1100122e 	bgeu	r2,r4,800d5a8 <__clzsi2+0x58>
 800d560:	00c00204 	movi	r3,8
 800d564:	01400604 	movi	r5,24
 800d568:	20c8d83a 	srl	r4,r4,r3
 800d56c:	00820074 	movhi	r2,2049
 800d570:	10819c04 	addi	r2,r2,1648
 800d574:	1109883a 	add	r4,r2,r4
 800d578:	20800003 	ldbu	r2,0(r4)
 800d57c:	2885c83a 	sub	r2,r5,r2
 800d580:	f800283a 	ret
 800d584:	00804034 	movhi	r2,256
 800d588:	10bfffc4 	addi	r2,r2,-1
 800d58c:	11000336 	bltu	r2,r4,800d59c <__clzsi2+0x4c>
 800d590:	00c00404 	movi	r3,16
 800d594:	180b883a 	mov	r5,r3
 800d598:	003ff306 	br	800d568 <__alt_data_end+0xfc00d568>
 800d59c:	00c00604 	movi	r3,24
 800d5a0:	01400204 	movi	r5,8
 800d5a4:	003ff006 	br	800d568 <__alt_data_end+0xfc00d568>
 800d5a8:	0007883a 	mov	r3,zero
 800d5ac:	01400804 	movi	r5,32
 800d5b0:	003fed06 	br	800d568 <__alt_data_end+0xfc00d568>

0800d5b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d5b4:	defffe04 	addi	sp,sp,-8
 800d5b8:	dfc00115 	stw	ra,4(sp)
 800d5bc:	df000015 	stw	fp,0(sp)
 800d5c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d5c4:	00820074 	movhi	r2,2049
 800d5c8:	1088b004 	addi	r2,r2,8896
 800d5cc:	10800017 	ldw	r2,0(r2)
 800d5d0:	10000526 	beq	r2,zero,800d5e8 <alt_get_errno+0x34>
 800d5d4:	00820074 	movhi	r2,2049
 800d5d8:	1088b004 	addi	r2,r2,8896
 800d5dc:	10800017 	ldw	r2,0(r2)
 800d5e0:	103ee83a 	callr	r2
 800d5e4:	00000206 	br	800d5f0 <alt_get_errno+0x3c>
 800d5e8:	00820074 	movhi	r2,2049
 800d5ec:	108f8404 	addi	r2,r2,15888
}
 800d5f0:	e037883a 	mov	sp,fp
 800d5f4:	dfc00117 	ldw	ra,4(sp)
 800d5f8:	df000017 	ldw	fp,0(sp)
 800d5fc:	dec00204 	addi	sp,sp,8
 800d600:	f800283a 	ret

0800d604 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d604:	defffb04 	addi	sp,sp,-20
 800d608:	dfc00415 	stw	ra,16(sp)
 800d60c:	df000315 	stw	fp,12(sp)
 800d610:	df000304 	addi	fp,sp,12
 800d614:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d618:	e0bfff17 	ldw	r2,-4(fp)
 800d61c:	10000816 	blt	r2,zero,800d640 <close+0x3c>
 800d620:	e13fff17 	ldw	r4,-4(fp)
 800d624:	01400304 	movi	r5,12
 800d628:	800ad900 	call	800ad90 <__mulsi3>
 800d62c:	1007883a 	mov	r3,r2
 800d630:	00820074 	movhi	r2,2049
 800d634:	10842204 	addi	r2,r2,4232
 800d638:	1885883a 	add	r2,r3,r2
 800d63c:	00000106 	br	800d644 <close+0x40>
 800d640:	0005883a 	mov	r2,zero
 800d644:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d648:	e0bffd17 	ldw	r2,-12(fp)
 800d64c:	10001926 	beq	r2,zero,800d6b4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d650:	e0bffd17 	ldw	r2,-12(fp)
 800d654:	10800017 	ldw	r2,0(r2)
 800d658:	10800417 	ldw	r2,16(r2)
 800d65c:	10000626 	beq	r2,zero,800d678 <close+0x74>
 800d660:	e0bffd17 	ldw	r2,-12(fp)
 800d664:	10800017 	ldw	r2,0(r2)
 800d668:	10800417 	ldw	r2,16(r2)
 800d66c:	e13ffd17 	ldw	r4,-12(fp)
 800d670:	103ee83a 	callr	r2
 800d674:	00000106 	br	800d67c <close+0x78>
 800d678:	0005883a 	mov	r2,zero
 800d67c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d680:	e13fff17 	ldw	r4,-4(fp)
 800d684:	800dd280 	call	800dd28 <alt_release_fd>
    if (rval < 0)
 800d688:	e0bffe17 	ldw	r2,-8(fp)
 800d68c:	1000070e 	bge	r2,zero,800d6ac <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800d690:	800d5b40 	call	800d5b4 <alt_get_errno>
 800d694:	1007883a 	mov	r3,r2
 800d698:	e0bffe17 	ldw	r2,-8(fp)
 800d69c:	0085c83a 	sub	r2,zero,r2
 800d6a0:	18800015 	stw	r2,0(r3)
      return -1;
 800d6a4:	00bfffc4 	movi	r2,-1
 800d6a8:	00000706 	br	800d6c8 <close+0xc4>
    }
    return 0;
 800d6ac:	0005883a 	mov	r2,zero
 800d6b0:	00000506 	br	800d6c8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d6b4:	800d5b40 	call	800d5b4 <alt_get_errno>
 800d6b8:	1007883a 	mov	r3,r2
 800d6bc:	00801444 	movi	r2,81
 800d6c0:	18800015 	stw	r2,0(r3)
    return -1;
 800d6c4:	00bfffc4 	movi	r2,-1
  }
}
 800d6c8:	e037883a 	mov	sp,fp
 800d6cc:	dfc00117 	ldw	ra,4(sp)
 800d6d0:	df000017 	ldw	fp,0(sp)
 800d6d4:	dec00204 	addi	sp,sp,8
 800d6d8:	f800283a 	ret

0800d6dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d6dc:	defffc04 	addi	sp,sp,-16
 800d6e0:	df000315 	stw	fp,12(sp)
 800d6e4:	df000304 	addi	fp,sp,12
 800d6e8:	e13ffd15 	stw	r4,-12(fp)
 800d6ec:	e17ffe15 	stw	r5,-8(fp)
 800d6f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d6f4:	e0bfff17 	ldw	r2,-4(fp)
}
 800d6f8:	e037883a 	mov	sp,fp
 800d6fc:	df000017 	ldw	fp,0(sp)
 800d700:	dec00104 	addi	sp,sp,4
 800d704:	f800283a 	ret

0800d708 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d708:	defffe04 	addi	sp,sp,-8
 800d70c:	dfc00115 	stw	ra,4(sp)
 800d710:	df000015 	stw	fp,0(sp)
 800d714:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d718:	00820074 	movhi	r2,2049
 800d71c:	1088b004 	addi	r2,r2,8896
 800d720:	10800017 	ldw	r2,0(r2)
 800d724:	10000526 	beq	r2,zero,800d73c <alt_get_errno+0x34>
 800d728:	00820074 	movhi	r2,2049
 800d72c:	1088b004 	addi	r2,r2,8896
 800d730:	10800017 	ldw	r2,0(r2)
 800d734:	103ee83a 	callr	r2
 800d738:	00000206 	br	800d744 <alt_get_errno+0x3c>
 800d73c:	00820074 	movhi	r2,2049
 800d740:	108f8404 	addi	r2,r2,15888
}
 800d744:	e037883a 	mov	sp,fp
 800d748:	dfc00117 	ldw	ra,4(sp)
 800d74c:	df000017 	ldw	fp,0(sp)
 800d750:	dec00204 	addi	sp,sp,8
 800d754:	f800283a 	ret

0800d758 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d758:	defffb04 	addi	sp,sp,-20
 800d75c:	dfc00415 	stw	ra,16(sp)
 800d760:	df000315 	stw	fp,12(sp)
 800d764:	df000304 	addi	fp,sp,12
 800d768:	e13ffe15 	stw	r4,-8(fp)
 800d76c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d770:	e0bffe17 	ldw	r2,-8(fp)
 800d774:	10000816 	blt	r2,zero,800d798 <fstat+0x40>
 800d778:	e13ffe17 	ldw	r4,-8(fp)
 800d77c:	01400304 	movi	r5,12
 800d780:	800ad900 	call	800ad90 <__mulsi3>
 800d784:	1007883a 	mov	r3,r2
 800d788:	00820074 	movhi	r2,2049
 800d78c:	10842204 	addi	r2,r2,4232
 800d790:	1885883a 	add	r2,r3,r2
 800d794:	00000106 	br	800d79c <fstat+0x44>
 800d798:	0005883a 	mov	r2,zero
 800d79c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800d7a0:	e0bffd17 	ldw	r2,-12(fp)
 800d7a4:	10001026 	beq	r2,zero,800d7e8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d7a8:	e0bffd17 	ldw	r2,-12(fp)
 800d7ac:	10800017 	ldw	r2,0(r2)
 800d7b0:	10800817 	ldw	r2,32(r2)
 800d7b4:	10000726 	beq	r2,zero,800d7d4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800d7b8:	e0bffd17 	ldw	r2,-12(fp)
 800d7bc:	10800017 	ldw	r2,0(r2)
 800d7c0:	10800817 	ldw	r2,32(r2)
 800d7c4:	e13ffd17 	ldw	r4,-12(fp)
 800d7c8:	e17fff17 	ldw	r5,-4(fp)
 800d7cc:	103ee83a 	callr	r2
 800d7d0:	00000a06 	br	800d7fc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d7d4:	e0bfff17 	ldw	r2,-4(fp)
 800d7d8:	00c80004 	movi	r3,8192
 800d7dc:	10c00115 	stw	r3,4(r2)
      return 0;
 800d7e0:	0005883a 	mov	r2,zero
 800d7e4:	00000506 	br	800d7fc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d7e8:	800d7080 	call	800d708 <alt_get_errno>
 800d7ec:	1007883a 	mov	r3,r2
 800d7f0:	00801444 	movi	r2,81
 800d7f4:	18800015 	stw	r2,0(r3)
    return -1;
 800d7f8:	00bfffc4 	movi	r2,-1
  }
}
 800d7fc:	e037883a 	mov	sp,fp
 800d800:	dfc00117 	ldw	ra,4(sp)
 800d804:	df000017 	ldw	fp,0(sp)
 800d808:	dec00204 	addi	sp,sp,8
 800d80c:	f800283a 	ret

0800d810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d810:	defffe04 	addi	sp,sp,-8
 800d814:	dfc00115 	stw	ra,4(sp)
 800d818:	df000015 	stw	fp,0(sp)
 800d81c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d820:	00820074 	movhi	r2,2049
 800d824:	1088b004 	addi	r2,r2,8896
 800d828:	10800017 	ldw	r2,0(r2)
 800d82c:	10000526 	beq	r2,zero,800d844 <alt_get_errno+0x34>
 800d830:	00820074 	movhi	r2,2049
 800d834:	1088b004 	addi	r2,r2,8896
 800d838:	10800017 	ldw	r2,0(r2)
 800d83c:	103ee83a 	callr	r2
 800d840:	00000206 	br	800d84c <alt_get_errno+0x3c>
 800d844:	00820074 	movhi	r2,2049
 800d848:	108f8404 	addi	r2,r2,15888
}
 800d84c:	e037883a 	mov	sp,fp
 800d850:	dfc00117 	ldw	ra,4(sp)
 800d854:	df000017 	ldw	fp,0(sp)
 800d858:	dec00204 	addi	sp,sp,8
 800d85c:	f800283a 	ret

0800d860 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d860:	deffed04 	addi	sp,sp,-76
 800d864:	dfc01215 	stw	ra,72(sp)
 800d868:	df001115 	stw	fp,68(sp)
 800d86c:	df001104 	addi	fp,sp,68
 800d870:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d874:	e0bfff17 	ldw	r2,-4(fp)
 800d878:	10000816 	blt	r2,zero,800d89c <isatty+0x3c>
 800d87c:	e13fff17 	ldw	r4,-4(fp)
 800d880:	01400304 	movi	r5,12
 800d884:	800ad900 	call	800ad90 <__mulsi3>
 800d888:	1007883a 	mov	r3,r2
 800d88c:	00820074 	movhi	r2,2049
 800d890:	10842204 	addi	r2,r2,4232
 800d894:	1885883a 	add	r2,r3,r2
 800d898:	00000106 	br	800d8a0 <isatty+0x40>
 800d89c:	0005883a 	mov	r2,zero
 800d8a0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800d8a4:	e0bfef17 	ldw	r2,-68(fp)
 800d8a8:	10000e26 	beq	r2,zero,800d8e4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d8ac:	e0bfef17 	ldw	r2,-68(fp)
 800d8b0:	10800017 	ldw	r2,0(r2)
 800d8b4:	10800817 	ldw	r2,32(r2)
 800d8b8:	1000021e 	bne	r2,zero,800d8c4 <isatty+0x64>
    {
      return 1;
 800d8bc:	00800044 	movi	r2,1
 800d8c0:	00000d06 	br	800d8f8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d8c4:	e0bff004 	addi	r2,fp,-64
 800d8c8:	e13fff17 	ldw	r4,-4(fp)
 800d8cc:	100b883a 	mov	r5,r2
 800d8d0:	800d7580 	call	800d758 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d8d4:	e0bff117 	ldw	r2,-60(fp)
 800d8d8:	10880020 	cmpeqi	r2,r2,8192
 800d8dc:	10803fcc 	andi	r2,r2,255
 800d8e0:	00000506 	br	800d8f8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d8e4:	800d8100 	call	800d810 <alt_get_errno>
 800d8e8:	1007883a 	mov	r3,r2
 800d8ec:	00801444 	movi	r2,81
 800d8f0:	18800015 	stw	r2,0(r3)
    return 0;
 800d8f4:	0005883a 	mov	r2,zero
  }
}
 800d8f8:	e037883a 	mov	sp,fp
 800d8fc:	dfc00117 	ldw	ra,4(sp)
 800d900:	df000017 	ldw	fp,0(sp)
 800d904:	dec00204 	addi	sp,sp,8
 800d908:	f800283a 	ret

0800d90c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800d90c:	defffc04 	addi	sp,sp,-16
 800d910:	df000315 	stw	fp,12(sp)
 800d914:	df000304 	addi	fp,sp,12
 800d918:	e13ffd15 	stw	r4,-12(fp)
 800d91c:	e17ffe15 	stw	r5,-8(fp)
 800d920:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800d924:	e0fffe17 	ldw	r3,-8(fp)
 800d928:	e0bffd17 	ldw	r2,-12(fp)
 800d92c:	18800c26 	beq	r3,r2,800d960 <alt_load_section+0x54>
  {
    while( to != end )
 800d930:	00000806 	br	800d954 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800d934:	e0bffe17 	ldw	r2,-8(fp)
 800d938:	10c00104 	addi	r3,r2,4
 800d93c:	e0fffe15 	stw	r3,-8(fp)
 800d940:	e0fffd17 	ldw	r3,-12(fp)
 800d944:	19000104 	addi	r4,r3,4
 800d948:	e13ffd15 	stw	r4,-12(fp)
 800d94c:	18c00017 	ldw	r3,0(r3)
 800d950:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800d954:	e0fffe17 	ldw	r3,-8(fp)
 800d958:	e0bfff17 	ldw	r2,-4(fp)
 800d95c:	18bff51e 	bne	r3,r2,800d934 <__alt_data_end+0xfc00d934>
    {
      *to++ = *from++;
    }
  }
}
 800d960:	e037883a 	mov	sp,fp
 800d964:	df000017 	ldw	fp,0(sp)
 800d968:	dec00104 	addi	sp,sp,4
 800d96c:	f800283a 	ret

0800d970 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800d970:	defffe04 	addi	sp,sp,-8
 800d974:	dfc00115 	stw	ra,4(sp)
 800d978:	df000015 	stw	fp,0(sp)
 800d97c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800d980:	01020074 	movhi	r4,2049
 800d984:	2108b504 	addi	r4,r4,8916
 800d988:	01420074 	movhi	r5,2049
 800d98c:	2941ef04 	addi	r5,r5,1980
 800d990:	01820074 	movhi	r6,2049
 800d994:	3188b504 	addi	r6,r6,8916
 800d998:	800d90c0 	call	800d90c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800d99c:	01020034 	movhi	r4,2048
 800d9a0:	21000804 	addi	r4,r4,32
 800d9a4:	01420034 	movhi	r5,2048
 800d9a8:	29400804 	addi	r5,r5,32
 800d9ac:	01820034 	movhi	r6,2048
 800d9b0:	31806f04 	addi	r6,r6,444
 800d9b4:	800d90c0 	call	800d90c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800d9b8:	01020074 	movhi	r4,2049
 800d9bc:	2100fd04 	addi	r4,r4,1012
 800d9c0:	01420074 	movhi	r5,2049
 800d9c4:	2940fd04 	addi	r5,r5,1012
 800d9c8:	01820074 	movhi	r6,2049
 800d9cc:	3181ef04 	addi	r6,r6,1980
 800d9d0:	800d90c0 	call	800d90c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800d9d4:	800f36c0 	call	800f36c <alt_dcache_flush_all>
  alt_icache_flush_all();
 800d9d8:	800f5c40 	call	800f5c4 <alt_icache_flush_all>
}
 800d9dc:	e037883a 	mov	sp,fp
 800d9e0:	dfc00117 	ldw	ra,4(sp)
 800d9e4:	df000017 	ldw	fp,0(sp)
 800d9e8:	dec00204 	addi	sp,sp,8
 800d9ec:	f800283a 	ret

0800d9f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d9f0:	defffe04 	addi	sp,sp,-8
 800d9f4:	dfc00115 	stw	ra,4(sp)
 800d9f8:	df000015 	stw	fp,0(sp)
 800d9fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800da00:	00820074 	movhi	r2,2049
 800da04:	1088b004 	addi	r2,r2,8896
 800da08:	10800017 	ldw	r2,0(r2)
 800da0c:	10000526 	beq	r2,zero,800da24 <alt_get_errno+0x34>
 800da10:	00820074 	movhi	r2,2049
 800da14:	1088b004 	addi	r2,r2,8896
 800da18:	10800017 	ldw	r2,0(r2)
 800da1c:	103ee83a 	callr	r2
 800da20:	00000206 	br	800da2c <alt_get_errno+0x3c>
 800da24:	00820074 	movhi	r2,2049
 800da28:	108f8404 	addi	r2,r2,15888
}
 800da2c:	e037883a 	mov	sp,fp
 800da30:	dfc00117 	ldw	ra,4(sp)
 800da34:	df000017 	ldw	fp,0(sp)
 800da38:	dec00204 	addi	sp,sp,8
 800da3c:	f800283a 	ret

0800da40 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800da40:	defff904 	addi	sp,sp,-28
 800da44:	dfc00615 	stw	ra,24(sp)
 800da48:	df000515 	stw	fp,20(sp)
 800da4c:	df000504 	addi	fp,sp,20
 800da50:	e13ffd15 	stw	r4,-12(fp)
 800da54:	e17ffe15 	stw	r5,-8(fp)
 800da58:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800da5c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800da60:	e0bffd17 	ldw	r2,-12(fp)
 800da64:	10000816 	blt	r2,zero,800da88 <lseek+0x48>
 800da68:	e13ffd17 	ldw	r4,-12(fp)
 800da6c:	01400304 	movi	r5,12
 800da70:	800ad900 	call	800ad90 <__mulsi3>
 800da74:	1007883a 	mov	r3,r2
 800da78:	00820074 	movhi	r2,2049
 800da7c:	10842204 	addi	r2,r2,4232
 800da80:	1885883a 	add	r2,r3,r2
 800da84:	00000106 	br	800da8c <lseek+0x4c>
 800da88:	0005883a 	mov	r2,zero
 800da8c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800da90:	e0bffc17 	ldw	r2,-16(fp)
 800da94:	10001026 	beq	r2,zero,800dad8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800da98:	e0bffc17 	ldw	r2,-16(fp)
 800da9c:	10800017 	ldw	r2,0(r2)
 800daa0:	10800717 	ldw	r2,28(r2)
 800daa4:	10000926 	beq	r2,zero,800dacc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800daa8:	e0bffc17 	ldw	r2,-16(fp)
 800daac:	10800017 	ldw	r2,0(r2)
 800dab0:	10800717 	ldw	r2,28(r2)
 800dab4:	e13ffc17 	ldw	r4,-16(fp)
 800dab8:	e17ffe17 	ldw	r5,-8(fp)
 800dabc:	e1bfff17 	ldw	r6,-4(fp)
 800dac0:	103ee83a 	callr	r2
 800dac4:	e0bffb15 	stw	r2,-20(fp)
 800dac8:	00000506 	br	800dae0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800dacc:	00bfde84 	movi	r2,-134
 800dad0:	e0bffb15 	stw	r2,-20(fp)
 800dad4:	00000206 	br	800dae0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800dad8:	00bfebc4 	movi	r2,-81
 800dadc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800dae0:	e0bffb17 	ldw	r2,-20(fp)
 800dae4:	1000070e 	bge	r2,zero,800db04 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800dae8:	800d9f00 	call	800d9f0 <alt_get_errno>
 800daec:	1007883a 	mov	r3,r2
 800daf0:	e0bffb17 	ldw	r2,-20(fp)
 800daf4:	0085c83a 	sub	r2,zero,r2
 800daf8:	18800015 	stw	r2,0(r3)
    rc = -1;
 800dafc:	00bfffc4 	movi	r2,-1
 800db00:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800db04:	e0bffb17 	ldw	r2,-20(fp)
}
 800db08:	e037883a 	mov	sp,fp
 800db0c:	dfc00117 	ldw	ra,4(sp)
 800db10:	df000017 	ldw	fp,0(sp)
 800db14:	dec00204 	addi	sp,sp,8
 800db18:	f800283a 	ret

0800db1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800db1c:	defffd04 	addi	sp,sp,-12
 800db20:	dfc00215 	stw	ra,8(sp)
 800db24:	df000115 	stw	fp,4(sp)
 800db28:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800db2c:	0009883a 	mov	r4,zero
 800db30:	800e0100 	call	800e010 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800db34:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800db38:	800e0440 	call	800e044 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800db3c:	01020074 	movhi	r4,2049
 800db40:	2101df04 	addi	r4,r4,1916
 800db44:	01420074 	movhi	r5,2049
 800db48:	2941df04 	addi	r5,r5,1916
 800db4c:	01820074 	movhi	r6,2049
 800db50:	3181df04 	addi	r6,r6,1916
 800db54:	800f9900 	call	800f990 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800db58:	800f47c0 	call	800f47c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800db5c:	01020074 	movhi	r4,2049
 800db60:	213d3604 	addi	r4,r4,-2856
 800db64:	80100500 	call	8010050 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800db68:	d126e017 	ldw	r4,-25728(gp)
 800db6c:	d0e6e117 	ldw	r3,-25724(gp)
 800db70:	d0a6e217 	ldw	r2,-25720(gp)
 800db74:	180b883a 	mov	r5,r3
 800db78:	100d883a 	mov	r6,r2
 800db7c:	8000b240 	call	8000b24 <main>
 800db80:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800db84:	01000044 	movi	r4,1
 800db88:	800d6040 	call	800d604 <close>
  exit (result);
 800db8c:	e13fff17 	ldw	r4,-4(fp)
 800db90:	80100640 	call	8010064 <exit>

0800db94 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800db94:	defffe04 	addi	sp,sp,-8
 800db98:	df000115 	stw	fp,4(sp)
 800db9c:	df000104 	addi	fp,sp,4
 800dba0:	e13fff15 	stw	r4,-4(fp)
}
 800dba4:	e037883a 	mov	sp,fp
 800dba8:	df000017 	ldw	fp,0(sp)
 800dbac:	dec00104 	addi	sp,sp,4
 800dbb0:	f800283a 	ret

0800dbb4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800dbb4:	defffe04 	addi	sp,sp,-8
 800dbb8:	df000115 	stw	fp,4(sp)
 800dbbc:	df000104 	addi	fp,sp,4
 800dbc0:	e13fff15 	stw	r4,-4(fp)
}
 800dbc4:	e037883a 	mov	sp,fp
 800dbc8:	df000017 	ldw	fp,0(sp)
 800dbcc:	dec00104 	addi	sp,sp,4
 800dbd0:	f800283a 	ret

0800dbd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dbd4:	defffe04 	addi	sp,sp,-8
 800dbd8:	dfc00115 	stw	ra,4(sp)
 800dbdc:	df000015 	stw	fp,0(sp)
 800dbe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800dbe4:	00820074 	movhi	r2,2049
 800dbe8:	1088b004 	addi	r2,r2,8896
 800dbec:	10800017 	ldw	r2,0(r2)
 800dbf0:	10000526 	beq	r2,zero,800dc08 <alt_get_errno+0x34>
 800dbf4:	00820074 	movhi	r2,2049
 800dbf8:	1088b004 	addi	r2,r2,8896
 800dbfc:	10800017 	ldw	r2,0(r2)
 800dc00:	103ee83a 	callr	r2
 800dc04:	00000206 	br	800dc10 <alt_get_errno+0x3c>
 800dc08:	00820074 	movhi	r2,2049
 800dc0c:	108f8404 	addi	r2,r2,15888
}
 800dc10:	e037883a 	mov	sp,fp
 800dc14:	dfc00117 	ldw	ra,4(sp)
 800dc18:	df000017 	ldw	fp,0(sp)
 800dc1c:	dec00204 	addi	sp,sp,8
 800dc20:	f800283a 	ret

0800dc24 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800dc24:	defff904 	addi	sp,sp,-28
 800dc28:	dfc00615 	stw	ra,24(sp)
 800dc2c:	df000515 	stw	fp,20(sp)
 800dc30:	df000504 	addi	fp,sp,20
 800dc34:	e13ffd15 	stw	r4,-12(fp)
 800dc38:	e17ffe15 	stw	r5,-8(fp)
 800dc3c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800dc40:	e0bffd17 	ldw	r2,-12(fp)
 800dc44:	10000816 	blt	r2,zero,800dc68 <read+0x44>
 800dc48:	e13ffd17 	ldw	r4,-12(fp)
 800dc4c:	01400304 	movi	r5,12
 800dc50:	800ad900 	call	800ad90 <__mulsi3>
 800dc54:	1007883a 	mov	r3,r2
 800dc58:	00820074 	movhi	r2,2049
 800dc5c:	10842204 	addi	r2,r2,4232
 800dc60:	1885883a 	add	r2,r3,r2
 800dc64:	00000106 	br	800dc6c <read+0x48>
 800dc68:	0005883a 	mov	r2,zero
 800dc6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800dc70:	e0bffb17 	ldw	r2,-20(fp)
 800dc74:	10002226 	beq	r2,zero,800dd00 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800dc78:	e0bffb17 	ldw	r2,-20(fp)
 800dc7c:	10800217 	ldw	r2,8(r2)
 800dc80:	108000cc 	andi	r2,r2,3
 800dc84:	10800060 	cmpeqi	r2,r2,1
 800dc88:	1000181e 	bne	r2,zero,800dcec <read+0xc8>
        (fd->dev->read))
 800dc8c:	e0bffb17 	ldw	r2,-20(fp)
 800dc90:	10800017 	ldw	r2,0(r2)
 800dc94:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800dc98:	10001426 	beq	r2,zero,800dcec <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800dc9c:	e0bffb17 	ldw	r2,-20(fp)
 800dca0:	10800017 	ldw	r2,0(r2)
 800dca4:	10800517 	ldw	r2,20(r2)
 800dca8:	e0ffff17 	ldw	r3,-4(fp)
 800dcac:	e13ffb17 	ldw	r4,-20(fp)
 800dcb0:	e17ffe17 	ldw	r5,-8(fp)
 800dcb4:	180d883a 	mov	r6,r3
 800dcb8:	103ee83a 	callr	r2
 800dcbc:	e0bffc15 	stw	r2,-16(fp)
 800dcc0:	e0bffc17 	ldw	r2,-16(fp)
 800dcc4:	1000070e 	bge	r2,zero,800dce4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800dcc8:	800dbd40 	call	800dbd4 <alt_get_errno>
 800dccc:	1007883a 	mov	r3,r2
 800dcd0:	e0bffc17 	ldw	r2,-16(fp)
 800dcd4:	0085c83a 	sub	r2,zero,r2
 800dcd8:	18800015 	stw	r2,0(r3)
          return -1;
 800dcdc:	00bfffc4 	movi	r2,-1
 800dce0:	00000c06 	br	800dd14 <read+0xf0>
        }
        return rval;
 800dce4:	e0bffc17 	ldw	r2,-16(fp)
 800dce8:	00000a06 	br	800dd14 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800dcec:	800dbd40 	call	800dbd4 <alt_get_errno>
 800dcf0:	1007883a 	mov	r3,r2
 800dcf4:	00800344 	movi	r2,13
 800dcf8:	18800015 	stw	r2,0(r3)
 800dcfc:	00000406 	br	800dd10 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800dd00:	800dbd40 	call	800dbd4 <alt_get_errno>
 800dd04:	1007883a 	mov	r3,r2
 800dd08:	00801444 	movi	r2,81
 800dd0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800dd10:	00bfffc4 	movi	r2,-1
}
 800dd14:	e037883a 	mov	sp,fp
 800dd18:	dfc00117 	ldw	ra,4(sp)
 800dd1c:	df000017 	ldw	fp,0(sp)
 800dd20:	dec00204 	addi	sp,sp,8
 800dd24:	f800283a 	ret

0800dd28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800dd28:	defffc04 	addi	sp,sp,-16
 800dd2c:	dfc00315 	stw	ra,12(sp)
 800dd30:	df000215 	stw	fp,8(sp)
 800dd34:	dc000115 	stw	r16,4(sp)
 800dd38:	df000204 	addi	fp,sp,8
 800dd3c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800dd40:	e0bffe17 	ldw	r2,-8(fp)
 800dd44:	108000d0 	cmplti	r2,r2,3
 800dd48:	1000111e 	bne	r2,zero,800dd90 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800dd4c:	04020074 	movhi	r16,2049
 800dd50:	84042204 	addi	r16,r16,4232
 800dd54:	e0bffe17 	ldw	r2,-8(fp)
 800dd58:	1009883a 	mov	r4,r2
 800dd5c:	01400304 	movi	r5,12
 800dd60:	800ad900 	call	800ad90 <__mulsi3>
 800dd64:	8085883a 	add	r2,r16,r2
 800dd68:	10800204 	addi	r2,r2,8
 800dd6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800dd70:	04020074 	movhi	r16,2049
 800dd74:	84042204 	addi	r16,r16,4232
 800dd78:	e0bffe17 	ldw	r2,-8(fp)
 800dd7c:	1009883a 	mov	r4,r2
 800dd80:	01400304 	movi	r5,12
 800dd84:	800ad900 	call	800ad90 <__mulsi3>
 800dd88:	8085883a 	add	r2,r16,r2
 800dd8c:	10000015 	stw	zero,0(r2)
  }
}
 800dd90:	e6ffff04 	addi	sp,fp,-4
 800dd94:	dfc00217 	ldw	ra,8(sp)
 800dd98:	df000117 	ldw	fp,4(sp)
 800dd9c:	dc000017 	ldw	r16,0(sp)
 800dda0:	dec00304 	addi	sp,sp,12
 800dda4:	f800283a 	ret

0800dda8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800dda8:	defff904 	addi	sp,sp,-28
 800ddac:	df000615 	stw	fp,24(sp)
 800ddb0:	df000604 	addi	fp,sp,24
 800ddb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ddb8:	0005303a 	rdctl	r2,status
 800ddbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ddc0:	e0fffc17 	ldw	r3,-16(fp)
 800ddc4:	00bfff84 	movi	r2,-2
 800ddc8:	1884703a 	and	r2,r3,r2
 800ddcc:	1001703a 	wrctl	status,r2
  
  return context;
 800ddd0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800ddd4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800ddd8:	d0a00c17 	ldw	r2,-32720(gp)
 800dddc:	10c000c4 	addi	r3,r2,3
 800dde0:	00bfff04 	movi	r2,-4
 800dde4:	1884703a 	and	r2,r3,r2
 800dde8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800ddec:	d0e00c17 	ldw	r3,-32720(gp)
 800ddf0:	e0bfff17 	ldw	r2,-4(fp)
 800ddf4:	1887883a 	add	r3,r3,r2
 800ddf8:	00830034 	movhi	r2,3072
 800ddfc:	10800004 	addi	r2,r2,0
 800de00:	10c0062e 	bgeu	r2,r3,800de1c <sbrk+0x74>
 800de04:	e0bffa17 	ldw	r2,-24(fp)
 800de08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800de0c:	e0bffd17 	ldw	r2,-12(fp)
 800de10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800de14:	00bfffc4 	movi	r2,-1
 800de18:	00000b06 	br	800de48 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800de1c:	d0a00c17 	ldw	r2,-32720(gp)
 800de20:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800de24:	d0e00c17 	ldw	r3,-32720(gp)
 800de28:	e0bfff17 	ldw	r2,-4(fp)
 800de2c:	1885883a 	add	r2,r3,r2
 800de30:	d0a00c15 	stw	r2,-32720(gp)
 800de34:	e0bffa17 	ldw	r2,-24(fp)
 800de38:	e0bffe15 	stw	r2,-8(fp)
 800de3c:	e0bffe17 	ldw	r2,-8(fp)
 800de40:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800de44:	e0bffb17 	ldw	r2,-20(fp)
} 
 800de48:	e037883a 	mov	sp,fp
 800de4c:	df000017 	ldw	fp,0(sp)
 800de50:	dec00104 	addi	sp,sp,4
 800de54:	f800283a 	ret

0800de58 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800de58:	defffd04 	addi	sp,sp,-12
 800de5c:	dfc00215 	stw	ra,8(sp)
 800de60:	df000115 	stw	fp,4(sp)
 800de64:	df000104 	addi	fp,sp,4
 800de68:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800de6c:	e13fff17 	ldw	r4,-4(fp)
 800de70:	800f2140 	call	800f214 <alt_busy_sleep>
}
 800de74:	e037883a 	mov	sp,fp
 800de78:	dfc00117 	ldw	ra,4(sp)
 800de7c:	df000017 	ldw	fp,0(sp)
 800de80:	dec00204 	addi	sp,sp,8
 800de84:	f800283a 	ret

0800de88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800de88:	defffe04 	addi	sp,sp,-8
 800de8c:	dfc00115 	stw	ra,4(sp)
 800de90:	df000015 	stw	fp,0(sp)
 800de94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800de98:	00820074 	movhi	r2,2049
 800de9c:	1088b004 	addi	r2,r2,8896
 800dea0:	10800017 	ldw	r2,0(r2)
 800dea4:	10000526 	beq	r2,zero,800debc <alt_get_errno+0x34>
 800dea8:	00820074 	movhi	r2,2049
 800deac:	1088b004 	addi	r2,r2,8896
 800deb0:	10800017 	ldw	r2,0(r2)
 800deb4:	103ee83a 	callr	r2
 800deb8:	00000206 	br	800dec4 <alt_get_errno+0x3c>
 800debc:	00820074 	movhi	r2,2049
 800dec0:	108f8404 	addi	r2,r2,15888
}
 800dec4:	e037883a 	mov	sp,fp
 800dec8:	dfc00117 	ldw	ra,4(sp)
 800decc:	df000017 	ldw	fp,0(sp)
 800ded0:	dec00204 	addi	sp,sp,8
 800ded4:	f800283a 	ret

0800ded8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800ded8:	defff904 	addi	sp,sp,-28
 800dedc:	dfc00615 	stw	ra,24(sp)
 800dee0:	df000515 	stw	fp,20(sp)
 800dee4:	df000504 	addi	fp,sp,20
 800dee8:	e13ffd15 	stw	r4,-12(fp)
 800deec:	e17ffe15 	stw	r5,-8(fp)
 800def0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800def4:	e0bffd17 	ldw	r2,-12(fp)
 800def8:	10000816 	blt	r2,zero,800df1c <write+0x44>
 800defc:	e13ffd17 	ldw	r4,-12(fp)
 800df00:	01400304 	movi	r5,12
 800df04:	800ad900 	call	800ad90 <__mulsi3>
 800df08:	1007883a 	mov	r3,r2
 800df0c:	00820074 	movhi	r2,2049
 800df10:	10842204 	addi	r2,r2,4232
 800df14:	1885883a 	add	r2,r3,r2
 800df18:	00000106 	br	800df20 <write+0x48>
 800df1c:	0005883a 	mov	r2,zero
 800df20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800df24:	e0bffb17 	ldw	r2,-20(fp)
 800df28:	10002126 	beq	r2,zero,800dfb0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800df2c:	e0bffb17 	ldw	r2,-20(fp)
 800df30:	10800217 	ldw	r2,8(r2)
 800df34:	108000cc 	andi	r2,r2,3
 800df38:	10001826 	beq	r2,zero,800df9c <write+0xc4>
 800df3c:	e0bffb17 	ldw	r2,-20(fp)
 800df40:	10800017 	ldw	r2,0(r2)
 800df44:	10800617 	ldw	r2,24(r2)
 800df48:	10001426 	beq	r2,zero,800df9c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800df4c:	e0bffb17 	ldw	r2,-20(fp)
 800df50:	10800017 	ldw	r2,0(r2)
 800df54:	10800617 	ldw	r2,24(r2)
 800df58:	e0ffff17 	ldw	r3,-4(fp)
 800df5c:	e13ffb17 	ldw	r4,-20(fp)
 800df60:	e17ffe17 	ldw	r5,-8(fp)
 800df64:	180d883a 	mov	r6,r3
 800df68:	103ee83a 	callr	r2
 800df6c:	e0bffc15 	stw	r2,-16(fp)
 800df70:	e0bffc17 	ldw	r2,-16(fp)
 800df74:	1000070e 	bge	r2,zero,800df94 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800df78:	800de880 	call	800de88 <alt_get_errno>
 800df7c:	1007883a 	mov	r3,r2
 800df80:	e0bffc17 	ldw	r2,-16(fp)
 800df84:	0085c83a 	sub	r2,zero,r2
 800df88:	18800015 	stw	r2,0(r3)
        return -1;
 800df8c:	00bfffc4 	movi	r2,-1
 800df90:	00000c06 	br	800dfc4 <write+0xec>
      }
      return rval;
 800df94:	e0bffc17 	ldw	r2,-16(fp)
 800df98:	00000a06 	br	800dfc4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800df9c:	800de880 	call	800de88 <alt_get_errno>
 800dfa0:	1007883a 	mov	r3,r2
 800dfa4:	00800344 	movi	r2,13
 800dfa8:	18800015 	stw	r2,0(r3)
 800dfac:	00000406 	br	800dfc0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800dfb0:	800de880 	call	800de88 <alt_get_errno>
 800dfb4:	1007883a 	mov	r3,r2
 800dfb8:	00801444 	movi	r2,81
 800dfbc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800dfc0:	00bfffc4 	movi	r2,-1
}
 800dfc4:	e037883a 	mov	sp,fp
 800dfc8:	dfc00117 	ldw	ra,4(sp)
 800dfcc:	df000017 	ldw	fp,0(sp)
 800dfd0:	dec00204 	addi	sp,sp,8
 800dfd4:	f800283a 	ret

0800dfd8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800dfd8:	defffd04 	addi	sp,sp,-12
 800dfdc:	dfc00215 	stw	ra,8(sp)
 800dfe0:	df000115 	stw	fp,4(sp)
 800dfe4:	df000104 	addi	fp,sp,4
 800dfe8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800dfec:	e13fff17 	ldw	r4,-4(fp)
 800dff0:	01420074 	movhi	r5,2049
 800dff4:	2948ad04 	addi	r5,r5,8884
 800dff8:	800f3d80 	call	800f3d8 <alt_dev_llist_insert>
}
 800dffc:	e037883a 	mov	sp,fp
 800e000:	dfc00117 	ldw	ra,4(sp)
 800e004:	df000017 	ldw	fp,0(sp)
 800e008:	dec00204 	addi	sp,sp,8
 800e00c:	f800283a 	ret

0800e010 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800e010:	defffd04 	addi	sp,sp,-12
 800e014:	dfc00215 	stw	ra,8(sp)
 800e018:	df000115 	stw	fp,4(sp)
 800e01c:	df000104 	addi	fp,sp,4
 800e020:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800e024:	800fe480 	call	800fe48 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800e028:	00800044 	movi	r2,1
 800e02c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800e030:	e037883a 	mov	sp,fp
 800e034:	dfc00117 	ldw	ra,4(sp)
 800e038:	df000017 	ldw	fp,0(sp)
 800e03c:	dec00204 	addi	sp,sp,8
 800e040:	f800283a 	ret

0800e044 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800e044:	defffe04 	addi	sp,sp,-8
 800e048:	dfc00115 	stw	ra,4(sp)
 800e04c:	df000015 	stw	fp,0(sp)
 800e050:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800e054:	01082004 	movi	r4,8320
 800e058:	000b883a 	mov	r5,zero
 800e05c:	01800104 	movi	r6,4
 800e060:	01c0fa04 	movi	r7,1000
 800e064:	800eb740 	call	800eb74 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800e068:	01020074 	movhi	r4,2049
 800e06c:	21048c04 	addi	r4,r4,4656
 800e070:	000b883a 	mov	r5,zero
 800e074:	000d883a 	mov	r6,zero
 800e078:	800e2180 	call	800e218 <altera_avalon_jtag_uart_init>
 800e07c:	01020074 	movhi	r4,2049
 800e080:	21048204 	addi	r4,r4,4616
 800e084:	800dfd80 	call	800dfd8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 800e088:	01020074 	movhi	r4,2049
 800e08c:	21089a04 	addi	r4,r4,8808
 800e090:	800ecac0 	call	800ecac <alt_up_character_lcd_init>
 800e094:	01020074 	movhi	r4,2049
 800e098:	21089a04 	addi	r4,r4,8808
 800e09c:	800dfd80 	call	800dfd8 <alt_dev_reg>
}
 800e0a0:	e037883a 	mov	sp,fp
 800e0a4:	dfc00117 	ldw	ra,4(sp)
 800e0a8:	df000017 	ldw	fp,0(sp)
 800e0ac:	dec00204 	addi	sp,sp,8
 800e0b0:	f800283a 	ret

0800e0b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800e0b4:	defffa04 	addi	sp,sp,-24
 800e0b8:	dfc00515 	stw	ra,20(sp)
 800e0bc:	df000415 	stw	fp,16(sp)
 800e0c0:	df000404 	addi	fp,sp,16
 800e0c4:	e13ffd15 	stw	r4,-12(fp)
 800e0c8:	e17ffe15 	stw	r5,-8(fp)
 800e0cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e0d0:	e0bffd17 	ldw	r2,-12(fp)
 800e0d4:	10800017 	ldw	r2,0(r2)
 800e0d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800e0dc:	e0bffc17 	ldw	r2,-16(fp)
 800e0e0:	10c00a04 	addi	r3,r2,40
 800e0e4:	e0bffd17 	ldw	r2,-12(fp)
 800e0e8:	10800217 	ldw	r2,8(r2)
 800e0ec:	1809883a 	mov	r4,r3
 800e0f0:	e17ffe17 	ldw	r5,-8(fp)
 800e0f4:	e1bfff17 	ldw	r6,-4(fp)
 800e0f8:	100f883a 	mov	r7,r2
 800e0fc:	800e6dc0 	call	800e6dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800e100:	e037883a 	mov	sp,fp
 800e104:	dfc00117 	ldw	ra,4(sp)
 800e108:	df000017 	ldw	fp,0(sp)
 800e10c:	dec00204 	addi	sp,sp,8
 800e110:	f800283a 	ret

0800e114 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800e114:	defffa04 	addi	sp,sp,-24
 800e118:	dfc00515 	stw	ra,20(sp)
 800e11c:	df000415 	stw	fp,16(sp)
 800e120:	df000404 	addi	fp,sp,16
 800e124:	e13ffd15 	stw	r4,-12(fp)
 800e128:	e17ffe15 	stw	r5,-8(fp)
 800e12c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e130:	e0bffd17 	ldw	r2,-12(fp)
 800e134:	10800017 	ldw	r2,0(r2)
 800e138:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800e13c:	e0bffc17 	ldw	r2,-16(fp)
 800e140:	10c00a04 	addi	r3,r2,40
 800e144:	e0bffd17 	ldw	r2,-12(fp)
 800e148:	10800217 	ldw	r2,8(r2)
 800e14c:	1809883a 	mov	r4,r3
 800e150:	e17ffe17 	ldw	r5,-8(fp)
 800e154:	e1bfff17 	ldw	r6,-4(fp)
 800e158:	100f883a 	mov	r7,r2
 800e15c:	800e8e80 	call	800e8e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800e160:	e037883a 	mov	sp,fp
 800e164:	dfc00117 	ldw	ra,4(sp)
 800e168:	df000017 	ldw	fp,0(sp)
 800e16c:	dec00204 	addi	sp,sp,8
 800e170:	f800283a 	ret

0800e174 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800e174:	defffc04 	addi	sp,sp,-16
 800e178:	dfc00315 	stw	ra,12(sp)
 800e17c:	df000215 	stw	fp,8(sp)
 800e180:	df000204 	addi	fp,sp,8
 800e184:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e188:	e0bfff17 	ldw	r2,-4(fp)
 800e18c:	10800017 	ldw	r2,0(r2)
 800e190:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800e194:	e0bffe17 	ldw	r2,-8(fp)
 800e198:	10c00a04 	addi	r3,r2,40
 800e19c:	e0bfff17 	ldw	r2,-4(fp)
 800e1a0:	10800217 	ldw	r2,8(r2)
 800e1a4:	1809883a 	mov	r4,r3
 800e1a8:	100b883a 	mov	r5,r2
 800e1ac:	800e5880 	call	800e588 <altera_avalon_jtag_uart_close>
}
 800e1b0:	e037883a 	mov	sp,fp
 800e1b4:	dfc00117 	ldw	ra,4(sp)
 800e1b8:	df000017 	ldw	fp,0(sp)
 800e1bc:	dec00204 	addi	sp,sp,8
 800e1c0:	f800283a 	ret

0800e1c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800e1c4:	defffa04 	addi	sp,sp,-24
 800e1c8:	dfc00515 	stw	ra,20(sp)
 800e1cc:	df000415 	stw	fp,16(sp)
 800e1d0:	df000404 	addi	fp,sp,16
 800e1d4:	e13ffd15 	stw	r4,-12(fp)
 800e1d8:	e17ffe15 	stw	r5,-8(fp)
 800e1dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800e1e0:	e0bffd17 	ldw	r2,-12(fp)
 800e1e4:	10800017 	ldw	r2,0(r2)
 800e1e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800e1ec:	e0bffc17 	ldw	r2,-16(fp)
 800e1f0:	10800a04 	addi	r2,r2,40
 800e1f4:	1009883a 	mov	r4,r2
 800e1f8:	e17ffe17 	ldw	r5,-8(fp)
 800e1fc:	e1bfff17 	ldw	r6,-4(fp)
 800e200:	800e5f00 	call	800e5f0 <altera_avalon_jtag_uart_ioctl>
}
 800e204:	e037883a 	mov	sp,fp
 800e208:	dfc00117 	ldw	ra,4(sp)
 800e20c:	df000017 	ldw	fp,0(sp)
 800e210:	dec00204 	addi	sp,sp,8
 800e214:	f800283a 	ret

0800e218 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800e218:	defffa04 	addi	sp,sp,-24
 800e21c:	dfc00515 	stw	ra,20(sp)
 800e220:	df000415 	stw	fp,16(sp)
 800e224:	df000404 	addi	fp,sp,16
 800e228:	e13ffd15 	stw	r4,-12(fp)
 800e22c:	e17ffe15 	stw	r5,-8(fp)
 800e230:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e234:	e0bffd17 	ldw	r2,-12(fp)
 800e238:	00c00044 	movi	r3,1
 800e23c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800e240:	e0bffd17 	ldw	r2,-12(fp)
 800e244:	10800017 	ldw	r2,0(r2)
 800e248:	10800104 	addi	r2,r2,4
 800e24c:	1007883a 	mov	r3,r2
 800e250:	e0bffd17 	ldw	r2,-12(fp)
 800e254:	10800817 	ldw	r2,32(r2)
 800e258:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800e25c:	e0fffe17 	ldw	r3,-8(fp)
 800e260:	e0bfff17 	ldw	r2,-4(fp)
 800e264:	d8000015 	stw	zero,0(sp)
 800e268:	1809883a 	mov	r4,r3
 800e26c:	100b883a 	mov	r5,r2
 800e270:	01820074 	movhi	r6,2049
 800e274:	31b8b704 	addi	r6,r6,-7460
 800e278:	e1fffd17 	ldw	r7,-12(fp)
 800e27c:	800f5e00 	call	800f5e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800e280:	e0bffd17 	ldw	r2,-12(fp)
 800e284:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800e288:	e0bffd17 	ldw	r2,-12(fp)
 800e28c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800e290:	00820074 	movhi	r2,2049
 800e294:	108f8904 	addi	r2,r2,15908
 800e298:	10800017 	ldw	r2,0(r2)
 800e29c:	1809883a 	mov	r4,r3
 800e2a0:	100b883a 	mov	r5,r2
 800e2a4:	01820074 	movhi	r6,2049
 800e2a8:	31b93804 	addi	r6,r6,-6944
 800e2ac:	e1fffd17 	ldw	r7,-12(fp)
 800e2b0:	800f0d40 	call	800f0d4 <alt_alarm_start>
 800e2b4:	1000040e 	bge	r2,zero,800e2c8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800e2b8:	e0fffd17 	ldw	r3,-12(fp)
 800e2bc:	00a00034 	movhi	r2,32768
 800e2c0:	10bfffc4 	addi	r2,r2,-1
 800e2c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800e2c8:	e037883a 	mov	sp,fp
 800e2cc:	dfc00117 	ldw	ra,4(sp)
 800e2d0:	df000017 	ldw	fp,0(sp)
 800e2d4:	dec00204 	addi	sp,sp,8
 800e2d8:	f800283a 	ret

0800e2dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800e2dc:	defff804 	addi	sp,sp,-32
 800e2e0:	df000715 	stw	fp,28(sp)
 800e2e4:	df000704 	addi	fp,sp,28
 800e2e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800e2ec:	e0bfff17 	ldw	r2,-4(fp)
 800e2f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800e2f4:	e0bffb17 	ldw	r2,-20(fp)
 800e2f8:	10800017 	ldw	r2,0(r2)
 800e2fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e300:	e0bffc17 	ldw	r2,-16(fp)
 800e304:	10800104 	addi	r2,r2,4
 800e308:	10800037 	ldwio	r2,0(r2)
 800e30c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800e310:	e0bffd17 	ldw	r2,-12(fp)
 800e314:	1080c00c 	andi	r2,r2,768
 800e318:	1000011e 	bne	r2,zero,800e320 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800e31c:	00006c06 	br	800e4d0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800e320:	e0bffd17 	ldw	r2,-12(fp)
 800e324:	1080400c 	andi	r2,r2,256
 800e328:	10003426 	beq	r2,zero,800e3fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800e32c:	00800074 	movhi	r2,1
 800e330:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e334:	e0bffb17 	ldw	r2,-20(fp)
 800e338:	10800a17 	ldw	r2,40(r2)
 800e33c:	10800044 	addi	r2,r2,1
 800e340:	1081ffcc 	andi	r2,r2,2047
 800e344:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800e348:	e0bffb17 	ldw	r2,-20(fp)
 800e34c:	10c00b17 	ldw	r3,44(r2)
 800e350:	e0bffe17 	ldw	r2,-8(fp)
 800e354:	1880011e 	bne	r3,r2,800e35c <altera_avalon_jtag_uart_irq+0x80>
          break;
 800e358:	00001606 	br	800e3b4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800e35c:	e0bffc17 	ldw	r2,-16(fp)
 800e360:	10800037 	ldwio	r2,0(r2)
 800e364:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800e368:	e0bff917 	ldw	r2,-28(fp)
 800e36c:	10a0000c 	andi	r2,r2,32768
 800e370:	1000011e 	bne	r2,zero,800e378 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800e374:	00000f06 	br	800e3b4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800e378:	e0bffb17 	ldw	r2,-20(fp)
 800e37c:	10800a17 	ldw	r2,40(r2)
 800e380:	e0fff917 	ldw	r3,-28(fp)
 800e384:	1809883a 	mov	r4,r3
 800e388:	e0fffb17 	ldw	r3,-20(fp)
 800e38c:	1885883a 	add	r2,r3,r2
 800e390:	10800e04 	addi	r2,r2,56
 800e394:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e398:	e0bffb17 	ldw	r2,-20(fp)
 800e39c:	10800a17 	ldw	r2,40(r2)
 800e3a0:	10800044 	addi	r2,r2,1
 800e3a4:	10c1ffcc 	andi	r3,r2,2047
 800e3a8:	e0bffb17 	ldw	r2,-20(fp)
 800e3ac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800e3b0:	003fe006 	br	800e334 <__alt_data_end+0xfc00e334>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800e3b4:	e0bff917 	ldw	r2,-28(fp)
 800e3b8:	10bfffec 	andhi	r2,r2,65535
 800e3bc:	10000f26 	beq	r2,zero,800e3fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e3c0:	e0bffb17 	ldw	r2,-20(fp)
 800e3c4:	10c00817 	ldw	r3,32(r2)
 800e3c8:	00bfff84 	movi	r2,-2
 800e3cc:	1886703a 	and	r3,r3,r2
 800e3d0:	e0bffb17 	ldw	r2,-20(fp)
 800e3d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800e3d8:	e0bffc17 	ldw	r2,-16(fp)
 800e3dc:	10800104 	addi	r2,r2,4
 800e3e0:	1007883a 	mov	r3,r2
 800e3e4:	e0bffb17 	ldw	r2,-20(fp)
 800e3e8:	10800817 	ldw	r2,32(r2)
 800e3ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e3f0:	e0bffc17 	ldw	r2,-16(fp)
 800e3f4:	10800104 	addi	r2,r2,4
 800e3f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800e3fc:	e0bffd17 	ldw	r2,-12(fp)
 800e400:	1080800c 	andi	r2,r2,512
 800e404:	10003126 	beq	r2,zero,800e4cc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800e408:	e0bffd17 	ldw	r2,-12(fp)
 800e40c:	1004d43a 	srli	r2,r2,16
 800e410:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800e414:	00001406 	br	800e468 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800e418:	e0bffc17 	ldw	r2,-16(fp)
 800e41c:	e0fffb17 	ldw	r3,-20(fp)
 800e420:	18c00d17 	ldw	r3,52(r3)
 800e424:	e13ffb17 	ldw	r4,-20(fp)
 800e428:	20c7883a 	add	r3,r4,r3
 800e42c:	18c20e04 	addi	r3,r3,2104
 800e430:	18c00003 	ldbu	r3,0(r3)
 800e434:	18c03fcc 	andi	r3,r3,255
 800e438:	18c0201c 	xori	r3,r3,128
 800e43c:	18ffe004 	addi	r3,r3,-128
 800e440:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e444:	e0bffb17 	ldw	r2,-20(fp)
 800e448:	10800d17 	ldw	r2,52(r2)
 800e44c:	10800044 	addi	r2,r2,1
 800e450:	10c1ffcc 	andi	r3,r2,2047
 800e454:	e0bffb17 	ldw	r2,-20(fp)
 800e458:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800e45c:	e0bffa17 	ldw	r2,-24(fp)
 800e460:	10bfffc4 	addi	r2,r2,-1
 800e464:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800e468:	e0bffa17 	ldw	r2,-24(fp)
 800e46c:	10000526 	beq	r2,zero,800e484 <altera_avalon_jtag_uart_irq+0x1a8>
 800e470:	e0bffb17 	ldw	r2,-20(fp)
 800e474:	10c00d17 	ldw	r3,52(r2)
 800e478:	e0bffb17 	ldw	r2,-20(fp)
 800e47c:	10800c17 	ldw	r2,48(r2)
 800e480:	18bfe51e 	bne	r3,r2,800e418 <__alt_data_end+0xfc00e418>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800e484:	e0bffa17 	ldw	r2,-24(fp)
 800e488:	10001026 	beq	r2,zero,800e4cc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e48c:	e0bffb17 	ldw	r2,-20(fp)
 800e490:	10c00817 	ldw	r3,32(r2)
 800e494:	00bfff44 	movi	r2,-3
 800e498:	1886703a 	and	r3,r3,r2
 800e49c:	e0bffb17 	ldw	r2,-20(fp)
 800e4a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e4a4:	e0bffb17 	ldw	r2,-20(fp)
 800e4a8:	10800017 	ldw	r2,0(r2)
 800e4ac:	10800104 	addi	r2,r2,4
 800e4b0:	1007883a 	mov	r3,r2
 800e4b4:	e0bffb17 	ldw	r2,-20(fp)
 800e4b8:	10800817 	ldw	r2,32(r2)
 800e4bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e4c0:	e0bffc17 	ldw	r2,-16(fp)
 800e4c4:	10800104 	addi	r2,r2,4
 800e4c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800e4cc:	003f8c06 	br	800e300 <__alt_data_end+0xfc00e300>
}
 800e4d0:	e037883a 	mov	sp,fp
 800e4d4:	df000017 	ldw	fp,0(sp)
 800e4d8:	dec00104 	addi	sp,sp,4
 800e4dc:	f800283a 	ret

0800e4e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800e4e0:	defff804 	addi	sp,sp,-32
 800e4e4:	df000715 	stw	fp,28(sp)
 800e4e8:	df000704 	addi	fp,sp,28
 800e4ec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800e4f0:	e0bffb17 	ldw	r2,-20(fp)
 800e4f4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800e4f8:	e0bff917 	ldw	r2,-28(fp)
 800e4fc:	10800017 	ldw	r2,0(r2)
 800e500:	10800104 	addi	r2,r2,4
 800e504:	10800037 	ldwio	r2,0(r2)
 800e508:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800e50c:	e0bffa17 	ldw	r2,-24(fp)
 800e510:	1081000c 	andi	r2,r2,1024
 800e514:	10000b26 	beq	r2,zero,800e544 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800e518:	e0bff917 	ldw	r2,-28(fp)
 800e51c:	10800017 	ldw	r2,0(r2)
 800e520:	10800104 	addi	r2,r2,4
 800e524:	1007883a 	mov	r3,r2
 800e528:	e0bff917 	ldw	r2,-28(fp)
 800e52c:	10800817 	ldw	r2,32(r2)
 800e530:	10810014 	ori	r2,r2,1024
 800e534:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800e538:	e0bff917 	ldw	r2,-28(fp)
 800e53c:	10000915 	stw	zero,36(r2)
 800e540:	00000a06 	br	800e56c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800e544:	e0bff917 	ldw	r2,-28(fp)
 800e548:	10c00917 	ldw	r3,36(r2)
 800e54c:	00a00034 	movhi	r2,32768
 800e550:	10bfff04 	addi	r2,r2,-4
 800e554:	10c00536 	bltu	r2,r3,800e56c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800e558:	e0bff917 	ldw	r2,-28(fp)
 800e55c:	10800917 	ldw	r2,36(r2)
 800e560:	10c00044 	addi	r3,r2,1
 800e564:	e0bff917 	ldw	r2,-28(fp)
 800e568:	10c00915 	stw	r3,36(r2)
 800e56c:	00820074 	movhi	r2,2049
 800e570:	108f8904 	addi	r2,r2,15908
 800e574:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800e578:	e037883a 	mov	sp,fp
 800e57c:	df000017 	ldw	fp,0(sp)
 800e580:	dec00104 	addi	sp,sp,4
 800e584:	f800283a 	ret

0800e588 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800e588:	defffd04 	addi	sp,sp,-12
 800e58c:	df000215 	stw	fp,8(sp)
 800e590:	df000204 	addi	fp,sp,8
 800e594:	e13ffe15 	stw	r4,-8(fp)
 800e598:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e59c:	00000506 	br	800e5b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800e5a0:	e0bfff17 	ldw	r2,-4(fp)
 800e5a4:	1090000c 	andi	r2,r2,16384
 800e5a8:	10000226 	beq	r2,zero,800e5b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800e5ac:	00bffd44 	movi	r2,-11
 800e5b0:	00000b06 	br	800e5e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e5b4:	e0bffe17 	ldw	r2,-8(fp)
 800e5b8:	10c00d17 	ldw	r3,52(r2)
 800e5bc:	e0bffe17 	ldw	r2,-8(fp)
 800e5c0:	10800c17 	ldw	r2,48(r2)
 800e5c4:	18800526 	beq	r3,r2,800e5dc <altera_avalon_jtag_uart_close+0x54>
 800e5c8:	e0bffe17 	ldw	r2,-8(fp)
 800e5cc:	10c00917 	ldw	r3,36(r2)
 800e5d0:	e0bffe17 	ldw	r2,-8(fp)
 800e5d4:	10800117 	ldw	r2,4(r2)
 800e5d8:	18bff136 	bltu	r3,r2,800e5a0 <__alt_data_end+0xfc00e5a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800e5dc:	0005883a 	mov	r2,zero
}
 800e5e0:	e037883a 	mov	sp,fp
 800e5e4:	df000017 	ldw	fp,0(sp)
 800e5e8:	dec00104 	addi	sp,sp,4
 800e5ec:	f800283a 	ret

0800e5f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800e5f0:	defffa04 	addi	sp,sp,-24
 800e5f4:	df000515 	stw	fp,20(sp)
 800e5f8:	df000504 	addi	fp,sp,20
 800e5fc:	e13ffd15 	stw	r4,-12(fp)
 800e600:	e17ffe15 	stw	r5,-8(fp)
 800e604:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800e608:	00bff9c4 	movi	r2,-25
 800e60c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800e610:	e0bffe17 	ldw	r2,-8(fp)
 800e614:	10da8060 	cmpeqi	r3,r2,27137
 800e618:	1800031e 	bne	r3,zero,800e628 <altera_avalon_jtag_uart_ioctl+0x38>
 800e61c:	109a80a0 	cmpeqi	r2,r2,27138
 800e620:	1000191e 	bne	r2,zero,800e688 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800e624:	00002806 	br	800e6c8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800e628:	e0bffd17 	ldw	r2,-12(fp)
 800e62c:	10c00117 	ldw	r3,4(r2)
 800e630:	00a00034 	movhi	r2,32768
 800e634:	10bfffc4 	addi	r2,r2,-1
 800e638:	18801226 	beq	r3,r2,800e684 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800e63c:	e0bfff17 	ldw	r2,-4(fp)
 800e640:	10800017 	ldw	r2,0(r2)
 800e644:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800e648:	e0bffc17 	ldw	r2,-16(fp)
 800e64c:	10800090 	cmplti	r2,r2,2
 800e650:	1000061e 	bne	r2,zero,800e66c <altera_avalon_jtag_uart_ioctl+0x7c>
 800e654:	e0fffc17 	ldw	r3,-16(fp)
 800e658:	00a00034 	movhi	r2,32768
 800e65c:	10bfffc4 	addi	r2,r2,-1
 800e660:	18800226 	beq	r3,r2,800e66c <altera_avalon_jtag_uart_ioctl+0x7c>
 800e664:	e0bffc17 	ldw	r2,-16(fp)
 800e668:	00000206 	br	800e674 <altera_avalon_jtag_uart_ioctl+0x84>
 800e66c:	00a00034 	movhi	r2,32768
 800e670:	10bfff84 	addi	r2,r2,-2
 800e674:	e0fffd17 	ldw	r3,-12(fp)
 800e678:	18800115 	stw	r2,4(r3)
      rc = 0;
 800e67c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800e680:	00001106 	br	800e6c8 <altera_avalon_jtag_uart_ioctl+0xd8>
 800e684:	00001006 	br	800e6c8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800e688:	e0bffd17 	ldw	r2,-12(fp)
 800e68c:	10c00117 	ldw	r3,4(r2)
 800e690:	00a00034 	movhi	r2,32768
 800e694:	10bfffc4 	addi	r2,r2,-1
 800e698:	18800a26 	beq	r3,r2,800e6c4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800e69c:	e0bffd17 	ldw	r2,-12(fp)
 800e6a0:	10c00917 	ldw	r3,36(r2)
 800e6a4:	e0bffd17 	ldw	r2,-12(fp)
 800e6a8:	10800117 	ldw	r2,4(r2)
 800e6ac:	1885803a 	cmpltu	r2,r3,r2
 800e6b0:	10c03fcc 	andi	r3,r2,255
 800e6b4:	e0bfff17 	ldw	r2,-4(fp)
 800e6b8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800e6bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800e6c0:	00000006 	br	800e6c4 <altera_avalon_jtag_uart_ioctl+0xd4>
 800e6c4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800e6c8:	e0bffb17 	ldw	r2,-20(fp)
}
 800e6cc:	e037883a 	mov	sp,fp
 800e6d0:	df000017 	ldw	fp,0(sp)
 800e6d4:	dec00104 	addi	sp,sp,4
 800e6d8:	f800283a 	ret

0800e6dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800e6dc:	defff304 	addi	sp,sp,-52
 800e6e0:	dfc00c15 	stw	ra,48(sp)
 800e6e4:	df000b15 	stw	fp,44(sp)
 800e6e8:	df000b04 	addi	fp,sp,44
 800e6ec:	e13ffc15 	stw	r4,-16(fp)
 800e6f0:	e17ffd15 	stw	r5,-12(fp)
 800e6f4:	e1bffe15 	stw	r6,-8(fp)
 800e6f8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800e6fc:	e0bffd17 	ldw	r2,-12(fp)
 800e700:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e704:	00004906 	br	800e82c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800e708:	e0bffc17 	ldw	r2,-16(fp)
 800e70c:	10800a17 	ldw	r2,40(r2)
 800e710:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800e714:	e0bffc17 	ldw	r2,-16(fp)
 800e718:	10800b17 	ldw	r2,44(r2)
 800e71c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800e720:	e0fff717 	ldw	r3,-36(fp)
 800e724:	e0bff817 	ldw	r2,-32(fp)
 800e728:	18800536 	bltu	r3,r2,800e740 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800e72c:	e0fff717 	ldw	r3,-36(fp)
 800e730:	e0bff817 	ldw	r2,-32(fp)
 800e734:	1885c83a 	sub	r2,r3,r2
 800e738:	e0bff615 	stw	r2,-40(fp)
 800e73c:	00000406 	br	800e750 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800e740:	00c20004 	movi	r3,2048
 800e744:	e0bff817 	ldw	r2,-32(fp)
 800e748:	1885c83a 	sub	r2,r3,r2
 800e74c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e750:	e0bff617 	ldw	r2,-40(fp)
 800e754:	1000011e 	bne	r2,zero,800e75c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800e758:	00001d06 	br	800e7d0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800e75c:	e0fffe17 	ldw	r3,-8(fp)
 800e760:	e0bff617 	ldw	r2,-40(fp)
 800e764:	1880022e 	bgeu	r3,r2,800e770 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800e768:	e0bffe17 	ldw	r2,-8(fp)
 800e76c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800e770:	e0bff817 	ldw	r2,-32(fp)
 800e774:	10800e04 	addi	r2,r2,56
 800e778:	e0fffc17 	ldw	r3,-16(fp)
 800e77c:	1885883a 	add	r2,r3,r2
 800e780:	e13ff517 	ldw	r4,-44(fp)
 800e784:	100b883a 	mov	r5,r2
 800e788:	e1bff617 	ldw	r6,-40(fp)
 800e78c:	80065180 	call	8006518 <memcpy>
      ptr   += n;
 800e790:	e0fff517 	ldw	r3,-44(fp)
 800e794:	e0bff617 	ldw	r2,-40(fp)
 800e798:	1885883a 	add	r2,r3,r2
 800e79c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800e7a0:	e0fffe17 	ldw	r3,-8(fp)
 800e7a4:	e0bff617 	ldw	r2,-40(fp)
 800e7a8:	1885c83a 	sub	r2,r3,r2
 800e7ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e7b0:	e0fff817 	ldw	r3,-32(fp)
 800e7b4:	e0bff617 	ldw	r2,-40(fp)
 800e7b8:	1885883a 	add	r2,r3,r2
 800e7bc:	10c1ffcc 	andi	r3,r2,2047
 800e7c0:	e0bffc17 	ldw	r2,-16(fp)
 800e7c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800e7c8:	e0bffe17 	ldw	r2,-8(fp)
 800e7cc:	00bfce16 	blt	zero,r2,800e708 <__alt_data_end+0xfc00e708>

    /* If we read any data then return it */
    if (ptr != buffer)
 800e7d0:	e0fff517 	ldw	r3,-44(fp)
 800e7d4:	e0bffd17 	ldw	r2,-12(fp)
 800e7d8:	18800126 	beq	r3,r2,800e7e0 <altera_avalon_jtag_uart_read+0x104>
      break;
 800e7dc:	00001506 	br	800e834 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800e7e0:	e0bfff17 	ldw	r2,-4(fp)
 800e7e4:	1090000c 	andi	r2,r2,16384
 800e7e8:	10000126 	beq	r2,zero,800e7f0 <altera_avalon_jtag_uart_read+0x114>
      break;
 800e7ec:	00001106 	br	800e834 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800e7f0:	0001883a 	nop
 800e7f4:	e0bffc17 	ldw	r2,-16(fp)
 800e7f8:	10c00a17 	ldw	r3,40(r2)
 800e7fc:	e0bff717 	ldw	r2,-36(fp)
 800e800:	1880051e 	bne	r3,r2,800e818 <altera_avalon_jtag_uart_read+0x13c>
 800e804:	e0bffc17 	ldw	r2,-16(fp)
 800e808:	10c00917 	ldw	r3,36(r2)
 800e80c:	e0bffc17 	ldw	r2,-16(fp)
 800e810:	10800117 	ldw	r2,4(r2)
 800e814:	18bff736 	bltu	r3,r2,800e7f4 <__alt_data_end+0xfc00e7f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800e818:	e0bffc17 	ldw	r2,-16(fp)
 800e81c:	10c00a17 	ldw	r3,40(r2)
 800e820:	e0bff717 	ldw	r2,-36(fp)
 800e824:	1880011e 	bne	r3,r2,800e82c <altera_avalon_jtag_uart_read+0x150>
      break;
 800e828:	00000206 	br	800e834 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e82c:	e0bffe17 	ldw	r2,-8(fp)
 800e830:	00bfb516 	blt	zero,r2,800e708 <__alt_data_end+0xfc00e708>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800e834:	e0fff517 	ldw	r3,-44(fp)
 800e838:	e0bffd17 	ldw	r2,-12(fp)
 800e83c:	18801826 	beq	r3,r2,800e8a0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e840:	0005303a 	rdctl	r2,status
 800e844:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e848:	e0fffa17 	ldw	r3,-24(fp)
 800e84c:	00bfff84 	movi	r2,-2
 800e850:	1884703a 	and	r2,r3,r2
 800e854:	1001703a 	wrctl	status,r2
  
  return context;
 800e858:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800e85c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e860:	e0bffc17 	ldw	r2,-16(fp)
 800e864:	10800817 	ldw	r2,32(r2)
 800e868:	10c00054 	ori	r3,r2,1
 800e86c:	e0bffc17 	ldw	r2,-16(fp)
 800e870:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e874:	e0bffc17 	ldw	r2,-16(fp)
 800e878:	10800017 	ldw	r2,0(r2)
 800e87c:	10800104 	addi	r2,r2,4
 800e880:	1007883a 	mov	r3,r2
 800e884:	e0bffc17 	ldw	r2,-16(fp)
 800e888:	10800817 	ldw	r2,32(r2)
 800e88c:	18800035 	stwio	r2,0(r3)
 800e890:	e0bff917 	ldw	r2,-28(fp)
 800e894:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e898:	e0bffb17 	ldw	r2,-20(fp)
 800e89c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800e8a0:	e0fff517 	ldw	r3,-44(fp)
 800e8a4:	e0bffd17 	ldw	r2,-12(fp)
 800e8a8:	18800426 	beq	r3,r2,800e8bc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800e8ac:	e0fff517 	ldw	r3,-44(fp)
 800e8b0:	e0bffd17 	ldw	r2,-12(fp)
 800e8b4:	1885c83a 	sub	r2,r3,r2
 800e8b8:	00000606 	br	800e8d4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800e8bc:	e0bfff17 	ldw	r2,-4(fp)
 800e8c0:	1090000c 	andi	r2,r2,16384
 800e8c4:	10000226 	beq	r2,zero,800e8d0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800e8c8:	00bffd44 	movi	r2,-11
 800e8cc:	00000106 	br	800e8d4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800e8d0:	00bffec4 	movi	r2,-5
}
 800e8d4:	e037883a 	mov	sp,fp
 800e8d8:	dfc00117 	ldw	ra,4(sp)
 800e8dc:	df000017 	ldw	fp,0(sp)
 800e8e0:	dec00204 	addi	sp,sp,8
 800e8e4:	f800283a 	ret

0800e8e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800e8e8:	defff304 	addi	sp,sp,-52
 800e8ec:	dfc00c15 	stw	ra,48(sp)
 800e8f0:	df000b15 	stw	fp,44(sp)
 800e8f4:	df000b04 	addi	fp,sp,44
 800e8f8:	e13ffc15 	stw	r4,-16(fp)
 800e8fc:	e17ffd15 	stw	r5,-12(fp)
 800e900:	e1bffe15 	stw	r6,-8(fp)
 800e904:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800e908:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800e90c:	e0bffd17 	ldw	r2,-12(fp)
 800e910:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e914:	00003806 	br	800e9f8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800e918:	e0bffc17 	ldw	r2,-16(fp)
 800e91c:	10800c17 	ldw	r2,48(r2)
 800e920:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800e924:	e0bffc17 	ldw	r2,-16(fp)
 800e928:	10800d17 	ldw	r2,52(r2)
 800e92c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800e930:	e0fff817 	ldw	r3,-32(fp)
 800e934:	e0bff517 	ldw	r2,-44(fp)
 800e938:	1880062e 	bgeu	r3,r2,800e954 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800e93c:	e0fff517 	ldw	r3,-44(fp)
 800e940:	e0bff817 	ldw	r2,-32(fp)
 800e944:	1885c83a 	sub	r2,r3,r2
 800e948:	10bfffc4 	addi	r2,r2,-1
 800e94c:	e0bff615 	stw	r2,-40(fp)
 800e950:	00000b06 	br	800e980 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800e954:	e0bff517 	ldw	r2,-44(fp)
 800e958:	10000526 	beq	r2,zero,800e970 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800e95c:	00c20004 	movi	r3,2048
 800e960:	e0bff817 	ldw	r2,-32(fp)
 800e964:	1885c83a 	sub	r2,r3,r2
 800e968:	e0bff615 	stw	r2,-40(fp)
 800e96c:	00000406 	br	800e980 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800e970:	00c1ffc4 	movi	r3,2047
 800e974:	e0bff817 	ldw	r2,-32(fp)
 800e978:	1885c83a 	sub	r2,r3,r2
 800e97c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e980:	e0bff617 	ldw	r2,-40(fp)
 800e984:	1000011e 	bne	r2,zero,800e98c <altera_avalon_jtag_uart_write+0xa4>
        break;
 800e988:	00001d06 	br	800ea00 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800e98c:	e0fffe17 	ldw	r3,-8(fp)
 800e990:	e0bff617 	ldw	r2,-40(fp)
 800e994:	1880022e 	bgeu	r3,r2,800e9a0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800e998:	e0bffe17 	ldw	r2,-8(fp)
 800e99c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800e9a0:	e0bff817 	ldw	r2,-32(fp)
 800e9a4:	10820e04 	addi	r2,r2,2104
 800e9a8:	e0fffc17 	ldw	r3,-16(fp)
 800e9ac:	1885883a 	add	r2,r3,r2
 800e9b0:	1009883a 	mov	r4,r2
 800e9b4:	e17ffd17 	ldw	r5,-12(fp)
 800e9b8:	e1bff617 	ldw	r6,-40(fp)
 800e9bc:	80065180 	call	8006518 <memcpy>
      ptr   += n;
 800e9c0:	e0fffd17 	ldw	r3,-12(fp)
 800e9c4:	e0bff617 	ldw	r2,-40(fp)
 800e9c8:	1885883a 	add	r2,r3,r2
 800e9cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800e9d0:	e0fffe17 	ldw	r3,-8(fp)
 800e9d4:	e0bff617 	ldw	r2,-40(fp)
 800e9d8:	1885c83a 	sub	r2,r3,r2
 800e9dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e9e0:	e0fff817 	ldw	r3,-32(fp)
 800e9e4:	e0bff617 	ldw	r2,-40(fp)
 800e9e8:	1885883a 	add	r2,r3,r2
 800e9ec:	10c1ffcc 	andi	r3,r2,2047
 800e9f0:	e0bffc17 	ldw	r2,-16(fp)
 800e9f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e9f8:	e0bffe17 	ldw	r2,-8(fp)
 800e9fc:	00bfc616 	blt	zero,r2,800e918 <__alt_data_end+0xfc00e918>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ea00:	0005303a 	rdctl	r2,status
 800ea04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ea08:	e0fffa17 	ldw	r3,-24(fp)
 800ea0c:	00bfff84 	movi	r2,-2
 800ea10:	1884703a 	and	r2,r3,r2
 800ea14:	1001703a 	wrctl	status,r2
  
  return context;
 800ea18:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800ea1c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800ea20:	e0bffc17 	ldw	r2,-16(fp)
 800ea24:	10800817 	ldw	r2,32(r2)
 800ea28:	10c00094 	ori	r3,r2,2
 800ea2c:	e0bffc17 	ldw	r2,-16(fp)
 800ea30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ea34:	e0bffc17 	ldw	r2,-16(fp)
 800ea38:	10800017 	ldw	r2,0(r2)
 800ea3c:	10800104 	addi	r2,r2,4
 800ea40:	1007883a 	mov	r3,r2
 800ea44:	e0bffc17 	ldw	r2,-16(fp)
 800ea48:	10800817 	ldw	r2,32(r2)
 800ea4c:	18800035 	stwio	r2,0(r3)
 800ea50:	e0bff917 	ldw	r2,-28(fp)
 800ea54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ea58:	e0bffb17 	ldw	r2,-20(fp)
 800ea5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800ea60:	e0bffe17 	ldw	r2,-8(fp)
 800ea64:	0080120e 	bge	zero,r2,800eab0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800ea68:	e0bfff17 	ldw	r2,-4(fp)
 800ea6c:	1090000c 	andi	r2,r2,16384
 800ea70:	10000126 	beq	r2,zero,800ea78 <altera_avalon_jtag_uart_write+0x190>
        break;
 800ea74:	00001006 	br	800eab8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800ea78:	0001883a 	nop
 800ea7c:	e0bffc17 	ldw	r2,-16(fp)
 800ea80:	10c00d17 	ldw	r3,52(r2)
 800ea84:	e0bff517 	ldw	r2,-44(fp)
 800ea88:	1880051e 	bne	r3,r2,800eaa0 <altera_avalon_jtag_uart_write+0x1b8>
 800ea8c:	e0bffc17 	ldw	r2,-16(fp)
 800ea90:	10c00917 	ldw	r3,36(r2)
 800ea94:	e0bffc17 	ldw	r2,-16(fp)
 800ea98:	10800117 	ldw	r2,4(r2)
 800ea9c:	18bff736 	bltu	r3,r2,800ea7c <__alt_data_end+0xfc00ea7c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800eaa0:	e0bffc17 	ldw	r2,-16(fp)
 800eaa4:	10800917 	ldw	r2,36(r2)
 800eaa8:	10000126 	beq	r2,zero,800eab0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800eaac:	00000206 	br	800eab8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800eab0:	e0bffe17 	ldw	r2,-8(fp)
 800eab4:	00bf9716 	blt	zero,r2,800e914 <__alt_data_end+0xfc00e914>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800eab8:	e0fffd17 	ldw	r3,-12(fp)
 800eabc:	e0bff717 	ldw	r2,-36(fp)
 800eac0:	18800426 	beq	r3,r2,800ead4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800eac4:	e0fffd17 	ldw	r3,-12(fp)
 800eac8:	e0bff717 	ldw	r2,-36(fp)
 800eacc:	1885c83a 	sub	r2,r3,r2
 800ead0:	00000606 	br	800eaec <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800ead4:	e0bfff17 	ldw	r2,-4(fp)
 800ead8:	1090000c 	andi	r2,r2,16384
 800eadc:	10000226 	beq	r2,zero,800eae8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800eae0:	00bffd44 	movi	r2,-11
 800eae4:	00000106 	br	800eaec <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800eae8:	00bffec4 	movi	r2,-5
}
 800eaec:	e037883a 	mov	sp,fp
 800eaf0:	dfc00117 	ldw	ra,4(sp)
 800eaf4:	df000017 	ldw	fp,0(sp)
 800eaf8:	dec00204 	addi	sp,sp,8
 800eafc:	f800283a 	ret

0800eb00 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800eb00:	defffa04 	addi	sp,sp,-24
 800eb04:	dfc00515 	stw	ra,20(sp)
 800eb08:	df000415 	stw	fp,16(sp)
 800eb0c:	df000404 	addi	fp,sp,16
 800eb10:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800eb14:	0007883a 	mov	r3,zero
 800eb18:	e0bfff17 	ldw	r2,-4(fp)
 800eb1c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800eb20:	e0bfff17 	ldw	r2,-4(fp)
 800eb24:	10800104 	addi	r2,r2,4
 800eb28:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eb2c:	0005303a 	rdctl	r2,status
 800eb30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eb34:	e0fffd17 	ldw	r3,-12(fp)
 800eb38:	00bfff84 	movi	r2,-2
 800eb3c:	1884703a 	and	r2,r3,r2
 800eb40:	1001703a 	wrctl	status,r2
  
  return context;
 800eb44:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800eb48:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800eb4c:	800fd440 	call	800fd44 <alt_tick>
 800eb50:	e0bffc17 	ldw	r2,-16(fp)
 800eb54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eb58:	e0bffe17 	ldw	r2,-8(fp)
 800eb5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800eb60:	e037883a 	mov	sp,fp
 800eb64:	dfc00117 	ldw	ra,4(sp)
 800eb68:	df000017 	ldw	fp,0(sp)
 800eb6c:	dec00204 	addi	sp,sp,8
 800eb70:	f800283a 	ret

0800eb74 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800eb74:	defff804 	addi	sp,sp,-32
 800eb78:	dfc00715 	stw	ra,28(sp)
 800eb7c:	df000615 	stw	fp,24(sp)
 800eb80:	df000604 	addi	fp,sp,24
 800eb84:	e13ffc15 	stw	r4,-16(fp)
 800eb88:	e17ffd15 	stw	r5,-12(fp)
 800eb8c:	e1bffe15 	stw	r6,-8(fp)
 800eb90:	e1ffff15 	stw	r7,-4(fp)
 800eb94:	e0bfff17 	ldw	r2,-4(fp)
 800eb98:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800eb9c:	00820074 	movhi	r2,2049
 800eba0:	108f8904 	addi	r2,r2,15908
 800eba4:	10800017 	ldw	r2,0(r2)
 800eba8:	1000041e 	bne	r2,zero,800ebbc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 800ebac:	00820074 	movhi	r2,2049
 800ebb0:	108f8904 	addi	r2,r2,15908
 800ebb4:	e0fffb17 	ldw	r3,-20(fp)
 800ebb8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800ebbc:	e0bffc17 	ldw	r2,-16(fp)
 800ebc0:	10800104 	addi	r2,r2,4
 800ebc4:	00c001c4 	movi	r3,7
 800ebc8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800ebcc:	d8000015 	stw	zero,0(sp)
 800ebd0:	e13ffd17 	ldw	r4,-12(fp)
 800ebd4:	e17ffe17 	ldw	r5,-8(fp)
 800ebd8:	01820074 	movhi	r6,2049
 800ebdc:	31bac004 	addi	r6,r6,-5376
 800ebe0:	e1fffc17 	ldw	r7,-16(fp)
 800ebe4:	800f5e00 	call	800f5e0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800ebe8:	e037883a 	mov	sp,fp
 800ebec:	dfc00117 	ldw	ra,4(sp)
 800ebf0:	df000017 	ldw	fp,0(sp)
 800ebf4:	dec00204 	addi	sp,sp,8
 800ebf8:	f800283a 	ret

0800ebfc <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 800ebfc:	defffc04 	addi	sp,sp,-16
 800ec00:	df000315 	stw	fp,12(sp)
 800ec04:	df000304 	addi	fp,sp,12
 800ec08:	e13ffe15 	stw	r4,-8(fp)
 800ec0c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 800ec10:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 800ec14:	e0bfff17 	ldw	r2,-4(fp)
 800ec18:	1000061e 	bne	r2,zero,800ec34 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 800ec1c:	e0bffe17 	ldw	r2,-8(fp)
 800ec20:	1007883a 	mov	r3,r2
 800ec24:	e0bffd03 	ldbu	r2,-12(fp)
 800ec28:	1884b03a 	or	r2,r3,r2
 800ec2c:	e0bffd05 	stb	r2,-12(fp)
 800ec30:	00000806 	br	800ec54 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 800ec34:	e0bffe17 	ldw	r2,-8(fp)
 800ec38:	1007883a 	mov	r3,r2
 800ec3c:	e0bffd03 	ldbu	r2,-12(fp)
 800ec40:	1884b03a 	or	r2,r3,r2
 800ec44:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 800ec48:	e0bffd03 	ldbu	r2,-12(fp)
 800ec4c:	10801014 	ori	r2,r2,64
 800ec50:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 800ec54:	e0fffd03 	ldbu	r3,-12(fp)
 800ec58:	00bfe004 	movi	r2,-128
 800ec5c:	1884b03a 	or	r2,r3,r2
}
 800ec60:	e037883a 	mov	sp,fp
 800ec64:	df000017 	ldw	fp,0(sp)
 800ec68:	dec00104 	addi	sp,sp,4
 800ec6c:	f800283a 	ret

0800ec70 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 800ec70:	defffd04 	addi	sp,sp,-12
 800ec74:	df000215 	stw	fp,8(sp)
 800ec78:	df000204 	addi	fp,sp,8
 800ec7c:	e13ffe15 	stw	r4,-8(fp)
 800ec80:	2805883a 	mov	r2,r5
 800ec84:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 800ec88:	e0bffe17 	ldw	r2,-8(fp)
 800ec8c:	10800a17 	ldw	r2,40(r2)
 800ec90:	1007883a 	mov	r3,r2
 800ec94:	e0bfff03 	ldbu	r2,-4(fp)
 800ec98:	18800025 	stbio	r2,0(r3)
}
 800ec9c:	e037883a 	mov	sp,fp
 800eca0:	df000017 	ldw	fp,0(sp)
 800eca4:	dec00104 	addi	sp,sp,4
 800eca8:	f800283a 	ret

0800ecac <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 800ecac:	defffe04 	addi	sp,sp,-8
 800ecb0:	df000115 	stw	fp,4(sp)
 800ecb4:	df000104 	addi	fp,sp,4
 800ecb8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 800ecbc:	e0bfff17 	ldw	r2,-4(fp)
 800ecc0:	10800a17 	ldw	r2,40(r2)
 800ecc4:	1007883a 	mov	r3,r2
 800ecc8:	00800044 	movi	r2,1
 800eccc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 800ecd0:	e037883a 	mov	sp,fp
 800ecd4:	df000017 	ldw	fp,0(sp)
 800ecd8:	dec00104 	addi	sp,sp,4
 800ecdc:	f800283a 	ret

0800ece0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 800ece0:	defffc04 	addi	sp,sp,-16
 800ece4:	dfc00315 	stw	ra,12(sp)
 800ece8:	df000215 	stw	fp,8(sp)
 800ecec:	df000204 	addi	fp,sp,8
 800ecf0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 800ecf4:	e13fff17 	ldw	r4,-4(fp)
 800ecf8:	01420074 	movhi	r5,2049
 800ecfc:	2948ad04 	addi	r5,r5,8884
 800ed00:	800f5340 	call	800f534 <alt_find_dev>
 800ed04:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800ed08:	e0bffe17 	ldw	r2,-8(fp)
}
 800ed0c:	e037883a 	mov	sp,fp
 800ed10:	dfc00117 	ldw	ra,4(sp)
 800ed14:	df000017 	ldw	fp,0(sp)
 800ed18:	dec00204 	addi	sp,sp,8
 800ed1c:	f800283a 	ret

0800ed20 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 800ed20:	defffb04 	addi	sp,sp,-20
 800ed24:	df000415 	stw	fp,16(sp)
 800ed28:	df000404 	addi	fp,sp,16
 800ed2c:	e13ffd15 	stw	r4,-12(fp)
 800ed30:	e17ffe15 	stw	r5,-8(fp)
 800ed34:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 800ed38:	e03ffc15 	stw	zero,-16(fp)
 800ed3c:	00000f06 	br	800ed7c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 800ed40:	e0bffd17 	ldw	r2,-12(fp)
 800ed44:	10800a17 	ldw	r2,40(r2)
 800ed48:	10800044 	addi	r2,r2,1
 800ed4c:	1009883a 	mov	r4,r2
 800ed50:	e0fffe17 	ldw	r3,-8(fp)
 800ed54:	e0bffc17 	ldw	r2,-16(fp)
 800ed58:	1885883a 	add	r2,r3,r2
 800ed5c:	10800003 	ldbu	r2,0(r2)
 800ed60:	10803fcc 	andi	r2,r2,255
 800ed64:	1080201c 	xori	r2,r2,128
 800ed68:	10bfe004 	addi	r2,r2,-128
 800ed6c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 800ed70:	e0bffc17 	ldw	r2,-16(fp)
 800ed74:	10800044 	addi	r2,r2,1
 800ed78:	e0bffc15 	stw	r2,-16(fp)
 800ed7c:	e0fffc17 	ldw	r3,-16(fp)
 800ed80:	e0bfff17 	ldw	r2,-4(fp)
 800ed84:	18bfee36 	bltu	r3,r2,800ed40 <__alt_data_end+0xfc00ed40>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 800ed88:	e037883a 	mov	sp,fp
 800ed8c:	df000017 	ldw	fp,0(sp)
 800ed90:	dec00104 	addi	sp,sp,4
 800ed94:	f800283a 	ret

0800ed98 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 800ed98:	defffd04 	addi	sp,sp,-12
 800ed9c:	df000215 	stw	fp,8(sp)
 800eda0:	df000204 	addi	fp,sp,8
 800eda4:	e13ffe15 	stw	r4,-8(fp)
 800eda8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 800edac:	00000d06 	br	800ede4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 800edb0:	e0bffe17 	ldw	r2,-8(fp)
 800edb4:	10800a17 	ldw	r2,40(r2)
 800edb8:	10800044 	addi	r2,r2,1
 800edbc:	1007883a 	mov	r3,r2
 800edc0:	e0bfff17 	ldw	r2,-4(fp)
 800edc4:	10800003 	ldbu	r2,0(r2)
 800edc8:	10803fcc 	andi	r2,r2,255
 800edcc:	1080201c 	xori	r2,r2,128
 800edd0:	10bfe004 	addi	r2,r2,-128
 800edd4:	18800025 	stbio	r2,0(r3)
		++ptr;
 800edd8:	e0bfff17 	ldw	r2,-4(fp)
 800eddc:	10800044 	addi	r2,r2,1
 800ede0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 800ede4:	e0bfff17 	ldw	r2,-4(fp)
 800ede8:	10800003 	ldbu	r2,0(r2)
 800edec:	10803fcc 	andi	r2,r2,255
 800edf0:	1080201c 	xori	r2,r2,128
 800edf4:	10bfe004 	addi	r2,r2,-128
 800edf8:	103fed1e 	bne	r2,zero,800edb0 <__alt_data_end+0xfc00edb0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 800edfc:	e037883a 	mov	sp,fp
 800ee00:	df000017 	ldw	fp,0(sp)
 800ee04:	dec00104 	addi	sp,sp,4
 800ee08:	f800283a 	ret

0800ee0c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 800ee0c:	defffb04 	addi	sp,sp,-20
 800ee10:	dfc00415 	stw	ra,16(sp)
 800ee14:	df000315 	stw	fp,12(sp)
 800ee18:	df000304 	addi	fp,sp,12
 800ee1c:	e13ffd15 	stw	r4,-12(fp)
 800ee20:	e17ffe15 	stw	r5,-8(fp)
 800ee24:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 800ee28:	e0bffd17 	ldw	r2,-12(fp)
 800ee2c:	10c00017 	ldw	r3,0(r2)
 800ee30:	e0bfff17 	ldw	r2,-4(fp)
 800ee34:	1809883a 	mov	r4,r3
 800ee38:	e17ffe17 	ldw	r5,-8(fp)
 800ee3c:	100d883a 	mov	r6,r2
 800ee40:	800ed200 	call	800ed20 <alt_up_character_lcd_write>
	return 0;
 800ee44:	0005883a 	mov	r2,zero
}
 800ee48:	e037883a 	mov	sp,fp
 800ee4c:	dfc00117 	ldw	ra,4(sp)
 800ee50:	df000017 	ldw	fp,0(sp)
 800ee54:	dec00204 	addi	sp,sp,8
 800ee58:	f800283a 	ret

0800ee5c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 800ee5c:	defffa04 	addi	sp,sp,-24
 800ee60:	dfc00515 	stw	ra,20(sp)
 800ee64:	df000415 	stw	fp,16(sp)
 800ee68:	df000404 	addi	fp,sp,16
 800ee6c:	e13ffd15 	stw	r4,-12(fp)
 800ee70:	e17ffe15 	stw	r5,-8(fp)
 800ee74:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 800ee78:	e0bffe17 	ldw	r2,-8(fp)
 800ee7c:	10800a28 	cmpgeui	r2,r2,40
 800ee80:	1000031e 	bne	r2,zero,800ee90 <alt_up_character_lcd_set_cursor_pos+0x34>
 800ee84:	e0bfff17 	ldw	r2,-4(fp)
 800ee88:	108000b0 	cmpltui	r2,r2,2
 800ee8c:	1000021e 	bne	r2,zero,800ee98 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 800ee90:	00bfffc4 	movi	r2,-1
 800ee94:	00000906 	br	800eebc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800ee98:	e13ffe17 	ldw	r4,-8(fp)
 800ee9c:	e17fff17 	ldw	r5,-4(fp)
 800eea0:	800ebfc0 	call	800ebfc <get_DDRAM_addr>
 800eea4:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 800eea8:	e0bffc03 	ldbu	r2,-16(fp)
 800eeac:	e13ffd17 	ldw	r4,-12(fp)
 800eeb0:	100b883a 	mov	r5,r2
 800eeb4:	800ec700 	call	800ec70 <alt_up_character_lcd_send_cmd>
	return 0;
 800eeb8:	0005883a 	mov	r2,zero
}
 800eebc:	e037883a 	mov	sp,fp
 800eec0:	dfc00117 	ldw	ra,4(sp)
 800eec4:	df000017 	ldw	fp,0(sp)
 800eec8:	dec00204 	addi	sp,sp,8
 800eecc:	f800283a 	ret

0800eed0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800eed0:	defffb04 	addi	sp,sp,-20
 800eed4:	dfc00415 	stw	ra,16(sp)
 800eed8:	df000315 	stw	fp,12(sp)
 800eedc:	df000304 	addi	fp,sp,12
 800eee0:	e13ffe15 	stw	r4,-8(fp)
 800eee4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800eee8:	e0bfff17 	ldw	r2,-4(fp)
 800eeec:	1000011e 	bne	r2,zero,800eef4 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 800eef0:	00001406 	br	800ef44 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800eef4:	e0bfff17 	ldw	r2,-4(fp)
 800eef8:	0080020e 	bge	zero,r2,800ef04 <alt_up_character_lcd_shift_cursor+0x34>
 800eefc:	00800504 	movi	r2,20
 800ef00:	00000106 	br	800ef08 <alt_up_character_lcd_shift_cursor+0x38>
 800ef04:	00800404 	movi	r2,16
 800ef08:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800ef0c:	e0bfff17 	ldw	r2,-4(fp)
 800ef10:	1000010e 	bge	r2,zero,800ef18 <alt_up_character_lcd_shift_cursor+0x48>
 800ef14:	0085c83a 	sub	r2,zero,r2
 800ef18:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800ef1c:	00000406 	br	800ef30 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800ef20:	e0bffd43 	ldbu	r2,-11(fp)
 800ef24:	e13ffe17 	ldw	r4,-8(fp)
 800ef28:	100b883a 	mov	r5,r2
 800ef2c:	800ec700 	call	800ec70 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800ef30:	e0bffd03 	ldbu	r2,-12(fp)
 800ef34:	10ffffc4 	addi	r3,r2,-1
 800ef38:	e0fffd05 	stb	r3,-12(fp)
 800ef3c:	10803fcc 	andi	r2,r2,255
 800ef40:	103ff71e 	bne	r2,zero,800ef20 <__alt_data_end+0xfc00ef20>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800ef44:	e037883a 	mov	sp,fp
 800ef48:	dfc00117 	ldw	ra,4(sp)
 800ef4c:	df000017 	ldw	fp,0(sp)
 800ef50:	dec00204 	addi	sp,sp,8
 800ef54:	f800283a 	ret

0800ef58 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800ef58:	defffb04 	addi	sp,sp,-20
 800ef5c:	dfc00415 	stw	ra,16(sp)
 800ef60:	df000315 	stw	fp,12(sp)
 800ef64:	df000304 	addi	fp,sp,12
 800ef68:	e13ffe15 	stw	r4,-8(fp)
 800ef6c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800ef70:	e0bfff17 	ldw	r2,-4(fp)
 800ef74:	1000011e 	bne	r2,zero,800ef7c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 800ef78:	00001406 	br	800efcc <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800ef7c:	e0bfff17 	ldw	r2,-4(fp)
 800ef80:	0080020e 	bge	zero,r2,800ef8c <alt_up_character_lcd_shift_display+0x34>
 800ef84:	00800704 	movi	r2,28
 800ef88:	00000106 	br	800ef90 <alt_up_character_lcd_shift_display+0x38>
 800ef8c:	00800604 	movi	r2,24
 800ef90:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800ef94:	e0bfff17 	ldw	r2,-4(fp)
 800ef98:	1000010e 	bge	r2,zero,800efa0 <alt_up_character_lcd_shift_display+0x48>
 800ef9c:	0085c83a 	sub	r2,zero,r2
 800efa0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800efa4:	00000406 	br	800efb8 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800efa8:	e0bffd43 	ldbu	r2,-11(fp)
 800efac:	e13ffe17 	ldw	r4,-8(fp)
 800efb0:	100b883a 	mov	r5,r2
 800efb4:	800ec700 	call	800ec70 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800efb8:	e0bffd03 	ldbu	r2,-12(fp)
 800efbc:	10ffffc4 	addi	r3,r2,-1
 800efc0:	e0fffd05 	stb	r3,-12(fp)
 800efc4:	10803fcc 	andi	r2,r2,255
 800efc8:	103ff71e 	bne	r2,zero,800efa8 <__alt_data_end+0xfc00efa8>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800efcc:	e037883a 	mov	sp,fp
 800efd0:	dfc00117 	ldw	ra,4(sp)
 800efd4:	df000017 	ldw	fp,0(sp)
 800efd8:	dec00204 	addi	sp,sp,8
 800efdc:	f800283a 	ret

0800efe0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 800efe0:	defffa04 	addi	sp,sp,-24
 800efe4:	dfc00515 	stw	ra,20(sp)
 800efe8:	df000415 	stw	fp,16(sp)
 800efec:	df000404 	addi	fp,sp,16
 800eff0:	e13ffd15 	stw	r4,-12(fp)
 800eff4:	e17ffe15 	stw	r5,-8(fp)
 800eff8:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 800effc:	e0bffe17 	ldw	r2,-8(fp)
 800f000:	10800a28 	cmpgeui	r2,r2,40
 800f004:	1000031e 	bne	r2,zero,800f014 <alt_up_character_lcd_erase_pos+0x34>
 800f008:	e0bfff17 	ldw	r2,-4(fp)
 800f00c:	108000b0 	cmpltui	r2,r2,2
 800f010:	1000021e 	bne	r2,zero,800f01c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 800f014:	00bfffc4 	movi	r2,-1
 800f018:	00000f06 	br	800f058 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800f01c:	e13ffe17 	ldw	r4,-8(fp)
 800f020:	e17fff17 	ldw	r5,-4(fp)
 800f024:	800ebfc0 	call	800ebfc <get_DDRAM_addr>
 800f028:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 800f02c:	e0bffc03 	ldbu	r2,-16(fp)
 800f030:	e13ffd17 	ldw	r4,-12(fp)
 800f034:	100b883a 	mov	r5,r2
 800f038:	800ec700 	call	800ec70 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 800f03c:	e0bffd17 	ldw	r2,-12(fp)
 800f040:	10800a17 	ldw	r2,40(r2)
 800f044:	10800044 	addi	r2,r2,1
 800f048:	1007883a 	mov	r3,r2
 800f04c:	00800084 	movi	r2,2
 800f050:	18800025 	stbio	r2,0(r3)
	return 0;
 800f054:	0005883a 	mov	r2,zero
}
 800f058:	e037883a 	mov	sp,fp
 800f05c:	dfc00117 	ldw	ra,4(sp)
 800f060:	df000017 	ldw	fp,0(sp)
 800f064:	dec00204 	addi	sp,sp,8
 800f068:	f800283a 	ret

0800f06c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 800f06c:	defffd04 	addi	sp,sp,-12
 800f070:	dfc00215 	stw	ra,8(sp)
 800f074:	df000115 	stw	fp,4(sp)
 800f078:	df000104 	addi	fp,sp,4
 800f07c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 800f080:	e13fff17 	ldw	r4,-4(fp)
 800f084:	01400304 	movi	r5,12
 800f088:	800ec700 	call	800ec70 <alt_up_character_lcd_send_cmd>
}
 800f08c:	e037883a 	mov	sp,fp
 800f090:	dfc00117 	ldw	ra,4(sp)
 800f094:	df000017 	ldw	fp,0(sp)
 800f098:	dec00204 	addi	sp,sp,8
 800f09c:	f800283a 	ret

0800f0a0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 800f0a0:	defffd04 	addi	sp,sp,-12
 800f0a4:	dfc00215 	stw	ra,8(sp)
 800f0a8:	df000115 	stw	fp,4(sp)
 800f0ac:	df000104 	addi	fp,sp,4
 800f0b0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 800f0b4:	e13fff17 	ldw	r4,-4(fp)
 800f0b8:	014003c4 	movi	r5,15
 800f0bc:	800ec700 	call	800ec70 <alt_up_character_lcd_send_cmd>
}
 800f0c0:	e037883a 	mov	sp,fp
 800f0c4:	dfc00117 	ldw	ra,4(sp)
 800f0c8:	df000017 	ldw	fp,0(sp)
 800f0cc:	dec00204 	addi	sp,sp,8
 800f0d0:	f800283a 	ret

0800f0d4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800f0d4:	defff504 	addi	sp,sp,-44
 800f0d8:	df000a15 	stw	fp,40(sp)
 800f0dc:	df000a04 	addi	fp,sp,40
 800f0e0:	e13ffc15 	stw	r4,-16(fp)
 800f0e4:	e17ffd15 	stw	r5,-12(fp)
 800f0e8:	e1bffe15 	stw	r6,-8(fp)
 800f0ec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800f0f0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f0f4:	00820074 	movhi	r2,2049
 800f0f8:	108f8904 	addi	r2,r2,15908
 800f0fc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800f100:	10003f26 	beq	r2,zero,800f200 <alt_alarm_start+0x12c>
  {
    if (alarm)
 800f104:	e0bffc17 	ldw	r2,-16(fp)
 800f108:	10003b26 	beq	r2,zero,800f1f8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800f10c:	e0bffc17 	ldw	r2,-16(fp)
 800f110:	e0fffe17 	ldw	r3,-8(fp)
 800f114:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800f118:	e0bffc17 	ldw	r2,-16(fp)
 800f11c:	e0ffff17 	ldw	r3,-4(fp)
 800f120:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f124:	0005303a 	rdctl	r2,status
 800f128:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f12c:	e0fff817 	ldw	r3,-32(fp)
 800f130:	00bfff84 	movi	r2,-2
 800f134:	1884703a 	and	r2,r3,r2
 800f138:	1001703a 	wrctl	status,r2
  
  return context;
 800f13c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800f140:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800f144:	00820074 	movhi	r2,2049
 800f148:	108f8a04 	addi	r2,r2,15912
 800f14c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800f150:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800f154:	e0fffd17 	ldw	r3,-12(fp)
 800f158:	e0bff617 	ldw	r2,-40(fp)
 800f15c:	1885883a 	add	r2,r3,r2
 800f160:	10c00044 	addi	r3,r2,1
 800f164:	e0bffc17 	ldw	r2,-16(fp)
 800f168:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800f16c:	e0bffc17 	ldw	r2,-16(fp)
 800f170:	10c00217 	ldw	r3,8(r2)
 800f174:	e0bff617 	ldw	r2,-40(fp)
 800f178:	1880042e 	bgeu	r3,r2,800f18c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800f17c:	e0bffc17 	ldw	r2,-16(fp)
 800f180:	00c00044 	movi	r3,1
 800f184:	10c00405 	stb	r3,16(r2)
 800f188:	00000206 	br	800f194 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800f18c:	e0bffc17 	ldw	r2,-16(fp)
 800f190:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800f194:	e0fffc17 	ldw	r3,-16(fp)
 800f198:	00820074 	movhi	r2,2049
 800f19c:	1088b304 	addi	r2,r2,8908
 800f1a0:	e0bff915 	stw	r2,-28(fp)
 800f1a4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800f1a8:	e0bffa17 	ldw	r2,-24(fp)
 800f1ac:	e0fff917 	ldw	r3,-28(fp)
 800f1b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800f1b4:	e0bff917 	ldw	r2,-28(fp)
 800f1b8:	10c00017 	ldw	r3,0(r2)
 800f1bc:	e0bffa17 	ldw	r2,-24(fp)
 800f1c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800f1c4:	e0bff917 	ldw	r2,-28(fp)
 800f1c8:	10800017 	ldw	r2,0(r2)
 800f1cc:	e0fffa17 	ldw	r3,-24(fp)
 800f1d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800f1d4:	e0bff917 	ldw	r2,-28(fp)
 800f1d8:	e0fffa17 	ldw	r3,-24(fp)
 800f1dc:	10c00015 	stw	r3,0(r2)
 800f1e0:	e0bff717 	ldw	r2,-36(fp)
 800f1e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f1e8:	e0bffb17 	ldw	r2,-20(fp)
 800f1ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800f1f0:	0005883a 	mov	r2,zero
 800f1f4:	00000306 	br	800f204 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800f1f8:	00bffa84 	movi	r2,-22
 800f1fc:	00000106 	br	800f204 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800f200:	00bfde84 	movi	r2,-134
  }
}
 800f204:	e037883a 	mov	sp,fp
 800f208:	df000017 	ldw	fp,0(sp)
 800f20c:	dec00104 	addi	sp,sp,4
 800f210:	f800283a 	ret

0800f214 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800f214:	defffa04 	addi	sp,sp,-24
 800f218:	dfc00515 	stw	ra,20(sp)
 800f21c:	df000415 	stw	fp,16(sp)
 800f220:	df000404 	addi	fp,sp,16
 800f224:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800f228:	00800244 	movi	r2,9
 800f22c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800f230:	e13ffd17 	ldw	r4,-12(fp)
 800f234:	014003f4 	movhi	r5,15
 800f238:	29509004 	addi	r5,r5,16960
 800f23c:	800ad900 	call	800ad90 <__mulsi3>
 800f240:	0100bef4 	movhi	r4,763
 800f244:	213c2004 	addi	r4,r4,-3968
 800f248:	100b883a 	mov	r5,r2
 800f24c:	800ad800 	call	800ad80 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800f250:	01200034 	movhi	r4,32768
 800f254:	213fffc4 	addi	r4,r4,-1
 800f258:	100b883a 	mov	r5,r2
 800f25c:	800ad800 	call	800ad80 <__udivsi3>
 800f260:	e13fff17 	ldw	r4,-4(fp)
 800f264:	100b883a 	mov	r5,r2
 800f268:	800ad800 	call	800ad80 <__udivsi3>
 800f26c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800f270:	e0bffe17 	ldw	r2,-8(fp)
 800f274:	10002a26 	beq	r2,zero,800f320 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800f278:	e03ffc15 	stw	zero,-16(fp)
 800f27c:	00001706 	br	800f2dc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800f280:	00a00034 	movhi	r2,32768
 800f284:	10bfffc4 	addi	r2,r2,-1
 800f288:	10bfffc4 	addi	r2,r2,-1
 800f28c:	103ffe1e 	bne	r2,zero,800f288 <__alt_data_end+0xfc00f288>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800f290:	e13ffd17 	ldw	r4,-12(fp)
 800f294:	014003f4 	movhi	r5,15
 800f298:	29509004 	addi	r5,r5,16960
 800f29c:	800ad900 	call	800ad90 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800f2a0:	0100bef4 	movhi	r4,763
 800f2a4:	213c2004 	addi	r4,r4,-3968
 800f2a8:	100b883a 	mov	r5,r2
 800f2ac:	800ad800 	call	800ad80 <__udivsi3>
 800f2b0:	01200034 	movhi	r4,32768
 800f2b4:	213fffc4 	addi	r4,r4,-1
 800f2b8:	100b883a 	mov	r5,r2
 800f2bc:	800ad800 	call	800ad80 <__udivsi3>
 800f2c0:	1007883a 	mov	r3,r2
 800f2c4:	e0bfff17 	ldw	r2,-4(fp)
 800f2c8:	10c5c83a 	sub	r2,r2,r3
 800f2cc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800f2d0:	e0bffc17 	ldw	r2,-16(fp)
 800f2d4:	10800044 	addi	r2,r2,1
 800f2d8:	e0bffc15 	stw	r2,-16(fp)
 800f2dc:	e0fffc17 	ldw	r3,-16(fp)
 800f2e0:	e0bffe17 	ldw	r2,-8(fp)
 800f2e4:	18bfe616 	blt	r3,r2,800f280 <__alt_data_end+0xfc00f280>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800f2e8:	e13ffd17 	ldw	r4,-12(fp)
 800f2ec:	014003f4 	movhi	r5,15
 800f2f0:	29509004 	addi	r5,r5,16960
 800f2f4:	800ad900 	call	800ad90 <__mulsi3>
 800f2f8:	0100bef4 	movhi	r4,763
 800f2fc:	213c2004 	addi	r4,r4,-3968
 800f300:	100b883a 	mov	r5,r2
 800f304:	800ad800 	call	800ad80 <__udivsi3>
 800f308:	1009883a 	mov	r4,r2
 800f30c:	e17fff17 	ldw	r5,-4(fp)
 800f310:	800ad900 	call	800ad90 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800f314:	10bfffc4 	addi	r2,r2,-1
 800f318:	103ffe1e 	bne	r2,zero,800f314 <__alt_data_end+0xfc00f314>
 800f31c:	00000d06 	br	800f354 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800f320:	e13ffd17 	ldw	r4,-12(fp)
 800f324:	014003f4 	movhi	r5,15
 800f328:	29509004 	addi	r5,r5,16960
 800f32c:	800ad900 	call	800ad90 <__mulsi3>
 800f330:	0100bef4 	movhi	r4,763
 800f334:	213c2004 	addi	r4,r4,-3968
 800f338:	100b883a 	mov	r5,r2
 800f33c:	800ad800 	call	800ad80 <__udivsi3>
 800f340:	1009883a 	mov	r4,r2
 800f344:	e17fff17 	ldw	r5,-4(fp)
 800f348:	800ad900 	call	800ad90 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800f34c:	10bfffc4 	addi	r2,r2,-1
 800f350:	00bffe16 	blt	zero,r2,800f34c <__alt_data_end+0xfc00f34c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800f354:	0005883a 	mov	r2,zero
}
 800f358:	e037883a 	mov	sp,fp
 800f35c:	dfc00117 	ldw	ra,4(sp)
 800f360:	df000017 	ldw	fp,0(sp)
 800f364:	dec00204 	addi	sp,sp,8
 800f368:	f800283a 	ret

0800f36c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800f36c:	deffff04 	addi	sp,sp,-4
 800f370:	df000015 	stw	fp,0(sp)
 800f374:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800f378:	e037883a 	mov	sp,fp
 800f37c:	df000017 	ldw	fp,0(sp)
 800f380:	dec00104 	addi	sp,sp,4
 800f384:	f800283a 	ret

0800f388 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f388:	defffe04 	addi	sp,sp,-8
 800f38c:	dfc00115 	stw	ra,4(sp)
 800f390:	df000015 	stw	fp,0(sp)
 800f394:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f398:	00820074 	movhi	r2,2049
 800f39c:	1088b004 	addi	r2,r2,8896
 800f3a0:	10800017 	ldw	r2,0(r2)
 800f3a4:	10000526 	beq	r2,zero,800f3bc <alt_get_errno+0x34>
 800f3a8:	00820074 	movhi	r2,2049
 800f3ac:	1088b004 	addi	r2,r2,8896
 800f3b0:	10800017 	ldw	r2,0(r2)
 800f3b4:	103ee83a 	callr	r2
 800f3b8:	00000206 	br	800f3c4 <alt_get_errno+0x3c>
 800f3bc:	00820074 	movhi	r2,2049
 800f3c0:	108f8404 	addi	r2,r2,15888
}
 800f3c4:	e037883a 	mov	sp,fp
 800f3c8:	dfc00117 	ldw	ra,4(sp)
 800f3cc:	df000017 	ldw	fp,0(sp)
 800f3d0:	dec00204 	addi	sp,sp,8
 800f3d4:	f800283a 	ret

0800f3d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800f3d8:	defffa04 	addi	sp,sp,-24
 800f3dc:	dfc00515 	stw	ra,20(sp)
 800f3e0:	df000415 	stw	fp,16(sp)
 800f3e4:	df000404 	addi	fp,sp,16
 800f3e8:	e13ffe15 	stw	r4,-8(fp)
 800f3ec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800f3f0:	e0bffe17 	ldw	r2,-8(fp)
 800f3f4:	10000326 	beq	r2,zero,800f404 <alt_dev_llist_insert+0x2c>
 800f3f8:	e0bffe17 	ldw	r2,-8(fp)
 800f3fc:	10800217 	ldw	r2,8(r2)
 800f400:	1000061e 	bne	r2,zero,800f41c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800f404:	800f3880 	call	800f388 <alt_get_errno>
 800f408:	1007883a 	mov	r3,r2
 800f40c:	00800584 	movi	r2,22
 800f410:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800f414:	00bffa84 	movi	r2,-22
 800f418:	00001306 	br	800f468 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800f41c:	e0bffe17 	ldw	r2,-8(fp)
 800f420:	e0ffff17 	ldw	r3,-4(fp)
 800f424:	e0fffc15 	stw	r3,-16(fp)
 800f428:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800f42c:	e0bffd17 	ldw	r2,-12(fp)
 800f430:	e0fffc17 	ldw	r3,-16(fp)
 800f434:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800f438:	e0bffc17 	ldw	r2,-16(fp)
 800f43c:	10c00017 	ldw	r3,0(r2)
 800f440:	e0bffd17 	ldw	r2,-12(fp)
 800f444:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800f448:	e0bffc17 	ldw	r2,-16(fp)
 800f44c:	10800017 	ldw	r2,0(r2)
 800f450:	e0fffd17 	ldw	r3,-12(fp)
 800f454:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800f458:	e0bffc17 	ldw	r2,-16(fp)
 800f45c:	e0fffd17 	ldw	r3,-12(fp)
 800f460:	10c00015 	stw	r3,0(r2)

  return 0;  
 800f464:	0005883a 	mov	r2,zero
}
 800f468:	e037883a 	mov	sp,fp
 800f46c:	dfc00117 	ldw	ra,4(sp)
 800f470:	df000017 	ldw	fp,0(sp)
 800f474:	dec00204 	addi	sp,sp,8
 800f478:	f800283a 	ret

0800f47c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800f47c:	defffd04 	addi	sp,sp,-12
 800f480:	dfc00215 	stw	ra,8(sp)
 800f484:	df000115 	stw	fp,4(sp)
 800f488:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800f48c:	00820074 	movhi	r2,2049
 800f490:	1080fc04 	addi	r2,r2,1008
 800f494:	e0bfff15 	stw	r2,-4(fp)
 800f498:	00000606 	br	800f4b4 <_do_ctors+0x38>
        (*ctor) (); 
 800f49c:	e0bfff17 	ldw	r2,-4(fp)
 800f4a0:	10800017 	ldw	r2,0(r2)
 800f4a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800f4a8:	e0bfff17 	ldw	r2,-4(fp)
 800f4ac:	10bfff04 	addi	r2,r2,-4
 800f4b0:	e0bfff15 	stw	r2,-4(fp)
 800f4b4:	e0ffff17 	ldw	r3,-4(fp)
 800f4b8:	00820074 	movhi	r2,2049
 800f4bc:	1080fd04 	addi	r2,r2,1012
 800f4c0:	18bff62e 	bgeu	r3,r2,800f49c <__alt_data_end+0xfc00f49c>
        (*ctor) (); 
}
 800f4c4:	e037883a 	mov	sp,fp
 800f4c8:	dfc00117 	ldw	ra,4(sp)
 800f4cc:	df000017 	ldw	fp,0(sp)
 800f4d0:	dec00204 	addi	sp,sp,8
 800f4d4:	f800283a 	ret

0800f4d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800f4d8:	defffd04 	addi	sp,sp,-12
 800f4dc:	dfc00215 	stw	ra,8(sp)
 800f4e0:	df000115 	stw	fp,4(sp)
 800f4e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800f4e8:	00820074 	movhi	r2,2049
 800f4ec:	1080fc04 	addi	r2,r2,1008
 800f4f0:	e0bfff15 	stw	r2,-4(fp)
 800f4f4:	00000606 	br	800f510 <_do_dtors+0x38>
        (*dtor) (); 
 800f4f8:	e0bfff17 	ldw	r2,-4(fp)
 800f4fc:	10800017 	ldw	r2,0(r2)
 800f500:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800f504:	e0bfff17 	ldw	r2,-4(fp)
 800f508:	10bfff04 	addi	r2,r2,-4
 800f50c:	e0bfff15 	stw	r2,-4(fp)
 800f510:	e0ffff17 	ldw	r3,-4(fp)
 800f514:	00820074 	movhi	r2,2049
 800f518:	1080fd04 	addi	r2,r2,1012
 800f51c:	18bff62e 	bgeu	r3,r2,800f4f8 <__alt_data_end+0xfc00f4f8>
        (*dtor) (); 
}
 800f520:	e037883a 	mov	sp,fp
 800f524:	dfc00117 	ldw	ra,4(sp)
 800f528:	df000017 	ldw	fp,0(sp)
 800f52c:	dec00204 	addi	sp,sp,8
 800f530:	f800283a 	ret

0800f534 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800f534:	defffa04 	addi	sp,sp,-24
 800f538:	dfc00515 	stw	ra,20(sp)
 800f53c:	df000415 	stw	fp,16(sp)
 800f540:	df000404 	addi	fp,sp,16
 800f544:	e13ffe15 	stw	r4,-8(fp)
 800f548:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800f54c:	e0bfff17 	ldw	r2,-4(fp)
 800f550:	10800017 	ldw	r2,0(r2)
 800f554:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800f558:	e13ffe17 	ldw	r4,-8(fp)
 800f55c:	8000d840 	call	8000d84 <strlen>
 800f560:	10800044 	addi	r2,r2,1
 800f564:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800f568:	00000d06 	br	800f5a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800f56c:	e0bffc17 	ldw	r2,-16(fp)
 800f570:	10c00217 	ldw	r3,8(r2)
 800f574:	e0bffd17 	ldw	r2,-12(fp)
 800f578:	1809883a 	mov	r4,r3
 800f57c:	e17ffe17 	ldw	r5,-8(fp)
 800f580:	100d883a 	mov	r6,r2
 800f584:	801009c0 	call	801009c <memcmp>
 800f588:	1000021e 	bne	r2,zero,800f594 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800f58c:	e0bffc17 	ldw	r2,-16(fp)
 800f590:	00000706 	br	800f5b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800f594:	e0bffc17 	ldw	r2,-16(fp)
 800f598:	10800017 	ldw	r2,0(r2)
 800f59c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800f5a0:	e0fffc17 	ldw	r3,-16(fp)
 800f5a4:	e0bfff17 	ldw	r2,-4(fp)
 800f5a8:	18bff01e 	bne	r3,r2,800f56c <__alt_data_end+0xfc00f56c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800f5ac:	0005883a 	mov	r2,zero
}
 800f5b0:	e037883a 	mov	sp,fp
 800f5b4:	dfc00117 	ldw	ra,4(sp)
 800f5b8:	df000017 	ldw	fp,0(sp)
 800f5bc:	dec00204 	addi	sp,sp,8
 800f5c0:	f800283a 	ret

0800f5c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800f5c4:	deffff04 	addi	sp,sp,-4
 800f5c8:	df000015 	stw	fp,0(sp)
 800f5cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800f5d0:	e037883a 	mov	sp,fp
 800f5d4:	df000017 	ldw	fp,0(sp)
 800f5d8:	dec00104 	addi	sp,sp,4
 800f5dc:	f800283a 	ret

0800f5e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800f5e0:	defff904 	addi	sp,sp,-28
 800f5e4:	dfc00615 	stw	ra,24(sp)
 800f5e8:	df000515 	stw	fp,20(sp)
 800f5ec:	df000504 	addi	fp,sp,20
 800f5f0:	e13ffc15 	stw	r4,-16(fp)
 800f5f4:	e17ffd15 	stw	r5,-12(fp)
 800f5f8:	e1bffe15 	stw	r6,-8(fp)
 800f5fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800f600:	e0800217 	ldw	r2,8(fp)
 800f604:	d8800015 	stw	r2,0(sp)
 800f608:	e13ffc17 	ldw	r4,-16(fp)
 800f60c:	e17ffd17 	ldw	r5,-12(fp)
 800f610:	e1bffe17 	ldw	r6,-8(fp)
 800f614:	e1ffff17 	ldw	r7,-4(fp)
 800f618:	800f7c00 	call	800f7c0 <alt_iic_isr_register>
}  
 800f61c:	e037883a 	mov	sp,fp
 800f620:	dfc00117 	ldw	ra,4(sp)
 800f624:	df000017 	ldw	fp,0(sp)
 800f628:	dec00204 	addi	sp,sp,8
 800f62c:	f800283a 	ret

0800f630 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800f630:	defff904 	addi	sp,sp,-28
 800f634:	df000615 	stw	fp,24(sp)
 800f638:	df000604 	addi	fp,sp,24
 800f63c:	e13ffe15 	stw	r4,-8(fp)
 800f640:	e17fff15 	stw	r5,-4(fp)
 800f644:	e0bfff17 	ldw	r2,-4(fp)
 800f648:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f64c:	0005303a 	rdctl	r2,status
 800f650:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f654:	e0fffb17 	ldw	r3,-20(fp)
 800f658:	00bfff84 	movi	r2,-2
 800f65c:	1884703a 	and	r2,r3,r2
 800f660:	1001703a 	wrctl	status,r2
  
  return context;
 800f664:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f668:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800f66c:	e0bffa17 	ldw	r2,-24(fp)
 800f670:	00c00044 	movi	r3,1
 800f674:	1884983a 	sll	r2,r3,r2
 800f678:	1007883a 	mov	r3,r2
 800f67c:	00820074 	movhi	r2,2049
 800f680:	108f8804 	addi	r2,r2,15904
 800f684:	10800017 	ldw	r2,0(r2)
 800f688:	1886b03a 	or	r3,r3,r2
 800f68c:	00820074 	movhi	r2,2049
 800f690:	108f8804 	addi	r2,r2,15904
 800f694:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f698:	00820074 	movhi	r2,2049
 800f69c:	108f8804 	addi	r2,r2,15904
 800f6a0:	10800017 	ldw	r2,0(r2)
 800f6a4:	100170fa 	wrctl	ienable,r2
 800f6a8:	e0bffc17 	ldw	r2,-16(fp)
 800f6ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f6b0:	e0bffd17 	ldw	r2,-12(fp)
 800f6b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f6b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800f6bc:	0001883a 	nop
}
 800f6c0:	e037883a 	mov	sp,fp
 800f6c4:	df000017 	ldw	fp,0(sp)
 800f6c8:	dec00104 	addi	sp,sp,4
 800f6cc:	f800283a 	ret

0800f6d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800f6d0:	defff904 	addi	sp,sp,-28
 800f6d4:	df000615 	stw	fp,24(sp)
 800f6d8:	df000604 	addi	fp,sp,24
 800f6dc:	e13ffe15 	stw	r4,-8(fp)
 800f6e0:	e17fff15 	stw	r5,-4(fp)
 800f6e4:	e0bfff17 	ldw	r2,-4(fp)
 800f6e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f6ec:	0005303a 	rdctl	r2,status
 800f6f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f6f4:	e0fffb17 	ldw	r3,-20(fp)
 800f6f8:	00bfff84 	movi	r2,-2
 800f6fc:	1884703a 	and	r2,r3,r2
 800f700:	1001703a 	wrctl	status,r2
  
  return context;
 800f704:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f708:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800f70c:	e0bffa17 	ldw	r2,-24(fp)
 800f710:	00c00044 	movi	r3,1
 800f714:	1884983a 	sll	r2,r3,r2
 800f718:	0084303a 	nor	r2,zero,r2
 800f71c:	1007883a 	mov	r3,r2
 800f720:	00820074 	movhi	r2,2049
 800f724:	108f8804 	addi	r2,r2,15904
 800f728:	10800017 	ldw	r2,0(r2)
 800f72c:	1886703a 	and	r3,r3,r2
 800f730:	00820074 	movhi	r2,2049
 800f734:	108f8804 	addi	r2,r2,15904
 800f738:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f73c:	00820074 	movhi	r2,2049
 800f740:	108f8804 	addi	r2,r2,15904
 800f744:	10800017 	ldw	r2,0(r2)
 800f748:	100170fa 	wrctl	ienable,r2
 800f74c:	e0bffc17 	ldw	r2,-16(fp)
 800f750:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f754:	e0bffd17 	ldw	r2,-12(fp)
 800f758:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f75c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800f760:	0001883a 	nop
}
 800f764:	e037883a 	mov	sp,fp
 800f768:	df000017 	ldw	fp,0(sp)
 800f76c:	dec00104 	addi	sp,sp,4
 800f770:	f800283a 	ret

0800f774 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800f774:	defffc04 	addi	sp,sp,-16
 800f778:	df000315 	stw	fp,12(sp)
 800f77c:	df000304 	addi	fp,sp,12
 800f780:	e13ffe15 	stw	r4,-8(fp)
 800f784:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800f788:	000530fa 	rdctl	r2,ienable
 800f78c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800f790:	e0bfff17 	ldw	r2,-4(fp)
 800f794:	00c00044 	movi	r3,1
 800f798:	1884983a 	sll	r2,r3,r2
 800f79c:	1007883a 	mov	r3,r2
 800f7a0:	e0bffd17 	ldw	r2,-12(fp)
 800f7a4:	1884703a 	and	r2,r3,r2
 800f7a8:	1004c03a 	cmpne	r2,r2,zero
 800f7ac:	10803fcc 	andi	r2,r2,255
}
 800f7b0:	e037883a 	mov	sp,fp
 800f7b4:	df000017 	ldw	fp,0(sp)
 800f7b8:	dec00104 	addi	sp,sp,4
 800f7bc:	f800283a 	ret

0800f7c0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800f7c0:	defff504 	addi	sp,sp,-44
 800f7c4:	dfc00a15 	stw	ra,40(sp)
 800f7c8:	df000915 	stw	fp,36(sp)
 800f7cc:	df000904 	addi	fp,sp,36
 800f7d0:	e13ffc15 	stw	r4,-16(fp)
 800f7d4:	e17ffd15 	stw	r5,-12(fp)
 800f7d8:	e1bffe15 	stw	r6,-8(fp)
 800f7dc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800f7e0:	00bffa84 	movi	r2,-22
 800f7e4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800f7e8:	e0bffd17 	ldw	r2,-12(fp)
 800f7ec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800f7f0:	e0bff817 	ldw	r2,-32(fp)
 800f7f4:	10800808 	cmpgei	r2,r2,32
 800f7f8:	1000271e 	bne	r2,zero,800f898 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f7fc:	0005303a 	rdctl	r2,status
 800f800:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f804:	e0fffa17 	ldw	r3,-24(fp)
 800f808:	00bfff84 	movi	r2,-2
 800f80c:	1884703a 	and	r2,r3,r2
 800f810:	1001703a 	wrctl	status,r2
  
  return context;
 800f814:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800f818:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 800f81c:	008200b4 	movhi	r2,2050
 800f820:	10a31d04 	addi	r2,r2,-29580
 800f824:	e0fff817 	ldw	r3,-32(fp)
 800f828:	180690fa 	slli	r3,r3,3
 800f82c:	10c5883a 	add	r2,r2,r3
 800f830:	e0fffe17 	ldw	r3,-8(fp)
 800f834:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800f838:	008200b4 	movhi	r2,2050
 800f83c:	10a31d04 	addi	r2,r2,-29580
 800f840:	e0fff817 	ldw	r3,-32(fp)
 800f844:	180690fa 	slli	r3,r3,3
 800f848:	10c5883a 	add	r2,r2,r3
 800f84c:	10800104 	addi	r2,r2,4
 800f850:	e0ffff17 	ldw	r3,-4(fp)
 800f854:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800f858:	e0bffe17 	ldw	r2,-8(fp)
 800f85c:	10000526 	beq	r2,zero,800f874 <alt_iic_isr_register+0xb4>
 800f860:	e0bff817 	ldw	r2,-32(fp)
 800f864:	e13ffc17 	ldw	r4,-16(fp)
 800f868:	100b883a 	mov	r5,r2
 800f86c:	800f6300 	call	800f630 <alt_ic_irq_enable>
 800f870:	00000406 	br	800f884 <alt_iic_isr_register+0xc4>
 800f874:	e0bff817 	ldw	r2,-32(fp)
 800f878:	e13ffc17 	ldw	r4,-16(fp)
 800f87c:	100b883a 	mov	r5,r2
 800f880:	800f6d00 	call	800f6d0 <alt_ic_irq_disable>
 800f884:	e0bff715 	stw	r2,-36(fp)
 800f888:	e0bff917 	ldw	r2,-28(fp)
 800f88c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f890:	e0bffb17 	ldw	r2,-20(fp)
 800f894:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800f898:	e0bff717 	ldw	r2,-36(fp)
}
 800f89c:	e037883a 	mov	sp,fp
 800f8a0:	dfc00117 	ldw	ra,4(sp)
 800f8a4:	df000017 	ldw	fp,0(sp)
 800f8a8:	dec00204 	addi	sp,sp,8
 800f8ac:	f800283a 	ret

0800f8b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800f8b0:	defff804 	addi	sp,sp,-32
 800f8b4:	dfc00715 	stw	ra,28(sp)
 800f8b8:	df000615 	stw	fp,24(sp)
 800f8bc:	dc000515 	stw	r16,20(sp)
 800f8c0:	df000604 	addi	fp,sp,24
 800f8c4:	e13ffb15 	stw	r4,-20(fp)
 800f8c8:	e17ffc15 	stw	r5,-16(fp)
 800f8cc:	e1bffd15 	stw	r6,-12(fp)
 800f8d0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800f8d4:	e13ffc17 	ldw	r4,-16(fp)
 800f8d8:	e17ffd17 	ldw	r5,-12(fp)
 800f8dc:	e1bffe17 	ldw	r6,-8(fp)
 800f8e0:	800fb4c0 	call	800fb4c <open>
 800f8e4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800f8e8:	e0bffa17 	ldw	r2,-24(fp)
 800f8ec:	10002216 	blt	r2,zero,800f978 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800f8f0:	04020074 	movhi	r16,2049
 800f8f4:	84042204 	addi	r16,r16,4232
 800f8f8:	e0bffa17 	ldw	r2,-24(fp)
 800f8fc:	1009883a 	mov	r4,r2
 800f900:	01400304 	movi	r5,12
 800f904:	800ad900 	call	800ad90 <__mulsi3>
 800f908:	8085883a 	add	r2,r16,r2
 800f90c:	10c00017 	ldw	r3,0(r2)
 800f910:	e0bffb17 	ldw	r2,-20(fp)
 800f914:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800f918:	04020074 	movhi	r16,2049
 800f91c:	84042204 	addi	r16,r16,4232
 800f920:	e0bffa17 	ldw	r2,-24(fp)
 800f924:	1009883a 	mov	r4,r2
 800f928:	01400304 	movi	r5,12
 800f92c:	800ad900 	call	800ad90 <__mulsi3>
 800f930:	8085883a 	add	r2,r16,r2
 800f934:	10800104 	addi	r2,r2,4
 800f938:	10c00017 	ldw	r3,0(r2)
 800f93c:	e0bffb17 	ldw	r2,-20(fp)
 800f940:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800f944:	04020074 	movhi	r16,2049
 800f948:	84042204 	addi	r16,r16,4232
 800f94c:	e0bffa17 	ldw	r2,-24(fp)
 800f950:	1009883a 	mov	r4,r2
 800f954:	01400304 	movi	r5,12
 800f958:	800ad900 	call	800ad90 <__mulsi3>
 800f95c:	8085883a 	add	r2,r16,r2
 800f960:	10800204 	addi	r2,r2,8
 800f964:	10c00017 	ldw	r3,0(r2)
 800f968:	e0bffb17 	ldw	r2,-20(fp)
 800f96c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800f970:	e13ffa17 	ldw	r4,-24(fp)
 800f974:	800dd280 	call	800dd28 <alt_release_fd>
  }
} 
 800f978:	e6ffff04 	addi	sp,fp,-4
 800f97c:	dfc00217 	ldw	ra,8(sp)
 800f980:	df000117 	ldw	fp,4(sp)
 800f984:	dc000017 	ldw	r16,0(sp)
 800f988:	dec00304 	addi	sp,sp,12
 800f98c:	f800283a 	ret

0800f990 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800f990:	defffb04 	addi	sp,sp,-20
 800f994:	dfc00415 	stw	ra,16(sp)
 800f998:	df000315 	stw	fp,12(sp)
 800f99c:	df000304 	addi	fp,sp,12
 800f9a0:	e13ffd15 	stw	r4,-12(fp)
 800f9a4:	e17ffe15 	stw	r5,-8(fp)
 800f9a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800f9ac:	01020074 	movhi	r4,2049
 800f9b0:	21042504 	addi	r4,r4,4244
 800f9b4:	e17ffd17 	ldw	r5,-12(fp)
 800f9b8:	01800044 	movi	r6,1
 800f9bc:	01c07fc4 	movi	r7,511
 800f9c0:	800f8b00 	call	800f8b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800f9c4:	01020074 	movhi	r4,2049
 800f9c8:	21042204 	addi	r4,r4,4232
 800f9cc:	e17ffe17 	ldw	r5,-8(fp)
 800f9d0:	000d883a 	mov	r6,zero
 800f9d4:	01c07fc4 	movi	r7,511
 800f9d8:	800f8b00 	call	800f8b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800f9dc:	01020074 	movhi	r4,2049
 800f9e0:	21042804 	addi	r4,r4,4256
 800f9e4:	e17fff17 	ldw	r5,-4(fp)
 800f9e8:	01800044 	movi	r6,1
 800f9ec:	01c07fc4 	movi	r7,511
 800f9f0:	800f8b00 	call	800f8b0 <alt_open_fd>
}  
 800f9f4:	e037883a 	mov	sp,fp
 800f9f8:	dfc00117 	ldw	ra,4(sp)
 800f9fc:	df000017 	ldw	fp,0(sp)
 800fa00:	dec00204 	addi	sp,sp,8
 800fa04:	f800283a 	ret

0800fa08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fa08:	defffe04 	addi	sp,sp,-8
 800fa0c:	dfc00115 	stw	ra,4(sp)
 800fa10:	df000015 	stw	fp,0(sp)
 800fa14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fa18:	00820074 	movhi	r2,2049
 800fa1c:	1088b004 	addi	r2,r2,8896
 800fa20:	10800017 	ldw	r2,0(r2)
 800fa24:	10000526 	beq	r2,zero,800fa3c <alt_get_errno+0x34>
 800fa28:	00820074 	movhi	r2,2049
 800fa2c:	1088b004 	addi	r2,r2,8896
 800fa30:	10800017 	ldw	r2,0(r2)
 800fa34:	103ee83a 	callr	r2
 800fa38:	00000206 	br	800fa44 <alt_get_errno+0x3c>
 800fa3c:	00820074 	movhi	r2,2049
 800fa40:	108f8404 	addi	r2,r2,15888
}
 800fa44:	e037883a 	mov	sp,fp
 800fa48:	dfc00117 	ldw	ra,4(sp)
 800fa4c:	df000017 	ldw	fp,0(sp)
 800fa50:	dec00204 	addi	sp,sp,8
 800fa54:	f800283a 	ret

0800fa58 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800fa58:	defffb04 	addi	sp,sp,-20
 800fa5c:	dfc00415 	stw	ra,16(sp)
 800fa60:	df000315 	stw	fp,12(sp)
 800fa64:	dc000215 	stw	r16,8(sp)
 800fa68:	df000304 	addi	fp,sp,12
 800fa6c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800fa70:	e0bffe17 	ldw	r2,-8(fp)
 800fa74:	10800217 	ldw	r2,8(r2)
 800fa78:	10d00034 	orhi	r3,r2,16384
 800fa7c:	e0bffe17 	ldw	r2,-8(fp)
 800fa80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800fa84:	e03ffd15 	stw	zero,-12(fp)
 800fa88:	00002306 	br	800fb18 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800fa8c:	04020074 	movhi	r16,2049
 800fa90:	84042204 	addi	r16,r16,4232
 800fa94:	e0bffd17 	ldw	r2,-12(fp)
 800fa98:	1009883a 	mov	r4,r2
 800fa9c:	01400304 	movi	r5,12
 800faa0:	800ad900 	call	800ad90 <__mulsi3>
 800faa4:	8085883a 	add	r2,r16,r2
 800faa8:	10c00017 	ldw	r3,0(r2)
 800faac:	e0bffe17 	ldw	r2,-8(fp)
 800fab0:	10800017 	ldw	r2,0(r2)
 800fab4:	1880151e 	bne	r3,r2,800fb0c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800fab8:	04020074 	movhi	r16,2049
 800fabc:	84042204 	addi	r16,r16,4232
 800fac0:	e0bffd17 	ldw	r2,-12(fp)
 800fac4:	1009883a 	mov	r4,r2
 800fac8:	01400304 	movi	r5,12
 800facc:	800ad900 	call	800ad90 <__mulsi3>
 800fad0:	8085883a 	add	r2,r16,r2
 800fad4:	10800204 	addi	r2,r2,8
 800fad8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800fadc:	10000b0e 	bge	r2,zero,800fb0c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800fae0:	e13ffd17 	ldw	r4,-12(fp)
 800fae4:	01400304 	movi	r5,12
 800fae8:	800ad900 	call	800ad90 <__mulsi3>
 800faec:	1007883a 	mov	r3,r2
 800faf0:	00820074 	movhi	r2,2049
 800faf4:	10842204 	addi	r2,r2,4232
 800faf8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800fafc:	e0bffe17 	ldw	r2,-8(fp)
 800fb00:	18800226 	beq	r3,r2,800fb0c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800fb04:	00bffcc4 	movi	r2,-13
 800fb08:	00000a06 	br	800fb34 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800fb0c:	e0bffd17 	ldw	r2,-12(fp)
 800fb10:	10800044 	addi	r2,r2,1
 800fb14:	e0bffd15 	stw	r2,-12(fp)
 800fb18:	00820074 	movhi	r2,2049
 800fb1c:	1088af04 	addi	r2,r2,8892
 800fb20:	10800017 	ldw	r2,0(r2)
 800fb24:	1007883a 	mov	r3,r2
 800fb28:	e0bffd17 	ldw	r2,-12(fp)
 800fb2c:	18bfd72e 	bgeu	r3,r2,800fa8c <__alt_data_end+0xfc00fa8c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800fb30:	0005883a 	mov	r2,zero
}
 800fb34:	e6ffff04 	addi	sp,fp,-4
 800fb38:	dfc00217 	ldw	ra,8(sp)
 800fb3c:	df000117 	ldw	fp,4(sp)
 800fb40:	dc000017 	ldw	r16,0(sp)
 800fb44:	dec00304 	addi	sp,sp,12
 800fb48:	f800283a 	ret

0800fb4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800fb4c:	defff604 	addi	sp,sp,-40
 800fb50:	dfc00915 	stw	ra,36(sp)
 800fb54:	df000815 	stw	fp,32(sp)
 800fb58:	df000804 	addi	fp,sp,32
 800fb5c:	e13ffd15 	stw	r4,-12(fp)
 800fb60:	e17ffe15 	stw	r5,-8(fp)
 800fb64:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800fb68:	00bfffc4 	movi	r2,-1
 800fb6c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800fb70:	00bffb44 	movi	r2,-19
 800fb74:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800fb78:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800fb7c:	e13ffd17 	ldw	r4,-12(fp)
 800fb80:	01420074 	movhi	r5,2049
 800fb84:	2948ad04 	addi	r5,r5,8884
 800fb88:	800f5340 	call	800f534 <alt_find_dev>
 800fb8c:	e0bff815 	stw	r2,-32(fp)
 800fb90:	e0bff817 	ldw	r2,-32(fp)
 800fb94:	1000051e 	bne	r2,zero,800fbac <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800fb98:	e13ffd17 	ldw	r4,-12(fp)
 800fb9c:	800fe680 	call	800fe68 <alt_find_file>
 800fba0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800fba4:	00800044 	movi	r2,1
 800fba8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800fbac:	e0bff817 	ldw	r2,-32(fp)
 800fbb0:	10002b26 	beq	r2,zero,800fc60 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800fbb4:	e13ff817 	ldw	r4,-32(fp)
 800fbb8:	800ff7c0 	call	800ff7c <alt_get_fd>
 800fbbc:	e0bff915 	stw	r2,-28(fp)
 800fbc0:	e0bff917 	ldw	r2,-28(fp)
 800fbc4:	1000030e 	bge	r2,zero,800fbd4 <open+0x88>
    {
      status = index;
 800fbc8:	e0bff917 	ldw	r2,-28(fp)
 800fbcc:	e0bffa15 	stw	r2,-24(fp)
 800fbd0:	00002506 	br	800fc68 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 800fbd4:	e13ff917 	ldw	r4,-28(fp)
 800fbd8:	01400304 	movi	r5,12
 800fbdc:	800ad900 	call	800ad90 <__mulsi3>
 800fbe0:	1007883a 	mov	r3,r2
 800fbe4:	00820074 	movhi	r2,2049
 800fbe8:	10842204 	addi	r2,r2,4232
 800fbec:	1885883a 	add	r2,r3,r2
 800fbf0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800fbf4:	e0fffe17 	ldw	r3,-8(fp)
 800fbf8:	00900034 	movhi	r2,16384
 800fbfc:	10bfffc4 	addi	r2,r2,-1
 800fc00:	1886703a 	and	r3,r3,r2
 800fc04:	e0bffc17 	ldw	r2,-16(fp)
 800fc08:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800fc0c:	e0bffb17 	ldw	r2,-20(fp)
 800fc10:	1000051e 	bne	r2,zero,800fc28 <open+0xdc>
 800fc14:	e13ffc17 	ldw	r4,-16(fp)
 800fc18:	800fa580 	call	800fa58 <alt_file_locked>
 800fc1c:	e0bffa15 	stw	r2,-24(fp)
 800fc20:	e0bffa17 	ldw	r2,-24(fp)
 800fc24:	10001016 	blt	r2,zero,800fc68 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800fc28:	e0bff817 	ldw	r2,-32(fp)
 800fc2c:	10800317 	ldw	r2,12(r2)
 800fc30:	10000826 	beq	r2,zero,800fc54 <open+0x108>
 800fc34:	e0bff817 	ldw	r2,-32(fp)
 800fc38:	10800317 	ldw	r2,12(r2)
 800fc3c:	e13ffc17 	ldw	r4,-16(fp)
 800fc40:	e17ffd17 	ldw	r5,-12(fp)
 800fc44:	e1bffe17 	ldw	r6,-8(fp)
 800fc48:	e1ffff17 	ldw	r7,-4(fp)
 800fc4c:	103ee83a 	callr	r2
 800fc50:	00000106 	br	800fc58 <open+0x10c>
 800fc54:	0005883a 	mov	r2,zero
 800fc58:	e0bffa15 	stw	r2,-24(fp)
 800fc5c:	00000206 	br	800fc68 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800fc60:	00bffb44 	movi	r2,-19
 800fc64:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800fc68:	e0bffa17 	ldw	r2,-24(fp)
 800fc6c:	1000090e 	bge	r2,zero,800fc94 <open+0x148>
  {
    alt_release_fd (index);  
 800fc70:	e13ff917 	ldw	r4,-28(fp)
 800fc74:	800dd280 	call	800dd28 <alt_release_fd>
    ALT_ERRNO = -status;
 800fc78:	800fa080 	call	800fa08 <alt_get_errno>
 800fc7c:	1007883a 	mov	r3,r2
 800fc80:	e0bffa17 	ldw	r2,-24(fp)
 800fc84:	0085c83a 	sub	r2,zero,r2
 800fc88:	18800015 	stw	r2,0(r3)
    return -1;
 800fc8c:	00bfffc4 	movi	r2,-1
 800fc90:	00000106 	br	800fc98 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 800fc94:	e0bff917 	ldw	r2,-28(fp)
}
 800fc98:	e037883a 	mov	sp,fp
 800fc9c:	dfc00117 	ldw	ra,4(sp)
 800fca0:	df000017 	ldw	fp,0(sp)
 800fca4:	dec00204 	addi	sp,sp,8
 800fca8:	f800283a 	ret

0800fcac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800fcac:	defffa04 	addi	sp,sp,-24
 800fcb0:	df000515 	stw	fp,20(sp)
 800fcb4:	df000504 	addi	fp,sp,20
 800fcb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fcbc:	0005303a 	rdctl	r2,status
 800fcc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fcc4:	e0fffc17 	ldw	r3,-16(fp)
 800fcc8:	00bfff84 	movi	r2,-2
 800fccc:	1884703a 	and	r2,r3,r2
 800fcd0:	1001703a 	wrctl	status,r2
  
  return context;
 800fcd4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800fcd8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800fcdc:	e0bfff17 	ldw	r2,-4(fp)
 800fce0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800fce4:	e0bffd17 	ldw	r2,-12(fp)
 800fce8:	10800017 	ldw	r2,0(r2)
 800fcec:	e0fffd17 	ldw	r3,-12(fp)
 800fcf0:	18c00117 	ldw	r3,4(r3)
 800fcf4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800fcf8:	e0bffd17 	ldw	r2,-12(fp)
 800fcfc:	10800117 	ldw	r2,4(r2)
 800fd00:	e0fffd17 	ldw	r3,-12(fp)
 800fd04:	18c00017 	ldw	r3,0(r3)
 800fd08:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800fd0c:	e0bffd17 	ldw	r2,-12(fp)
 800fd10:	e0fffd17 	ldw	r3,-12(fp)
 800fd14:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800fd18:	e0bffd17 	ldw	r2,-12(fp)
 800fd1c:	e0fffd17 	ldw	r3,-12(fp)
 800fd20:	10c00015 	stw	r3,0(r2)
 800fd24:	e0bffb17 	ldw	r2,-20(fp)
 800fd28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fd2c:	e0bffe17 	ldw	r2,-8(fp)
 800fd30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800fd34:	e037883a 	mov	sp,fp
 800fd38:	df000017 	ldw	fp,0(sp)
 800fd3c:	dec00104 	addi	sp,sp,4
 800fd40:	f800283a 	ret

0800fd44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800fd44:	defffb04 	addi	sp,sp,-20
 800fd48:	dfc00415 	stw	ra,16(sp)
 800fd4c:	df000315 	stw	fp,12(sp)
 800fd50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800fd54:	d0a00e17 	ldw	r2,-32712(gp)
 800fd58:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800fd5c:	d0a6e517 	ldw	r2,-25708(gp)
 800fd60:	10800044 	addi	r2,r2,1
 800fd64:	d0a6e515 	stw	r2,-25708(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800fd68:	00002e06 	br	800fe24 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800fd6c:	e0bffd17 	ldw	r2,-12(fp)
 800fd70:	10800017 	ldw	r2,0(r2)
 800fd74:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800fd78:	e0bffd17 	ldw	r2,-12(fp)
 800fd7c:	10800403 	ldbu	r2,16(r2)
 800fd80:	10803fcc 	andi	r2,r2,255
 800fd84:	10000426 	beq	r2,zero,800fd98 <alt_tick+0x54>
 800fd88:	d0a6e517 	ldw	r2,-25708(gp)
 800fd8c:	1000021e 	bne	r2,zero,800fd98 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800fd90:	e0bffd17 	ldw	r2,-12(fp)
 800fd94:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800fd98:	e0bffd17 	ldw	r2,-12(fp)
 800fd9c:	10800217 	ldw	r2,8(r2)
 800fda0:	d0e6e517 	ldw	r3,-25708(gp)
 800fda4:	18801d36 	bltu	r3,r2,800fe1c <alt_tick+0xd8>
 800fda8:	e0bffd17 	ldw	r2,-12(fp)
 800fdac:	10800403 	ldbu	r2,16(r2)
 800fdb0:	10803fcc 	andi	r2,r2,255
 800fdb4:	1000191e 	bne	r2,zero,800fe1c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800fdb8:	e0bffd17 	ldw	r2,-12(fp)
 800fdbc:	10800317 	ldw	r2,12(r2)
 800fdc0:	e0fffd17 	ldw	r3,-12(fp)
 800fdc4:	18c00517 	ldw	r3,20(r3)
 800fdc8:	1809883a 	mov	r4,r3
 800fdcc:	103ee83a 	callr	r2
 800fdd0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800fdd4:	e0bfff17 	ldw	r2,-4(fp)
 800fdd8:	1000031e 	bne	r2,zero,800fde8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800fddc:	e13ffd17 	ldw	r4,-12(fp)
 800fde0:	800fcac0 	call	800fcac <alt_alarm_stop>
 800fde4:	00000d06 	br	800fe1c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800fde8:	e0bffd17 	ldw	r2,-12(fp)
 800fdec:	10c00217 	ldw	r3,8(r2)
 800fdf0:	e0bfff17 	ldw	r2,-4(fp)
 800fdf4:	1887883a 	add	r3,r3,r2
 800fdf8:	e0bffd17 	ldw	r2,-12(fp)
 800fdfc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800fe00:	e0bffd17 	ldw	r2,-12(fp)
 800fe04:	10c00217 	ldw	r3,8(r2)
 800fe08:	d0a6e517 	ldw	r2,-25708(gp)
 800fe0c:	1880032e 	bgeu	r3,r2,800fe1c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800fe10:	e0bffd17 	ldw	r2,-12(fp)
 800fe14:	00c00044 	movi	r3,1
 800fe18:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800fe1c:	e0bffe17 	ldw	r2,-8(fp)
 800fe20:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800fe24:	e0fffd17 	ldw	r3,-12(fp)
 800fe28:	d0a00e04 	addi	r2,gp,-32712
 800fe2c:	18bfcf1e 	bne	r3,r2,800fd6c <__alt_data_end+0xfc00fd6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800fe30:	0001883a 	nop
}
 800fe34:	e037883a 	mov	sp,fp
 800fe38:	dfc00117 	ldw	ra,4(sp)
 800fe3c:	df000017 	ldw	fp,0(sp)
 800fe40:	dec00204 	addi	sp,sp,8
 800fe44:	f800283a 	ret

0800fe48 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800fe48:	deffff04 	addi	sp,sp,-4
 800fe4c:	df000015 	stw	fp,0(sp)
 800fe50:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800fe54:	000170fa 	wrctl	ienable,zero
}
 800fe58:	e037883a 	mov	sp,fp
 800fe5c:	df000017 	ldw	fp,0(sp)
 800fe60:	dec00104 	addi	sp,sp,4
 800fe64:	f800283a 	ret

0800fe68 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800fe68:	defffb04 	addi	sp,sp,-20
 800fe6c:	dfc00415 	stw	ra,16(sp)
 800fe70:	df000315 	stw	fp,12(sp)
 800fe74:	df000304 	addi	fp,sp,12
 800fe78:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800fe7c:	00820074 	movhi	r2,2049
 800fe80:	1088ab04 	addi	r2,r2,8876
 800fe84:	10800017 	ldw	r2,0(r2)
 800fe88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800fe8c:	00003106 	br	800ff54 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 800fe90:	e0bffd17 	ldw	r2,-12(fp)
 800fe94:	10800217 	ldw	r2,8(r2)
 800fe98:	1009883a 	mov	r4,r2
 800fe9c:	8000d840 	call	8000d84 <strlen>
 800fea0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800fea4:	e0bffd17 	ldw	r2,-12(fp)
 800fea8:	10c00217 	ldw	r3,8(r2)
 800feac:	e0bffe17 	ldw	r2,-8(fp)
 800feb0:	10bfffc4 	addi	r2,r2,-1
 800feb4:	1885883a 	add	r2,r3,r2
 800feb8:	10800003 	ldbu	r2,0(r2)
 800febc:	10803fcc 	andi	r2,r2,255
 800fec0:	1080201c 	xori	r2,r2,128
 800fec4:	10bfe004 	addi	r2,r2,-128
 800fec8:	10800bd8 	cmpnei	r2,r2,47
 800fecc:	1000031e 	bne	r2,zero,800fedc <alt_find_file+0x74>
    {
      len -= 1;
 800fed0:	e0bffe17 	ldw	r2,-8(fp)
 800fed4:	10bfffc4 	addi	r2,r2,-1
 800fed8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800fedc:	e0bffe17 	ldw	r2,-8(fp)
 800fee0:	e0ffff17 	ldw	r3,-4(fp)
 800fee4:	1885883a 	add	r2,r3,r2
 800fee8:	10800003 	ldbu	r2,0(r2)
 800feec:	10803fcc 	andi	r2,r2,255
 800fef0:	1080201c 	xori	r2,r2,128
 800fef4:	10bfe004 	addi	r2,r2,-128
 800fef8:	10800be0 	cmpeqi	r2,r2,47
 800fefc:	1000081e 	bne	r2,zero,800ff20 <alt_find_file+0xb8>
 800ff00:	e0bffe17 	ldw	r2,-8(fp)
 800ff04:	e0ffff17 	ldw	r3,-4(fp)
 800ff08:	1885883a 	add	r2,r3,r2
 800ff0c:	10800003 	ldbu	r2,0(r2)
 800ff10:	10803fcc 	andi	r2,r2,255
 800ff14:	1080201c 	xori	r2,r2,128
 800ff18:	10bfe004 	addi	r2,r2,-128
 800ff1c:	10000a1e 	bne	r2,zero,800ff48 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800ff20:	e0bffd17 	ldw	r2,-12(fp)
 800ff24:	10c00217 	ldw	r3,8(r2)
 800ff28:	e0bffe17 	ldw	r2,-8(fp)
 800ff2c:	1809883a 	mov	r4,r3
 800ff30:	e17fff17 	ldw	r5,-4(fp)
 800ff34:	100d883a 	mov	r6,r2
 800ff38:	801009c0 	call	801009c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800ff3c:	1000021e 	bne	r2,zero,800ff48 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800ff40:	e0bffd17 	ldw	r2,-12(fp)
 800ff44:	00000806 	br	800ff68 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 800ff48:	e0bffd17 	ldw	r2,-12(fp)
 800ff4c:	10800017 	ldw	r2,0(r2)
 800ff50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800ff54:	e0fffd17 	ldw	r3,-12(fp)
 800ff58:	00820074 	movhi	r2,2049
 800ff5c:	1088ab04 	addi	r2,r2,8876
 800ff60:	18bfcb1e 	bne	r3,r2,800fe90 <__alt_data_end+0xfc00fe90>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800ff64:	0005883a 	mov	r2,zero
}
 800ff68:	e037883a 	mov	sp,fp
 800ff6c:	dfc00117 	ldw	ra,4(sp)
 800ff70:	df000017 	ldw	fp,0(sp)
 800ff74:	dec00204 	addi	sp,sp,8
 800ff78:	f800283a 	ret

0800ff7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800ff7c:	defffa04 	addi	sp,sp,-24
 800ff80:	dfc00515 	stw	ra,20(sp)
 800ff84:	df000415 	stw	fp,16(sp)
 800ff88:	dc000315 	stw	r16,12(sp)
 800ff8c:	df000404 	addi	fp,sp,16
 800ff90:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800ff94:	00bffa04 	movi	r2,-24
 800ff98:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800ff9c:	e03ffc15 	stw	zero,-16(fp)
 800ffa0:	00002106 	br	8010028 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 800ffa4:	04020074 	movhi	r16,2049
 800ffa8:	84042204 	addi	r16,r16,4232
 800ffac:	e0bffc17 	ldw	r2,-16(fp)
 800ffb0:	1009883a 	mov	r4,r2
 800ffb4:	01400304 	movi	r5,12
 800ffb8:	800ad900 	call	800ad90 <__mulsi3>
 800ffbc:	8085883a 	add	r2,r16,r2
 800ffc0:	10800017 	ldw	r2,0(r2)
 800ffc4:	1000151e 	bne	r2,zero,801001c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 800ffc8:	04020074 	movhi	r16,2049
 800ffcc:	84042204 	addi	r16,r16,4232
 800ffd0:	e0bffc17 	ldw	r2,-16(fp)
 800ffd4:	1009883a 	mov	r4,r2
 800ffd8:	01400304 	movi	r5,12
 800ffdc:	800ad900 	call	800ad90 <__mulsi3>
 800ffe0:	8085883a 	add	r2,r16,r2
 800ffe4:	e0fffe17 	ldw	r3,-8(fp)
 800ffe8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800ffec:	00820074 	movhi	r2,2049
 800fff0:	1088af04 	addi	r2,r2,8892
 800fff4:	10c00017 	ldw	r3,0(r2)
 800fff8:	e0bffc17 	ldw	r2,-16(fp)
 800fffc:	1880040e 	bge	r3,r2,8010010 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8010000:	00820074 	movhi	r2,2049
 8010004:	1088af04 	addi	r2,r2,8892
 8010008:	e0fffc17 	ldw	r3,-16(fp)
 801000c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8010010:	e0bffc17 	ldw	r2,-16(fp)
 8010014:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8010018:	00000606 	br	8010034 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801001c:	e0bffc17 	ldw	r2,-16(fp)
 8010020:	10800044 	addi	r2,r2,1
 8010024:	e0bffc15 	stw	r2,-16(fp)
 8010028:	e0bffc17 	ldw	r2,-16(fp)
 801002c:	10800810 	cmplti	r2,r2,32
 8010030:	103fdc1e 	bne	r2,zero,800ffa4 <__alt_data_end+0xfc00ffa4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8010034:	e0bffd17 	ldw	r2,-12(fp)
}
 8010038:	e6ffff04 	addi	sp,fp,-4
 801003c:	dfc00217 	ldw	ra,8(sp)
 8010040:	df000117 	ldw	fp,4(sp)
 8010044:	dc000017 	ldw	r16,0(sp)
 8010048:	dec00304 	addi	sp,sp,12
 801004c:	f800283a 	ret

08010050 <atexit>:
 8010050:	200b883a 	mov	r5,r4
 8010054:	000d883a 	mov	r6,zero
 8010058:	0009883a 	mov	r4,zero
 801005c:	000f883a 	mov	r7,zero
 8010060:	80101181 	jmpi	8010118 <__register_exitproc>

08010064 <exit>:
 8010064:	defffe04 	addi	sp,sp,-8
 8010068:	000b883a 	mov	r5,zero
 801006c:	dc000015 	stw	r16,0(sp)
 8010070:	dfc00115 	stw	ra,4(sp)
 8010074:	2021883a 	mov	r16,r4
 8010078:	801022c0 	call	801022c <__call_exitprocs>
 801007c:	00820074 	movhi	r2,2049
 8010080:	1088a504 	addi	r2,r2,8852
 8010084:	11000017 	ldw	r4,0(r2)
 8010088:	20800f17 	ldw	r2,60(r4)
 801008c:	10000126 	beq	r2,zero,8010094 <exit+0x30>
 8010090:	103ee83a 	callr	r2
 8010094:	8009883a 	mov	r4,r16
 8010098:	80103c00 	call	80103c0 <_exit>

0801009c <memcmp>:
 801009c:	01c000c4 	movi	r7,3
 80100a0:	3980192e 	bgeu	r7,r6,8010108 <memcmp+0x6c>
 80100a4:	2144b03a 	or	r2,r4,r5
 80100a8:	11c4703a 	and	r2,r2,r7
 80100ac:	10000f26 	beq	r2,zero,80100ec <memcmp+0x50>
 80100b0:	20800003 	ldbu	r2,0(r4)
 80100b4:	28c00003 	ldbu	r3,0(r5)
 80100b8:	10c0151e 	bne	r2,r3,8010110 <memcmp+0x74>
 80100bc:	31bfff84 	addi	r6,r6,-2
 80100c0:	01ffffc4 	movi	r7,-1
 80100c4:	00000406 	br	80100d8 <memcmp+0x3c>
 80100c8:	20800003 	ldbu	r2,0(r4)
 80100cc:	28c00003 	ldbu	r3,0(r5)
 80100d0:	31bfffc4 	addi	r6,r6,-1
 80100d4:	10c00e1e 	bne	r2,r3,8010110 <memcmp+0x74>
 80100d8:	21000044 	addi	r4,r4,1
 80100dc:	29400044 	addi	r5,r5,1
 80100e0:	31fff91e 	bne	r6,r7,80100c8 <__alt_data_end+0xfc0100c8>
 80100e4:	0005883a 	mov	r2,zero
 80100e8:	f800283a 	ret
 80100ec:	20c00017 	ldw	r3,0(r4)
 80100f0:	28800017 	ldw	r2,0(r5)
 80100f4:	1880041e 	bne	r3,r2,8010108 <memcmp+0x6c>
 80100f8:	31bfff04 	addi	r6,r6,-4
 80100fc:	21000104 	addi	r4,r4,4
 8010100:	29400104 	addi	r5,r5,4
 8010104:	39bff936 	bltu	r7,r6,80100ec <__alt_data_end+0xfc0100ec>
 8010108:	303fe91e 	bne	r6,zero,80100b0 <__alt_data_end+0xfc0100b0>
 801010c:	003ff506 	br	80100e4 <__alt_data_end+0xfc0100e4>
 8010110:	10c5c83a 	sub	r2,r2,r3
 8010114:	f800283a 	ret

08010118 <__register_exitproc>:
 8010118:	00820074 	movhi	r2,2049
 801011c:	defffa04 	addi	sp,sp,-24
 8010120:	1088a504 	addi	r2,r2,8852
 8010124:	dc000315 	stw	r16,12(sp)
 8010128:	14000017 	ldw	r16,0(r2)
 801012c:	dc400415 	stw	r17,16(sp)
 8010130:	dfc00515 	stw	ra,20(sp)
 8010134:	80805217 	ldw	r2,328(r16)
 8010138:	2023883a 	mov	r17,r4
 801013c:	10003626 	beq	r2,zero,8010218 <__register_exitproc+0x100>
 8010140:	10c00117 	ldw	r3,4(r2)
 8010144:	010007c4 	movi	r4,31
 8010148:	20c00e16 	blt	r4,r3,8010184 <__register_exitproc+0x6c>
 801014c:	1a400044 	addi	r9,r3,1
 8010150:	8800211e 	bne	r17,zero,80101d8 <__register_exitproc+0xc0>
 8010154:	18c00084 	addi	r3,r3,2
 8010158:	18c7883a 	add	r3,r3,r3
 801015c:	18c7883a 	add	r3,r3,r3
 8010160:	12400115 	stw	r9,4(r2)
 8010164:	10c7883a 	add	r3,r2,r3
 8010168:	19400015 	stw	r5,0(r3)
 801016c:	0005883a 	mov	r2,zero
 8010170:	dfc00517 	ldw	ra,20(sp)
 8010174:	dc400417 	ldw	r17,16(sp)
 8010178:	dc000317 	ldw	r16,12(sp)
 801017c:	dec00604 	addi	sp,sp,24
 8010180:	f800283a 	ret
 8010184:	00800034 	movhi	r2,0
 8010188:	10800004 	addi	r2,r2,0
 801018c:	10002526 	beq	r2,zero,8010224 <__register_exitproc+0x10c>
 8010190:	01006404 	movi	r4,400
 8010194:	d9400015 	stw	r5,0(sp)
 8010198:	d9800115 	stw	r6,4(sp)
 801019c:	d9c00215 	stw	r7,8(sp)
 80101a0:	00000000 	call	0 <__reset-0x8000000>
 80101a4:	d9400017 	ldw	r5,0(sp)
 80101a8:	d9800117 	ldw	r6,4(sp)
 80101ac:	d9c00217 	ldw	r7,8(sp)
 80101b0:	10001c26 	beq	r2,zero,8010224 <__register_exitproc+0x10c>
 80101b4:	80c05217 	ldw	r3,328(r16)
 80101b8:	10000115 	stw	zero,4(r2)
 80101bc:	02400044 	movi	r9,1
 80101c0:	10c00015 	stw	r3,0(r2)
 80101c4:	80805215 	stw	r2,328(r16)
 80101c8:	10006215 	stw	zero,392(r2)
 80101cc:	10006315 	stw	zero,396(r2)
 80101d0:	0007883a 	mov	r3,zero
 80101d4:	883fdf26 	beq	r17,zero,8010154 <__alt_data_end+0xfc010154>
 80101d8:	18d1883a 	add	r8,r3,r3
 80101dc:	4211883a 	add	r8,r8,r8
 80101e0:	1211883a 	add	r8,r2,r8
 80101e4:	41802215 	stw	r6,136(r8)
 80101e8:	01000044 	movi	r4,1
 80101ec:	11806217 	ldw	r6,392(r2)
 80101f0:	20c8983a 	sll	r4,r4,r3
 80101f4:	310cb03a 	or	r6,r6,r4
 80101f8:	11806215 	stw	r6,392(r2)
 80101fc:	41c04215 	stw	r7,264(r8)
 8010200:	01800084 	movi	r6,2
 8010204:	89bfd31e 	bne	r17,r6,8010154 <__alt_data_end+0xfc010154>
 8010208:	11806317 	ldw	r6,396(r2)
 801020c:	3108b03a 	or	r4,r6,r4
 8010210:	11006315 	stw	r4,396(r2)
 8010214:	003fcf06 	br	8010154 <__alt_data_end+0xfc010154>
 8010218:	80805304 	addi	r2,r16,332
 801021c:	80805215 	stw	r2,328(r16)
 8010220:	003fc706 	br	8010140 <__alt_data_end+0xfc010140>
 8010224:	00bfffc4 	movi	r2,-1
 8010228:	003fd106 	br	8010170 <__alt_data_end+0xfc010170>

0801022c <__call_exitprocs>:
 801022c:	00820074 	movhi	r2,2049
 8010230:	1088a504 	addi	r2,r2,8852
 8010234:	10800017 	ldw	r2,0(r2)
 8010238:	defff404 	addi	sp,sp,-48
 801023c:	dd800815 	stw	r22,32(sp)
 8010240:	d8800015 	stw	r2,0(sp)
 8010244:	10805204 	addi	r2,r2,328
 8010248:	dd000615 	stw	r20,24(sp)
 801024c:	dc800415 	stw	r18,16(sp)
 8010250:	dfc00b15 	stw	ra,44(sp)
 8010254:	df000a15 	stw	fp,40(sp)
 8010258:	ddc00915 	stw	r23,36(sp)
 801025c:	dd400715 	stw	r21,28(sp)
 8010260:	dcc00515 	stw	r19,20(sp)
 8010264:	dc400315 	stw	r17,12(sp)
 8010268:	dc000215 	stw	r16,8(sp)
 801026c:	2025883a 	mov	r18,r4
 8010270:	2829883a 	mov	r20,r5
 8010274:	d8800115 	stw	r2,4(sp)
 8010278:	05bfffc4 	movi	r22,-1
 801027c:	d8800017 	ldw	r2,0(sp)
 8010280:	14c05217 	ldw	r19,328(r2)
 8010284:	98001d26 	beq	r19,zero,80102fc <__call_exitprocs+0xd0>
 8010288:	dd400117 	ldw	r21,4(sp)
 801028c:	98800117 	ldw	r2,4(r19)
 8010290:	173fffc4 	addi	fp,r2,-1
 8010294:	e0000d16 	blt	fp,zero,80102cc <__call_exitprocs+0xa0>
 8010298:	14000044 	addi	r16,r2,1
 801029c:	8421883a 	add	r16,r16,r16
 80102a0:	8421883a 	add	r16,r16,r16
 80102a4:	84402004 	addi	r17,r16,128
 80102a8:	9c63883a 	add	r17,r19,r17
 80102ac:	9c21883a 	add	r16,r19,r16
 80102b0:	a0001e26 	beq	r20,zero,801032c <__call_exitprocs+0x100>
 80102b4:	80804017 	ldw	r2,256(r16)
 80102b8:	15001c26 	beq	r2,r20,801032c <__call_exitprocs+0x100>
 80102bc:	e73fffc4 	addi	fp,fp,-1
 80102c0:	843fff04 	addi	r16,r16,-4
 80102c4:	8c7fff04 	addi	r17,r17,-4
 80102c8:	e5bff91e 	bne	fp,r22,80102b0 <__alt_data_end+0xfc0102b0>
 80102cc:	00800034 	movhi	r2,0
 80102d0:	10800004 	addi	r2,r2,0
 80102d4:	10000926 	beq	r2,zero,80102fc <__call_exitprocs+0xd0>
 80102d8:	98800117 	ldw	r2,4(r19)
 80102dc:	1000311e 	bne	r2,zero,80103a4 <__call_exitprocs+0x178>
 80102e0:	98800017 	ldw	r2,0(r19)
 80102e4:	10003426 	beq	r2,zero,80103b8 <__call_exitprocs+0x18c>
 80102e8:	9809883a 	mov	r4,r19
 80102ec:	a8800015 	stw	r2,0(r21)
 80102f0:	00000000 	call	0 <__reset-0x8000000>
 80102f4:	acc00017 	ldw	r19,0(r21)
 80102f8:	983fe41e 	bne	r19,zero,801028c <__alt_data_end+0xfc01028c>
 80102fc:	dfc00b17 	ldw	ra,44(sp)
 8010300:	df000a17 	ldw	fp,40(sp)
 8010304:	ddc00917 	ldw	r23,36(sp)
 8010308:	dd800817 	ldw	r22,32(sp)
 801030c:	dd400717 	ldw	r21,28(sp)
 8010310:	dd000617 	ldw	r20,24(sp)
 8010314:	dcc00517 	ldw	r19,20(sp)
 8010318:	dc800417 	ldw	r18,16(sp)
 801031c:	dc400317 	ldw	r17,12(sp)
 8010320:	dc000217 	ldw	r16,8(sp)
 8010324:	dec00c04 	addi	sp,sp,48
 8010328:	f800283a 	ret
 801032c:	98800117 	ldw	r2,4(r19)
 8010330:	80c00017 	ldw	r3,0(r16)
 8010334:	10bfffc4 	addi	r2,r2,-1
 8010338:	17001526 	beq	r2,fp,8010390 <__call_exitprocs+0x164>
 801033c:	80000015 	stw	zero,0(r16)
 8010340:	183fde26 	beq	r3,zero,80102bc <__alt_data_end+0xfc0102bc>
 8010344:	00800044 	movi	r2,1
 8010348:	1708983a 	sll	r4,r2,fp
 801034c:	98806217 	ldw	r2,392(r19)
 8010350:	9dc00117 	ldw	r23,4(r19)
 8010354:	2084703a 	and	r2,r4,r2
 8010358:	1000061e 	bne	r2,zero,8010374 <__call_exitprocs+0x148>
 801035c:	183ee83a 	callr	r3
 8010360:	98800117 	ldw	r2,4(r19)
 8010364:	15ffc51e 	bne	r2,r23,801027c <__alt_data_end+0xfc01027c>
 8010368:	a8800017 	ldw	r2,0(r21)
 801036c:	14ffd326 	beq	r2,r19,80102bc <__alt_data_end+0xfc0102bc>
 8010370:	003fc206 	br	801027c <__alt_data_end+0xfc01027c>
 8010374:	98806317 	ldw	r2,396(r19)
 8010378:	2084703a 	and	r2,r4,r2
 801037c:	1000061e 	bne	r2,zero,8010398 <__call_exitprocs+0x16c>
 8010380:	89400017 	ldw	r5,0(r17)
 8010384:	9009883a 	mov	r4,r18
 8010388:	183ee83a 	callr	r3
 801038c:	003ff406 	br	8010360 <__alt_data_end+0xfc010360>
 8010390:	9f000115 	stw	fp,4(r19)
 8010394:	003fea06 	br	8010340 <__alt_data_end+0xfc010340>
 8010398:	89000017 	ldw	r4,0(r17)
 801039c:	183ee83a 	callr	r3
 80103a0:	003fef06 	br	8010360 <__alt_data_end+0xfc010360>
 80103a4:	98800017 	ldw	r2,0(r19)
 80103a8:	982b883a 	mov	r21,r19
 80103ac:	1027883a 	mov	r19,r2
 80103b0:	983fb61e 	bne	r19,zero,801028c <__alt_data_end+0xfc01028c>
 80103b4:	003fd106 	br	80102fc <__alt_data_end+0xfc0102fc>
 80103b8:	0005883a 	mov	r2,zero
 80103bc:	003ffa06 	br	80103a8 <__alt_data_end+0xfc0103a8>

080103c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80103c0:	defffd04 	addi	sp,sp,-12
 80103c4:	df000215 	stw	fp,8(sp)
 80103c8:	df000204 	addi	fp,sp,8
 80103cc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80103d0:	0001883a 	nop
 80103d4:	e0bfff17 	ldw	r2,-4(fp)
 80103d8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80103dc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80103e0:	10000226 	beq	r2,zero,80103ec <_exit+0x2c>
    ALT_SIM_FAIL();
 80103e4:	002af070 	cmpltui	zero,zero,43969
 80103e8:	00000106 	br	80103f0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80103ec:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80103f0:	003fff06 	br	80103f0 <__alt_data_end+0xfc0103f0>
