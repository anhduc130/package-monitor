
Exercise_9.elf:     file format elf32-littlenios2
Exercise_9.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000104f4 memsz 0x000104f4 flags r-x
    LOAD off    0x00011514 vaddr 0x08010514 paddr 0x0801202c align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00013b44 vaddr 0x08013b44 paddr 0x08013b44 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ffac  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003ac  08010168  08010168  00011168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  08010514  0801202c  00011514  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  08013b44  08013b44  00013b44  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08013ca0  08013ca0  0001302c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001302c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d08  00000000  00000000  00013050  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023c66  00000000  00000000  00013d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000090bc  00000000  00000000  000379be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b0a6  00000000  00000000  00040a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000024a4  00000000  00000000  0004bb20  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000351b  00000000  00000000  0004dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016d4c  00000000  00000000  000514df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0006822c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001370  00000000  00000000  00068240  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ca92  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006ca95  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006caa1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006caa2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006caa3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006caae  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006cab9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006cac4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000016  00000000  00000000  0006cacf  2**0
                  CONTENTS, READONLY
 26 .jdi          0000437f  00000000  00000000  0006cae5  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b8c6  00000000  00000000  00070e64  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08010168 l    d  .rodata	00000000 .rodata
08010514 l    d  .rwdata	00000000 .rwdata
08013b44 l    d  .bss	00000000 .bss
08013ca0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Exercise_9_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 serial.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08001ec8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08010342 l     O .rodata	00000010 zeroes.4181
08010352 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08004438 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005fe0 l     F .text	00000008 __fp_lock
08005fe8 l     F .text	00000008 __fp_unlock
08005ffc l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08010514 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08010958 l     O .rwdata	00000020 lc_ctype_charset
08010938 l     O .rwdata	00000020 lc_message_charset
08010978 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08010384 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800952c l     F .text	000000fc __sprint_r.part.0
080104b8 l     O .rodata	00000010 blanks.4125
080104a8 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0800d4b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800d5d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d604 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d70c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d808 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d8ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800dad0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801201c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800dd54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800dea4 l     F .text	00000038 alt_dev_reg
08010f60 l     O .rwdata	00001060 jtag_uart_0
08011fc0 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800e1a8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800e3ac l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800e9cc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800f0fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800f624 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800f77c l     F .text	00000050 alt_get_errno
0800f7cc l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08008b6c g     F .text	00000074 _mprec_log10
08008c58 g     F .text	0000008c __any_on
0800af58 g     F .text	00000054 _isatty_r
08010390 g     O .rodata	00000028 __mprec_tinytens
0800da18 g     F .text	00000078 alt_main
08002084 g     F .text	000000b8 _puts_r
08013ba0 g     O .bss	00000100 alt_irq
0800afac g     F .text	0000005c _lseek_r
0801202c g       *ABS*	00000000 __flash_rwdata_start
0800eb3c g     F .text	0000003c alt_up_character_lcd_send_cmd
0800c8cc g     F .text	00000084 .hidden __eqdf2
08013ca0 g       *ABS*	00000000 __alt_heap_start
08002048 g     F .text	0000003c printf
0800b1d4 g     F .text	0000009c _wcrtomb_r
08009424 g     F .text	0000005c __sseek
08006344 g     F .text	00000010 __sinit
0800b064 g     F .text	00000154 __swbuf_r
08006dbc g     F .text	0000007c _setlocale_r
0800619c g     F .text	00000078 __sfmoreglue
0800dab0 g     F .text	00000020 __malloc_unlock
080005a0 g     F .text	0000004c TS_ReadRx
08007a1c g     F .text	0000015c memmove
0800632c g     F .text	00000018 _cleanup
08007c9c g     F .text	000000a8 _Balloc
0800c950 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0800eac8 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800af00 g     F .text	00000058 _fstat_r
08013b5c g     O .bss	00000004 errno
080093a0 g     F .text	00000008 __seofread
08013b64 g     O .bss	00000004 alt_argv
08019fec g       *ABS*	00000000 _gp
08000838 g     F .text	00000050 putcharRS232
08010de0 g     O .rwdata	00000180 alt_fd_list
080008d0 g     F .text	00000038 RS232TestForReceivedData
0800f2a8 g     F .text	00000090 alt_find_dev
080078e4 g     F .text	00000138 memcpy
0800ecd8 g     F .text	00000050 alt_up_character_lcd_write_fd
080007ec g     F .text	0000004c Init_RS232
08005ff0 g     F .text	0000000c _cleanup_r
0800d3e0 g     F .text	000000d0 .hidden __floatsidf
0800f704 g     F .text	00000078 alt_io_redirect
0800ca30 g     F .text	000000e0 .hidden __ltdf2
08010168 g       *ABS*	00000000 __DTOR_END__
0800213c g     F .text	00000014 puts
08009284 g     F .text	00000074 __fpclassifyd
08008ac8 g     F .text	000000a4 __ratio
0800aa64 g     F .text	00000024 __vfiprintf_internal
0800e5a8 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0800201c g     F .text	0000002c _printf_r
08001fe4 g     F .text	00000008 .hidden __udivsi3
0800d75c g     F .text	000000ac isatty
080103e0 g     O .rodata	000000c8 __mprec_tens
08006e38 g     F .text	0000000c __locale_charset
08013b58 g     O .bss	00000004 __malloc_top_pad
08011ff4 g     O .rwdata	00000004 __mb_cur_max
08006e68 g     F .text	0000000c _localeconv_r
080080c4 g     F .text	0000003c __i2b
080067a8 g     F .text	000004a4 __sfvwrite_r
080092f8 g     F .text	00000054 _sbrk_r
0800b008 g     F .text	0000005c _read_r
08012014 g     O .rwdata	00000004 alt_max_fd
0800ac10 g     F .text	00000100 _fclose_r
08000334 g     F .text	0000003c TS_EnableTouch
08005fb0 g     F .text	00000030 fflush
08013b54 g     O .bss	00000004 __malloc_max_sbrked_mem
0800c030 g     F .text	0000089c .hidden __adddf3
08008870 g     F .text	0000011c __b2d
0800ba14 g     F .text	0000061c .hidden __umoddi3
0800d93c g     F .text	000000dc lseek
08011fec g     O .rwdata	00000004 _global_impure_ptr
08008ce4 g     F .text	000005a0 _realloc_r
08013ca0 g       *ABS*	00000000 __bss_end
0800f534 g     F .text	000000f0 alt_iic_isr_register
0800fab8 g     F .text	00000104 alt_tick
0800b3d4 g     F .text	00000640 .hidden __udivdi3
0800ad24 g     F .text	00000184 _fputwc_r
080103b8 g     O .rodata	00000028 __mprec_bigtens
08007ea8 g     F .text	00000104 __s2b
08001dc0 g     F .text	000000a4 .hidden __floatunsidf
08008618 g     F .text	00000060 __mcmp
08006364 g     F .text	00000018 __fp_lock_all
0800f4e8 g     F .text	0000004c alt_ic_irq_enabled
0800fa20 g     F .text	00000098 alt_alarm_stop
08013b6c g     O .bss	00000004 alt_irq_active
080002f8 g     F .text	0000003c TS_DisableTouch
080000ec g     F .exceptions	000000d0 alt_irq_handler
08010db8 g     O .rwdata	00000028 alt_dev_null
0800ef6c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0800f0e0 g     F .text	0000001c alt_dcache_flush_all
08007fac g     F .text	00000068 __hi0bits
08000908 g     F .text	0000004c Wifi_Init
08001d38 g     F .text	00000088 .hidden __fixdfsi
0801202c g       *ABS*	00000000 __ram_rwdata_end
0801200c g     O .rwdata	00000008 alt_dev_list
0800dda4 g     F .text	00000100 write
080002a0 g     F .text	00000058 TS_Init
08010514 g       *ABS*	00000000 __ram_rodata_end
0800d654 g     F .text	000000b8 fstat
0800ca30 g     F .text	000000e0 .hidden __ledf2
08008390 g     F .text	00000140 __pow5mult
08009640 g     F .text	00001424 ___vfiprintf_internal_r
08013b4c g     O .bss	00000004 __nlocale_changed
08001fec g     F .text	00000008 .hidden __umodsi3
08013ca0 g       *ABS*	00000000 end
0800e0e4 g     F .text	000000c4 altera_avalon_jtag_uart_init
0800063c g     F .text	000001b0 TS_GetRelease
08010168 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800ea40 g     F .text	00000088 alt_avalon_timer_sc_init
08001e64 g     F .text	00000064 .hidden __clzsi2
0800e7b4 g     F .text	00000218 altera_avalon_jtag_uart_write
08006354 g     F .text	00000004 __sfp_lock_acquire
080077fc g     F .text	000000e8 memchr
0800ebec g     F .text	00000078 alt_up_character_lcd_write
080021e8 g     F .text	000020fc ___vfprintf_internal_r
080064b8 g     F .text	000002f0 _free_r
08006e44 g     F .text	00000010 __locale_mb_cur_max
0800ffa0 g     F .text	00000194 __call_exitprocs
08013b48 g     O .bss	00000004 __mlocale_changed
08011ff8 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08013b70 g     O .bss	00000004 _alt_tick_rate
080084d0 g     F .text	00000148 __lshift
080003f0 g     F .text	000001b0 TS_GetPress
08013b74 g     O .bss	00000004 _alt_nticks
0800db20 g     F .text	00000104 read
0800df10 g     F .text	00000070 alt_sys_init
0800ee24 g     F .text	00000088 alt_up_character_lcd_shift_display
0800fe8c g     F .text	00000114 __register_exitproc
08008100 g     F .text	00000290 __multiply
0800eeac g     F .text	0000008c alt_up_character_lcd_erase_pos
0800e454 g     F .text	00000068 altera_avalon_jtag_uart_close
08001ff4 g     F .text	00000028 .hidden __mulsi3
08010514 g       *ABS*	00000000 __ram_rwdata_start
08010168 g       *ABS*	00000000 __ram_rodata_start
08013b78 g     O .bss	00000028 __malloc_current_mallinfo
0800898c g     F .text	0000013c __d2b
0800df80 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800fcf0 g     F .text	000000d4 alt_get_fd
0800aae4 g     F .text	00000054 _close_r
0800fe10 g     F .text	0000007c memcmp
0800e040 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08013ca0 g       *ABS*	00000000 __alt_stack_base
0800e090 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08004308 g     F .text	00000130 __swsetup_r
08000b4c g     F .text	00000980 .hidden __divdf3
08006214 g     F .text	00000118 __sfp
08008be0 g     F .text	00000078 __copybits
080109b0 g     O .rwdata	00000408 __malloc_av_
08006360 g     F .text	00000004 __sinit_lock_release
080014cc g     F .text	0000086c .hidden __muldf3
0800934c g     F .text	00000054 __sread
0800fbdc g     F .text	00000114 alt_find_file
0800f14c g     F .text	000000a4 alt_dev_llist_insert
0800da90 g     F .text	00000020 __malloc_lock
0800dca4 g     F .text	000000b0 sbrk
08005d88 g     F .text	00000228 _fflush_r
0800ab38 g     F .text	000000d8 _calloc_r
08013b44 g       *ABS*	00000000 __bss_start
08007b78 g     F .text	00000124 memset
080001f8 g     F .text	000000a8 main
08013b68 g     O .bss	00000004 alt_envp
08013b50 g     O .bss	00000004 __malloc_max_total_mem
0800dfe0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800b1b8 g     F .text	0000001c __swbuf
0800ed9c g     F .text	00000088 alt_up_character_lcd_shift_cursor
08009480 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800ad10 g     F .text	00000014 fclose
08004660 g     F .text	00001728 _dtoa_r
08007054 g     F .text	000007a8 _malloc_r
0800b348 g     F .text	00000030 __ascii_wctomb
08012018 g     O .rwdata	00000004 alt_errno
08006c4c g     F .text	000000b8 _fwalk
08001f34 g     F .text	00000054 .hidden __divsi3
0800ebac g     F .text	00000040 alt_up_character_lcd_open_dev
08006394 g     F .text	00000124 _malloc_trim_r
08010168 g       *ABS*	00000000 __CTOR_END__
0800eb78 g     F .text	00000034 alt_up_character_lcd_init
08009488 g     F .text	000000a4 strcmp
08010168 g       *ABS*	00000000 __flash_rodata_start
08010168 g       *ABS*	00000000 __DTOR_LIST__
0800c8cc g     F .text	00000084 .hidden __nedf2
08000370 g     F .text	00000040 TS_WaitForTouch
0800dedc g     F .text	00000034 alt_irq_init
0800dc24 g     F .text	00000080 alt_release_fd
0800ef38 g     F .text	00000034 alt_up_character_lcd_cursor_off
080101fc g     O .rodata	00000100 .hidden __clz_tab
08013b44 g     O .bss	00000004 _PathLocale
0800fdc4 g     F .text	00000014 atexit
0800aa88 g     F .text	0000005c _write_r
08006e74 g     F .text	0000001c setlocale
08000ab0 g     F .text	0000004c Wifi_ReadRx
08011ff0 g     O .rwdata	00000004 _impure_ptr
08013b60 g     O .bss	00000004 alt_argc
080005ec g     F .text	00000050 TS_WriteTx
080003b0 g     F .text	00000040 TS_WaitForRelease
08000afc g     F .text	00000050 Wifi_WriteTx
0800f24c g     F .text	0000005c _do_dtors
08006e60 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08008810 g     F .text	00000060 __ulp
0800637c g     F .text	00000018 __fp_unlock_all
08012004 g     O .rwdata	00000008 alt_fs_list
080009ac g     F .text	00000104 Wifi_SendCommand
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006e90 g     F .text	0000000c localeconv
08000888 g     F .text	00000048 getcharRS232
0800f354 g     F .text	00000050 alt_ic_isr_register
0801202c g       *ABS*	00000000 _edata
08013ca0 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800e4bc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0800f444 g     F .text	000000a4 alt_ic_irq_disable
080093a8 g     F .text	0000007c __swrite
08011ffc g     O .rwdata	00000004 __malloc_trim_threshold
0800fbbc g     F .text	00000020 altera_nios2_qsys_irq_init
08006e54 g     F .text	0000000c __locale_msgcharset
0800fdd8 g     F .text	00000038 exit
08006d04 g     F .text	000000b8 _fwalk_reent
08008678 g     F .text	00000198 __mdiff
08001f88 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08006358 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800ec64 g     F .text	00000074 alt_up_character_lcd_string
08010134 g     F .text	00000034 _exit
0800efa0 g     F .text	00000140 alt_alarm_start
08006e9c g     F .text	000001b8 __smakebuf_r
08002150 g     F .text	00000098 strlen
0800f8c0 g     F .text	00000160 open
0800c950 g     F .text	000000e0 .hidden __gedf2
08012000 g     O .rwdata	00000004 __wctomb
08009628 g     F .text	00000018 __sprint_r
0800f338 g     F .text	0000001c alt_icache_flush_all
0800ed28 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
08012020 g     O .rwdata	00000004 alt_priority_mask
0800f3a4 g     F .text	000000a0 alt_ic_irq_enable
080042e4 g     F .text	00000024 __vfprintf_internal
0800b378 g     F .text	0000005c _wctomb_r
0800cb10 g     F .text	000008d0 .hidden __subdf3
08008014 g     F .text	000000b0 __lo0bits
08012024 g     O .rwdata	00000008 alt_alarm_list
0800f1f0 g     F .text	0000005c _do_ctors
0800b270 g     F .text	000000d8 wcrtomb
0800d500 g     F .text	000000d8 close
08000954 g     F .text	00000058 Wifi_WaitReady
0800d86c g     F .text	00000080 alt_load
0800aea8 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
0800635c g     F .text	00000004 __sinit_lock_acquire
08007d6c g     F .text	0000013c __multadd
08007d44 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	108ee804 	addi	r2,r2,15264
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	108ee804 	addi	r2,r2,15264
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6a7fb14 	ori	gp,gp,40940
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	108ed114 	ori	r2,r2,15172

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18cf2814 	ori	r3,r3,15520

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800d86c0 	call	800d86c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800da180 	call	800da18 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <main>:

#include "serial.h"


int main()
{
 80001f8:	defffd04 	addi	sp,sp,-12
 80001fc:	dfc00215 	stw	ra,8(sp)
 8000200:	df000115 	stw	fp,4(sp)
 8000204:	df000104 	addi	fp,sp,4
	// initialise touchscreen
	Wifi_Init();
 8000208:	80009080 	call	8000908 <Wifi_Init>

	printf("Starting wifi\n");
 800020c:	01020074 	movhi	r4,2049
 8000210:	21005a04 	addi	r4,r4,360
 8000214:	800213c0 	call	800213c <puts>

	int i;
	for(i=0;i<10;i++) {
 8000218:	e03fff15 	stw	zero,-4(fp)
 800021c:	00000606 	br	8000238 <main+0x40>
		Wifi_SendCommand("\r\n");
 8000220:	01020074 	movhi	r4,2049
 8000224:	21005e04 	addi	r4,r4,376
 8000228:	80009ac0 	call	80009ac <Wifi_SendCommand>
	Wifi_Init();

	printf("Starting wifi\n");

	int i;
	for(i=0;i<10;i++) {
 800022c:	e0bfff17 	ldw	r2,-4(fp)
 8000230:	10800044 	addi	r2,r2,1
 8000234:	e0bfff15 	stw	r2,-4(fp)
 8000238:	e0bfff17 	ldw	r2,-4(fp)
 800023c:	10800290 	cmplti	r2,r2,10
 8000240:	103ff71e 	bne	r2,zero,8000220 <__alt_data_end+0xfc000220>
		Wifi_SendCommand("\r\n");
	}
	Wifi_WaitReady();
 8000244:	80009540 	call	8000954 <Wifi_WaitReady>
	Wifi_SendCommand("dofile(\"system.lua\")\r\n");
 8000248:	01020074 	movhi	r4,2049
 800024c:	21005f04 	addi	r4,r4,380
 8000250:	80009ac0 	call	80009ac <Wifi_SendCommand>
	Wifi_WaitReady();
 8000254:	80009540 	call	8000954 <Wifi_WaitReady>
	Wifi_SendCommand("check_wifi()\r\n");
 8000258:	01020074 	movhi	r4,2049
 800025c:	21006504 	addi	r4,r4,404
 8000260:	80009ac0 	call	80009ac <Wifi_SendCommand>
	Wifi_WaitReady();
 8000264:	80009540 	call	8000954 <Wifi_WaitReady>
	Wifi_SendCommand("build_post_request(HOST, URI, \"\")\r\n");
 8000268:	01020074 	movhi	r4,2049
 800026c:	21006904 	addi	r4,r4,420
 8000270:	80009ac0 	call	80009ac <Wifi_SendCommand>
	Wifi_WaitReady();
 8000274:	80009540 	call	8000954 <Wifi_WaitReady>
	Wifi_SendCommand("send_sms(\"+14387000752\",\"+17789524378\",\"Hello!\")\r\n");
 8000278:	01020074 	movhi	r4,2049
 800027c:	21007204 	addi	r4,r4,456
 8000280:	80009ac0 	call	80009ac <Wifi_SendCommand>
	Wifi_WaitReady();
 8000284:	80009540 	call	8000954 <Wifi_WaitReady>

	return 0;
 8000288:	0005883a 	mov	r2,zero
}
 800028c:	e037883a 	mov	sp,fp
 8000290:	dfc00117 	ldw	ra,4(sp)
 8000294:	df000017 	ldw	fp,0(sp)
 8000298:	dec00204 	addi	sp,sp,8
 800029c:	f800283a 	ret

080002a0 <TS_Init>:

/*****************************************************************************
**  START OF TOUCHSCREEN
*****************************************************************************/
void TS_Init(void)
{
 80002a0:	defffe04 	addi	sp,sp,-8
 80002a4:	dfc00115 	stw	ra,4(sp)
 80002a8:	df000015 	stw	fp,0(sp)
 80002ac:	d839883a 	mov	fp,sp
	// Reset
	TouchScreen_Control = 0x03;
 80002b0:	00a10034 	movhi	r2,33792
 80002b4:	10808c04 	addi	r2,r2,560
 80002b8:	00c000c4 	movi	r3,3
 80002bc:	10c00005 	stb	r3,0(r2)

	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// transmitter interrupt disabled
	TouchScreen_Control = 0x15;
 80002c0:	00a10034 	movhi	r2,33792
 80002c4:	10808c04 	addi	r2,r2,560
 80002c8:	00c00544 	movi	r3,21
 80002cc:	10c00005 	stb	r3,0(r2)

	// set 9600 Baud
	TouchScreen_Baud = 0x07;
 80002d0:	00a10034 	movhi	r2,33792
 80002d4:	10808d04 	addi	r2,r2,564
 80002d8:	00c001c4 	movi	r3,7
 80002dc:	10c00005 	stb	r3,0(r2)

	// send touchscreen controller an "enable touch" command
	TS_EnableTouch();
 80002e0:	80003340 	call	8000334 <TS_EnableTouch>
}
 80002e4:	e037883a 	mov	sp,fp
 80002e8:	dfc00117 	ldw	ra,4(sp)
 80002ec:	df000017 	ldw	fp,0(sp)
 80002f0:	dec00204 	addi	sp,sp,8
 80002f4:	f800283a 	ret

080002f8 <TS_DisableTouch>:

void TS_DisableTouch( void )
{
 80002f8:	defffe04 	addi	sp,sp,-8
 80002fc:	dfc00115 	stw	ra,4(sp)
 8000300:	df000015 	stw	fp,0(sp)
 8000304:	d839883a 	mov	fp,sp
	// send touchscreen controller a "disable touch" command
	TS_WriteTx(0x55);
 8000308:	01001544 	movi	r4,85
 800030c:	80005ec0 	call	80005ec <TS_WriteTx>
	TS_WriteTx(0x01);
 8000310:	01000044 	movi	r4,1
 8000314:	80005ec0 	call	80005ec <TS_WriteTx>
	TS_WriteTx(0x13);
 8000318:	010004c4 	movi	r4,19
 800031c:	80005ec0 	call	80005ec <TS_WriteTx>
}
 8000320:	e037883a 	mov	sp,fp
 8000324:	dfc00117 	ldw	ra,4(sp)
 8000328:	df000017 	ldw	fp,0(sp)
 800032c:	dec00204 	addi	sp,sp,8
 8000330:	f800283a 	ret

08000334 <TS_EnableTouch>:

void TS_EnableTouch( void )
{
 8000334:	defffe04 	addi	sp,sp,-8
 8000338:	dfc00115 	stw	ra,4(sp)
 800033c:	df000015 	stw	fp,0(sp)
 8000340:	d839883a 	mov	fp,sp
	// send touchscreen controller an "enable touch" command
	TS_WriteTx(0x55);
 8000344:	01001544 	movi	r4,85
 8000348:	80005ec0 	call	80005ec <TS_WriteTx>
	TS_WriteTx(0x01);
 800034c:	01000044 	movi	r4,1
 8000350:	80005ec0 	call	80005ec <TS_WriteTx>
	TS_WriteTx(0x12);
 8000354:	01000484 	movi	r4,18
 8000358:	80005ec0 	call	80005ec <TS_WriteTx>
}
 800035c:	e037883a 	mov	sp,fp
 8000360:	dfc00117 	ldw	ra,4(sp)
 8000364:	df000017 	ldw	fp,0(sp)
 8000368:	dec00204 	addi	sp,sp,8
 800036c:	f800283a 	ret

08000370 <TS_WaitForTouch>:


void TS_WaitForTouch()
{
 8000370:	defffe04 	addi	sp,sp,-8
 8000374:	dfc00115 	stw	ra,4(sp)
 8000378:	df000015 	stw	fp,0(sp)
 800037c:	d839883a 	mov	fp,sp
	while(TS_ReadRx() != (char)0x81);
 8000380:	0001883a 	nop
 8000384:	80005a00 	call	80005a0 <TS_ReadRx>
 8000388:	10803fcc 	andi	r2,r2,255
 800038c:	1080201c 	xori	r2,r2,128
 8000390:	10bfe004 	addi	r2,r2,-128
 8000394:	10bfe058 	cmpnei	r2,r2,-127
 8000398:	103ffa1e 	bne	r2,zero,8000384 <__alt_data_end+0xfc000384>
}
 800039c:	e037883a 	mov	sp,fp
 80003a0:	dfc00117 	ldw	ra,4(sp)
 80003a4:	df000017 	ldw	fp,0(sp)
 80003a8:	dec00204 	addi	sp,sp,8
 80003ac:	f800283a 	ret

080003b0 <TS_WaitForRelease>:

void TS_WaitForRelease()
{
 80003b0:	defffe04 	addi	sp,sp,-8
 80003b4:	dfc00115 	stw	ra,4(sp)
 80003b8:	df000015 	stw	fp,0(sp)
 80003bc:	d839883a 	mov	fp,sp
	while(TS_ReadRx() != (char)0x80);
 80003c0:	0001883a 	nop
 80003c4:	80005a00 	call	80005a0 <TS_ReadRx>
 80003c8:	10803fcc 	andi	r2,r2,255
 80003cc:	1080201c 	xori	r2,r2,128
 80003d0:	10bfe004 	addi	r2,r2,-128
 80003d4:	10bfe018 	cmpnei	r2,r2,-128
 80003d8:	103ffa1e 	bne	r2,zero,80003c4 <__alt_data_end+0xfc0003c4>
}
 80003dc:	e037883a 	mov	sp,fp
 80003e0:	dfc00117 	ldw	ra,4(sp)
 80003e4:	df000017 	ldw	fp,0(sp)
 80003e8:	dec00204 	addi	sp,sp,8
 80003ec:	f800283a 	ret

080003f0 <TS_GetPress>:


Point TS_GetPress(void)
{
 80003f0:	defff804 	addi	sp,sp,-32
 80003f4:	dfc00715 	stw	ra,28(sp)
 80003f8:	df000615 	stw	fp,24(sp)
 80003fc:	df000604 	addi	fp,sp,24
	u_int x_cord_upper;

	u_int y_cord_lower;
	u_int y_cord_upper;

	x_cord_lower = TS_ReadRx();
 8000400:	80005a00 	call	80005a0 <TS_ReadRx>
 8000404:	10803fcc 	andi	r2,r2,255
 8000408:	1080201c 	xori	r2,r2,128
 800040c:	10bfe004 	addi	r2,r2,-128
 8000410:	e0bffa15 	stw	r2,-24(fp)
	x_cord_upper = TS_ReadRx();
 8000414:	80005a00 	call	80005a0 <TS_ReadRx>
 8000418:	10803fcc 	andi	r2,r2,255
 800041c:	1080201c 	xori	r2,r2,128
 8000420:	10bfe004 	addi	r2,r2,-128
 8000424:	e0bffb15 	stw	r2,-20(fp)
	y_cord_lower = TS_ReadRx();
 8000428:	80005a00 	call	80005a0 <TS_ReadRx>
 800042c:	10803fcc 	andi	r2,r2,255
 8000430:	1080201c 	xori	r2,r2,128
 8000434:	10bfe004 	addi	r2,r2,-128
 8000438:	e0bffc15 	stw	r2,-16(fp)
	y_cord_upper = TS_ReadRx();
 800043c:	80005a00 	call	80005a0 <TS_ReadRx>
 8000440:	10803fcc 	andi	r2,r2,255
 8000444:	1080201c 	xori	r2,r2,128
 8000448:	10bfe004 	addi	r2,r2,-128
 800044c:	e0bffd15 	stw	r2,-12(fp)

	p1.x = (double)((x_cord_upper << 7) | x_cord_lower)/4095.0 * 800;
 8000450:	e0bffb17 	ldw	r2,-20(fp)
 8000454:	100691fa 	slli	r3,r2,7
 8000458:	e0bffa17 	ldw	r2,-24(fp)
 800045c:	1884b03a 	or	r2,r3,r2
 8000460:	1009883a 	mov	r4,r2
 8000464:	8001dc00 	call	8001dc0 <__floatunsidf>
 8000468:	100b883a 	mov	r5,r2
 800046c:	180d883a 	mov	r6,r3
 8000470:	2809883a 	mov	r4,r5
 8000474:	300b883a 	mov	r5,r6
 8000478:	000d883a 	mov	r6,zero
 800047c:	01d02c34 	movhi	r7,16560
 8000480:	39ff8004 	addi	r7,r7,-512
 8000484:	8000b4c0 	call	8000b4c <__divdf3>
 8000488:	1009883a 	mov	r4,r2
 800048c:	180b883a 	mov	r5,r3
 8000490:	2005883a 	mov	r2,r4
 8000494:	2807883a 	mov	r3,r5
 8000498:	1009883a 	mov	r4,r2
 800049c:	180b883a 	mov	r5,r3
 80004a0:	000d883a 	mov	r6,zero
 80004a4:	01d02274 	movhi	r7,16521
 80004a8:	80014cc0 	call	80014cc <__muldf3>
 80004ac:	1009883a 	mov	r4,r2
 80004b0:	180b883a 	mov	r5,r3
 80004b4:	2005883a 	mov	r2,r4
 80004b8:	2807883a 	mov	r3,r5
 80004bc:	1009883a 	mov	r4,r2
 80004c0:	180b883a 	mov	r5,r3
 80004c4:	8001d380 	call	8001d38 <__fixdfsi>
 80004c8:	e0bffe15 	stw	r2,-8(fp)
	p1.y = (double)((y_cord_upper << 7) | y_cord_lower)/4095.0 * 450;
 80004cc:	e0bffd17 	ldw	r2,-12(fp)
 80004d0:	100691fa 	slli	r3,r2,7
 80004d4:	e0bffc17 	ldw	r2,-16(fp)
 80004d8:	1884b03a 	or	r2,r3,r2
 80004dc:	1009883a 	mov	r4,r2
 80004e0:	8001dc00 	call	8001dc0 <__floatunsidf>
 80004e4:	100b883a 	mov	r5,r2
 80004e8:	180d883a 	mov	r6,r3
 80004ec:	2809883a 	mov	r4,r5
 80004f0:	300b883a 	mov	r5,r6
 80004f4:	000d883a 	mov	r6,zero
 80004f8:	01d02c34 	movhi	r7,16560
 80004fc:	39ff8004 	addi	r7,r7,-512
 8000500:	8000b4c0 	call	8000b4c <__divdf3>
 8000504:	1009883a 	mov	r4,r2
 8000508:	180b883a 	mov	r5,r3
 800050c:	2005883a 	mov	r2,r4
 8000510:	2807883a 	mov	r3,r5
 8000514:	1009883a 	mov	r4,r2
 8000518:	180b883a 	mov	r5,r3
 800051c:	000d883a 	mov	r6,zero
 8000520:	01d01f34 	movhi	r7,16508
 8000524:	39c80004 	addi	r7,r7,8192
 8000528:	80014cc0 	call	80014cc <__muldf3>
 800052c:	1009883a 	mov	r4,r2
 8000530:	180b883a 	mov	r5,r3
 8000534:	2005883a 	mov	r2,r4
 8000538:	2807883a 	mov	r3,r5
 800053c:	1009883a 	mov	r4,r2
 8000540:	180b883a 	mov	r5,r3
 8000544:	8001d380 	call	8001d38 <__fixdfsi>
 8000548:	e0bfff15 	stw	r2,-4(fp)

	/*
	 * Change it to -1 so that we can check later if the touch values are valid
	 */
	if(p1.x > 800 || p1.y > 450) {
 800054c:	e0bffe17 	ldw	r2,-8(fp)
 8000550:	1080c848 	cmpgei	r2,r2,801
 8000554:	1000031e 	bne	r2,zero,8000564 <TS_GetPress+0x174>
 8000558:	e0bfff17 	ldw	r2,-4(fp)
 800055c:	108070d0 	cmplti	r2,r2,451
 8000560:	1000041e 	bne	r2,zero,8000574 <TS_GetPress+0x184>
		p1.x = -1;
 8000564:	00bfffc4 	movi	r2,-1
 8000568:	e0bffe15 	stw	r2,-8(fp)
		p1.y = -1;
 800056c:	00bfffc4 	movi	r2,-1
 8000570:	e0bfff15 	stw	r2,-4(fp)
	}

	return p1;
 8000574:	e0bffe17 	ldw	r2,-8(fp)
 8000578:	e0ffff17 	ldw	r3,-4(fp)
 800057c:	1009883a 	mov	r4,r2
 8000580:	180b883a 	mov	r5,r3
}
 8000584:	2005883a 	mov	r2,r4
 8000588:	2807883a 	mov	r3,r5
 800058c:	e037883a 	mov	sp,fp
 8000590:	dfc00117 	ldw	ra,4(sp)
 8000594:	df000017 	ldw	fp,0(sp)
 8000598:	dec00204 	addi	sp,sp,8
 800059c:	f800283a 	ret

080005a0 <TS_ReadRx>:


char TS_ReadRx(void) {
 80005a0:	defffe04 	addi	sp,sp,-8
 80005a4:	df000115 	stw	fp,4(sp)
 80005a8:	df000104 	addi	fp,sp,4
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	while((TouchScreen_Status & 0x01) != 0x01) {}
 80005ac:	0001883a 	nop
 80005b0:	00a10034 	movhi	r2,33792
 80005b4:	10808c04 	addi	r2,r2,560
 80005b8:	10800003 	ldbu	r2,0(r2)
 80005bc:	10803fcc 	andi	r2,r2,255
 80005c0:	1080004c 	andi	r2,r2,1
 80005c4:	103ffa26 	beq	r2,zero,80005b0 <__alt_data_end+0xfc0005b0>
	char val = TouchScreen_RxData;
 80005c8:	00a10034 	movhi	r2,33792
 80005cc:	10808c84 	addi	r2,r2,562
 80005d0:	10800003 	ldbu	r2,0(r2)
 80005d4:	e0bfff05 	stb	r2,-4(fp)
	return val;
 80005d8:	e0bfff03 	ldbu	r2,-4(fp)
}
 80005dc:	e037883a 	mov	sp,fp
 80005e0:	df000017 	ldw	fp,0(sp)
 80005e4:	dec00104 	addi	sp,sp,4
 80005e8:	f800283a 	ret

080005ec <TS_WriteTx>:

void TS_WriteTx(char val) {
 80005ec:	defffe04 	addi	sp,sp,-8
 80005f0:	df000115 	stw	fp,4(sp)
 80005f4:	df000104 	addi	fp,sp,4
 80005f8:	2005883a 	mov	r2,r4
 80005fc:	e0bfff05 	stb	r2,-4(fp)
	// poll tx bit in 6850 status register. Wait for it to become '2'
	while((TouchScreen_Status & 0x02) != 0x02) {}
 8000600:	0001883a 	nop
 8000604:	00a10034 	movhi	r2,33792
 8000608:	10808c04 	addi	r2,r2,560
 800060c:	10800003 	ldbu	r2,0(r2)
 8000610:	10803fcc 	andi	r2,r2,255
 8000614:	1080008c 	andi	r2,r2,2
 8000618:	103ffa26 	beq	r2,zero,8000604 <__alt_data_end+0xfc000604>
	TouchScreen_TxData = val;
 800061c:	00a10034 	movhi	r2,33792
 8000620:	10808c84 	addi	r2,r2,562
 8000624:	e0ffff03 	ldbu	r3,-4(fp)
 8000628:	10c00005 	stb	r3,0(r2)
}
 800062c:	e037883a 	mov	sp,fp
 8000630:	df000017 	ldw	fp,0(sp)
 8000634:	dec00104 	addi	sp,sp,4
 8000638:	f800283a 	ret

0800063c <TS_GetRelease>:


Point TS_GetRelease(void)
{
 800063c:	defff804 	addi	sp,sp,-32
 8000640:	dfc00715 	stw	ra,28(sp)
 8000644:	df000615 	stw	fp,24(sp)
 8000648:	df000604 	addi	fp,sp,24
	u_int x_cord_upper;

	u_int y_cord_lower;
	u_int y_cord_upper;

	x_cord_lower = TS_ReadRx();
 800064c:	80005a00 	call	80005a0 <TS_ReadRx>
 8000650:	10803fcc 	andi	r2,r2,255
 8000654:	1080201c 	xori	r2,r2,128
 8000658:	10bfe004 	addi	r2,r2,-128
 800065c:	e0bffa15 	stw	r2,-24(fp)
	x_cord_upper = TS_ReadRx();
 8000660:	80005a00 	call	80005a0 <TS_ReadRx>
 8000664:	10803fcc 	andi	r2,r2,255
 8000668:	1080201c 	xori	r2,r2,128
 800066c:	10bfe004 	addi	r2,r2,-128
 8000670:	e0bffb15 	stw	r2,-20(fp)
	y_cord_lower = TS_ReadRx();
 8000674:	80005a00 	call	80005a0 <TS_ReadRx>
 8000678:	10803fcc 	andi	r2,r2,255
 800067c:	1080201c 	xori	r2,r2,128
 8000680:	10bfe004 	addi	r2,r2,-128
 8000684:	e0bffc15 	stw	r2,-16(fp)
	y_cord_upper = TS_ReadRx();
 8000688:	80005a00 	call	80005a0 <TS_ReadRx>
 800068c:	10803fcc 	andi	r2,r2,255
 8000690:	1080201c 	xori	r2,r2,128
 8000694:	10bfe004 	addi	r2,r2,-128
 8000698:	e0bffd15 	stw	r2,-12(fp)

	p1.x = (double)((x_cord_upper << 7) | x_cord_lower)/4095.0 * 800;
 800069c:	e0bffb17 	ldw	r2,-20(fp)
 80006a0:	100691fa 	slli	r3,r2,7
 80006a4:	e0bffa17 	ldw	r2,-24(fp)
 80006a8:	1884b03a 	or	r2,r3,r2
 80006ac:	1009883a 	mov	r4,r2
 80006b0:	8001dc00 	call	8001dc0 <__floatunsidf>
 80006b4:	100b883a 	mov	r5,r2
 80006b8:	180d883a 	mov	r6,r3
 80006bc:	2809883a 	mov	r4,r5
 80006c0:	300b883a 	mov	r5,r6
 80006c4:	000d883a 	mov	r6,zero
 80006c8:	01d02c34 	movhi	r7,16560
 80006cc:	39ff8004 	addi	r7,r7,-512
 80006d0:	8000b4c0 	call	8000b4c <__divdf3>
 80006d4:	1009883a 	mov	r4,r2
 80006d8:	180b883a 	mov	r5,r3
 80006dc:	2005883a 	mov	r2,r4
 80006e0:	2807883a 	mov	r3,r5
 80006e4:	1009883a 	mov	r4,r2
 80006e8:	180b883a 	mov	r5,r3
 80006ec:	000d883a 	mov	r6,zero
 80006f0:	01d02274 	movhi	r7,16521
 80006f4:	80014cc0 	call	80014cc <__muldf3>
 80006f8:	1009883a 	mov	r4,r2
 80006fc:	180b883a 	mov	r5,r3
 8000700:	2005883a 	mov	r2,r4
 8000704:	2807883a 	mov	r3,r5
 8000708:	1009883a 	mov	r4,r2
 800070c:	180b883a 	mov	r5,r3
 8000710:	8001d380 	call	8001d38 <__fixdfsi>
 8000714:	e0bffe15 	stw	r2,-8(fp)
	p1.y = (double)((y_cord_upper << 7) | y_cord_lower)/4095.0 * 450;
 8000718:	e0bffd17 	ldw	r2,-12(fp)
 800071c:	100691fa 	slli	r3,r2,7
 8000720:	e0bffc17 	ldw	r2,-16(fp)
 8000724:	1884b03a 	or	r2,r3,r2
 8000728:	1009883a 	mov	r4,r2
 800072c:	8001dc00 	call	8001dc0 <__floatunsidf>
 8000730:	100b883a 	mov	r5,r2
 8000734:	180d883a 	mov	r6,r3
 8000738:	2809883a 	mov	r4,r5
 800073c:	300b883a 	mov	r5,r6
 8000740:	000d883a 	mov	r6,zero
 8000744:	01d02c34 	movhi	r7,16560
 8000748:	39ff8004 	addi	r7,r7,-512
 800074c:	8000b4c0 	call	8000b4c <__divdf3>
 8000750:	1009883a 	mov	r4,r2
 8000754:	180b883a 	mov	r5,r3
 8000758:	2005883a 	mov	r2,r4
 800075c:	2807883a 	mov	r3,r5
 8000760:	1009883a 	mov	r4,r2
 8000764:	180b883a 	mov	r5,r3
 8000768:	000d883a 	mov	r6,zero
 800076c:	01d01f34 	movhi	r7,16508
 8000770:	39c80004 	addi	r7,r7,8192
 8000774:	80014cc0 	call	80014cc <__muldf3>
 8000778:	1009883a 	mov	r4,r2
 800077c:	180b883a 	mov	r5,r3
 8000780:	2005883a 	mov	r2,r4
 8000784:	2807883a 	mov	r3,r5
 8000788:	1009883a 	mov	r4,r2
 800078c:	180b883a 	mov	r5,r3
 8000790:	8001d380 	call	8001d38 <__fixdfsi>
 8000794:	e0bfff15 	stw	r2,-4(fp)

	/*
	 * Change it to -1 so that we can check later if the touch values are valid
	 */
	if(p1.x > 800 || p1.y > 450) {
 8000798:	e0bffe17 	ldw	r2,-8(fp)
 800079c:	1080c848 	cmpgei	r2,r2,801
 80007a0:	1000031e 	bne	r2,zero,80007b0 <TS_GetRelease+0x174>
 80007a4:	e0bfff17 	ldw	r2,-4(fp)
 80007a8:	108070d0 	cmplti	r2,r2,451
 80007ac:	1000041e 	bne	r2,zero,80007c0 <TS_GetRelease+0x184>
		p1.x = -1;
 80007b0:	00bfffc4 	movi	r2,-1
 80007b4:	e0bffe15 	stw	r2,-8(fp)
		p1.y = -1;
 80007b8:	00bfffc4 	movi	r2,-1
 80007bc:	e0bfff15 	stw	r2,-4(fp)
	}
	// calibrated correctly so that it maps to a pixel on screen
	return p1;
 80007c0:	e0bffe17 	ldw	r2,-8(fp)
 80007c4:	e0ffff17 	ldw	r3,-4(fp)
 80007c8:	1009883a 	mov	r4,r2
 80007cc:	180b883a 	mov	r5,r3
}
 80007d0:	2005883a 	mov	r2,r4
 80007d4:	2807883a 	mov	r3,r5
 80007d8:	e037883a 	mov	sp,fp
 80007dc:	dfc00117 	ldw	ra,4(sp)
 80007e0:	df000017 	ldw	fp,0(sp)
 80007e4:	dec00204 	addi	sp,sp,8
 80007e8:	f800283a 	ret

080007ec <Init_RS232>:


/*****************************************************************************
**  START OF RS232
*****************************************************************************/
void Init_RS232(void) {
 80007ec:	deffff04 	addi	sp,sp,-4
 80007f0:	df000015 	stw	fp,0(sp)
 80007f4:	d839883a 	mov	fp,sp
	// Reset
	RS232_Control = 0x03;
 80007f8:	00a10034 	movhi	r2,33792
 80007fc:	10808004 	addi	r2,r2,512
 8000800:	00c000c4 	movi	r3,3
 8000804:	10c00005 	stb	r3,0(r2)

	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// transmitter interrupt disabled
	RS232_Control = 0x15;
 8000808:	00a10034 	movhi	r2,33792
 800080c:	10808004 	addi	r2,r2,512
 8000810:	00c00544 	movi	r3,21
 8000814:	10c00005 	stb	r3,0(r2)

	// program baud rate generator to use 115k baud
	RS232_Baud = BAUD_115;
 8000818:	00a10034 	movhi	r2,33792
 800081c:	10808104 	addi	r2,r2,516
 8000820:	00c00044 	movi	r3,1
 8000824:	10c00005 	stb	r3,0(r2)
}
 8000828:	e037883a 	mov	sp,fp
 800082c:	df000017 	ldw	fp,0(sp)
 8000830:	dec00104 	addi	sp,sp,4
 8000834:	f800283a 	ret

08000838 <putcharRS232>:

int putcharRS232(int c) {
 8000838:	defffe04 	addi	sp,sp,-8
 800083c:	df000115 	stw	fp,4(sp)
 8000840:	df000104 	addi	fp,sp,4
 8000844:	e13fff15 	stw	r4,-4(fp)
	// poll Tx bit in 6850 status register. Wait for it to become '1'
	while((RS232_Status & 0x02) != 0x02) {}
 8000848:	0001883a 	nop
 800084c:	00a10034 	movhi	r2,33792
 8000850:	10808004 	addi	r2,r2,512
 8000854:	10800003 	ldbu	r2,0(r2)
 8000858:	10803fcc 	andi	r2,r2,255
 800085c:	1080008c 	andi	r2,r2,2
 8000860:	103ffa26 	beq	r2,zero,800084c <__alt_data_end+0xfc00084c>
	// write 'c' to the 6850 TxData register to output the character

	RS232_TxData = c;
 8000864:	00a10034 	movhi	r2,33792
 8000868:	10808084 	addi	r2,r2,514
 800086c:	e0ffff17 	ldw	r3,-4(fp)
 8000870:	10c00005 	stb	r3,0(r2)

	return c;
 8000874:	e0bfff17 	ldw	r2,-4(fp)
}
 8000878:	e037883a 	mov	sp,fp
 800087c:	df000017 	ldw	fp,0(sp)
 8000880:	dec00104 	addi	sp,sp,4
 8000884:	f800283a 	ret

08000888 <getcharRS232>:

int getcharRS232( void ) {
 8000888:	deffff04 	addi	sp,sp,-4
 800088c:	df000015 	stw	fp,0(sp)
 8000890:	d839883a 	mov	fp,sp
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	while((RS232_Status & 0x01) != 0x01) {}
 8000894:	0001883a 	nop
 8000898:	00a10034 	movhi	r2,33792
 800089c:	10808004 	addi	r2,r2,512
 80008a0:	10800003 	ldbu	r2,0(r2)
 80008a4:	10803fcc 	andi	r2,r2,255
 80008a8:	1080004c 	andi	r2,r2,1
 80008ac:	103ffa26 	beq	r2,zero,8000898 <__alt_data_end+0xfc000898>
	// read received character from 6850 RxData register
	return RS232_RxData;
 80008b0:	00a10034 	movhi	r2,33792
 80008b4:	10808084 	addi	r2,r2,514
 80008b8:	10800003 	ldbu	r2,0(r2)
 80008bc:	10803fcc 	andi	r2,r2,255
}
 80008c0:	e037883a 	mov	sp,fp
 80008c4:	df000017 	ldw	fp,0(sp)
 80008c8:	dec00104 	addi	sp,sp,4
 80008cc:	f800283a 	ret

080008d0 <RS232TestForReceivedData>:

int RS232TestForReceivedData(void) {
 80008d0:	deffff04 	addi	sp,sp,-4
 80008d4:	df000015 	stw	fp,0(sp)
 80008d8:	d839883a 	mov	fp,sp
	// Test Rx bit in 6850 serial comms chip status register
	// if RX bit is set, return TRUE, otherwise return FALSE
	return ((RS232_Status & 0x1) == 0x01);
 80008dc:	00a10034 	movhi	r2,33792
 80008e0:	10808004 	addi	r2,r2,512
 80008e4:	10800003 	ldbu	r2,0(r2)
 80008e8:	10803fcc 	andi	r2,r2,255
 80008ec:	1080004c 	andi	r2,r2,1
 80008f0:	1004c03a 	cmpne	r2,r2,zero
 80008f4:	10803fcc 	andi	r2,r2,255
}
 80008f8:	e037883a 	mov	sp,fp
 80008fc:	df000017 	ldw	fp,0(sp)
 8000900:	dec00104 	addi	sp,sp,4
 8000904:	f800283a 	ret

08000908 <Wifi_Init>:
*****************************************************************************/

/*****************************************************************************
** Initialise wifi controller
*****************************************************************************/
void Wifi_Init(void) {
 8000908:	deffff04 	addi	sp,sp,-4
 800090c:	df000015 	stw	fp,0(sp)
 8000910:	d839883a 	mov	fp,sp
	// Reset
	Wifi_Control = 0x03;
 8000914:	00a10034 	movhi	r2,33792
 8000918:	10809004 	addi	r2,r2,576
 800091c:	00c000c4 	movi	r3,3
 8000920:	10c00005 	stb	r3,0(r2)

	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// transmitter interrupt disabled
	Wifi_Control = 0x15;
 8000924:	00a10034 	movhi	r2,33792
 8000928:	10809004 	addi	r2,r2,576
 800092c:	00c00544 	movi	r3,21
 8000930:	10c00005 	stb	r3,0(r2)

	// set 9600 Baud
	Wifi_Baud = BAUD_115;
 8000934:	00a10034 	movhi	r2,33792
 8000938:	10809104 	addi	r2,r2,580
 800093c:	00c00044 	movi	r3,1
 8000940:	10c00005 	stb	r3,0(r2)
}
 8000944:	e037883a 	mov	sp,fp
 8000948:	df000017 	ldw	fp,0(sp)
 800094c:	dec00104 	addi	sp,sp,4
 8000950:	f800283a 	ret

08000954 <Wifi_WaitReady>:


/*****************************************************************************
* Wait until ready for command
*****************************************************************************/
void Wifi_WaitReady(void) {
 8000954:	defffd04 	addi	sp,sp,-12
 8000958:	dfc00215 	stw	ra,8(sp)
 800095c:	df000115 	stw	fp,4(sp)
 8000960:	df000104 	addi	fp,sp,4
	char val = Wifi_ReadRx();
 8000964:	8000ab00 	call	8000ab0 <Wifi_ReadRx>
 8000968:	e0bfff05 	stb	r2,-4(fp)
	printf(val);
 800096c:	e0bfff07 	ldb	r2,-4(fp)
 8000970:	1009883a 	mov	r4,r2
 8000974:	80020480 	call	8002048 <printf>
	// keep reading the incoming data
	while(val != '>') {val = Wifi_ReadRx();}
 8000978:	00000206 	br	8000984 <Wifi_WaitReady+0x30>
 800097c:	8000ab00 	call	8000ab0 <Wifi_ReadRx>
 8000980:	e0bfff05 	stb	r2,-4(fp)
 8000984:	e0bfff07 	ldb	r2,-4(fp)
 8000988:	10800f98 	cmpnei	r2,r2,62
 800098c:	103ffb1e 	bne	r2,zero,800097c <__alt_data_end+0xfc00097c>
	printf('\n');
 8000990:	01000284 	movi	r4,10
 8000994:	80020480 	call	8002048 <printf>
}
 8000998:	e037883a 	mov	sp,fp
 800099c:	dfc00117 	ldw	ra,4(sp)
 80009a0:	df000017 	ldw	fp,0(sp)
 80009a4:	dec00204 	addi	sp,sp,8
 80009a8:	f800283a 	ret

080009ac <Wifi_SendCommand>:


/*****************************************************************************
* Send a command should end in \r\n
*****************************************************************************/
void Wifi_SendCommand(const char * command) {
 80009ac:	defffb04 	addi	sp,sp,-20
 80009b0:	dfc00415 	stw	ra,16(sp)
 80009b4:	df000315 	stw	fp,12(sp)
 80009b8:	df000304 	addi	fp,sp,12
 80009bc:	e13fff15 	stw	r4,-4(fp)
	int cur_1=0;
 80009c0:	e03ffd15 	stw	zero,-12(fp)
	int cur_2=1;
 80009c4:	00800044 	movi	r2,1
 80009c8:	e0bffe15 	stw	r2,-8(fp)
	while(command[cur_1] != '\n' && command[cur_2] != '\r') {
 80009cc:	00000f06 	br	8000a0c <Wifi_SendCommand+0x60>
		Wifi_WriteTx(command[cur_1]);
 80009d0:	e0bffd17 	ldw	r2,-12(fp)
 80009d4:	e0ffff17 	ldw	r3,-4(fp)
 80009d8:	1885883a 	add	r2,r3,r2
 80009dc:	10800003 	ldbu	r2,0(r2)
 80009e0:	10803fcc 	andi	r2,r2,255
 80009e4:	1080201c 	xori	r2,r2,128
 80009e8:	10bfe004 	addi	r2,r2,-128
 80009ec:	1009883a 	mov	r4,r2
 80009f0:	8000afc0 	call	8000afc <Wifi_WriteTx>
		cur_1++;
 80009f4:	e0bffd17 	ldw	r2,-12(fp)
 80009f8:	10800044 	addi	r2,r2,1
 80009fc:	e0bffd15 	stw	r2,-12(fp)
		cur_2++;
 8000a00:	e0bffe17 	ldw	r2,-8(fp)
 8000a04:	10800044 	addi	r2,r2,1
 8000a08:	e0bffe15 	stw	r2,-8(fp)
* Send a command should end in \r\n
*****************************************************************************/
void Wifi_SendCommand(const char * command) {
	int cur_1=0;
	int cur_2=1;
	while(command[cur_1] != '\n' && command[cur_2] != '\r') {
 8000a0c:	e0bffd17 	ldw	r2,-12(fp)
 8000a10:	e0ffff17 	ldw	r3,-4(fp)
 8000a14:	1885883a 	add	r2,r3,r2
 8000a18:	10800003 	ldbu	r2,0(r2)
 8000a1c:	10803fcc 	andi	r2,r2,255
 8000a20:	1080201c 	xori	r2,r2,128
 8000a24:	10bfe004 	addi	r2,r2,-128
 8000a28:	108002a0 	cmpeqi	r2,r2,10
 8000a2c:	1000091e 	bne	r2,zero,8000a54 <Wifi_SendCommand+0xa8>
 8000a30:	e0bffe17 	ldw	r2,-8(fp)
 8000a34:	e0ffff17 	ldw	r3,-4(fp)
 8000a38:	1885883a 	add	r2,r3,r2
 8000a3c:	10800003 	ldbu	r2,0(r2)
 8000a40:	10803fcc 	andi	r2,r2,255
 8000a44:	1080201c 	xori	r2,r2,128
 8000a48:	10bfe004 	addi	r2,r2,-128
 8000a4c:	10800358 	cmpnei	r2,r2,13
 8000a50:	103fdf1e 	bne	r2,zero,80009d0 <__alt_data_end+0xfc0009d0>
		Wifi_WriteTx(command[cur_1]);
		cur_1++;
		cur_2++;
	}
	Wifi_WriteTx(command[cur_1]);
 8000a54:	e0bffd17 	ldw	r2,-12(fp)
 8000a58:	e0ffff17 	ldw	r3,-4(fp)
 8000a5c:	1885883a 	add	r2,r3,r2
 8000a60:	10800003 	ldbu	r2,0(r2)
 8000a64:	10803fcc 	andi	r2,r2,255
 8000a68:	1080201c 	xori	r2,r2,128
 8000a6c:	10bfe004 	addi	r2,r2,-128
 8000a70:	1009883a 	mov	r4,r2
 8000a74:	8000afc0 	call	8000afc <Wifi_WriteTx>
	Wifi_WriteTx(command[cur_2]);
 8000a78:	e0bffe17 	ldw	r2,-8(fp)
 8000a7c:	e0ffff17 	ldw	r3,-4(fp)
 8000a80:	1885883a 	add	r2,r3,r2
 8000a84:	10800003 	ldbu	r2,0(r2)
 8000a88:	10803fcc 	andi	r2,r2,255
 8000a8c:	1080201c 	xori	r2,r2,128
 8000a90:	10bfe004 	addi	r2,r2,-128
 8000a94:	1009883a 	mov	r4,r2
 8000a98:	8000afc0 	call	8000afc <Wifi_WriteTx>
}
 8000a9c:	e037883a 	mov	sp,fp
 8000aa0:	dfc00117 	ldw	ra,4(sp)
 8000aa4:	df000017 	ldw	fp,0(sp)
 8000aa8:	dec00204 	addi	sp,sp,8
 8000aac:	f800283a 	ret

08000ab0 <Wifi_ReadRx>:


/*****************************************************************************
* Read Rx
*****************************************************************************/
char Wifi_ReadRx(void) {
 8000ab0:	defffe04 	addi	sp,sp,-8
 8000ab4:	df000115 	stw	fp,4(sp)
 8000ab8:	df000104 	addi	fp,sp,4
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	while((Wifi_Status & 0x01) != 0x01) {}
 8000abc:	0001883a 	nop
 8000ac0:	00a10034 	movhi	r2,33792
 8000ac4:	10809004 	addi	r2,r2,576
 8000ac8:	10800003 	ldbu	r2,0(r2)
 8000acc:	10803fcc 	andi	r2,r2,255
 8000ad0:	1080004c 	andi	r2,r2,1
 8000ad4:	103ffa26 	beq	r2,zero,8000ac0 <__alt_data_end+0xfc000ac0>
	char val = Wifi_RxData;
 8000ad8:	00a10034 	movhi	r2,33792
 8000adc:	10809084 	addi	r2,r2,578
 8000ae0:	10800003 	ldbu	r2,0(r2)
 8000ae4:	e0bfff05 	stb	r2,-4(fp)
	return val;
 8000ae8:	e0bfff03 	ldbu	r2,-4(fp)
}
 8000aec:	e037883a 	mov	sp,fp
 8000af0:	df000017 	ldw	fp,0(sp)
 8000af4:	dec00104 	addi	sp,sp,4
 8000af8:	f800283a 	ret

08000afc <Wifi_WriteTx>:


/*****************************************************************************
* Write Tx
*****************************************************************************/
void Wifi_WriteTx(char val) {
 8000afc:	defffe04 	addi	sp,sp,-8
 8000b00:	df000115 	stw	fp,4(sp)
 8000b04:	df000104 	addi	fp,sp,4
 8000b08:	2005883a 	mov	r2,r4
 8000b0c:	e0bfff05 	stb	r2,-4(fp)
	// poll tx bit in 6850 status register. Wait for it to become '2'
	while((Wifi_Status & 0x02) != 0x02) {}
 8000b10:	0001883a 	nop
 8000b14:	00a10034 	movhi	r2,33792
 8000b18:	10809004 	addi	r2,r2,576
 8000b1c:	10800003 	ldbu	r2,0(r2)
 8000b20:	10803fcc 	andi	r2,r2,255
 8000b24:	1080008c 	andi	r2,r2,2
 8000b28:	103ffa26 	beq	r2,zero,8000b14 <__alt_data_end+0xfc000b14>
	Wifi_TxData = val;
 8000b2c:	00a10034 	movhi	r2,33792
 8000b30:	10809084 	addi	r2,r2,578
 8000b34:	e0ffff03 	ldbu	r3,-4(fp)
 8000b38:	10c00005 	stb	r3,0(r2)
}
 8000b3c:	e037883a 	mov	sp,fp
 8000b40:	df000017 	ldw	fp,0(sp)
 8000b44:	dec00104 	addi	sp,sp,4
 8000b48:	f800283a 	ret

08000b4c <__divdf3>:
 8000b4c:	defff004 	addi	sp,sp,-64
 8000b50:	dc800815 	stw	r18,32(sp)
 8000b54:	2824d53a 	srli	r18,r5,20
 8000b58:	dd800c15 	stw	r22,48(sp)
 8000b5c:	282cd7fa 	srli	r22,r5,31
 8000b60:	dc000615 	stw	r16,24(sp)
 8000b64:	04000434 	movhi	r16,16
 8000b68:	df000e15 	stw	fp,56(sp)
 8000b6c:	dd000a15 	stw	r20,40(sp)
 8000b70:	dcc00915 	stw	r19,36(sp)
 8000b74:	dc400715 	stw	r17,28(sp)
 8000b78:	843fffc4 	addi	r16,r16,-1
 8000b7c:	dfc00f15 	stw	ra,60(sp)
 8000b80:	ddc00d15 	stw	r23,52(sp)
 8000b84:	dd400b15 	stw	r21,44(sp)
 8000b88:	9481ffcc 	andi	r18,r18,2047
 8000b8c:	2029883a 	mov	r20,r4
 8000b90:	2027883a 	mov	r19,r4
 8000b94:	2c22703a 	and	r17,r5,r16
 8000b98:	b7003fcc 	andi	fp,r22,255
 8000b9c:	90005e26 	beq	r18,zero,8000d18 <__divdf3+0x1cc>
 8000ba0:	0081ffc4 	movi	r2,2047
 8000ba4:	90803526 	beq	r18,r2,8000c7c <__divdf3+0x130>
 8000ba8:	8c000434 	orhi	r16,r17,16
 8000bac:	2004d77a 	srli	r2,r4,29
 8000bb0:	802090fa 	slli	r16,r16,3
 8000bb4:	202690fa 	slli	r19,r4,3
 8000bb8:	94bf0044 	addi	r18,r18,-1023
 8000bbc:	80a2b03a 	or	r17,r16,r2
 8000bc0:	0029883a 	mov	r20,zero
 8000bc4:	0011883a 	mov	r8,zero
 8000bc8:	380ad53a 	srli	r5,r7,20
 8000bcc:	382ed7fa 	srli	r23,r7,31
 8000bd0:	04000434 	movhi	r16,16
 8000bd4:	843fffc4 	addi	r16,r16,-1
 8000bd8:	2941ffcc 	andi	r5,r5,2047
 8000bdc:	302b883a 	mov	r21,r6
 8000be0:	3c20703a 	and	r16,r7,r16
 8000be4:	ba403fcc 	andi	r9,r23,255
 8000be8:	28006726 	beq	r5,zero,8000d88 <__divdf3+0x23c>
 8000bec:	0081ffc4 	movi	r2,2047
 8000bf0:	28805f26 	beq	r5,r2,8000d70 <__divdf3+0x224>
 8000bf4:	84000434 	orhi	r16,r16,16
 8000bf8:	3004d77a 	srli	r2,r6,29
 8000bfc:	802090fa 	slli	r16,r16,3
 8000c00:	302a90fa 	slli	r21,r6,3
 8000c04:	297f0044 	addi	r5,r5,-1023
 8000c08:	80a0b03a 	or	r16,r16,r2
 8000c0c:	000f883a 	mov	r7,zero
 8000c10:	3d06b03a 	or	r3,r7,r20
 8000c14:	180690ba 	slli	r3,r3,2
 8000c18:	00820034 	movhi	r2,2048
 8000c1c:	10830f04 	addi	r2,r2,3132
 8000c20:	1885883a 	add	r2,r3,r2
 8000c24:	10800017 	ldw	r2,0(r2)
 8000c28:	b5c8f03a 	xor	r4,r22,r23
 8000c2c:	200d883a 	mov	r6,r4
 8000c30:	25003fcc 	andi	r20,r4,255
 8000c34:	9165c83a 	sub	r18,r18,r5
 8000c38:	1000683a 	jmp	r2
 8000c3c:	08000e84 	addi	zero,at,58
 8000c40:	08000cb4 	orhi	zero,at,50
 8000c44:	08000e48 	cmpgei	zero,at,57
 8000c48:	08000c98 	cmpnei	zero,at,50
 8000c4c:	08000e48 	cmpgei	zero,at,57
 8000c50:	08000e1c 	xori	zero,at,56
 8000c54:	08000e48 	cmpgei	zero,at,57
 8000c58:	08000c98 	cmpnei	zero,at,50
 8000c5c:	08000cb4 	orhi	zero,at,50
 8000c60:	08000cb4 	orhi	zero,at,50
 8000c64:	08000e1c 	xori	zero,at,56
 8000c68:	08000c98 	cmpnei	zero,at,50
 8000c6c:	08000ca8 	cmpgeui	zero,at,50
 8000c70:	08000ca8 	cmpgeui	zero,at,50
 8000c74:	08000ca8 	cmpgeui	zero,at,50
 8000c78:	08000e58 	cmpnei	zero,at,57
 8000c7c:	8904b03a 	or	r2,r17,r4
 8000c80:	1000631e 	bne	r2,zero,8000e10 <__divdf3+0x2c4>
 8000c84:	05000204 	movi	r20,8
 8000c88:	0023883a 	mov	r17,zero
 8000c8c:	0027883a 	mov	r19,zero
 8000c90:	02000084 	movi	r8,2
 8000c94:	003fcc06 	br	8000bc8 <__alt_data_end+0xfc000bc8>
 8000c98:	8023883a 	mov	r17,r16
 8000c9c:	a827883a 	mov	r19,r21
 8000ca0:	4839883a 	mov	fp,r9
 8000ca4:	3811883a 	mov	r8,r7
 8000ca8:	00800084 	movi	r2,2
 8000cac:	4081531e 	bne	r8,r2,80011fc <__divdf3+0x6b0>
 8000cb0:	e029883a 	mov	r20,fp
 8000cb4:	a180004c 	andi	r6,r20,1
 8000cb8:	0201ffc4 	movi	r8,2047
 8000cbc:	000b883a 	mov	r5,zero
 8000cc0:	0027883a 	mov	r19,zero
 8000cc4:	4010953a 	slli	r8,r8,20
 8000cc8:	30c03fcc 	andi	r3,r6,255
 8000ccc:	04000434 	movhi	r16,16
 8000cd0:	180697fa 	slli	r3,r3,31
 8000cd4:	843fffc4 	addi	r16,r16,-1
 8000cd8:	2c20703a 	and	r16,r5,r16
 8000cdc:	8220b03a 	or	r16,r16,r8
 8000ce0:	80c6b03a 	or	r3,r16,r3
 8000ce4:	9805883a 	mov	r2,r19
 8000ce8:	dfc00f17 	ldw	ra,60(sp)
 8000cec:	df000e17 	ldw	fp,56(sp)
 8000cf0:	ddc00d17 	ldw	r23,52(sp)
 8000cf4:	dd800c17 	ldw	r22,48(sp)
 8000cf8:	dd400b17 	ldw	r21,44(sp)
 8000cfc:	dd000a17 	ldw	r20,40(sp)
 8000d00:	dcc00917 	ldw	r19,36(sp)
 8000d04:	dc800817 	ldw	r18,32(sp)
 8000d08:	dc400717 	ldw	r17,28(sp)
 8000d0c:	dc000617 	ldw	r16,24(sp)
 8000d10:	dec01004 	addi	sp,sp,64
 8000d14:	f800283a 	ret
 8000d18:	8904b03a 	or	r2,r17,r4
 8000d1c:	10003726 	beq	r2,zero,8000dfc <__divdf3+0x2b0>
 8000d20:	88014d26 	beq	r17,zero,8001258 <__divdf3+0x70c>
 8000d24:	8809883a 	mov	r4,r17
 8000d28:	d9800215 	stw	r6,8(sp)
 8000d2c:	d9c00515 	stw	r7,20(sp)
 8000d30:	8001e640 	call	8001e64 <__clzsi2>
 8000d34:	d9800217 	ldw	r6,8(sp)
 8000d38:	d9c00517 	ldw	r7,20(sp)
 8000d3c:	1007883a 	mov	r3,r2
 8000d40:	01000a04 	movi	r4,40
 8000d44:	1cfffe04 	addi	r19,r3,-8
 8000d48:	20c9c83a 	sub	r4,r4,r3
 8000d4c:	8cca983a 	sll	r5,r17,r19
 8000d50:	a108d83a 	srl	r4,r20,r4
 8000d54:	a4e6983a 	sll	r19,r20,r19
 8000d58:	2162b03a 	or	r17,r4,r5
 8000d5c:	04bf0344 	movi	r18,-1011
 8000d60:	90e5c83a 	sub	r18,r18,r3
 8000d64:	0029883a 	mov	r20,zero
 8000d68:	0011883a 	mov	r8,zero
 8000d6c:	003f9606 	br	8000bc8 <__alt_data_end+0xfc000bc8>
 8000d70:	8184b03a 	or	r2,r16,r6
 8000d74:	10001f1e 	bne	r2,zero,8000df4 <__divdf3+0x2a8>
 8000d78:	0021883a 	mov	r16,zero
 8000d7c:	002b883a 	mov	r21,zero
 8000d80:	01c00084 	movi	r7,2
 8000d84:	003fa206 	br	8000c10 <__alt_data_end+0xfc000c10>
 8000d88:	8184b03a 	or	r2,r16,r6
 8000d8c:	10001526 	beq	r2,zero,8000de4 <__divdf3+0x298>
 8000d90:	80013d26 	beq	r16,zero,8001288 <__divdf3+0x73c>
 8000d94:	8009883a 	mov	r4,r16
 8000d98:	d9800215 	stw	r6,8(sp)
 8000d9c:	da000315 	stw	r8,12(sp)
 8000da0:	da400415 	stw	r9,16(sp)
 8000da4:	8001e640 	call	8001e64 <__clzsi2>
 8000da8:	d9800217 	ldw	r6,8(sp)
 8000dac:	da000317 	ldw	r8,12(sp)
 8000db0:	da400417 	ldw	r9,16(sp)
 8000db4:	1007883a 	mov	r3,r2
 8000db8:	01000a04 	movi	r4,40
 8000dbc:	1d7ffe04 	addi	r21,r3,-8
 8000dc0:	20c9c83a 	sub	r4,r4,r3
 8000dc4:	8560983a 	sll	r16,r16,r21
 8000dc8:	3108d83a 	srl	r4,r6,r4
 8000dcc:	356a983a 	sll	r21,r6,r21
 8000dd0:	2420b03a 	or	r16,r4,r16
 8000dd4:	017f0344 	movi	r5,-1011
 8000dd8:	28cbc83a 	sub	r5,r5,r3
 8000ddc:	000f883a 	mov	r7,zero
 8000de0:	003f8b06 	br	8000c10 <__alt_data_end+0xfc000c10>
 8000de4:	0021883a 	mov	r16,zero
 8000de8:	002b883a 	mov	r21,zero
 8000dec:	01c00044 	movi	r7,1
 8000df0:	003f8706 	br	8000c10 <__alt_data_end+0xfc000c10>
 8000df4:	01c000c4 	movi	r7,3
 8000df8:	003f8506 	br	8000c10 <__alt_data_end+0xfc000c10>
 8000dfc:	05000104 	movi	r20,4
 8000e00:	0023883a 	mov	r17,zero
 8000e04:	0027883a 	mov	r19,zero
 8000e08:	02000044 	movi	r8,1
 8000e0c:	003f6e06 	br	8000bc8 <__alt_data_end+0xfc000bc8>
 8000e10:	05000304 	movi	r20,12
 8000e14:	020000c4 	movi	r8,3
 8000e18:	003f6b06 	br	8000bc8 <__alt_data_end+0xfc000bc8>
 8000e1c:	01400434 	movhi	r5,16
 8000e20:	000d883a 	mov	r6,zero
 8000e24:	297fffc4 	addi	r5,r5,-1
 8000e28:	04ffffc4 	movi	r19,-1
 8000e2c:	0201ffc4 	movi	r8,2047
 8000e30:	003fa406 	br	8000cc4 <__alt_data_end+0xfc000cc4>
 8000e34:	043f0084 	movi	r16,-1022
 8000e38:	84a1c83a 	sub	r16,r16,r18
 8000e3c:	00800e04 	movi	r2,56
 8000e40:	14014d0e 	bge	r2,r16,8001378 <__divdf3+0x82c>
 8000e44:	a180004c 	andi	r6,r20,1
 8000e48:	0011883a 	mov	r8,zero
 8000e4c:	000b883a 	mov	r5,zero
 8000e50:	0027883a 	mov	r19,zero
 8000e54:	003f9b06 	br	8000cc4 <__alt_data_end+0xfc000cc4>
 8000e58:	8880022c 	andhi	r2,r17,8
 8000e5c:	1000f026 	beq	r2,zero,8001220 <__divdf3+0x6d4>
 8000e60:	8080022c 	andhi	r2,r16,8
 8000e64:	1000ee1e 	bne	r2,zero,8001220 <__divdf3+0x6d4>
 8000e68:	00800434 	movhi	r2,16
 8000e6c:	81400234 	orhi	r5,r16,8
 8000e70:	10bfffc4 	addi	r2,r2,-1
 8000e74:	b80d883a 	mov	r6,r23
 8000e78:	288a703a 	and	r5,r5,r2
 8000e7c:	a827883a 	mov	r19,r21
 8000e80:	003fea06 	br	8000e2c <__alt_data_end+0xfc000e2c>
 8000e84:	84411c36 	bltu	r16,r17,80012f8 <__divdf3+0x7ac>
 8000e88:	8c011a26 	beq	r17,r16,80012f4 <__divdf3+0x7a8>
 8000e8c:	94bfffc4 	addi	r18,r18,-1
 8000e90:	dcc00015 	stw	r19,0(sp)
 8000e94:	8811883a 	mov	r8,r17
 8000e98:	002d883a 	mov	r22,zero
 8000e9c:	a80cd63a 	srli	r6,r21,24
 8000ea0:	8020923a 	slli	r16,r16,8
 8000ea4:	a82a923a 	slli	r21,r21,8
 8000ea8:	4009883a 	mov	r4,r8
 8000eac:	342eb03a 	or	r23,r6,r16
 8000eb0:	dd400115 	stw	r21,4(sp)
 8000eb4:	b82ad43a 	srli	r21,r23,16
 8000eb8:	da000315 	stw	r8,12(sp)
 8000ebc:	bcffffcc 	andi	r19,r23,65535
 8000ec0:	a80b883a 	mov	r5,r21
 8000ec4:	8001fe40 	call	8001fe4 <__udivsi3>
 8000ec8:	1009883a 	mov	r4,r2
 8000ecc:	980b883a 	mov	r5,r19
 8000ed0:	1023883a 	mov	r17,r2
 8000ed4:	8001ff40 	call	8001ff4 <__mulsi3>
 8000ed8:	da000317 	ldw	r8,12(sp)
 8000edc:	a80b883a 	mov	r5,r21
 8000ee0:	1039883a 	mov	fp,r2
 8000ee4:	4009883a 	mov	r4,r8
 8000ee8:	8001fec0 	call	8001fec <__umodsi3>
 8000eec:	d8c00017 	ldw	r3,0(sp)
 8000ef0:	1004943a 	slli	r2,r2,16
 8000ef4:	1810d43a 	srli	r8,r3,16
 8000ef8:	120eb03a 	or	r7,r2,r8
 8000efc:	3f00062e 	bgeu	r7,fp,8000f18 <__divdf3+0x3cc>
 8000f00:	3dcf883a 	add	r7,r7,r23
 8000f04:	88bfffc4 	addi	r2,r17,-1
 8000f08:	3dc10a36 	bltu	r7,r23,8001334 <__divdf3+0x7e8>
 8000f0c:	3f01092e 	bgeu	r7,fp,8001334 <__divdf3+0x7e8>
 8000f10:	8c7fff84 	addi	r17,r17,-2
 8000f14:	3dcf883a 	add	r7,r7,r23
 8000f18:	3f39c83a 	sub	fp,r7,fp
 8000f1c:	e009883a 	mov	r4,fp
 8000f20:	a80b883a 	mov	r5,r21
 8000f24:	8001fe40 	call	8001fe4 <__udivsi3>
 8000f28:	1009883a 	mov	r4,r2
 8000f2c:	980b883a 	mov	r5,r19
 8000f30:	1021883a 	mov	r16,r2
 8000f34:	8001ff40 	call	8001ff4 <__mulsi3>
 8000f38:	e009883a 	mov	r4,fp
 8000f3c:	a80b883a 	mov	r5,r21
 8000f40:	d8800315 	stw	r2,12(sp)
 8000f44:	8001fec0 	call	8001fec <__umodsi3>
 8000f48:	d9000017 	ldw	r4,0(sp)
 8000f4c:	1004943a 	slli	r2,r2,16
 8000f50:	da000317 	ldw	r8,12(sp)
 8000f54:	20ffffcc 	andi	r3,r4,65535
 8000f58:	10ceb03a 	or	r7,r2,r3
 8000f5c:	3a00062e 	bgeu	r7,r8,8000f78 <__divdf3+0x42c>
 8000f60:	3dcf883a 	add	r7,r7,r23
 8000f64:	80bfffc4 	addi	r2,r16,-1
 8000f68:	3dc0f036 	bltu	r7,r23,800132c <__divdf3+0x7e0>
 8000f6c:	3a00ef2e 	bgeu	r7,r8,800132c <__divdf3+0x7e0>
 8000f70:	843fff84 	addi	r16,r16,-2
 8000f74:	3dcf883a 	add	r7,r7,r23
 8000f78:	d8c00117 	ldw	r3,4(sp)
 8000f7c:	8822943a 	slli	r17,r17,16
 8000f80:	3a0fc83a 	sub	r7,r7,r8
 8000f84:	1806d43a 	srli	r3,r3,16
 8000f88:	8462b03a 	or	r17,r16,r17
 8000f8c:	8affffcc 	andi	r11,r17,65535
 8000f90:	d8c00015 	stw	r3,0(sp)
 8000f94:	d8c00117 	ldw	r3,4(sp)
 8000f98:	8820d43a 	srli	r16,r17,16
 8000f9c:	5809883a 	mov	r4,r11
 8000fa0:	1f3fffcc 	andi	fp,r3,65535
 8000fa4:	e00b883a 	mov	r5,fp
 8000fa8:	d9c00515 	stw	r7,20(sp)
 8000fac:	dac00215 	stw	r11,8(sp)
 8000fb0:	8001ff40 	call	8001ff4 <__mulsi3>
 8000fb4:	8009883a 	mov	r4,r16
 8000fb8:	e00b883a 	mov	r5,fp
 8000fbc:	d8800415 	stw	r2,16(sp)
 8000fc0:	8001ff40 	call	8001ff4 <__mulsi3>
 8000fc4:	d9400017 	ldw	r5,0(sp)
 8000fc8:	8009883a 	mov	r4,r16
 8000fcc:	d8800315 	stw	r2,12(sp)
 8000fd0:	8001ff40 	call	8001ff4 <__mulsi3>
 8000fd4:	dac00217 	ldw	r11,8(sp)
 8000fd8:	d9400017 	ldw	r5,0(sp)
 8000fdc:	d8800215 	stw	r2,8(sp)
 8000fe0:	5809883a 	mov	r4,r11
 8000fe4:	8001ff40 	call	8001ff4 <__mulsi3>
 8000fe8:	da400417 	ldw	r9,16(sp)
 8000fec:	da800317 	ldw	r10,12(sp)
 8000ff0:	d9c00517 	ldw	r7,20(sp)
 8000ff4:	480ad43a 	srli	r5,r9,16
 8000ff8:	5085883a 	add	r2,r10,r2
 8000ffc:	db000217 	ldw	r12,8(sp)
 8001000:	1151883a 	add	r8,r2,r5
 8001004:	4280022e 	bgeu	r8,r10,8001010 <__divdf3+0x4c4>
 8001008:	00800074 	movhi	r2,1
 800100c:	6099883a 	add	r12,r12,r2
 8001010:	400ad43a 	srli	r5,r8,16
 8001014:	4010943a 	slli	r8,r8,16
 8001018:	4c3fffcc 	andi	r16,r9,65535
 800101c:	6149883a 	add	r4,r12,r5
 8001020:	4411883a 	add	r8,r8,r16
 8001024:	3900a736 	bltu	r7,r4,80012c4 <__divdf3+0x778>
 8001028:	3900c426 	beq	r7,r4,800133c <__divdf3+0x7f0>
 800102c:	3909c83a 	sub	r4,r7,r4
 8001030:	b221c83a 	sub	r16,r22,r8
 8001034:	b42d803a 	cmpltu	r22,r22,r16
 8001038:	25adc83a 	sub	r22,r4,r22
 800103c:	b5c0c626 	beq	r22,r23,8001358 <__divdf3+0x80c>
 8001040:	b009883a 	mov	r4,r22
 8001044:	a80b883a 	mov	r5,r21
 8001048:	8001fe40 	call	8001fe4 <__udivsi3>
 800104c:	1009883a 	mov	r4,r2
 8001050:	980b883a 	mov	r5,r19
 8001054:	d8800315 	stw	r2,12(sp)
 8001058:	8001ff40 	call	8001ff4 <__mulsi3>
 800105c:	a80b883a 	mov	r5,r21
 8001060:	b009883a 	mov	r4,r22
 8001064:	d8800415 	stw	r2,16(sp)
 8001068:	8001fec0 	call	8001fec <__umodsi3>
 800106c:	1004943a 	slli	r2,r2,16
 8001070:	800ed43a 	srli	r7,r16,16
 8001074:	da400417 	ldw	r9,16(sp)
 8001078:	da000317 	ldw	r8,12(sp)
 800107c:	11cab03a 	or	r5,r2,r7
 8001080:	2a40062e 	bgeu	r5,r9,800109c <__divdf3+0x550>
 8001084:	2dcb883a 	add	r5,r5,r23
 8001088:	40bfffc4 	addi	r2,r8,-1
 800108c:	2dc0b436 	bltu	r5,r23,8001360 <__divdf3+0x814>
 8001090:	2a40b32e 	bgeu	r5,r9,8001360 <__divdf3+0x814>
 8001094:	423fff84 	addi	r8,r8,-2
 8001098:	2dcb883a 	add	r5,r5,r23
 800109c:	2a6dc83a 	sub	r22,r5,r9
 80010a0:	b009883a 	mov	r4,r22
 80010a4:	a80b883a 	mov	r5,r21
 80010a8:	da000315 	stw	r8,12(sp)
 80010ac:	8001fe40 	call	8001fe4 <__udivsi3>
 80010b0:	980b883a 	mov	r5,r19
 80010b4:	1009883a 	mov	r4,r2
 80010b8:	d8800415 	stw	r2,16(sp)
 80010bc:	8001ff40 	call	8001ff4 <__mulsi3>
 80010c0:	b009883a 	mov	r4,r22
 80010c4:	a80b883a 	mov	r5,r21
 80010c8:	1027883a 	mov	r19,r2
 80010cc:	8001fec0 	call	8001fec <__umodsi3>
 80010d0:	1004943a 	slli	r2,r2,16
 80010d4:	843fffcc 	andi	r16,r16,65535
 80010d8:	da000317 	ldw	r8,12(sp)
 80010dc:	140eb03a 	or	r7,r2,r16
 80010e0:	da400417 	ldw	r9,16(sp)
 80010e4:	3cc0062e 	bgeu	r7,r19,8001100 <__divdf3+0x5b4>
 80010e8:	3dcf883a 	add	r7,r7,r23
 80010ec:	48bfffc4 	addi	r2,r9,-1
 80010f0:	3dc09d36 	bltu	r7,r23,8001368 <__divdf3+0x81c>
 80010f4:	3cc09c2e 	bgeu	r7,r19,8001368 <__divdf3+0x81c>
 80010f8:	4a7fff84 	addi	r9,r9,-2
 80010fc:	3dcf883a 	add	r7,r7,r23
 8001100:	4010943a 	slli	r8,r8,16
 8001104:	3cebc83a 	sub	r21,r7,r19
 8001108:	e00b883a 	mov	r5,fp
 800110c:	4a26b03a 	or	r19,r9,r8
 8001110:	99ffffcc 	andi	r7,r19,65535
 8001114:	9820d43a 	srli	r16,r19,16
 8001118:	3809883a 	mov	r4,r7
 800111c:	d9c00515 	stw	r7,20(sp)
 8001120:	8001ff40 	call	8001ff4 <__mulsi3>
 8001124:	8009883a 	mov	r4,r16
 8001128:	e00b883a 	mov	r5,fp
 800112c:	102d883a 	mov	r22,r2
 8001130:	8001ff40 	call	8001ff4 <__mulsi3>
 8001134:	d9400017 	ldw	r5,0(sp)
 8001138:	8009883a 	mov	r4,r16
 800113c:	1039883a 	mov	fp,r2
 8001140:	8001ff40 	call	8001ff4 <__mulsi3>
 8001144:	d9c00517 	ldw	r7,20(sp)
 8001148:	d9400017 	ldw	r5,0(sp)
 800114c:	1021883a 	mov	r16,r2
 8001150:	3809883a 	mov	r4,r7
 8001154:	8001ff40 	call	8001ff4 <__mulsi3>
 8001158:	b008d43a 	srli	r4,r22,16
 800115c:	e085883a 	add	r2,fp,r2
 8001160:	1109883a 	add	r4,r2,r4
 8001164:	2700022e 	bgeu	r4,fp,8001170 <__divdf3+0x624>
 8001168:	00800074 	movhi	r2,1
 800116c:	80a1883a 	add	r16,r16,r2
 8001170:	200ad43a 	srli	r5,r4,16
 8001174:	2008943a 	slli	r4,r4,16
 8001178:	b5bfffcc 	andi	r22,r22,65535
 800117c:	8145883a 	add	r2,r16,r5
 8001180:	2589883a 	add	r4,r4,r22
 8001184:	a8802c36 	bltu	r21,r2,8001238 <__divdf3+0x6ec>
 8001188:	a880a426 	beq	r21,r2,800141c <__divdf3+0x8d0>
 800118c:	9cc00054 	ori	r19,r19,1
 8001190:	9200ffc4 	addi	r8,r18,1023
 8001194:	023f270e 	bge	zero,r8,8000e34 <__alt_data_end+0xfc000e34>
 8001198:	988001cc 	andi	r2,r19,7
 800119c:	10000726 	beq	r2,zero,80011bc <__divdf3+0x670>
 80011a0:	990003cc 	andi	r4,r19,15
 80011a4:	00800104 	movi	r2,4
 80011a8:	20800426 	beq	r4,r2,80011bc <__divdf3+0x670>
 80011ac:	9885883a 	add	r2,r19,r2
 80011b0:	14e7803a 	cmpltu	r19,r2,r19
 80011b4:	8ce3883a 	add	r17,r17,r19
 80011b8:	1027883a 	mov	r19,r2
 80011bc:	8880402c 	andhi	r2,r17,256
 80011c0:	10000426 	beq	r2,zero,80011d4 <__divdf3+0x688>
 80011c4:	00bfc034 	movhi	r2,65280
 80011c8:	10bfffc4 	addi	r2,r2,-1
 80011cc:	92010004 	addi	r8,r18,1024
 80011d0:	88a2703a 	and	r17,r17,r2
 80011d4:	0081ff84 	movi	r2,2046
 80011d8:	123eb616 	blt	r2,r8,8000cb4 <__alt_data_end+0xfc000cb4>
 80011dc:	9826d0fa 	srli	r19,r19,3
 80011e0:	8804977a 	slli	r2,r17,29
 80011e4:	8820927a 	slli	r16,r17,9
 80011e8:	4201ffcc 	andi	r8,r8,2047
 80011ec:	14e6b03a 	or	r19,r2,r19
 80011f0:	800ad33a 	srli	r5,r16,12
 80011f4:	a180004c 	andi	r6,r20,1
 80011f8:	003eb206 	br	8000cc4 <__alt_data_end+0xfc000cc4>
 80011fc:	008000c4 	movi	r2,3
 8001200:	4080ac26 	beq	r8,r2,80014b4 <__divdf3+0x968>
 8001204:	00800044 	movi	r2,1
 8001208:	4080591e 	bne	r8,r2,8001370 <__divdf3+0x824>
 800120c:	e00d883a 	mov	r6,fp
 8001210:	0011883a 	mov	r8,zero
 8001214:	000b883a 	mov	r5,zero
 8001218:	0027883a 	mov	r19,zero
 800121c:	003ea906 	br	8000cc4 <__alt_data_end+0xfc000cc4>
 8001220:	00800434 	movhi	r2,16
 8001224:	89400234 	orhi	r5,r17,8
 8001228:	10bfffc4 	addi	r2,r2,-1
 800122c:	b00d883a 	mov	r6,r22
 8001230:	288a703a 	and	r5,r5,r2
 8001234:	003efd06 	br	8000e2c <__alt_data_end+0xfc000e2c>
 8001238:	adcf883a 	add	r7,r21,r23
 800123c:	997fffc4 	addi	r5,r19,-1
 8001240:	3dc0412e 	bgeu	r7,r23,8001348 <__divdf3+0x7fc>
 8001244:	2827883a 	mov	r19,r5
 8001248:	38bfd01e 	bne	r7,r2,800118c <__alt_data_end+0xfc00118c>
 800124c:	d8c00117 	ldw	r3,4(sp)
 8001250:	193fce1e 	bne	r3,r4,800118c <__alt_data_end+0xfc00118c>
 8001254:	003fce06 	br	8001190 <__alt_data_end+0xfc001190>
 8001258:	d9800215 	stw	r6,8(sp)
 800125c:	d9c00515 	stw	r7,20(sp)
 8001260:	8001e640 	call	8001e64 <__clzsi2>
 8001264:	10c00804 	addi	r3,r2,32
 8001268:	010009c4 	movi	r4,39
 800126c:	d9800217 	ldw	r6,8(sp)
 8001270:	d9c00517 	ldw	r7,20(sp)
 8001274:	20feb20e 	bge	r4,r3,8000d40 <__alt_data_end+0xfc000d40>
 8001278:	117ffe04 	addi	r5,r2,-8
 800127c:	a162983a 	sll	r17,r20,r5
 8001280:	0027883a 	mov	r19,zero
 8001284:	003eb506 	br	8000d5c <__alt_data_end+0xfc000d5c>
 8001288:	3009883a 	mov	r4,r6
 800128c:	d9800215 	stw	r6,8(sp)
 8001290:	da000315 	stw	r8,12(sp)
 8001294:	da400415 	stw	r9,16(sp)
 8001298:	8001e640 	call	8001e64 <__clzsi2>
 800129c:	10c00804 	addi	r3,r2,32
 80012a0:	010009c4 	movi	r4,39
 80012a4:	d9800217 	ldw	r6,8(sp)
 80012a8:	da000317 	ldw	r8,12(sp)
 80012ac:	da400417 	ldw	r9,16(sp)
 80012b0:	20fec10e 	bge	r4,r3,8000db8 <__alt_data_end+0xfc000db8>
 80012b4:	10bffe04 	addi	r2,r2,-8
 80012b8:	a8a0983a 	sll	r16,r21,r2
 80012bc:	002b883a 	mov	r21,zero
 80012c0:	003ec406 	br	8000dd4 <__alt_data_end+0xfc000dd4>
 80012c4:	d8c00117 	ldw	r3,4(sp)
 80012c8:	b0ed883a 	add	r22,r22,r3
 80012cc:	b0c5803a 	cmpltu	r2,r22,r3
 80012d0:	15c5883a 	add	r2,r2,r23
 80012d4:	11cf883a 	add	r7,r2,r7
 80012d8:	88bfffc4 	addi	r2,r17,-1
 80012dc:	b9c00d2e 	bgeu	r23,r7,8001314 <__divdf3+0x7c8>
 80012e0:	39003f36 	bltu	r7,r4,80013e0 <__divdf3+0x894>
 80012e4:	21c06a26 	beq	r4,r7,8001490 <__divdf3+0x944>
 80012e8:	3909c83a 	sub	r4,r7,r4
 80012ec:	1023883a 	mov	r17,r2
 80012f0:	003f4f06 	br	8001030 <__alt_data_end+0xfc001030>
 80012f4:	9d7ee536 	bltu	r19,r21,8000e8c <__alt_data_end+0xfc000e8c>
 80012f8:	982ed07a 	srli	r23,r19,1
 80012fc:	880497fa 	slli	r2,r17,31
 8001300:	8810d07a 	srli	r8,r17,1
 8001304:	982c97fa 	slli	r22,r19,31
 8001308:	b884b03a 	or	r2,r23,r2
 800130c:	d8800015 	stw	r2,0(sp)
 8001310:	003ee206 	br	8000e9c <__alt_data_end+0xfc000e9c>
 8001314:	3dfff41e 	bne	r7,r23,80012e8 <__alt_data_end+0xfc0012e8>
 8001318:	d8c00117 	ldw	r3,4(sp)
 800131c:	b0fff02e 	bgeu	r22,r3,80012e0 <__alt_data_end+0xfc0012e0>
 8001320:	b909c83a 	sub	r4,r23,r4
 8001324:	1023883a 	mov	r17,r2
 8001328:	003f4106 	br	8001030 <__alt_data_end+0xfc001030>
 800132c:	1021883a 	mov	r16,r2
 8001330:	003f1106 	br	8000f78 <__alt_data_end+0xfc000f78>
 8001334:	1023883a 	mov	r17,r2
 8001338:	003ef706 	br	8000f18 <__alt_data_end+0xfc000f18>
 800133c:	b23fe136 	bltu	r22,r8,80012c4 <__alt_data_end+0xfc0012c4>
 8001340:	0009883a 	mov	r4,zero
 8001344:	003f3a06 	br	8001030 <__alt_data_end+0xfc001030>
 8001348:	38802c36 	bltu	r7,r2,80013fc <__divdf3+0x8b0>
 800134c:	11c05326 	beq	r2,r7,800149c <__divdf3+0x950>
 8001350:	2827883a 	mov	r19,r5
 8001354:	003f8d06 	br	800118c <__alt_data_end+0xfc00118c>
 8001358:	04ffffc4 	movi	r19,-1
 800135c:	003f8c06 	br	8001190 <__alt_data_end+0xfc001190>
 8001360:	1011883a 	mov	r8,r2
 8001364:	003f4d06 	br	800109c <__alt_data_end+0xfc00109c>
 8001368:	1013883a 	mov	r9,r2
 800136c:	003f6406 	br	8001100 <__alt_data_end+0xfc001100>
 8001370:	e029883a 	mov	r20,fp
 8001374:	003f8606 	br	8001190 <__alt_data_end+0xfc001190>
 8001378:	008007c4 	movi	r2,31
 800137c:	14002a16 	blt	r2,r16,8001428 <__divdf3+0x8dc>
 8001380:	91410784 	addi	r5,r18,1054
 8001384:	9c0cd83a 	srl	r6,r19,r16
 8001388:	8948983a 	sll	r4,r17,r5
 800138c:	9944983a 	sll	r2,r19,r5
 8001390:	8c20d83a 	srl	r16,r17,r16
 8001394:	3108b03a 	or	r4,r6,r4
 8001398:	1004c03a 	cmpne	r2,r2,zero
 800139c:	2084b03a 	or	r2,r4,r2
 80013a0:	110001cc 	andi	r4,r2,7
 80013a4:	20000726 	beq	r4,zero,80013c4 <__divdf3+0x878>
 80013a8:	114003cc 	andi	r5,r2,15
 80013ac:	01000104 	movi	r4,4
 80013b0:	29000426 	beq	r5,r4,80013c4 <__divdf3+0x878>
 80013b4:	11000104 	addi	r4,r2,4
 80013b8:	2085803a 	cmpltu	r2,r4,r2
 80013bc:	80a1883a 	add	r16,r16,r2
 80013c0:	2005883a 	mov	r2,r4
 80013c4:	8100202c 	andhi	r4,r16,128
 80013c8:	20002d26 	beq	r4,zero,8001480 <__divdf3+0x934>
 80013cc:	a180004c 	andi	r6,r20,1
 80013d0:	02000044 	movi	r8,1
 80013d4:	000b883a 	mov	r5,zero
 80013d8:	0027883a 	mov	r19,zero
 80013dc:	003e3906 	br	8000cc4 <__alt_data_end+0xfc000cc4>
 80013e0:	d8c00117 	ldw	r3,4(sp)
 80013e4:	8c7fff84 	addi	r17,r17,-2
 80013e8:	b0ed883a 	add	r22,r22,r3
 80013ec:	b0c5803a 	cmpltu	r2,r22,r3
 80013f0:	15c5883a 	add	r2,r2,r23
 80013f4:	11cf883a 	add	r7,r2,r7
 80013f8:	003f0c06 	br	800102c <__alt_data_end+0xfc00102c>
 80013fc:	d8c00117 	ldw	r3,4(sp)
 8001400:	997fff84 	addi	r5,r19,-2
 8001404:	18d1883a 	add	r8,r3,r3
 8001408:	40c7803a 	cmpltu	r3,r8,r3
 800140c:	1dcd883a 	add	r6,r3,r23
 8001410:	398f883a 	add	r7,r7,r6
 8001414:	da000115 	stw	r8,4(sp)
 8001418:	003f8a06 	br	8001244 <__alt_data_end+0xfc001244>
 800141c:	203f861e 	bne	r4,zero,8001238 <__alt_data_end+0xfc001238>
 8001420:	d8000115 	stw	zero,4(sp)
 8001424:	003f8906 	br	800124c <__alt_data_end+0xfc00124c>
 8001428:	00bef884 	movi	r2,-1054
 800142c:	1485c83a 	sub	r2,r2,r18
 8001430:	01000804 	movi	r4,32
 8001434:	8884d83a 	srl	r2,r17,r2
 8001438:	81001c26 	beq	r16,r4,80014ac <__divdf3+0x960>
 800143c:	91010f84 	addi	r4,r18,1086
 8001440:	8908983a 	sll	r4,r17,r4
 8001444:	24c8b03a 	or	r4,r4,r19
 8001448:	2008c03a 	cmpne	r4,r4,zero
 800144c:	2084b03a 	or	r2,r4,r2
 8001450:	140001cc 	andi	r16,r2,7
 8001454:	8000061e 	bne	r16,zero,8001470 <__divdf3+0x924>
 8001458:	000b883a 	mov	r5,zero
 800145c:	1004d0fa 	srli	r2,r2,3
 8001460:	a180004c 	andi	r6,r20,1
 8001464:	0011883a 	mov	r8,zero
 8001468:	1426b03a 	or	r19,r2,r16
 800146c:	003e1506 	br	8000cc4 <__alt_data_end+0xfc000cc4>
 8001470:	114003cc 	andi	r5,r2,15
 8001474:	01000104 	movi	r4,4
 8001478:	0021883a 	mov	r16,zero
 800147c:	293fcd1e 	bne	r5,r4,80013b4 <__alt_data_end+0xfc0013b4>
 8001480:	800a927a 	slli	r5,r16,9
 8001484:	8020977a 	slli	r16,r16,29
 8001488:	280ad33a 	srli	r5,r5,12
 800148c:	003ff306 	br	800145c <__alt_data_end+0xfc00145c>
 8001490:	b23fd336 	bltu	r22,r8,80013e0 <__alt_data_end+0xfc0013e0>
 8001494:	1023883a 	mov	r17,r2
 8001498:	003fa906 	br	8001340 <__alt_data_end+0xfc001340>
 800149c:	d8c00117 	ldw	r3,4(sp)
 80014a0:	193fd636 	bltu	r3,r4,80013fc <__alt_data_end+0xfc0013fc>
 80014a4:	2827883a 	mov	r19,r5
 80014a8:	003f6806 	br	800124c <__alt_data_end+0xfc00124c>
 80014ac:	0009883a 	mov	r4,zero
 80014b0:	003fe406 	br	8001444 <__alt_data_end+0xfc001444>
 80014b4:	00800434 	movhi	r2,16
 80014b8:	89400234 	orhi	r5,r17,8
 80014bc:	10bfffc4 	addi	r2,r2,-1
 80014c0:	e00d883a 	mov	r6,fp
 80014c4:	288a703a 	and	r5,r5,r2
 80014c8:	003e5806 	br	8000e2c <__alt_data_end+0xfc000e2c>

080014cc <__muldf3>:
 80014cc:	deffee04 	addi	sp,sp,-72
 80014d0:	dd000c15 	stw	r20,48(sp)
 80014d4:	2828d53a 	srli	r20,r5,20
 80014d8:	dd400d15 	stw	r21,52(sp)
 80014dc:	282ad7fa 	srli	r21,r5,31
 80014e0:	dc000815 	stw	r16,32(sp)
 80014e4:	04000434 	movhi	r16,16
 80014e8:	ddc00f15 	stw	r23,60(sp)
 80014ec:	dcc00b15 	stw	r19,44(sp)
 80014f0:	dc800a15 	stw	r18,40(sp)
 80014f4:	843fffc4 	addi	r16,r16,-1
 80014f8:	dfc01115 	stw	ra,68(sp)
 80014fc:	df001015 	stw	fp,64(sp)
 8001500:	dd800e15 	stw	r22,56(sp)
 8001504:	dc400915 	stw	r17,36(sp)
 8001508:	a501ffcc 	andi	r20,r20,2047
 800150c:	2025883a 	mov	r18,r4
 8001510:	202f883a 	mov	r23,r4
 8001514:	2c20703a 	and	r16,r5,r16
 8001518:	a827883a 	mov	r19,r21
 800151c:	aa403fcc 	andi	r9,r21,255
 8001520:	a0005926 	beq	r20,zero,8001688 <__muldf3+0x1bc>
 8001524:	0081ffc4 	movi	r2,2047
 8001528:	a0803426 	beq	r20,r2,80015fc <__muldf3+0x130>
 800152c:	84000434 	orhi	r16,r16,16
 8001530:	2004d77a 	srli	r2,r4,29
 8001534:	802090fa 	slli	r16,r16,3
 8001538:	202e90fa 	slli	r23,r4,3
 800153c:	a53f0044 	addi	r20,r20,-1023
 8001540:	80a0b03a 	or	r16,r16,r2
 8001544:	000b883a 	mov	r5,zero
 8001548:	0039883a 	mov	fp,zero
 800154c:	3806d53a 	srli	r3,r7,20
 8001550:	382cd7fa 	srli	r22,r7,31
 8001554:	00800434 	movhi	r2,16
 8001558:	10bfffc4 	addi	r2,r2,-1
 800155c:	18c1ffcc 	andi	r3,r3,2047
 8001560:	3025883a 	mov	r18,r6
 8001564:	38a2703a 	and	r17,r7,r2
 8001568:	b2803fcc 	andi	r10,r22,255
 800156c:	18006426 	beq	r3,zero,8001700 <__muldf3+0x234>
 8001570:	0081ffc4 	movi	r2,2047
 8001574:	18805c26 	beq	r3,r2,80016e8 <__muldf3+0x21c>
 8001578:	8c400434 	orhi	r17,r17,16
 800157c:	3004d77a 	srli	r2,r6,29
 8001580:	882290fa 	slli	r17,r17,3
 8001584:	302490fa 	slli	r18,r6,3
 8001588:	18ff0044 	addi	r3,r3,-1023
 800158c:	88a2b03a 	or	r17,r17,r2
 8001590:	000f883a 	mov	r7,zero
 8001594:	394ab03a 	or	r5,r7,r5
 8001598:	280a90ba 	slli	r5,r5,2
 800159c:	00820034 	movhi	r2,2048
 80015a0:	10856f04 	addi	r2,r2,5564
 80015a4:	288b883a 	add	r5,r5,r2
 80015a8:	28800017 	ldw	r2,0(r5)
 80015ac:	a0c7883a 	add	r3,r20,r3
 80015b0:	b54cf03a 	xor	r6,r22,r21
 80015b4:	1a000044 	addi	r8,r3,1
 80015b8:	1000683a 	jmp	r2
 80015bc:	08001800 	call	800180 <__alt_mem_sdram-0x77ffe80>
 80015c0:	080017ec 	andhi	zero,at,95
 80015c4:	080017ec 	andhi	zero,at,95
 80015c8:	080017d8 	cmpnei	zero,at,95
 80015cc:	08001618 	cmpnei	zero,at,88
 80015d0:	08001618 	cmpnei	zero,at,88
 80015d4:	080017c0 	call	80017c <__alt_mem_sdram-0x77ffe84>
 80015d8:	080017d8 	cmpnei	zero,at,95
 80015dc:	08001618 	cmpnei	zero,at,88
 80015e0:	080017c0 	call	80017c <__alt_mem_sdram-0x77ffe84>
 80015e4:	08001618 	cmpnei	zero,at,88
 80015e8:	080017d8 	cmpnei	zero,at,95
 80015ec:	0800161c 	xori	zero,at,88
 80015f0:	0800161c 	xori	zero,at,88
 80015f4:	0800161c 	xori	zero,at,88
 80015f8:	08001b3c 	xorhi	zero,at,108
 80015fc:	8104b03a 	or	r2,r16,r4
 8001600:	10006c1e 	bne	r2,zero,80017b4 <__muldf3+0x2e8>
 8001604:	01400204 	movi	r5,8
 8001608:	0021883a 	mov	r16,zero
 800160c:	002f883a 	mov	r23,zero
 8001610:	07000084 	movi	fp,2
 8001614:	003fcd06 	br	800154c <__alt_data_end+0xfc00154c>
 8001618:	3013883a 	mov	r9,r6
 800161c:	00800084 	movi	r2,2
 8001620:	e080501e 	bne	fp,r2,8001764 <__muldf3+0x298>
 8001624:	4cc0004c 	andi	r19,r9,1
 8001628:	0101ffc4 	movi	r4,2047
 800162c:	0021883a 	mov	r16,zero
 8001630:	002f883a 	mov	r23,zero
 8001634:	2008953a 	slli	r4,r4,20
 8001638:	98c03fcc 	andi	r3,r19,255
 800163c:	04400434 	movhi	r17,16
 8001640:	8c7fffc4 	addi	r17,r17,-1
 8001644:	180697fa 	slli	r3,r3,31
 8001648:	8460703a 	and	r16,r16,r17
 800164c:	8120b03a 	or	r16,r16,r4
 8001650:	80c6b03a 	or	r3,r16,r3
 8001654:	b805883a 	mov	r2,r23
 8001658:	dfc01117 	ldw	ra,68(sp)
 800165c:	df001017 	ldw	fp,64(sp)
 8001660:	ddc00f17 	ldw	r23,60(sp)
 8001664:	dd800e17 	ldw	r22,56(sp)
 8001668:	dd400d17 	ldw	r21,52(sp)
 800166c:	dd000c17 	ldw	r20,48(sp)
 8001670:	dcc00b17 	ldw	r19,44(sp)
 8001674:	dc800a17 	ldw	r18,40(sp)
 8001678:	dc400917 	ldw	r17,36(sp)
 800167c:	dc000817 	ldw	r16,32(sp)
 8001680:	dec01204 	addi	sp,sp,72
 8001684:	f800283a 	ret
 8001688:	8104b03a 	or	r2,r16,r4
 800168c:	10004426 	beq	r2,zero,80017a0 <__muldf3+0x2d4>
 8001690:	80014b26 	beq	r16,zero,8001bc0 <__muldf3+0x6f4>
 8001694:	8009883a 	mov	r4,r16
 8001698:	d9800715 	stw	r6,28(sp)
 800169c:	d9c00215 	stw	r7,8(sp)
 80016a0:	da400415 	stw	r9,16(sp)
 80016a4:	8001e640 	call	8001e64 <__clzsi2>
 80016a8:	d9800717 	ldw	r6,28(sp)
 80016ac:	d9c00217 	ldw	r7,8(sp)
 80016b0:	da400417 	ldw	r9,16(sp)
 80016b4:	1007883a 	mov	r3,r2
 80016b8:	01000a04 	movi	r4,40
 80016bc:	1dfffe04 	addi	r23,r3,-8
 80016c0:	20c9c83a 	sub	r4,r4,r3
 80016c4:	85e0983a 	sll	r16,r16,r23
 80016c8:	9108d83a 	srl	r4,r18,r4
 80016cc:	95ee983a 	sll	r23,r18,r23
 80016d0:	2420b03a 	or	r16,r4,r16
 80016d4:	053f0344 	movi	r20,-1011
 80016d8:	a0e9c83a 	sub	r20,r20,r3
 80016dc:	000b883a 	mov	r5,zero
 80016e0:	0039883a 	mov	fp,zero
 80016e4:	003f9906 	br	800154c <__alt_data_end+0xfc00154c>
 80016e8:	8984b03a 	or	r2,r17,r6
 80016ec:	10002a1e 	bne	r2,zero,8001798 <__muldf3+0x2cc>
 80016f0:	0023883a 	mov	r17,zero
 80016f4:	0025883a 	mov	r18,zero
 80016f8:	01c00084 	movi	r7,2
 80016fc:	003fa506 	br	8001594 <__alt_data_end+0xfc001594>
 8001700:	8984b03a 	or	r2,r17,r6
 8001704:	10002026 	beq	r2,zero,8001788 <__muldf3+0x2bc>
 8001708:	88011c26 	beq	r17,zero,8001b7c <__muldf3+0x6b0>
 800170c:	8809883a 	mov	r4,r17
 8001710:	d9400215 	stw	r5,8(sp)
 8001714:	d9800715 	stw	r6,28(sp)
 8001718:	da400415 	stw	r9,16(sp)
 800171c:	da800315 	stw	r10,12(sp)
 8001720:	8001e640 	call	8001e64 <__clzsi2>
 8001724:	d9400217 	ldw	r5,8(sp)
 8001728:	d9800717 	ldw	r6,28(sp)
 800172c:	da400417 	ldw	r9,16(sp)
 8001730:	da800317 	ldw	r10,12(sp)
 8001734:	1007883a 	mov	r3,r2
 8001738:	01000a04 	movi	r4,40
 800173c:	1cbffe04 	addi	r18,r3,-8
 8001740:	20c9c83a 	sub	r4,r4,r3
 8001744:	8ca2983a 	sll	r17,r17,r18
 8001748:	3108d83a 	srl	r4,r6,r4
 800174c:	34a4983a 	sll	r18,r6,r18
 8001750:	2462b03a 	or	r17,r4,r17
 8001754:	00bf0344 	movi	r2,-1011
 8001758:	10c7c83a 	sub	r3,r2,r3
 800175c:	000f883a 	mov	r7,zero
 8001760:	003f8c06 	br	8001594 <__alt_data_end+0xfc001594>
 8001764:	008000c4 	movi	r2,3
 8001768:	e0816d26 	beq	fp,r2,8001d20 <__muldf3+0x854>
 800176c:	00800044 	movi	r2,1
 8001770:	e081321e 	bne	fp,r2,8001c3c <__muldf3+0x770>
 8001774:	48a6703a 	and	r19,r9,r2
 8001778:	0009883a 	mov	r4,zero
 800177c:	0021883a 	mov	r16,zero
 8001780:	002f883a 	mov	r23,zero
 8001784:	003fab06 	br	8001634 <__alt_data_end+0xfc001634>
 8001788:	0023883a 	mov	r17,zero
 800178c:	0025883a 	mov	r18,zero
 8001790:	01c00044 	movi	r7,1
 8001794:	003f7f06 	br	8001594 <__alt_data_end+0xfc001594>
 8001798:	01c000c4 	movi	r7,3
 800179c:	003f7d06 	br	8001594 <__alt_data_end+0xfc001594>
 80017a0:	01400104 	movi	r5,4
 80017a4:	0021883a 	mov	r16,zero
 80017a8:	002f883a 	mov	r23,zero
 80017ac:	07000044 	movi	fp,1
 80017b0:	003f6606 	br	800154c <__alt_data_end+0xfc00154c>
 80017b4:	01400304 	movi	r5,12
 80017b8:	070000c4 	movi	fp,3
 80017bc:	003f6306 	br	800154c <__alt_data_end+0xfc00154c>
 80017c0:	04000434 	movhi	r16,16
 80017c4:	0027883a 	mov	r19,zero
 80017c8:	843fffc4 	addi	r16,r16,-1
 80017cc:	05ffffc4 	movi	r23,-1
 80017d0:	0101ffc4 	movi	r4,2047
 80017d4:	003f9706 	br	8001634 <__alt_data_end+0xfc001634>
 80017d8:	8821883a 	mov	r16,r17
 80017dc:	902f883a 	mov	r23,r18
 80017e0:	5013883a 	mov	r9,r10
 80017e4:	3839883a 	mov	fp,r7
 80017e8:	003f8c06 	br	800161c <__alt_data_end+0xfc00161c>
 80017ec:	8821883a 	mov	r16,r17
 80017f0:	902f883a 	mov	r23,r18
 80017f4:	3013883a 	mov	r9,r6
 80017f8:	3839883a 	mov	fp,r7
 80017fc:	003f8706 	br	800161c <__alt_data_end+0xfc00161c>
 8001800:	b82ad43a 	srli	r21,r23,16
 8001804:	9038d43a 	srli	fp,r18,16
 8001808:	bdffffcc 	andi	r23,r23,65535
 800180c:	94bfffcc 	andi	r18,r18,65535
 8001810:	9009883a 	mov	r4,r18
 8001814:	b80b883a 	mov	r5,r23
 8001818:	d8c00515 	stw	r3,20(sp)
 800181c:	d9800715 	stw	r6,28(sp)
 8001820:	da000615 	stw	r8,24(sp)
 8001824:	8001ff40 	call	8001ff4 <__mulsi3>
 8001828:	9009883a 	mov	r4,r18
 800182c:	a80b883a 	mov	r5,r21
 8001830:	1029883a 	mov	r20,r2
 8001834:	8001ff40 	call	8001ff4 <__mulsi3>
 8001838:	e009883a 	mov	r4,fp
 800183c:	a80b883a 	mov	r5,r21
 8001840:	102d883a 	mov	r22,r2
 8001844:	8001ff40 	call	8001ff4 <__mulsi3>
 8001848:	e009883a 	mov	r4,fp
 800184c:	b80b883a 	mov	r5,r23
 8001850:	1027883a 	mov	r19,r2
 8001854:	8001ff40 	call	8001ff4 <__mulsi3>
 8001858:	a008d43a 	srli	r4,r20,16
 800185c:	b085883a 	add	r2,r22,r2
 8001860:	d8c00517 	ldw	r3,20(sp)
 8001864:	110f883a 	add	r7,r2,r4
 8001868:	d9800717 	ldw	r6,28(sp)
 800186c:	da000617 	ldw	r8,24(sp)
 8001870:	3d80022e 	bgeu	r7,r22,800187c <__muldf3+0x3b0>
 8001874:	00800074 	movhi	r2,1
 8001878:	98a7883a 	add	r19,r19,r2
 800187c:	3804943a 	slli	r2,r7,16
 8001880:	380ed43a 	srli	r7,r7,16
 8001884:	882cd43a 	srli	r22,r17,16
 8001888:	a53fffcc 	andi	r20,r20,65535
 800188c:	8c7fffcc 	andi	r17,r17,65535
 8001890:	1529883a 	add	r20,r2,r20
 8001894:	8809883a 	mov	r4,r17
 8001898:	b80b883a 	mov	r5,r23
 800189c:	d8c00515 	stw	r3,20(sp)
 80018a0:	d9800715 	stw	r6,28(sp)
 80018a4:	da000615 	stw	r8,24(sp)
 80018a8:	d9c00015 	stw	r7,0(sp)
 80018ac:	dd000115 	stw	r20,4(sp)
 80018b0:	8001ff40 	call	8001ff4 <__mulsi3>
 80018b4:	a80b883a 	mov	r5,r21
 80018b8:	8809883a 	mov	r4,r17
 80018bc:	d8800415 	stw	r2,16(sp)
 80018c0:	8001ff40 	call	8001ff4 <__mulsi3>
 80018c4:	a80b883a 	mov	r5,r21
 80018c8:	b009883a 	mov	r4,r22
 80018cc:	1029883a 	mov	r20,r2
 80018d0:	8001ff40 	call	8001ff4 <__mulsi3>
 80018d4:	b009883a 	mov	r4,r22
 80018d8:	b80b883a 	mov	r5,r23
 80018dc:	102b883a 	mov	r21,r2
 80018e0:	8001ff40 	call	8001ff4 <__mulsi3>
 80018e4:	da400417 	ldw	r9,16(sp)
 80018e8:	a085883a 	add	r2,r20,r2
 80018ec:	d8c00517 	ldw	r3,20(sp)
 80018f0:	4808d43a 	srli	r4,r9,16
 80018f4:	d9800717 	ldw	r6,28(sp)
 80018f8:	da000617 	ldw	r8,24(sp)
 80018fc:	1109883a 	add	r4,r2,r4
 8001900:	2500022e 	bgeu	r4,r20,800190c <__muldf3+0x440>
 8001904:	00800074 	movhi	r2,1
 8001908:	a8ab883a 	add	r21,r21,r2
 800190c:	200e943a 	slli	r7,r4,16
 8001910:	2004d43a 	srli	r2,r4,16
 8001914:	802ed43a 	srli	r23,r16,16
 8001918:	843fffcc 	andi	r16,r16,65535
 800191c:	4d3fffcc 	andi	r20,r9,65535
 8001920:	9009883a 	mov	r4,r18
 8001924:	800b883a 	mov	r5,r16
 8001928:	3d29883a 	add	r20,r7,r20
 800192c:	d8c00515 	stw	r3,20(sp)
 8001930:	d9800715 	stw	r6,28(sp)
 8001934:	da000615 	stw	r8,24(sp)
 8001938:	a8ab883a 	add	r21,r21,r2
 800193c:	8001ff40 	call	8001ff4 <__mulsi3>
 8001940:	9009883a 	mov	r4,r18
 8001944:	b80b883a 	mov	r5,r23
 8001948:	d8800315 	stw	r2,12(sp)
 800194c:	8001ff40 	call	8001ff4 <__mulsi3>
 8001950:	e009883a 	mov	r4,fp
 8001954:	b80b883a 	mov	r5,r23
 8001958:	1025883a 	mov	r18,r2
 800195c:	8001ff40 	call	8001ff4 <__mulsi3>
 8001960:	e009883a 	mov	r4,fp
 8001964:	800b883a 	mov	r5,r16
 8001968:	d8800215 	stw	r2,8(sp)
 800196c:	8001ff40 	call	8001ff4 <__mulsi3>
 8001970:	da800317 	ldw	r10,12(sp)
 8001974:	d9400017 	ldw	r5,0(sp)
 8001978:	9085883a 	add	r2,r18,r2
 800197c:	5008d43a 	srli	r4,r10,16
 8001980:	a153883a 	add	r9,r20,r5
 8001984:	d8c00517 	ldw	r3,20(sp)
 8001988:	1109883a 	add	r4,r2,r4
 800198c:	d9800717 	ldw	r6,28(sp)
 8001990:	da000617 	ldw	r8,24(sp)
 8001994:	dac00217 	ldw	r11,8(sp)
 8001998:	2480022e 	bgeu	r4,r18,80019a4 <__muldf3+0x4d8>
 800199c:	00800074 	movhi	r2,1
 80019a0:	5897883a 	add	r11,r11,r2
 80019a4:	200e943a 	slli	r7,r4,16
 80019a8:	2038d43a 	srli	fp,r4,16
 80019ac:	52bfffcc 	andi	r10,r10,65535
 80019b0:	3a8f883a 	add	r7,r7,r10
 80019b4:	8809883a 	mov	r4,r17
 80019b8:	800b883a 	mov	r5,r16
 80019bc:	d8c00515 	stw	r3,20(sp)
 80019c0:	d9800715 	stw	r6,28(sp)
 80019c4:	d9c00215 	stw	r7,8(sp)
 80019c8:	da000615 	stw	r8,24(sp)
 80019cc:	da400415 	stw	r9,16(sp)
 80019d0:	5f39883a 	add	fp,r11,fp
 80019d4:	8001ff40 	call	8001ff4 <__mulsi3>
 80019d8:	8809883a 	mov	r4,r17
 80019dc:	b80b883a 	mov	r5,r23
 80019e0:	1025883a 	mov	r18,r2
 80019e4:	8001ff40 	call	8001ff4 <__mulsi3>
 80019e8:	b009883a 	mov	r4,r22
 80019ec:	b80b883a 	mov	r5,r23
 80019f0:	d8800315 	stw	r2,12(sp)
 80019f4:	8001ff40 	call	8001ff4 <__mulsi3>
 80019f8:	b009883a 	mov	r4,r22
 80019fc:	800b883a 	mov	r5,r16
 8001a00:	1023883a 	mov	r17,r2
 8001a04:	8001ff40 	call	8001ff4 <__mulsi3>
 8001a08:	da800317 	ldw	r10,12(sp)
 8001a0c:	9008d43a 	srli	r4,r18,16
 8001a10:	d8c00517 	ldw	r3,20(sp)
 8001a14:	5085883a 	add	r2,r10,r2
 8001a18:	1109883a 	add	r4,r2,r4
 8001a1c:	d9800717 	ldw	r6,28(sp)
 8001a20:	d9c00217 	ldw	r7,8(sp)
 8001a24:	da000617 	ldw	r8,24(sp)
 8001a28:	da400417 	ldw	r9,16(sp)
 8001a2c:	2280022e 	bgeu	r4,r10,8001a38 <__muldf3+0x56c>
 8001a30:	00800074 	movhi	r2,1
 8001a34:	88a3883a 	add	r17,r17,r2
 8001a38:	2004943a 	slli	r2,r4,16
 8001a3c:	94bfffcc 	andi	r18,r18,65535
 8001a40:	4ce7883a 	add	r19,r9,r19
 8001a44:	14a5883a 	add	r18,r2,r18
 8001a48:	9d29803a 	cmpltu	r20,r19,r20
 8001a4c:	9565883a 	add	r18,r18,r21
 8001a50:	9505883a 	add	r2,r18,r20
 8001a54:	99e7883a 	add	r19,r19,r7
 8001a58:	99cf803a 	cmpltu	r7,r19,r7
 8001a5c:	e08b883a 	add	r5,fp,r2
 8001a60:	2008d43a 	srli	r4,r4,16
 8001a64:	29ef883a 	add	r23,r5,r7
 8001a68:	1529803a 	cmpltu	r20,r2,r20
 8001a6c:	956b803a 	cmpltu	r21,r18,r21
 8001a70:	b9cf803a 	cmpltu	r7,r23,r7
 8001a74:	a564b03a 	or	r18,r20,r21
 8001a78:	2f39803a 	cmpltu	fp,r5,fp
 8001a7c:	9125883a 	add	r18,r18,r4
 8001a80:	3f38b03a 	or	fp,r7,fp
 8001a84:	9725883a 	add	r18,r18,fp
 8001a88:	9804927a 	slli	r2,r19,9
 8001a8c:	9463883a 	add	r17,r18,r17
 8001a90:	d9000117 	ldw	r4,4(sp)
 8001a94:	b820d5fa 	srli	r16,r23,23
 8001a98:	8822927a 	slli	r17,r17,9
 8001a9c:	9826d5fa 	srli	r19,r19,23
 8001aa0:	1104b03a 	or	r2,r2,r4
 8001aa4:	b82e927a 	slli	r23,r23,9
 8001aa8:	1004c03a 	cmpne	r2,r2,zero
 8001aac:	8c20b03a 	or	r16,r17,r16
 8001ab0:	14e6b03a 	or	r19,r2,r19
 8001ab4:	8080402c 	andhi	r2,r16,256
 8001ab8:	9deeb03a 	or	r23,r19,r23
 8001abc:	10000726 	beq	r2,zero,8001adc <__muldf3+0x610>
 8001ac0:	b804d07a 	srli	r2,r23,1
 8001ac4:	800697fa 	slli	r3,r16,31
 8001ac8:	bdc0004c 	andi	r23,r23,1
 8001acc:	8020d07a 	srli	r16,r16,1
 8001ad0:	b8aeb03a 	or	r23,r23,r2
 8001ad4:	b8eeb03a 	or	r23,r23,r3
 8001ad8:	4007883a 	mov	r3,r8
 8001adc:	1900ffc4 	addi	r4,r3,1023
 8001ae0:	01004d0e 	bge	zero,r4,8001c18 <__muldf3+0x74c>
 8001ae4:	b88001cc 	andi	r2,r23,7
 8001ae8:	10000726 	beq	r2,zero,8001b08 <__muldf3+0x63c>
 8001aec:	b94003cc 	andi	r5,r23,15
 8001af0:	00800104 	movi	r2,4
 8001af4:	28800426 	beq	r5,r2,8001b08 <__muldf3+0x63c>
 8001af8:	b885883a 	add	r2,r23,r2
 8001afc:	15ef803a 	cmpltu	r23,r2,r23
 8001b00:	85e1883a 	add	r16,r16,r23
 8001b04:	102f883a 	mov	r23,r2
 8001b08:	8080402c 	andhi	r2,r16,256
 8001b0c:	10000426 	beq	r2,zero,8001b20 <__muldf3+0x654>
 8001b10:	00bfc034 	movhi	r2,65280
 8001b14:	10bfffc4 	addi	r2,r2,-1
 8001b18:	19010004 	addi	r4,r3,1024
 8001b1c:	80a0703a 	and	r16,r16,r2
 8001b20:	0081ff84 	movi	r2,2046
 8001b24:	1100340e 	bge	r2,r4,8001bf8 <__muldf3+0x72c>
 8001b28:	34c0004c 	andi	r19,r6,1
 8001b2c:	0101ffc4 	movi	r4,2047
 8001b30:	0021883a 	mov	r16,zero
 8001b34:	002f883a 	mov	r23,zero
 8001b38:	003ebe06 	br	8001634 <__alt_data_end+0xfc001634>
 8001b3c:	8080022c 	andhi	r2,r16,8
 8001b40:	10000926 	beq	r2,zero,8001b68 <__muldf3+0x69c>
 8001b44:	8880022c 	andhi	r2,r17,8
 8001b48:	1000071e 	bne	r2,zero,8001b68 <__muldf3+0x69c>
 8001b4c:	00800434 	movhi	r2,16
 8001b50:	8c000234 	orhi	r16,r17,8
 8001b54:	10bfffc4 	addi	r2,r2,-1
 8001b58:	b027883a 	mov	r19,r22
 8001b5c:	80a0703a 	and	r16,r16,r2
 8001b60:	902f883a 	mov	r23,r18
 8001b64:	003f1a06 	br	80017d0 <__alt_data_end+0xfc0017d0>
 8001b68:	00800434 	movhi	r2,16
 8001b6c:	84000234 	orhi	r16,r16,8
 8001b70:	10bfffc4 	addi	r2,r2,-1
 8001b74:	80a0703a 	and	r16,r16,r2
 8001b78:	003f1506 	br	80017d0 <__alt_data_end+0xfc0017d0>
 8001b7c:	3009883a 	mov	r4,r6
 8001b80:	d9400215 	stw	r5,8(sp)
 8001b84:	d9800715 	stw	r6,28(sp)
 8001b88:	da400415 	stw	r9,16(sp)
 8001b8c:	da800315 	stw	r10,12(sp)
 8001b90:	8001e640 	call	8001e64 <__clzsi2>
 8001b94:	10c00804 	addi	r3,r2,32
 8001b98:	010009c4 	movi	r4,39
 8001b9c:	d9400217 	ldw	r5,8(sp)
 8001ba0:	d9800717 	ldw	r6,28(sp)
 8001ba4:	da400417 	ldw	r9,16(sp)
 8001ba8:	da800317 	ldw	r10,12(sp)
 8001bac:	20fee20e 	bge	r4,r3,8001738 <__alt_data_end+0xfc001738>
 8001bb0:	147ffe04 	addi	r17,r2,-8
 8001bb4:	9462983a 	sll	r17,r18,r17
 8001bb8:	0025883a 	mov	r18,zero
 8001bbc:	003ee506 	br	8001754 <__alt_data_end+0xfc001754>
 8001bc0:	d9800715 	stw	r6,28(sp)
 8001bc4:	d9c00215 	stw	r7,8(sp)
 8001bc8:	da400415 	stw	r9,16(sp)
 8001bcc:	8001e640 	call	8001e64 <__clzsi2>
 8001bd0:	10c00804 	addi	r3,r2,32
 8001bd4:	010009c4 	movi	r4,39
 8001bd8:	d9800717 	ldw	r6,28(sp)
 8001bdc:	d9c00217 	ldw	r7,8(sp)
 8001be0:	da400417 	ldw	r9,16(sp)
 8001be4:	20feb40e 	bge	r4,r3,80016b8 <__alt_data_end+0xfc0016b8>
 8001be8:	143ffe04 	addi	r16,r2,-8
 8001bec:	9420983a 	sll	r16,r18,r16
 8001bf0:	002f883a 	mov	r23,zero
 8001bf4:	003eb706 	br	80016d4 <__alt_data_end+0xfc0016d4>
 8001bf8:	8004977a 	slli	r2,r16,29
 8001bfc:	b82ed0fa 	srli	r23,r23,3
 8001c00:	8020927a 	slli	r16,r16,9
 8001c04:	2101ffcc 	andi	r4,r4,2047
 8001c08:	15eeb03a 	or	r23,r2,r23
 8001c0c:	8020d33a 	srli	r16,r16,12
 8001c10:	34c0004c 	andi	r19,r6,1
 8001c14:	003e8706 	br	8001634 <__alt_data_end+0xfc001634>
 8001c18:	00bf0084 	movi	r2,-1022
 8001c1c:	10c5c83a 	sub	r2,r2,r3
 8001c20:	01000e04 	movi	r4,56
 8001c24:	2080080e 	bge	r4,r2,8001c48 <__muldf3+0x77c>
 8001c28:	34c0004c 	andi	r19,r6,1
 8001c2c:	0009883a 	mov	r4,zero
 8001c30:	0021883a 	mov	r16,zero
 8001c34:	002f883a 	mov	r23,zero
 8001c38:	003e7e06 	br	8001634 <__alt_data_end+0xfc001634>
 8001c3c:	4007883a 	mov	r3,r8
 8001c40:	480d883a 	mov	r6,r9
 8001c44:	003fa506 	br	8001adc <__alt_data_end+0xfc001adc>
 8001c48:	010007c4 	movi	r4,31
 8001c4c:	20801816 	blt	r4,r2,8001cb0 <__muldf3+0x7e4>
 8001c50:	18c10784 	addi	r3,r3,1054
 8001c54:	80c8983a 	sll	r4,r16,r3
 8001c58:	b88ad83a 	srl	r5,r23,r2
 8001c5c:	b8c6983a 	sll	r3,r23,r3
 8001c60:	80a0d83a 	srl	r16,r16,r2
 8001c64:	2908b03a 	or	r4,r5,r4
 8001c68:	1804c03a 	cmpne	r2,r3,zero
 8001c6c:	2088b03a 	or	r4,r4,r2
 8001c70:	208001cc 	andi	r2,r4,7
 8001c74:	10000726 	beq	r2,zero,8001c94 <__muldf3+0x7c8>
 8001c78:	20c003cc 	andi	r3,r4,15
 8001c7c:	00800104 	movi	r2,4
 8001c80:	18800426 	beq	r3,r2,8001c94 <__muldf3+0x7c8>
 8001c84:	20c00104 	addi	r3,r4,4
 8001c88:	1905803a 	cmpltu	r2,r3,r4
 8001c8c:	80a1883a 	add	r16,r16,r2
 8001c90:	1809883a 	mov	r4,r3
 8001c94:	8080202c 	andhi	r2,r16,128
 8001c98:	10001b26 	beq	r2,zero,8001d08 <__muldf3+0x83c>
 8001c9c:	34c0004c 	andi	r19,r6,1
 8001ca0:	01000044 	movi	r4,1
 8001ca4:	0021883a 	mov	r16,zero
 8001ca8:	002f883a 	mov	r23,zero
 8001cac:	003e6106 	br	8001634 <__alt_data_end+0xfc001634>
 8001cb0:	013ef884 	movi	r4,-1054
 8001cb4:	20c9c83a 	sub	r4,r4,r3
 8001cb8:	01400804 	movi	r5,32
 8001cbc:	8108d83a 	srl	r4,r16,r4
 8001cc0:	11401526 	beq	r2,r5,8001d18 <__muldf3+0x84c>
 8001cc4:	18c10f84 	addi	r3,r3,1086
 8001cc8:	80e0983a 	sll	r16,r16,r3
 8001ccc:	85eeb03a 	or	r23,r16,r23
 8001cd0:	b804c03a 	cmpne	r2,r23,zero
 8001cd4:	1108b03a 	or	r4,r2,r4
 8001cd8:	20c001cc 	andi	r3,r4,7
 8001cdc:	1800061e 	bne	r3,zero,8001cf8 <__muldf3+0x82c>
 8001ce0:	0021883a 	mov	r16,zero
 8001ce4:	202ed0fa 	srli	r23,r4,3
 8001ce8:	34c0004c 	andi	r19,r6,1
 8001cec:	0009883a 	mov	r4,zero
 8001cf0:	b8eeb03a 	or	r23,r23,r3
 8001cf4:	003e4f06 	br	8001634 <__alt_data_end+0xfc001634>
 8001cf8:	20c003cc 	andi	r3,r4,15
 8001cfc:	00800104 	movi	r2,4
 8001d00:	0021883a 	mov	r16,zero
 8001d04:	18bfdf1e 	bne	r3,r2,8001c84 <__alt_data_end+0xfc001c84>
 8001d08:	8004927a 	slli	r2,r16,9
 8001d0c:	8006977a 	slli	r3,r16,29
 8001d10:	1020d33a 	srli	r16,r2,12
 8001d14:	003ff306 	br	8001ce4 <__alt_data_end+0xfc001ce4>
 8001d18:	0021883a 	mov	r16,zero
 8001d1c:	003feb06 	br	8001ccc <__alt_data_end+0xfc001ccc>
 8001d20:	00800434 	movhi	r2,16
 8001d24:	84000234 	orhi	r16,r16,8
 8001d28:	10bfffc4 	addi	r2,r2,-1
 8001d2c:	4cc0004c 	andi	r19,r9,1
 8001d30:	80a0703a 	and	r16,r16,r2
 8001d34:	003ea606 	br	80017d0 <__alt_data_end+0xfc0017d0>

08001d38 <__fixdfsi>:
 8001d38:	2806d53a 	srli	r3,r5,20
 8001d3c:	00800434 	movhi	r2,16
 8001d40:	10bfffc4 	addi	r2,r2,-1
 8001d44:	18c1ffcc 	andi	r3,r3,2047
 8001d48:	0180ff84 	movi	r6,1022
 8001d4c:	2884703a 	and	r2,r5,r2
 8001d50:	280ad7fa 	srli	r5,r5,31
 8001d54:	30c0130e 	bge	r6,r3,8001da4 <__fixdfsi+0x6c>
 8001d58:	01810744 	movi	r6,1053
 8001d5c:	30c00d16 	blt	r6,r3,8001d94 <__fixdfsi+0x5c>
 8001d60:	01810cc4 	movi	r6,1075
 8001d64:	30cdc83a 	sub	r6,r6,r3
 8001d68:	01c007c4 	movi	r7,31
 8001d6c:	10800434 	orhi	r2,r2,16
 8001d70:	39800e0e 	bge	r7,r6,8001dac <__fixdfsi+0x74>
 8001d74:	010104c4 	movi	r4,1043
 8001d78:	20c7c83a 	sub	r3,r4,r3
 8001d7c:	10c6d83a 	srl	r3,r2,r3
 8001d80:	29403fcc 	andi	r5,r5,255
 8001d84:	0145c83a 	sub	r2,zero,r5
 8001d88:	1884f03a 	xor	r2,r3,r2
 8001d8c:	1145883a 	add	r2,r2,r5
 8001d90:	f800283a 	ret
 8001d94:	00a00034 	movhi	r2,32768
 8001d98:	10bfffc4 	addi	r2,r2,-1
 8001d9c:	2885883a 	add	r2,r5,r2
 8001da0:	f800283a 	ret
 8001da4:	0005883a 	mov	r2,zero
 8001da8:	f800283a 	ret
 8001dac:	18fefb44 	addi	r3,r3,-1043
 8001db0:	2188d83a 	srl	r4,r4,r6
 8001db4:	10c6983a 	sll	r3,r2,r3
 8001db8:	20c6b03a 	or	r3,r4,r3
 8001dbc:	003ff006 	br	8001d80 <__alt_data_end+0xfc001d80>

08001dc0 <__floatunsidf>:
 8001dc0:	defffe04 	addi	sp,sp,-8
 8001dc4:	dc000015 	stw	r16,0(sp)
 8001dc8:	dfc00115 	stw	ra,4(sp)
 8001dcc:	2021883a 	mov	r16,r4
 8001dd0:	20001026 	beq	r4,zero,8001e14 <__floatunsidf+0x54>
 8001dd4:	8001e640 	call	8001e64 <__clzsi2>
 8001dd8:	01410784 	movi	r5,1054
 8001ddc:	100d883a 	mov	r6,r2
 8001de0:	288bc83a 	sub	r5,r5,r2
 8001de4:	00800284 	movi	r2,10
 8001de8:	11801616 	blt	r2,r6,8001e44 <__floatunsidf+0x84>
 8001dec:	008002c4 	movi	r2,11
 8001df0:	1185c83a 	sub	r2,r2,r6
 8001df4:	8084d83a 	srl	r2,r16,r2
 8001df8:	00c00434 	movhi	r3,16
 8001dfc:	31c00544 	addi	r7,r6,21
 8001e00:	18ffffc4 	addi	r3,r3,-1
 8001e04:	81e0983a 	sll	r16,r16,r7
 8001e08:	10cc703a 	and	r6,r2,r3
 8001e0c:	2941ffcc 	andi	r5,r5,2047
 8001e10:	00000206 	br	8001e1c <__floatunsidf+0x5c>
 8001e14:	000b883a 	mov	r5,zero
 8001e18:	000d883a 	mov	r6,zero
 8001e1c:	280a953a 	slli	r5,r5,20
 8001e20:	00c00434 	movhi	r3,16
 8001e24:	18ffffc4 	addi	r3,r3,-1
 8001e28:	30c6703a 	and	r3,r6,r3
 8001e2c:	8005883a 	mov	r2,r16
 8001e30:	1946b03a 	or	r3,r3,r5
 8001e34:	dfc00117 	ldw	ra,4(sp)
 8001e38:	dc000017 	ldw	r16,0(sp)
 8001e3c:	dec00204 	addi	sp,sp,8
 8001e40:	f800283a 	ret
 8001e44:	31bffd44 	addi	r6,r6,-11
 8001e48:	818c983a 	sll	r6,r16,r6
 8001e4c:	00800434 	movhi	r2,16
 8001e50:	10bfffc4 	addi	r2,r2,-1
 8001e54:	2941ffcc 	andi	r5,r5,2047
 8001e58:	0021883a 	mov	r16,zero
 8001e5c:	308c703a 	and	r6,r6,r2
 8001e60:	003fee06 	br	8001e1c <__alt_data_end+0xfc001e1c>

08001e64 <__clzsi2>:
 8001e64:	00bfffd4 	movui	r2,65535
 8001e68:	11000b36 	bltu	r2,r4,8001e98 <__clzsi2+0x34>
 8001e6c:	00803fc4 	movi	r2,255
 8001e70:	1100122e 	bgeu	r2,r4,8001ebc <__clzsi2+0x58>
 8001e74:	00c00204 	movi	r3,8
 8001e78:	01400604 	movi	r5,24
 8001e7c:	20c8d83a 	srl	r4,r4,r3
 8001e80:	00820074 	movhi	r2,2049
 8001e84:	10807f04 	addi	r2,r2,508
 8001e88:	1109883a 	add	r4,r2,r4
 8001e8c:	20800003 	ldbu	r2,0(r4)
 8001e90:	2885c83a 	sub	r2,r5,r2
 8001e94:	f800283a 	ret
 8001e98:	00804034 	movhi	r2,256
 8001e9c:	10bfffc4 	addi	r2,r2,-1
 8001ea0:	11000336 	bltu	r2,r4,8001eb0 <__clzsi2+0x4c>
 8001ea4:	00c00404 	movi	r3,16
 8001ea8:	180b883a 	mov	r5,r3
 8001eac:	003ff306 	br	8001e7c <__alt_data_end+0xfc001e7c>
 8001eb0:	00c00604 	movi	r3,24
 8001eb4:	01400204 	movi	r5,8
 8001eb8:	003ff006 	br	8001e7c <__alt_data_end+0xfc001e7c>
 8001ebc:	0007883a 	mov	r3,zero
 8001ec0:	01400804 	movi	r5,32
 8001ec4:	003fed06 	br	8001e7c <__alt_data_end+0xfc001e7c>

08001ec8 <udivmodsi4>:
 8001ec8:	2900182e 	bgeu	r5,r4,8001f2c <udivmodsi4+0x64>
 8001ecc:	28001716 	blt	r5,zero,8001f2c <udivmodsi4+0x64>
 8001ed0:	00800804 	movi	r2,32
 8001ed4:	00c00044 	movi	r3,1
 8001ed8:	00000206 	br	8001ee4 <udivmodsi4+0x1c>
 8001edc:	10001126 	beq	r2,zero,8001f24 <udivmodsi4+0x5c>
 8001ee0:	28000516 	blt	r5,zero,8001ef8 <udivmodsi4+0x30>
 8001ee4:	294b883a 	add	r5,r5,r5
 8001ee8:	10bfffc4 	addi	r2,r2,-1
 8001eec:	18c7883a 	add	r3,r3,r3
 8001ef0:	293ffa36 	bltu	r5,r4,8001edc <__alt_data_end+0xfc001edc>
 8001ef4:	18000b26 	beq	r3,zero,8001f24 <udivmodsi4+0x5c>
 8001ef8:	0005883a 	mov	r2,zero
 8001efc:	21400236 	bltu	r4,r5,8001f08 <udivmodsi4+0x40>
 8001f00:	2149c83a 	sub	r4,r4,r5
 8001f04:	10c4b03a 	or	r2,r2,r3
 8001f08:	1806d07a 	srli	r3,r3,1
 8001f0c:	280ad07a 	srli	r5,r5,1
 8001f10:	183ffa1e 	bne	r3,zero,8001efc <__alt_data_end+0xfc001efc>
 8001f14:	3000011e 	bne	r6,zero,8001f1c <udivmodsi4+0x54>
 8001f18:	f800283a 	ret
 8001f1c:	2005883a 	mov	r2,r4
 8001f20:	f800283a 	ret
 8001f24:	0005883a 	mov	r2,zero
 8001f28:	003ffa06 	br	8001f14 <__alt_data_end+0xfc001f14>
 8001f2c:	00c00044 	movi	r3,1
 8001f30:	003ff106 	br	8001ef8 <__alt_data_end+0xfc001ef8>

08001f34 <__divsi3>:
 8001f34:	defffe04 	addi	sp,sp,-8
 8001f38:	dfc00115 	stw	ra,4(sp)
 8001f3c:	dc000015 	stw	r16,0(sp)
 8001f40:	20000b16 	blt	r4,zero,8001f70 <__divsi3+0x3c>
 8001f44:	0021883a 	mov	r16,zero
 8001f48:	28000c16 	blt	r5,zero,8001f7c <__divsi3+0x48>
 8001f4c:	000d883a 	mov	r6,zero
 8001f50:	8001ec80 	call	8001ec8 <udivmodsi4>
 8001f54:	0407c83a 	sub	r3,zero,r16
 8001f58:	1884f03a 	xor	r2,r3,r2
 8001f5c:	1405883a 	add	r2,r2,r16
 8001f60:	dfc00117 	ldw	ra,4(sp)
 8001f64:	dc000017 	ldw	r16,0(sp)
 8001f68:	dec00204 	addi	sp,sp,8
 8001f6c:	f800283a 	ret
 8001f70:	0109c83a 	sub	r4,zero,r4
 8001f74:	04000044 	movi	r16,1
 8001f78:	283ff40e 	bge	r5,zero,8001f4c <__alt_data_end+0xfc001f4c>
 8001f7c:	014bc83a 	sub	r5,zero,r5
 8001f80:	8400005c 	xori	r16,r16,1
 8001f84:	003ff106 	br	8001f4c <__alt_data_end+0xfc001f4c>

08001f88 <__modsi3>:
 8001f88:	defffd04 	addi	sp,sp,-12
 8001f8c:	dfc00215 	stw	ra,8(sp)
 8001f90:	dc400115 	stw	r17,4(sp)
 8001f94:	dc000015 	stw	r16,0(sp)
 8001f98:	20000c16 	blt	r4,zero,8001fcc <__modsi3+0x44>
 8001f9c:	0023883a 	mov	r17,zero
 8001fa0:	0021883a 	mov	r16,zero
 8001fa4:	28000d16 	blt	r5,zero,8001fdc <__modsi3+0x54>
 8001fa8:	01800044 	movi	r6,1
 8001fac:	8001ec80 	call	8001ec8 <udivmodsi4>
 8001fb0:	1404f03a 	xor	r2,r2,r16
 8001fb4:	8885883a 	add	r2,r17,r2
 8001fb8:	dfc00217 	ldw	ra,8(sp)
 8001fbc:	dc400117 	ldw	r17,4(sp)
 8001fc0:	dc000017 	ldw	r16,0(sp)
 8001fc4:	dec00304 	addi	sp,sp,12
 8001fc8:	f800283a 	ret
 8001fcc:	0109c83a 	sub	r4,zero,r4
 8001fd0:	04400044 	movi	r17,1
 8001fd4:	043fffc4 	movi	r16,-1
 8001fd8:	283ff30e 	bge	r5,zero,8001fa8 <__alt_data_end+0xfc001fa8>
 8001fdc:	014bc83a 	sub	r5,zero,r5
 8001fe0:	003ff106 	br	8001fa8 <__alt_data_end+0xfc001fa8>

08001fe4 <__udivsi3>:
 8001fe4:	000d883a 	mov	r6,zero
 8001fe8:	8001ec81 	jmpi	8001ec8 <udivmodsi4>

08001fec <__umodsi3>:
 8001fec:	01800044 	movi	r6,1
 8001ff0:	8001ec81 	jmpi	8001ec8 <udivmodsi4>

08001ff4 <__mulsi3>:
 8001ff4:	0005883a 	mov	r2,zero
 8001ff8:	20000726 	beq	r4,zero,8002018 <__mulsi3+0x24>
 8001ffc:	20c0004c 	andi	r3,r4,1
 8002000:	2008d07a 	srli	r4,r4,1
 8002004:	18000126 	beq	r3,zero,800200c <__mulsi3+0x18>
 8002008:	1145883a 	add	r2,r2,r5
 800200c:	294b883a 	add	r5,r5,r5
 8002010:	203ffa1e 	bne	r4,zero,8001ffc <__alt_data_end+0xfc001ffc>
 8002014:	f800283a 	ret
 8002018:	f800283a 	ret

0800201c <_printf_r>:
 800201c:	defffd04 	addi	sp,sp,-12
 8002020:	dfc00015 	stw	ra,0(sp)
 8002024:	d9800115 	stw	r6,4(sp)
 8002028:	d9c00215 	stw	r7,8(sp)
 800202c:	280d883a 	mov	r6,r5
 8002030:	21400217 	ldw	r5,8(r4)
 8002034:	d9c00104 	addi	r7,sp,4
 8002038:	80021e80 	call	80021e8 <___vfprintf_internal_r>
 800203c:	dfc00017 	ldw	ra,0(sp)
 8002040:	dec00304 	addi	sp,sp,12
 8002044:	f800283a 	ret

08002048 <printf>:
 8002048:	defffc04 	addi	sp,sp,-16
 800204c:	dfc00015 	stw	ra,0(sp)
 8002050:	d9400115 	stw	r5,4(sp)
 8002054:	d9800215 	stw	r6,8(sp)
 8002058:	d9c00315 	stw	r7,12(sp)
 800205c:	00820074 	movhi	r2,2049
 8002060:	1087fc04 	addi	r2,r2,8176
 8002064:	10800017 	ldw	r2,0(r2)
 8002068:	200b883a 	mov	r5,r4
 800206c:	d9800104 	addi	r6,sp,4
 8002070:	11000217 	ldw	r4,8(r2)
 8002074:	80042e40 	call	80042e4 <__vfprintf_internal>
 8002078:	dfc00017 	ldw	ra,0(sp)
 800207c:	dec00404 	addi	sp,sp,16
 8002080:	f800283a 	ret

08002084 <_puts_r>:
 8002084:	defff604 	addi	sp,sp,-40
 8002088:	dc000715 	stw	r16,28(sp)
 800208c:	2021883a 	mov	r16,r4
 8002090:	2809883a 	mov	r4,r5
 8002094:	dc400815 	stw	r17,32(sp)
 8002098:	dfc00915 	stw	ra,36(sp)
 800209c:	2823883a 	mov	r17,r5
 80020a0:	80021500 	call	8002150 <strlen>
 80020a4:	00c20074 	movhi	r3,2049
 80020a8:	18c7fc04 	addi	r3,r3,8176
 80020ac:	18c00017 	ldw	r3,0(r3)
 80020b0:	11000044 	addi	r4,r2,1
 80020b4:	d8800115 	stw	r2,4(sp)
 80020b8:	18c00217 	ldw	r3,8(r3)
 80020bc:	01420074 	movhi	r5,2049
 80020c0:	2940bf04 	addi	r5,r5,764
 80020c4:	1880030b 	ldhu	r2,12(r3)
 80020c8:	d9400215 	stw	r5,8(sp)
 80020cc:	d9000615 	stw	r4,24(sp)
 80020d0:	01400044 	movi	r5,1
 80020d4:	01000084 	movi	r4,2
 80020d8:	d9000515 	stw	r4,20(sp)
 80020dc:	dc400015 	stw	r17,0(sp)
 80020e0:	d9400315 	stw	r5,12(sp)
 80020e4:	dec00415 	stw	sp,16(sp)
 80020e8:	1108000c 	andi	r4,r2,8192
 80020ec:	2000061e 	bne	r4,zero,8002108 <_puts_r+0x84>
 80020f0:	19401917 	ldw	r5,100(r3)
 80020f4:	0137ffc4 	movi	r4,-8193
 80020f8:	10880014 	ori	r2,r2,8192
 80020fc:	2908703a 	and	r4,r5,r4
 8002100:	1880030d 	sth	r2,12(r3)
 8002104:	19001915 	stw	r4,100(r3)
 8002108:	81400217 	ldw	r5,8(r16)
 800210c:	8009883a 	mov	r4,r16
 8002110:	d9800404 	addi	r6,sp,16
 8002114:	80067a80 	call	80067a8 <__sfvwrite_r>
 8002118:	1000061e 	bne	r2,zero,8002134 <_puts_r+0xb0>
 800211c:	00800284 	movi	r2,10
 8002120:	dfc00917 	ldw	ra,36(sp)
 8002124:	dc400817 	ldw	r17,32(sp)
 8002128:	dc000717 	ldw	r16,28(sp)
 800212c:	dec00a04 	addi	sp,sp,40
 8002130:	f800283a 	ret
 8002134:	00bfffc4 	movi	r2,-1
 8002138:	003ff906 	br	8002120 <__alt_data_end+0xfc002120>

0800213c <puts>:
 800213c:	00820074 	movhi	r2,2049
 8002140:	1087fc04 	addi	r2,r2,8176
 8002144:	200b883a 	mov	r5,r4
 8002148:	11000017 	ldw	r4,0(r2)
 800214c:	80020841 	jmpi	8002084 <_puts_r>

08002150 <strlen>:
 8002150:	208000cc 	andi	r2,r4,3
 8002154:	10002026 	beq	r2,zero,80021d8 <strlen+0x88>
 8002158:	20800007 	ldb	r2,0(r4)
 800215c:	10002026 	beq	r2,zero,80021e0 <strlen+0x90>
 8002160:	2005883a 	mov	r2,r4
 8002164:	00000206 	br	8002170 <strlen+0x20>
 8002168:	10c00007 	ldb	r3,0(r2)
 800216c:	18001826 	beq	r3,zero,80021d0 <strlen+0x80>
 8002170:	10800044 	addi	r2,r2,1
 8002174:	10c000cc 	andi	r3,r2,3
 8002178:	183ffb1e 	bne	r3,zero,8002168 <__alt_data_end+0xfc002168>
 800217c:	10c00017 	ldw	r3,0(r2)
 8002180:	01ffbff4 	movhi	r7,65279
 8002184:	39ffbfc4 	addi	r7,r7,-257
 8002188:	00ca303a 	nor	r5,zero,r3
 800218c:	01a02074 	movhi	r6,32897
 8002190:	19c7883a 	add	r3,r3,r7
 8002194:	31a02004 	addi	r6,r6,-32640
 8002198:	1946703a 	and	r3,r3,r5
 800219c:	1986703a 	and	r3,r3,r6
 80021a0:	1800091e 	bne	r3,zero,80021c8 <strlen+0x78>
 80021a4:	10800104 	addi	r2,r2,4
 80021a8:	10c00017 	ldw	r3,0(r2)
 80021ac:	19cb883a 	add	r5,r3,r7
 80021b0:	00c6303a 	nor	r3,zero,r3
 80021b4:	28c6703a 	and	r3,r5,r3
 80021b8:	1986703a 	and	r3,r3,r6
 80021bc:	183ff926 	beq	r3,zero,80021a4 <__alt_data_end+0xfc0021a4>
 80021c0:	00000106 	br	80021c8 <strlen+0x78>
 80021c4:	10800044 	addi	r2,r2,1
 80021c8:	10c00007 	ldb	r3,0(r2)
 80021cc:	183ffd1e 	bne	r3,zero,80021c4 <__alt_data_end+0xfc0021c4>
 80021d0:	1105c83a 	sub	r2,r2,r4
 80021d4:	f800283a 	ret
 80021d8:	2005883a 	mov	r2,r4
 80021dc:	003fe706 	br	800217c <__alt_data_end+0xfc00217c>
 80021e0:	0005883a 	mov	r2,zero
 80021e4:	f800283a 	ret

080021e8 <___vfprintf_internal_r>:
 80021e8:	defeb604 	addi	sp,sp,-1320
 80021ec:	dfc14915 	stw	ra,1316(sp)
 80021f0:	ddc14715 	stw	r23,1308(sp)
 80021f4:	dd814615 	stw	r22,1304(sp)
 80021f8:	202f883a 	mov	r23,r4
 80021fc:	282d883a 	mov	r22,r5
 8002200:	d9812a15 	stw	r6,1192(sp)
 8002204:	d9c12d15 	stw	r7,1204(sp)
 8002208:	df014815 	stw	fp,1312(sp)
 800220c:	dd414515 	stw	r21,1300(sp)
 8002210:	dd014415 	stw	r20,1296(sp)
 8002214:	dcc14315 	stw	r19,1292(sp)
 8002218:	dc814215 	stw	r18,1288(sp)
 800221c:	dc414115 	stw	r17,1284(sp)
 8002220:	dc014015 	stw	r16,1280(sp)
 8002224:	8006e680 	call	8006e68 <_localeconv_r>
 8002228:	10800017 	ldw	r2,0(r2)
 800222c:	1009883a 	mov	r4,r2
 8002230:	d8813515 	stw	r2,1236(sp)
 8002234:	80021500 	call	8002150 <strlen>
 8002238:	d8813815 	stw	r2,1248(sp)
 800223c:	b8000226 	beq	r23,zero,8002248 <___vfprintf_internal_r+0x60>
 8002240:	b8800e17 	ldw	r2,56(r23)
 8002244:	10010526 	beq	r2,zero,800265c <___vfprintf_internal_r+0x474>
 8002248:	b0c0030b 	ldhu	r3,12(r22)
 800224c:	1908000c 	andi	r4,r3,8192
 8002250:	1805883a 	mov	r2,r3
 8002254:	2000071e 	bne	r4,zero,8002274 <___vfprintf_internal_r+0x8c>
 8002258:	b1001917 	ldw	r4,100(r22)
 800225c:	18880014 	ori	r2,r3,8192
 8002260:	00f7ffc4 	movi	r3,-8193
 8002264:	20c8703a 	and	r4,r4,r3
 8002268:	b080030d 	sth	r2,12(r22)
 800226c:	1007883a 	mov	r3,r2
 8002270:	b1001915 	stw	r4,100(r22)
 8002274:	1100020c 	andi	r4,r2,8
 8002278:	2000a826 	beq	r4,zero,800251c <___vfprintf_internal_r+0x334>
 800227c:	b1000417 	ldw	r4,16(r22)
 8002280:	2000a626 	beq	r4,zero,800251c <___vfprintf_internal_r+0x334>
 8002284:	1080068c 	andi	r2,r2,26
 8002288:	01000284 	movi	r4,10
 800228c:	1100ac26 	beq	r2,r4,8002540 <___vfprintf_internal_r+0x358>
 8002290:	d8c10e04 	addi	r3,sp,1080
 8002294:	d9010dc4 	addi	r4,sp,1079
 8002298:	d9400404 	addi	r5,sp,16
 800229c:	05020074 	movhi	r20,2049
 80022a0:	1905c83a 	sub	r2,r3,r4
 80022a4:	a500d084 	addi	r20,r20,834
 80022a8:	d8c12815 	stw	r3,1184(sp)
 80022ac:	d9012915 	stw	r4,1188(sp)
 80022b0:	d9411e15 	stw	r5,1144(sp)
 80022b4:	d8012015 	stw	zero,1152(sp)
 80022b8:	d8011f15 	stw	zero,1148(sp)
 80022bc:	d8013315 	stw	zero,1228(sp)
 80022c0:	d8013715 	stw	zero,1244(sp)
 80022c4:	d8013915 	stw	zero,1252(sp)
 80022c8:	d8013b15 	stw	zero,1260(sp)
 80022cc:	d8013a15 	stw	zero,1256(sp)
 80022d0:	d8012f15 	stw	zero,1212(sp)
 80022d4:	2811883a 	mov	r8,r5
 80022d8:	d8813c15 	stw	r2,1264(sp)
 80022dc:	d8c12a17 	ldw	r3,1192(sp)
 80022e0:	18800007 	ldb	r2,0(r3)
 80022e4:	10021326 	beq	r2,zero,8002b34 <___vfprintf_internal_r+0x94c>
 80022e8:	00c00944 	movi	r3,37
 80022ec:	dc012a17 	ldw	r16,1192(sp)
 80022f0:	10c0021e 	bne	r2,r3,80022fc <___vfprintf_internal_r+0x114>
 80022f4:	00001606 	br	8002350 <___vfprintf_internal_r+0x168>
 80022f8:	10c08526 	beq	r2,r3,8002510 <___vfprintf_internal_r+0x328>
 80022fc:	84000044 	addi	r16,r16,1
 8002300:	80800007 	ldb	r2,0(r16)
 8002304:	103ffc1e 	bne	r2,zero,80022f8 <__alt_data_end+0xfc0022f8>
 8002308:	d9012a17 	ldw	r4,1192(sp)
 800230c:	8123c83a 	sub	r17,r16,r4
 8002310:	88000f26 	beq	r17,zero,8002350 <___vfprintf_internal_r+0x168>
 8002314:	d8812a17 	ldw	r2,1192(sp)
 8002318:	d8c12017 	ldw	r3,1152(sp)
 800231c:	44400115 	stw	r17,4(r8)
 8002320:	40800015 	stw	r2,0(r8)
 8002324:	d8811f17 	ldw	r2,1148(sp)
 8002328:	1c47883a 	add	r3,r3,r17
 800232c:	d8c12015 	stw	r3,1152(sp)
 8002330:	10800044 	addi	r2,r2,1
 8002334:	d8811f15 	stw	r2,1148(sp)
 8002338:	00c001c4 	movi	r3,7
 800233c:	1880b516 	blt	r3,r2,8002614 <___vfprintf_internal_r+0x42c>
 8002340:	42000204 	addi	r8,r8,8
 8002344:	d8c12f17 	ldw	r3,1212(sp)
 8002348:	1c47883a 	add	r3,r3,r17
 800234c:	d8c12f15 	stw	r3,1212(sp)
 8002350:	80800007 	ldb	r2,0(r16)
 8002354:	1000b626 	beq	r2,zero,8002630 <___vfprintf_internal_r+0x448>
 8002358:	80800044 	addi	r2,r16,1
 800235c:	84000047 	ldb	r16,1(r16)
 8002360:	0027883a 	mov	r19,zero
 8002364:	0039883a 	mov	fp,zero
 8002368:	dcc12b05 	stb	r19,1196(sp)
 800236c:	d8012785 	stb	zero,1182(sp)
 8002370:	027fffc4 	movi	r9,-1
 8002374:	d8012e15 	stw	zero,1208(sp)
 8002378:	04401604 	movi	r17,88
 800237c:	04800244 	movi	r18,9
 8002380:	da012a15 	stw	r8,1192(sp)
 8002384:	e027883a 	mov	r19,fp
 8002388:	17000044 	addi	fp,r2,1
 800238c:	80bff804 	addi	r2,r16,-32
 8002390:	88831236 	bltu	r17,r2,8002fdc <___vfprintf_internal_r+0xdf4>
 8002394:	100490ba 	slli	r2,r2,2
 8002398:	01020034 	movhi	r4,2048
 800239c:	2108eb04 	addi	r4,r4,9132
 80023a0:	1105883a 	add	r2,r2,r4
 80023a4:	10800017 	ldw	r2,0(r2)
 80023a8:	1000683a 	jmp	r2
 80023ac:	08002ef8 	rdprs	zero,at,187
 80023b0:	08002fdc 	xori	zero,at,191
 80023b4:	08002fdc 	xori	zero,at,191
 80023b8:	08002f14 	ori	zero,at,188
 80023bc:	08002fdc 	xori	zero,at,191
 80023c0:	08002fdc 	xori	zero,at,191
 80023c4:	08002fdc 	xori	zero,at,191
 80023c8:	08002fdc 	xori	zero,at,191
 80023cc:	08002fdc 	xori	zero,at,191
 80023d0:	08002fdc 	xori	zero,at,191
 80023d4:	08002f24 	muli	zero,at,188
 80023d8:	08002f4c 	andi	zero,at,189
 80023dc:	08002fdc 	xori	zero,at,191
 80023e0:	08002668 	cmpgeui	zero,at,153
 80023e4:	08002678 	rdprs	zero,at,153
 80023e8:	08002fdc 	xori	zero,at,191
 80023ec:	080026c8 	cmpgei	zero,at,155
 80023f0:	080026d8 	cmpnei	zero,at,155
 80023f4:	080026d8 	cmpnei	zero,at,155
 80023f8:	080026d8 	cmpnei	zero,at,155
 80023fc:	080026d8 	cmpnei	zero,at,155
 8002400:	080026d8 	cmpnei	zero,at,155
 8002404:	080026d8 	cmpnei	zero,at,155
 8002408:	080026d8 	cmpnei	zero,at,155
 800240c:	080026d8 	cmpnei	zero,at,155
 8002410:	080026d8 	cmpnei	zero,at,155
 8002414:	08002fdc 	xori	zero,at,191
 8002418:	08002fdc 	xori	zero,at,191
 800241c:	08002fdc 	xori	zero,at,191
 8002420:	08002fdc 	xori	zero,at,191
 8002424:	08002fdc 	xori	zero,at,191
 8002428:	08002fdc 	xori	zero,at,191
 800242c:	08002fdc 	xori	zero,at,191
 8002430:	08002fdc 	xori	zero,at,191
 8002434:	08002fdc 	xori	zero,at,191
 8002438:	08002fdc 	xori	zero,at,191
 800243c:	0800271c 	xori	zero,at,156
 8002440:	08002b3c 	xorhi	zero,at,172
 8002444:	08002fdc 	xori	zero,at,191
 8002448:	08002b3c 	xorhi	zero,at,172
 800244c:	08002fdc 	xori	zero,at,191
 8002450:	08002fdc 	xori	zero,at,191
 8002454:	08002fdc 	xori	zero,at,191
 8002458:	08002fdc 	xori	zero,at,191
 800245c:	08002be4 	muli	zero,at,175
 8002460:	08002fdc 	xori	zero,at,191
 8002464:	08002fdc 	xori	zero,at,191
 8002468:	08002bf4 	orhi	zero,at,175
 800246c:	08002fdc 	xori	zero,at,191
 8002470:	08002fdc 	xori	zero,at,191
 8002474:	08002fdc 	xori	zero,at,191
 8002478:	08002fdc 	xori	zero,at,191
 800247c:	08002fdc 	xori	zero,at,191
 8002480:	08002c38 	rdprs	zero,at,176
 8002484:	08002fdc 	xori	zero,at,191
 8002488:	08002fdc 	xori	zero,at,191
 800248c:	08002c70 	cmpltui	zero,at,177
 8002490:	08002fdc 	xori	zero,at,191
 8002494:	08002fdc 	xori	zero,at,191
 8002498:	08002fdc 	xori	zero,at,191
 800249c:	08002fdc 	xori	zero,at,191
 80024a0:	08002fdc 	xori	zero,at,191
 80024a4:	08002fdc 	xori	zero,at,191
 80024a8:	08002fdc 	xori	zero,at,191
 80024ac:	08002fdc 	xori	zero,at,191
 80024b0:	08002fdc 	xori	zero,at,191
 80024b4:	08002fdc 	xori	zero,at,191
 80024b8:	08002eac 	andhi	zero,at,186
 80024bc:	08002e58 	cmpnei	zero,at,185
 80024c0:	08002b3c 	xorhi	zero,at,172
 80024c4:	08002b3c 	xorhi	zero,at,172
 80024c8:	08002b3c 	xorhi	zero,at,172
 80024cc:	08002e9c 	xori	zero,at,186
 80024d0:	08002e58 	cmpnei	zero,at,185
 80024d4:	08002fdc 	xori	zero,at,191
 80024d8:	08002fdc 	xori	zero,at,191
 80024dc:	08002d74 	orhi	zero,at,181
 80024e0:	08002fdc 	xori	zero,at,191
 80024e4:	08002d8c 	andi	zero,at,182
 80024e8:	08002dcc 	andi	zero,at,183
 80024ec:	08002e0c 	andi	zero,at,184
 80024f0:	08002cd8 	cmpnei	zero,at,179
 80024f4:	08002fdc 	xori	zero,at,191
 80024f8:	08002f60 	cmpeqi	zero,at,189
 80024fc:	08002fdc 	xori	zero,at,191
 8002500:	08002ce8 	cmpgeui	zero,at,179
 8002504:	08002fdc 	xori	zero,at,191
 8002508:	08002fdc 	xori	zero,at,191
 800250c:	08002d28 	cmpgeui	zero,at,180
 8002510:	d9412a17 	ldw	r5,1192(sp)
 8002514:	8163c83a 	sub	r17,r16,r5
 8002518:	003f7d06 	br	8002310 <__alt_data_end+0xfc002310>
 800251c:	b809883a 	mov	r4,r23
 8002520:	b00b883a 	mov	r5,r22
 8002524:	80043080 	call	8004308 <__swsetup_r>
 8002528:	10002d1e 	bne	r2,zero,80025e0 <___vfprintf_internal_r+0x3f8>
 800252c:	b0c0030b 	ldhu	r3,12(r22)
 8002530:	01000284 	movi	r4,10
 8002534:	1805883a 	mov	r2,r3
 8002538:	1080068c 	andi	r2,r2,26
 800253c:	113f541e 	bne	r2,r4,8002290 <__alt_data_end+0xfc002290>
 8002540:	b080038b 	ldhu	r2,14(r22)
 8002544:	113fffcc 	andi	r4,r2,65535
 8002548:	2120001c 	xori	r4,r4,32768
 800254c:	21200004 	addi	r4,r4,-32768
 8002550:	203f4f16 	blt	r4,zero,8002290 <__alt_data_end+0xfc002290>
 8002554:	b2c01917 	ldw	r11,100(r22)
 8002558:	b2800717 	ldw	r10,28(r22)
 800255c:	b2400917 	ldw	r9,36(r22)
 8002560:	d9812a17 	ldw	r6,1192(sp)
 8002564:	d9c12d17 	ldw	r7,1204(sp)
 8002568:	02010004 	movi	r8,1024
 800256c:	18ffff4c 	andi	r3,r3,65533
 8002570:	d881078d 	sth	r2,1054(sp)
 8002574:	b809883a 	mov	r4,r23
 8002578:	d8800404 	addi	r2,sp,16
 800257c:	d9410404 	addi	r5,sp,1040
 8002580:	d8c1070d 	sth	r3,1052(sp)
 8002584:	dac11d15 	stw	r11,1140(sp)
 8002588:	da810b15 	stw	r10,1068(sp)
 800258c:	da410d15 	stw	r9,1076(sp)
 8002590:	d8810415 	stw	r2,1040(sp)
 8002594:	d8810815 	stw	r2,1056(sp)
 8002598:	da010615 	stw	r8,1048(sp)
 800259c:	da010915 	stw	r8,1060(sp)
 80025a0:	d8010a15 	stw	zero,1064(sp)
 80025a4:	80021e80 	call	80021e8 <___vfprintf_internal_r>
 80025a8:	1021883a 	mov	r16,r2
 80025ac:	10000416 	blt	r2,zero,80025c0 <___vfprintf_internal_r+0x3d8>
 80025b0:	b809883a 	mov	r4,r23
 80025b4:	d9410404 	addi	r5,sp,1040
 80025b8:	8005d880 	call	8005d88 <_fflush_r>
 80025bc:	1007301e 	bne	r2,zero,8004280 <___vfprintf_internal_r+0x2098>
 80025c0:	d881070b 	ldhu	r2,1052(sp)
 80025c4:	1080100c 	andi	r2,r2,64
 80025c8:	10000326 	beq	r2,zero,80025d8 <___vfprintf_internal_r+0x3f0>
 80025cc:	b080030b 	ldhu	r2,12(r22)
 80025d0:	10801014 	ori	r2,r2,64
 80025d4:	b080030d 	sth	r2,12(r22)
 80025d8:	8005883a 	mov	r2,r16
 80025dc:	00000106 	br	80025e4 <___vfprintf_internal_r+0x3fc>
 80025e0:	00bfffc4 	movi	r2,-1
 80025e4:	dfc14917 	ldw	ra,1316(sp)
 80025e8:	df014817 	ldw	fp,1312(sp)
 80025ec:	ddc14717 	ldw	r23,1308(sp)
 80025f0:	dd814617 	ldw	r22,1304(sp)
 80025f4:	dd414517 	ldw	r21,1300(sp)
 80025f8:	dd014417 	ldw	r20,1296(sp)
 80025fc:	dcc14317 	ldw	r19,1292(sp)
 8002600:	dc814217 	ldw	r18,1288(sp)
 8002604:	dc414117 	ldw	r17,1284(sp)
 8002608:	dc014017 	ldw	r16,1280(sp)
 800260c:	dec14a04 	addi	sp,sp,1320
 8002610:	f800283a 	ret
 8002614:	b809883a 	mov	r4,r23
 8002618:	b00b883a 	mov	r5,r22
 800261c:	d9811e04 	addi	r6,sp,1144
 8002620:	80096280 	call	8009628 <__sprint_r>
 8002624:	1000081e 	bne	r2,zero,8002648 <___vfprintf_internal_r+0x460>
 8002628:	da000404 	addi	r8,sp,16
 800262c:	003f4506 	br	8002344 <__alt_data_end+0xfc002344>
 8002630:	d8812017 	ldw	r2,1152(sp)
 8002634:	10000426 	beq	r2,zero,8002648 <___vfprintf_internal_r+0x460>
 8002638:	b809883a 	mov	r4,r23
 800263c:	b00b883a 	mov	r5,r22
 8002640:	d9811e04 	addi	r6,sp,1144
 8002644:	80096280 	call	8009628 <__sprint_r>
 8002648:	b080030b 	ldhu	r2,12(r22)
 800264c:	1080100c 	andi	r2,r2,64
 8002650:	103fe31e 	bne	r2,zero,80025e0 <__alt_data_end+0xfc0025e0>
 8002654:	d8812f17 	ldw	r2,1212(sp)
 8002658:	003fe206 	br	80025e4 <__alt_data_end+0xfc0025e4>
 800265c:	b809883a 	mov	r4,r23
 8002660:	80063440 	call	8006344 <__sinit>
 8002664:	003ef806 	br	8002248 <__alt_data_end+0xfc002248>
 8002668:	e005883a 	mov	r2,fp
 800266c:	9cc00114 	ori	r19,r19,4
 8002670:	e4000007 	ldb	r16,0(fp)
 8002674:	003f4406 	br	8002388 <__alt_data_end+0xfc002388>
 8002678:	e4000007 	ldb	r16,0(fp)
 800267c:	01000a84 	movi	r4,42
 8002680:	e0800044 	addi	r2,fp,1
 8002684:	8106f626 	beq	r16,r4,8004260 <___vfprintf_internal_r+0x2078>
 8002688:	857ff404 	addi	r21,r16,-48
 800268c:	1039883a 	mov	fp,r2
 8002690:	0013883a 	mov	r9,zero
 8002694:	957f3d36 	bltu	r18,r21,800238c <__alt_data_end+0xfc00238c>
 8002698:	0009883a 	mov	r4,zero
 800269c:	01400284 	movi	r5,10
 80026a0:	8001ff40 	call	8001ff4 <__mulsi3>
 80026a4:	e4000007 	ldb	r16,0(fp)
 80026a8:	a889883a 	add	r4,r21,r2
 80026ac:	e7000044 	addi	fp,fp,1
 80026b0:	857ff404 	addi	r21,r16,-48
 80026b4:	957ff92e 	bgeu	r18,r21,800269c <__alt_data_end+0xfc00269c>
 80026b8:	2013883a 	mov	r9,r4
 80026bc:	203f330e 	bge	r4,zero,800238c <__alt_data_end+0xfc00238c>
 80026c0:	027fffc4 	movi	r9,-1
 80026c4:	003f3106 	br	800238c <__alt_data_end+0xfc00238c>
 80026c8:	9cc02014 	ori	r19,r19,128
 80026cc:	e005883a 	mov	r2,fp
 80026d0:	e4000007 	ldb	r16,0(fp)
 80026d4:	003f2c06 	br	8002388 <__alt_data_end+0xfc002388>
 80026d8:	857ff404 	addi	r21,r16,-48
 80026dc:	d8012e15 	stw	zero,1208(sp)
 80026e0:	e021883a 	mov	r16,fp
 80026e4:	0009883a 	mov	r4,zero
 80026e8:	da412c15 	stw	r9,1200(sp)
 80026ec:	01400284 	movi	r5,10
 80026f0:	8001ff40 	call	8001ff4 <__mulsi3>
 80026f4:	81400007 	ldb	r5,0(r16)
 80026f8:	1549883a 	add	r4,r2,r21
 80026fc:	e7000044 	addi	fp,fp,1
 8002700:	2d7ff404 	addi	r21,r5,-48
 8002704:	e021883a 	mov	r16,fp
 8002708:	957ff82e 	bgeu	r18,r21,80026ec <__alt_data_end+0xfc0026ec>
 800270c:	2821883a 	mov	r16,r5
 8002710:	d9012e15 	stw	r4,1208(sp)
 8002714:	da412c17 	ldw	r9,1200(sp)
 8002718:	003f1c06 	br	800238c <__alt_data_end+0xfc00238c>
 800271c:	da012a17 	ldw	r8,1192(sp)
 8002720:	df012a15 	stw	fp,1192(sp)
 8002724:	9839883a 	mov	fp,r19
 8002728:	dcc12b03 	ldbu	r19,1196(sp)
 800272c:	e7000414 	ori	fp,fp,16
 8002730:	e080080c 	andi	r2,fp,32
 8002734:	dcc12785 	stb	r19,1182(sp)
 8002738:	d8c12d17 	ldw	r3,1204(sp)
 800273c:	1001ce26 	beq	r2,zero,8002e78 <___vfprintf_internal_r+0xc90>
 8002740:	d9012d17 	ldw	r4,1204(sp)
 8002744:	18800117 	ldw	r2,4(r3)
 8002748:	1c800017 	ldw	r18,0(r3)
 800274c:	21000204 	addi	r4,r4,8
 8002750:	d9012d15 	stw	r4,1204(sp)
 8002754:	102b883a 	mov	r21,r2
 8002758:	10044916 	blt	r2,zero,8003880 <___vfprintf_internal_r+0x1698>
 800275c:	dcc12783 	ldbu	r19,1182(sp)
 8002760:	da413215 	stw	r9,1224(sp)
 8002764:	00800044 	movi	r2,1
 8002768:	9546b03a 	or	r3,r18,r21
 800276c:	48000216 	blt	r9,zero,8002778 <___vfprintf_internal_r+0x590>
 8002770:	013fdfc4 	movi	r4,-129
 8002774:	e138703a 	and	fp,fp,r4
 8002778:	1802251e 	bne	r3,zero,8003010 <___vfprintf_internal_r+0xe28>
 800277c:	48031726 	beq	r9,zero,80033dc <___vfprintf_internal_r+0x11f4>
 8002780:	10803fcc 	andi	r2,r2,255
 8002784:	00c00044 	movi	r3,1
 8002788:	10c24526 	beq	r2,r3,80030a0 <___vfprintf_internal_r+0xeb8>
 800278c:	00c00084 	movi	r3,2
 8002790:	10c33426 	beq	r2,r3,8003464 <___vfprintf_internal_r+0x127c>
 8002794:	d8c10e04 	addi	r3,sp,1080
 8002798:	9008d0fa 	srli	r4,r18,3
 800279c:	a80a977a 	slli	r5,r21,29
 80027a0:	a82ad0fa 	srli	r21,r21,3
 80027a4:	948001cc 	andi	r18,r18,7
 80027a8:	90800c04 	addi	r2,r18,48
 80027ac:	18ffffc4 	addi	r3,r3,-1
 80027b0:	2924b03a 	or	r18,r5,r4
 80027b4:	18800005 	stb	r2,0(r3)
 80027b8:	9548b03a 	or	r4,r18,r21
 80027bc:	203ff61e 	bne	r4,zero,8002798 <__alt_data_end+0xfc002798>
 80027c0:	e100004c 	andi	r4,fp,1
 80027c4:	d8c13115 	stw	r3,1220(sp)
 80027c8:	20039a1e 	bne	r4,zero,8003634 <___vfprintf_internal_r+0x144c>
 80027cc:	d8812817 	ldw	r2,1184(sp)
 80027d0:	10e3c83a 	sub	r17,r2,r3
 80027d4:	8805883a 	mov	r2,r17
 80027d8:	8a40010e 	bge	r17,r9,80027e0 <___vfprintf_internal_r+0x5f8>
 80027dc:	4805883a 	mov	r2,r9
 80027e0:	d8812b15 	stw	r2,1196(sp)
 80027e4:	d8013415 	stw	zero,1232(sp)
 80027e8:	98803fcc 	andi	r2,r19,255
 80027ec:	1080201c 	xori	r2,r2,128
 80027f0:	10bfe004 	addi	r2,r2,-128
 80027f4:	10000326 	beq	r2,zero,8002804 <___vfprintf_internal_r+0x61c>
 80027f8:	d8c12b17 	ldw	r3,1196(sp)
 80027fc:	18c00044 	addi	r3,r3,1
 8002800:	d8c12b15 	stw	r3,1196(sp)
 8002804:	e0c0008c 	andi	r3,fp,2
 8002808:	d8c12c15 	stw	r3,1200(sp)
 800280c:	18000326 	beq	r3,zero,800281c <___vfprintf_internal_r+0x634>
 8002810:	d8c12b17 	ldw	r3,1196(sp)
 8002814:	18c00084 	addi	r3,r3,2
 8002818:	d8c12b15 	stw	r3,1196(sp)
 800281c:	e0c0210c 	andi	r3,fp,132
 8002820:	d8c13015 	stw	r3,1216(sp)
 8002824:	1801f81e 	bne	r3,zero,8003008 <___vfprintf_internal_r+0xe20>
 8002828:	d9012e17 	ldw	r4,1208(sp)
 800282c:	d8c12b17 	ldw	r3,1196(sp)
 8002830:	20ebc83a 	sub	r21,r4,r3
 8002834:	0541f40e 	bge	zero,r21,8003008 <___vfprintf_internal_r+0xe20>
 8002838:	02400404 	movi	r9,16
 800283c:	d8c12017 	ldw	r3,1152(sp)
 8002840:	d8811f17 	ldw	r2,1148(sp)
 8002844:	4d45750e 	bge	r9,r21,8003e1c <___vfprintf_internal_r+0x1c34>
 8002848:	01420074 	movhi	r5,2049
 800284c:	2940d484 	addi	r5,r5,850
 8002850:	d9413615 	stw	r5,1240(sp)
 8002854:	4827883a 	mov	r19,r9
 8002858:	048001c4 	movi	r18,7
 800285c:	00000306 	br	800286c <___vfprintf_internal_r+0x684>
 8002860:	ad7ffc04 	addi	r21,r21,-16
 8002864:	42000204 	addi	r8,r8,8
 8002868:	9d40130e 	bge	r19,r21,80028b8 <___vfprintf_internal_r+0x6d0>
 800286c:	01020074 	movhi	r4,2049
 8002870:	18c00404 	addi	r3,r3,16
 8002874:	10800044 	addi	r2,r2,1
 8002878:	2100d484 	addi	r4,r4,850
 800287c:	41000015 	stw	r4,0(r8)
 8002880:	44c00115 	stw	r19,4(r8)
 8002884:	d8c12015 	stw	r3,1152(sp)
 8002888:	d8811f15 	stw	r2,1148(sp)
 800288c:	90bff40e 	bge	r18,r2,8002860 <__alt_data_end+0xfc002860>
 8002890:	b809883a 	mov	r4,r23
 8002894:	b00b883a 	mov	r5,r22
 8002898:	d9811e04 	addi	r6,sp,1144
 800289c:	80096280 	call	8009628 <__sprint_r>
 80028a0:	103f691e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 80028a4:	ad7ffc04 	addi	r21,r21,-16
 80028a8:	d8c12017 	ldw	r3,1152(sp)
 80028ac:	d8811f17 	ldw	r2,1148(sp)
 80028b0:	da000404 	addi	r8,sp,16
 80028b4:	9d7fed16 	blt	r19,r21,800286c <__alt_data_end+0xfc00286c>
 80028b8:	d9413617 	ldw	r5,1240(sp)
 80028bc:	a8c7883a 	add	r3,r21,r3
 80028c0:	10800044 	addi	r2,r2,1
 80028c4:	41400015 	stw	r5,0(r8)
 80028c8:	45400115 	stw	r21,4(r8)
 80028cc:	d8c12015 	stw	r3,1152(sp)
 80028d0:	d8811f15 	stw	r2,1148(sp)
 80028d4:	010001c4 	movi	r4,7
 80028d8:	20832b16 	blt	r4,r2,8003588 <___vfprintf_internal_r+0x13a0>
 80028dc:	d8812787 	ldb	r2,1182(sp)
 80028e0:	42000204 	addi	r8,r8,8
 80028e4:	10000c26 	beq	r2,zero,8002918 <___vfprintf_internal_r+0x730>
 80028e8:	d8811f17 	ldw	r2,1148(sp)
 80028ec:	d9012784 	addi	r4,sp,1182
 80028f0:	18c00044 	addi	r3,r3,1
 80028f4:	10800044 	addi	r2,r2,1
 80028f8:	41000015 	stw	r4,0(r8)
 80028fc:	01000044 	movi	r4,1
 8002900:	41000115 	stw	r4,4(r8)
 8002904:	d8c12015 	stw	r3,1152(sp)
 8002908:	d8811f15 	stw	r2,1148(sp)
 800290c:	010001c4 	movi	r4,7
 8002910:	2082c416 	blt	r4,r2,8003424 <___vfprintf_internal_r+0x123c>
 8002914:	42000204 	addi	r8,r8,8
 8002918:	d8812c17 	ldw	r2,1200(sp)
 800291c:	10000c26 	beq	r2,zero,8002950 <___vfprintf_internal_r+0x768>
 8002920:	d8811f17 	ldw	r2,1148(sp)
 8002924:	d9012704 	addi	r4,sp,1180
 8002928:	18c00084 	addi	r3,r3,2
 800292c:	10800044 	addi	r2,r2,1
 8002930:	41000015 	stw	r4,0(r8)
 8002934:	01000084 	movi	r4,2
 8002938:	41000115 	stw	r4,4(r8)
 800293c:	d8c12015 	stw	r3,1152(sp)
 8002940:	d8811f15 	stw	r2,1148(sp)
 8002944:	010001c4 	movi	r4,7
 8002948:	2082be16 	blt	r4,r2,8003444 <___vfprintf_internal_r+0x125c>
 800294c:	42000204 	addi	r8,r8,8
 8002950:	d9013017 	ldw	r4,1216(sp)
 8002954:	00802004 	movi	r2,128
 8002958:	20822026 	beq	r4,r2,80031dc <___vfprintf_internal_r+0xff4>
 800295c:	d9413217 	ldw	r5,1224(sp)
 8002960:	2c67c83a 	sub	r19,r5,r17
 8002964:	04c0260e 	bge	zero,r19,8002a00 <___vfprintf_internal_r+0x818>
 8002968:	05400404 	movi	r21,16
 800296c:	d8811f17 	ldw	r2,1148(sp)
 8002970:	acc4720e 	bge	r21,r19,8003b3c <___vfprintf_internal_r+0x1954>
 8002974:	01420074 	movhi	r5,2049
 8002978:	2940d084 	addi	r5,r5,834
 800297c:	d9412c15 	stw	r5,1200(sp)
 8002980:	048001c4 	movi	r18,7
 8002984:	00000306 	br	8002994 <___vfprintf_internal_r+0x7ac>
 8002988:	9cfffc04 	addi	r19,r19,-16
 800298c:	42000204 	addi	r8,r8,8
 8002990:	acc0110e 	bge	r21,r19,80029d8 <___vfprintf_internal_r+0x7f0>
 8002994:	18c00404 	addi	r3,r3,16
 8002998:	10800044 	addi	r2,r2,1
 800299c:	45000015 	stw	r20,0(r8)
 80029a0:	45400115 	stw	r21,4(r8)
 80029a4:	d8c12015 	stw	r3,1152(sp)
 80029a8:	d8811f15 	stw	r2,1148(sp)
 80029ac:	90bff60e 	bge	r18,r2,8002988 <__alt_data_end+0xfc002988>
 80029b0:	b809883a 	mov	r4,r23
 80029b4:	b00b883a 	mov	r5,r22
 80029b8:	d9811e04 	addi	r6,sp,1144
 80029bc:	80096280 	call	8009628 <__sprint_r>
 80029c0:	103f211e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 80029c4:	9cfffc04 	addi	r19,r19,-16
 80029c8:	d8c12017 	ldw	r3,1152(sp)
 80029cc:	d8811f17 	ldw	r2,1148(sp)
 80029d0:	da000404 	addi	r8,sp,16
 80029d4:	acffef16 	blt	r21,r19,8002994 <__alt_data_end+0xfc002994>
 80029d8:	d9012c17 	ldw	r4,1200(sp)
 80029dc:	1cc7883a 	add	r3,r3,r19
 80029e0:	10800044 	addi	r2,r2,1
 80029e4:	41000015 	stw	r4,0(r8)
 80029e8:	44c00115 	stw	r19,4(r8)
 80029ec:	d8c12015 	stw	r3,1152(sp)
 80029f0:	d8811f15 	stw	r2,1148(sp)
 80029f4:	010001c4 	movi	r4,7
 80029f8:	20828216 	blt	r4,r2,8003404 <___vfprintf_internal_r+0x121c>
 80029fc:	42000204 	addi	r8,r8,8
 8002a00:	e080400c 	andi	r2,fp,256
 8002a04:	1001ac1e 	bne	r2,zero,80030b8 <___vfprintf_internal_r+0xed0>
 8002a08:	d8811f17 	ldw	r2,1148(sp)
 8002a0c:	d9413117 	ldw	r5,1220(sp)
 8002a10:	1c47883a 	add	r3,r3,r17
 8002a14:	10800044 	addi	r2,r2,1
 8002a18:	41400015 	stw	r5,0(r8)
 8002a1c:	44400115 	stw	r17,4(r8)
 8002a20:	d8c12015 	stw	r3,1152(sp)
 8002a24:	d8811f15 	stw	r2,1148(sp)
 8002a28:	010001c4 	movi	r4,7
 8002a2c:	20825d16 	blt	r4,r2,80033a4 <___vfprintf_internal_r+0x11bc>
 8002a30:	42000204 	addi	r8,r8,8
 8002a34:	e080010c 	andi	r2,fp,4
 8002a38:	10003126 	beq	r2,zero,8002b00 <___vfprintf_internal_r+0x918>
 8002a3c:	d8812e17 	ldw	r2,1208(sp)
 8002a40:	d9012b17 	ldw	r4,1196(sp)
 8002a44:	1121c83a 	sub	r16,r2,r4
 8002a48:	04002d0e 	bge	zero,r16,8002b00 <___vfprintf_internal_r+0x918>
 8002a4c:	04400404 	movi	r17,16
 8002a50:	d8811f17 	ldw	r2,1148(sp)
 8002a54:	8c05340e 	bge	r17,r16,8003f28 <___vfprintf_internal_r+0x1d40>
 8002a58:	01020074 	movhi	r4,2049
 8002a5c:	2100d484 	addi	r4,r4,850
 8002a60:	d9013615 	stw	r4,1240(sp)
 8002a64:	048001c4 	movi	r18,7
 8002a68:	00000306 	br	8002a78 <___vfprintf_internal_r+0x890>
 8002a6c:	843ffc04 	addi	r16,r16,-16
 8002a70:	42000204 	addi	r8,r8,8
 8002a74:	8c00130e 	bge	r17,r16,8002ac4 <___vfprintf_internal_r+0x8dc>
 8002a78:	01420074 	movhi	r5,2049
 8002a7c:	18c00404 	addi	r3,r3,16
 8002a80:	10800044 	addi	r2,r2,1
 8002a84:	2940d484 	addi	r5,r5,850
 8002a88:	41400015 	stw	r5,0(r8)
 8002a8c:	44400115 	stw	r17,4(r8)
 8002a90:	d8c12015 	stw	r3,1152(sp)
 8002a94:	d8811f15 	stw	r2,1148(sp)
 8002a98:	90bff40e 	bge	r18,r2,8002a6c <__alt_data_end+0xfc002a6c>
 8002a9c:	b809883a 	mov	r4,r23
 8002aa0:	b00b883a 	mov	r5,r22
 8002aa4:	d9811e04 	addi	r6,sp,1144
 8002aa8:	80096280 	call	8009628 <__sprint_r>
 8002aac:	103ee61e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8002ab0:	843ffc04 	addi	r16,r16,-16
 8002ab4:	d8c12017 	ldw	r3,1152(sp)
 8002ab8:	d8811f17 	ldw	r2,1148(sp)
 8002abc:	da000404 	addi	r8,sp,16
 8002ac0:	8c3fed16 	blt	r17,r16,8002a78 <__alt_data_end+0xfc002a78>
 8002ac4:	d9013617 	ldw	r4,1240(sp)
 8002ac8:	1c07883a 	add	r3,r3,r16
 8002acc:	10800044 	addi	r2,r2,1
 8002ad0:	41000015 	stw	r4,0(r8)
 8002ad4:	44000115 	stw	r16,4(r8)
 8002ad8:	d8c12015 	stw	r3,1152(sp)
 8002adc:	d8811f15 	stw	r2,1148(sp)
 8002ae0:	010001c4 	movi	r4,7
 8002ae4:	2080060e 	bge	r4,r2,8002b00 <___vfprintf_internal_r+0x918>
 8002ae8:	b809883a 	mov	r4,r23
 8002aec:	b00b883a 	mov	r5,r22
 8002af0:	d9811e04 	addi	r6,sp,1144
 8002af4:	80096280 	call	8009628 <__sprint_r>
 8002af8:	103ed31e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8002afc:	d8c12017 	ldw	r3,1152(sp)
 8002b00:	df012b17 	ldw	fp,1196(sp)
 8002b04:	d9412e17 	ldw	r5,1208(sp)
 8002b08:	e140010e 	bge	fp,r5,8002b10 <___vfprintf_internal_r+0x928>
 8002b0c:	2839883a 	mov	fp,r5
 8002b10:	d8812f17 	ldw	r2,1212(sp)
 8002b14:	1705883a 	add	r2,r2,fp
 8002b18:	d8812f15 	stw	r2,1212(sp)
 8002b1c:	1802291e 	bne	r3,zero,80033c4 <___vfprintf_internal_r+0x11dc>
 8002b20:	d8c12a17 	ldw	r3,1192(sp)
 8002b24:	d8011f15 	stw	zero,1148(sp)
 8002b28:	da000404 	addi	r8,sp,16
 8002b2c:	18800007 	ldb	r2,0(r3)
 8002b30:	103ded1e 	bne	r2,zero,80022e8 <__alt_data_end+0xfc0022e8>
 8002b34:	dc012a17 	ldw	r16,1192(sp)
 8002b38:	003e0506 	br	8002350 <__alt_data_end+0xfc002350>
 8002b3c:	d9012d17 	ldw	r4,1204(sp)
 8002b40:	d9412d17 	ldw	r5,1204(sp)
 8002b44:	da012a17 	ldw	r8,1192(sp)
 8002b48:	21000017 	ldw	r4,0(r4)
 8002b4c:	29400117 	ldw	r5,4(r5)
 8002b50:	df012a15 	stw	fp,1192(sp)
 8002b54:	9839883a 	mov	fp,r19
 8002b58:	dcc12b03 	ldbu	r19,1196(sp)
 8002b5c:	d9013715 	stw	r4,1244(sp)
 8002b60:	d9413915 	stw	r5,1252(sp)
 8002b64:	da013f15 	stw	r8,1276(sp)
 8002b68:	da413e15 	stw	r9,1272(sp)
 8002b6c:	dcc12785 	stb	r19,1182(sp)
 8002b70:	80092840 	call	8009284 <__fpclassifyd>
 8002b74:	d8c12d17 	ldw	r3,1204(sp)
 8002b78:	04400044 	movi	r17,1
 8002b7c:	da013f17 	ldw	r8,1276(sp)
 8002b80:	1c800204 	addi	r18,r3,8
 8002b84:	da413e17 	ldw	r9,1272(sp)
 8002b88:	d9013717 	ldw	r4,1244(sp)
 8002b8c:	d9413917 	ldw	r5,1252(sp)
 8002b90:	1443451e 	bne	r2,r17,80038a8 <___vfprintf_internal_r+0x16c0>
 8002b94:	000d883a 	mov	r6,zero
 8002b98:	000f883a 	mov	r7,zero
 8002b9c:	800ca300 	call	800ca30 <__ledf2>
 8002ba0:	da013f17 	ldw	r8,1276(sp)
 8002ba4:	1004fe16 	blt	r2,zero,8003fa0 <___vfprintf_internal_r+0x1db8>
 8002ba8:	dcc12783 	ldbu	r19,1182(sp)
 8002bac:	008011c4 	movi	r2,71
 8002bb0:	14045d0e 	bge	r2,r16,8003d28 <___vfprintf_internal_r+0x1b40>
 8002bb4:	01420074 	movhi	r5,2049
 8002bb8:	2940c104 	addi	r5,r5,772
 8002bbc:	d9413115 	stw	r5,1220(sp)
 8002bc0:	00c000c4 	movi	r3,3
 8002bc4:	00bfdfc4 	movi	r2,-129
 8002bc8:	d8c12b15 	stw	r3,1196(sp)
 8002bcc:	e0b8703a 	and	fp,fp,r2
 8002bd0:	dc812d15 	stw	r18,1204(sp)
 8002bd4:	1823883a 	mov	r17,r3
 8002bd8:	d8013215 	stw	zero,1224(sp)
 8002bdc:	d8013415 	stw	zero,1232(sp)
 8002be0:	003f0106 	br	80027e8 <__alt_data_end+0xfc0027e8>
 8002be4:	9cc00214 	ori	r19,r19,8
 8002be8:	e005883a 	mov	r2,fp
 8002bec:	e4000007 	ldb	r16,0(fp)
 8002bf0:	003de506 	br	8002388 <__alt_data_end+0xfc002388>
 8002bf4:	da012a17 	ldw	r8,1192(sp)
 8002bf8:	df012a15 	stw	fp,1192(sp)
 8002bfc:	9f000414 	ori	fp,r19,16
 8002c00:	e0c0080c 	andi	r3,fp,32
 8002c04:	d8812d17 	ldw	r2,1204(sp)
 8002c08:	18007626 	beq	r3,zero,8002de4 <___vfprintf_internal_r+0xbfc>
 8002c0c:	d9412d17 	ldw	r5,1204(sp)
 8002c10:	14800017 	ldw	r18,0(r2)
 8002c14:	15400117 	ldw	r21,4(r2)
 8002c18:	29400204 	addi	r5,r5,8
 8002c1c:	d9412d15 	stw	r5,1204(sp)
 8002c20:	0005883a 	mov	r2,zero
 8002c24:	9546b03a 	or	r3,r18,r21
 8002c28:	d8012785 	stb	zero,1182(sp)
 8002c2c:	da413215 	stw	r9,1224(sp)
 8002c30:	0027883a 	mov	r19,zero
 8002c34:	003ecd06 	br	800276c <__alt_data_end+0xfc00276c>
 8002c38:	da012a17 	ldw	r8,1192(sp)
 8002c3c:	df012a15 	stw	fp,1192(sp)
 8002c40:	9f000414 	ori	fp,r19,16
 8002c44:	e0c0080c 	andi	r3,fp,32
 8002c48:	d8812d17 	ldw	r2,1204(sp)
 8002c4c:	18002c26 	beq	r3,zero,8002d00 <___vfprintf_internal_r+0xb18>
 8002c50:	d9012d17 	ldw	r4,1204(sp)
 8002c54:	14800017 	ldw	r18,0(r2)
 8002c58:	15400117 	ldw	r21,4(r2)
 8002c5c:	21000204 	addi	r4,r4,8
 8002c60:	d9012d15 	stw	r4,1204(sp)
 8002c64:	00800044 	movi	r2,1
 8002c68:	9546b03a 	or	r3,r18,r21
 8002c6c:	003fee06 	br	8002c28 <__alt_data_end+0xfc002c28>
 8002c70:	da012a17 	ldw	r8,1192(sp)
 8002c74:	df012a15 	stw	fp,1192(sp)
 8002c78:	9839883a 	mov	fp,r19
 8002c7c:	dcc12b03 	ldbu	r19,1196(sp)
 8002c80:	01420074 	movhi	r5,2049
 8002c84:	2940c404 	addi	r5,r5,784
 8002c88:	dcc12785 	stb	r19,1182(sp)
 8002c8c:	d9413b15 	stw	r5,1260(sp)
 8002c90:	e0c0080c 	andi	r3,fp,32
 8002c94:	d8812d17 	ldw	r2,1204(sp)
 8002c98:	18002e26 	beq	r3,zero,8002d54 <___vfprintf_internal_r+0xb6c>
 8002c9c:	d9412d17 	ldw	r5,1204(sp)
 8002ca0:	14800017 	ldw	r18,0(r2)
 8002ca4:	15400117 	ldw	r21,4(r2)
 8002ca8:	29400204 	addi	r5,r5,8
 8002cac:	d9412d15 	stw	r5,1204(sp)
 8002cb0:	e080004c 	andi	r2,fp,1
 8002cb4:	10025c26 	beq	r2,zero,8003628 <___vfprintf_internal_r+0x1440>
 8002cb8:	9546b03a 	or	r3,r18,r21
 8002cbc:	18038f26 	beq	r3,zero,8003afc <___vfprintf_internal_r+0x1914>
 8002cc0:	00800c04 	movi	r2,48
 8002cc4:	d8812705 	stb	r2,1180(sp)
 8002cc8:	dc012745 	stb	r16,1181(sp)
 8002ccc:	e7000094 	ori	fp,fp,2
 8002cd0:	00800084 	movi	r2,2
 8002cd4:	003fd406 	br	8002c28 <__alt_data_end+0xfc002c28>
 8002cd8:	9cc00814 	ori	r19,r19,32
 8002cdc:	e005883a 	mov	r2,fp
 8002ce0:	e4000007 	ldb	r16,0(fp)
 8002ce4:	003da806 	br	8002388 <__alt_data_end+0xfc002388>
 8002ce8:	da012a17 	ldw	r8,1192(sp)
 8002cec:	df012a15 	stw	fp,1192(sp)
 8002cf0:	9839883a 	mov	fp,r19
 8002cf4:	e0c0080c 	andi	r3,fp,32
 8002cf8:	d8812d17 	ldw	r2,1204(sp)
 8002cfc:	183fd41e 	bne	r3,zero,8002c50 <__alt_data_end+0xfc002c50>
 8002d00:	e0c0040c 	andi	r3,fp,16
 8002d04:	18035f26 	beq	r3,zero,8003a84 <___vfprintf_internal_r+0x189c>
 8002d08:	d9412d17 	ldw	r5,1204(sp)
 8002d0c:	14800017 	ldw	r18,0(r2)
 8002d10:	002b883a 	mov	r21,zero
 8002d14:	29400104 	addi	r5,r5,4
 8002d18:	d9412d15 	stw	r5,1204(sp)
 8002d1c:	00800044 	movi	r2,1
 8002d20:	9007883a 	mov	r3,r18
 8002d24:	003fc006 	br	8002c28 <__alt_data_end+0xfc002c28>
 8002d28:	da012a17 	ldw	r8,1192(sp)
 8002d2c:	df012a15 	stw	fp,1192(sp)
 8002d30:	9839883a 	mov	fp,r19
 8002d34:	dcc12b03 	ldbu	r19,1196(sp)
 8002d38:	01020074 	movhi	r4,2049
 8002d3c:	2100c904 	addi	r4,r4,804
 8002d40:	d9013b15 	stw	r4,1260(sp)
 8002d44:	dcc12785 	stb	r19,1182(sp)
 8002d48:	e0c0080c 	andi	r3,fp,32
 8002d4c:	d8812d17 	ldw	r2,1204(sp)
 8002d50:	183fd21e 	bne	r3,zero,8002c9c <__alt_data_end+0xfc002c9c>
 8002d54:	e0c0040c 	andi	r3,fp,16
 8002d58:	18035426 	beq	r3,zero,8003aac <___vfprintf_internal_r+0x18c4>
 8002d5c:	d8c12d17 	ldw	r3,1204(sp)
 8002d60:	14800017 	ldw	r18,0(r2)
 8002d64:	002b883a 	mov	r21,zero
 8002d68:	18c00104 	addi	r3,r3,4
 8002d6c:	d8c12d15 	stw	r3,1204(sp)
 8002d70:	003fcf06 	br	8002cb0 <__alt_data_end+0xfc002cb0>
 8002d74:	e4000007 	ldb	r16,0(fp)
 8002d78:	00801b04 	movi	r2,108
 8002d7c:	8083f726 	beq	r16,r2,8003d5c <___vfprintf_internal_r+0x1b74>
 8002d80:	9cc00414 	ori	r19,r19,16
 8002d84:	e005883a 	mov	r2,fp
 8002d88:	003d7f06 	br	8002388 <__alt_data_end+0xfc002388>
 8002d8c:	da012a17 	ldw	r8,1192(sp)
 8002d90:	df012a15 	stw	fp,1192(sp)
 8002d94:	9839883a 	mov	fp,r19
 8002d98:	dcc12b03 	ldbu	r19,1196(sp)
 8002d9c:	e080080c 	andi	r2,fp,32
 8002da0:	dcc12785 	stb	r19,1182(sp)
 8002da4:	10032226 	beq	r2,zero,8003a30 <___vfprintf_internal_r+0x1848>
 8002da8:	d9412d17 	ldw	r5,1204(sp)
 8002dac:	d9012f17 	ldw	r4,1212(sp)
 8002db0:	28800017 	ldw	r2,0(r5)
 8002db4:	2007d7fa 	srai	r3,r4,31
 8002db8:	29400104 	addi	r5,r5,4
 8002dbc:	d9412d15 	stw	r5,1204(sp)
 8002dc0:	11000015 	stw	r4,0(r2)
 8002dc4:	10c00115 	stw	r3,4(r2)
 8002dc8:	003d4406 	br	80022dc <__alt_data_end+0xfc0022dc>
 8002dcc:	da012a17 	ldw	r8,1192(sp)
 8002dd0:	df012a15 	stw	fp,1192(sp)
 8002dd4:	9839883a 	mov	fp,r19
 8002dd8:	e0c0080c 	andi	r3,fp,32
 8002ddc:	d8812d17 	ldw	r2,1204(sp)
 8002de0:	183f8a1e 	bne	r3,zero,8002c0c <__alt_data_end+0xfc002c0c>
 8002de4:	e0c0040c 	andi	r3,fp,16
 8002de8:	18031c26 	beq	r3,zero,8003a5c <___vfprintf_internal_r+0x1874>
 8002dec:	14800017 	ldw	r18,0(r2)
 8002df0:	d8812d17 	ldw	r2,1204(sp)
 8002df4:	002b883a 	mov	r21,zero
 8002df8:	9007883a 	mov	r3,r18
 8002dfc:	10800104 	addi	r2,r2,4
 8002e00:	d8812d15 	stw	r2,1204(sp)
 8002e04:	0005883a 	mov	r2,zero
 8002e08:	003f8706 	br	8002c28 <__alt_data_end+0xfc002c28>
 8002e0c:	d9412d17 	ldw	r5,1204(sp)
 8002e10:	00800c04 	movi	r2,48
 8002e14:	d8812705 	stb	r2,1180(sp)
 8002e18:	2c800017 	ldw	r18,0(r5)
 8002e1c:	00801e04 	movi	r2,120
 8002e20:	d8812745 	stb	r2,1181(sp)
 8002e24:	00820074 	movhi	r2,2049
 8002e28:	1080c904 	addi	r2,r2,804
 8002e2c:	29400104 	addi	r5,r5,4
 8002e30:	da012a17 	ldw	r8,1192(sp)
 8002e34:	d8813b15 	stw	r2,1260(sp)
 8002e38:	df012a15 	stw	fp,1192(sp)
 8002e3c:	002b883a 	mov	r21,zero
 8002e40:	9f000094 	ori	fp,r19,2
 8002e44:	d9412d15 	stw	r5,1204(sp)
 8002e48:	00800084 	movi	r2,2
 8002e4c:	04001e04 	movi	r16,120
 8002e50:	9007883a 	mov	r3,r18
 8002e54:	003f7406 	br	8002c28 <__alt_data_end+0xfc002c28>
 8002e58:	da012a17 	ldw	r8,1192(sp)
 8002e5c:	df012a15 	stw	fp,1192(sp)
 8002e60:	9839883a 	mov	fp,r19
 8002e64:	dcc12b03 	ldbu	r19,1196(sp)
 8002e68:	e080080c 	andi	r2,fp,32
 8002e6c:	d8c12d17 	ldw	r3,1204(sp)
 8002e70:	dcc12785 	stb	r19,1182(sp)
 8002e74:	103e321e 	bne	r2,zero,8002740 <__alt_data_end+0xfc002740>
 8002e78:	e080040c 	andi	r2,fp,16
 8002e7c:	10031326 	beq	r2,zero,8003acc <___vfprintf_internal_r+0x18e4>
 8002e80:	1c800017 	ldw	r18,0(r3)
 8002e84:	d9412d17 	ldw	r5,1204(sp)
 8002e88:	902bd7fa 	srai	r21,r18,31
 8002e8c:	29400104 	addi	r5,r5,4
 8002e90:	d9412d15 	stw	r5,1204(sp)
 8002e94:	a805883a 	mov	r2,r21
 8002e98:	003e2f06 	br	8002758 <__alt_data_end+0xfc002758>
 8002e9c:	9cc01014 	ori	r19,r19,64
 8002ea0:	e005883a 	mov	r2,fp
 8002ea4:	e4000007 	ldb	r16,0(fp)
 8002ea8:	003d3706 	br	8002388 <__alt_data_end+0xfc002388>
 8002eac:	d8c12d17 	ldw	r3,1204(sp)
 8002eb0:	d9012d17 	ldw	r4,1204(sp)
 8002eb4:	da012a17 	ldw	r8,1192(sp)
 8002eb8:	18800017 	ldw	r2,0(r3)
 8002ebc:	21000104 	addi	r4,r4,4
 8002ec0:	00c00044 	movi	r3,1
 8002ec4:	df012a15 	stw	fp,1192(sp)
 8002ec8:	d8c12b15 	stw	r3,1196(sp)
 8002ecc:	9839883a 	mov	fp,r19
 8002ed0:	d8012785 	stb	zero,1182(sp)
 8002ed4:	d8810405 	stb	r2,1040(sp)
 8002ed8:	d9012d15 	stw	r4,1204(sp)
 8002edc:	1823883a 	mov	r17,r3
 8002ee0:	d8c10404 	addi	r3,sp,1040
 8002ee4:	d8013215 	stw	zero,1224(sp)
 8002ee8:	d8013415 	stw	zero,1232(sp)
 8002eec:	d8c13115 	stw	r3,1220(sp)
 8002ef0:	0005883a 	mov	r2,zero
 8002ef4:	003e4306 	br	8002804 <__alt_data_end+0xfc002804>
 8002ef8:	d8812b07 	ldb	r2,1196(sp)
 8002efc:	1002fc1e 	bne	r2,zero,8003af0 <___vfprintf_internal_r+0x1908>
 8002f00:	00c00804 	movi	r3,32
 8002f04:	d8c12b05 	stb	r3,1196(sp)
 8002f08:	e005883a 	mov	r2,fp
 8002f0c:	e4000007 	ldb	r16,0(fp)
 8002f10:	003d1d06 	br	8002388 <__alt_data_end+0xfc002388>
 8002f14:	9cc00054 	ori	r19,r19,1
 8002f18:	e005883a 	mov	r2,fp
 8002f1c:	e4000007 	ldb	r16,0(fp)
 8002f20:	003d1906 	br	8002388 <__alt_data_end+0xfc002388>
 8002f24:	d9012d17 	ldw	r4,1204(sp)
 8002f28:	d9412d17 	ldw	r5,1204(sp)
 8002f2c:	21000017 	ldw	r4,0(r4)
 8002f30:	28c00104 	addi	r3,r5,4
 8002f34:	d9012e15 	stw	r4,1208(sp)
 8002f38:	20038c16 	blt	r4,zero,8003d6c <___vfprintf_internal_r+0x1b84>
 8002f3c:	d8c12d15 	stw	r3,1204(sp)
 8002f40:	e005883a 	mov	r2,fp
 8002f44:	e4000007 	ldb	r16,0(fp)
 8002f48:	003d0f06 	br	8002388 <__alt_data_end+0xfc002388>
 8002f4c:	00c00ac4 	movi	r3,43
 8002f50:	d8c12b05 	stb	r3,1196(sp)
 8002f54:	e005883a 	mov	r2,fp
 8002f58:	e4000007 	ldb	r16,0(fp)
 8002f5c:	003d0a06 	br	8002388 <__alt_data_end+0xfc002388>
 8002f60:	d8c12d17 	ldw	r3,1204(sp)
 8002f64:	d9012d17 	ldw	r4,1204(sp)
 8002f68:	da012a17 	ldw	r8,1192(sp)
 8002f6c:	18c00017 	ldw	r3,0(r3)
 8002f70:	df012a15 	stw	fp,1192(sp)
 8002f74:	d8012785 	stb	zero,1182(sp)
 8002f78:	d8c13115 	stw	r3,1220(sp)
 8002f7c:	9839883a 	mov	fp,r19
 8002f80:	24800104 	addi	r18,r4,4
 8002f84:	1803f726 	beq	r3,zero,8003f64 <___vfprintf_internal_r+0x1d7c>
 8002f88:	d9013117 	ldw	r4,1220(sp)
 8002f8c:	48038916 	blt	r9,zero,8003db4 <___vfprintf_internal_r+0x1bcc>
 8002f90:	480d883a 	mov	r6,r9
 8002f94:	000b883a 	mov	r5,zero
 8002f98:	da013f15 	stw	r8,1276(sp)
 8002f9c:	da413e15 	stw	r9,1272(sp)
 8002fa0:	80077fc0 	call	80077fc <memchr>
 8002fa4:	da013f17 	ldw	r8,1276(sp)
 8002fa8:	da413e17 	ldw	r9,1272(sp)
 8002fac:	10045926 	beq	r2,zero,8004114 <___vfprintf_internal_r+0x1f2c>
 8002fb0:	d8c13117 	ldw	r3,1220(sp)
 8002fb4:	10e3c83a 	sub	r17,r2,r3
 8002fb8:	4c433516 	blt	r9,r17,8003c90 <___vfprintf_internal_r+0x1aa8>
 8002fbc:	8805883a 	mov	r2,r17
 8002fc0:	88038116 	blt	r17,zero,8003dc8 <___vfprintf_internal_r+0x1be0>
 8002fc4:	dcc12783 	ldbu	r19,1182(sp)
 8002fc8:	d8812b15 	stw	r2,1196(sp)
 8002fcc:	dc812d15 	stw	r18,1204(sp)
 8002fd0:	d8013215 	stw	zero,1224(sp)
 8002fd4:	d8013415 	stw	zero,1232(sp)
 8002fd8:	003e0306 	br	80027e8 <__alt_data_end+0xfc0027e8>
 8002fdc:	da012a17 	ldw	r8,1192(sp)
 8002fe0:	df012a15 	stw	fp,1192(sp)
 8002fe4:	9839883a 	mov	fp,r19
 8002fe8:	dcc12b03 	ldbu	r19,1196(sp)
 8002fec:	dcc12785 	stb	r19,1182(sp)
 8002ff0:	803d8f26 	beq	r16,zero,8002630 <__alt_data_end+0xfc002630>
 8002ff4:	00c00044 	movi	r3,1
 8002ff8:	d8c12b15 	stw	r3,1196(sp)
 8002ffc:	dc010405 	stb	r16,1040(sp)
 8003000:	d8012785 	stb	zero,1182(sp)
 8003004:	003fb506 	br	8002edc <__alt_data_end+0xfc002edc>
 8003008:	d8c12017 	ldw	r3,1152(sp)
 800300c:	003e3506 	br	80028e4 <__alt_data_end+0xfc0028e4>
 8003010:	10803fcc 	andi	r2,r2,255
 8003014:	00c00044 	movi	r3,1
 8003018:	10fddc1e 	bne	r2,r3,800278c <__alt_data_end+0xfc00278c>
 800301c:	a800021e 	bne	r21,zero,8003028 <___vfprintf_internal_r+0xe40>
 8003020:	00800244 	movi	r2,9
 8003024:	14801e2e 	bgeu	r2,r18,80030a0 <___vfprintf_internal_r+0xeb8>
 8003028:	dc012b15 	stw	r16,1196(sp)
 800302c:	dc410e04 	addi	r17,sp,1080
 8003030:	9021883a 	mov	r16,r18
 8003034:	da012c15 	stw	r8,1200(sp)
 8003038:	a825883a 	mov	r18,r21
 800303c:	482b883a 	mov	r21,r9
 8003040:	8009883a 	mov	r4,r16
 8003044:	900b883a 	mov	r5,r18
 8003048:	01800284 	movi	r6,10
 800304c:	000f883a 	mov	r7,zero
 8003050:	800ba140 	call	800ba14 <__umoddi3>
 8003054:	10800c04 	addi	r2,r2,48
 8003058:	8c7fffc4 	addi	r17,r17,-1
 800305c:	8009883a 	mov	r4,r16
 8003060:	900b883a 	mov	r5,r18
 8003064:	01800284 	movi	r6,10
 8003068:	000f883a 	mov	r7,zero
 800306c:	88800005 	stb	r2,0(r17)
 8003070:	800b3d40 	call	800b3d4 <__udivdi3>
 8003074:	1021883a 	mov	r16,r2
 8003078:	10c4b03a 	or	r2,r2,r3
 800307c:	1825883a 	mov	r18,r3
 8003080:	103fef1e 	bne	r2,zero,8003040 <__alt_data_end+0xfc003040>
 8003084:	d9012817 	ldw	r4,1184(sp)
 8003088:	dc413115 	stw	r17,1220(sp)
 800308c:	dc012b17 	ldw	r16,1196(sp)
 8003090:	da012c17 	ldw	r8,1200(sp)
 8003094:	a813883a 	mov	r9,r21
 8003098:	2463c83a 	sub	r17,r4,r17
 800309c:	003dcd06 	br	80027d4 <__alt_data_end+0xfc0027d4>
 80030a0:	94800c04 	addi	r18,r18,48
 80030a4:	d8c10dc4 	addi	r3,sp,1079
 80030a8:	dc810dc5 	stb	r18,1079(sp)
 80030ac:	dc413c17 	ldw	r17,1264(sp)
 80030b0:	d8c13115 	stw	r3,1220(sp)
 80030b4:	003dc706 	br	80027d4 <__alt_data_end+0xfc0027d4>
 80030b8:	00801944 	movi	r2,101
 80030bc:	1400720e 	bge	r2,r16,8003288 <___vfprintf_internal_r+0x10a0>
 80030c0:	d9013717 	ldw	r4,1244(sp)
 80030c4:	d9413917 	ldw	r5,1252(sp)
 80030c8:	000d883a 	mov	r6,zero
 80030cc:	000f883a 	mov	r7,zero
 80030d0:	d8c13d15 	stw	r3,1268(sp)
 80030d4:	da013f15 	stw	r8,1276(sp)
 80030d8:	800c8cc0 	call	800c8cc <__eqdf2>
 80030dc:	d8c13d17 	ldw	r3,1268(sp)
 80030e0:	da013f17 	ldw	r8,1276(sp)
 80030e4:	1000f41e 	bne	r2,zero,80034b8 <___vfprintf_internal_r+0x12d0>
 80030e8:	d8811f17 	ldw	r2,1148(sp)
 80030ec:	01020074 	movhi	r4,2049
 80030f0:	2100d004 	addi	r4,r4,832
 80030f4:	18c00044 	addi	r3,r3,1
 80030f8:	10800044 	addi	r2,r2,1
 80030fc:	41000015 	stw	r4,0(r8)
 8003100:	01000044 	movi	r4,1
 8003104:	41000115 	stw	r4,4(r8)
 8003108:	d8c12015 	stw	r3,1152(sp)
 800310c:	d8811f15 	stw	r2,1148(sp)
 8003110:	010001c4 	movi	r4,7
 8003114:	20828d16 	blt	r4,r2,8003b4c <___vfprintf_internal_r+0x1964>
 8003118:	42000204 	addi	r8,r8,8
 800311c:	d8812617 	ldw	r2,1176(sp)
 8003120:	d9413317 	ldw	r5,1228(sp)
 8003124:	11400216 	blt	r2,r5,8003130 <___vfprintf_internal_r+0xf48>
 8003128:	e080004c 	andi	r2,fp,1
 800312c:	103e4126 	beq	r2,zero,8002a34 <__alt_data_end+0xfc002a34>
 8003130:	d8813817 	ldw	r2,1248(sp)
 8003134:	d9013517 	ldw	r4,1236(sp)
 8003138:	d9413817 	ldw	r5,1248(sp)
 800313c:	1887883a 	add	r3,r3,r2
 8003140:	d8811f17 	ldw	r2,1148(sp)
 8003144:	41000015 	stw	r4,0(r8)
 8003148:	41400115 	stw	r5,4(r8)
 800314c:	10800044 	addi	r2,r2,1
 8003150:	d8c12015 	stw	r3,1152(sp)
 8003154:	d8811f15 	stw	r2,1148(sp)
 8003158:	010001c4 	movi	r4,7
 800315c:	20830916 	blt	r4,r2,8003d84 <___vfprintf_internal_r+0x1b9c>
 8003160:	42000204 	addi	r8,r8,8
 8003164:	d8813317 	ldw	r2,1228(sp)
 8003168:	143fffc4 	addi	r16,r2,-1
 800316c:	043e310e 	bge	zero,r16,8002a34 <__alt_data_end+0xfc002a34>
 8003170:	04400404 	movi	r17,16
 8003174:	d8811f17 	ldw	r2,1148(sp)
 8003178:	8c007e0e 	bge	r17,r16,8003374 <___vfprintf_internal_r+0x118c>
 800317c:	01420074 	movhi	r5,2049
 8003180:	2940d084 	addi	r5,r5,834
 8003184:	d9412c15 	stw	r5,1200(sp)
 8003188:	04c001c4 	movi	r19,7
 800318c:	00000306 	br	800319c <___vfprintf_internal_r+0xfb4>
 8003190:	42000204 	addi	r8,r8,8
 8003194:	843ffc04 	addi	r16,r16,-16
 8003198:	8c00790e 	bge	r17,r16,8003380 <___vfprintf_internal_r+0x1198>
 800319c:	18c00404 	addi	r3,r3,16
 80031a0:	10800044 	addi	r2,r2,1
 80031a4:	45000015 	stw	r20,0(r8)
 80031a8:	44400115 	stw	r17,4(r8)
 80031ac:	d8c12015 	stw	r3,1152(sp)
 80031b0:	d8811f15 	stw	r2,1148(sp)
 80031b4:	98bff60e 	bge	r19,r2,8003190 <__alt_data_end+0xfc003190>
 80031b8:	b809883a 	mov	r4,r23
 80031bc:	b00b883a 	mov	r5,r22
 80031c0:	d9811e04 	addi	r6,sp,1144
 80031c4:	80096280 	call	8009628 <__sprint_r>
 80031c8:	103d1f1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 80031cc:	d8c12017 	ldw	r3,1152(sp)
 80031d0:	d8811f17 	ldw	r2,1148(sp)
 80031d4:	da000404 	addi	r8,sp,16
 80031d8:	003fee06 	br	8003194 <__alt_data_end+0xfc003194>
 80031dc:	d9412e17 	ldw	r5,1208(sp)
 80031e0:	d8812b17 	ldw	r2,1196(sp)
 80031e4:	28a7c83a 	sub	r19,r5,r2
 80031e8:	04fddc0e 	bge	zero,r19,800295c <__alt_data_end+0xfc00295c>
 80031ec:	05400404 	movi	r21,16
 80031f0:	d8811f17 	ldw	r2,1148(sp)
 80031f4:	acc3870e 	bge	r21,r19,8004014 <___vfprintf_internal_r+0x1e2c>
 80031f8:	01420074 	movhi	r5,2049
 80031fc:	2940d084 	addi	r5,r5,834
 8003200:	d9412c15 	stw	r5,1200(sp)
 8003204:	048001c4 	movi	r18,7
 8003208:	00000306 	br	8003218 <___vfprintf_internal_r+0x1030>
 800320c:	9cfffc04 	addi	r19,r19,-16
 8003210:	42000204 	addi	r8,r8,8
 8003214:	acc0110e 	bge	r21,r19,800325c <___vfprintf_internal_r+0x1074>
 8003218:	18c00404 	addi	r3,r3,16
 800321c:	10800044 	addi	r2,r2,1
 8003220:	45000015 	stw	r20,0(r8)
 8003224:	45400115 	stw	r21,4(r8)
 8003228:	d8c12015 	stw	r3,1152(sp)
 800322c:	d8811f15 	stw	r2,1148(sp)
 8003230:	90bff60e 	bge	r18,r2,800320c <__alt_data_end+0xfc00320c>
 8003234:	b809883a 	mov	r4,r23
 8003238:	b00b883a 	mov	r5,r22
 800323c:	d9811e04 	addi	r6,sp,1144
 8003240:	80096280 	call	8009628 <__sprint_r>
 8003244:	103d001e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003248:	9cfffc04 	addi	r19,r19,-16
 800324c:	d8c12017 	ldw	r3,1152(sp)
 8003250:	d8811f17 	ldw	r2,1148(sp)
 8003254:	da000404 	addi	r8,sp,16
 8003258:	acffef16 	blt	r21,r19,8003218 <__alt_data_end+0xfc003218>
 800325c:	d9012c17 	ldw	r4,1200(sp)
 8003260:	1cc7883a 	add	r3,r3,r19
 8003264:	10800044 	addi	r2,r2,1
 8003268:	41000015 	stw	r4,0(r8)
 800326c:	44c00115 	stw	r19,4(r8)
 8003270:	d8c12015 	stw	r3,1152(sp)
 8003274:	d8811f15 	stw	r2,1148(sp)
 8003278:	010001c4 	movi	r4,7
 800327c:	20817816 	blt	r4,r2,8003860 <___vfprintf_internal_r+0x1678>
 8003280:	42000204 	addi	r8,r8,8
 8003284:	003db506 	br	800295c <__alt_data_end+0xfc00295c>
 8003288:	d9413317 	ldw	r5,1228(sp)
 800328c:	00800044 	movi	r2,1
 8003290:	18c00044 	addi	r3,r3,1
 8003294:	11413e0e 	bge	r2,r5,8003790 <___vfprintf_internal_r+0x15a8>
 8003298:	dc011f17 	ldw	r16,1148(sp)
 800329c:	d8813117 	ldw	r2,1220(sp)
 80032a0:	d8c12015 	stw	r3,1152(sp)
 80032a4:	84000044 	addi	r16,r16,1
 80032a8:	40800015 	stw	r2,0(r8)
 80032ac:	00800044 	movi	r2,1
 80032b0:	40800115 	stw	r2,4(r8)
 80032b4:	dc011f15 	stw	r16,1148(sp)
 80032b8:	008001c4 	movi	r2,7
 80032bc:	14015616 	blt	r2,r16,8003818 <___vfprintf_internal_r+0x1630>
 80032c0:	42000204 	addi	r8,r8,8
 80032c4:	d9013817 	ldw	r4,1248(sp)
 80032c8:	d9413517 	ldw	r5,1236(sp)
 80032cc:	84000044 	addi	r16,r16,1
 80032d0:	1907883a 	add	r3,r3,r4
 80032d4:	41400015 	stw	r5,0(r8)
 80032d8:	41000115 	stw	r4,4(r8)
 80032dc:	d8c12015 	stw	r3,1152(sp)
 80032e0:	dc011f15 	stw	r16,1148(sp)
 80032e4:	008001c4 	movi	r2,7
 80032e8:	14015416 	blt	r2,r16,800383c <___vfprintf_internal_r+0x1654>
 80032ec:	44400204 	addi	r17,r8,8
 80032f0:	d9013717 	ldw	r4,1244(sp)
 80032f4:	d9413917 	ldw	r5,1252(sp)
 80032f8:	000d883a 	mov	r6,zero
 80032fc:	000f883a 	mov	r7,zero
 8003300:	d8c13d15 	stw	r3,1268(sp)
 8003304:	800c8cc0 	call	800c8cc <__eqdf2>
 8003308:	d8c13d17 	ldw	r3,1268(sp)
 800330c:	1000a726 	beq	r2,zero,80035ac <___vfprintf_internal_r+0x13c4>
 8003310:	d9013317 	ldw	r4,1228(sp)
 8003314:	d9413117 	ldw	r5,1220(sp)
 8003318:	84000044 	addi	r16,r16,1
 800331c:	20bfffc4 	addi	r2,r4,-1
 8003320:	1887883a 	add	r3,r3,r2
 8003324:	29000044 	addi	r4,r5,1
 8003328:	88800115 	stw	r2,4(r17)
 800332c:	89000015 	stw	r4,0(r17)
 8003330:	d8c12015 	stw	r3,1152(sp)
 8003334:	dc011f15 	stw	r16,1148(sp)
 8003338:	008001c4 	movi	r2,7
 800333c:	14012d16 	blt	r2,r16,80037f4 <___vfprintf_internal_r+0x160c>
 8003340:	8c400204 	addi	r17,r17,8
 8003344:	d9413a17 	ldw	r5,1256(sp)
 8003348:	dcc122c4 	addi	r19,sp,1163
 800334c:	84000044 	addi	r16,r16,1
 8003350:	28c7883a 	add	r3,r5,r3
 8003354:	8cc00015 	stw	r19,0(r17)
 8003358:	89400115 	stw	r5,4(r17)
 800335c:	d8c12015 	stw	r3,1152(sp)
 8003360:	dc011f15 	stw	r16,1148(sp)
 8003364:	008001c4 	movi	r2,7
 8003368:	14000e16 	blt	r2,r16,80033a4 <___vfprintf_internal_r+0x11bc>
 800336c:	8a000204 	addi	r8,r17,8
 8003370:	003db006 	br	8002a34 <__alt_data_end+0xfc002a34>
 8003374:	01020074 	movhi	r4,2049
 8003378:	2100d084 	addi	r4,r4,834
 800337c:	d9012c15 	stw	r4,1200(sp)
 8003380:	d9012c17 	ldw	r4,1200(sp)
 8003384:	1c07883a 	add	r3,r3,r16
 8003388:	44000115 	stw	r16,4(r8)
 800338c:	41000015 	stw	r4,0(r8)
 8003390:	10800044 	addi	r2,r2,1
 8003394:	d8c12015 	stw	r3,1152(sp)
 8003398:	d8811f15 	stw	r2,1148(sp)
 800339c:	010001c4 	movi	r4,7
 80033a0:	20bda30e 	bge	r4,r2,8002a30 <__alt_data_end+0xfc002a30>
 80033a4:	b809883a 	mov	r4,r23
 80033a8:	b00b883a 	mov	r5,r22
 80033ac:	d9811e04 	addi	r6,sp,1144
 80033b0:	80096280 	call	8009628 <__sprint_r>
 80033b4:	103ca41e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 80033b8:	d8c12017 	ldw	r3,1152(sp)
 80033bc:	da000404 	addi	r8,sp,16
 80033c0:	003d9c06 	br	8002a34 <__alt_data_end+0xfc002a34>
 80033c4:	b809883a 	mov	r4,r23
 80033c8:	b00b883a 	mov	r5,r22
 80033cc:	d9811e04 	addi	r6,sp,1144
 80033d0:	80096280 	call	8009628 <__sprint_r>
 80033d4:	103dd226 	beq	r2,zero,8002b20 <__alt_data_end+0xfc002b20>
 80033d8:	003c9b06 	br	8002648 <__alt_data_end+0xfc002648>
 80033dc:	10803fcc 	andi	r2,r2,255
 80033e0:	1000311e 	bne	r2,zero,80034a8 <___vfprintf_internal_r+0x12c0>
 80033e4:	e080004c 	andi	r2,fp,1
 80033e8:	10002f26 	beq	r2,zero,80034a8 <___vfprintf_internal_r+0x12c0>
 80033ec:	00800c04 	movi	r2,48
 80033f0:	d8c10dc4 	addi	r3,sp,1079
 80033f4:	d8810dc5 	stb	r2,1079(sp)
 80033f8:	dc413c17 	ldw	r17,1264(sp)
 80033fc:	d8c13115 	stw	r3,1220(sp)
 8003400:	003cf406 	br	80027d4 <__alt_data_end+0xfc0027d4>
 8003404:	b809883a 	mov	r4,r23
 8003408:	b00b883a 	mov	r5,r22
 800340c:	d9811e04 	addi	r6,sp,1144
 8003410:	80096280 	call	8009628 <__sprint_r>
 8003414:	103c8c1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003418:	d8c12017 	ldw	r3,1152(sp)
 800341c:	da000404 	addi	r8,sp,16
 8003420:	003d7706 	br	8002a00 <__alt_data_end+0xfc002a00>
 8003424:	b809883a 	mov	r4,r23
 8003428:	b00b883a 	mov	r5,r22
 800342c:	d9811e04 	addi	r6,sp,1144
 8003430:	80096280 	call	8009628 <__sprint_r>
 8003434:	103c841e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003438:	d8c12017 	ldw	r3,1152(sp)
 800343c:	da000404 	addi	r8,sp,16
 8003440:	003d3506 	br	8002918 <__alt_data_end+0xfc002918>
 8003444:	b809883a 	mov	r4,r23
 8003448:	b00b883a 	mov	r5,r22
 800344c:	d9811e04 	addi	r6,sp,1144
 8003450:	80096280 	call	8009628 <__sprint_r>
 8003454:	103c7c1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003458:	d8c12017 	ldw	r3,1152(sp)
 800345c:	da000404 	addi	r8,sp,16
 8003460:	003d3b06 	br	8002950 <__alt_data_end+0xfc002950>
 8003464:	d9413b17 	ldw	r5,1260(sp)
 8003468:	d8c10e04 	addi	r3,sp,1080
 800346c:	908003cc 	andi	r2,r18,15
 8003470:	a808973a 	slli	r4,r21,28
 8003474:	2885883a 	add	r2,r5,r2
 8003478:	9024d13a 	srli	r18,r18,4
 800347c:	10800003 	ldbu	r2,0(r2)
 8003480:	a82ad13a 	srli	r21,r21,4
 8003484:	18ffffc4 	addi	r3,r3,-1
 8003488:	24a4b03a 	or	r18,r4,r18
 800348c:	18800005 	stb	r2,0(r3)
 8003490:	9544b03a 	or	r2,r18,r21
 8003494:	103ff51e 	bne	r2,zero,800346c <__alt_data_end+0xfc00346c>
 8003498:	d9412817 	ldw	r5,1184(sp)
 800349c:	d8c13115 	stw	r3,1220(sp)
 80034a0:	28e3c83a 	sub	r17,r5,r3
 80034a4:	003ccb06 	br	80027d4 <__alt_data_end+0xfc0027d4>
 80034a8:	d8c10e04 	addi	r3,sp,1080
 80034ac:	0023883a 	mov	r17,zero
 80034b0:	d8c13115 	stw	r3,1220(sp)
 80034b4:	003cc706 	br	80027d4 <__alt_data_end+0xfc0027d4>
 80034b8:	dc012617 	ldw	r16,1176(sp)
 80034bc:	0401ab0e 	bge	zero,r16,8003b6c <___vfprintf_internal_r+0x1984>
 80034c0:	d8813317 	ldw	r2,1228(sp)
 80034c4:	d9413117 	ldw	r5,1220(sp)
 80034c8:	d9013417 	ldw	r4,1232(sp)
 80034cc:	1023883a 	mov	r17,r2
 80034d0:	28a1883a 	add	r16,r5,r2
 80034d4:	2080010e 	bge	r4,r2,80034dc <___vfprintf_internal_r+0x12f4>
 80034d8:	2023883a 	mov	r17,r4
 80034dc:	04400b0e 	bge	zero,r17,800350c <___vfprintf_internal_r+0x1324>
 80034e0:	d8811f17 	ldw	r2,1148(sp)
 80034e4:	d9413117 	ldw	r5,1220(sp)
 80034e8:	1c47883a 	add	r3,r3,r17
 80034ec:	10800044 	addi	r2,r2,1
 80034f0:	41400015 	stw	r5,0(r8)
 80034f4:	44400115 	stw	r17,4(r8)
 80034f8:	d8c12015 	stw	r3,1152(sp)
 80034fc:	d8811f15 	stw	r2,1148(sp)
 8003500:	010001c4 	movi	r4,7
 8003504:	20826716 	blt	r4,r2,8003ea4 <___vfprintf_internal_r+0x1cbc>
 8003508:	42000204 	addi	r8,r8,8
 800350c:	88026316 	blt	r17,zero,8003e9c <___vfprintf_internal_r+0x1cb4>
 8003510:	d8813417 	ldw	r2,1232(sp)
 8003514:	1463c83a 	sub	r17,r2,r17
 8003518:	0440590e 	bge	zero,r17,8003680 <___vfprintf_internal_r+0x1498>
 800351c:	04c00404 	movi	r19,16
 8003520:	d8811f17 	ldw	r2,1148(sp)
 8003524:	9c41770e 	bge	r19,r17,8003b04 <___vfprintf_internal_r+0x191c>
 8003528:	01420074 	movhi	r5,2049
 800352c:	2940d084 	addi	r5,r5,834
 8003530:	d9412c15 	stw	r5,1200(sp)
 8003534:	054001c4 	movi	r21,7
 8003538:	00000306 	br	8003548 <___vfprintf_internal_r+0x1360>
 800353c:	42000204 	addi	r8,r8,8
 8003540:	8c7ffc04 	addi	r17,r17,-16
 8003544:	9c41720e 	bge	r19,r17,8003b10 <___vfprintf_internal_r+0x1928>
 8003548:	18c00404 	addi	r3,r3,16
 800354c:	10800044 	addi	r2,r2,1
 8003550:	45000015 	stw	r20,0(r8)
 8003554:	44c00115 	stw	r19,4(r8)
 8003558:	d8c12015 	stw	r3,1152(sp)
 800355c:	d8811f15 	stw	r2,1148(sp)
 8003560:	a8bff60e 	bge	r21,r2,800353c <__alt_data_end+0xfc00353c>
 8003564:	b809883a 	mov	r4,r23
 8003568:	b00b883a 	mov	r5,r22
 800356c:	d9811e04 	addi	r6,sp,1144
 8003570:	80096280 	call	8009628 <__sprint_r>
 8003574:	103c341e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003578:	d8c12017 	ldw	r3,1152(sp)
 800357c:	d8811f17 	ldw	r2,1148(sp)
 8003580:	da000404 	addi	r8,sp,16
 8003584:	003fee06 	br	8003540 <__alt_data_end+0xfc003540>
 8003588:	b809883a 	mov	r4,r23
 800358c:	b00b883a 	mov	r5,r22
 8003590:	d9811e04 	addi	r6,sp,1144
 8003594:	80096280 	call	8009628 <__sprint_r>
 8003598:	103c2b1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 800359c:	d8c12017 	ldw	r3,1152(sp)
 80035a0:	d8812787 	ldb	r2,1182(sp)
 80035a4:	da000404 	addi	r8,sp,16
 80035a8:	003cce06 	br	80028e4 <__alt_data_end+0xfc0028e4>
 80035ac:	d8813317 	ldw	r2,1228(sp)
 80035b0:	14ffffc4 	addi	r19,r2,-1
 80035b4:	04ff630e 	bge	zero,r19,8003344 <__alt_data_end+0xfc003344>
 80035b8:	05400404 	movi	r21,16
 80035bc:	acc0810e 	bge	r21,r19,80037c4 <___vfprintf_internal_r+0x15dc>
 80035c0:	01420074 	movhi	r5,2049
 80035c4:	2940d084 	addi	r5,r5,834
 80035c8:	d9412c15 	stw	r5,1200(sp)
 80035cc:	01c001c4 	movi	r7,7
 80035d0:	00000306 	br	80035e0 <___vfprintf_internal_r+0x13f8>
 80035d4:	8c400204 	addi	r17,r17,8
 80035d8:	9cfffc04 	addi	r19,r19,-16
 80035dc:	acc07c0e 	bge	r21,r19,80037d0 <___vfprintf_internal_r+0x15e8>
 80035e0:	18c00404 	addi	r3,r3,16
 80035e4:	84000044 	addi	r16,r16,1
 80035e8:	8d000015 	stw	r20,0(r17)
 80035ec:	8d400115 	stw	r21,4(r17)
 80035f0:	d8c12015 	stw	r3,1152(sp)
 80035f4:	dc011f15 	stw	r16,1148(sp)
 80035f8:	3c3ff60e 	bge	r7,r16,80035d4 <__alt_data_end+0xfc0035d4>
 80035fc:	b809883a 	mov	r4,r23
 8003600:	b00b883a 	mov	r5,r22
 8003604:	d9811e04 	addi	r6,sp,1144
 8003608:	d9c13d15 	stw	r7,1268(sp)
 800360c:	80096280 	call	8009628 <__sprint_r>
 8003610:	d9c13d17 	ldw	r7,1268(sp)
 8003614:	103c0c1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003618:	d8c12017 	ldw	r3,1152(sp)
 800361c:	dc011f17 	ldw	r16,1148(sp)
 8003620:	dc400404 	addi	r17,sp,16
 8003624:	003fec06 	br	80035d8 <__alt_data_end+0xfc0035d8>
 8003628:	00800084 	movi	r2,2
 800362c:	9546b03a 	or	r3,r18,r21
 8003630:	003d7d06 	br	8002c28 <__alt_data_end+0xfc002c28>
 8003634:	10803fcc 	andi	r2,r2,255
 8003638:	1080201c 	xori	r2,r2,128
 800363c:	10bfe004 	addi	r2,r2,-128
 8003640:	01000c04 	movi	r4,48
 8003644:	1101d726 	beq	r2,r4,8003da4 <___vfprintf_internal_r+0x1bbc>
 8003648:	d9413117 	ldw	r5,1220(sp)
 800364c:	d8812817 	ldw	r2,1184(sp)
 8003650:	193fffc5 	stb	r4,-1(r3)
 8003654:	297fffc4 	addi	r5,r5,-1
 8003658:	d9413115 	stw	r5,1220(sp)
 800365c:	1163c83a 	sub	r17,r2,r5
 8003660:	003c5c06 	br	80027d4 <__alt_data_end+0xfc0027d4>
 8003664:	b809883a 	mov	r4,r23
 8003668:	b00b883a 	mov	r5,r22
 800366c:	d9811e04 	addi	r6,sp,1144
 8003670:	80096280 	call	8009628 <__sprint_r>
 8003674:	103bf41e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003678:	d8c12017 	ldw	r3,1152(sp)
 800367c:	da000404 	addi	r8,sp,16
 8003680:	d9413117 	ldw	r5,1220(sp)
 8003684:	d9013417 	ldw	r4,1232(sp)
 8003688:	d8812617 	ldw	r2,1176(sp)
 800368c:	2923883a 	add	r17,r5,r4
 8003690:	d9413317 	ldw	r5,1228(sp)
 8003694:	11400216 	blt	r2,r5,80036a0 <___vfprintf_internal_r+0x14b8>
 8003698:	e100004c 	andi	r4,fp,1
 800369c:	20000d26 	beq	r4,zero,80036d4 <___vfprintf_internal_r+0x14ec>
 80036a0:	d9013817 	ldw	r4,1248(sp)
 80036a4:	d9413517 	ldw	r5,1236(sp)
 80036a8:	1907883a 	add	r3,r3,r4
 80036ac:	d9011f17 	ldw	r4,1148(sp)
 80036b0:	41400015 	stw	r5,0(r8)
 80036b4:	d9413817 	ldw	r5,1248(sp)
 80036b8:	21000044 	addi	r4,r4,1
 80036bc:	d8c12015 	stw	r3,1152(sp)
 80036c0:	41400115 	stw	r5,4(r8)
 80036c4:	d9011f15 	stw	r4,1148(sp)
 80036c8:	014001c4 	movi	r5,7
 80036cc:	2901fd16 	blt	r5,r4,8003ec4 <___vfprintf_internal_r+0x1cdc>
 80036d0:	42000204 	addi	r8,r8,8
 80036d4:	d9013317 	ldw	r4,1228(sp)
 80036d8:	2085c83a 	sub	r2,r4,r2
 80036dc:	8449c83a 	sub	r4,r16,r17
 80036e0:	1021883a 	mov	r16,r2
 80036e4:	2080010e 	bge	r4,r2,80036ec <___vfprintf_internal_r+0x1504>
 80036e8:	2021883a 	mov	r16,r4
 80036ec:	04000a0e 	bge	zero,r16,8003718 <___vfprintf_internal_r+0x1530>
 80036f0:	d9011f17 	ldw	r4,1148(sp)
 80036f4:	1c07883a 	add	r3,r3,r16
 80036f8:	44400015 	stw	r17,0(r8)
 80036fc:	21000044 	addi	r4,r4,1
 8003700:	44000115 	stw	r16,4(r8)
 8003704:	d8c12015 	stw	r3,1152(sp)
 8003708:	d9011f15 	stw	r4,1148(sp)
 800370c:	014001c4 	movi	r5,7
 8003710:	29020916 	blt	r5,r4,8003f38 <___vfprintf_internal_r+0x1d50>
 8003714:	42000204 	addi	r8,r8,8
 8003718:	80020116 	blt	r16,zero,8003f20 <___vfprintf_internal_r+0x1d38>
 800371c:	1421c83a 	sub	r16,r2,r16
 8003720:	043cc40e 	bge	zero,r16,8002a34 <__alt_data_end+0xfc002a34>
 8003724:	04400404 	movi	r17,16
 8003728:	d8811f17 	ldw	r2,1148(sp)
 800372c:	8c3f110e 	bge	r17,r16,8003374 <__alt_data_end+0xfc003374>
 8003730:	01420074 	movhi	r5,2049
 8003734:	2940d084 	addi	r5,r5,834
 8003738:	d9412c15 	stw	r5,1200(sp)
 800373c:	04c001c4 	movi	r19,7
 8003740:	00000306 	br	8003750 <___vfprintf_internal_r+0x1568>
 8003744:	42000204 	addi	r8,r8,8
 8003748:	843ffc04 	addi	r16,r16,-16
 800374c:	8c3f0c0e 	bge	r17,r16,8003380 <__alt_data_end+0xfc003380>
 8003750:	18c00404 	addi	r3,r3,16
 8003754:	10800044 	addi	r2,r2,1
 8003758:	45000015 	stw	r20,0(r8)
 800375c:	44400115 	stw	r17,4(r8)
 8003760:	d8c12015 	stw	r3,1152(sp)
 8003764:	d8811f15 	stw	r2,1148(sp)
 8003768:	98bff60e 	bge	r19,r2,8003744 <__alt_data_end+0xfc003744>
 800376c:	b809883a 	mov	r4,r23
 8003770:	b00b883a 	mov	r5,r22
 8003774:	d9811e04 	addi	r6,sp,1144
 8003778:	80096280 	call	8009628 <__sprint_r>
 800377c:	103bb21e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003780:	d8c12017 	ldw	r3,1152(sp)
 8003784:	d8811f17 	ldw	r2,1148(sp)
 8003788:	da000404 	addi	r8,sp,16
 800378c:	003fee06 	br	8003748 <__alt_data_end+0xfc003748>
 8003790:	e088703a 	and	r4,fp,r2
 8003794:	203ec01e 	bne	r4,zero,8003298 <__alt_data_end+0xfc003298>
 8003798:	dc011f17 	ldw	r16,1148(sp)
 800379c:	d9013117 	ldw	r4,1220(sp)
 80037a0:	40800115 	stw	r2,4(r8)
 80037a4:	84000044 	addi	r16,r16,1
 80037a8:	41000015 	stw	r4,0(r8)
 80037ac:	d8c12015 	stw	r3,1152(sp)
 80037b0:	dc011f15 	stw	r16,1148(sp)
 80037b4:	008001c4 	movi	r2,7
 80037b8:	14000e16 	blt	r2,r16,80037f4 <___vfprintf_internal_r+0x160c>
 80037bc:	44400204 	addi	r17,r8,8
 80037c0:	003ee006 	br	8003344 <__alt_data_end+0xfc003344>
 80037c4:	01020074 	movhi	r4,2049
 80037c8:	2100d084 	addi	r4,r4,834
 80037cc:	d9012c15 	stw	r4,1200(sp)
 80037d0:	d8812c17 	ldw	r2,1200(sp)
 80037d4:	1cc7883a 	add	r3,r3,r19
 80037d8:	84000044 	addi	r16,r16,1
 80037dc:	88800015 	stw	r2,0(r17)
 80037e0:	8cc00115 	stw	r19,4(r17)
 80037e4:	d8c12015 	stw	r3,1152(sp)
 80037e8:	dc011f15 	stw	r16,1148(sp)
 80037ec:	008001c4 	movi	r2,7
 80037f0:	143ed30e 	bge	r2,r16,8003340 <__alt_data_end+0xfc003340>
 80037f4:	b809883a 	mov	r4,r23
 80037f8:	b00b883a 	mov	r5,r22
 80037fc:	d9811e04 	addi	r6,sp,1144
 8003800:	80096280 	call	8009628 <__sprint_r>
 8003804:	103b901e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003808:	d8c12017 	ldw	r3,1152(sp)
 800380c:	dc011f17 	ldw	r16,1148(sp)
 8003810:	dc400404 	addi	r17,sp,16
 8003814:	003ecb06 	br	8003344 <__alt_data_end+0xfc003344>
 8003818:	b809883a 	mov	r4,r23
 800381c:	b00b883a 	mov	r5,r22
 8003820:	d9811e04 	addi	r6,sp,1144
 8003824:	80096280 	call	8009628 <__sprint_r>
 8003828:	103b871e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 800382c:	d8c12017 	ldw	r3,1152(sp)
 8003830:	dc011f17 	ldw	r16,1148(sp)
 8003834:	da000404 	addi	r8,sp,16
 8003838:	003ea206 	br	80032c4 <__alt_data_end+0xfc0032c4>
 800383c:	b809883a 	mov	r4,r23
 8003840:	b00b883a 	mov	r5,r22
 8003844:	d9811e04 	addi	r6,sp,1144
 8003848:	80096280 	call	8009628 <__sprint_r>
 800384c:	103b7e1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003850:	d8c12017 	ldw	r3,1152(sp)
 8003854:	dc011f17 	ldw	r16,1148(sp)
 8003858:	dc400404 	addi	r17,sp,16
 800385c:	003ea406 	br	80032f0 <__alt_data_end+0xfc0032f0>
 8003860:	b809883a 	mov	r4,r23
 8003864:	b00b883a 	mov	r5,r22
 8003868:	d9811e04 	addi	r6,sp,1144
 800386c:	80096280 	call	8009628 <__sprint_r>
 8003870:	103b751e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003874:	d8c12017 	ldw	r3,1152(sp)
 8003878:	da000404 	addi	r8,sp,16
 800387c:	003c3706 	br	800295c <__alt_data_end+0xfc00295c>
 8003880:	04a5c83a 	sub	r18,zero,r18
 8003884:	9004c03a 	cmpne	r2,r18,zero
 8003888:	056bc83a 	sub	r21,zero,r21
 800388c:	a8abc83a 	sub	r21,r21,r2
 8003890:	04c00b44 	movi	r19,45
 8003894:	dcc12785 	stb	r19,1182(sp)
 8003898:	da413215 	stw	r9,1224(sp)
 800389c:	00800044 	movi	r2,1
 80038a0:	9546b03a 	or	r3,r18,r21
 80038a4:	003bb106 	br	800276c <__alt_data_end+0xfc00276c>
 80038a8:	da013f15 	stw	r8,1276(sp)
 80038ac:	da413e15 	stw	r9,1272(sp)
 80038b0:	80092840 	call	8009284 <__fpclassifyd>
 80038b4:	da013f17 	ldw	r8,1276(sp)
 80038b8:	da413e17 	ldw	r9,1272(sp)
 80038bc:	1000e526 	beq	r2,zero,8003c54 <___vfprintf_internal_r+0x1a6c>
 80038c0:	04fff7c4 	movi	r19,-33
 80038c4:	00bfffc4 	movi	r2,-1
 80038c8:	84e6703a 	and	r19,r16,r19
 80038cc:	48822926 	beq	r9,r2,8004174 <___vfprintf_internal_r+0x1f8c>
 80038d0:	008011c4 	movi	r2,71
 80038d4:	98821626 	beq	r19,r2,8004130 <___vfprintf_internal_r+0x1f48>
 80038d8:	d9013917 	ldw	r4,1252(sp)
 80038dc:	e0c04014 	ori	r3,fp,256
 80038e0:	d8c12d15 	stw	r3,1204(sp)
 80038e4:	20021f16 	blt	r4,zero,8004164 <___vfprintf_internal_r+0x1f7c>
 80038e8:	dc413917 	ldw	r17,1252(sp)
 80038ec:	d8012b05 	stb	zero,1196(sp)
 80038f0:	00801984 	movi	r2,102
 80038f4:	80814d26 	beq	r16,r2,8003e2c <___vfprintf_internal_r+0x1c44>
 80038f8:	00801184 	movi	r2,70
 80038fc:	80814b26 	beq	r16,r2,8003e2c <___vfprintf_internal_r+0x1c44>
 8003900:	00801144 	movi	r2,69
 8003904:	98821d26 	beq	r19,r2,800417c <___vfprintf_internal_r+0x1f94>
 8003908:	482b883a 	mov	r21,r9
 800390c:	d8812604 	addi	r2,sp,1176
 8003910:	d8800115 	stw	r2,4(sp)
 8003914:	d9413717 	ldw	r5,1244(sp)
 8003918:	d8812504 	addi	r2,sp,1172
 800391c:	d8800215 	stw	r2,8(sp)
 8003920:	d8812104 	addi	r2,sp,1156
 8003924:	dd400015 	stw	r21,0(sp)
 8003928:	d8800315 	stw	r2,12(sp)
 800392c:	b809883a 	mov	r4,r23
 8003930:	880d883a 	mov	r6,r17
 8003934:	01c00084 	movi	r7,2
 8003938:	da013f15 	stw	r8,1276(sp)
 800393c:	da413e15 	stw	r9,1272(sp)
 8003940:	80046600 	call	8004660 <_dtoa_r>
 8003944:	d8813115 	stw	r2,1220(sp)
 8003948:	008019c4 	movi	r2,103
 800394c:	da013f17 	ldw	r8,1276(sp)
 8003950:	da413e17 	ldw	r9,1272(sp)
 8003954:	80800226 	beq	r16,r2,8003960 <___vfprintf_internal_r+0x1778>
 8003958:	008011c4 	movi	r2,71
 800395c:	8081451e 	bne	r16,r2,8003e74 <___vfprintf_internal_r+0x1c8c>
 8003960:	e080004c 	andi	r2,fp,1
 8003964:	10021e26 	beq	r2,zero,80041e0 <___vfprintf_internal_r+0x1ff8>
 8003968:	d8c13117 	ldw	r3,1220(sp)
 800396c:	1d55883a 	add	r10,r3,r21
 8003970:	d9013717 	ldw	r4,1244(sp)
 8003974:	880b883a 	mov	r5,r17
 8003978:	000d883a 	mov	r6,zero
 800397c:	000f883a 	mov	r7,zero
 8003980:	da013f15 	stw	r8,1276(sp)
 8003984:	da413e15 	stw	r9,1272(sp)
 8003988:	da813d15 	stw	r10,1268(sp)
 800398c:	800c8cc0 	call	800c8cc <__eqdf2>
 8003990:	da013f17 	ldw	r8,1276(sp)
 8003994:	da413e17 	ldw	r9,1272(sp)
 8003998:	da813d17 	ldw	r10,1268(sp)
 800399c:	1001a126 	beq	r2,zero,8004024 <___vfprintf_internal_r+0x1e3c>
 80039a0:	d8812117 	ldw	r2,1156(sp)
 80039a4:	1280062e 	bgeu	r2,r10,80039c0 <___vfprintf_internal_r+0x17d8>
 80039a8:	01000c04 	movi	r4,48
 80039ac:	10c00044 	addi	r3,r2,1
 80039b0:	d8c12115 	stw	r3,1156(sp)
 80039b4:	11000005 	stb	r4,0(r2)
 80039b8:	d8812117 	ldw	r2,1156(sp)
 80039bc:	12bffb36 	bltu	r2,r10,80039ac <__alt_data_end+0xfc0039ac>
 80039c0:	d8c13117 	ldw	r3,1220(sp)
 80039c4:	10c5c83a 	sub	r2,r2,r3
 80039c8:	d8813315 	stw	r2,1228(sp)
 80039cc:	008011c4 	movi	r2,71
 80039d0:	98818926 	beq	r19,r2,8003ff8 <___vfprintf_internal_r+0x1e10>
 80039d4:	00801944 	movi	r2,101
 80039d8:	14023c0e 	bge	r2,r16,80042cc <___vfprintf_internal_r+0x20e4>
 80039dc:	d8c12617 	ldw	r3,1176(sp)
 80039e0:	00801984 	movi	r2,102
 80039e4:	d8c13415 	stw	r3,1232(sp)
 80039e8:	8081ef26 	beq	r16,r2,80041a8 <___vfprintf_internal_r+0x1fc0>
 80039ec:	d8c13417 	ldw	r3,1232(sp)
 80039f0:	d9013317 	ldw	r4,1228(sp)
 80039f4:	1901e316 	blt	r3,r4,8004184 <___vfprintf_internal_r+0x1f9c>
 80039f8:	e080004c 	andi	r2,fp,1
 80039fc:	1001f426 	beq	r2,zero,80041d0 <___vfprintf_internal_r+0x1fe8>
 8003a00:	d8c13417 	ldw	r3,1232(sp)
 8003a04:	1c400044 	addi	r17,r3,1
 8003a08:	8839883a 	mov	fp,r17
 8003a0c:	8801e416 	blt	r17,zero,80041a0 <___vfprintf_internal_r+0x1fb8>
 8003a10:	dd412b07 	ldb	r21,1196(sp)
 8003a14:	a801701e 	bne	r21,zero,8003fd8 <___vfprintf_internal_r+0x1df0>
 8003a18:	df012b15 	stw	fp,1196(sp)
 8003a1c:	dcc12783 	ldbu	r19,1182(sp)
 8003a20:	df012d17 	ldw	fp,1204(sp)
 8003a24:	d8013215 	stw	zero,1224(sp)
 8003a28:	dc812d15 	stw	r18,1204(sp)
 8003a2c:	003b6e06 	br	80027e8 <__alt_data_end+0xfc0027e8>
 8003a30:	e080040c 	andi	r2,fp,16
 8003a34:	1000b51e 	bne	r2,zero,8003d0c <___vfprintf_internal_r+0x1b24>
 8003a38:	e080100c 	andi	r2,fp,64
 8003a3c:	10015b26 	beq	r2,zero,8003fac <___vfprintf_internal_r+0x1dc4>
 8003a40:	d9012d17 	ldw	r4,1204(sp)
 8003a44:	d9412f17 	ldw	r5,1212(sp)
 8003a48:	20800017 	ldw	r2,0(r4)
 8003a4c:	21000104 	addi	r4,r4,4
 8003a50:	d9012d15 	stw	r4,1204(sp)
 8003a54:	1140000d 	sth	r5,0(r2)
 8003a58:	003a2006 	br	80022dc <__alt_data_end+0xfc0022dc>
 8003a5c:	e0c0100c 	andi	r3,fp,64
 8003a60:	1800a226 	beq	r3,zero,8003cec <___vfprintf_internal_r+0x1b04>
 8003a64:	d8c12d17 	ldw	r3,1204(sp)
 8003a68:	1480000b 	ldhu	r18,0(r2)
 8003a6c:	002b883a 	mov	r21,zero
 8003a70:	18c00104 	addi	r3,r3,4
 8003a74:	d8c12d15 	stw	r3,1204(sp)
 8003a78:	0005883a 	mov	r2,zero
 8003a7c:	9007883a 	mov	r3,r18
 8003a80:	003c6906 	br	8002c28 <__alt_data_end+0xfc002c28>
 8003a84:	e0c0100c 	andi	r3,fp,64
 8003a88:	18009026 	beq	r3,zero,8003ccc <___vfprintf_internal_r+0x1ae4>
 8003a8c:	1480000b 	ldhu	r18,0(r2)
 8003a90:	d8812d17 	ldw	r2,1204(sp)
 8003a94:	002b883a 	mov	r21,zero
 8003a98:	9007883a 	mov	r3,r18
 8003a9c:	10800104 	addi	r2,r2,4
 8003aa0:	d8812d15 	stw	r2,1204(sp)
 8003aa4:	00800044 	movi	r2,1
 8003aa8:	003c5f06 	br	8002c28 <__alt_data_end+0xfc002c28>
 8003aac:	e0c0100c 	andi	r3,fp,64
 8003ab0:	18008026 	beq	r3,zero,8003cb4 <___vfprintf_internal_r+0x1acc>
 8003ab4:	d9012d17 	ldw	r4,1204(sp)
 8003ab8:	1480000b 	ldhu	r18,0(r2)
 8003abc:	002b883a 	mov	r21,zero
 8003ac0:	21000104 	addi	r4,r4,4
 8003ac4:	d9012d15 	stw	r4,1204(sp)
 8003ac8:	003c7906 	br	8002cb0 <__alt_data_end+0xfc002cb0>
 8003acc:	e080100c 	andi	r2,fp,64
 8003ad0:	10007126 	beq	r2,zero,8003c98 <___vfprintf_internal_r+0x1ab0>
 8003ad4:	1c80000f 	ldh	r18,0(r3)
 8003ad8:	d8812d17 	ldw	r2,1204(sp)
 8003adc:	902bd7fa 	srai	r21,r18,31
 8003ae0:	10800104 	addi	r2,r2,4
 8003ae4:	d8812d15 	stw	r2,1204(sp)
 8003ae8:	a805883a 	mov	r2,r21
 8003aec:	003b1a06 	br	8002758 <__alt_data_end+0xfc002758>
 8003af0:	e4000007 	ldb	r16,0(fp)
 8003af4:	e005883a 	mov	r2,fp
 8003af8:	003a2306 	br	8002388 <__alt_data_end+0xfc002388>
 8003afc:	00800084 	movi	r2,2
 8003b00:	003c4906 	br	8002c28 <__alt_data_end+0xfc002c28>
 8003b04:	01020074 	movhi	r4,2049
 8003b08:	2100d084 	addi	r4,r4,834
 8003b0c:	d9012c15 	stw	r4,1200(sp)
 8003b10:	d9012c17 	ldw	r4,1200(sp)
 8003b14:	1c47883a 	add	r3,r3,r17
 8003b18:	10800044 	addi	r2,r2,1
 8003b1c:	41000015 	stw	r4,0(r8)
 8003b20:	44400115 	stw	r17,4(r8)
 8003b24:	d8c12015 	stw	r3,1152(sp)
 8003b28:	d8811f15 	stw	r2,1148(sp)
 8003b2c:	010001c4 	movi	r4,7
 8003b30:	20becc16 	blt	r4,r2,8003664 <__alt_data_end+0xfc003664>
 8003b34:	42000204 	addi	r8,r8,8
 8003b38:	003ed106 	br	8003680 <__alt_data_end+0xfc003680>
 8003b3c:	01020074 	movhi	r4,2049
 8003b40:	2100d084 	addi	r4,r4,834
 8003b44:	d9012c15 	stw	r4,1200(sp)
 8003b48:	003ba306 	br	80029d8 <__alt_data_end+0xfc0029d8>
 8003b4c:	b809883a 	mov	r4,r23
 8003b50:	b00b883a 	mov	r5,r22
 8003b54:	d9811e04 	addi	r6,sp,1144
 8003b58:	80096280 	call	8009628 <__sprint_r>
 8003b5c:	103aba1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003b60:	d8c12017 	ldw	r3,1152(sp)
 8003b64:	da000404 	addi	r8,sp,16
 8003b68:	003d6c06 	br	800311c <__alt_data_end+0xfc00311c>
 8003b6c:	d8811f17 	ldw	r2,1148(sp)
 8003b70:	01420074 	movhi	r5,2049
 8003b74:	01000044 	movi	r4,1
 8003b78:	18c00044 	addi	r3,r3,1
 8003b7c:	10800044 	addi	r2,r2,1
 8003b80:	2940d004 	addi	r5,r5,832
 8003b84:	41000115 	stw	r4,4(r8)
 8003b88:	41400015 	stw	r5,0(r8)
 8003b8c:	d8c12015 	stw	r3,1152(sp)
 8003b90:	d8811f15 	stw	r2,1148(sp)
 8003b94:	010001c4 	movi	r4,7
 8003b98:	20806716 	blt	r4,r2,8003d38 <___vfprintf_internal_r+0x1b50>
 8003b9c:	42000204 	addi	r8,r8,8
 8003ba0:	8000041e 	bne	r16,zero,8003bb4 <___vfprintf_internal_r+0x19cc>
 8003ba4:	d8813317 	ldw	r2,1228(sp)
 8003ba8:	1000021e 	bne	r2,zero,8003bb4 <___vfprintf_internal_r+0x19cc>
 8003bac:	e080004c 	andi	r2,fp,1
 8003bb0:	103ba026 	beq	r2,zero,8002a34 <__alt_data_end+0xfc002a34>
 8003bb4:	d9013817 	ldw	r4,1248(sp)
 8003bb8:	d8811f17 	ldw	r2,1148(sp)
 8003bbc:	d9413517 	ldw	r5,1236(sp)
 8003bc0:	1907883a 	add	r3,r3,r4
 8003bc4:	10800044 	addi	r2,r2,1
 8003bc8:	41000115 	stw	r4,4(r8)
 8003bcc:	41400015 	stw	r5,0(r8)
 8003bd0:	d8c12015 	stw	r3,1152(sp)
 8003bd4:	d8811f15 	stw	r2,1148(sp)
 8003bd8:	010001c4 	movi	r4,7
 8003bdc:	20815716 	blt	r4,r2,800413c <___vfprintf_internal_r+0x1f54>
 8003be0:	42000204 	addi	r8,r8,8
 8003be4:	0421c83a 	sub	r16,zero,r16
 8003be8:	0400810e 	bge	zero,r16,8003df0 <___vfprintf_internal_r+0x1c08>
 8003bec:	04400404 	movi	r17,16
 8003bf0:	8c00bd0e 	bge	r17,r16,8003ee8 <___vfprintf_internal_r+0x1d00>
 8003bf4:	01420074 	movhi	r5,2049
 8003bf8:	2940d084 	addi	r5,r5,834
 8003bfc:	d9412c15 	stw	r5,1200(sp)
 8003c00:	04c001c4 	movi	r19,7
 8003c04:	00000306 	br	8003c14 <___vfprintf_internal_r+0x1a2c>
 8003c08:	42000204 	addi	r8,r8,8
 8003c0c:	843ffc04 	addi	r16,r16,-16
 8003c10:	8c00b80e 	bge	r17,r16,8003ef4 <___vfprintf_internal_r+0x1d0c>
 8003c14:	18c00404 	addi	r3,r3,16
 8003c18:	10800044 	addi	r2,r2,1
 8003c1c:	45000015 	stw	r20,0(r8)
 8003c20:	44400115 	stw	r17,4(r8)
 8003c24:	d8c12015 	stw	r3,1152(sp)
 8003c28:	d8811f15 	stw	r2,1148(sp)
 8003c2c:	98bff60e 	bge	r19,r2,8003c08 <__alt_data_end+0xfc003c08>
 8003c30:	b809883a 	mov	r4,r23
 8003c34:	b00b883a 	mov	r5,r22
 8003c38:	d9811e04 	addi	r6,sp,1144
 8003c3c:	80096280 	call	8009628 <__sprint_r>
 8003c40:	103a811e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003c44:	d8c12017 	ldw	r3,1152(sp)
 8003c48:	d8811f17 	ldw	r2,1148(sp)
 8003c4c:	da000404 	addi	r8,sp,16
 8003c50:	003fee06 	br	8003c0c <__alt_data_end+0xfc003c0c>
 8003c54:	008011c4 	movi	r2,71
 8003c58:	1400db16 	blt	r2,r16,8003fc8 <___vfprintf_internal_r+0x1de0>
 8003c5c:	01020074 	movhi	r4,2049
 8003c60:	2100c204 	addi	r4,r4,776
 8003c64:	d9013115 	stw	r4,1220(sp)
 8003c68:	00c000c4 	movi	r3,3
 8003c6c:	00bfdfc4 	movi	r2,-129
 8003c70:	d8c12b15 	stw	r3,1196(sp)
 8003c74:	e0b8703a 	and	fp,fp,r2
 8003c78:	dcc12783 	ldbu	r19,1182(sp)
 8003c7c:	dc812d15 	stw	r18,1204(sp)
 8003c80:	1823883a 	mov	r17,r3
 8003c84:	d8013215 	stw	zero,1224(sp)
 8003c88:	d8013415 	stw	zero,1232(sp)
 8003c8c:	003ad606 	br	80027e8 <__alt_data_end+0xfc0027e8>
 8003c90:	4823883a 	mov	r17,r9
 8003c94:	003cc906 	br	8002fbc <__alt_data_end+0xfc002fbc>
 8003c98:	1c800017 	ldw	r18,0(r3)
 8003c9c:	d8c12d17 	ldw	r3,1204(sp)
 8003ca0:	902bd7fa 	srai	r21,r18,31
 8003ca4:	18c00104 	addi	r3,r3,4
 8003ca8:	d8c12d15 	stw	r3,1204(sp)
 8003cac:	a805883a 	mov	r2,r21
 8003cb0:	003aa906 	br	8002758 <__alt_data_end+0xfc002758>
 8003cb4:	d9412d17 	ldw	r5,1204(sp)
 8003cb8:	14800017 	ldw	r18,0(r2)
 8003cbc:	002b883a 	mov	r21,zero
 8003cc0:	29400104 	addi	r5,r5,4
 8003cc4:	d9412d15 	stw	r5,1204(sp)
 8003cc8:	003bf906 	br	8002cb0 <__alt_data_end+0xfc002cb0>
 8003ccc:	d8c12d17 	ldw	r3,1204(sp)
 8003cd0:	14800017 	ldw	r18,0(r2)
 8003cd4:	002b883a 	mov	r21,zero
 8003cd8:	18c00104 	addi	r3,r3,4
 8003cdc:	d8c12d15 	stw	r3,1204(sp)
 8003ce0:	00800044 	movi	r2,1
 8003ce4:	9007883a 	mov	r3,r18
 8003ce8:	003bcf06 	br	8002c28 <__alt_data_end+0xfc002c28>
 8003cec:	d9012d17 	ldw	r4,1204(sp)
 8003cf0:	14800017 	ldw	r18,0(r2)
 8003cf4:	002b883a 	mov	r21,zero
 8003cf8:	21000104 	addi	r4,r4,4
 8003cfc:	d9012d15 	stw	r4,1204(sp)
 8003d00:	0005883a 	mov	r2,zero
 8003d04:	9007883a 	mov	r3,r18
 8003d08:	003bc706 	br	8002c28 <__alt_data_end+0xfc002c28>
 8003d0c:	d9412d17 	ldw	r5,1204(sp)
 8003d10:	d8c12f17 	ldw	r3,1212(sp)
 8003d14:	28800017 	ldw	r2,0(r5)
 8003d18:	29400104 	addi	r5,r5,4
 8003d1c:	d9412d15 	stw	r5,1204(sp)
 8003d20:	10c00015 	stw	r3,0(r2)
 8003d24:	00396d06 	br	80022dc <__alt_data_end+0xfc0022dc>
 8003d28:	01020074 	movhi	r4,2049
 8003d2c:	2100c004 	addi	r4,r4,768
 8003d30:	d9013115 	stw	r4,1220(sp)
 8003d34:	003ba206 	br	8002bc0 <__alt_data_end+0xfc002bc0>
 8003d38:	b809883a 	mov	r4,r23
 8003d3c:	b00b883a 	mov	r5,r22
 8003d40:	d9811e04 	addi	r6,sp,1144
 8003d44:	80096280 	call	8009628 <__sprint_r>
 8003d48:	103a3f1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003d4c:	dc012617 	ldw	r16,1176(sp)
 8003d50:	d8c12017 	ldw	r3,1152(sp)
 8003d54:	da000404 	addi	r8,sp,16
 8003d58:	003f9106 	br	8003ba0 <__alt_data_end+0xfc003ba0>
 8003d5c:	e0800044 	addi	r2,fp,1
 8003d60:	9cc00814 	ori	r19,r19,32
 8003d64:	e4000047 	ldb	r16,1(fp)
 8003d68:	00398706 	br	8002388 <__alt_data_end+0xfc002388>
 8003d6c:	d8812e17 	ldw	r2,1208(sp)
 8003d70:	d8c12d15 	stw	r3,1204(sp)
 8003d74:	0085c83a 	sub	r2,zero,r2
 8003d78:	d8812e15 	stw	r2,1208(sp)
 8003d7c:	e005883a 	mov	r2,fp
 8003d80:	003a3a06 	br	800266c <__alt_data_end+0xfc00266c>
 8003d84:	b809883a 	mov	r4,r23
 8003d88:	b00b883a 	mov	r5,r22
 8003d8c:	d9811e04 	addi	r6,sp,1144
 8003d90:	80096280 	call	8009628 <__sprint_r>
 8003d94:	103a2c1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003d98:	d8c12017 	ldw	r3,1152(sp)
 8003d9c:	da000404 	addi	r8,sp,16
 8003da0:	003cf006 	br	8003164 <__alt_data_end+0xfc003164>
 8003da4:	d8c12817 	ldw	r3,1184(sp)
 8003da8:	d9013117 	ldw	r4,1220(sp)
 8003dac:	1923c83a 	sub	r17,r3,r4
 8003db0:	003a8806 	br	80027d4 <__alt_data_end+0xfc0027d4>
 8003db4:	da013f15 	stw	r8,1276(sp)
 8003db8:	80021500 	call	8002150 <strlen>
 8003dbc:	1023883a 	mov	r17,r2
 8003dc0:	da013f17 	ldw	r8,1276(sp)
 8003dc4:	883c7f0e 	bge	r17,zero,8002fc4 <__alt_data_end+0xfc002fc4>
 8003dc8:	0005883a 	mov	r2,zero
 8003dcc:	003c7d06 	br	8002fc4 <__alt_data_end+0xfc002fc4>
 8003dd0:	b809883a 	mov	r4,r23
 8003dd4:	b00b883a 	mov	r5,r22
 8003dd8:	d9811e04 	addi	r6,sp,1144
 8003ddc:	80096280 	call	8009628 <__sprint_r>
 8003de0:	103a191e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003de4:	d8c12017 	ldw	r3,1152(sp)
 8003de8:	d8811f17 	ldw	r2,1148(sp)
 8003dec:	da000404 	addi	r8,sp,16
 8003df0:	d9413317 	ldw	r5,1228(sp)
 8003df4:	d9013117 	ldw	r4,1220(sp)
 8003df8:	10800044 	addi	r2,r2,1
 8003dfc:	28c7883a 	add	r3,r5,r3
 8003e00:	41000015 	stw	r4,0(r8)
 8003e04:	41400115 	stw	r5,4(r8)
 8003e08:	d8c12015 	stw	r3,1152(sp)
 8003e0c:	d8811f15 	stw	r2,1148(sp)
 8003e10:	010001c4 	movi	r4,7
 8003e14:	20bb060e 	bge	r4,r2,8002a30 <__alt_data_end+0xfc002a30>
 8003e18:	003d6206 	br	80033a4 <__alt_data_end+0xfc0033a4>
 8003e1c:	01020074 	movhi	r4,2049
 8003e20:	2100d484 	addi	r4,r4,850
 8003e24:	d9013615 	stw	r4,1240(sp)
 8003e28:	003aa306 	br	80028b8 <__alt_data_end+0xfc0028b8>
 8003e2c:	d8812604 	addi	r2,sp,1176
 8003e30:	d8800115 	stw	r2,4(sp)
 8003e34:	d9413717 	ldw	r5,1244(sp)
 8003e38:	d8812504 	addi	r2,sp,1172
 8003e3c:	d8800215 	stw	r2,8(sp)
 8003e40:	d8812104 	addi	r2,sp,1156
 8003e44:	da400015 	stw	r9,0(sp)
 8003e48:	d8800315 	stw	r2,12(sp)
 8003e4c:	b809883a 	mov	r4,r23
 8003e50:	880d883a 	mov	r6,r17
 8003e54:	01c000c4 	movi	r7,3
 8003e58:	da013f15 	stw	r8,1276(sp)
 8003e5c:	da413e15 	stw	r9,1272(sp)
 8003e60:	80046600 	call	8004660 <_dtoa_r>
 8003e64:	da413e17 	ldw	r9,1272(sp)
 8003e68:	da013f17 	ldw	r8,1276(sp)
 8003e6c:	d8813115 	stw	r2,1220(sp)
 8003e70:	482b883a 	mov	r21,r9
 8003e74:	d8c13117 	ldw	r3,1220(sp)
 8003e78:	00801184 	movi	r2,70
 8003e7c:	1d55883a 	add	r10,r3,r21
 8003e80:	98bebb1e 	bne	r19,r2,8003970 <__alt_data_end+0xfc003970>
 8003e84:	19000007 	ldb	r4,0(r3)
 8003e88:	00800c04 	movi	r2,48
 8003e8c:	2080dd26 	beq	r4,r2,8004204 <___vfprintf_internal_r+0x201c>
 8003e90:	d8c12617 	ldw	r3,1176(sp)
 8003e94:	50d5883a 	add	r10,r10,r3
 8003e98:	003eb506 	br	8003970 <__alt_data_end+0xfc003970>
 8003e9c:	0023883a 	mov	r17,zero
 8003ea0:	003d9b06 	br	8003510 <__alt_data_end+0xfc003510>
 8003ea4:	b809883a 	mov	r4,r23
 8003ea8:	b00b883a 	mov	r5,r22
 8003eac:	d9811e04 	addi	r6,sp,1144
 8003eb0:	80096280 	call	8009628 <__sprint_r>
 8003eb4:	1039e41e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003eb8:	d8c12017 	ldw	r3,1152(sp)
 8003ebc:	da000404 	addi	r8,sp,16
 8003ec0:	003d9206 	br	800350c <__alt_data_end+0xfc00350c>
 8003ec4:	b809883a 	mov	r4,r23
 8003ec8:	b00b883a 	mov	r5,r22
 8003ecc:	d9811e04 	addi	r6,sp,1144
 8003ed0:	80096280 	call	8009628 <__sprint_r>
 8003ed4:	1039dc1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003ed8:	d8812617 	ldw	r2,1176(sp)
 8003edc:	d8c12017 	ldw	r3,1152(sp)
 8003ee0:	da000404 	addi	r8,sp,16
 8003ee4:	003dfb06 	br	80036d4 <__alt_data_end+0xfc0036d4>
 8003ee8:	01020074 	movhi	r4,2049
 8003eec:	2100d084 	addi	r4,r4,834
 8003ef0:	d9012c15 	stw	r4,1200(sp)
 8003ef4:	d9012c17 	ldw	r4,1200(sp)
 8003ef8:	1c07883a 	add	r3,r3,r16
 8003efc:	10800044 	addi	r2,r2,1
 8003f00:	41000015 	stw	r4,0(r8)
 8003f04:	44000115 	stw	r16,4(r8)
 8003f08:	d8c12015 	stw	r3,1152(sp)
 8003f0c:	d8811f15 	stw	r2,1148(sp)
 8003f10:	010001c4 	movi	r4,7
 8003f14:	20bfae16 	blt	r4,r2,8003dd0 <__alt_data_end+0xfc003dd0>
 8003f18:	42000204 	addi	r8,r8,8
 8003f1c:	003fb406 	br	8003df0 <__alt_data_end+0xfc003df0>
 8003f20:	0021883a 	mov	r16,zero
 8003f24:	003dfd06 	br	800371c <__alt_data_end+0xfc00371c>
 8003f28:	01420074 	movhi	r5,2049
 8003f2c:	2940d484 	addi	r5,r5,850
 8003f30:	d9413615 	stw	r5,1240(sp)
 8003f34:	003ae306 	br	8002ac4 <__alt_data_end+0xfc002ac4>
 8003f38:	b809883a 	mov	r4,r23
 8003f3c:	b00b883a 	mov	r5,r22
 8003f40:	d9811e04 	addi	r6,sp,1144
 8003f44:	80096280 	call	8009628 <__sprint_r>
 8003f48:	1039bf1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8003f4c:	d8812617 	ldw	r2,1176(sp)
 8003f50:	d9413317 	ldw	r5,1228(sp)
 8003f54:	d8c12017 	ldw	r3,1152(sp)
 8003f58:	da000404 	addi	r8,sp,16
 8003f5c:	2885c83a 	sub	r2,r5,r2
 8003f60:	003ded06 	br	8003718 <__alt_data_end+0xfc003718>
 8003f64:	00800184 	movi	r2,6
 8003f68:	1240012e 	bgeu	r2,r9,8003f70 <___vfprintf_internal_r+0x1d88>
 8003f6c:	1013883a 	mov	r9,r2
 8003f70:	4823883a 	mov	r17,r9
 8003f74:	4805883a 	mov	r2,r9
 8003f78:	4800b216 	blt	r9,zero,8004244 <___vfprintf_internal_r+0x205c>
 8003f7c:	01420074 	movhi	r5,2049
 8003f80:	2940ce04 	addi	r5,r5,824
 8003f84:	d8812b15 	stw	r2,1196(sp)
 8003f88:	dc812d15 	stw	r18,1204(sp)
 8003f8c:	d8013215 	stw	zero,1224(sp)
 8003f90:	d8013415 	stw	zero,1232(sp)
 8003f94:	d9413115 	stw	r5,1220(sp)
 8003f98:	0005883a 	mov	r2,zero
 8003f9c:	003a1906 	br	8002804 <__alt_data_end+0xfc002804>
 8003fa0:	04c00b44 	movi	r19,45
 8003fa4:	dcc12785 	stb	r19,1182(sp)
 8003fa8:	003b0006 	br	8002bac <__alt_data_end+0xfc002bac>
 8003fac:	d8c12d17 	ldw	r3,1204(sp)
 8003fb0:	d9012f17 	ldw	r4,1212(sp)
 8003fb4:	18800017 	ldw	r2,0(r3)
 8003fb8:	18c00104 	addi	r3,r3,4
 8003fbc:	d8c12d15 	stw	r3,1204(sp)
 8003fc0:	11000015 	stw	r4,0(r2)
 8003fc4:	0038c506 	br	80022dc <__alt_data_end+0xfc0022dc>
 8003fc8:	01420074 	movhi	r5,2049
 8003fcc:	2940c304 	addi	r5,r5,780
 8003fd0:	d9413115 	stw	r5,1220(sp)
 8003fd4:	003f2406 	br	8003c68 <__alt_data_end+0xfc003c68>
 8003fd8:	00800b44 	movi	r2,45
 8003fdc:	d8812785 	stb	r2,1182(sp)
 8003fe0:	df012b15 	stw	fp,1196(sp)
 8003fe4:	d8013215 	stw	zero,1224(sp)
 8003fe8:	df012d17 	ldw	fp,1204(sp)
 8003fec:	00800b44 	movi	r2,45
 8003ff0:	dc812d15 	stw	r18,1204(sp)
 8003ff4:	003a0006 	br	80027f8 <__alt_data_end+0xfc0027f8>
 8003ff8:	d8c12617 	ldw	r3,1176(sp)
 8003ffc:	00bfff44 	movi	r2,-3
 8004000:	18800a16 	blt	r3,r2,800402c <___vfprintf_internal_r+0x1e44>
 8004004:	48c00916 	blt	r9,r3,800402c <___vfprintf_internal_r+0x1e44>
 8004008:	d8c13415 	stw	r3,1232(sp)
 800400c:	040019c4 	movi	r16,103
 8004010:	003e7606 	br	80039ec <__alt_data_end+0xfc0039ec>
 8004014:	01020074 	movhi	r4,2049
 8004018:	2100d084 	addi	r4,r4,834
 800401c:	d9012c15 	stw	r4,1200(sp)
 8004020:	003c8e06 	br	800325c <__alt_data_end+0xfc00325c>
 8004024:	5005883a 	mov	r2,r10
 8004028:	003e6506 	br	80039c0 <__alt_data_end+0xfc0039c0>
 800402c:	843fff84 	addi	r16,r16,-2
 8004030:	1d7fffc4 	addi	r21,r3,-1
 8004034:	dd412615 	stw	r21,1176(sp)
 8004038:	dc0122c5 	stb	r16,1163(sp)
 800403c:	a8009216 	blt	r21,zero,8004288 <___vfprintf_internal_r+0x20a0>
 8004040:	00800ac4 	movi	r2,43
 8004044:	d8812305 	stb	r2,1164(sp)
 8004048:	00800244 	movi	r2,9
 800404c:	1540660e 	bge	r2,r21,80041e8 <___vfprintf_internal_r+0x2000>
 8004050:	dcc122c4 	addi	r19,sp,1163
 8004054:	dc012c15 	stw	r16,1200(sp)
 8004058:	4023883a 	mov	r17,r8
 800405c:	9821883a 	mov	r16,r19
 8004060:	a809883a 	mov	r4,r21
 8004064:	01400284 	movi	r5,10
 8004068:	8001f880 	call	8001f88 <__modsi3>
 800406c:	10800c04 	addi	r2,r2,48
 8004070:	843fffc4 	addi	r16,r16,-1
 8004074:	a809883a 	mov	r4,r21
 8004078:	01400284 	movi	r5,10
 800407c:	80800005 	stb	r2,0(r16)
 8004080:	8001f340 	call	8001f34 <__divsi3>
 8004084:	01000244 	movi	r4,9
 8004088:	102b883a 	mov	r21,r2
 800408c:	20bff416 	blt	r4,r2,8004060 <__alt_data_end+0xfc004060>
 8004090:	8811883a 	mov	r8,r17
 8004094:	10800c04 	addi	r2,r2,48
 8004098:	8023883a 	mov	r17,r16
 800409c:	897fffc4 	addi	r5,r17,-1
 80040a0:	88bfffc5 	stb	r2,-1(r17)
 80040a4:	dc012c17 	ldw	r16,1200(sp)
 80040a8:	2cc08a2e 	bgeu	r5,r19,80042d4 <___vfprintf_internal_r+0x20ec>
 80040ac:	d9812384 	addi	r6,sp,1166
 80040b0:	344dc83a 	sub	r6,r6,r17
 80040b4:	d9012344 	addi	r4,sp,1165
 80040b8:	998d883a 	add	r6,r19,r6
 80040bc:	00000106 	br	80040c4 <___vfprintf_internal_r+0x1edc>
 80040c0:	28800003 	ldbu	r2,0(r5)
 80040c4:	20800005 	stb	r2,0(r4)
 80040c8:	21000044 	addi	r4,r4,1
 80040cc:	29400044 	addi	r5,r5,1
 80040d0:	21bffb1e 	bne	r4,r6,80040c0 <__alt_data_end+0xfc0040c0>
 80040d4:	d8812304 	addi	r2,sp,1164
 80040d8:	1445c83a 	sub	r2,r2,r17
 80040dc:	d9412344 	addi	r5,sp,1165
 80040e0:	2885883a 	add	r2,r5,r2
 80040e4:	14e7c83a 	sub	r19,r2,r19
 80040e8:	d8813317 	ldw	r2,1228(sp)
 80040ec:	d8c13317 	ldw	r3,1228(sp)
 80040f0:	dcc13a15 	stw	r19,1256(sp)
 80040f4:	14e3883a 	add	r17,r2,r19
 80040f8:	00800044 	movi	r2,1
 80040fc:	10c0550e 	bge	r2,r3,8004254 <___vfprintf_internal_r+0x206c>
 8004100:	8c400044 	addi	r17,r17,1
 8004104:	8839883a 	mov	fp,r17
 8004108:	88005016 	blt	r17,zero,800424c <___vfprintf_internal_r+0x2064>
 800410c:	d8013415 	stw	zero,1232(sp)
 8004110:	003e3f06 	br	8003a10 <__alt_data_end+0xfc003a10>
 8004114:	da412b15 	stw	r9,1196(sp)
 8004118:	dcc12783 	ldbu	r19,1182(sp)
 800411c:	4823883a 	mov	r17,r9
 8004120:	dc812d15 	stw	r18,1204(sp)
 8004124:	d8013215 	stw	zero,1224(sp)
 8004128:	d8013415 	stw	zero,1232(sp)
 800412c:	0039ae06 	br	80027e8 <__alt_data_end+0xfc0027e8>
 8004130:	483de91e 	bne	r9,zero,80038d8 <__alt_data_end+0xfc0038d8>
 8004134:	8813883a 	mov	r9,r17
 8004138:	003de706 	br	80038d8 <__alt_data_end+0xfc0038d8>
 800413c:	b809883a 	mov	r4,r23
 8004140:	b00b883a 	mov	r5,r22
 8004144:	d9811e04 	addi	r6,sp,1144
 8004148:	80096280 	call	8009628 <__sprint_r>
 800414c:	10393e1e 	bne	r2,zero,8002648 <__alt_data_end+0xfc002648>
 8004150:	dc012617 	ldw	r16,1176(sp)
 8004154:	d8c12017 	ldw	r3,1152(sp)
 8004158:	d8811f17 	ldw	r2,1148(sp)
 800415c:	da000404 	addi	r8,sp,16
 8004160:	003ea006 	br	8003be4 <__alt_data_end+0xfc003be4>
 8004164:	00c00b44 	movi	r3,45
 8004168:	2460003c 	xorhi	r17,r4,32768
 800416c:	d8c12b05 	stb	r3,1196(sp)
 8004170:	003ddf06 	br	80038f0 <__alt_data_end+0xfc0038f0>
 8004174:	02400184 	movi	r9,6
 8004178:	003dd706 	br	80038d8 <__alt_data_end+0xfc0038d8>
 800417c:	4d400044 	addi	r21,r9,1
 8004180:	003de206 	br	800390c <__alt_data_end+0xfc00390c>
 8004184:	d8c13417 	ldw	r3,1232(sp)
 8004188:	00c0490e 	bge	zero,r3,80042b0 <___vfprintf_internal_r+0x20c8>
 800418c:	04400044 	movi	r17,1
 8004190:	d9013317 	ldw	r4,1228(sp)
 8004194:	8923883a 	add	r17,r17,r4
 8004198:	8839883a 	mov	fp,r17
 800419c:	883e1c0e 	bge	r17,zero,8003a10 <__alt_data_end+0xfc003a10>
 80041a0:	0039883a 	mov	fp,zero
 80041a4:	003e1a06 	br	8003a10 <__alt_data_end+0xfc003a10>
 80041a8:	00c03b0e 	bge	zero,r3,8004298 <___vfprintf_internal_r+0x20b0>
 80041ac:	4800021e 	bne	r9,zero,80041b8 <___vfprintf_internal_r+0x1fd0>
 80041b0:	e080004c 	andi	r2,fp,1
 80041b4:	10000626 	beq	r2,zero,80041d0 <___vfprintf_internal_r+0x1fe8>
 80041b8:	d8c13417 	ldw	r3,1232(sp)
 80041bc:	4a400044 	addi	r9,r9,1
 80041c0:	1a63883a 	add	r17,r3,r9
 80041c4:	8839883a 	mov	fp,r17
 80041c8:	883e110e 	bge	r17,zero,8003a10 <__alt_data_end+0xfc003a10>
 80041cc:	003ff406 	br	80041a0 <__alt_data_end+0xfc0041a0>
 80041d0:	1839883a 	mov	fp,r3
 80041d4:	18004116 	blt	r3,zero,80042dc <___vfprintf_internal_r+0x20f4>
 80041d8:	dc413417 	ldw	r17,1232(sp)
 80041dc:	003e0c06 	br	8003a10 <__alt_data_end+0xfc003a10>
 80041e0:	d8812117 	ldw	r2,1156(sp)
 80041e4:	003df606 	br	80039c0 <__alt_data_end+0xfc0039c0>
 80041e8:	00800c04 	movi	r2,48
 80041ec:	a8c00c04 	addi	r3,r21,48
 80041f0:	d8812345 	stb	r2,1165(sp)
 80041f4:	d8c12385 	stb	r3,1166(sp)
 80041f8:	d88123c4 	addi	r2,sp,1167
 80041fc:	dcc122c4 	addi	r19,sp,1163
 8004200:	003fb806 	br	80040e4 <__alt_data_end+0xfc0040e4>
 8004204:	d9013717 	ldw	r4,1244(sp)
 8004208:	880b883a 	mov	r5,r17
 800420c:	000d883a 	mov	r6,zero
 8004210:	000f883a 	mov	r7,zero
 8004214:	da013f15 	stw	r8,1276(sp)
 8004218:	da413e15 	stw	r9,1272(sp)
 800421c:	da813d15 	stw	r10,1268(sp)
 8004220:	800c8cc0 	call	800c8cc <__eqdf2>
 8004224:	da013f17 	ldw	r8,1276(sp)
 8004228:	da413e17 	ldw	r9,1272(sp)
 800422c:	da813d17 	ldw	r10,1268(sp)
 8004230:	103f1726 	beq	r2,zero,8003e90 <__alt_data_end+0xfc003e90>
 8004234:	00800044 	movi	r2,1
 8004238:	1547c83a 	sub	r3,r2,r21
 800423c:	d8c12615 	stw	r3,1176(sp)
 8004240:	003f1406 	br	8003e94 <__alt_data_end+0xfc003e94>
 8004244:	0005883a 	mov	r2,zero
 8004248:	003f4c06 	br	8003f7c <__alt_data_end+0xfc003f7c>
 800424c:	0039883a 	mov	fp,zero
 8004250:	003fae06 	br	800410c <__alt_data_end+0xfc00410c>
 8004254:	e084703a 	and	r2,fp,r2
 8004258:	103faa26 	beq	r2,zero,8004104 <__alt_data_end+0xfc004104>
 800425c:	003fa806 	br	8004100 <__alt_data_end+0xfc004100>
 8004260:	d9412d17 	ldw	r5,1204(sp)
 8004264:	2a400017 	ldw	r9,0(r5)
 8004268:	28c00104 	addi	r3,r5,4
 800426c:	d8c12d15 	stw	r3,1204(sp)
 8004270:	483ebc0e 	bge	r9,zero,8003d64 <__alt_data_end+0xfc003d64>
 8004274:	027fffc4 	movi	r9,-1
 8004278:	e4000047 	ldb	r16,1(fp)
 800427c:	00384206 	br	8002388 <__alt_data_end+0xfc002388>
 8004280:	043fffc4 	movi	r16,-1
 8004284:	0038ce06 	br	80025c0 <__alt_data_end+0xfc0025c0>
 8004288:	00800b44 	movi	r2,45
 800428c:	056bc83a 	sub	r21,zero,r21
 8004290:	d8812305 	stb	r2,1164(sp)
 8004294:	003f6c06 	br	8004048 <__alt_data_end+0xfc004048>
 8004298:	4800081e 	bne	r9,zero,80042bc <___vfprintf_internal_r+0x20d4>
 800429c:	e080004c 	andi	r2,fp,1
 80042a0:	1000061e 	bne	r2,zero,80042bc <___vfprintf_internal_r+0x20d4>
 80042a4:	07000044 	movi	fp,1
 80042a8:	e023883a 	mov	r17,fp
 80042ac:	003dd806 	br	8003a10 <__alt_data_end+0xfc003a10>
 80042b0:	04400084 	movi	r17,2
 80042b4:	88e3c83a 	sub	r17,r17,r3
 80042b8:	003fb506 	br	8004190 <__alt_data_end+0xfc004190>
 80042bc:	4c400084 	addi	r17,r9,2
 80042c0:	8839883a 	mov	fp,r17
 80042c4:	883dd20e 	bge	r17,zero,8003a10 <__alt_data_end+0xfc003a10>
 80042c8:	003fb506 	br	80041a0 <__alt_data_end+0xfc0041a0>
 80042cc:	d8c12617 	ldw	r3,1176(sp)
 80042d0:	003f5706 	br	8004030 <__alt_data_end+0xfc004030>
 80042d4:	d8812344 	addi	r2,sp,1165
 80042d8:	003f8206 	br	80040e4 <__alt_data_end+0xfc0040e4>
 80042dc:	0039883a 	mov	fp,zero
 80042e0:	003fbd06 	br	80041d8 <__alt_data_end+0xfc0041d8>

080042e4 <__vfprintf_internal>:
 80042e4:	2007883a 	mov	r3,r4
 80042e8:	01020074 	movhi	r4,2049
 80042ec:	2107fc04 	addi	r4,r4,8176
 80042f0:	21000017 	ldw	r4,0(r4)
 80042f4:	2805883a 	mov	r2,r5
 80042f8:	300f883a 	mov	r7,r6
 80042fc:	180b883a 	mov	r5,r3
 8004300:	100d883a 	mov	r6,r2
 8004304:	80021e81 	jmpi	80021e8 <___vfprintf_internal_r>

08004308 <__swsetup_r>:
 8004308:	00820074 	movhi	r2,2049
 800430c:	defffd04 	addi	sp,sp,-12
 8004310:	1087fc04 	addi	r2,r2,8176
 8004314:	dc400115 	stw	r17,4(sp)
 8004318:	2023883a 	mov	r17,r4
 800431c:	11000017 	ldw	r4,0(r2)
 8004320:	dc000015 	stw	r16,0(sp)
 8004324:	dfc00215 	stw	ra,8(sp)
 8004328:	2821883a 	mov	r16,r5
 800432c:	20000226 	beq	r4,zero,8004338 <__swsetup_r+0x30>
 8004330:	20c00e17 	ldw	r3,56(r4)
 8004334:	18002e26 	beq	r3,zero,80043f0 <__swsetup_r+0xe8>
 8004338:	8080030b 	ldhu	r2,12(r16)
 800433c:	10c0020c 	andi	r3,r2,8
 8004340:	100d883a 	mov	r6,r2
 8004344:	18000f26 	beq	r3,zero,8004384 <__swsetup_r+0x7c>
 8004348:	80c00417 	ldw	r3,16(r16)
 800434c:	18001526 	beq	r3,zero,80043a4 <__swsetup_r+0x9c>
 8004350:	1100004c 	andi	r4,r2,1
 8004354:	20001c1e 	bne	r4,zero,80043c8 <__swsetup_r+0xc0>
 8004358:	1080008c 	andi	r2,r2,2
 800435c:	1000261e 	bne	r2,zero,80043f8 <__swsetup_r+0xf0>
 8004360:	80800517 	ldw	r2,20(r16)
 8004364:	80800215 	stw	r2,8(r16)
 8004368:	18001c26 	beq	r3,zero,80043dc <__swsetup_r+0xd4>
 800436c:	0005883a 	mov	r2,zero
 8004370:	dfc00217 	ldw	ra,8(sp)
 8004374:	dc400117 	ldw	r17,4(sp)
 8004378:	dc000017 	ldw	r16,0(sp)
 800437c:	dec00304 	addi	sp,sp,12
 8004380:	f800283a 	ret
 8004384:	3080040c 	andi	r2,r6,16
 8004388:	10001726 	beq	r2,zero,80043e8 <__swsetup_r+0xe0>
 800438c:	3080010c 	andi	r2,r6,4
 8004390:	10001b1e 	bne	r2,zero,8004400 <__swsetup_r+0xf8>
 8004394:	80c00417 	ldw	r3,16(r16)
 8004398:	30800214 	ori	r2,r6,8
 800439c:	8080030d 	sth	r2,12(r16)
 80043a0:	183feb1e 	bne	r3,zero,8004350 <__alt_data_end+0xfc004350>
 80043a4:	1140a00c 	andi	r5,r2,640
 80043a8:	01008004 	movi	r4,512
 80043ac:	293fe826 	beq	r5,r4,8004350 <__alt_data_end+0xfc004350>
 80043b0:	8809883a 	mov	r4,r17
 80043b4:	800b883a 	mov	r5,r16
 80043b8:	8006e9c0 	call	8006e9c <__smakebuf_r>
 80043bc:	8080030b 	ldhu	r2,12(r16)
 80043c0:	80c00417 	ldw	r3,16(r16)
 80043c4:	003fe206 	br	8004350 <__alt_data_end+0xfc004350>
 80043c8:	80800517 	ldw	r2,20(r16)
 80043cc:	80000215 	stw	zero,8(r16)
 80043d0:	0085c83a 	sub	r2,zero,r2
 80043d4:	80800615 	stw	r2,24(r16)
 80043d8:	183fe41e 	bne	r3,zero,800436c <__alt_data_end+0xfc00436c>
 80043dc:	8080030b 	ldhu	r2,12(r16)
 80043e0:	1080200c 	andi	r2,r2,128
 80043e4:	103fe226 	beq	r2,zero,8004370 <__alt_data_end+0xfc004370>
 80043e8:	00bfffc4 	movi	r2,-1
 80043ec:	003fe006 	br	8004370 <__alt_data_end+0xfc004370>
 80043f0:	80063440 	call	8006344 <__sinit>
 80043f4:	003fd006 	br	8004338 <__alt_data_end+0xfc004338>
 80043f8:	0005883a 	mov	r2,zero
 80043fc:	003fd906 	br	8004364 <__alt_data_end+0xfc004364>
 8004400:	81400c17 	ldw	r5,48(r16)
 8004404:	28000626 	beq	r5,zero,8004420 <__swsetup_r+0x118>
 8004408:	80801004 	addi	r2,r16,64
 800440c:	28800326 	beq	r5,r2,800441c <__swsetup_r+0x114>
 8004410:	8809883a 	mov	r4,r17
 8004414:	80064b80 	call	80064b8 <_free_r>
 8004418:	8180030b 	ldhu	r6,12(r16)
 800441c:	80000c15 	stw	zero,48(r16)
 8004420:	80c00417 	ldw	r3,16(r16)
 8004424:	00bff6c4 	movi	r2,-37
 8004428:	118c703a 	and	r6,r2,r6
 800442c:	80000115 	stw	zero,4(r16)
 8004430:	80c00015 	stw	r3,0(r16)
 8004434:	003fd806 	br	8004398 <__alt_data_end+0xfc004398>

08004438 <quorem>:
 8004438:	defff204 	addi	sp,sp,-56
 800443c:	ddc00b15 	stw	r23,44(sp)
 8004440:	20800417 	ldw	r2,16(r4)
 8004444:	2dc00417 	ldw	r23,16(r5)
 8004448:	dfc00d15 	stw	ra,52(sp)
 800444c:	df000c15 	stw	fp,48(sp)
 8004450:	dd800a15 	stw	r22,40(sp)
 8004454:	dd400915 	stw	r21,36(sp)
 8004458:	dd000815 	stw	r20,32(sp)
 800445c:	dcc00715 	stw	r19,28(sp)
 8004460:	dc800615 	stw	r18,24(sp)
 8004464:	dc400515 	stw	r17,20(sp)
 8004468:	dc000415 	stw	r16,16(sp)
 800446c:	15c07a16 	blt	r2,r23,8004658 <quorem+0x220>
 8004470:	bdffffc4 	addi	r23,r23,-1
 8004474:	bde9883a 	add	r20,r23,r23
 8004478:	28c00504 	addi	r3,r5,20
 800447c:	a529883a 	add	r20,r20,r20
 8004480:	1d39883a 	add	fp,r3,r20
 8004484:	24c00504 	addi	r19,r4,20
 8004488:	d9400215 	stw	r5,8(sp)
 800448c:	9d29883a 	add	r20,r19,r20
 8004490:	e1400017 	ldw	r5,0(fp)
 8004494:	d9000015 	stw	r4,0(sp)
 8004498:	a1000017 	ldw	r4,0(r20)
 800449c:	29400044 	addi	r5,r5,1
 80044a0:	d8c00115 	stw	r3,4(sp)
 80044a4:	dd000315 	stw	r20,12(sp)
 80044a8:	8001fe40 	call	8001fe4 <__udivsi3>
 80044ac:	1025883a 	mov	r18,r2
 80044b0:	10003026 	beq	r2,zero,8004574 <quorem+0x13c>
 80044b4:	dc400117 	ldw	r17,4(sp)
 80044b8:	9829883a 	mov	r20,r19
 80044bc:	002d883a 	mov	r22,zero
 80044c0:	0021883a 	mov	r16,zero
 80044c4:	8d400017 	ldw	r21,0(r17)
 80044c8:	900b883a 	mov	r5,r18
 80044cc:	8c400104 	addi	r17,r17,4
 80044d0:	a93fffcc 	andi	r4,r21,65535
 80044d4:	8001ff40 	call	8001ff4 <__mulsi3>
 80044d8:	a808d43a 	srli	r4,r21,16
 80044dc:	900b883a 	mov	r5,r18
 80044e0:	b0ad883a 	add	r22,r22,r2
 80044e4:	8001ff40 	call	8001ff4 <__mulsi3>
 80044e8:	a1000017 	ldw	r4,0(r20)
 80044ec:	b00cd43a 	srli	r6,r22,16
 80044f0:	b0ffffcc 	andi	r3,r22,65535
 80044f4:	217fffcc 	andi	r5,r4,65535
 80044f8:	2c21883a 	add	r16,r5,r16
 80044fc:	80c7c83a 	sub	r3,r16,r3
 8004500:	2008d43a 	srli	r4,r4,16
 8004504:	3085883a 	add	r2,r6,r2
 8004508:	1821d43a 	srai	r16,r3,16
 800450c:	117fffcc 	andi	r5,r2,65535
 8004510:	2149c83a 	sub	r4,r4,r5
 8004514:	2421883a 	add	r16,r4,r16
 8004518:	8008943a 	slli	r4,r16,16
 800451c:	18ffffcc 	andi	r3,r3,65535
 8004520:	102cd43a 	srli	r22,r2,16
 8004524:	20c8b03a 	or	r4,r4,r3
 8004528:	a1000015 	stw	r4,0(r20)
 800452c:	8021d43a 	srai	r16,r16,16
 8004530:	a5000104 	addi	r20,r20,4
 8004534:	e47fe32e 	bgeu	fp,r17,80044c4 <__alt_data_end+0xfc0044c4>
 8004538:	d8c00317 	ldw	r3,12(sp)
 800453c:	18800017 	ldw	r2,0(r3)
 8004540:	10000c1e 	bne	r2,zero,8004574 <quorem+0x13c>
 8004544:	18bfff04 	addi	r2,r3,-4
 8004548:	9880082e 	bgeu	r19,r2,800456c <quorem+0x134>
 800454c:	18ffff17 	ldw	r3,-4(r3)
 8004550:	18000326 	beq	r3,zero,8004560 <quorem+0x128>
 8004554:	00000506 	br	800456c <quorem+0x134>
 8004558:	10c00017 	ldw	r3,0(r2)
 800455c:	1800031e 	bne	r3,zero,800456c <quorem+0x134>
 8004560:	10bfff04 	addi	r2,r2,-4
 8004564:	bdffffc4 	addi	r23,r23,-1
 8004568:	98bffb36 	bltu	r19,r2,8004558 <__alt_data_end+0xfc004558>
 800456c:	d8c00017 	ldw	r3,0(sp)
 8004570:	1dc00415 	stw	r23,16(r3)
 8004574:	d9000017 	ldw	r4,0(sp)
 8004578:	d9400217 	ldw	r5,8(sp)
 800457c:	80086180 	call	8008618 <__mcmp>
 8004580:	10002816 	blt	r2,zero,8004624 <quorem+0x1ec>
 8004584:	dc400117 	ldw	r17,4(sp)
 8004588:	94800044 	addi	r18,r18,1
 800458c:	980d883a 	mov	r6,r19
 8004590:	0007883a 	mov	r3,zero
 8004594:	31000017 	ldw	r4,0(r6)
 8004598:	89400017 	ldw	r5,0(r17)
 800459c:	31800104 	addi	r6,r6,4
 80045a0:	20bfffcc 	andi	r2,r4,65535
 80045a4:	10c7883a 	add	r3,r2,r3
 80045a8:	28bfffcc 	andi	r2,r5,65535
 80045ac:	1885c83a 	sub	r2,r3,r2
 80045b0:	280ad43a 	srli	r5,r5,16
 80045b4:	2008d43a 	srli	r4,r4,16
 80045b8:	1007d43a 	srai	r3,r2,16
 80045bc:	10bfffcc 	andi	r2,r2,65535
 80045c0:	2149c83a 	sub	r4,r4,r5
 80045c4:	20c9883a 	add	r4,r4,r3
 80045c8:	200a943a 	slli	r5,r4,16
 80045cc:	8c400104 	addi	r17,r17,4
 80045d0:	2007d43a 	srai	r3,r4,16
 80045d4:	2884b03a 	or	r2,r5,r2
 80045d8:	30bfff15 	stw	r2,-4(r6)
 80045dc:	e47fed2e 	bgeu	fp,r17,8004594 <__alt_data_end+0xfc004594>
 80045e0:	bdc5883a 	add	r2,r23,r23
 80045e4:	1085883a 	add	r2,r2,r2
 80045e8:	9887883a 	add	r3,r19,r2
 80045ec:	18800017 	ldw	r2,0(r3)
 80045f0:	10000c1e 	bne	r2,zero,8004624 <quorem+0x1ec>
 80045f4:	18bfff04 	addi	r2,r3,-4
 80045f8:	9880082e 	bgeu	r19,r2,800461c <quorem+0x1e4>
 80045fc:	18ffff17 	ldw	r3,-4(r3)
 8004600:	18000326 	beq	r3,zero,8004610 <quorem+0x1d8>
 8004604:	00000506 	br	800461c <quorem+0x1e4>
 8004608:	10c00017 	ldw	r3,0(r2)
 800460c:	1800031e 	bne	r3,zero,800461c <quorem+0x1e4>
 8004610:	10bfff04 	addi	r2,r2,-4
 8004614:	bdffffc4 	addi	r23,r23,-1
 8004618:	98bffb36 	bltu	r19,r2,8004608 <__alt_data_end+0xfc004608>
 800461c:	d8c00017 	ldw	r3,0(sp)
 8004620:	1dc00415 	stw	r23,16(r3)
 8004624:	9005883a 	mov	r2,r18
 8004628:	dfc00d17 	ldw	ra,52(sp)
 800462c:	df000c17 	ldw	fp,48(sp)
 8004630:	ddc00b17 	ldw	r23,44(sp)
 8004634:	dd800a17 	ldw	r22,40(sp)
 8004638:	dd400917 	ldw	r21,36(sp)
 800463c:	dd000817 	ldw	r20,32(sp)
 8004640:	dcc00717 	ldw	r19,28(sp)
 8004644:	dc800617 	ldw	r18,24(sp)
 8004648:	dc400517 	ldw	r17,20(sp)
 800464c:	dc000417 	ldw	r16,16(sp)
 8004650:	dec00e04 	addi	sp,sp,56
 8004654:	f800283a 	ret
 8004658:	0005883a 	mov	r2,zero
 800465c:	003ff206 	br	8004628 <__alt_data_end+0xfc004628>

08004660 <_dtoa_r>:
 8004660:	20801017 	ldw	r2,64(r4)
 8004664:	deffde04 	addi	sp,sp,-136
 8004668:	dd401d15 	stw	r21,116(sp)
 800466c:	dcc01b15 	stw	r19,108(sp)
 8004670:	dc801a15 	stw	r18,104(sp)
 8004674:	dc401915 	stw	r17,100(sp)
 8004678:	dc001815 	stw	r16,96(sp)
 800467c:	dfc02115 	stw	ra,132(sp)
 8004680:	df002015 	stw	fp,128(sp)
 8004684:	ddc01f15 	stw	r23,124(sp)
 8004688:	dd801e15 	stw	r22,120(sp)
 800468c:	dd001c15 	stw	r20,112(sp)
 8004690:	d9c00315 	stw	r7,12(sp)
 8004694:	2021883a 	mov	r16,r4
 8004698:	302b883a 	mov	r21,r6
 800469c:	2825883a 	mov	r18,r5
 80046a0:	dc402417 	ldw	r17,144(sp)
 80046a4:	3027883a 	mov	r19,r6
 80046a8:	10000826 	beq	r2,zero,80046cc <_dtoa_r+0x6c>
 80046ac:	21801117 	ldw	r6,68(r4)
 80046b0:	00c00044 	movi	r3,1
 80046b4:	100b883a 	mov	r5,r2
 80046b8:	1986983a 	sll	r3,r3,r6
 80046bc:	11800115 	stw	r6,4(r2)
 80046c0:	10c00215 	stw	r3,8(r2)
 80046c4:	8007d440 	call	8007d44 <_Bfree>
 80046c8:	80001015 	stw	zero,64(r16)
 80046cc:	a8002d16 	blt	r21,zero,8004784 <_dtoa_r+0x124>
 80046d0:	88000015 	stw	zero,0(r17)
 80046d4:	a8dffc2c 	andhi	r3,r21,32752
 80046d8:	009ffc34 	movhi	r2,32752
 80046dc:	18801b26 	beq	r3,r2,800474c <_dtoa_r+0xec>
 80046e0:	9009883a 	mov	r4,r18
 80046e4:	980b883a 	mov	r5,r19
 80046e8:	000d883a 	mov	r6,zero
 80046ec:	000f883a 	mov	r7,zero
 80046f0:	800c8cc0 	call	800c8cc <__eqdf2>
 80046f4:	10002a1e 	bne	r2,zero,80047a0 <_dtoa_r+0x140>
 80046f8:	d8c02317 	ldw	r3,140(sp)
 80046fc:	d9002517 	ldw	r4,148(sp)
 8004700:	00800044 	movi	r2,1
 8004704:	18800015 	stw	r2,0(r3)
 8004708:	2001a226 	beq	r4,zero,8004d94 <_dtoa_r+0x734>
 800470c:	00820074 	movhi	r2,2049
 8004710:	1080d044 	addi	r2,r2,833
 8004714:	20800015 	stw	r2,0(r4)
 8004718:	10bfffc4 	addi	r2,r2,-1
 800471c:	dfc02117 	ldw	ra,132(sp)
 8004720:	df002017 	ldw	fp,128(sp)
 8004724:	ddc01f17 	ldw	r23,124(sp)
 8004728:	dd801e17 	ldw	r22,120(sp)
 800472c:	dd401d17 	ldw	r21,116(sp)
 8004730:	dd001c17 	ldw	r20,112(sp)
 8004734:	dcc01b17 	ldw	r19,108(sp)
 8004738:	dc801a17 	ldw	r18,104(sp)
 800473c:	dc401917 	ldw	r17,100(sp)
 8004740:	dc001817 	ldw	r16,96(sp)
 8004744:	dec02204 	addi	sp,sp,136
 8004748:	f800283a 	ret
 800474c:	d8c02317 	ldw	r3,140(sp)
 8004750:	0089c3c4 	movi	r2,9999
 8004754:	18800015 	stw	r2,0(r3)
 8004758:	90017c26 	beq	r18,zero,8004d4c <_dtoa_r+0x6ec>
 800475c:	00820074 	movhi	r2,2049
 8004760:	1080dc04 	addi	r2,r2,880
 8004764:	d9002517 	ldw	r4,148(sp)
 8004768:	203fec26 	beq	r4,zero,800471c <__alt_data_end+0xfc00471c>
 800476c:	10c000c7 	ldb	r3,3(r2)
 8004770:	18017d1e 	bne	r3,zero,8004d68 <_dtoa_r+0x708>
 8004774:	10c000c4 	addi	r3,r2,3
 8004778:	d9802517 	ldw	r6,148(sp)
 800477c:	30c00015 	stw	r3,0(r6)
 8004780:	003fe606 	br	800471c <__alt_data_end+0xfc00471c>
 8004784:	04e00034 	movhi	r19,32768
 8004788:	9cffffc4 	addi	r19,r19,-1
 800478c:	00800044 	movi	r2,1
 8004790:	ace6703a 	and	r19,r21,r19
 8004794:	88800015 	stw	r2,0(r17)
 8004798:	982b883a 	mov	r21,r19
 800479c:	003fcd06 	br	80046d4 <__alt_data_end+0xfc0046d4>
 80047a0:	d8800204 	addi	r2,sp,8
 80047a4:	a822d53a 	srli	r17,r21,20
 80047a8:	d8800015 	stw	r2,0(sp)
 80047ac:	8009883a 	mov	r4,r16
 80047b0:	900b883a 	mov	r5,r18
 80047b4:	980d883a 	mov	r6,r19
 80047b8:	d9c00104 	addi	r7,sp,4
 80047bc:	800898c0 	call	800898c <__d2b>
 80047c0:	1039883a 	mov	fp,r2
 80047c4:	88016a1e 	bne	r17,zero,8004d70 <_dtoa_r+0x710>
 80047c8:	dd000217 	ldw	r20,8(sp)
 80047cc:	dc400117 	ldw	r17,4(sp)
 80047d0:	00befbc4 	movi	r2,-1041
 80047d4:	a463883a 	add	r17,r20,r17
 80047d8:	8882ea16 	blt	r17,r2,8005384 <_dtoa_r+0xd24>
 80047dc:	00bf0384 	movi	r2,-1010
 80047e0:	1445c83a 	sub	r2,r2,r17
 80047e4:	89010484 	addi	r4,r17,1042
 80047e8:	a8aa983a 	sll	r21,r21,r2
 80047ec:	9108d83a 	srl	r4,r18,r4
 80047f0:	a908b03a 	or	r4,r21,r4
 80047f4:	8001dc00 	call	8001dc0 <__floatunsidf>
 80047f8:	017f8434 	movhi	r5,65040
 80047fc:	01800044 	movi	r6,1
 8004800:	1009883a 	mov	r4,r2
 8004804:	194b883a 	add	r5,r3,r5
 8004808:	8c7fffc4 	addi	r17,r17,-1
 800480c:	d9800f15 	stw	r6,60(sp)
 8004810:	000d883a 	mov	r6,zero
 8004814:	01cffe34 	movhi	r7,16376
 8004818:	800cb100 	call	800cb10 <__subdf3>
 800481c:	0198dbf4 	movhi	r6,25455
 8004820:	01cff4f4 	movhi	r7,16339
 8004824:	1009883a 	mov	r4,r2
 8004828:	180b883a 	mov	r5,r3
 800482c:	3190d844 	addi	r6,r6,17249
 8004830:	39e1e9c4 	addi	r7,r7,-30809
 8004834:	80014cc0 	call	80014cc <__muldf3>
 8004838:	01a2d874 	movhi	r6,35681
 800483c:	01cff1f4 	movhi	r7,16327
 8004840:	180b883a 	mov	r5,r3
 8004844:	31b22cc4 	addi	r6,r6,-14157
 8004848:	39e28a04 	addi	r7,r7,-30168
 800484c:	1009883a 	mov	r4,r2
 8004850:	800c0300 	call	800c030 <__adddf3>
 8004854:	8809883a 	mov	r4,r17
 8004858:	102d883a 	mov	r22,r2
 800485c:	182b883a 	mov	r21,r3
 8004860:	800d3e00 	call	800d3e0 <__floatsidf>
 8004864:	019427f4 	movhi	r6,20639
 8004868:	01cff4f4 	movhi	r7,16339
 800486c:	1009883a 	mov	r4,r2
 8004870:	180b883a 	mov	r5,r3
 8004874:	319e7ec4 	addi	r6,r6,31227
 8004878:	39d104c4 	addi	r7,r7,17427
 800487c:	80014cc0 	call	80014cc <__muldf3>
 8004880:	b009883a 	mov	r4,r22
 8004884:	a80b883a 	mov	r5,r21
 8004888:	100d883a 	mov	r6,r2
 800488c:	180f883a 	mov	r7,r3
 8004890:	800c0300 	call	800c030 <__adddf3>
 8004894:	1009883a 	mov	r4,r2
 8004898:	180b883a 	mov	r5,r3
 800489c:	102d883a 	mov	r22,r2
 80048a0:	182b883a 	mov	r21,r3
 80048a4:	8001d380 	call	8001d38 <__fixdfsi>
 80048a8:	b009883a 	mov	r4,r22
 80048ac:	a80b883a 	mov	r5,r21
 80048b0:	000d883a 	mov	r6,zero
 80048b4:	000f883a 	mov	r7,zero
 80048b8:	d8800515 	stw	r2,20(sp)
 80048bc:	800ca300 	call	800ca30 <__ledf2>
 80048c0:	10023116 	blt	r2,zero,8005188 <_dtoa_r+0xb28>
 80048c4:	d8c00517 	ldw	r3,20(sp)
 80048c8:	00800584 	movi	r2,22
 80048cc:	10c21f36 	bltu	r2,r3,800514c <_dtoa_r+0xaec>
 80048d0:	180490fa 	slli	r2,r3,3
 80048d4:	00c20074 	movhi	r3,2049
 80048d8:	18c0f804 	addi	r3,r3,992
 80048dc:	1885883a 	add	r2,r3,r2
 80048e0:	11000017 	ldw	r4,0(r2)
 80048e4:	11400117 	ldw	r5,4(r2)
 80048e8:	900d883a 	mov	r6,r18
 80048ec:	980f883a 	mov	r7,r19
 80048f0:	800c9500 	call	800c950 <__gedf2>
 80048f4:	0082a70e 	bge	zero,r2,8005394 <_dtoa_r+0xd34>
 80048f8:	d9000517 	ldw	r4,20(sp)
 80048fc:	d8000c15 	stw	zero,48(sp)
 8004900:	213fffc4 	addi	r4,r4,-1
 8004904:	d9000515 	stw	r4,20(sp)
 8004908:	a463c83a 	sub	r17,r20,r17
 800490c:	8dbfffc4 	addi	r22,r17,-1
 8004910:	b0021916 	blt	r22,zero,8005178 <_dtoa_r+0xb18>
 8004914:	d8000815 	stw	zero,32(sp)
 8004918:	d8800517 	ldw	r2,20(sp)
 800491c:	10020e16 	blt	r2,zero,8005158 <_dtoa_r+0xaf8>
 8004920:	b0ad883a 	add	r22,r22,r2
 8004924:	d8800a15 	stw	r2,40(sp)
 8004928:	d8000915 	stw	zero,36(sp)
 800492c:	d8c00317 	ldw	r3,12(sp)
 8004930:	00800244 	movi	r2,9
 8004934:	10c11a36 	bltu	r2,r3,8004da0 <_dtoa_r+0x740>
 8004938:	00800144 	movi	r2,5
 800493c:	10c4fc0e 	bge	r2,r3,8005d30 <_dtoa_r+0x16d0>
 8004940:	18ffff04 	addi	r3,r3,-4
 8004944:	d8c00315 	stw	r3,12(sp)
 8004948:	0029883a 	mov	r20,zero
 800494c:	d9800317 	ldw	r6,12(sp)
 8004950:	008000c4 	movi	r2,3
 8004954:	3083bd26 	beq	r6,r2,800584c <_dtoa_r+0x11ec>
 8004958:	1183670e 	bge	r2,r6,80056f8 <_dtoa_r+0x1098>
 800495c:	d8c00317 	ldw	r3,12(sp)
 8004960:	00800104 	movi	r2,4
 8004964:	1882e726 	beq	r3,r2,8005504 <_dtoa_r+0xea4>
 8004968:	00800144 	movi	r2,5
 800496c:	1884f21e 	bne	r3,r2,8005d38 <_dtoa_r+0x16d8>
 8004970:	00800044 	movi	r2,1
 8004974:	d8800b15 	stw	r2,44(sp)
 8004978:	d8c02217 	ldw	r3,136(sp)
 800497c:	d9000517 	ldw	r4,20(sp)
 8004980:	1907883a 	add	r3,r3,r4
 8004984:	19800044 	addi	r6,r3,1
 8004988:	d8c00d15 	stw	r3,52(sp)
 800498c:	d9800615 	stw	r6,24(sp)
 8004990:	0183c30e 	bge	zero,r6,80058a0 <_dtoa_r+0x1240>
 8004994:	d9800617 	ldw	r6,24(sp)
 8004998:	3023883a 	mov	r17,r6
 800499c:	80001115 	stw	zero,68(r16)
 80049a0:	008005c4 	movi	r2,23
 80049a4:	1184f62e 	bgeu	r2,r6,8005d80 <_dtoa_r+0x1720>
 80049a8:	00c00044 	movi	r3,1
 80049ac:	00800104 	movi	r2,4
 80049b0:	1085883a 	add	r2,r2,r2
 80049b4:	11000504 	addi	r4,r2,20
 80049b8:	180b883a 	mov	r5,r3
 80049bc:	18c00044 	addi	r3,r3,1
 80049c0:	313ffb2e 	bgeu	r6,r4,80049b0 <__alt_data_end+0xfc0049b0>
 80049c4:	81401115 	stw	r5,68(r16)
 80049c8:	8009883a 	mov	r4,r16
 80049cc:	8007c9c0 	call	8007c9c <_Balloc>
 80049d0:	d8800715 	stw	r2,28(sp)
 80049d4:	80801015 	stw	r2,64(r16)
 80049d8:	00800384 	movi	r2,14
 80049dc:	1440fd36 	bltu	r2,r17,8004dd4 <_dtoa_r+0x774>
 80049e0:	a000fc26 	beq	r20,zero,8004dd4 <_dtoa_r+0x774>
 80049e4:	d8800517 	ldw	r2,20(sp)
 80049e8:	0083b90e 	bge	zero,r2,80058d0 <_dtoa_r+0x1270>
 80049ec:	d8c00517 	ldw	r3,20(sp)
 80049f0:	108003cc 	andi	r2,r2,15
 80049f4:	100490fa 	slli	r2,r2,3
 80049f8:	182fd13a 	srai	r23,r3,4
 80049fc:	00c20074 	movhi	r3,2049
 8004a00:	18c0f804 	addi	r3,r3,992
 8004a04:	1885883a 	add	r2,r3,r2
 8004a08:	b8c0040c 	andi	r3,r23,16
 8004a0c:	12c00017 	ldw	r11,0(r2)
 8004a10:	12800117 	ldw	r10,4(r2)
 8004a14:	18039726 	beq	r3,zero,8005874 <_dtoa_r+0x1214>
 8004a18:	00820074 	movhi	r2,2049
 8004a1c:	1080ee04 	addi	r2,r2,952
 8004a20:	11800817 	ldw	r6,32(r2)
 8004a24:	11c00917 	ldw	r7,36(r2)
 8004a28:	9009883a 	mov	r4,r18
 8004a2c:	980b883a 	mov	r5,r19
 8004a30:	da801615 	stw	r10,88(sp)
 8004a34:	dac01515 	stw	r11,84(sp)
 8004a38:	8000b4c0 	call	8000b4c <__divdf3>
 8004a3c:	da801617 	ldw	r10,88(sp)
 8004a40:	dac01517 	ldw	r11,84(sp)
 8004a44:	bdc003cc 	andi	r23,r23,15
 8004a48:	044000c4 	movi	r17,3
 8004a4c:	d8800e15 	stw	r2,56(sp)
 8004a50:	182b883a 	mov	r21,r3
 8004a54:	b8001126 	beq	r23,zero,8004a9c <_dtoa_r+0x43c>
 8004a58:	05020074 	movhi	r20,2049
 8004a5c:	a500ee04 	addi	r20,r20,952
 8004a60:	5805883a 	mov	r2,r11
 8004a64:	5007883a 	mov	r3,r10
 8004a68:	b980004c 	andi	r6,r23,1
 8004a6c:	1009883a 	mov	r4,r2
 8004a70:	b82fd07a 	srai	r23,r23,1
 8004a74:	180b883a 	mov	r5,r3
 8004a78:	30000426 	beq	r6,zero,8004a8c <_dtoa_r+0x42c>
 8004a7c:	a1800017 	ldw	r6,0(r20)
 8004a80:	a1c00117 	ldw	r7,4(r20)
 8004a84:	8c400044 	addi	r17,r17,1
 8004a88:	80014cc0 	call	80014cc <__muldf3>
 8004a8c:	a5000204 	addi	r20,r20,8
 8004a90:	b83ff51e 	bne	r23,zero,8004a68 <__alt_data_end+0xfc004a68>
 8004a94:	1017883a 	mov	r11,r2
 8004a98:	1815883a 	mov	r10,r3
 8004a9c:	d9000e17 	ldw	r4,56(sp)
 8004aa0:	a80b883a 	mov	r5,r21
 8004aa4:	580d883a 	mov	r6,r11
 8004aa8:	500f883a 	mov	r7,r10
 8004aac:	8000b4c0 	call	8000b4c <__divdf3>
 8004ab0:	1029883a 	mov	r20,r2
 8004ab4:	182b883a 	mov	r21,r3
 8004ab8:	d9800c17 	ldw	r6,48(sp)
 8004abc:	30000626 	beq	r6,zero,8004ad8 <_dtoa_r+0x478>
 8004ac0:	a009883a 	mov	r4,r20
 8004ac4:	a80b883a 	mov	r5,r21
 8004ac8:	000d883a 	mov	r6,zero
 8004acc:	01cffc34 	movhi	r7,16368
 8004ad0:	800ca300 	call	800ca30 <__ledf2>
 8004ad4:	10043216 	blt	r2,zero,8005ba0 <_dtoa_r+0x1540>
 8004ad8:	8809883a 	mov	r4,r17
 8004adc:	800d3e00 	call	800d3e0 <__floatsidf>
 8004ae0:	1009883a 	mov	r4,r2
 8004ae4:	180b883a 	mov	r5,r3
 8004ae8:	a00d883a 	mov	r6,r20
 8004aec:	a80f883a 	mov	r7,r21
 8004af0:	80014cc0 	call	80014cc <__muldf3>
 8004af4:	000d883a 	mov	r6,zero
 8004af8:	1009883a 	mov	r4,r2
 8004afc:	180b883a 	mov	r5,r3
 8004b00:	01d00734 	movhi	r7,16412
 8004b04:	800c0300 	call	800c030 <__adddf3>
 8004b08:	1023883a 	mov	r17,r2
 8004b0c:	d9800617 	ldw	r6,24(sp)
 8004b10:	00bf3034 	movhi	r2,64704
 8004b14:	1885883a 	add	r2,r3,r2
 8004b18:	d8800e15 	stw	r2,56(sp)
 8004b1c:	30032e26 	beq	r6,zero,80057d8 <_dtoa_r+0x1178>
 8004b20:	d8c00517 	ldw	r3,20(sp)
 8004b24:	da800617 	ldw	r10,24(sp)
 8004b28:	d8c01215 	stw	r3,72(sp)
 8004b2c:	d9000b17 	ldw	r4,44(sp)
 8004b30:	2003b026 	beq	r4,zero,80059f4 <_dtoa_r+0x1394>
 8004b34:	50bfffc4 	addi	r2,r10,-1
 8004b38:	100490fa 	slli	r2,r2,3
 8004b3c:	00c20074 	movhi	r3,2049
 8004b40:	18c0f804 	addi	r3,r3,992
 8004b44:	1885883a 	add	r2,r3,r2
 8004b48:	11800017 	ldw	r6,0(r2)
 8004b4c:	11c00117 	ldw	r7,4(r2)
 8004b50:	d8800717 	ldw	r2,28(sp)
 8004b54:	0009883a 	mov	r4,zero
 8004b58:	014ff834 	movhi	r5,16352
 8004b5c:	da801615 	stw	r10,88(sp)
 8004b60:	15c00044 	addi	r23,r2,1
 8004b64:	8000b4c0 	call	8000b4c <__divdf3>
 8004b68:	d9c00e17 	ldw	r7,56(sp)
 8004b6c:	880d883a 	mov	r6,r17
 8004b70:	1009883a 	mov	r4,r2
 8004b74:	180b883a 	mov	r5,r3
 8004b78:	800cb100 	call	800cb10 <__subdf3>
 8004b7c:	a80b883a 	mov	r5,r21
 8004b80:	a009883a 	mov	r4,r20
 8004b84:	d8c01015 	stw	r3,64(sp)
 8004b88:	d8800e15 	stw	r2,56(sp)
 8004b8c:	8001d380 	call	8001d38 <__fixdfsi>
 8004b90:	1009883a 	mov	r4,r2
 8004b94:	d8801715 	stw	r2,92(sp)
 8004b98:	800d3e00 	call	800d3e0 <__floatsidf>
 8004b9c:	a009883a 	mov	r4,r20
 8004ba0:	a80b883a 	mov	r5,r21
 8004ba4:	100d883a 	mov	r6,r2
 8004ba8:	180f883a 	mov	r7,r3
 8004bac:	800cb100 	call	800cb10 <__subdf3>
 8004bb0:	da001717 	ldw	r8,92(sp)
 8004bb4:	1829883a 	mov	r20,r3
 8004bb8:	d8c00717 	ldw	r3,28(sp)
 8004bbc:	d9000e17 	ldw	r4,56(sp)
 8004bc0:	d9401017 	ldw	r5,64(sp)
 8004bc4:	42000c04 	addi	r8,r8,48
 8004bc8:	1023883a 	mov	r17,r2
 8004bcc:	1a000005 	stb	r8,0(r3)
 8004bd0:	880d883a 	mov	r6,r17
 8004bd4:	a00f883a 	mov	r7,r20
 8004bd8:	402b883a 	mov	r21,r8
 8004bdc:	800c9500 	call	800c950 <__gedf2>
 8004be0:	00844516 	blt	zero,r2,8005cf8 <_dtoa_r+0x1698>
 8004be4:	0009883a 	mov	r4,zero
 8004be8:	014ffc34 	movhi	r5,16368
 8004bec:	880d883a 	mov	r6,r17
 8004bf0:	a00f883a 	mov	r7,r20
 8004bf4:	800cb100 	call	800cb10 <__subdf3>
 8004bf8:	d9000e17 	ldw	r4,56(sp)
 8004bfc:	d9401017 	ldw	r5,64(sp)
 8004c00:	100d883a 	mov	r6,r2
 8004c04:	180f883a 	mov	r7,r3
 8004c08:	800c9500 	call	800c950 <__gedf2>
 8004c0c:	da801617 	ldw	r10,88(sp)
 8004c10:	00843616 	blt	zero,r2,8005cec <_dtoa_r+0x168c>
 8004c14:	00800044 	movi	r2,1
 8004c18:	12806e0e 	bge	r2,r10,8004dd4 <_dtoa_r+0x774>
 8004c1c:	d9000717 	ldw	r4,28(sp)
 8004c20:	dd801315 	stw	r22,76(sp)
 8004c24:	dc001115 	stw	r16,68(sp)
 8004c28:	2295883a 	add	r10,r4,r10
 8004c2c:	dcc01415 	stw	r19,80(sp)
 8004c30:	502d883a 	mov	r22,r10
 8004c34:	dcc01017 	ldw	r19,64(sp)
 8004c38:	b821883a 	mov	r16,r23
 8004c3c:	dc801015 	stw	r18,64(sp)
 8004c40:	dc800e17 	ldw	r18,56(sp)
 8004c44:	00000906 	br	8004c6c <_dtoa_r+0x60c>
 8004c48:	800cb100 	call	800cb10 <__subdf3>
 8004c4c:	1009883a 	mov	r4,r2
 8004c50:	180b883a 	mov	r5,r3
 8004c54:	900d883a 	mov	r6,r18
 8004c58:	980f883a 	mov	r7,r19
 8004c5c:	800ca300 	call	800ca30 <__ledf2>
 8004c60:	10040e16 	blt	r2,zero,8005c9c <_dtoa_r+0x163c>
 8004c64:	b821883a 	mov	r16,r23
 8004c68:	bd841026 	beq	r23,r22,8005cac <_dtoa_r+0x164c>
 8004c6c:	9009883a 	mov	r4,r18
 8004c70:	980b883a 	mov	r5,r19
 8004c74:	000d883a 	mov	r6,zero
 8004c78:	01d00934 	movhi	r7,16420
 8004c7c:	80014cc0 	call	80014cc <__muldf3>
 8004c80:	000d883a 	mov	r6,zero
 8004c84:	01d00934 	movhi	r7,16420
 8004c88:	8809883a 	mov	r4,r17
 8004c8c:	a00b883a 	mov	r5,r20
 8004c90:	1025883a 	mov	r18,r2
 8004c94:	1827883a 	mov	r19,r3
 8004c98:	80014cc0 	call	80014cc <__muldf3>
 8004c9c:	180b883a 	mov	r5,r3
 8004ca0:	1009883a 	mov	r4,r2
 8004ca4:	1823883a 	mov	r17,r3
 8004ca8:	1029883a 	mov	r20,r2
 8004cac:	8001d380 	call	8001d38 <__fixdfsi>
 8004cb0:	1009883a 	mov	r4,r2
 8004cb4:	102b883a 	mov	r21,r2
 8004cb8:	800d3e00 	call	800d3e0 <__floatsidf>
 8004cbc:	a009883a 	mov	r4,r20
 8004cc0:	880b883a 	mov	r5,r17
 8004cc4:	100d883a 	mov	r6,r2
 8004cc8:	180f883a 	mov	r7,r3
 8004ccc:	800cb100 	call	800cb10 <__subdf3>
 8004cd0:	ad400c04 	addi	r21,r21,48
 8004cd4:	1009883a 	mov	r4,r2
 8004cd8:	180b883a 	mov	r5,r3
 8004cdc:	900d883a 	mov	r6,r18
 8004ce0:	980f883a 	mov	r7,r19
 8004ce4:	85400005 	stb	r21,0(r16)
 8004ce8:	1023883a 	mov	r17,r2
 8004cec:	1829883a 	mov	r20,r3
 8004cf0:	800ca300 	call	800ca30 <__ledf2>
 8004cf4:	bdc00044 	addi	r23,r23,1
 8004cf8:	0009883a 	mov	r4,zero
 8004cfc:	014ffc34 	movhi	r5,16368
 8004d00:	880d883a 	mov	r6,r17
 8004d04:	a00f883a 	mov	r7,r20
 8004d08:	103fcf0e 	bge	r2,zero,8004c48 <__alt_data_end+0xfc004c48>
 8004d0c:	d9801217 	ldw	r6,72(sp)
 8004d10:	dc001117 	ldw	r16,68(sp)
 8004d14:	d9800515 	stw	r6,20(sp)
 8004d18:	8009883a 	mov	r4,r16
 8004d1c:	e00b883a 	mov	r5,fp
 8004d20:	8007d440 	call	8007d44 <_Bfree>
 8004d24:	d8c00517 	ldw	r3,20(sp)
 8004d28:	d9002317 	ldw	r4,140(sp)
 8004d2c:	d9802517 	ldw	r6,148(sp)
 8004d30:	b8000005 	stb	zero,0(r23)
 8004d34:	18800044 	addi	r2,r3,1
 8004d38:	20800015 	stw	r2,0(r4)
 8004d3c:	30027226 	beq	r6,zero,8005708 <_dtoa_r+0x10a8>
 8004d40:	35c00015 	stw	r23,0(r6)
 8004d44:	d8800717 	ldw	r2,28(sp)
 8004d48:	003e7406 	br	800471c <__alt_data_end+0xfc00471c>
 8004d4c:	00800434 	movhi	r2,16
 8004d50:	10bfffc4 	addi	r2,r2,-1
 8004d54:	a8aa703a 	and	r21,r21,r2
 8004d58:	a83e801e 	bne	r21,zero,800475c <__alt_data_end+0xfc00475c>
 8004d5c:	00820074 	movhi	r2,2049
 8004d60:	1080d904 	addi	r2,r2,868
 8004d64:	003e7f06 	br	8004764 <__alt_data_end+0xfc004764>
 8004d68:	10c00204 	addi	r3,r2,8
 8004d6c:	003e8206 	br	8004778 <__alt_data_end+0xfc004778>
 8004d70:	01400434 	movhi	r5,16
 8004d74:	297fffc4 	addi	r5,r5,-1
 8004d78:	994a703a 	and	r5,r19,r5
 8004d7c:	9009883a 	mov	r4,r18
 8004d80:	8c7f0044 	addi	r17,r17,-1023
 8004d84:	294ffc34 	orhi	r5,r5,16368
 8004d88:	dd000217 	ldw	r20,8(sp)
 8004d8c:	d8000f15 	stw	zero,60(sp)
 8004d90:	003e9f06 	br	8004810 <__alt_data_end+0xfc004810>
 8004d94:	00820074 	movhi	r2,2049
 8004d98:	1080d004 	addi	r2,r2,832
 8004d9c:	003e5f06 	br	800471c <__alt_data_end+0xfc00471c>
 8004da0:	80001115 	stw	zero,68(r16)
 8004da4:	8009883a 	mov	r4,r16
 8004da8:	000b883a 	mov	r5,zero
 8004dac:	8007c9c0 	call	8007c9c <_Balloc>
 8004db0:	01bfffc4 	movi	r6,-1
 8004db4:	d8800715 	stw	r2,28(sp)
 8004db8:	80801015 	stw	r2,64(r16)
 8004dbc:	00800044 	movi	r2,1
 8004dc0:	d9800615 	stw	r6,24(sp)
 8004dc4:	d8800b15 	stw	r2,44(sp)
 8004dc8:	d8002215 	stw	zero,136(sp)
 8004dcc:	d9800d15 	stw	r6,52(sp)
 8004dd0:	d8000315 	stw	zero,12(sp)
 8004dd4:	d8800117 	ldw	r2,4(sp)
 8004dd8:	10008e16 	blt	r2,zero,8005014 <_dtoa_r+0x9b4>
 8004ddc:	d9000517 	ldw	r4,20(sp)
 8004de0:	00c00384 	movi	r3,14
 8004de4:	19008b16 	blt	r3,r4,8005014 <_dtoa_r+0x9b4>
 8004de8:	200490fa 	slli	r2,r4,3
 8004dec:	00c20074 	movhi	r3,2049
 8004df0:	d9802217 	ldw	r6,136(sp)
 8004df4:	18c0f804 	addi	r3,r3,992
 8004df8:	1885883a 	add	r2,r3,r2
 8004dfc:	14400017 	ldw	r17,0(r2)
 8004e00:	15000117 	ldw	r20,4(r2)
 8004e04:	3001c716 	blt	r6,zero,8005524 <_dtoa_r+0xec4>
 8004e08:	880d883a 	mov	r6,r17
 8004e0c:	a00f883a 	mov	r7,r20
 8004e10:	9009883a 	mov	r4,r18
 8004e14:	980b883a 	mov	r5,r19
 8004e18:	8000b4c0 	call	8000b4c <__divdf3>
 8004e1c:	180b883a 	mov	r5,r3
 8004e20:	1009883a 	mov	r4,r2
 8004e24:	8001d380 	call	8001d38 <__fixdfsi>
 8004e28:	1009883a 	mov	r4,r2
 8004e2c:	102d883a 	mov	r22,r2
 8004e30:	800d3e00 	call	800d3e0 <__floatsidf>
 8004e34:	1009883a 	mov	r4,r2
 8004e38:	180b883a 	mov	r5,r3
 8004e3c:	880d883a 	mov	r6,r17
 8004e40:	a00f883a 	mov	r7,r20
 8004e44:	80014cc0 	call	80014cc <__muldf3>
 8004e48:	9009883a 	mov	r4,r18
 8004e4c:	980b883a 	mov	r5,r19
 8004e50:	100d883a 	mov	r6,r2
 8004e54:	180f883a 	mov	r7,r3
 8004e58:	800cb100 	call	800cb10 <__subdf3>
 8004e5c:	d9000717 	ldw	r4,28(sp)
 8004e60:	d9800617 	ldw	r6,24(sp)
 8004e64:	180b883a 	mov	r5,r3
 8004e68:	b0c00c04 	addi	r3,r22,48
 8004e6c:	20c00005 	stb	r3,0(r4)
 8004e70:	25c00044 	addi	r23,r4,1
 8004e74:	01000044 	movi	r4,1
 8004e78:	1011883a 	mov	r8,r2
 8004e7c:	2807883a 	mov	r3,r5
 8004e80:	31003d26 	beq	r6,r4,8004f78 <_dtoa_r+0x918>
 8004e84:	000d883a 	mov	r6,zero
 8004e88:	01d00934 	movhi	r7,16420
 8004e8c:	1009883a 	mov	r4,r2
 8004e90:	80014cc0 	call	80014cc <__muldf3>
 8004e94:	1009883a 	mov	r4,r2
 8004e98:	180b883a 	mov	r5,r3
 8004e9c:	000d883a 	mov	r6,zero
 8004ea0:	000f883a 	mov	r7,zero
 8004ea4:	1027883a 	mov	r19,r2
 8004ea8:	182b883a 	mov	r21,r3
 8004eac:	800c8cc0 	call	800c8cc <__eqdf2>
 8004eb0:	103f9926 	beq	r2,zero,8004d18 <__alt_data_end+0xfc004d18>
 8004eb4:	d8c00617 	ldw	r3,24(sp)
 8004eb8:	d9000717 	ldw	r4,28(sp)
 8004ebc:	b825883a 	mov	r18,r23
 8004ec0:	18bfffc4 	addi	r2,r3,-1
 8004ec4:	20ad883a 	add	r22,r4,r2
 8004ec8:	dc000315 	stw	r16,12(sp)
 8004ecc:	00000a06 	br	8004ef8 <_dtoa_r+0x898>
 8004ed0:	80014cc0 	call	80014cc <__muldf3>
 8004ed4:	1009883a 	mov	r4,r2
 8004ed8:	180b883a 	mov	r5,r3
 8004edc:	000d883a 	mov	r6,zero
 8004ee0:	000f883a 	mov	r7,zero
 8004ee4:	1027883a 	mov	r19,r2
 8004ee8:	182b883a 	mov	r21,r3
 8004eec:	b825883a 	mov	r18,r23
 8004ef0:	800c8cc0 	call	800c8cc <__eqdf2>
 8004ef4:	10022626 	beq	r2,zero,8005790 <_dtoa_r+0x1130>
 8004ef8:	880d883a 	mov	r6,r17
 8004efc:	a00f883a 	mov	r7,r20
 8004f00:	9809883a 	mov	r4,r19
 8004f04:	a80b883a 	mov	r5,r21
 8004f08:	8000b4c0 	call	8000b4c <__divdf3>
 8004f0c:	180b883a 	mov	r5,r3
 8004f10:	1009883a 	mov	r4,r2
 8004f14:	8001d380 	call	8001d38 <__fixdfsi>
 8004f18:	1009883a 	mov	r4,r2
 8004f1c:	1021883a 	mov	r16,r2
 8004f20:	800d3e00 	call	800d3e0 <__floatsidf>
 8004f24:	1009883a 	mov	r4,r2
 8004f28:	180b883a 	mov	r5,r3
 8004f2c:	880d883a 	mov	r6,r17
 8004f30:	a00f883a 	mov	r7,r20
 8004f34:	80014cc0 	call	80014cc <__muldf3>
 8004f38:	9809883a 	mov	r4,r19
 8004f3c:	a80b883a 	mov	r5,r21
 8004f40:	100d883a 	mov	r6,r2
 8004f44:	180f883a 	mov	r7,r3
 8004f48:	800cb100 	call	800cb10 <__subdf3>
 8004f4c:	82000c04 	addi	r8,r16,48
 8004f50:	92000005 	stb	r8,0(r18)
 8004f54:	1009883a 	mov	r4,r2
 8004f58:	180b883a 	mov	r5,r3
 8004f5c:	000d883a 	mov	r6,zero
 8004f60:	01d00934 	movhi	r7,16420
 8004f64:	1011883a 	mov	r8,r2
 8004f68:	bdc00044 	addi	r23,r23,1
 8004f6c:	95bfd81e 	bne	r18,r22,8004ed0 <__alt_data_end+0xfc004ed0>
 8004f70:	802d883a 	mov	r22,r16
 8004f74:	dc000317 	ldw	r16,12(sp)
 8004f78:	4009883a 	mov	r4,r8
 8004f7c:	180b883a 	mov	r5,r3
 8004f80:	400d883a 	mov	r6,r8
 8004f84:	180f883a 	mov	r7,r3
 8004f88:	800c0300 	call	800c030 <__adddf3>
 8004f8c:	8809883a 	mov	r4,r17
 8004f90:	a00b883a 	mov	r5,r20
 8004f94:	100d883a 	mov	r6,r2
 8004f98:	180f883a 	mov	r7,r3
 8004f9c:	1027883a 	mov	r19,r2
 8004fa0:	1825883a 	mov	r18,r3
 8004fa4:	800ca300 	call	800ca30 <__ledf2>
 8004fa8:	10000816 	blt	r2,zero,8004fcc <_dtoa_r+0x96c>
 8004fac:	8809883a 	mov	r4,r17
 8004fb0:	a00b883a 	mov	r5,r20
 8004fb4:	980d883a 	mov	r6,r19
 8004fb8:	900f883a 	mov	r7,r18
 8004fbc:	800c8cc0 	call	800c8cc <__eqdf2>
 8004fc0:	103f551e 	bne	r2,zero,8004d18 <__alt_data_end+0xfc004d18>
 8004fc4:	b580004c 	andi	r22,r22,1
 8004fc8:	b03f5326 	beq	r22,zero,8004d18 <__alt_data_end+0xfc004d18>
 8004fcc:	bd7fffc3 	ldbu	r21,-1(r23)
 8004fd0:	b8bfffc4 	addi	r2,r23,-1
 8004fd4:	1007883a 	mov	r3,r2
 8004fd8:	01400e44 	movi	r5,57
 8004fdc:	d9800717 	ldw	r6,28(sp)
 8004fe0:	00000506 	br	8004ff8 <_dtoa_r+0x998>
 8004fe4:	18ffffc4 	addi	r3,r3,-1
 8004fe8:	30825e26 	beq	r6,r2,8005964 <_dtoa_r+0x1304>
 8004fec:	1d400003 	ldbu	r21,0(r3)
 8004ff0:	102f883a 	mov	r23,r2
 8004ff4:	10bfffc4 	addi	r2,r2,-1
 8004ff8:	a9003fcc 	andi	r4,r21,255
 8004ffc:	2100201c 	xori	r4,r4,128
 8005000:	213fe004 	addi	r4,r4,-128
 8005004:	217ff726 	beq	r4,r5,8004fe4 <__alt_data_end+0xfc004fe4>
 8005008:	aa000044 	addi	r8,r21,1
 800500c:	12000005 	stb	r8,0(r2)
 8005010:	003f4106 	br	8004d18 <__alt_data_end+0xfc004d18>
 8005014:	d8c00b17 	ldw	r3,44(sp)
 8005018:	18006726 	beq	r3,zero,80051b8 <_dtoa_r+0xb58>
 800501c:	d9000317 	ldw	r4,12(sp)
 8005020:	00c00044 	movi	r3,1
 8005024:	19016a0e 	bge	r3,r4,80055d0 <_dtoa_r+0xf70>
 8005028:	d8800617 	ldw	r2,24(sp)
 800502c:	d8c00917 	ldw	r3,36(sp)
 8005030:	157fffc4 	addi	r21,r2,-1
 8005034:	1d420716 	blt	r3,r21,8005854 <_dtoa_r+0x11f4>
 8005038:	1d6bc83a 	sub	r21,r3,r21
 800503c:	d8800617 	ldw	r2,24(sp)
 8005040:	1002c716 	blt	r2,zero,8005b60 <_dtoa_r+0x1500>
 8005044:	dd000817 	ldw	r20,32(sp)
 8005048:	d8800617 	ldw	r2,24(sp)
 800504c:	d9800817 	ldw	r6,32(sp)
 8005050:	8009883a 	mov	r4,r16
 8005054:	01400044 	movi	r5,1
 8005058:	308d883a 	add	r6,r6,r2
 800505c:	d9800815 	stw	r6,32(sp)
 8005060:	b0ad883a 	add	r22,r22,r2
 8005064:	80080c40 	call	80080c4 <__i2b>
 8005068:	1023883a 	mov	r17,r2
 800506c:	a0000826 	beq	r20,zero,8005090 <_dtoa_r+0xa30>
 8005070:	0580070e 	bge	zero,r22,8005090 <_dtoa_r+0xa30>
 8005074:	b005883a 	mov	r2,r22
 8005078:	a5812016 	blt	r20,r22,80054fc <_dtoa_r+0xe9c>
 800507c:	d8c00817 	ldw	r3,32(sp)
 8005080:	a0a9c83a 	sub	r20,r20,r2
 8005084:	b0adc83a 	sub	r22,r22,r2
 8005088:	1887c83a 	sub	r3,r3,r2
 800508c:	d8c00815 	stw	r3,32(sp)
 8005090:	d9000917 	ldw	r4,36(sp)
 8005094:	0100140e 	bge	zero,r4,80050e8 <_dtoa_r+0xa88>
 8005098:	d9800b17 	ldw	r6,44(sp)
 800509c:	3001e526 	beq	r6,zero,8005834 <_dtoa_r+0x11d4>
 80050a0:	05400e0e 	bge	zero,r21,80050dc <_dtoa_r+0xa7c>
 80050a4:	880b883a 	mov	r5,r17
 80050a8:	8009883a 	mov	r4,r16
 80050ac:	a80d883a 	mov	r6,r21
 80050b0:	80083900 	call	8008390 <__pow5mult>
 80050b4:	e00d883a 	mov	r6,fp
 80050b8:	8009883a 	mov	r4,r16
 80050bc:	100b883a 	mov	r5,r2
 80050c0:	1023883a 	mov	r17,r2
 80050c4:	80081000 	call	8008100 <__multiply>
 80050c8:	102f883a 	mov	r23,r2
 80050cc:	e00b883a 	mov	r5,fp
 80050d0:	8009883a 	mov	r4,r16
 80050d4:	8007d440 	call	8007d44 <_Bfree>
 80050d8:	b839883a 	mov	fp,r23
 80050dc:	d8800917 	ldw	r2,36(sp)
 80050e0:	154dc83a 	sub	r6,r2,r21
 80050e4:	3001281e 	bne	r6,zero,8005588 <_dtoa_r+0xf28>
 80050e8:	05c00044 	movi	r23,1
 80050ec:	8009883a 	mov	r4,r16
 80050f0:	b80b883a 	mov	r5,r23
 80050f4:	80080c40 	call	80080c4 <__i2b>
 80050f8:	d8c00a17 	ldw	r3,40(sp)
 80050fc:	102b883a 	mov	r21,r2
 8005100:	00c0310e 	bge	zero,r3,80051c8 <_dtoa_r+0xb68>
 8005104:	8009883a 	mov	r4,r16
 8005108:	100b883a 	mov	r5,r2
 800510c:	180d883a 	mov	r6,r3
 8005110:	80083900 	call	8008390 <__pow5mult>
 8005114:	d9000317 	ldw	r4,12(sp)
 8005118:	102b883a 	mov	r21,r2
 800511c:	b9011f0e 	bge	r23,r4,800559c <_dtoa_r+0xf3c>
 8005120:	0027883a 	mov	r19,zero
 8005124:	a8800417 	ldw	r2,16(r21)
 8005128:	10800104 	addi	r2,r2,4
 800512c:	1085883a 	add	r2,r2,r2
 8005130:	1085883a 	add	r2,r2,r2
 8005134:	a885883a 	add	r2,r21,r2
 8005138:	11000017 	ldw	r4,0(r2)
 800513c:	8007fac0 	call	8007fac <__hi0bits>
 8005140:	00c00804 	movi	r3,32
 8005144:	1885c83a 	sub	r2,r3,r2
 8005148:	00002506 	br	80051e0 <_dtoa_r+0xb80>
 800514c:	01800044 	movi	r6,1
 8005150:	d9800c15 	stw	r6,48(sp)
 8005154:	003dec06 	br	8004908 <__alt_data_end+0xfc004908>
 8005158:	d8c00817 	ldw	r3,32(sp)
 800515c:	d9000517 	ldw	r4,20(sp)
 8005160:	d8000a15 	stw	zero,40(sp)
 8005164:	1907c83a 	sub	r3,r3,r4
 8005168:	010dc83a 	sub	r6,zero,r4
 800516c:	d8c00815 	stw	r3,32(sp)
 8005170:	d9800915 	stw	r6,36(sp)
 8005174:	003ded06 	br	800492c <__alt_data_end+0xfc00492c>
 8005178:	05adc83a 	sub	r22,zero,r22
 800517c:	dd800815 	stw	r22,32(sp)
 8005180:	002d883a 	mov	r22,zero
 8005184:	003de406 	br	8004918 <__alt_data_end+0xfc004918>
 8005188:	d9000517 	ldw	r4,20(sp)
 800518c:	800d3e00 	call	800d3e0 <__floatsidf>
 8005190:	1009883a 	mov	r4,r2
 8005194:	180b883a 	mov	r5,r3
 8005198:	b00d883a 	mov	r6,r22
 800519c:	a80f883a 	mov	r7,r21
 80051a0:	800c8cc0 	call	800c8cc <__eqdf2>
 80051a4:	103dc726 	beq	r2,zero,80048c4 <__alt_data_end+0xfc0048c4>
 80051a8:	d8800517 	ldw	r2,20(sp)
 80051ac:	10bfffc4 	addi	r2,r2,-1
 80051b0:	d8800515 	stw	r2,20(sp)
 80051b4:	003dc306 	br	80048c4 <__alt_data_end+0xfc0048c4>
 80051b8:	dd400917 	ldw	r21,36(sp)
 80051bc:	dd000817 	ldw	r20,32(sp)
 80051c0:	0023883a 	mov	r17,zero
 80051c4:	003fa906 	br	800506c <__alt_data_end+0xfc00506c>
 80051c8:	d9800317 	ldw	r6,12(sp)
 80051cc:	b981670e 	bge	r23,r6,800576c <_dtoa_r+0x110c>
 80051d0:	0027883a 	mov	r19,zero
 80051d4:	d8c00a17 	ldw	r3,40(sp)
 80051d8:	183fd21e 	bne	r3,zero,8005124 <__alt_data_end+0xfc005124>
 80051dc:	00800044 	movi	r2,1
 80051e0:	1585883a 	add	r2,r2,r22
 80051e4:	108007cc 	andi	r2,r2,31
 80051e8:	10005f26 	beq	r2,zero,8005368 <_dtoa_r+0xd08>
 80051ec:	00c00804 	movi	r3,32
 80051f0:	1887c83a 	sub	r3,r3,r2
 80051f4:	01000104 	movi	r4,4
 80051f8:	20c2dd0e 	bge	r4,r3,8005d70 <_dtoa_r+0x1710>
 80051fc:	d9000817 	ldw	r4,32(sp)
 8005200:	00c00704 	movi	r3,28
 8005204:	1885c83a 	sub	r2,r3,r2
 8005208:	2089883a 	add	r4,r4,r2
 800520c:	d9000815 	stw	r4,32(sp)
 8005210:	a0a9883a 	add	r20,r20,r2
 8005214:	b0ad883a 	add	r22,r22,r2
 8005218:	d8800817 	ldw	r2,32(sp)
 800521c:	0080050e 	bge	zero,r2,8005234 <_dtoa_r+0xbd4>
 8005220:	e00b883a 	mov	r5,fp
 8005224:	8009883a 	mov	r4,r16
 8005228:	100d883a 	mov	r6,r2
 800522c:	80084d00 	call	80084d0 <__lshift>
 8005230:	1039883a 	mov	fp,r2
 8005234:	0580050e 	bge	zero,r22,800524c <_dtoa_r+0xbec>
 8005238:	a80b883a 	mov	r5,r21
 800523c:	8009883a 	mov	r4,r16
 8005240:	b00d883a 	mov	r6,r22
 8005244:	80084d00 	call	80084d0 <__lshift>
 8005248:	102b883a 	mov	r21,r2
 800524c:	d8c00c17 	ldw	r3,48(sp)
 8005250:	1801161e 	bne	r3,zero,80056ac <_dtoa_r+0x104c>
 8005254:	d8c00617 	ldw	r3,24(sp)
 8005258:	00c12d0e 	bge	zero,r3,8005710 <_dtoa_r+0x10b0>
 800525c:	d8c00b17 	ldw	r3,44(sp)
 8005260:	1800571e 	bne	r3,zero,80053c0 <_dtoa_r+0xd60>
 8005264:	dc800717 	ldw	r18,28(sp)
 8005268:	dcc00617 	ldw	r19,24(sp)
 800526c:	9029883a 	mov	r20,r18
 8005270:	00000206 	br	800527c <_dtoa_r+0xc1c>
 8005274:	8007d6c0 	call	8007d6c <__multadd>
 8005278:	1039883a 	mov	fp,r2
 800527c:	e009883a 	mov	r4,fp
 8005280:	a80b883a 	mov	r5,r21
 8005284:	80044380 	call	8004438 <quorem>
 8005288:	10800c04 	addi	r2,r2,48
 800528c:	90800005 	stb	r2,0(r18)
 8005290:	94800044 	addi	r18,r18,1
 8005294:	9507c83a 	sub	r3,r18,r20
 8005298:	8009883a 	mov	r4,r16
 800529c:	e00b883a 	mov	r5,fp
 80052a0:	01800284 	movi	r6,10
 80052a4:	000f883a 	mov	r7,zero
 80052a8:	1cfff216 	blt	r3,r19,8005274 <__alt_data_end+0xfc005274>
 80052ac:	1011883a 	mov	r8,r2
 80052b0:	d8800617 	ldw	r2,24(sp)
 80052b4:	00822e0e 	bge	zero,r2,8005b70 <_dtoa_r+0x1510>
 80052b8:	d9000717 	ldw	r4,28(sp)
 80052bc:	0025883a 	mov	r18,zero
 80052c0:	20af883a 	add	r23,r4,r2
 80052c4:	e00b883a 	mov	r5,fp
 80052c8:	01800044 	movi	r6,1
 80052cc:	8009883a 	mov	r4,r16
 80052d0:	da001715 	stw	r8,92(sp)
 80052d4:	80084d00 	call	80084d0 <__lshift>
 80052d8:	1009883a 	mov	r4,r2
 80052dc:	a80b883a 	mov	r5,r21
 80052e0:	1039883a 	mov	fp,r2
 80052e4:	80086180 	call	8008618 <__mcmp>
 80052e8:	da001717 	ldw	r8,92(sp)
 80052ec:	00816e0e 	bge	zero,r2,80058a8 <_dtoa_r+0x1248>
 80052f0:	b93fffc3 	ldbu	r4,-1(r23)
 80052f4:	b8bfffc4 	addi	r2,r23,-1
 80052f8:	1007883a 	mov	r3,r2
 80052fc:	01800e44 	movi	r6,57
 8005300:	d9c00717 	ldw	r7,28(sp)
 8005304:	00000506 	br	800531c <_dtoa_r+0xcbc>
 8005308:	18ffffc4 	addi	r3,r3,-1
 800530c:	38811926 	beq	r7,r2,8005774 <_dtoa_r+0x1114>
 8005310:	19000003 	ldbu	r4,0(r3)
 8005314:	102f883a 	mov	r23,r2
 8005318:	10bfffc4 	addi	r2,r2,-1
 800531c:	21403fcc 	andi	r5,r4,255
 8005320:	2940201c 	xori	r5,r5,128
 8005324:	297fe004 	addi	r5,r5,-128
 8005328:	29bff726 	beq	r5,r6,8005308 <__alt_data_end+0xfc005308>
 800532c:	21000044 	addi	r4,r4,1
 8005330:	11000005 	stb	r4,0(r2)
 8005334:	8009883a 	mov	r4,r16
 8005338:	a80b883a 	mov	r5,r21
 800533c:	8007d440 	call	8007d44 <_Bfree>
 8005340:	883e7526 	beq	r17,zero,8004d18 <__alt_data_end+0xfc004d18>
 8005344:	90000426 	beq	r18,zero,8005358 <_dtoa_r+0xcf8>
 8005348:	94400326 	beq	r18,r17,8005358 <_dtoa_r+0xcf8>
 800534c:	8009883a 	mov	r4,r16
 8005350:	900b883a 	mov	r5,r18
 8005354:	8007d440 	call	8007d44 <_Bfree>
 8005358:	8009883a 	mov	r4,r16
 800535c:	880b883a 	mov	r5,r17
 8005360:	8007d440 	call	8007d44 <_Bfree>
 8005364:	003e6c06 	br	8004d18 <__alt_data_end+0xfc004d18>
 8005368:	00800704 	movi	r2,28
 800536c:	d9800817 	ldw	r6,32(sp)
 8005370:	a0a9883a 	add	r20,r20,r2
 8005374:	b0ad883a 	add	r22,r22,r2
 8005378:	308d883a 	add	r6,r6,r2
 800537c:	d9800815 	stw	r6,32(sp)
 8005380:	003fa506 	br	8005218 <__alt_data_end+0xfc005218>
 8005384:	013efb84 	movi	r4,-1042
 8005388:	246bc83a 	sub	r21,r4,r17
 800538c:	9548983a 	sll	r4,r18,r21
 8005390:	003d1806 	br	80047f4 <__alt_data_end+0xfc0047f4>
 8005394:	d8000c15 	stw	zero,48(sp)
 8005398:	003d5b06 	br	8004908 <__alt_data_end+0xfc004908>
 800539c:	880b883a 	mov	r5,r17
 80053a0:	8009883a 	mov	r4,r16
 80053a4:	01800284 	movi	r6,10
 80053a8:	000f883a 	mov	r7,zero
 80053ac:	8007d6c0 	call	8007d6c <__multadd>
 80053b0:	1023883a 	mov	r17,r2
 80053b4:	d8800d17 	ldw	r2,52(sp)
 80053b8:	0082550e 	bge	zero,r2,8005d10 <_dtoa_r+0x16b0>
 80053bc:	d8800615 	stw	r2,24(sp)
 80053c0:	0500050e 	bge	zero,r20,80053d8 <_dtoa_r+0xd78>
 80053c4:	880b883a 	mov	r5,r17
 80053c8:	8009883a 	mov	r4,r16
 80053cc:	a00d883a 	mov	r6,r20
 80053d0:	80084d00 	call	80084d0 <__lshift>
 80053d4:	1023883a 	mov	r17,r2
 80053d8:	98016a1e 	bne	r19,zero,8005984 <_dtoa_r+0x1324>
 80053dc:	8829883a 	mov	r20,r17
 80053e0:	d9000617 	ldw	r4,24(sp)
 80053e4:	dcc00717 	ldw	r19,28(sp)
 80053e8:	9480004c 	andi	r18,r18,1
 80053ec:	20bfffc4 	addi	r2,r4,-1
 80053f0:	9885883a 	add	r2,r19,r2
 80053f4:	d8800415 	stw	r2,16(sp)
 80053f8:	dc800615 	stw	r18,24(sp)
 80053fc:	e009883a 	mov	r4,fp
 8005400:	a80b883a 	mov	r5,r21
 8005404:	80044380 	call	8004438 <quorem>
 8005408:	e009883a 	mov	r4,fp
 800540c:	880b883a 	mov	r5,r17
 8005410:	102f883a 	mov	r23,r2
 8005414:	80086180 	call	8008618 <__mcmp>
 8005418:	8009883a 	mov	r4,r16
 800541c:	a80b883a 	mov	r5,r21
 8005420:	a00d883a 	mov	r6,r20
 8005424:	102d883a 	mov	r22,r2
 8005428:	80086780 	call	8008678 <__mdiff>
 800542c:	1007883a 	mov	r3,r2
 8005430:	10800317 	ldw	r2,12(r2)
 8005434:	bc800c04 	addi	r18,r23,48
 8005438:	1000971e 	bne	r2,zero,8005698 <_dtoa_r+0x1038>
 800543c:	180b883a 	mov	r5,r3
 8005440:	e009883a 	mov	r4,fp
 8005444:	d8c01515 	stw	r3,84(sp)
 8005448:	80086180 	call	8008618 <__mcmp>
 800544c:	d8c01517 	ldw	r3,84(sp)
 8005450:	8009883a 	mov	r4,r16
 8005454:	d8801515 	stw	r2,84(sp)
 8005458:	180b883a 	mov	r5,r3
 800545c:	8007d440 	call	8007d44 <_Bfree>
 8005460:	d8801517 	ldw	r2,84(sp)
 8005464:	1000041e 	bne	r2,zero,8005478 <_dtoa_r+0xe18>
 8005468:	d9800317 	ldw	r6,12(sp)
 800546c:	3000021e 	bne	r6,zero,8005478 <_dtoa_r+0xe18>
 8005470:	d8c00617 	ldw	r3,24(sp)
 8005474:	18007626 	beq	r3,zero,8005650 <_dtoa_r+0xff0>
 8005478:	b0005b16 	blt	r22,zero,80055e8 <_dtoa_r+0xf88>
 800547c:	b000041e 	bne	r22,zero,8005490 <_dtoa_r+0xe30>
 8005480:	d9000317 	ldw	r4,12(sp)
 8005484:	2000021e 	bne	r4,zero,8005490 <_dtoa_r+0xe30>
 8005488:	d8c00617 	ldw	r3,24(sp)
 800548c:	18005626 	beq	r3,zero,80055e8 <_dtoa_r+0xf88>
 8005490:	00814d16 	blt	zero,r2,80059c8 <_dtoa_r+0x1368>
 8005494:	d8c00417 	ldw	r3,16(sp)
 8005498:	9d800044 	addi	r22,r19,1
 800549c:	9c800005 	stb	r18,0(r19)
 80054a0:	b02f883a 	mov	r23,r22
 80054a4:	98c14c26 	beq	r19,r3,80059d8 <_dtoa_r+0x1378>
 80054a8:	e00b883a 	mov	r5,fp
 80054ac:	8009883a 	mov	r4,r16
 80054b0:	01800284 	movi	r6,10
 80054b4:	000f883a 	mov	r7,zero
 80054b8:	8007d6c0 	call	8007d6c <__multadd>
 80054bc:	1039883a 	mov	fp,r2
 80054c0:	8d006d26 	beq	r17,r20,8005678 <_dtoa_r+0x1018>
 80054c4:	880b883a 	mov	r5,r17
 80054c8:	01800284 	movi	r6,10
 80054cc:	000f883a 	mov	r7,zero
 80054d0:	8009883a 	mov	r4,r16
 80054d4:	8007d6c0 	call	8007d6c <__multadd>
 80054d8:	a00b883a 	mov	r5,r20
 80054dc:	8009883a 	mov	r4,r16
 80054e0:	01800284 	movi	r6,10
 80054e4:	000f883a 	mov	r7,zero
 80054e8:	1023883a 	mov	r17,r2
 80054ec:	8007d6c0 	call	8007d6c <__multadd>
 80054f0:	1029883a 	mov	r20,r2
 80054f4:	b027883a 	mov	r19,r22
 80054f8:	003fc006 	br	80053fc <__alt_data_end+0xfc0053fc>
 80054fc:	a005883a 	mov	r2,r20
 8005500:	003ede06 	br	800507c <__alt_data_end+0xfc00507c>
 8005504:	01000044 	movi	r4,1
 8005508:	d9000b15 	stw	r4,44(sp)
 800550c:	d9802217 	ldw	r6,136(sp)
 8005510:	0180dc0e 	bge	zero,r6,8005884 <_dtoa_r+0x1224>
 8005514:	3023883a 	mov	r17,r6
 8005518:	d9800d15 	stw	r6,52(sp)
 800551c:	d9800615 	stw	r6,24(sp)
 8005520:	003d1e06 	br	800499c <__alt_data_end+0xfc00499c>
 8005524:	d8800617 	ldw	r2,24(sp)
 8005528:	00be3716 	blt	zero,r2,8004e08 <__alt_data_end+0xfc004e08>
 800552c:	1000be1e 	bne	r2,zero,8005828 <_dtoa_r+0x11c8>
 8005530:	8809883a 	mov	r4,r17
 8005534:	a00b883a 	mov	r5,r20
 8005538:	000d883a 	mov	r6,zero
 800553c:	01d00534 	movhi	r7,16404
 8005540:	80014cc0 	call	80014cc <__muldf3>
 8005544:	1009883a 	mov	r4,r2
 8005548:	180b883a 	mov	r5,r3
 800554c:	900d883a 	mov	r6,r18
 8005550:	980f883a 	mov	r7,r19
 8005554:	800c9500 	call	800c950 <__gedf2>
 8005558:	002b883a 	mov	r21,zero
 800555c:	0023883a 	mov	r17,zero
 8005560:	10007a16 	blt	r2,zero,800574c <_dtoa_r+0x10ec>
 8005564:	d9002217 	ldw	r4,136(sp)
 8005568:	ddc00717 	ldw	r23,28(sp)
 800556c:	0108303a 	nor	r4,zero,r4
 8005570:	d9000515 	stw	r4,20(sp)
 8005574:	8009883a 	mov	r4,r16
 8005578:	a80b883a 	mov	r5,r21
 800557c:	8007d440 	call	8007d44 <_Bfree>
 8005580:	883f751e 	bne	r17,zero,8005358 <__alt_data_end+0xfc005358>
 8005584:	003de406 	br	8004d18 <__alt_data_end+0xfc004d18>
 8005588:	e00b883a 	mov	r5,fp
 800558c:	8009883a 	mov	r4,r16
 8005590:	80083900 	call	8008390 <__pow5mult>
 8005594:	1039883a 	mov	fp,r2
 8005598:	003ed306 	br	80050e8 <__alt_data_end+0xfc0050e8>
 800559c:	903ee01e 	bne	r18,zero,8005120 <__alt_data_end+0xfc005120>
 80055a0:	00800434 	movhi	r2,16
 80055a4:	10bfffc4 	addi	r2,r2,-1
 80055a8:	9884703a 	and	r2,r19,r2
 80055ac:	103f081e 	bne	r2,zero,80051d0 <__alt_data_end+0xfc0051d0>
 80055b0:	9cdffc2c 	andhi	r19,r19,32752
 80055b4:	983f0626 	beq	r19,zero,80051d0 <__alt_data_end+0xfc0051d0>
 80055b8:	d8800817 	ldw	r2,32(sp)
 80055bc:	b5800044 	addi	r22,r22,1
 80055c0:	04c00044 	movi	r19,1
 80055c4:	10800044 	addi	r2,r2,1
 80055c8:	d8800815 	stw	r2,32(sp)
 80055cc:	003f0106 	br	80051d4 <__alt_data_end+0xfc0051d4>
 80055d0:	d9800f17 	ldw	r6,60(sp)
 80055d4:	30016826 	beq	r6,zero,8005b78 <_dtoa_r+0x1518>
 80055d8:	10810cc4 	addi	r2,r2,1075
 80055dc:	dd400917 	ldw	r21,36(sp)
 80055e0:	dd000817 	ldw	r20,32(sp)
 80055e4:	003e9906 	br	800504c <__alt_data_end+0xfc00504c>
 80055e8:	9011883a 	mov	r8,r18
 80055ec:	4007883a 	mov	r3,r8
 80055f0:	e02d883a 	mov	r22,fp
 80055f4:	0080100e 	bge	zero,r2,8005638 <_dtoa_r+0xfd8>
 80055f8:	01800044 	movi	r6,1
 80055fc:	8009883a 	mov	r4,r16
 8005600:	e00b883a 	mov	r5,fp
 8005604:	da001515 	stw	r8,84(sp)
 8005608:	da001715 	stw	r8,92(sp)
 800560c:	80084d00 	call	80084d0 <__lshift>
 8005610:	1009883a 	mov	r4,r2
 8005614:	a80b883a 	mov	r5,r21
 8005618:	102d883a 	mov	r22,r2
 800561c:	80086180 	call	8008618 <__mcmp>
 8005620:	d8c01517 	ldw	r3,84(sp)
 8005624:	da001717 	ldw	r8,92(sp)
 8005628:	0081a50e 	bge	zero,r2,8005cc0 <_dtoa_r+0x1660>
 800562c:	00800e44 	movi	r2,57
 8005630:	40817b26 	beq	r8,r2,8005c20 <_dtoa_r+0x15c0>
 8005634:	40c00044 	addi	r3,r8,1
 8005638:	8825883a 	mov	r18,r17
 800563c:	9dc00044 	addi	r23,r19,1
 8005640:	98c00005 	stb	r3,0(r19)
 8005644:	a023883a 	mov	r17,r20
 8005648:	b039883a 	mov	fp,r22
 800564c:	003f3906 	br	8005334 <__alt_data_end+0xfc005334>
 8005650:	00800e44 	movi	r2,57
 8005654:	9011883a 	mov	r8,r18
 8005658:	90817226 	beq	r18,r2,8005c24 <_dtoa_r+0x15c4>
 800565c:	0580010e 	bge	zero,r22,8005664 <_dtoa_r+0x1004>
 8005660:	ba000c44 	addi	r8,r23,49
 8005664:	8825883a 	mov	r18,r17
 8005668:	9dc00044 	addi	r23,r19,1
 800566c:	9a000005 	stb	r8,0(r19)
 8005670:	a023883a 	mov	r17,r20
 8005674:	003f2f06 	br	8005334 <__alt_data_end+0xfc005334>
 8005678:	880b883a 	mov	r5,r17
 800567c:	8009883a 	mov	r4,r16
 8005680:	01800284 	movi	r6,10
 8005684:	000f883a 	mov	r7,zero
 8005688:	8007d6c0 	call	8007d6c <__multadd>
 800568c:	1023883a 	mov	r17,r2
 8005690:	1029883a 	mov	r20,r2
 8005694:	003f9706 	br	80054f4 <__alt_data_end+0xfc0054f4>
 8005698:	8009883a 	mov	r4,r16
 800569c:	180b883a 	mov	r5,r3
 80056a0:	8007d440 	call	8007d44 <_Bfree>
 80056a4:	00800044 	movi	r2,1
 80056a8:	003f7306 	br	8005478 <__alt_data_end+0xfc005478>
 80056ac:	e009883a 	mov	r4,fp
 80056b0:	a80b883a 	mov	r5,r21
 80056b4:	80086180 	call	8008618 <__mcmp>
 80056b8:	103ee60e 	bge	r2,zero,8005254 <__alt_data_end+0xfc005254>
 80056bc:	8009883a 	mov	r4,r16
 80056c0:	e00b883a 	mov	r5,fp
 80056c4:	01800284 	movi	r6,10
 80056c8:	000f883a 	mov	r7,zero
 80056cc:	8007d6c0 	call	8007d6c <__multadd>
 80056d0:	d9000517 	ldw	r4,20(sp)
 80056d4:	d9800b17 	ldw	r6,44(sp)
 80056d8:	1039883a 	mov	fp,r2
 80056dc:	213fffc4 	addi	r4,r4,-1
 80056e0:	d9000515 	stw	r4,20(sp)
 80056e4:	303f2d1e 	bne	r6,zero,800539c <__alt_data_end+0xfc00539c>
 80056e8:	d9000d17 	ldw	r4,52(sp)
 80056ec:	0101780e 	bge	zero,r4,8005cd0 <_dtoa_r+0x1670>
 80056f0:	d9000615 	stw	r4,24(sp)
 80056f4:	003edb06 	br	8005264 <__alt_data_end+0xfc005264>
 80056f8:	00800084 	movi	r2,2
 80056fc:	30818e1e 	bne	r6,r2,8005d38 <_dtoa_r+0x16d8>
 8005700:	d8000b15 	stw	zero,44(sp)
 8005704:	003f8106 	br	800550c <__alt_data_end+0xfc00550c>
 8005708:	d8800717 	ldw	r2,28(sp)
 800570c:	003c0306 	br	800471c <__alt_data_end+0xfc00471c>
 8005710:	d9000317 	ldw	r4,12(sp)
 8005714:	00800084 	movi	r2,2
 8005718:	113ed00e 	bge	r2,r4,800525c <__alt_data_end+0xfc00525c>
 800571c:	d8c00617 	ldw	r3,24(sp)
 8005720:	183f901e 	bne	r3,zero,8005564 <__alt_data_end+0xfc005564>
 8005724:	a80b883a 	mov	r5,r21
 8005728:	8009883a 	mov	r4,r16
 800572c:	01800144 	movi	r6,5
 8005730:	000f883a 	mov	r7,zero
 8005734:	8007d6c0 	call	8007d6c <__multadd>
 8005738:	e009883a 	mov	r4,fp
 800573c:	100b883a 	mov	r5,r2
 8005740:	102b883a 	mov	r21,r2
 8005744:	80086180 	call	8008618 <__mcmp>
 8005748:	00bf860e 	bge	zero,r2,8005564 <__alt_data_end+0xfc005564>
 800574c:	d9800717 	ldw	r6,28(sp)
 8005750:	00800c44 	movi	r2,49
 8005754:	30800005 	stb	r2,0(r6)
 8005758:	d8800517 	ldw	r2,20(sp)
 800575c:	35c00044 	addi	r23,r6,1
 8005760:	10800044 	addi	r2,r2,1
 8005764:	d8800515 	stw	r2,20(sp)
 8005768:	003f8206 	br	8005574 <__alt_data_end+0xfc005574>
 800576c:	903e981e 	bne	r18,zero,80051d0 <__alt_data_end+0xfc0051d0>
 8005770:	003f8b06 	br	80055a0 <__alt_data_end+0xfc0055a0>
 8005774:	d9800517 	ldw	r6,20(sp)
 8005778:	d8c00717 	ldw	r3,28(sp)
 800577c:	00800c44 	movi	r2,49
 8005780:	31800044 	addi	r6,r6,1
 8005784:	d9800515 	stw	r6,20(sp)
 8005788:	18800005 	stb	r2,0(r3)
 800578c:	003ee906 	br	8005334 <__alt_data_end+0xfc005334>
 8005790:	dc000317 	ldw	r16,12(sp)
 8005794:	003d6006 	br	8004d18 <__alt_data_end+0xfc004d18>
 8005798:	8809883a 	mov	r4,r17
 800579c:	800d3e00 	call	800d3e0 <__floatsidf>
 80057a0:	a009883a 	mov	r4,r20
 80057a4:	a80b883a 	mov	r5,r21
 80057a8:	100d883a 	mov	r6,r2
 80057ac:	180f883a 	mov	r7,r3
 80057b0:	80014cc0 	call	80014cc <__muldf3>
 80057b4:	1009883a 	mov	r4,r2
 80057b8:	180b883a 	mov	r5,r3
 80057bc:	000d883a 	mov	r6,zero
 80057c0:	01d00734 	movhi	r7,16412
 80057c4:	800c0300 	call	800c030 <__adddf3>
 80057c8:	1023883a 	mov	r17,r2
 80057cc:	00bf3034 	movhi	r2,64704
 80057d0:	1885883a 	add	r2,r3,r2
 80057d4:	d8800e15 	stw	r2,56(sp)
 80057d8:	a009883a 	mov	r4,r20
 80057dc:	a80b883a 	mov	r5,r21
 80057e0:	000d883a 	mov	r6,zero
 80057e4:	01d00534 	movhi	r7,16404
 80057e8:	800cb100 	call	800cb10 <__subdf3>
 80057ec:	d9c00e17 	ldw	r7,56(sp)
 80057f0:	1009883a 	mov	r4,r2
 80057f4:	180b883a 	mov	r5,r3
 80057f8:	880d883a 	mov	r6,r17
 80057fc:	102b883a 	mov	r21,r2
 8005800:	1829883a 	mov	r20,r3
 8005804:	800c9500 	call	800c950 <__gedf2>
 8005808:	00807716 	blt	zero,r2,80059e8 <_dtoa_r+0x1388>
 800580c:	d8800e17 	ldw	r2,56(sp)
 8005810:	a809883a 	mov	r4,r21
 8005814:	a00b883a 	mov	r5,r20
 8005818:	11e0003c 	xorhi	r7,r2,32768
 800581c:	880d883a 	mov	r6,r17
 8005820:	800ca300 	call	800ca30 <__ledf2>
 8005824:	103d6b0e 	bge	r2,zero,8004dd4 <__alt_data_end+0xfc004dd4>
 8005828:	002b883a 	mov	r21,zero
 800582c:	0023883a 	mov	r17,zero
 8005830:	003f4c06 	br	8005564 <__alt_data_end+0xfc005564>
 8005834:	d9800917 	ldw	r6,36(sp)
 8005838:	e00b883a 	mov	r5,fp
 800583c:	8009883a 	mov	r4,r16
 8005840:	80083900 	call	8008390 <__pow5mult>
 8005844:	1039883a 	mov	fp,r2
 8005848:	003e2706 	br	80050e8 <__alt_data_end+0xfc0050e8>
 800584c:	d8000b15 	stw	zero,44(sp)
 8005850:	003c4906 	br	8004978 <__alt_data_end+0xfc004978>
 8005854:	d9000917 	ldw	r4,36(sp)
 8005858:	d9800a17 	ldw	r6,40(sp)
 800585c:	dd400915 	stw	r21,36(sp)
 8005860:	a905c83a 	sub	r2,r21,r4
 8005864:	308d883a 	add	r6,r6,r2
 8005868:	d9800a15 	stw	r6,40(sp)
 800586c:	002b883a 	mov	r21,zero
 8005870:	003df206 	br	800503c <__alt_data_end+0xfc00503c>
 8005874:	dc800e15 	stw	r18,56(sp)
 8005878:	982b883a 	mov	r21,r19
 800587c:	04400084 	movi	r17,2
 8005880:	003c7406 	br	8004a54 <__alt_data_end+0xfc004a54>
 8005884:	04400044 	movi	r17,1
 8005888:	dc400d15 	stw	r17,52(sp)
 800588c:	dc400615 	stw	r17,24(sp)
 8005890:	dc402215 	stw	r17,136(sp)
 8005894:	80001115 	stw	zero,68(r16)
 8005898:	000b883a 	mov	r5,zero
 800589c:	003c4a06 	br	80049c8 <__alt_data_end+0xfc0049c8>
 80058a0:	3023883a 	mov	r17,r6
 80058a4:	003ffb06 	br	8005894 <__alt_data_end+0xfc005894>
 80058a8:	1000021e 	bne	r2,zero,80058b4 <_dtoa_r+0x1254>
 80058ac:	4200004c 	andi	r8,r8,1
 80058b0:	403e8f1e 	bne	r8,zero,80052f0 <__alt_data_end+0xfc0052f0>
 80058b4:	01000c04 	movi	r4,48
 80058b8:	00000106 	br	80058c0 <_dtoa_r+0x1260>
 80058bc:	102f883a 	mov	r23,r2
 80058c0:	b8bfffc4 	addi	r2,r23,-1
 80058c4:	10c00007 	ldb	r3,0(r2)
 80058c8:	193ffc26 	beq	r3,r4,80058bc <__alt_data_end+0xfc0058bc>
 80058cc:	003e9906 	br	8005334 <__alt_data_end+0xfc005334>
 80058d0:	d9000517 	ldw	r4,20(sp)
 80058d4:	012fc83a 	sub	r23,zero,r4
 80058d8:	b800ad26 	beq	r23,zero,8005b90 <_dtoa_r+0x1530>
 80058dc:	b88003cc 	andi	r2,r23,15
 80058e0:	100490fa 	slli	r2,r2,3
 80058e4:	00c20074 	movhi	r3,2049
 80058e8:	18c0f804 	addi	r3,r3,992
 80058ec:	1885883a 	add	r2,r3,r2
 80058f0:	11800017 	ldw	r6,0(r2)
 80058f4:	11c00117 	ldw	r7,4(r2)
 80058f8:	b82fd13a 	srai	r23,r23,4
 80058fc:	9009883a 	mov	r4,r18
 8005900:	980b883a 	mov	r5,r19
 8005904:	80014cc0 	call	80014cc <__muldf3>
 8005908:	1029883a 	mov	r20,r2
 800590c:	182b883a 	mov	r21,r3
 8005910:	b800f426 	beq	r23,zero,8005ce4 <_dtoa_r+0x1684>
 8005914:	02020074 	movhi	r8,2049
 8005918:	4200ee04 	addi	r8,r8,952
 800591c:	8029883a 	mov	r20,r16
 8005920:	04400084 	movi	r17,2
 8005924:	4021883a 	mov	r16,r8
 8005928:	b980004c 	andi	r6,r23,1
 800592c:	1009883a 	mov	r4,r2
 8005930:	b82fd07a 	srai	r23,r23,1
 8005934:	180b883a 	mov	r5,r3
 8005938:	30000426 	beq	r6,zero,800594c <_dtoa_r+0x12ec>
 800593c:	81800017 	ldw	r6,0(r16)
 8005940:	81c00117 	ldw	r7,4(r16)
 8005944:	8c400044 	addi	r17,r17,1
 8005948:	80014cc0 	call	80014cc <__muldf3>
 800594c:	84000204 	addi	r16,r16,8
 8005950:	b83ff51e 	bne	r23,zero,8005928 <__alt_data_end+0xfc005928>
 8005954:	a021883a 	mov	r16,r20
 8005958:	182b883a 	mov	r21,r3
 800595c:	1029883a 	mov	r20,r2
 8005960:	003c5506 	br	8004ab8 <__alt_data_end+0xfc004ab8>
 8005964:	d9800517 	ldw	r6,20(sp)
 8005968:	d9000717 	ldw	r4,28(sp)
 800596c:	00c00c04 	movi	r3,48
 8005970:	31800044 	addi	r6,r6,1
 8005974:	d9800515 	stw	r6,20(sp)
 8005978:	20c00005 	stb	r3,0(r4)
 800597c:	02000c44 	movi	r8,49
 8005980:	003da206 	br	800500c <__alt_data_end+0xfc00500c>
 8005984:	89400117 	ldw	r5,4(r17)
 8005988:	8009883a 	mov	r4,r16
 800598c:	8007c9c0 	call	8007c9c <_Balloc>
 8005990:	89800417 	ldw	r6,16(r17)
 8005994:	11000304 	addi	r4,r2,12
 8005998:	89400304 	addi	r5,r17,12
 800599c:	31800084 	addi	r6,r6,2
 80059a0:	318d883a 	add	r6,r6,r6
 80059a4:	318d883a 	add	r6,r6,r6
 80059a8:	1027883a 	mov	r19,r2
 80059ac:	80078e40 	call	80078e4 <memcpy>
 80059b0:	8009883a 	mov	r4,r16
 80059b4:	980b883a 	mov	r5,r19
 80059b8:	01800044 	movi	r6,1
 80059bc:	80084d00 	call	80084d0 <__lshift>
 80059c0:	1029883a 	mov	r20,r2
 80059c4:	003e8606 	br	80053e0 <__alt_data_end+0xfc0053e0>
 80059c8:	00800e44 	movi	r2,57
 80059cc:	90809526 	beq	r18,r2,8005c24 <_dtoa_r+0x15c4>
 80059d0:	92000044 	addi	r8,r18,1
 80059d4:	003f2306 	br	8005664 <__alt_data_end+0xfc005664>
 80059d8:	9011883a 	mov	r8,r18
 80059dc:	8825883a 	mov	r18,r17
 80059e0:	a023883a 	mov	r17,r20
 80059e4:	003e3706 	br	80052c4 <__alt_data_end+0xfc0052c4>
 80059e8:	002b883a 	mov	r21,zero
 80059ec:	0023883a 	mov	r17,zero
 80059f0:	003f5606 	br	800574c <__alt_data_end+0xfc00574c>
 80059f4:	51bfffc4 	addi	r6,r10,-1
 80059f8:	300490fa 	slli	r2,r6,3
 80059fc:	00c20074 	movhi	r3,2049
 8005a00:	18c0f804 	addi	r3,r3,992
 8005a04:	1885883a 	add	r2,r3,r2
 8005a08:	d9c00e17 	ldw	r7,56(sp)
 8005a0c:	11000017 	ldw	r4,0(r2)
 8005a10:	11400117 	ldw	r5,4(r2)
 8005a14:	d8800717 	ldw	r2,28(sp)
 8005a18:	d9801015 	stw	r6,64(sp)
 8005a1c:	880d883a 	mov	r6,r17
 8005a20:	da801615 	stw	r10,88(sp)
 8005a24:	15c00044 	addi	r23,r2,1
 8005a28:	80014cc0 	call	80014cc <__muldf3>
 8005a2c:	a80b883a 	mov	r5,r21
 8005a30:	a009883a 	mov	r4,r20
 8005a34:	d8c01115 	stw	r3,68(sp)
 8005a38:	d8800e15 	stw	r2,56(sp)
 8005a3c:	8001d380 	call	8001d38 <__fixdfsi>
 8005a40:	1009883a 	mov	r4,r2
 8005a44:	1023883a 	mov	r17,r2
 8005a48:	800d3e00 	call	800d3e0 <__floatsidf>
 8005a4c:	a009883a 	mov	r4,r20
 8005a50:	a80b883a 	mov	r5,r21
 8005a54:	100d883a 	mov	r6,r2
 8005a58:	180f883a 	mov	r7,r3
 8005a5c:	800cb100 	call	800cb10 <__subdf3>
 8005a60:	1813883a 	mov	r9,r3
 8005a64:	d8c00717 	ldw	r3,28(sp)
 8005a68:	8c400c04 	addi	r17,r17,48
 8005a6c:	1011883a 	mov	r8,r2
 8005a70:	1c400005 	stb	r17,0(r3)
 8005a74:	da801617 	ldw	r10,88(sp)
 8005a78:	00800044 	movi	r2,1
 8005a7c:	50802326 	beq	r10,r2,8005b0c <_dtoa_r+0x14ac>
 8005a80:	d8800717 	ldw	r2,28(sp)
 8005a84:	b82b883a 	mov	r21,r23
 8005a88:	dc001315 	stw	r16,76(sp)
 8005a8c:	12a9883a 	add	r20,r2,r10
 8005a90:	4807883a 	mov	r3,r9
 8005a94:	4005883a 	mov	r2,r8
 8005a98:	dc801415 	stw	r18,80(sp)
 8005a9c:	000d883a 	mov	r6,zero
 8005aa0:	01d00934 	movhi	r7,16420
 8005aa4:	1009883a 	mov	r4,r2
 8005aa8:	180b883a 	mov	r5,r3
 8005aac:	80014cc0 	call	80014cc <__muldf3>
 8005ab0:	180b883a 	mov	r5,r3
 8005ab4:	1009883a 	mov	r4,r2
 8005ab8:	1821883a 	mov	r16,r3
 8005abc:	1025883a 	mov	r18,r2
 8005ac0:	8001d380 	call	8001d38 <__fixdfsi>
 8005ac4:	1009883a 	mov	r4,r2
 8005ac8:	1023883a 	mov	r17,r2
 8005acc:	800d3e00 	call	800d3e0 <__floatsidf>
 8005ad0:	9009883a 	mov	r4,r18
 8005ad4:	800b883a 	mov	r5,r16
 8005ad8:	100d883a 	mov	r6,r2
 8005adc:	180f883a 	mov	r7,r3
 8005ae0:	8c400c04 	addi	r17,r17,48
 8005ae4:	800cb100 	call	800cb10 <__subdf3>
 8005ae8:	ad400044 	addi	r21,r21,1
 8005aec:	ac7fffc5 	stb	r17,-1(r21)
 8005af0:	ad3fea1e 	bne	r21,r20,8005a9c <__alt_data_end+0xfc005a9c>
 8005af4:	1813883a 	mov	r9,r3
 8005af8:	d8c01017 	ldw	r3,64(sp)
 8005afc:	dc001317 	ldw	r16,76(sp)
 8005b00:	dc801417 	ldw	r18,80(sp)
 8005b04:	1011883a 	mov	r8,r2
 8005b08:	b8ef883a 	add	r23,r23,r3
 8005b0c:	d9000e17 	ldw	r4,56(sp)
 8005b10:	d9401117 	ldw	r5,68(sp)
 8005b14:	000d883a 	mov	r6,zero
 8005b18:	01cff834 	movhi	r7,16352
 8005b1c:	da001715 	stw	r8,92(sp)
 8005b20:	da401515 	stw	r9,84(sp)
 8005b24:	800c0300 	call	800c030 <__adddf3>
 8005b28:	da001717 	ldw	r8,92(sp)
 8005b2c:	da401517 	ldw	r9,84(sp)
 8005b30:	1009883a 	mov	r4,r2
 8005b34:	400d883a 	mov	r6,r8
 8005b38:	480f883a 	mov	r7,r9
 8005b3c:	180b883a 	mov	r5,r3
 8005b40:	800ca300 	call	800ca30 <__ledf2>
 8005b44:	da001717 	ldw	r8,92(sp)
 8005b48:	da401517 	ldw	r9,84(sp)
 8005b4c:	10003b0e 	bge	r2,zero,8005c3c <_dtoa_r+0x15dc>
 8005b50:	d9001217 	ldw	r4,72(sp)
 8005b54:	bd7fffc3 	ldbu	r21,-1(r23)
 8005b58:	d9000515 	stw	r4,20(sp)
 8005b5c:	003d1c06 	br	8004fd0 <__alt_data_end+0xfc004fd0>
 8005b60:	d8c00817 	ldw	r3,32(sp)
 8005b64:	18a9c83a 	sub	r20,r3,r2
 8005b68:	0005883a 	mov	r2,zero
 8005b6c:	003d3706 	br	800504c <__alt_data_end+0xfc00504c>
 8005b70:	00800044 	movi	r2,1
 8005b74:	003dd006 	br	80052b8 <__alt_data_end+0xfc0052b8>
 8005b78:	d8c00217 	ldw	r3,8(sp)
 8005b7c:	00800d84 	movi	r2,54
 8005b80:	dd400917 	ldw	r21,36(sp)
 8005b84:	10c5c83a 	sub	r2,r2,r3
 8005b88:	dd000817 	ldw	r20,32(sp)
 8005b8c:	003d2f06 	br	800504c <__alt_data_end+0xfc00504c>
 8005b90:	9029883a 	mov	r20,r18
 8005b94:	982b883a 	mov	r21,r19
 8005b98:	04400084 	movi	r17,2
 8005b9c:	003bc606 	br	8004ab8 <__alt_data_end+0xfc004ab8>
 8005ba0:	d8800617 	ldw	r2,24(sp)
 8005ba4:	103efc26 	beq	r2,zero,8005798 <__alt_data_end+0xfc005798>
 8005ba8:	d8c00d17 	ldw	r3,52(sp)
 8005bac:	00fc890e 	bge	zero,r3,8004dd4 <__alt_data_end+0xfc004dd4>
 8005bb0:	a80b883a 	mov	r5,r21
 8005bb4:	a009883a 	mov	r4,r20
 8005bb8:	000d883a 	mov	r6,zero
 8005bbc:	01d00934 	movhi	r7,16420
 8005bc0:	80014cc0 	call	80014cc <__muldf3>
 8005bc4:	89000044 	addi	r4,r17,1
 8005bc8:	1029883a 	mov	r20,r2
 8005bcc:	182b883a 	mov	r21,r3
 8005bd0:	800d3e00 	call	800d3e0 <__floatsidf>
 8005bd4:	a009883a 	mov	r4,r20
 8005bd8:	a80b883a 	mov	r5,r21
 8005bdc:	100d883a 	mov	r6,r2
 8005be0:	180f883a 	mov	r7,r3
 8005be4:	80014cc0 	call	80014cc <__muldf3>
 8005be8:	1009883a 	mov	r4,r2
 8005bec:	180b883a 	mov	r5,r3
 8005bf0:	000d883a 	mov	r6,zero
 8005bf4:	01d00734 	movhi	r7,16412
 8005bf8:	800c0300 	call	800c030 <__adddf3>
 8005bfc:	d9000517 	ldw	r4,20(sp)
 8005c00:	1023883a 	mov	r17,r2
 8005c04:	00bf3034 	movhi	r2,64704
 8005c08:	213fffc4 	addi	r4,r4,-1
 8005c0c:	1885883a 	add	r2,r3,r2
 8005c10:	d9001215 	stw	r4,72(sp)
 8005c14:	d8800e15 	stw	r2,56(sp)
 8005c18:	da800d17 	ldw	r10,52(sp)
 8005c1c:	003bc306 	br	8004b2c <__alt_data_end+0xfc004b2c>
 8005c20:	b039883a 	mov	fp,r22
 8005c24:	01000e44 	movi	r4,57
 8005c28:	8825883a 	mov	r18,r17
 8005c2c:	9dc00044 	addi	r23,r19,1
 8005c30:	99000005 	stb	r4,0(r19)
 8005c34:	a023883a 	mov	r17,r20
 8005c38:	003dae06 	br	80052f4 <__alt_data_end+0xfc0052f4>
 8005c3c:	d9800e17 	ldw	r6,56(sp)
 8005c40:	d9c01117 	ldw	r7,68(sp)
 8005c44:	0009883a 	mov	r4,zero
 8005c48:	014ff834 	movhi	r5,16352
 8005c4c:	da001715 	stw	r8,92(sp)
 8005c50:	da401515 	stw	r9,84(sp)
 8005c54:	800cb100 	call	800cb10 <__subdf3>
 8005c58:	da001717 	ldw	r8,92(sp)
 8005c5c:	da401517 	ldw	r9,84(sp)
 8005c60:	1009883a 	mov	r4,r2
 8005c64:	180b883a 	mov	r5,r3
 8005c68:	400d883a 	mov	r6,r8
 8005c6c:	480f883a 	mov	r7,r9
 8005c70:	800c9500 	call	800c950 <__gedf2>
 8005c74:	00bc570e 	bge	zero,r2,8004dd4 <__alt_data_end+0xfc004dd4>
 8005c78:	01000c04 	movi	r4,48
 8005c7c:	00000106 	br	8005c84 <_dtoa_r+0x1624>
 8005c80:	102f883a 	mov	r23,r2
 8005c84:	b8bfffc4 	addi	r2,r23,-1
 8005c88:	10c00007 	ldb	r3,0(r2)
 8005c8c:	193ffc26 	beq	r3,r4,8005c80 <__alt_data_end+0xfc005c80>
 8005c90:	d9801217 	ldw	r6,72(sp)
 8005c94:	d9800515 	stw	r6,20(sp)
 8005c98:	003c1f06 	br	8004d18 <__alt_data_end+0xfc004d18>
 8005c9c:	d8801217 	ldw	r2,72(sp)
 8005ca0:	dc001117 	ldw	r16,68(sp)
 8005ca4:	d8800515 	stw	r2,20(sp)
 8005ca8:	003cc906 	br	8004fd0 <__alt_data_end+0xfc004fd0>
 8005cac:	dd801317 	ldw	r22,76(sp)
 8005cb0:	dc001117 	ldw	r16,68(sp)
 8005cb4:	dcc01417 	ldw	r19,80(sp)
 8005cb8:	dc801017 	ldw	r18,64(sp)
 8005cbc:	003c4506 	br	8004dd4 <__alt_data_end+0xfc004dd4>
 8005cc0:	103e5d1e 	bne	r2,zero,8005638 <__alt_data_end+0xfc005638>
 8005cc4:	4080004c 	andi	r2,r8,1
 8005cc8:	103e5b26 	beq	r2,zero,8005638 <__alt_data_end+0xfc005638>
 8005ccc:	003e5706 	br	800562c <__alt_data_end+0xfc00562c>
 8005cd0:	d8c00317 	ldw	r3,12(sp)
 8005cd4:	00800084 	movi	r2,2
 8005cd8:	10c00a16 	blt	r2,r3,8005d04 <_dtoa_r+0x16a4>
 8005cdc:	d9000d17 	ldw	r4,52(sp)
 8005ce0:	003e8306 	br	80056f0 <__alt_data_end+0xfc0056f0>
 8005ce4:	04400084 	movi	r17,2
 8005ce8:	003b7306 	br	8004ab8 <__alt_data_end+0xfc004ab8>
 8005cec:	d9801217 	ldw	r6,72(sp)
 8005cf0:	d9800515 	stw	r6,20(sp)
 8005cf4:	003cb606 	br	8004fd0 <__alt_data_end+0xfc004fd0>
 8005cf8:	d9001217 	ldw	r4,72(sp)
 8005cfc:	d9000515 	stw	r4,20(sp)
 8005d00:	003c0506 	br	8004d18 <__alt_data_end+0xfc004d18>
 8005d04:	d9800d17 	ldw	r6,52(sp)
 8005d08:	d9800615 	stw	r6,24(sp)
 8005d0c:	003e8306 	br	800571c <__alt_data_end+0xfc00571c>
 8005d10:	d9800317 	ldw	r6,12(sp)
 8005d14:	00800084 	movi	r2,2
 8005d18:	11800216 	blt	r2,r6,8005d24 <_dtoa_r+0x16c4>
 8005d1c:	d8800d17 	ldw	r2,52(sp)
 8005d20:	003da606 	br	80053bc <__alt_data_end+0xfc0053bc>
 8005d24:	d8800d17 	ldw	r2,52(sp)
 8005d28:	d8800615 	stw	r2,24(sp)
 8005d2c:	003e7b06 	br	800571c <__alt_data_end+0xfc00571c>
 8005d30:	05000044 	movi	r20,1
 8005d34:	003b0506 	br	800494c <__alt_data_end+0xfc00494c>
 8005d38:	8009883a 	mov	r4,r16
 8005d3c:	80001115 	stw	zero,68(r16)
 8005d40:	000b883a 	mov	r5,zero
 8005d44:	8007c9c0 	call	8007c9c <_Balloc>
 8005d48:	d8800715 	stw	r2,28(sp)
 8005d4c:	d8c00717 	ldw	r3,28(sp)
 8005d50:	00bfffc4 	movi	r2,-1
 8005d54:	01000044 	movi	r4,1
 8005d58:	d8800615 	stw	r2,24(sp)
 8005d5c:	80c01015 	stw	r3,64(r16)
 8005d60:	d9000b15 	stw	r4,44(sp)
 8005d64:	d8002215 	stw	zero,136(sp)
 8005d68:	d8800d15 	stw	r2,52(sp)
 8005d6c:	003c1906 	br	8004dd4 <__alt_data_end+0xfc004dd4>
 8005d70:	193d2926 	beq	r3,r4,8005218 <__alt_data_end+0xfc005218>
 8005d74:	00c00f04 	movi	r3,60
 8005d78:	1885c83a 	sub	r2,r3,r2
 8005d7c:	003d7b06 	br	800536c <__alt_data_end+0xfc00536c>
 8005d80:	000b883a 	mov	r5,zero
 8005d84:	003b1006 	br	80049c8 <__alt_data_end+0xfc0049c8>

08005d88 <_fflush_r>:
 8005d88:	defffb04 	addi	sp,sp,-20
 8005d8c:	dcc00315 	stw	r19,12(sp)
 8005d90:	dc000015 	stw	r16,0(sp)
 8005d94:	dfc00415 	stw	ra,16(sp)
 8005d98:	dc800215 	stw	r18,8(sp)
 8005d9c:	dc400115 	stw	r17,4(sp)
 8005da0:	2027883a 	mov	r19,r4
 8005da4:	2821883a 	mov	r16,r5
 8005da8:	20000226 	beq	r4,zero,8005db4 <_fflush_r+0x2c>
 8005dac:	20800e17 	ldw	r2,56(r4)
 8005db0:	10005326 	beq	r2,zero,8005f00 <_fflush_r+0x178>
 8005db4:	8080030b 	ldhu	r2,12(r16)
 8005db8:	10ffffcc 	andi	r3,r2,65535
 8005dbc:	18e0001c 	xori	r3,r3,32768
 8005dc0:	18e00004 	addi	r3,r3,-32768
 8005dc4:	18002c26 	beq	r3,zero,8005e78 <_fflush_r+0xf0>
 8005dc8:	10c0020c 	andi	r3,r2,8
 8005dcc:	1800321e 	bne	r3,zero,8005e98 <_fflush_r+0x110>
 8005dd0:	80c00117 	ldw	r3,4(r16)
 8005dd4:	10820014 	ori	r2,r2,2048
 8005dd8:	8080030d 	sth	r2,12(r16)
 8005ddc:	00c0570e 	bge	zero,r3,8005f3c <_fflush_r+0x1b4>
 8005de0:	82000a17 	ldw	r8,40(r16)
 8005de4:	40002426 	beq	r8,zero,8005e78 <_fflush_r+0xf0>
 8005de8:	9c400017 	ldw	r17,0(r19)
 8005dec:	10c4000c 	andi	r3,r2,4096
 8005df0:	98000015 	stw	zero,0(r19)
 8005df4:	18004626 	beq	r3,zero,8005f10 <_fflush_r+0x188>
 8005df8:	81801417 	ldw	r6,80(r16)
 8005dfc:	10c0010c 	andi	r3,r2,4
 8005e00:	18000626 	beq	r3,zero,8005e1c <_fflush_r+0x94>
 8005e04:	80c00117 	ldw	r3,4(r16)
 8005e08:	80800c17 	ldw	r2,48(r16)
 8005e0c:	30cdc83a 	sub	r6,r6,r3
 8005e10:	10000226 	beq	r2,zero,8005e1c <_fflush_r+0x94>
 8005e14:	80800f17 	ldw	r2,60(r16)
 8005e18:	308dc83a 	sub	r6,r6,r2
 8005e1c:	81400717 	ldw	r5,28(r16)
 8005e20:	9809883a 	mov	r4,r19
 8005e24:	000f883a 	mov	r7,zero
 8005e28:	403ee83a 	callr	r8
 8005e2c:	00ffffc4 	movi	r3,-1
 8005e30:	10c04526 	beq	r2,r3,8005f48 <_fflush_r+0x1c0>
 8005e34:	80c0030b 	ldhu	r3,12(r16)
 8005e38:	81000417 	ldw	r4,16(r16)
 8005e3c:	80000115 	stw	zero,4(r16)
 8005e40:	197dffcc 	andi	r5,r3,63487
 8005e44:	8140030d 	sth	r5,12(r16)
 8005e48:	81000015 	stw	r4,0(r16)
 8005e4c:	18c4000c 	andi	r3,r3,4096
 8005e50:	18000126 	beq	r3,zero,8005e58 <_fflush_r+0xd0>
 8005e54:	80801415 	stw	r2,80(r16)
 8005e58:	81400c17 	ldw	r5,48(r16)
 8005e5c:	9c400015 	stw	r17,0(r19)
 8005e60:	28000526 	beq	r5,zero,8005e78 <_fflush_r+0xf0>
 8005e64:	80801004 	addi	r2,r16,64
 8005e68:	28800226 	beq	r5,r2,8005e74 <_fflush_r+0xec>
 8005e6c:	9809883a 	mov	r4,r19
 8005e70:	80064b80 	call	80064b8 <_free_r>
 8005e74:	80000c15 	stw	zero,48(r16)
 8005e78:	0005883a 	mov	r2,zero
 8005e7c:	dfc00417 	ldw	ra,16(sp)
 8005e80:	dcc00317 	ldw	r19,12(sp)
 8005e84:	dc800217 	ldw	r18,8(sp)
 8005e88:	dc400117 	ldw	r17,4(sp)
 8005e8c:	dc000017 	ldw	r16,0(sp)
 8005e90:	dec00504 	addi	sp,sp,20
 8005e94:	f800283a 	ret
 8005e98:	84800417 	ldw	r18,16(r16)
 8005e9c:	903ff626 	beq	r18,zero,8005e78 <__alt_data_end+0xfc005e78>
 8005ea0:	84400017 	ldw	r17,0(r16)
 8005ea4:	108000cc 	andi	r2,r2,3
 8005ea8:	84800015 	stw	r18,0(r16)
 8005eac:	8ca3c83a 	sub	r17,r17,r18
 8005eb0:	10001526 	beq	r2,zero,8005f08 <_fflush_r+0x180>
 8005eb4:	0005883a 	mov	r2,zero
 8005eb8:	80800215 	stw	r2,8(r16)
 8005ebc:	04400316 	blt	zero,r17,8005ecc <_fflush_r+0x144>
 8005ec0:	003fed06 	br	8005e78 <__alt_data_end+0xfc005e78>
 8005ec4:	90a5883a 	add	r18,r18,r2
 8005ec8:	047feb0e 	bge	zero,r17,8005e78 <__alt_data_end+0xfc005e78>
 8005ecc:	80800917 	ldw	r2,36(r16)
 8005ed0:	81400717 	ldw	r5,28(r16)
 8005ed4:	880f883a 	mov	r7,r17
 8005ed8:	900d883a 	mov	r6,r18
 8005edc:	9809883a 	mov	r4,r19
 8005ee0:	103ee83a 	callr	r2
 8005ee4:	88a3c83a 	sub	r17,r17,r2
 8005ee8:	00bff616 	blt	zero,r2,8005ec4 <__alt_data_end+0xfc005ec4>
 8005eec:	80c0030b 	ldhu	r3,12(r16)
 8005ef0:	00bfffc4 	movi	r2,-1
 8005ef4:	18c01014 	ori	r3,r3,64
 8005ef8:	80c0030d 	sth	r3,12(r16)
 8005efc:	003fdf06 	br	8005e7c <__alt_data_end+0xfc005e7c>
 8005f00:	80063440 	call	8006344 <__sinit>
 8005f04:	003fab06 	br	8005db4 <__alt_data_end+0xfc005db4>
 8005f08:	80800517 	ldw	r2,20(r16)
 8005f0c:	003fea06 	br	8005eb8 <__alt_data_end+0xfc005eb8>
 8005f10:	81400717 	ldw	r5,28(r16)
 8005f14:	000d883a 	mov	r6,zero
 8005f18:	9809883a 	mov	r4,r19
 8005f1c:	01c00044 	movi	r7,1
 8005f20:	403ee83a 	callr	r8
 8005f24:	100d883a 	mov	r6,r2
 8005f28:	00bfffc4 	movi	r2,-1
 8005f2c:	30801326 	beq	r6,r2,8005f7c <_fflush_r+0x1f4>
 8005f30:	8080030b 	ldhu	r2,12(r16)
 8005f34:	82000a17 	ldw	r8,40(r16)
 8005f38:	003fb006 	br	8005dfc <__alt_data_end+0xfc005dfc>
 8005f3c:	80c00f17 	ldw	r3,60(r16)
 8005f40:	00ffa716 	blt	zero,r3,8005de0 <__alt_data_end+0xfc005de0>
 8005f44:	003fcc06 	br	8005e78 <__alt_data_end+0xfc005e78>
 8005f48:	98c00017 	ldw	r3,0(r19)
 8005f4c:	183fb926 	beq	r3,zero,8005e34 <__alt_data_end+0xfc005e34>
 8005f50:	01000744 	movi	r4,29
 8005f54:	19000226 	beq	r3,r4,8005f60 <_fflush_r+0x1d8>
 8005f58:	01000584 	movi	r4,22
 8005f5c:	1900101e 	bne	r3,r4,8005fa0 <_fflush_r+0x218>
 8005f60:	8080030b 	ldhu	r2,12(r16)
 8005f64:	80c00417 	ldw	r3,16(r16)
 8005f68:	80000115 	stw	zero,4(r16)
 8005f6c:	10bdffcc 	andi	r2,r2,63487
 8005f70:	8080030d 	sth	r2,12(r16)
 8005f74:	80c00015 	stw	r3,0(r16)
 8005f78:	003fb706 	br	8005e58 <__alt_data_end+0xfc005e58>
 8005f7c:	98800017 	ldw	r2,0(r19)
 8005f80:	103feb26 	beq	r2,zero,8005f30 <__alt_data_end+0xfc005f30>
 8005f84:	00c00744 	movi	r3,29
 8005f88:	10c00226 	beq	r2,r3,8005f94 <_fflush_r+0x20c>
 8005f8c:	00c00584 	movi	r3,22
 8005f90:	10ffd61e 	bne	r2,r3,8005eec <__alt_data_end+0xfc005eec>
 8005f94:	9c400015 	stw	r17,0(r19)
 8005f98:	0005883a 	mov	r2,zero
 8005f9c:	003fb706 	br	8005e7c <__alt_data_end+0xfc005e7c>
 8005fa0:	80c0030b 	ldhu	r3,12(r16)
 8005fa4:	18c01014 	ori	r3,r3,64
 8005fa8:	80c0030d 	sth	r3,12(r16)
 8005fac:	003fb306 	br	8005e7c <__alt_data_end+0xfc005e7c>

08005fb0 <fflush>:
 8005fb0:	20000526 	beq	r4,zero,8005fc8 <fflush+0x18>
 8005fb4:	00820074 	movhi	r2,2049
 8005fb8:	1087fc04 	addi	r2,r2,8176
 8005fbc:	200b883a 	mov	r5,r4
 8005fc0:	11000017 	ldw	r4,0(r2)
 8005fc4:	8005d881 	jmpi	8005d88 <_fflush_r>
 8005fc8:	00820074 	movhi	r2,2049
 8005fcc:	1087fb04 	addi	r2,r2,8172
 8005fd0:	11000017 	ldw	r4,0(r2)
 8005fd4:	01420034 	movhi	r5,2048
 8005fd8:	29576204 	addi	r5,r5,23944
 8005fdc:	8006d041 	jmpi	8006d04 <_fwalk_reent>

08005fe0 <__fp_lock>:
 8005fe0:	0005883a 	mov	r2,zero
 8005fe4:	f800283a 	ret

08005fe8 <__fp_unlock>:
 8005fe8:	0005883a 	mov	r2,zero
 8005fec:	f800283a 	ret

08005ff0 <_cleanup_r>:
 8005ff0:	01420074 	movhi	r5,2049
 8005ff4:	296b4404 	addi	r5,r5,-21232
 8005ff8:	8006c4c1 	jmpi	8006c4c <_fwalk>

08005ffc <__sinit.part.1>:
 8005ffc:	defff604 	addi	sp,sp,-40
 8006000:	00c20034 	movhi	r3,2048
 8006004:	dfc00915 	stw	ra,36(sp)
 8006008:	df000815 	stw	fp,32(sp)
 800600c:	ddc00715 	stw	r23,28(sp)
 8006010:	dd800615 	stw	r22,24(sp)
 8006014:	dd400515 	stw	r21,20(sp)
 8006018:	dd000415 	stw	r20,16(sp)
 800601c:	dcc00315 	stw	r19,12(sp)
 8006020:	dc800215 	stw	r18,8(sp)
 8006024:	dc400115 	stw	r17,4(sp)
 8006028:	dc000015 	stw	r16,0(sp)
 800602c:	18d7fc04 	addi	r3,r3,24560
 8006030:	24000117 	ldw	r16,4(r4)
 8006034:	20c00f15 	stw	r3,60(r4)
 8006038:	07000044 	movi	fp,1
 800603c:	00c000c4 	movi	r3,3
 8006040:	2080bb04 	addi	r2,r4,748
 8006044:	20c0b915 	stw	r3,740(r4)
 8006048:	27000e15 	stw	fp,56(r4)
 800604c:	2080ba15 	stw	r2,744(r4)
 8006050:	2000b815 	stw	zero,736(r4)
 8006054:	05c00204 	movi	r23,8
 8006058:	00800104 	movi	r2,4
 800605c:	2025883a 	mov	r18,r4
 8006060:	b80d883a 	mov	r6,r23
 8006064:	81001704 	addi	r4,r16,92
 8006068:	000b883a 	mov	r5,zero
 800606c:	80000015 	stw	zero,0(r16)
 8006070:	80000115 	stw	zero,4(r16)
 8006074:	80000215 	stw	zero,8(r16)
 8006078:	8080030d 	sth	r2,12(r16)
 800607c:	80001915 	stw	zero,100(r16)
 8006080:	8000038d 	sth	zero,14(r16)
 8006084:	80000415 	stw	zero,16(r16)
 8006088:	80000515 	stw	zero,20(r16)
 800608c:	80000615 	stw	zero,24(r16)
 8006090:	8007b780 	call	8007b78 <memset>
 8006094:	05820074 	movhi	r22,2049
 8006098:	94400217 	ldw	r17,8(r18)
 800609c:	05420074 	movhi	r21,2049
 80060a0:	05020074 	movhi	r20,2049
 80060a4:	04c20074 	movhi	r19,2049
 80060a8:	b5a4d304 	addi	r22,r22,-27828
 80060ac:	ad64ea04 	addi	r21,r21,-27736
 80060b0:	a5250904 	addi	r20,r20,-27612
 80060b4:	9ce52004 	addi	r19,r19,-27520
 80060b8:	85800815 	stw	r22,32(r16)
 80060bc:	85400915 	stw	r21,36(r16)
 80060c0:	85000a15 	stw	r20,40(r16)
 80060c4:	84c00b15 	stw	r19,44(r16)
 80060c8:	84000715 	stw	r16,28(r16)
 80060cc:	00800284 	movi	r2,10
 80060d0:	89001704 	addi	r4,r17,92
 80060d4:	b80d883a 	mov	r6,r23
 80060d8:	000b883a 	mov	r5,zero
 80060dc:	88000015 	stw	zero,0(r17)
 80060e0:	88000115 	stw	zero,4(r17)
 80060e4:	88000215 	stw	zero,8(r17)
 80060e8:	8880030d 	sth	r2,12(r17)
 80060ec:	88001915 	stw	zero,100(r17)
 80060f0:	8f00038d 	sth	fp,14(r17)
 80060f4:	88000415 	stw	zero,16(r17)
 80060f8:	88000515 	stw	zero,20(r17)
 80060fc:	88000615 	stw	zero,24(r17)
 8006100:	8007b780 	call	8007b78 <memset>
 8006104:	94000317 	ldw	r16,12(r18)
 8006108:	00800484 	movi	r2,18
 800610c:	8c400715 	stw	r17,28(r17)
 8006110:	8d800815 	stw	r22,32(r17)
 8006114:	8d400915 	stw	r21,36(r17)
 8006118:	8d000a15 	stw	r20,40(r17)
 800611c:	8cc00b15 	stw	r19,44(r17)
 8006120:	8080030d 	sth	r2,12(r16)
 8006124:	00800084 	movi	r2,2
 8006128:	80000015 	stw	zero,0(r16)
 800612c:	80000115 	stw	zero,4(r16)
 8006130:	80000215 	stw	zero,8(r16)
 8006134:	80001915 	stw	zero,100(r16)
 8006138:	8080038d 	sth	r2,14(r16)
 800613c:	80000415 	stw	zero,16(r16)
 8006140:	80000515 	stw	zero,20(r16)
 8006144:	80000615 	stw	zero,24(r16)
 8006148:	81001704 	addi	r4,r16,92
 800614c:	000b883a 	mov	r5,zero
 8006150:	b80d883a 	mov	r6,r23
 8006154:	8007b780 	call	8007b78 <memset>
 8006158:	84000715 	stw	r16,28(r16)
 800615c:	85800815 	stw	r22,32(r16)
 8006160:	85400915 	stw	r21,36(r16)
 8006164:	85000a15 	stw	r20,40(r16)
 8006168:	84c00b15 	stw	r19,44(r16)
 800616c:	dfc00917 	ldw	ra,36(sp)
 8006170:	df000817 	ldw	fp,32(sp)
 8006174:	ddc00717 	ldw	r23,28(sp)
 8006178:	dd800617 	ldw	r22,24(sp)
 800617c:	dd400517 	ldw	r21,20(sp)
 8006180:	dd000417 	ldw	r20,16(sp)
 8006184:	dcc00317 	ldw	r19,12(sp)
 8006188:	dc800217 	ldw	r18,8(sp)
 800618c:	dc400117 	ldw	r17,4(sp)
 8006190:	dc000017 	ldw	r16,0(sp)
 8006194:	dec00a04 	addi	sp,sp,40
 8006198:	f800283a 	ret

0800619c <__sfmoreglue>:
 800619c:	defffc04 	addi	sp,sp,-16
 80061a0:	dc800215 	stw	r18,8(sp)
 80061a4:	2825883a 	mov	r18,r5
 80061a8:	dc000015 	stw	r16,0(sp)
 80061ac:	01401a04 	movi	r5,104
 80061b0:	2021883a 	mov	r16,r4
 80061b4:	9009883a 	mov	r4,r18
 80061b8:	dfc00315 	stw	ra,12(sp)
 80061bc:	dc400115 	stw	r17,4(sp)
 80061c0:	8001ff40 	call	8001ff4 <__mulsi3>
 80061c4:	8009883a 	mov	r4,r16
 80061c8:	11400304 	addi	r5,r2,12
 80061cc:	1023883a 	mov	r17,r2
 80061d0:	80070540 	call	8007054 <_malloc_r>
 80061d4:	1021883a 	mov	r16,r2
 80061d8:	10000726 	beq	r2,zero,80061f8 <__sfmoreglue+0x5c>
 80061dc:	11000304 	addi	r4,r2,12
 80061e0:	10000015 	stw	zero,0(r2)
 80061e4:	14800115 	stw	r18,4(r2)
 80061e8:	11000215 	stw	r4,8(r2)
 80061ec:	000b883a 	mov	r5,zero
 80061f0:	880d883a 	mov	r6,r17
 80061f4:	8007b780 	call	8007b78 <memset>
 80061f8:	8005883a 	mov	r2,r16
 80061fc:	dfc00317 	ldw	ra,12(sp)
 8006200:	dc800217 	ldw	r18,8(sp)
 8006204:	dc400117 	ldw	r17,4(sp)
 8006208:	dc000017 	ldw	r16,0(sp)
 800620c:	dec00404 	addi	sp,sp,16
 8006210:	f800283a 	ret

08006214 <__sfp>:
 8006214:	00820074 	movhi	r2,2049
 8006218:	defffb04 	addi	sp,sp,-20
 800621c:	1087fb04 	addi	r2,r2,8172
 8006220:	dc800215 	stw	r18,8(sp)
 8006224:	14800017 	ldw	r18,0(r2)
 8006228:	dcc00315 	stw	r19,12(sp)
 800622c:	dfc00415 	stw	ra,16(sp)
 8006230:	90800e17 	ldw	r2,56(r18)
 8006234:	dc400115 	stw	r17,4(sp)
 8006238:	dc000015 	stw	r16,0(sp)
 800623c:	2027883a 	mov	r19,r4
 8006240:	1000021e 	bne	r2,zero,800624c <__sfp+0x38>
 8006244:	9009883a 	mov	r4,r18
 8006248:	8005ffc0 	call	8005ffc <__sinit.part.1>
 800624c:	9480b804 	addi	r18,r18,736
 8006250:	047fffc4 	movi	r17,-1
 8006254:	91400117 	ldw	r5,4(r18)
 8006258:	94000217 	ldw	r16,8(r18)
 800625c:	297fffc4 	addi	r5,r5,-1
 8006260:	28000a16 	blt	r5,zero,800628c <__sfp+0x78>
 8006264:	8080030f 	ldh	r2,12(r16)
 8006268:	10000c26 	beq	r2,zero,800629c <__sfp+0x88>
 800626c:	80c01d04 	addi	r3,r16,116
 8006270:	00000206 	br	800627c <__sfp+0x68>
 8006274:	18bfe60f 	ldh	r2,-104(r3)
 8006278:	10000826 	beq	r2,zero,800629c <__sfp+0x88>
 800627c:	297fffc4 	addi	r5,r5,-1
 8006280:	1c3ffd04 	addi	r16,r3,-12
 8006284:	18c01a04 	addi	r3,r3,104
 8006288:	2c7ffa1e 	bne	r5,r17,8006274 <__alt_data_end+0xfc006274>
 800628c:	90800017 	ldw	r2,0(r18)
 8006290:	10001d26 	beq	r2,zero,8006308 <__sfp+0xf4>
 8006294:	1025883a 	mov	r18,r2
 8006298:	003fee06 	br	8006254 <__alt_data_end+0xfc006254>
 800629c:	00bfffc4 	movi	r2,-1
 80062a0:	8080038d 	sth	r2,14(r16)
 80062a4:	00800044 	movi	r2,1
 80062a8:	8080030d 	sth	r2,12(r16)
 80062ac:	80001915 	stw	zero,100(r16)
 80062b0:	80000015 	stw	zero,0(r16)
 80062b4:	80000215 	stw	zero,8(r16)
 80062b8:	80000115 	stw	zero,4(r16)
 80062bc:	80000415 	stw	zero,16(r16)
 80062c0:	80000515 	stw	zero,20(r16)
 80062c4:	80000615 	stw	zero,24(r16)
 80062c8:	81001704 	addi	r4,r16,92
 80062cc:	000b883a 	mov	r5,zero
 80062d0:	01800204 	movi	r6,8
 80062d4:	8007b780 	call	8007b78 <memset>
 80062d8:	8005883a 	mov	r2,r16
 80062dc:	80000c15 	stw	zero,48(r16)
 80062e0:	80000d15 	stw	zero,52(r16)
 80062e4:	80001115 	stw	zero,68(r16)
 80062e8:	80001215 	stw	zero,72(r16)
 80062ec:	dfc00417 	ldw	ra,16(sp)
 80062f0:	dcc00317 	ldw	r19,12(sp)
 80062f4:	dc800217 	ldw	r18,8(sp)
 80062f8:	dc400117 	ldw	r17,4(sp)
 80062fc:	dc000017 	ldw	r16,0(sp)
 8006300:	dec00504 	addi	sp,sp,20
 8006304:	f800283a 	ret
 8006308:	9809883a 	mov	r4,r19
 800630c:	01400104 	movi	r5,4
 8006310:	800619c0 	call	800619c <__sfmoreglue>
 8006314:	90800015 	stw	r2,0(r18)
 8006318:	103fde1e 	bne	r2,zero,8006294 <__alt_data_end+0xfc006294>
 800631c:	00800304 	movi	r2,12
 8006320:	98800015 	stw	r2,0(r19)
 8006324:	0005883a 	mov	r2,zero
 8006328:	003ff006 	br	80062ec <__alt_data_end+0xfc0062ec>

0800632c <_cleanup>:
 800632c:	00820074 	movhi	r2,2049
 8006330:	1087fb04 	addi	r2,r2,8172
 8006334:	11000017 	ldw	r4,0(r2)
 8006338:	01420074 	movhi	r5,2049
 800633c:	296b4404 	addi	r5,r5,-21232
 8006340:	8006c4c1 	jmpi	8006c4c <_fwalk>

08006344 <__sinit>:
 8006344:	20800e17 	ldw	r2,56(r4)
 8006348:	10000126 	beq	r2,zero,8006350 <__sinit+0xc>
 800634c:	f800283a 	ret
 8006350:	8005ffc1 	jmpi	8005ffc <__sinit.part.1>

08006354 <__sfp_lock_acquire>:
 8006354:	f800283a 	ret

08006358 <__sfp_lock_release>:
 8006358:	f800283a 	ret

0800635c <__sinit_lock_acquire>:
 800635c:	f800283a 	ret

08006360 <__sinit_lock_release>:
 8006360:	f800283a 	ret

08006364 <__fp_lock_all>:
 8006364:	00820074 	movhi	r2,2049
 8006368:	1087fc04 	addi	r2,r2,8176
 800636c:	11000017 	ldw	r4,0(r2)
 8006370:	01420034 	movhi	r5,2048
 8006374:	2957f804 	addi	r5,r5,24544
 8006378:	8006c4c1 	jmpi	8006c4c <_fwalk>

0800637c <__fp_unlock_all>:
 800637c:	00820074 	movhi	r2,2049
 8006380:	1087fc04 	addi	r2,r2,8176
 8006384:	11000017 	ldw	r4,0(r2)
 8006388:	01420034 	movhi	r5,2048
 800638c:	2957fa04 	addi	r5,r5,24552
 8006390:	8006c4c1 	jmpi	8006c4c <_fwalk>

08006394 <_malloc_trim_r>:
 8006394:	defffb04 	addi	sp,sp,-20
 8006398:	dcc00315 	stw	r19,12(sp)
 800639c:	04c20074 	movhi	r19,2049
 80063a0:	dc800215 	stw	r18,8(sp)
 80063a4:	dc400115 	stw	r17,4(sp)
 80063a8:	dc000015 	stw	r16,0(sp)
 80063ac:	dfc00415 	stw	ra,16(sp)
 80063b0:	2821883a 	mov	r16,r5
 80063b4:	9cc26c04 	addi	r19,r19,2480
 80063b8:	2025883a 	mov	r18,r4
 80063bc:	800da900 	call	800da90 <__malloc_lock>
 80063c0:	98800217 	ldw	r2,8(r19)
 80063c4:	14400117 	ldw	r17,4(r2)
 80063c8:	00bfff04 	movi	r2,-4
 80063cc:	88a2703a 	and	r17,r17,r2
 80063d0:	8c21c83a 	sub	r16,r17,r16
 80063d4:	8403fbc4 	addi	r16,r16,4079
 80063d8:	8020d33a 	srli	r16,r16,12
 80063dc:	0083ffc4 	movi	r2,4095
 80063e0:	843fffc4 	addi	r16,r16,-1
 80063e4:	8020933a 	slli	r16,r16,12
 80063e8:	1400060e 	bge	r2,r16,8006404 <_malloc_trim_r+0x70>
 80063ec:	9009883a 	mov	r4,r18
 80063f0:	000b883a 	mov	r5,zero
 80063f4:	80092f80 	call	80092f8 <_sbrk_r>
 80063f8:	98c00217 	ldw	r3,8(r19)
 80063fc:	1c47883a 	add	r3,r3,r17
 8006400:	10c00a26 	beq	r2,r3,800642c <_malloc_trim_r+0x98>
 8006404:	9009883a 	mov	r4,r18
 8006408:	800dab00 	call	800dab0 <__malloc_unlock>
 800640c:	0005883a 	mov	r2,zero
 8006410:	dfc00417 	ldw	ra,16(sp)
 8006414:	dcc00317 	ldw	r19,12(sp)
 8006418:	dc800217 	ldw	r18,8(sp)
 800641c:	dc400117 	ldw	r17,4(sp)
 8006420:	dc000017 	ldw	r16,0(sp)
 8006424:	dec00504 	addi	sp,sp,20
 8006428:	f800283a 	ret
 800642c:	9009883a 	mov	r4,r18
 8006430:	040bc83a 	sub	r5,zero,r16
 8006434:	80092f80 	call	80092f8 <_sbrk_r>
 8006438:	00ffffc4 	movi	r3,-1
 800643c:	10c00d26 	beq	r2,r3,8006474 <_malloc_trim_r+0xe0>
 8006440:	00c20074 	movhi	r3,2049
 8006444:	18cede04 	addi	r3,r3,15224
 8006448:	18800017 	ldw	r2,0(r3)
 800644c:	99000217 	ldw	r4,8(r19)
 8006450:	8c23c83a 	sub	r17,r17,r16
 8006454:	8c400054 	ori	r17,r17,1
 8006458:	1421c83a 	sub	r16,r2,r16
 800645c:	24400115 	stw	r17,4(r4)
 8006460:	9009883a 	mov	r4,r18
 8006464:	1c000015 	stw	r16,0(r3)
 8006468:	800dab00 	call	800dab0 <__malloc_unlock>
 800646c:	00800044 	movi	r2,1
 8006470:	003fe706 	br	8006410 <__alt_data_end+0xfc006410>
 8006474:	9009883a 	mov	r4,r18
 8006478:	000b883a 	mov	r5,zero
 800647c:	80092f80 	call	80092f8 <_sbrk_r>
 8006480:	99000217 	ldw	r4,8(r19)
 8006484:	014003c4 	movi	r5,15
 8006488:	1107c83a 	sub	r3,r2,r4
 800648c:	28ffdd0e 	bge	r5,r3,8006404 <__alt_data_end+0xfc006404>
 8006490:	01420074 	movhi	r5,2049
 8006494:	2947fe04 	addi	r5,r5,8184
 8006498:	29400017 	ldw	r5,0(r5)
 800649c:	18c00054 	ori	r3,r3,1
 80064a0:	20c00115 	stw	r3,4(r4)
 80064a4:	00c20074 	movhi	r3,2049
 80064a8:	1145c83a 	sub	r2,r2,r5
 80064ac:	18cede04 	addi	r3,r3,15224
 80064b0:	18800015 	stw	r2,0(r3)
 80064b4:	003fd306 	br	8006404 <__alt_data_end+0xfc006404>

080064b8 <_free_r>:
 80064b8:	28004c26 	beq	r5,zero,80065ec <_free_r+0x134>
 80064bc:	defffd04 	addi	sp,sp,-12
 80064c0:	dc400115 	stw	r17,4(sp)
 80064c4:	dc000015 	stw	r16,0(sp)
 80064c8:	2023883a 	mov	r17,r4
 80064cc:	2821883a 	mov	r16,r5
 80064d0:	dfc00215 	stw	ra,8(sp)
 80064d4:	800da900 	call	800da90 <__malloc_lock>
 80064d8:	813fff17 	ldw	r4,-4(r16)
 80064dc:	00bfff84 	movi	r2,-2
 80064e0:	02420074 	movhi	r9,2049
 80064e4:	81bffe04 	addi	r6,r16,-8
 80064e8:	2084703a 	and	r2,r4,r2
 80064ec:	4a426c04 	addi	r9,r9,2480
 80064f0:	308b883a 	add	r5,r6,r2
 80064f4:	2a000117 	ldw	r8,4(r5)
 80064f8:	49c00217 	ldw	r7,8(r9)
 80064fc:	00ffff04 	movi	r3,-4
 8006500:	40c6703a 	and	r3,r8,r3
 8006504:	39405326 	beq	r7,r5,8006654 <_free_r+0x19c>
 8006508:	28c00115 	stw	r3,4(r5)
 800650c:	2100004c 	andi	r4,r4,1
 8006510:	2000091e 	bne	r4,zero,8006538 <_free_r+0x80>
 8006514:	81fffe17 	ldw	r7,-8(r16)
 8006518:	4a000204 	addi	r8,r9,8
 800651c:	31cdc83a 	sub	r6,r6,r7
 8006520:	31000217 	ldw	r4,8(r6)
 8006524:	11c5883a 	add	r2,r2,r7
 8006528:	22006126 	beq	r4,r8,80066b0 <_free_r+0x1f8>
 800652c:	31c00317 	ldw	r7,12(r6)
 8006530:	21c00315 	stw	r7,12(r4)
 8006534:	39000215 	stw	r4,8(r7)
 8006538:	28c9883a 	add	r4,r5,r3
 800653c:	21c00117 	ldw	r7,4(r4)
 8006540:	39c0004c 	andi	r7,r7,1
 8006544:	38000d1e 	bne	r7,zero,800657c <_free_r+0xc4>
 8006548:	29000217 	ldw	r4,8(r5)
 800654c:	10c5883a 	add	r2,r2,r3
 8006550:	00c20074 	movhi	r3,2049
 8006554:	18c26e04 	addi	r3,r3,2488
 8006558:	20c07526 	beq	r4,r3,8006730 <_free_r+0x278>
 800655c:	29c00317 	ldw	r7,12(r5)
 8006560:	11400054 	ori	r5,r2,1
 8006564:	3087883a 	add	r3,r6,r2
 8006568:	21c00315 	stw	r7,12(r4)
 800656c:	39000215 	stw	r4,8(r7)
 8006570:	31400115 	stw	r5,4(r6)
 8006574:	18800015 	stw	r2,0(r3)
 8006578:	00000406 	br	800658c <_free_r+0xd4>
 800657c:	10c00054 	ori	r3,r2,1
 8006580:	30c00115 	stw	r3,4(r6)
 8006584:	3087883a 	add	r3,r6,r2
 8006588:	18800015 	stw	r2,0(r3)
 800658c:	00c07fc4 	movi	r3,511
 8006590:	18801736 	bltu	r3,r2,80065f0 <_free_r+0x138>
 8006594:	1004d0fa 	srli	r2,r2,3
 8006598:	01400044 	movi	r5,1
 800659c:	49000117 	ldw	r4,4(r9)
 80065a0:	1087883a 	add	r3,r2,r2
 80065a4:	18c7883a 	add	r3,r3,r3
 80065a8:	1005d0ba 	srai	r2,r2,2
 80065ac:	18c7883a 	add	r3,r3,r3
 80065b0:	1a47883a 	add	r3,r3,r9
 80065b4:	19c00217 	ldw	r7,8(r3)
 80065b8:	2884983a 	sll	r2,r5,r2
 80065bc:	30c00315 	stw	r3,12(r6)
 80065c0:	31c00215 	stw	r7,8(r6)
 80065c4:	1104b03a 	or	r2,r2,r4
 80065c8:	19800215 	stw	r6,8(r3)
 80065cc:	48800115 	stw	r2,4(r9)
 80065d0:	39800315 	stw	r6,12(r7)
 80065d4:	8809883a 	mov	r4,r17
 80065d8:	dfc00217 	ldw	ra,8(sp)
 80065dc:	dc400117 	ldw	r17,4(sp)
 80065e0:	dc000017 	ldw	r16,0(sp)
 80065e4:	dec00304 	addi	sp,sp,12
 80065e8:	800dab01 	jmpi	800dab0 <__malloc_unlock>
 80065ec:	f800283a 	ret
 80065f0:	1006d27a 	srli	r3,r2,9
 80065f4:	01000104 	movi	r4,4
 80065f8:	20c04036 	bltu	r4,r3,80066fc <_free_r+0x244>
 80065fc:	1006d1ba 	srli	r3,r2,6
 8006600:	19400e04 	addi	r5,r3,56
 8006604:	2947883a 	add	r3,r5,r5
 8006608:	18c7883a 	add	r3,r3,r3
 800660c:	18c7883a 	add	r3,r3,r3
 8006610:	1a49883a 	add	r4,r3,r9
 8006614:	20c00217 	ldw	r3,8(r4)
 8006618:	01c20074 	movhi	r7,2049
 800661c:	39c26c04 	addi	r7,r7,2480
 8006620:	19003b26 	beq	r3,r4,8006710 <_free_r+0x258>
 8006624:	01ffff04 	movi	r7,-4
 8006628:	19400117 	ldw	r5,4(r3)
 800662c:	29ca703a 	and	r5,r5,r7
 8006630:	1140022e 	bgeu	r2,r5,800663c <_free_r+0x184>
 8006634:	18c00217 	ldw	r3,8(r3)
 8006638:	20fffb1e 	bne	r4,r3,8006628 <__alt_data_end+0xfc006628>
 800663c:	18800317 	ldw	r2,12(r3)
 8006640:	30800315 	stw	r2,12(r6)
 8006644:	30c00215 	stw	r3,8(r6)
 8006648:	11800215 	stw	r6,8(r2)
 800664c:	19800315 	stw	r6,12(r3)
 8006650:	003fe006 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006654:	2100004c 	andi	r4,r4,1
 8006658:	1885883a 	add	r2,r3,r2
 800665c:	2000071e 	bne	r4,zero,800667c <_free_r+0x1c4>
 8006660:	817ffe17 	ldw	r5,-8(r16)
 8006664:	314dc83a 	sub	r6,r6,r5
 8006668:	30c00317 	ldw	r3,12(r6)
 800666c:	31000217 	ldw	r4,8(r6)
 8006670:	1145883a 	add	r2,r2,r5
 8006674:	20c00315 	stw	r3,12(r4)
 8006678:	19000215 	stw	r4,8(r3)
 800667c:	10c00054 	ori	r3,r2,1
 8006680:	30c00115 	stw	r3,4(r6)
 8006684:	00c20074 	movhi	r3,2049
 8006688:	18c7ff04 	addi	r3,r3,8188
 800668c:	18c00017 	ldw	r3,0(r3)
 8006690:	49800215 	stw	r6,8(r9)
 8006694:	10ffcf36 	bltu	r2,r3,80065d4 <__alt_data_end+0xfc0065d4>
 8006698:	00820074 	movhi	r2,2049
 800669c:	108ed604 	addi	r2,r2,15192
 80066a0:	11400017 	ldw	r5,0(r2)
 80066a4:	8809883a 	mov	r4,r17
 80066a8:	80063940 	call	8006394 <_malloc_trim_r>
 80066ac:	003fc906 	br	80065d4 <__alt_data_end+0xfc0065d4>
 80066b0:	28c9883a 	add	r4,r5,r3
 80066b4:	21000117 	ldw	r4,4(r4)
 80066b8:	2100004c 	andi	r4,r4,1
 80066bc:	20000a1e 	bne	r4,zero,80066e8 <_free_r+0x230>
 80066c0:	29000317 	ldw	r4,12(r5)
 80066c4:	29400217 	ldw	r5,8(r5)
 80066c8:	10c5883a 	add	r2,r2,r3
 80066cc:	10c00054 	ori	r3,r2,1
 80066d0:	29000315 	stw	r4,12(r5)
 80066d4:	21400215 	stw	r5,8(r4)
 80066d8:	30c00115 	stw	r3,4(r6)
 80066dc:	308d883a 	add	r6,r6,r2
 80066e0:	30800015 	stw	r2,0(r6)
 80066e4:	003fbb06 	br	80065d4 <__alt_data_end+0xfc0065d4>
 80066e8:	10c00054 	ori	r3,r2,1
 80066ec:	30c00115 	stw	r3,4(r6)
 80066f0:	308d883a 	add	r6,r6,r2
 80066f4:	30800015 	stw	r2,0(r6)
 80066f8:	003fb606 	br	80065d4 <__alt_data_end+0xfc0065d4>
 80066fc:	01000504 	movi	r4,20
 8006700:	20c01436 	bltu	r4,r3,8006754 <_free_r+0x29c>
 8006704:	194016c4 	addi	r5,r3,91
 8006708:	2947883a 	add	r3,r5,r5
 800670c:	003fbe06 	br	8006608 <__alt_data_end+0xfc006608>
 8006710:	280bd0ba 	srai	r5,r5,2
 8006714:	00800044 	movi	r2,1
 8006718:	39000117 	ldw	r4,4(r7)
 800671c:	114a983a 	sll	r5,r2,r5
 8006720:	1805883a 	mov	r2,r3
 8006724:	2908b03a 	or	r4,r5,r4
 8006728:	39000115 	stw	r4,4(r7)
 800672c:	003fc406 	br	8006640 <__alt_data_end+0xfc006640>
 8006730:	49800515 	stw	r6,20(r9)
 8006734:	49800415 	stw	r6,16(r9)
 8006738:	10c00054 	ori	r3,r2,1
 800673c:	31000315 	stw	r4,12(r6)
 8006740:	31000215 	stw	r4,8(r6)
 8006744:	30c00115 	stw	r3,4(r6)
 8006748:	308d883a 	add	r6,r6,r2
 800674c:	30800015 	stw	r2,0(r6)
 8006750:	003fa006 	br	80065d4 <__alt_data_end+0xfc0065d4>
 8006754:	01001504 	movi	r4,84
 8006758:	20c00436 	bltu	r4,r3,800676c <_free_r+0x2b4>
 800675c:	1006d33a 	srli	r3,r2,12
 8006760:	19401b84 	addi	r5,r3,110
 8006764:	2947883a 	add	r3,r5,r5
 8006768:	003fa706 	br	8006608 <__alt_data_end+0xfc006608>
 800676c:	01005504 	movi	r4,340
 8006770:	20c00436 	bltu	r4,r3,8006784 <_free_r+0x2cc>
 8006774:	1006d3fa 	srli	r3,r2,15
 8006778:	19401dc4 	addi	r5,r3,119
 800677c:	2947883a 	add	r3,r5,r5
 8006780:	003fa106 	br	8006608 <__alt_data_end+0xfc006608>
 8006784:	01015504 	movi	r4,1364
 8006788:	20c00436 	bltu	r4,r3,800679c <_free_r+0x2e4>
 800678c:	1006d4ba 	srli	r3,r2,18
 8006790:	19401f04 	addi	r5,r3,124
 8006794:	2947883a 	add	r3,r5,r5
 8006798:	003f9b06 	br	8006608 <__alt_data_end+0xfc006608>
 800679c:	00c03f04 	movi	r3,252
 80067a0:	01401f84 	movi	r5,126
 80067a4:	003f9806 	br	8006608 <__alt_data_end+0xfc006608>

080067a8 <__sfvwrite_r>:
 80067a8:	30800217 	ldw	r2,8(r6)
 80067ac:	10004526 	beq	r2,zero,80068c4 <__sfvwrite_r+0x11c>
 80067b0:	28c0030b 	ldhu	r3,12(r5)
 80067b4:	defff404 	addi	sp,sp,-48
 80067b8:	dd400715 	stw	r21,28(sp)
 80067bc:	dcc00515 	stw	r19,20(sp)
 80067c0:	dc000215 	stw	r16,8(sp)
 80067c4:	dfc00b15 	stw	ra,44(sp)
 80067c8:	df000a15 	stw	fp,40(sp)
 80067cc:	ddc00915 	stw	r23,36(sp)
 80067d0:	dd800815 	stw	r22,32(sp)
 80067d4:	dd000615 	stw	r20,24(sp)
 80067d8:	dc800415 	stw	r18,16(sp)
 80067dc:	dc400315 	stw	r17,12(sp)
 80067e0:	1880020c 	andi	r2,r3,8
 80067e4:	2821883a 	mov	r16,r5
 80067e8:	202b883a 	mov	r21,r4
 80067ec:	3027883a 	mov	r19,r6
 80067f0:	10002526 	beq	r2,zero,8006888 <__sfvwrite_r+0xe0>
 80067f4:	28800417 	ldw	r2,16(r5)
 80067f8:	10002326 	beq	r2,zero,8006888 <__sfvwrite_r+0xe0>
 80067fc:	1880008c 	andi	r2,r3,2
 8006800:	9c400017 	ldw	r17,0(r19)
 8006804:	10003126 	beq	r2,zero,80068cc <__sfvwrite_r+0x124>
 8006808:	0029883a 	mov	r20,zero
 800680c:	0025883a 	mov	r18,zero
 8006810:	05810004 	movi	r22,1024
 8006814:	a00d883a 	mov	r6,r20
 8006818:	a809883a 	mov	r4,r21
 800681c:	90002526 	beq	r18,zero,80068b4 <__sfvwrite_r+0x10c>
 8006820:	900f883a 	mov	r7,r18
 8006824:	81400717 	ldw	r5,28(r16)
 8006828:	b480012e 	bgeu	r22,r18,8006830 <__sfvwrite_r+0x88>
 800682c:	01c10004 	movi	r7,1024
 8006830:	80800917 	ldw	r2,36(r16)
 8006834:	103ee83a 	callr	r2
 8006838:	0080510e 	bge	zero,r2,8006980 <__sfvwrite_r+0x1d8>
 800683c:	98c00217 	ldw	r3,8(r19)
 8006840:	a0a9883a 	add	r20,r20,r2
 8006844:	90a5c83a 	sub	r18,r18,r2
 8006848:	1885c83a 	sub	r2,r3,r2
 800684c:	98800215 	stw	r2,8(r19)
 8006850:	103ff01e 	bne	r2,zero,8006814 <__alt_data_end+0xfc006814>
 8006854:	0005883a 	mov	r2,zero
 8006858:	dfc00b17 	ldw	ra,44(sp)
 800685c:	df000a17 	ldw	fp,40(sp)
 8006860:	ddc00917 	ldw	r23,36(sp)
 8006864:	dd800817 	ldw	r22,32(sp)
 8006868:	dd400717 	ldw	r21,28(sp)
 800686c:	dd000617 	ldw	r20,24(sp)
 8006870:	dcc00517 	ldw	r19,20(sp)
 8006874:	dc800417 	ldw	r18,16(sp)
 8006878:	dc400317 	ldw	r17,12(sp)
 800687c:	dc000217 	ldw	r16,8(sp)
 8006880:	dec00c04 	addi	sp,sp,48
 8006884:	f800283a 	ret
 8006888:	a809883a 	mov	r4,r21
 800688c:	800b883a 	mov	r5,r16
 8006890:	80043080 	call	8004308 <__swsetup_r>
 8006894:	80c0030b 	ldhu	r3,12(r16)
 8006898:	103fd826 	beq	r2,zero,80067fc <__alt_data_end+0xfc0067fc>
 800689c:	18c01014 	ori	r3,r3,64
 80068a0:	80c0030d 	sth	r3,12(r16)
 80068a4:	00c00244 	movi	r3,9
 80068a8:	00bfffc4 	movi	r2,-1
 80068ac:	a8c00015 	stw	r3,0(r21)
 80068b0:	003fe906 	br	8006858 <__alt_data_end+0xfc006858>
 80068b4:	8d000017 	ldw	r20,0(r17)
 80068b8:	8c800117 	ldw	r18,4(r17)
 80068bc:	8c400204 	addi	r17,r17,8
 80068c0:	003fd406 	br	8006814 <__alt_data_end+0xfc006814>
 80068c4:	0005883a 	mov	r2,zero
 80068c8:	f800283a 	ret
 80068cc:	1880004c 	andi	r2,r3,1
 80068d0:	1000301e 	bne	r2,zero,8006994 <__sfvwrite_r+0x1ec>
 80068d4:	002f883a 	mov	r23,zero
 80068d8:	0025883a 	mov	r18,zero
 80068dc:	90001c26 	beq	r18,zero,8006950 <__sfvwrite_r+0x1a8>
 80068e0:	1880800c 	andi	r2,r3,512
 80068e4:	85000217 	ldw	r20,8(r16)
 80068e8:	10006c26 	beq	r2,zero,8006a9c <__sfvwrite_r+0x2f4>
 80068ec:	a02d883a 	mov	r22,r20
 80068f0:	95008536 	bltu	r18,r20,8006b08 <__sfvwrite_r+0x360>
 80068f4:	1881200c 	andi	r2,r3,1152
 80068f8:	10009d1e 	bne	r2,zero,8006b70 <__sfvwrite_r+0x3c8>
 80068fc:	81000017 	ldw	r4,0(r16)
 8006900:	a039883a 	mov	fp,r20
 8006904:	9029883a 	mov	r20,r18
 8006908:	b80b883a 	mov	r5,r23
 800690c:	b00d883a 	mov	r6,r22
 8006910:	8007a1c0 	call	8007a1c <memmove>
 8006914:	80c00217 	ldw	r3,8(r16)
 8006918:	81000017 	ldw	r4,0(r16)
 800691c:	9005883a 	mov	r2,r18
 8006920:	1f39c83a 	sub	fp,r3,fp
 8006924:	258f883a 	add	r7,r4,r22
 8006928:	87000215 	stw	fp,8(r16)
 800692c:	81c00015 	stw	r7,0(r16)
 8006930:	98c00217 	ldw	r3,8(r19)
 8006934:	b8af883a 	add	r23,r23,r2
 8006938:	90a5c83a 	sub	r18,r18,r2
 800693c:	1d05c83a 	sub	r2,r3,r20
 8006940:	98800215 	stw	r2,8(r19)
 8006944:	103fc326 	beq	r2,zero,8006854 <__alt_data_end+0xfc006854>
 8006948:	80c0030b 	ldhu	r3,12(r16)
 800694c:	903fe41e 	bne	r18,zero,80068e0 <__alt_data_end+0xfc0068e0>
 8006950:	8dc00017 	ldw	r23,0(r17)
 8006954:	8c800117 	ldw	r18,4(r17)
 8006958:	8c400204 	addi	r17,r17,8
 800695c:	003fdf06 	br	80068dc <__alt_data_end+0xfc0068dc>
 8006960:	8008ce40 	call	8008ce4 <_realloc_r>
 8006964:	102d883a 	mov	r22,r2
 8006968:	1000a01e 	bne	r2,zero,8006bec <__sfvwrite_r+0x444>
 800696c:	81400417 	ldw	r5,16(r16)
 8006970:	a809883a 	mov	r4,r21
 8006974:	80064b80 	call	80064b8 <_free_r>
 8006978:	00800304 	movi	r2,12
 800697c:	a8800015 	stw	r2,0(r21)
 8006980:	80c0030b 	ldhu	r3,12(r16)
 8006984:	00bfffc4 	movi	r2,-1
 8006988:	18c01014 	ori	r3,r3,64
 800698c:	80c0030d 	sth	r3,12(r16)
 8006990:	003fb106 	br	8006858 <__alt_data_end+0xfc006858>
 8006994:	0029883a 	mov	r20,zero
 8006998:	0011883a 	mov	r8,zero
 800699c:	0039883a 	mov	fp,zero
 80069a0:	0025883a 	mov	r18,zero
 80069a4:	90001f26 	beq	r18,zero,8006a24 <__sfvwrite_r+0x27c>
 80069a8:	40006826 	beq	r8,zero,8006b4c <__sfvwrite_r+0x3a4>
 80069ac:	a02f883a 	mov	r23,r20
 80069b0:	9500012e 	bgeu	r18,r20,80069b8 <__sfvwrite_r+0x210>
 80069b4:	902f883a 	mov	r23,r18
 80069b8:	81000017 	ldw	r4,0(r16)
 80069bc:	80800417 	ldw	r2,16(r16)
 80069c0:	b82d883a 	mov	r22,r23
 80069c4:	81800217 	ldw	r6,8(r16)
 80069c8:	81c00517 	ldw	r7,20(r16)
 80069cc:	1100022e 	bgeu	r2,r4,80069d8 <__sfvwrite_r+0x230>
 80069d0:	31c7883a 	add	r3,r6,r7
 80069d4:	1dc01816 	blt	r3,r23,8006a38 <__sfvwrite_r+0x290>
 80069d8:	b9c03f16 	blt	r23,r7,8006ad8 <__sfvwrite_r+0x330>
 80069dc:	80800917 	ldw	r2,36(r16)
 80069e0:	81400717 	ldw	r5,28(r16)
 80069e4:	a809883a 	mov	r4,r21
 80069e8:	da000115 	stw	r8,4(sp)
 80069ec:	e00d883a 	mov	r6,fp
 80069f0:	103ee83a 	callr	r2
 80069f4:	102d883a 	mov	r22,r2
 80069f8:	da000117 	ldw	r8,4(sp)
 80069fc:	00bfe00e 	bge	zero,r2,8006980 <__alt_data_end+0xfc006980>
 8006a00:	a5a9c83a 	sub	r20,r20,r22
 8006a04:	a0001f26 	beq	r20,zero,8006a84 <__sfvwrite_r+0x2dc>
 8006a08:	98800217 	ldw	r2,8(r19)
 8006a0c:	e5b9883a 	add	fp,fp,r22
 8006a10:	95a5c83a 	sub	r18,r18,r22
 8006a14:	15adc83a 	sub	r22,r2,r22
 8006a18:	9d800215 	stw	r22,8(r19)
 8006a1c:	b03f8d26 	beq	r22,zero,8006854 <__alt_data_end+0xfc006854>
 8006a20:	903fe11e 	bne	r18,zero,80069a8 <__alt_data_end+0xfc0069a8>
 8006a24:	8f000017 	ldw	fp,0(r17)
 8006a28:	8c800117 	ldw	r18,4(r17)
 8006a2c:	0011883a 	mov	r8,zero
 8006a30:	8c400204 	addi	r17,r17,8
 8006a34:	003fdb06 	br	80069a4 <__alt_data_end+0xfc0069a4>
 8006a38:	180d883a 	mov	r6,r3
 8006a3c:	e00b883a 	mov	r5,fp
 8006a40:	da000115 	stw	r8,4(sp)
 8006a44:	d8c00015 	stw	r3,0(sp)
 8006a48:	8007a1c0 	call	8007a1c <memmove>
 8006a4c:	d8c00017 	ldw	r3,0(sp)
 8006a50:	80800017 	ldw	r2,0(r16)
 8006a54:	a809883a 	mov	r4,r21
 8006a58:	800b883a 	mov	r5,r16
 8006a5c:	10c5883a 	add	r2,r2,r3
 8006a60:	80800015 	stw	r2,0(r16)
 8006a64:	d8c00015 	stw	r3,0(sp)
 8006a68:	8005d880 	call	8005d88 <_fflush_r>
 8006a6c:	d8c00017 	ldw	r3,0(sp)
 8006a70:	da000117 	ldw	r8,4(sp)
 8006a74:	103fc21e 	bne	r2,zero,8006980 <__alt_data_end+0xfc006980>
 8006a78:	182d883a 	mov	r22,r3
 8006a7c:	a5a9c83a 	sub	r20,r20,r22
 8006a80:	a03fe11e 	bne	r20,zero,8006a08 <__alt_data_end+0xfc006a08>
 8006a84:	a809883a 	mov	r4,r21
 8006a88:	800b883a 	mov	r5,r16
 8006a8c:	8005d880 	call	8005d88 <_fflush_r>
 8006a90:	103fbb1e 	bne	r2,zero,8006980 <__alt_data_end+0xfc006980>
 8006a94:	0011883a 	mov	r8,zero
 8006a98:	003fdb06 	br	8006a08 <__alt_data_end+0xfc006a08>
 8006a9c:	81000017 	ldw	r4,0(r16)
 8006aa0:	80800417 	ldw	r2,16(r16)
 8006aa4:	1100012e 	bgeu	r2,r4,8006aac <__sfvwrite_r+0x304>
 8006aa8:	a4805a36 	bltu	r20,r18,8006c14 <__sfvwrite_r+0x46c>
 8006aac:	81c00517 	ldw	r7,20(r16)
 8006ab0:	91c01a36 	bltu	r18,r7,8006b1c <__sfvwrite_r+0x374>
 8006ab4:	80800917 	ldw	r2,36(r16)
 8006ab8:	81400717 	ldw	r5,28(r16)
 8006abc:	a809883a 	mov	r4,r21
 8006ac0:	b80d883a 	mov	r6,r23
 8006ac4:	103ee83a 	callr	r2
 8006ac8:	1029883a 	mov	r20,r2
 8006acc:	00bfac0e 	bge	zero,r2,8006980 <__alt_data_end+0xfc006980>
 8006ad0:	a005883a 	mov	r2,r20
 8006ad4:	003f9606 	br	8006930 <__alt_data_end+0xfc006930>
 8006ad8:	b80d883a 	mov	r6,r23
 8006adc:	e00b883a 	mov	r5,fp
 8006ae0:	da000115 	stw	r8,4(sp)
 8006ae4:	8007a1c0 	call	8007a1c <memmove>
 8006ae8:	80800217 	ldw	r2,8(r16)
 8006aec:	80c00017 	ldw	r3,0(r16)
 8006af0:	da000117 	ldw	r8,4(sp)
 8006af4:	15c5c83a 	sub	r2,r2,r23
 8006af8:	1def883a 	add	r23,r3,r23
 8006afc:	80800215 	stw	r2,8(r16)
 8006b00:	85c00015 	stw	r23,0(r16)
 8006b04:	003fbe06 	br	8006a00 <__alt_data_end+0xfc006a00>
 8006b08:	81000017 	ldw	r4,0(r16)
 8006b0c:	9039883a 	mov	fp,r18
 8006b10:	9029883a 	mov	r20,r18
 8006b14:	902d883a 	mov	r22,r18
 8006b18:	003f7b06 	br	8006908 <__alt_data_end+0xfc006908>
 8006b1c:	b80b883a 	mov	r5,r23
 8006b20:	900d883a 	mov	r6,r18
 8006b24:	8007a1c0 	call	8007a1c <memmove>
 8006b28:	80c00217 	ldw	r3,8(r16)
 8006b2c:	80800017 	ldw	r2,0(r16)
 8006b30:	9029883a 	mov	r20,r18
 8006b34:	1c87c83a 	sub	r3,r3,r18
 8006b38:	1485883a 	add	r2,r2,r18
 8006b3c:	80800015 	stw	r2,0(r16)
 8006b40:	80c00215 	stw	r3,8(r16)
 8006b44:	9005883a 	mov	r2,r18
 8006b48:	003f7906 	br	8006930 <__alt_data_end+0xfc006930>
 8006b4c:	e009883a 	mov	r4,fp
 8006b50:	01400284 	movi	r5,10
 8006b54:	900d883a 	mov	r6,r18
 8006b58:	80077fc0 	call	80077fc <memchr>
 8006b5c:	10003826 	beq	r2,zero,8006c40 <__sfvwrite_r+0x498>
 8006b60:	10800044 	addi	r2,r2,1
 8006b64:	1729c83a 	sub	r20,r2,fp
 8006b68:	02000044 	movi	r8,1
 8006b6c:	003f8f06 	br	80069ac <__alt_data_end+0xfc0069ac>
 8006b70:	80800517 	ldw	r2,20(r16)
 8006b74:	81400417 	ldw	r5,16(r16)
 8006b78:	87000017 	ldw	fp,0(r16)
 8006b7c:	10a9883a 	add	r20,r2,r2
 8006b80:	a085883a 	add	r2,r20,r2
 8006b84:	1028d7fa 	srli	r20,r2,31
 8006b88:	e179c83a 	sub	fp,fp,r5
 8006b8c:	e1000044 	addi	r4,fp,1
 8006b90:	a085883a 	add	r2,r20,r2
 8006b94:	1029d07a 	srai	r20,r2,1
 8006b98:	2485883a 	add	r2,r4,r18
 8006b9c:	a00d883a 	mov	r6,r20
 8006ba0:	a080022e 	bgeu	r20,r2,8006bac <__sfvwrite_r+0x404>
 8006ba4:	1029883a 	mov	r20,r2
 8006ba8:	100d883a 	mov	r6,r2
 8006bac:	18c1000c 	andi	r3,r3,1024
 8006bb0:	a809883a 	mov	r4,r21
 8006bb4:	183f6a26 	beq	r3,zero,8006960 <__alt_data_end+0xfc006960>
 8006bb8:	300b883a 	mov	r5,r6
 8006bbc:	80070540 	call	8007054 <_malloc_r>
 8006bc0:	102d883a 	mov	r22,r2
 8006bc4:	103f6c26 	beq	r2,zero,8006978 <__alt_data_end+0xfc006978>
 8006bc8:	81400417 	ldw	r5,16(r16)
 8006bcc:	1009883a 	mov	r4,r2
 8006bd0:	e00d883a 	mov	r6,fp
 8006bd4:	80078e40 	call	80078e4 <memcpy>
 8006bd8:	8080030b 	ldhu	r2,12(r16)
 8006bdc:	00fedfc4 	movi	r3,-1153
 8006be0:	10c4703a 	and	r2,r2,r3
 8006be4:	10802014 	ori	r2,r2,128
 8006be8:	8080030d 	sth	r2,12(r16)
 8006bec:	b709883a 	add	r4,r22,fp
 8006bf0:	a707c83a 	sub	r3,r20,fp
 8006bf4:	85800415 	stw	r22,16(r16)
 8006bf8:	85000515 	stw	r20,20(r16)
 8006bfc:	81000015 	stw	r4,0(r16)
 8006c00:	9039883a 	mov	fp,r18
 8006c04:	80c00215 	stw	r3,8(r16)
 8006c08:	9029883a 	mov	r20,r18
 8006c0c:	902d883a 	mov	r22,r18
 8006c10:	003f3d06 	br	8006908 <__alt_data_end+0xfc006908>
 8006c14:	b80b883a 	mov	r5,r23
 8006c18:	a00d883a 	mov	r6,r20
 8006c1c:	8007a1c0 	call	8007a1c <memmove>
 8006c20:	80800017 	ldw	r2,0(r16)
 8006c24:	a809883a 	mov	r4,r21
 8006c28:	800b883a 	mov	r5,r16
 8006c2c:	1505883a 	add	r2,r2,r20
 8006c30:	80800015 	stw	r2,0(r16)
 8006c34:	8005d880 	call	8005d88 <_fflush_r>
 8006c38:	103fa526 	beq	r2,zero,8006ad0 <__alt_data_end+0xfc006ad0>
 8006c3c:	003f5006 	br	8006980 <__alt_data_end+0xfc006980>
 8006c40:	95000044 	addi	r20,r18,1
 8006c44:	02000044 	movi	r8,1
 8006c48:	003f5806 	br	80069ac <__alt_data_end+0xfc0069ac>

08006c4c <_fwalk>:
 8006c4c:	defff804 	addi	sp,sp,-32
 8006c50:	dd400515 	stw	r21,20(sp)
 8006c54:	2540b804 	addi	r21,r4,736
 8006c58:	dd800615 	stw	r22,24(sp)
 8006c5c:	dd000415 	stw	r20,16(sp)
 8006c60:	dfc00715 	stw	ra,28(sp)
 8006c64:	dcc00315 	stw	r19,12(sp)
 8006c68:	dc800215 	stw	r18,8(sp)
 8006c6c:	dc400115 	stw	r17,4(sp)
 8006c70:	dc000015 	stw	r16,0(sp)
 8006c74:	2829883a 	mov	r20,r5
 8006c78:	002d883a 	mov	r22,zero
 8006c7c:	80063540 	call	8006354 <__sfp_lock_acquire>
 8006c80:	a8001426 	beq	r21,zero,8006cd4 <_fwalk+0x88>
 8006c84:	04ffffc4 	movi	r19,-1
 8006c88:	ac400117 	ldw	r17,4(r21)
 8006c8c:	ac800217 	ldw	r18,8(r21)
 8006c90:	8c7fffc4 	addi	r17,r17,-1
 8006c94:	88000d16 	blt	r17,zero,8006ccc <_fwalk+0x80>
 8006c98:	94000304 	addi	r16,r18,12
 8006c9c:	94800384 	addi	r18,r18,14
 8006ca0:	80c0000f 	ldh	r3,0(r16)
 8006ca4:	8c7fffc4 	addi	r17,r17,-1
 8006ca8:	813ffd04 	addi	r4,r16,-12
 8006cac:	18000426 	beq	r3,zero,8006cc0 <_fwalk+0x74>
 8006cb0:	90c0000f 	ldh	r3,0(r18)
 8006cb4:	1cc00226 	beq	r3,r19,8006cc0 <_fwalk+0x74>
 8006cb8:	a03ee83a 	callr	r20
 8006cbc:	b0acb03a 	or	r22,r22,r2
 8006cc0:	84001a04 	addi	r16,r16,104
 8006cc4:	94801a04 	addi	r18,r18,104
 8006cc8:	8cfff51e 	bne	r17,r19,8006ca0 <__alt_data_end+0xfc006ca0>
 8006ccc:	ad400017 	ldw	r21,0(r21)
 8006cd0:	a83fed1e 	bne	r21,zero,8006c88 <__alt_data_end+0xfc006c88>
 8006cd4:	80063580 	call	8006358 <__sfp_lock_release>
 8006cd8:	b005883a 	mov	r2,r22
 8006cdc:	dfc00717 	ldw	ra,28(sp)
 8006ce0:	dd800617 	ldw	r22,24(sp)
 8006ce4:	dd400517 	ldw	r21,20(sp)
 8006ce8:	dd000417 	ldw	r20,16(sp)
 8006cec:	dcc00317 	ldw	r19,12(sp)
 8006cf0:	dc800217 	ldw	r18,8(sp)
 8006cf4:	dc400117 	ldw	r17,4(sp)
 8006cf8:	dc000017 	ldw	r16,0(sp)
 8006cfc:	dec00804 	addi	sp,sp,32
 8006d00:	f800283a 	ret

08006d04 <_fwalk_reent>:
 8006d04:	defff804 	addi	sp,sp,-32
 8006d08:	dd400515 	stw	r21,20(sp)
 8006d0c:	2540b804 	addi	r21,r4,736
 8006d10:	dd800615 	stw	r22,24(sp)
 8006d14:	dd000415 	stw	r20,16(sp)
 8006d18:	dcc00315 	stw	r19,12(sp)
 8006d1c:	dfc00715 	stw	ra,28(sp)
 8006d20:	dc800215 	stw	r18,8(sp)
 8006d24:	dc400115 	stw	r17,4(sp)
 8006d28:	dc000015 	stw	r16,0(sp)
 8006d2c:	2027883a 	mov	r19,r4
 8006d30:	2829883a 	mov	r20,r5
 8006d34:	002d883a 	mov	r22,zero
 8006d38:	80063540 	call	8006354 <__sfp_lock_acquire>
 8006d3c:	a8001326 	beq	r21,zero,8006d8c <_fwalk_reent+0x88>
 8006d40:	04bfffc4 	movi	r18,-1
 8006d44:	ac400117 	ldw	r17,4(r21)
 8006d48:	ac000217 	ldw	r16,8(r21)
 8006d4c:	8c7fffc4 	addi	r17,r17,-1
 8006d50:	88000c16 	blt	r17,zero,8006d84 <_fwalk_reent+0x80>
 8006d54:	84000304 	addi	r16,r16,12
 8006d58:	80c0000f 	ldh	r3,0(r16)
 8006d5c:	8c7fffc4 	addi	r17,r17,-1
 8006d60:	817ffd04 	addi	r5,r16,-12
 8006d64:	18000526 	beq	r3,zero,8006d7c <_fwalk_reent+0x78>
 8006d68:	80c0008f 	ldh	r3,2(r16)
 8006d6c:	9809883a 	mov	r4,r19
 8006d70:	1c800226 	beq	r3,r18,8006d7c <_fwalk_reent+0x78>
 8006d74:	a03ee83a 	callr	r20
 8006d78:	b0acb03a 	or	r22,r22,r2
 8006d7c:	84001a04 	addi	r16,r16,104
 8006d80:	8cbff51e 	bne	r17,r18,8006d58 <__alt_data_end+0xfc006d58>
 8006d84:	ad400017 	ldw	r21,0(r21)
 8006d88:	a83fee1e 	bne	r21,zero,8006d44 <__alt_data_end+0xfc006d44>
 8006d8c:	80063580 	call	8006358 <__sfp_lock_release>
 8006d90:	b005883a 	mov	r2,r22
 8006d94:	dfc00717 	ldw	ra,28(sp)
 8006d98:	dd800617 	ldw	r22,24(sp)
 8006d9c:	dd400517 	ldw	r21,20(sp)
 8006da0:	dd000417 	ldw	r20,16(sp)
 8006da4:	dcc00317 	ldw	r19,12(sp)
 8006da8:	dc800217 	ldw	r18,8(sp)
 8006dac:	dc400117 	ldw	r17,4(sp)
 8006db0:	dc000017 	ldw	r16,0(sp)
 8006db4:	dec00804 	addi	sp,sp,32
 8006db8:	f800283a 	ret

08006dbc <_setlocale_r>:
 8006dbc:	30001b26 	beq	r6,zero,8006e2c <_setlocale_r+0x70>
 8006dc0:	01420074 	movhi	r5,2049
 8006dc4:	defffe04 	addi	sp,sp,-8
 8006dc8:	2940de04 	addi	r5,r5,888
 8006dcc:	3009883a 	mov	r4,r6
 8006dd0:	dc000015 	stw	r16,0(sp)
 8006dd4:	dfc00115 	stw	ra,4(sp)
 8006dd8:	3021883a 	mov	r16,r6
 8006ddc:	80094880 	call	8009488 <strcmp>
 8006de0:	1000061e 	bne	r2,zero,8006dfc <_setlocale_r+0x40>
 8006de4:	00820074 	movhi	r2,2049
 8006de8:	1080dd04 	addi	r2,r2,884
 8006dec:	dfc00117 	ldw	ra,4(sp)
 8006df0:	dc000017 	ldw	r16,0(sp)
 8006df4:	dec00204 	addi	sp,sp,8
 8006df8:	f800283a 	ret
 8006dfc:	01420074 	movhi	r5,2049
 8006e00:	2940dd04 	addi	r5,r5,884
 8006e04:	8009883a 	mov	r4,r16
 8006e08:	80094880 	call	8009488 <strcmp>
 8006e0c:	103ff526 	beq	r2,zero,8006de4 <__alt_data_end+0xfc006de4>
 8006e10:	01420074 	movhi	r5,2049
 8006e14:	2940c804 	addi	r5,r5,800
 8006e18:	8009883a 	mov	r4,r16
 8006e1c:	80094880 	call	8009488 <strcmp>
 8006e20:	103ff026 	beq	r2,zero,8006de4 <__alt_data_end+0xfc006de4>
 8006e24:	0005883a 	mov	r2,zero
 8006e28:	003ff006 	br	8006dec <__alt_data_end+0xfc006dec>
 8006e2c:	00820074 	movhi	r2,2049
 8006e30:	1080dd04 	addi	r2,r2,884
 8006e34:	f800283a 	ret

08006e38 <__locale_charset>:
 8006e38:	00820074 	movhi	r2,2049
 8006e3c:	10825604 	addi	r2,r2,2392
 8006e40:	f800283a 	ret

08006e44 <__locale_mb_cur_max>:
 8006e44:	00820074 	movhi	r2,2049
 8006e48:	1087fd04 	addi	r2,r2,8180
 8006e4c:	10800017 	ldw	r2,0(r2)
 8006e50:	f800283a 	ret

08006e54 <__locale_msgcharset>:
 8006e54:	00820074 	movhi	r2,2049
 8006e58:	10824e04 	addi	r2,r2,2360
 8006e5c:	f800283a 	ret

08006e60 <__locale_cjk_lang>:
 8006e60:	0005883a 	mov	r2,zero
 8006e64:	f800283a 	ret

08006e68 <_localeconv_r>:
 8006e68:	00820074 	movhi	r2,2049
 8006e6c:	10825e04 	addi	r2,r2,2424
 8006e70:	f800283a 	ret

08006e74 <setlocale>:
 8006e74:	00c20074 	movhi	r3,2049
 8006e78:	18c7fc04 	addi	r3,r3,8176
 8006e7c:	2005883a 	mov	r2,r4
 8006e80:	19000017 	ldw	r4,0(r3)
 8006e84:	280d883a 	mov	r6,r5
 8006e88:	100b883a 	mov	r5,r2
 8006e8c:	8006dbc1 	jmpi	8006dbc <_setlocale_r>

08006e90 <localeconv>:
 8006e90:	00820074 	movhi	r2,2049
 8006e94:	10825e04 	addi	r2,r2,2424
 8006e98:	f800283a 	ret

08006e9c <__smakebuf_r>:
 8006e9c:	2880030b 	ldhu	r2,12(r5)
 8006ea0:	10c0008c 	andi	r3,r2,2
 8006ea4:	1800401e 	bne	r3,zero,8006fa8 <__smakebuf_r+0x10c>
 8006ea8:	deffec04 	addi	sp,sp,-80
 8006eac:	dc000f15 	stw	r16,60(sp)
 8006eb0:	2821883a 	mov	r16,r5
 8006eb4:	2940038f 	ldh	r5,14(r5)
 8006eb8:	dc401015 	stw	r17,64(sp)
 8006ebc:	dfc01315 	stw	ra,76(sp)
 8006ec0:	dcc01215 	stw	r19,72(sp)
 8006ec4:	dc801115 	stw	r18,68(sp)
 8006ec8:	2023883a 	mov	r17,r4
 8006ecc:	28001b16 	blt	r5,zero,8006f3c <__smakebuf_r+0xa0>
 8006ed0:	d80d883a 	mov	r6,sp
 8006ed4:	800af000 	call	800af00 <_fstat_r>
 8006ed8:	10001716 	blt	r2,zero,8006f38 <__smakebuf_r+0x9c>
 8006edc:	d8800117 	ldw	r2,4(sp)
 8006ee0:	00e00014 	movui	r3,32768
 8006ee4:	10bc000c 	andi	r2,r2,61440
 8006ee8:	10c03726 	beq	r2,r3,8006fc8 <__smakebuf_r+0x12c>
 8006eec:	80c0030b 	ldhu	r3,12(r16)
 8006ef0:	18c20014 	ori	r3,r3,2048
 8006ef4:	80c0030d 	sth	r3,12(r16)
 8006ef8:	00c80004 	movi	r3,8192
 8006efc:	10c03c1e 	bne	r2,r3,8006ff0 <__smakebuf_r+0x154>
 8006f00:	8140038f 	ldh	r5,14(r16)
 8006f04:	8809883a 	mov	r4,r17
 8006f08:	800af580 	call	800af58 <_isatty_r>
 8006f0c:	10004e26 	beq	r2,zero,8007048 <__smakebuf_r+0x1ac>
 8006f10:	8080030b 	ldhu	r2,12(r16)
 8006f14:	04c00044 	movi	r19,1
 8006f18:	80c010c4 	addi	r3,r16,67
 8006f1c:	14c4b03a 	or	r2,r2,r19
 8006f20:	8080030d 	sth	r2,12(r16)
 8006f24:	80c00015 	stw	r3,0(r16)
 8006f28:	80c00415 	stw	r3,16(r16)
 8006f2c:	84c00515 	stw	r19,20(r16)
 8006f30:	04810004 	movi	r18,1024
 8006f34:	00000706 	br	8006f54 <__smakebuf_r+0xb8>
 8006f38:	8080030b 	ldhu	r2,12(r16)
 8006f3c:	10c0200c 	andi	r3,r2,128
 8006f40:	18001f1e 	bne	r3,zero,8006fc0 <__smakebuf_r+0x124>
 8006f44:	04810004 	movi	r18,1024
 8006f48:	10820014 	ori	r2,r2,2048
 8006f4c:	8080030d 	sth	r2,12(r16)
 8006f50:	0027883a 	mov	r19,zero
 8006f54:	8809883a 	mov	r4,r17
 8006f58:	900b883a 	mov	r5,r18
 8006f5c:	80070540 	call	8007054 <_malloc_r>
 8006f60:	10002e26 	beq	r2,zero,800701c <__smakebuf_r+0x180>
 8006f64:	80c0030b 	ldhu	r3,12(r16)
 8006f68:	01020034 	movhi	r4,2048
 8006f6c:	2117fc04 	addi	r4,r4,24560
 8006f70:	89000f15 	stw	r4,60(r17)
 8006f74:	18c02014 	ori	r3,r3,128
 8006f78:	80c0030d 	sth	r3,12(r16)
 8006f7c:	80800015 	stw	r2,0(r16)
 8006f80:	80800415 	stw	r2,16(r16)
 8006f84:	84800515 	stw	r18,20(r16)
 8006f88:	98001c1e 	bne	r19,zero,8006ffc <__smakebuf_r+0x160>
 8006f8c:	dfc01317 	ldw	ra,76(sp)
 8006f90:	dcc01217 	ldw	r19,72(sp)
 8006f94:	dc801117 	ldw	r18,68(sp)
 8006f98:	dc401017 	ldw	r17,64(sp)
 8006f9c:	dc000f17 	ldw	r16,60(sp)
 8006fa0:	dec01404 	addi	sp,sp,80
 8006fa4:	f800283a 	ret
 8006fa8:	288010c4 	addi	r2,r5,67
 8006fac:	28800015 	stw	r2,0(r5)
 8006fb0:	28800415 	stw	r2,16(r5)
 8006fb4:	00800044 	movi	r2,1
 8006fb8:	28800515 	stw	r2,20(r5)
 8006fbc:	f800283a 	ret
 8006fc0:	04801004 	movi	r18,64
 8006fc4:	003fe006 	br	8006f48 <__alt_data_end+0xfc006f48>
 8006fc8:	81000a17 	ldw	r4,40(r16)
 8006fcc:	00c20074 	movhi	r3,2049
 8006fd0:	18e50904 	addi	r3,r3,-27612
 8006fd4:	20ffc51e 	bne	r4,r3,8006eec <__alt_data_end+0xfc006eec>
 8006fd8:	80c0030b 	ldhu	r3,12(r16)
 8006fdc:	01010004 	movi	r4,1024
 8006fe0:	81001315 	stw	r4,76(r16)
 8006fe4:	1906b03a 	or	r3,r3,r4
 8006fe8:	80c0030d 	sth	r3,12(r16)
 8006fec:	003fc206 	br	8006ef8 <__alt_data_end+0xfc006ef8>
 8006ff0:	0027883a 	mov	r19,zero
 8006ff4:	04810004 	movi	r18,1024
 8006ff8:	003fd606 	br	8006f54 <__alt_data_end+0xfc006f54>
 8006ffc:	8140038f 	ldh	r5,14(r16)
 8007000:	8809883a 	mov	r4,r17
 8007004:	800af580 	call	800af58 <_isatty_r>
 8007008:	103fe026 	beq	r2,zero,8006f8c <__alt_data_end+0xfc006f8c>
 800700c:	8080030b 	ldhu	r2,12(r16)
 8007010:	10800054 	ori	r2,r2,1
 8007014:	8080030d 	sth	r2,12(r16)
 8007018:	003fdc06 	br	8006f8c <__alt_data_end+0xfc006f8c>
 800701c:	8080030b 	ldhu	r2,12(r16)
 8007020:	10c0800c 	andi	r3,r2,512
 8007024:	183fd91e 	bne	r3,zero,8006f8c <__alt_data_end+0xfc006f8c>
 8007028:	10800094 	ori	r2,r2,2
 800702c:	80c010c4 	addi	r3,r16,67
 8007030:	8080030d 	sth	r2,12(r16)
 8007034:	00800044 	movi	r2,1
 8007038:	80c00015 	stw	r3,0(r16)
 800703c:	80c00415 	stw	r3,16(r16)
 8007040:	80800515 	stw	r2,20(r16)
 8007044:	003fd106 	br	8006f8c <__alt_data_end+0xfc006f8c>
 8007048:	04c00044 	movi	r19,1
 800704c:	04810004 	movi	r18,1024
 8007050:	003fc006 	br	8006f54 <__alt_data_end+0xfc006f54>

08007054 <_malloc_r>:
 8007054:	defff504 	addi	sp,sp,-44
 8007058:	dc800315 	stw	r18,12(sp)
 800705c:	dfc00a15 	stw	ra,40(sp)
 8007060:	df000915 	stw	fp,36(sp)
 8007064:	ddc00815 	stw	r23,32(sp)
 8007068:	dd800715 	stw	r22,28(sp)
 800706c:	dd400615 	stw	r21,24(sp)
 8007070:	dd000515 	stw	r20,20(sp)
 8007074:	dcc00415 	stw	r19,16(sp)
 8007078:	dc400215 	stw	r17,8(sp)
 800707c:	dc000115 	stw	r16,4(sp)
 8007080:	288002c4 	addi	r2,r5,11
 8007084:	00c00584 	movi	r3,22
 8007088:	2025883a 	mov	r18,r4
 800708c:	18802a2e 	bgeu	r3,r2,8007138 <_malloc_r+0xe4>
 8007090:	047ffe04 	movi	r17,-8
 8007094:	1462703a 	and	r17,r2,r17
 8007098:	88009e16 	blt	r17,zero,8007314 <_malloc_r+0x2c0>
 800709c:	89409d36 	bltu	r17,r5,8007314 <_malloc_r+0x2c0>
 80070a0:	800da900 	call	800da90 <__malloc_lock>
 80070a4:	00807dc4 	movi	r2,503
 80070a8:	14402736 	bltu	r2,r17,8007148 <_malloc_r+0xf4>
 80070ac:	8806d0fa 	srli	r3,r17,3
 80070b0:	04c20074 	movhi	r19,2049
 80070b4:	9cc26c04 	addi	r19,r19,2480
 80070b8:	18c5883a 	add	r2,r3,r3
 80070bc:	1085883a 	add	r2,r2,r2
 80070c0:	1085883a 	add	r2,r2,r2
 80070c4:	9885883a 	add	r2,r19,r2
 80070c8:	14000317 	ldw	r16,12(r2)
 80070cc:	80814a26 	beq	r16,r2,80075f8 <_malloc_r+0x5a4>
 80070d0:	80c00117 	ldw	r3,4(r16)
 80070d4:	81000317 	ldw	r4,12(r16)
 80070d8:	00bfff04 	movi	r2,-4
 80070dc:	1884703a 	and	r2,r3,r2
 80070e0:	81400217 	ldw	r5,8(r16)
 80070e4:	8085883a 	add	r2,r16,r2
 80070e8:	10c00117 	ldw	r3,4(r2)
 80070ec:	29000315 	stw	r4,12(r5)
 80070f0:	21400215 	stw	r5,8(r4)
 80070f4:	18c00054 	ori	r3,r3,1
 80070f8:	10c00115 	stw	r3,4(r2)
 80070fc:	9009883a 	mov	r4,r18
 8007100:	800dab00 	call	800dab0 <__malloc_unlock>
 8007104:	80800204 	addi	r2,r16,8
 8007108:	dfc00a17 	ldw	ra,40(sp)
 800710c:	df000917 	ldw	fp,36(sp)
 8007110:	ddc00817 	ldw	r23,32(sp)
 8007114:	dd800717 	ldw	r22,28(sp)
 8007118:	dd400617 	ldw	r21,24(sp)
 800711c:	dd000517 	ldw	r20,20(sp)
 8007120:	dcc00417 	ldw	r19,16(sp)
 8007124:	dc800317 	ldw	r18,12(sp)
 8007128:	dc400217 	ldw	r17,8(sp)
 800712c:	dc000117 	ldw	r16,4(sp)
 8007130:	dec00b04 	addi	sp,sp,44
 8007134:	f800283a 	ret
 8007138:	04400404 	movi	r17,16
 800713c:	89407536 	bltu	r17,r5,8007314 <_malloc_r+0x2c0>
 8007140:	800da900 	call	800da90 <__malloc_lock>
 8007144:	003fd906 	br	80070ac <__alt_data_end+0xfc0070ac>
 8007148:	8806d27a 	srli	r3,r17,9
 800714c:	18007526 	beq	r3,zero,8007324 <_malloc_r+0x2d0>
 8007150:	00800104 	movi	r2,4
 8007154:	10c0ef36 	bltu	r2,r3,8007514 <_malloc_r+0x4c0>
 8007158:	8806d1ba 	srli	r3,r17,6
 800715c:	19c00e04 	addi	r7,r3,56
 8007160:	39cb883a 	add	r5,r7,r7
 8007164:	04c20074 	movhi	r19,2049
 8007168:	294b883a 	add	r5,r5,r5
 800716c:	9cc26c04 	addi	r19,r19,2480
 8007170:	294b883a 	add	r5,r5,r5
 8007174:	994b883a 	add	r5,r19,r5
 8007178:	2c000317 	ldw	r16,12(r5)
 800717c:	2c000e26 	beq	r5,r16,80071b8 <_malloc_r+0x164>
 8007180:	80800117 	ldw	r2,4(r16)
 8007184:	01bfff04 	movi	r6,-4
 8007188:	010003c4 	movi	r4,15
 800718c:	1184703a 	and	r2,r2,r6
 8007190:	1447c83a 	sub	r3,r2,r17
 8007194:	20c00716 	blt	r4,r3,80071b4 <_malloc_r+0x160>
 8007198:	1800650e 	bge	r3,zero,8007330 <_malloc_r+0x2dc>
 800719c:	84000317 	ldw	r16,12(r16)
 80071a0:	2c000526 	beq	r5,r16,80071b8 <_malloc_r+0x164>
 80071a4:	80800117 	ldw	r2,4(r16)
 80071a8:	1184703a 	and	r2,r2,r6
 80071ac:	1447c83a 	sub	r3,r2,r17
 80071b0:	20fff90e 	bge	r4,r3,8007198 <__alt_data_end+0xfc007198>
 80071b4:	39ffffc4 	addi	r7,r7,-1
 80071b8:	38c00044 	addi	r3,r7,1
 80071bc:	01820074 	movhi	r6,2049
 80071c0:	9c000417 	ldw	r16,16(r19)
 80071c4:	31826c04 	addi	r6,r6,2480
 80071c8:	32400204 	addi	r9,r6,8
 80071cc:	82410326 	beq	r16,r9,80075dc <_malloc_r+0x588>
 80071d0:	81000117 	ldw	r4,4(r16)
 80071d4:	00bfff04 	movi	r2,-4
 80071d8:	208e703a 	and	r7,r4,r2
 80071dc:	3c45c83a 	sub	r2,r7,r17
 80071e0:	010003c4 	movi	r4,15
 80071e4:	2080ee16 	blt	r4,r2,80075a0 <_malloc_r+0x54c>
 80071e8:	32400515 	stw	r9,20(r6)
 80071ec:	32400415 	stw	r9,16(r6)
 80071f0:	1000510e 	bge	r2,zero,8007338 <_malloc_r+0x2e4>
 80071f4:	00807fc4 	movi	r2,511
 80071f8:	11c0ce36 	bltu	r2,r7,8007534 <_malloc_r+0x4e0>
 80071fc:	3808d0fa 	srli	r4,r7,3
 8007200:	01c00044 	movi	r7,1
 8007204:	30800117 	ldw	r2,4(r6)
 8007208:	210b883a 	add	r5,r4,r4
 800720c:	294b883a 	add	r5,r5,r5
 8007210:	2009d0ba 	srai	r4,r4,2
 8007214:	294b883a 	add	r5,r5,r5
 8007218:	298b883a 	add	r5,r5,r6
 800721c:	2a000217 	ldw	r8,8(r5)
 8007220:	3908983a 	sll	r4,r7,r4
 8007224:	81400315 	stw	r5,12(r16)
 8007228:	82000215 	stw	r8,8(r16)
 800722c:	2088b03a 	or	r4,r4,r2
 8007230:	2c000215 	stw	r16,8(r5)
 8007234:	31000115 	stw	r4,4(r6)
 8007238:	44000315 	stw	r16,12(r8)
 800723c:	1805d0ba 	srai	r2,r3,2
 8007240:	01400044 	movi	r5,1
 8007244:	288a983a 	sll	r5,r5,r2
 8007248:	21404336 	bltu	r4,r5,8007358 <_malloc_r+0x304>
 800724c:	2144703a 	and	r2,r4,r5
 8007250:	10000a1e 	bne	r2,zero,800727c <_malloc_r+0x228>
 8007254:	00bfff04 	movi	r2,-4
 8007258:	294b883a 	add	r5,r5,r5
 800725c:	1886703a 	and	r3,r3,r2
 8007260:	2144703a 	and	r2,r4,r5
 8007264:	18c00104 	addi	r3,r3,4
 8007268:	1000041e 	bne	r2,zero,800727c <_malloc_r+0x228>
 800726c:	294b883a 	add	r5,r5,r5
 8007270:	2144703a 	and	r2,r4,r5
 8007274:	18c00104 	addi	r3,r3,4
 8007278:	103ffc26 	beq	r2,zero,800726c <__alt_data_end+0xfc00726c>
 800727c:	023fff04 	movi	r8,-4
 8007280:	01c003c4 	movi	r7,15
 8007284:	18c5883a 	add	r2,r3,r3
 8007288:	1085883a 	add	r2,r2,r2
 800728c:	1085883a 	add	r2,r2,r2
 8007290:	9895883a 	add	r10,r19,r2
 8007294:	52c00304 	addi	r11,r10,12
 8007298:	1819883a 	mov	r12,r3
 800729c:	5c000017 	ldw	r16,0(r11)
 80072a0:	59bffd04 	addi	r6,r11,-12
 80072a4:	8180041e 	bne	r16,r6,80072b8 <_malloc_r+0x264>
 80072a8:	0000ce06 	br	80075e4 <_malloc_r+0x590>
 80072ac:	2000d70e 	bge	r4,zero,800760c <_malloc_r+0x5b8>
 80072b0:	84000317 	ldw	r16,12(r16)
 80072b4:	8180cb26 	beq	r16,r6,80075e4 <_malloc_r+0x590>
 80072b8:	80800117 	ldw	r2,4(r16)
 80072bc:	1204703a 	and	r2,r2,r8
 80072c0:	1449c83a 	sub	r4,r2,r17
 80072c4:	393ff90e 	bge	r7,r4,80072ac <__alt_data_end+0xfc0072ac>
 80072c8:	80800317 	ldw	r2,12(r16)
 80072cc:	80c00217 	ldw	r3,8(r16)
 80072d0:	89400054 	ori	r5,r17,1
 80072d4:	81400115 	stw	r5,4(r16)
 80072d8:	18800315 	stw	r2,12(r3)
 80072dc:	10c00215 	stw	r3,8(r2)
 80072e0:	8463883a 	add	r17,r16,r17
 80072e4:	9c400515 	stw	r17,20(r19)
 80072e8:	9c400415 	stw	r17,16(r19)
 80072ec:	20800054 	ori	r2,r4,1
 80072f0:	88800115 	stw	r2,4(r17)
 80072f4:	8a400315 	stw	r9,12(r17)
 80072f8:	8a400215 	stw	r9,8(r17)
 80072fc:	8923883a 	add	r17,r17,r4
 8007300:	89000015 	stw	r4,0(r17)
 8007304:	9009883a 	mov	r4,r18
 8007308:	800dab00 	call	800dab0 <__malloc_unlock>
 800730c:	80800204 	addi	r2,r16,8
 8007310:	003f7d06 	br	8007108 <__alt_data_end+0xfc007108>
 8007314:	00800304 	movi	r2,12
 8007318:	90800015 	stw	r2,0(r18)
 800731c:	0005883a 	mov	r2,zero
 8007320:	003f7906 	br	8007108 <__alt_data_end+0xfc007108>
 8007324:	01401f84 	movi	r5,126
 8007328:	01c00fc4 	movi	r7,63
 800732c:	003f8d06 	br	8007164 <__alt_data_end+0xfc007164>
 8007330:	81000317 	ldw	r4,12(r16)
 8007334:	003f6a06 	br	80070e0 <__alt_data_end+0xfc0070e0>
 8007338:	81c5883a 	add	r2,r16,r7
 800733c:	10c00117 	ldw	r3,4(r2)
 8007340:	9009883a 	mov	r4,r18
 8007344:	18c00054 	ori	r3,r3,1
 8007348:	10c00115 	stw	r3,4(r2)
 800734c:	800dab00 	call	800dab0 <__malloc_unlock>
 8007350:	80800204 	addi	r2,r16,8
 8007354:	003f6c06 	br	8007108 <__alt_data_end+0xfc007108>
 8007358:	9c000217 	ldw	r16,8(r19)
 800735c:	00bfff04 	movi	r2,-4
 8007360:	85800117 	ldw	r22,4(r16)
 8007364:	b0ac703a 	and	r22,r22,r2
 8007368:	b4400336 	bltu	r22,r17,8007378 <_malloc_r+0x324>
 800736c:	b445c83a 	sub	r2,r22,r17
 8007370:	00c003c4 	movi	r3,15
 8007374:	18805d16 	blt	r3,r2,80074ec <_malloc_r+0x498>
 8007378:	05c20074 	movhi	r23,2049
 800737c:	00820074 	movhi	r2,2049
 8007380:	bdc7fe04 	addi	r23,r23,8184
 8007384:	108ed604 	addi	r2,r2,15192
 8007388:	15400017 	ldw	r21,0(r2)
 800738c:	b9000017 	ldw	r4,0(r23)
 8007390:	00ffffc4 	movi	r3,-1
 8007394:	858d883a 	add	r6,r16,r22
 8007398:	8d6b883a 	add	r21,r17,r21
 800739c:	20c0e426 	beq	r4,r3,8007730 <_malloc_r+0x6dc>
 80073a0:	ad4403c4 	addi	r21,r21,4111
 80073a4:	00fc0004 	movi	r3,-4096
 80073a8:	a8ea703a 	and	r21,r21,r3
 80073ac:	9009883a 	mov	r4,r18
 80073b0:	a80b883a 	mov	r5,r21
 80073b4:	d9800015 	stw	r6,0(sp)
 80073b8:	80092f80 	call	80092f8 <_sbrk_r>
 80073bc:	00ffffc4 	movi	r3,-1
 80073c0:	1029883a 	mov	r20,r2
 80073c4:	d9800017 	ldw	r6,0(sp)
 80073c8:	10c0a426 	beq	r2,r3,800765c <_malloc_r+0x608>
 80073cc:	1180a236 	bltu	r2,r6,8007658 <_malloc_r+0x604>
 80073d0:	07020074 	movhi	fp,2049
 80073d4:	e70ede04 	addi	fp,fp,15224
 80073d8:	e0c00017 	ldw	r3,0(fp)
 80073dc:	a8c7883a 	add	r3,r21,r3
 80073e0:	e0c00015 	stw	r3,0(fp)
 80073e4:	3500da26 	beq	r6,r20,8007750 <_malloc_r+0x6fc>
 80073e8:	b9000017 	ldw	r4,0(r23)
 80073ec:	00bfffc4 	movi	r2,-1
 80073f0:	2080e426 	beq	r4,r2,8007784 <_malloc_r+0x730>
 80073f4:	a185c83a 	sub	r2,r20,r6
 80073f8:	1885883a 	add	r2,r3,r2
 80073fc:	e0800015 	stw	r2,0(fp)
 8007400:	a0c001cc 	andi	r3,r20,7
 8007404:	1800b526 	beq	r3,zero,80076dc <_malloc_r+0x688>
 8007408:	a0e9c83a 	sub	r20,r20,r3
 800740c:	00840204 	movi	r2,4104
 8007410:	a5000204 	addi	r20,r20,8
 8007414:	10c7c83a 	sub	r3,r2,r3
 8007418:	a545883a 	add	r2,r20,r21
 800741c:	1083ffcc 	andi	r2,r2,4095
 8007420:	18abc83a 	sub	r21,r3,r2
 8007424:	9009883a 	mov	r4,r18
 8007428:	a80b883a 	mov	r5,r21
 800742c:	80092f80 	call	80092f8 <_sbrk_r>
 8007430:	00ffffc4 	movi	r3,-1
 8007434:	10c0d026 	beq	r2,r3,8007778 <_malloc_r+0x724>
 8007438:	1507c83a 	sub	r3,r2,r20
 800743c:	a8c7883a 	add	r3,r21,r3
 8007440:	18c00054 	ori	r3,r3,1
 8007444:	e0800017 	ldw	r2,0(fp)
 8007448:	9d000215 	stw	r20,8(r19)
 800744c:	a0c00115 	stw	r3,4(r20)
 8007450:	a887883a 	add	r3,r21,r2
 8007454:	e0c00015 	stw	r3,0(fp)
 8007458:	84c00e26 	beq	r16,r19,8007494 <_malloc_r+0x440>
 800745c:	018003c4 	movi	r6,15
 8007460:	3580a02e 	bgeu	r6,r22,80076e4 <_malloc_r+0x690>
 8007464:	81400117 	ldw	r5,4(r16)
 8007468:	013ffe04 	movi	r4,-8
 800746c:	b0bffd04 	addi	r2,r22,-12
 8007470:	1104703a 	and	r2,r2,r4
 8007474:	2900004c 	andi	r4,r5,1
 8007478:	1108b03a 	or	r4,r2,r4
 800747c:	81000115 	stw	r4,4(r16)
 8007480:	01400144 	movi	r5,5
 8007484:	8089883a 	add	r4,r16,r2
 8007488:	21400115 	stw	r5,4(r4)
 800748c:	21400215 	stw	r5,8(r4)
 8007490:	3080c036 	bltu	r6,r2,8007794 <_malloc_r+0x740>
 8007494:	00820074 	movhi	r2,2049
 8007498:	108ed504 	addi	r2,r2,15188
 800749c:	11000017 	ldw	r4,0(r2)
 80074a0:	20c0012e 	bgeu	r4,r3,80074a8 <_malloc_r+0x454>
 80074a4:	10c00015 	stw	r3,0(r2)
 80074a8:	00820074 	movhi	r2,2049
 80074ac:	108ed404 	addi	r2,r2,15184
 80074b0:	11000017 	ldw	r4,0(r2)
 80074b4:	9c000217 	ldw	r16,8(r19)
 80074b8:	20c0012e 	bgeu	r4,r3,80074c0 <_malloc_r+0x46c>
 80074bc:	10c00015 	stw	r3,0(r2)
 80074c0:	80c00117 	ldw	r3,4(r16)
 80074c4:	00bfff04 	movi	r2,-4
 80074c8:	1886703a 	and	r3,r3,r2
 80074cc:	1c45c83a 	sub	r2,r3,r17
 80074d0:	1c400236 	bltu	r3,r17,80074dc <_malloc_r+0x488>
 80074d4:	00c003c4 	movi	r3,15
 80074d8:	18800416 	blt	r3,r2,80074ec <_malloc_r+0x498>
 80074dc:	9009883a 	mov	r4,r18
 80074e0:	800dab00 	call	800dab0 <__malloc_unlock>
 80074e4:	0005883a 	mov	r2,zero
 80074e8:	003f0706 	br	8007108 <__alt_data_end+0xfc007108>
 80074ec:	88c00054 	ori	r3,r17,1
 80074f0:	80c00115 	stw	r3,4(r16)
 80074f4:	8463883a 	add	r17,r16,r17
 80074f8:	10800054 	ori	r2,r2,1
 80074fc:	9c400215 	stw	r17,8(r19)
 8007500:	88800115 	stw	r2,4(r17)
 8007504:	9009883a 	mov	r4,r18
 8007508:	800dab00 	call	800dab0 <__malloc_unlock>
 800750c:	80800204 	addi	r2,r16,8
 8007510:	003efd06 	br	8007108 <__alt_data_end+0xfc007108>
 8007514:	00800504 	movi	r2,20
 8007518:	10c0482e 	bgeu	r2,r3,800763c <_malloc_r+0x5e8>
 800751c:	00801504 	movi	r2,84
 8007520:	10c06836 	bltu	r2,r3,80076c4 <_malloc_r+0x670>
 8007524:	8806d33a 	srli	r3,r17,12
 8007528:	19c01b84 	addi	r7,r3,110
 800752c:	39cb883a 	add	r5,r7,r7
 8007530:	003f0c06 	br	8007164 <__alt_data_end+0xfc007164>
 8007534:	3804d27a 	srli	r2,r7,9
 8007538:	01000104 	movi	r4,4
 800753c:	2080422e 	bgeu	r4,r2,8007648 <_malloc_r+0x5f4>
 8007540:	01000504 	movi	r4,20
 8007544:	20807c36 	bltu	r4,r2,8007738 <_malloc_r+0x6e4>
 8007548:	110016c4 	addi	r4,r2,91
 800754c:	210b883a 	add	r5,r4,r4
 8007550:	294b883a 	add	r5,r5,r5
 8007554:	294b883a 	add	r5,r5,r5
 8007558:	994b883a 	add	r5,r19,r5
 800755c:	28800217 	ldw	r2,8(r5)
 8007560:	02020074 	movhi	r8,2049
 8007564:	42026c04 	addi	r8,r8,2480
 8007568:	11406326 	beq	r2,r5,80076f8 <_malloc_r+0x6a4>
 800756c:	01bfff04 	movi	r6,-4
 8007570:	11000117 	ldw	r4,4(r2)
 8007574:	2188703a 	and	r4,r4,r6
 8007578:	3900022e 	bgeu	r7,r4,8007584 <_malloc_r+0x530>
 800757c:	10800217 	ldw	r2,8(r2)
 8007580:	28bffb1e 	bne	r5,r2,8007570 <__alt_data_end+0xfc007570>
 8007584:	11800317 	ldw	r6,12(r2)
 8007588:	99000117 	ldw	r4,4(r19)
 800758c:	81800315 	stw	r6,12(r16)
 8007590:	80800215 	stw	r2,8(r16)
 8007594:	34000215 	stw	r16,8(r6)
 8007598:	14000315 	stw	r16,12(r2)
 800759c:	003f2706 	br	800723c <__alt_data_end+0xfc00723c>
 80075a0:	88c00054 	ori	r3,r17,1
 80075a4:	80c00115 	stw	r3,4(r16)
 80075a8:	8463883a 	add	r17,r16,r17
 80075ac:	34400515 	stw	r17,20(r6)
 80075b0:	34400415 	stw	r17,16(r6)
 80075b4:	10c00054 	ori	r3,r2,1
 80075b8:	8a400315 	stw	r9,12(r17)
 80075bc:	8a400215 	stw	r9,8(r17)
 80075c0:	88c00115 	stw	r3,4(r17)
 80075c4:	88a3883a 	add	r17,r17,r2
 80075c8:	88800015 	stw	r2,0(r17)
 80075cc:	9009883a 	mov	r4,r18
 80075d0:	800dab00 	call	800dab0 <__malloc_unlock>
 80075d4:	80800204 	addi	r2,r16,8
 80075d8:	003ecb06 	br	8007108 <__alt_data_end+0xfc007108>
 80075dc:	31000117 	ldw	r4,4(r6)
 80075e0:	003f1606 	br	800723c <__alt_data_end+0xfc00723c>
 80075e4:	63000044 	addi	r12,r12,1
 80075e8:	608000cc 	andi	r2,r12,3
 80075ec:	5ac00204 	addi	r11,r11,8
 80075f0:	103f2a1e 	bne	r2,zero,800729c <__alt_data_end+0xfc00729c>
 80075f4:	00002106 	br	800767c <_malloc_r+0x628>
 80075f8:	80800204 	addi	r2,r16,8
 80075fc:	84000517 	ldw	r16,20(r16)
 8007600:	143eb31e 	bne	r2,r16,80070d0 <__alt_data_end+0xfc0070d0>
 8007604:	18c00084 	addi	r3,r3,2
 8007608:	003eec06 	br	80071bc <__alt_data_end+0xfc0071bc>
 800760c:	8085883a 	add	r2,r16,r2
 8007610:	10c00117 	ldw	r3,4(r2)
 8007614:	81000317 	ldw	r4,12(r16)
 8007618:	81400217 	ldw	r5,8(r16)
 800761c:	18c00054 	ori	r3,r3,1
 8007620:	10c00115 	stw	r3,4(r2)
 8007624:	29000315 	stw	r4,12(r5)
 8007628:	21400215 	stw	r5,8(r4)
 800762c:	9009883a 	mov	r4,r18
 8007630:	800dab00 	call	800dab0 <__malloc_unlock>
 8007634:	80800204 	addi	r2,r16,8
 8007638:	003eb306 	br	8007108 <__alt_data_end+0xfc007108>
 800763c:	19c016c4 	addi	r7,r3,91
 8007640:	39cb883a 	add	r5,r7,r7
 8007644:	003ec706 	br	8007164 <__alt_data_end+0xfc007164>
 8007648:	3804d1ba 	srli	r2,r7,6
 800764c:	11000e04 	addi	r4,r2,56
 8007650:	210b883a 	add	r5,r4,r4
 8007654:	003fbe06 	br	8007550 <__alt_data_end+0xfc007550>
 8007658:	84ff5d26 	beq	r16,r19,80073d0 <__alt_data_end+0xfc0073d0>
 800765c:	9c000217 	ldw	r16,8(r19)
 8007660:	00bfff04 	movi	r2,-4
 8007664:	80c00117 	ldw	r3,4(r16)
 8007668:	1886703a 	and	r3,r3,r2
 800766c:	003f9706 	br	80074cc <__alt_data_end+0xfc0074cc>
 8007670:	52800017 	ldw	r10,0(r10)
 8007674:	18ffffc4 	addi	r3,r3,-1
 8007678:	50805c1e 	bne	r10,r2,80077ec <_malloc_r+0x798>
 800767c:	190000cc 	andi	r4,r3,3
 8007680:	50bffe04 	addi	r2,r10,-8
 8007684:	203ffa1e 	bne	r4,zero,8007670 <__alt_data_end+0xfc007670>
 8007688:	98800117 	ldw	r2,4(r19)
 800768c:	0146303a 	nor	r3,zero,r5
 8007690:	1884703a 	and	r2,r3,r2
 8007694:	98800115 	stw	r2,4(r19)
 8007698:	294b883a 	add	r5,r5,r5
 800769c:	117f2e36 	bltu	r2,r5,8007358 <__alt_data_end+0xfc007358>
 80076a0:	283f2d26 	beq	r5,zero,8007358 <__alt_data_end+0xfc007358>
 80076a4:	1146703a 	and	r3,r2,r5
 80076a8:	1800521e 	bne	r3,zero,80077f4 <_malloc_r+0x7a0>
 80076ac:	6007883a 	mov	r3,r12
 80076b0:	294b883a 	add	r5,r5,r5
 80076b4:	1148703a 	and	r4,r2,r5
 80076b8:	18c00104 	addi	r3,r3,4
 80076bc:	203ffc26 	beq	r4,zero,80076b0 <__alt_data_end+0xfc0076b0>
 80076c0:	003ef006 	br	8007284 <__alt_data_end+0xfc007284>
 80076c4:	00805504 	movi	r2,340
 80076c8:	10c01336 	bltu	r2,r3,8007718 <_malloc_r+0x6c4>
 80076cc:	8806d3fa 	srli	r3,r17,15
 80076d0:	19c01dc4 	addi	r7,r3,119
 80076d4:	39cb883a 	add	r5,r7,r7
 80076d8:	003ea206 	br	8007164 <__alt_data_end+0xfc007164>
 80076dc:	00c40004 	movi	r3,4096
 80076e0:	003f4d06 	br	8007418 <__alt_data_end+0xfc007418>
 80076e4:	00800044 	movi	r2,1
 80076e8:	a0800115 	stw	r2,4(r20)
 80076ec:	a021883a 	mov	r16,r20
 80076f0:	0007883a 	mov	r3,zero
 80076f4:	003f7506 	br	80074cc <__alt_data_end+0xfc0074cc>
 80076f8:	200bd0ba 	srai	r5,r4,2
 80076fc:	01800044 	movi	r6,1
 8007700:	41000117 	ldw	r4,4(r8)
 8007704:	314a983a 	sll	r5,r6,r5
 8007708:	100d883a 	mov	r6,r2
 800770c:	2908b03a 	or	r4,r5,r4
 8007710:	41000115 	stw	r4,4(r8)
 8007714:	003f9d06 	br	800758c <__alt_data_end+0xfc00758c>
 8007718:	00815504 	movi	r2,1364
 800771c:	10c01336 	bltu	r2,r3,800776c <_malloc_r+0x718>
 8007720:	8806d4ba 	srli	r3,r17,18
 8007724:	19c01f04 	addi	r7,r3,124
 8007728:	39cb883a 	add	r5,r7,r7
 800772c:	003e8d06 	br	8007164 <__alt_data_end+0xfc007164>
 8007730:	ad400404 	addi	r21,r21,16
 8007734:	003f1d06 	br	80073ac <__alt_data_end+0xfc0073ac>
 8007738:	01001504 	movi	r4,84
 800773c:	20801c36 	bltu	r4,r2,80077b0 <_malloc_r+0x75c>
 8007740:	3804d33a 	srli	r2,r7,12
 8007744:	11001b84 	addi	r4,r2,110
 8007748:	210b883a 	add	r5,r4,r4
 800774c:	003f8006 	br	8007550 <__alt_data_end+0xfc007550>
 8007750:	3083ffcc 	andi	r2,r6,4095
 8007754:	103f241e 	bne	r2,zero,80073e8 <__alt_data_end+0xfc0073e8>
 8007758:	99000217 	ldw	r4,8(r19)
 800775c:	ad85883a 	add	r2,r21,r22
 8007760:	10800054 	ori	r2,r2,1
 8007764:	20800115 	stw	r2,4(r4)
 8007768:	003f4a06 	br	8007494 <__alt_data_end+0xfc007494>
 800776c:	01403f04 	movi	r5,252
 8007770:	01c01f84 	movi	r7,126
 8007774:	003e7b06 	br	8007164 <__alt_data_end+0xfc007164>
 8007778:	00c00044 	movi	r3,1
 800777c:	002b883a 	mov	r21,zero
 8007780:	003f3006 	br	8007444 <__alt_data_end+0xfc007444>
 8007784:	00820074 	movhi	r2,2049
 8007788:	1087fe04 	addi	r2,r2,8184
 800778c:	15000015 	stw	r20,0(r2)
 8007790:	003f1b06 	br	8007400 <__alt_data_end+0xfc007400>
 8007794:	9009883a 	mov	r4,r18
 8007798:	81400204 	addi	r5,r16,8
 800779c:	80064b80 	call	80064b8 <_free_r>
 80077a0:	00820074 	movhi	r2,2049
 80077a4:	108ede04 	addi	r2,r2,15224
 80077a8:	10c00017 	ldw	r3,0(r2)
 80077ac:	003f3906 	br	8007494 <__alt_data_end+0xfc007494>
 80077b0:	01005504 	movi	r4,340
 80077b4:	20800436 	bltu	r4,r2,80077c8 <_malloc_r+0x774>
 80077b8:	3804d3fa 	srli	r2,r7,15
 80077bc:	11001dc4 	addi	r4,r2,119
 80077c0:	210b883a 	add	r5,r4,r4
 80077c4:	003f6206 	br	8007550 <__alt_data_end+0xfc007550>
 80077c8:	01015504 	movi	r4,1364
 80077cc:	20800436 	bltu	r4,r2,80077e0 <_malloc_r+0x78c>
 80077d0:	3804d4ba 	srli	r2,r7,18
 80077d4:	11001f04 	addi	r4,r2,124
 80077d8:	210b883a 	add	r5,r4,r4
 80077dc:	003f5c06 	br	8007550 <__alt_data_end+0xfc007550>
 80077e0:	01403f04 	movi	r5,252
 80077e4:	01001f84 	movi	r4,126
 80077e8:	003f5906 	br	8007550 <__alt_data_end+0xfc007550>
 80077ec:	98800117 	ldw	r2,4(r19)
 80077f0:	003fa906 	br	8007698 <__alt_data_end+0xfc007698>
 80077f4:	6007883a 	mov	r3,r12
 80077f8:	003ea206 	br	8007284 <__alt_data_end+0xfc007284>

080077fc <memchr>:
 80077fc:	208000cc 	andi	r2,r4,3
 8007800:	280f883a 	mov	r7,r5
 8007804:	10003526 	beq	r2,zero,80078dc <memchr+0xe0>
 8007808:	30bfffc4 	addi	r2,r6,-1
 800780c:	30001b26 	beq	r6,zero,800787c <memchr+0x80>
 8007810:	21800003 	ldbu	r6,0(r4)
 8007814:	28c03fcc 	andi	r3,r5,255
 8007818:	30c01a26 	beq	r6,r3,8007884 <memchr+0x88>
 800781c:	180d883a 	mov	r6,r3
 8007820:	00000406 	br	8007834 <memchr+0x38>
 8007824:	10001526 	beq	r2,zero,800787c <memchr+0x80>
 8007828:	20c00003 	ldbu	r3,0(r4)
 800782c:	10bfffc4 	addi	r2,r2,-1
 8007830:	19801426 	beq	r3,r6,8007884 <memchr+0x88>
 8007834:	21000044 	addi	r4,r4,1
 8007838:	20c000cc 	andi	r3,r4,3
 800783c:	183ff91e 	bne	r3,zero,8007824 <__alt_data_end+0xfc007824>
 8007840:	024000c4 	movi	r9,3
 8007844:	48801136 	bltu	r9,r2,800788c <memchr+0x90>
 8007848:	10000c26 	beq	r2,zero,800787c <memchr+0x80>
 800784c:	20c00003 	ldbu	r3,0(r4)
 8007850:	29403fcc 	andi	r5,r5,255
 8007854:	19400b26 	beq	r3,r5,8007884 <memchr+0x88>
 8007858:	20c00044 	addi	r3,r4,1
 800785c:	2085883a 	add	r2,r4,r2
 8007860:	39803fcc 	andi	r6,r7,255
 8007864:	00000306 	br	8007874 <memchr+0x78>
 8007868:	18c00044 	addi	r3,r3,1
 800786c:	197fffc3 	ldbu	r5,-1(r3)
 8007870:	29800426 	beq	r5,r6,8007884 <memchr+0x88>
 8007874:	1809883a 	mov	r4,r3
 8007878:	18bffb1e 	bne	r3,r2,8007868 <__alt_data_end+0xfc007868>
 800787c:	0005883a 	mov	r2,zero
 8007880:	f800283a 	ret
 8007884:	2005883a 	mov	r2,r4
 8007888:	f800283a 	ret
 800788c:	28c03fcc 	andi	r3,r5,255
 8007890:	1810923a 	slli	r8,r3,8
 8007894:	02ffbff4 	movhi	r11,65279
 8007898:	02a02074 	movhi	r10,32897
 800789c:	40c6b03a 	or	r3,r8,r3
 80078a0:	1810943a 	slli	r8,r3,16
 80078a4:	5affbfc4 	addi	r11,r11,-257
 80078a8:	52a02004 	addi	r10,r10,-32640
 80078ac:	40d0b03a 	or	r8,r8,r3
 80078b0:	20c00017 	ldw	r3,0(r4)
 80078b4:	40c6f03a 	xor	r3,r8,r3
 80078b8:	1acd883a 	add	r6,r3,r11
 80078bc:	00c6303a 	nor	r3,zero,r3
 80078c0:	30c6703a 	and	r3,r6,r3
 80078c4:	1a86703a 	and	r3,r3,r10
 80078c8:	183fdf1e 	bne	r3,zero,8007848 <__alt_data_end+0xfc007848>
 80078cc:	10bfff04 	addi	r2,r2,-4
 80078d0:	21000104 	addi	r4,r4,4
 80078d4:	48bff636 	bltu	r9,r2,80078b0 <__alt_data_end+0xfc0078b0>
 80078d8:	003fdb06 	br	8007848 <__alt_data_end+0xfc007848>
 80078dc:	3005883a 	mov	r2,r6
 80078e0:	003fd706 	br	8007840 <__alt_data_end+0xfc007840>

080078e4 <memcpy>:
 80078e4:	deffff04 	addi	sp,sp,-4
 80078e8:	dc000015 	stw	r16,0(sp)
 80078ec:	00c003c4 	movi	r3,15
 80078f0:	2005883a 	mov	r2,r4
 80078f4:	1980432e 	bgeu	r3,r6,8007a04 <memcpy+0x120>
 80078f8:	2146b03a 	or	r3,r4,r5
 80078fc:	18c000cc 	andi	r3,r3,3
 8007900:	1800421e 	bne	r3,zero,8007a0c <memcpy+0x128>
 8007904:	343ffc04 	addi	r16,r6,-16
 8007908:	8020d13a 	srli	r16,r16,4
 800790c:	28c00104 	addi	r3,r5,4
 8007910:	23400104 	addi	r13,r4,4
 8007914:	801e913a 	slli	r15,r16,4
 8007918:	2b000204 	addi	r12,r5,8
 800791c:	22c00204 	addi	r11,r4,8
 8007920:	7bc00504 	addi	r15,r15,20
 8007924:	2a800304 	addi	r10,r5,12
 8007928:	22400304 	addi	r9,r4,12
 800792c:	2bdf883a 	add	r15,r5,r15
 8007930:	2811883a 	mov	r8,r5
 8007934:	200f883a 	mov	r7,r4
 8007938:	41000017 	ldw	r4,0(r8)
 800793c:	39c00404 	addi	r7,r7,16
 8007940:	18c00404 	addi	r3,r3,16
 8007944:	393ffc15 	stw	r4,-16(r7)
 8007948:	1bbffc17 	ldw	r14,-16(r3)
 800794c:	6b400404 	addi	r13,r13,16
 8007950:	5ac00404 	addi	r11,r11,16
 8007954:	6bbffc15 	stw	r14,-16(r13)
 8007958:	63800017 	ldw	r14,0(r12)
 800795c:	4a400404 	addi	r9,r9,16
 8007960:	42000404 	addi	r8,r8,16
 8007964:	5bbffc15 	stw	r14,-16(r11)
 8007968:	53800017 	ldw	r14,0(r10)
 800796c:	63000404 	addi	r12,r12,16
 8007970:	52800404 	addi	r10,r10,16
 8007974:	4bbffc15 	stw	r14,-16(r9)
 8007978:	1bffef1e 	bne	r3,r15,8007938 <__alt_data_end+0xfc007938>
 800797c:	81c00044 	addi	r7,r16,1
 8007980:	380e913a 	slli	r7,r7,4
 8007984:	310003cc 	andi	r4,r6,15
 8007988:	02c000c4 	movi	r11,3
 800798c:	11c7883a 	add	r3,r2,r7
 8007990:	29cb883a 	add	r5,r5,r7
 8007994:	59001f2e 	bgeu	r11,r4,8007a14 <memcpy+0x130>
 8007998:	1813883a 	mov	r9,r3
 800799c:	2811883a 	mov	r8,r5
 80079a0:	200f883a 	mov	r7,r4
 80079a4:	42800017 	ldw	r10,0(r8)
 80079a8:	4a400104 	addi	r9,r9,4
 80079ac:	39ffff04 	addi	r7,r7,-4
 80079b0:	4abfff15 	stw	r10,-4(r9)
 80079b4:	42000104 	addi	r8,r8,4
 80079b8:	59fffa36 	bltu	r11,r7,80079a4 <__alt_data_end+0xfc0079a4>
 80079bc:	213fff04 	addi	r4,r4,-4
 80079c0:	2008d0ba 	srli	r4,r4,2
 80079c4:	318000cc 	andi	r6,r6,3
 80079c8:	21000044 	addi	r4,r4,1
 80079cc:	2109883a 	add	r4,r4,r4
 80079d0:	2109883a 	add	r4,r4,r4
 80079d4:	1907883a 	add	r3,r3,r4
 80079d8:	290b883a 	add	r5,r5,r4
 80079dc:	30000626 	beq	r6,zero,80079f8 <memcpy+0x114>
 80079e0:	198d883a 	add	r6,r3,r6
 80079e4:	29c00003 	ldbu	r7,0(r5)
 80079e8:	18c00044 	addi	r3,r3,1
 80079ec:	29400044 	addi	r5,r5,1
 80079f0:	19ffffc5 	stb	r7,-1(r3)
 80079f4:	19bffb1e 	bne	r3,r6,80079e4 <__alt_data_end+0xfc0079e4>
 80079f8:	dc000017 	ldw	r16,0(sp)
 80079fc:	dec00104 	addi	sp,sp,4
 8007a00:	f800283a 	ret
 8007a04:	2007883a 	mov	r3,r4
 8007a08:	003ff406 	br	80079dc <__alt_data_end+0xfc0079dc>
 8007a0c:	2007883a 	mov	r3,r4
 8007a10:	003ff306 	br	80079e0 <__alt_data_end+0xfc0079e0>
 8007a14:	200d883a 	mov	r6,r4
 8007a18:	003ff006 	br	80079dc <__alt_data_end+0xfc0079dc>

08007a1c <memmove>:
 8007a1c:	2005883a 	mov	r2,r4
 8007a20:	29000b2e 	bgeu	r5,r4,8007a50 <memmove+0x34>
 8007a24:	298f883a 	add	r7,r5,r6
 8007a28:	21c0092e 	bgeu	r4,r7,8007a50 <memmove+0x34>
 8007a2c:	2187883a 	add	r3,r4,r6
 8007a30:	198bc83a 	sub	r5,r3,r6
 8007a34:	30004b26 	beq	r6,zero,8007b64 <memmove+0x148>
 8007a38:	39ffffc4 	addi	r7,r7,-1
 8007a3c:	39000003 	ldbu	r4,0(r7)
 8007a40:	18ffffc4 	addi	r3,r3,-1
 8007a44:	19000005 	stb	r4,0(r3)
 8007a48:	197ffb1e 	bne	r3,r5,8007a38 <__alt_data_end+0xfc007a38>
 8007a4c:	f800283a 	ret
 8007a50:	00c003c4 	movi	r3,15
 8007a54:	1980412e 	bgeu	r3,r6,8007b5c <memmove+0x140>
 8007a58:	1146b03a 	or	r3,r2,r5
 8007a5c:	18c000cc 	andi	r3,r3,3
 8007a60:	1800411e 	bne	r3,zero,8007b68 <memmove+0x14c>
 8007a64:	33fffc04 	addi	r15,r6,-16
 8007a68:	781ed13a 	srli	r15,r15,4
 8007a6c:	28c00104 	addi	r3,r5,4
 8007a70:	13400104 	addi	r13,r2,4
 8007a74:	781c913a 	slli	r14,r15,4
 8007a78:	2b000204 	addi	r12,r5,8
 8007a7c:	12c00204 	addi	r11,r2,8
 8007a80:	73800504 	addi	r14,r14,20
 8007a84:	2a800304 	addi	r10,r5,12
 8007a88:	12400304 	addi	r9,r2,12
 8007a8c:	2b9d883a 	add	r14,r5,r14
 8007a90:	2811883a 	mov	r8,r5
 8007a94:	100f883a 	mov	r7,r2
 8007a98:	41000017 	ldw	r4,0(r8)
 8007a9c:	39c00404 	addi	r7,r7,16
 8007aa0:	18c00404 	addi	r3,r3,16
 8007aa4:	393ffc15 	stw	r4,-16(r7)
 8007aa8:	193ffc17 	ldw	r4,-16(r3)
 8007aac:	6b400404 	addi	r13,r13,16
 8007ab0:	5ac00404 	addi	r11,r11,16
 8007ab4:	693ffc15 	stw	r4,-16(r13)
 8007ab8:	61000017 	ldw	r4,0(r12)
 8007abc:	4a400404 	addi	r9,r9,16
 8007ac0:	42000404 	addi	r8,r8,16
 8007ac4:	593ffc15 	stw	r4,-16(r11)
 8007ac8:	51000017 	ldw	r4,0(r10)
 8007acc:	63000404 	addi	r12,r12,16
 8007ad0:	52800404 	addi	r10,r10,16
 8007ad4:	493ffc15 	stw	r4,-16(r9)
 8007ad8:	1bbfef1e 	bne	r3,r14,8007a98 <__alt_data_end+0xfc007a98>
 8007adc:	79000044 	addi	r4,r15,1
 8007ae0:	2008913a 	slli	r4,r4,4
 8007ae4:	328003cc 	andi	r10,r6,15
 8007ae8:	02c000c4 	movi	r11,3
 8007aec:	1107883a 	add	r3,r2,r4
 8007af0:	290b883a 	add	r5,r5,r4
 8007af4:	5a801e2e 	bgeu	r11,r10,8007b70 <memmove+0x154>
 8007af8:	1813883a 	mov	r9,r3
 8007afc:	2811883a 	mov	r8,r5
 8007b00:	500f883a 	mov	r7,r10
 8007b04:	41000017 	ldw	r4,0(r8)
 8007b08:	4a400104 	addi	r9,r9,4
 8007b0c:	39ffff04 	addi	r7,r7,-4
 8007b10:	493fff15 	stw	r4,-4(r9)
 8007b14:	42000104 	addi	r8,r8,4
 8007b18:	59fffa36 	bltu	r11,r7,8007b04 <__alt_data_end+0xfc007b04>
 8007b1c:	513fff04 	addi	r4,r10,-4
 8007b20:	2008d0ba 	srli	r4,r4,2
 8007b24:	318000cc 	andi	r6,r6,3
 8007b28:	21000044 	addi	r4,r4,1
 8007b2c:	2109883a 	add	r4,r4,r4
 8007b30:	2109883a 	add	r4,r4,r4
 8007b34:	1907883a 	add	r3,r3,r4
 8007b38:	290b883a 	add	r5,r5,r4
 8007b3c:	30000926 	beq	r6,zero,8007b64 <memmove+0x148>
 8007b40:	198d883a 	add	r6,r3,r6
 8007b44:	29c00003 	ldbu	r7,0(r5)
 8007b48:	18c00044 	addi	r3,r3,1
 8007b4c:	29400044 	addi	r5,r5,1
 8007b50:	19ffffc5 	stb	r7,-1(r3)
 8007b54:	19bffb1e 	bne	r3,r6,8007b44 <__alt_data_end+0xfc007b44>
 8007b58:	f800283a 	ret
 8007b5c:	1007883a 	mov	r3,r2
 8007b60:	003ff606 	br	8007b3c <__alt_data_end+0xfc007b3c>
 8007b64:	f800283a 	ret
 8007b68:	1007883a 	mov	r3,r2
 8007b6c:	003ff406 	br	8007b40 <__alt_data_end+0xfc007b40>
 8007b70:	500d883a 	mov	r6,r10
 8007b74:	003ff106 	br	8007b3c <__alt_data_end+0xfc007b3c>

08007b78 <memset>:
 8007b78:	20c000cc 	andi	r3,r4,3
 8007b7c:	2005883a 	mov	r2,r4
 8007b80:	18004326 	beq	r3,zero,8007c90 <memset+0x118>
 8007b84:	31ffffc4 	addi	r7,r6,-1
 8007b88:	30004026 	beq	r6,zero,8007c8c <memset+0x114>
 8007b8c:	2813883a 	mov	r9,r5
 8007b90:	200d883a 	mov	r6,r4
 8007b94:	2007883a 	mov	r3,r4
 8007b98:	00000406 	br	8007bac <memset+0x34>
 8007b9c:	3a3fffc4 	addi	r8,r7,-1
 8007ba0:	31800044 	addi	r6,r6,1
 8007ba4:	38003926 	beq	r7,zero,8007c8c <memset+0x114>
 8007ba8:	400f883a 	mov	r7,r8
 8007bac:	18c00044 	addi	r3,r3,1
 8007bb0:	32400005 	stb	r9,0(r6)
 8007bb4:	1a0000cc 	andi	r8,r3,3
 8007bb8:	403ff81e 	bne	r8,zero,8007b9c <__alt_data_end+0xfc007b9c>
 8007bbc:	010000c4 	movi	r4,3
 8007bc0:	21c02d2e 	bgeu	r4,r7,8007c78 <memset+0x100>
 8007bc4:	29803fcc 	andi	r6,r5,255
 8007bc8:	3008923a 	slli	r4,r6,8
 8007bcc:	218cb03a 	or	r6,r4,r6
 8007bd0:	3008943a 	slli	r4,r6,16
 8007bd4:	218cb03a 	or	r6,r4,r6
 8007bd8:	010003c4 	movi	r4,15
 8007bdc:	21c0182e 	bgeu	r4,r7,8007c40 <memset+0xc8>
 8007be0:	3b3ffc04 	addi	r12,r7,-16
 8007be4:	6018d13a 	srli	r12,r12,4
 8007be8:	1a000104 	addi	r8,r3,4
 8007bec:	1ac00204 	addi	r11,r3,8
 8007bf0:	6008913a 	slli	r4,r12,4
 8007bf4:	1a800304 	addi	r10,r3,12
 8007bf8:	1813883a 	mov	r9,r3
 8007bfc:	21000504 	addi	r4,r4,20
 8007c00:	1909883a 	add	r4,r3,r4
 8007c04:	49800015 	stw	r6,0(r9)
 8007c08:	41800015 	stw	r6,0(r8)
 8007c0c:	59800015 	stw	r6,0(r11)
 8007c10:	51800015 	stw	r6,0(r10)
 8007c14:	42000404 	addi	r8,r8,16
 8007c18:	4a400404 	addi	r9,r9,16
 8007c1c:	5ac00404 	addi	r11,r11,16
 8007c20:	52800404 	addi	r10,r10,16
 8007c24:	413ff71e 	bne	r8,r4,8007c04 <__alt_data_end+0xfc007c04>
 8007c28:	63000044 	addi	r12,r12,1
 8007c2c:	6018913a 	slli	r12,r12,4
 8007c30:	39c003cc 	andi	r7,r7,15
 8007c34:	010000c4 	movi	r4,3
 8007c38:	1b07883a 	add	r3,r3,r12
 8007c3c:	21c00e2e 	bgeu	r4,r7,8007c78 <memset+0x100>
 8007c40:	1813883a 	mov	r9,r3
 8007c44:	3811883a 	mov	r8,r7
 8007c48:	010000c4 	movi	r4,3
 8007c4c:	49800015 	stw	r6,0(r9)
 8007c50:	423fff04 	addi	r8,r8,-4
 8007c54:	4a400104 	addi	r9,r9,4
 8007c58:	223ffc36 	bltu	r4,r8,8007c4c <__alt_data_end+0xfc007c4c>
 8007c5c:	393fff04 	addi	r4,r7,-4
 8007c60:	2008d0ba 	srli	r4,r4,2
 8007c64:	39c000cc 	andi	r7,r7,3
 8007c68:	21000044 	addi	r4,r4,1
 8007c6c:	2109883a 	add	r4,r4,r4
 8007c70:	2109883a 	add	r4,r4,r4
 8007c74:	1907883a 	add	r3,r3,r4
 8007c78:	38000426 	beq	r7,zero,8007c8c <memset+0x114>
 8007c7c:	19cf883a 	add	r7,r3,r7
 8007c80:	19400005 	stb	r5,0(r3)
 8007c84:	18c00044 	addi	r3,r3,1
 8007c88:	19fffd1e 	bne	r3,r7,8007c80 <__alt_data_end+0xfc007c80>
 8007c8c:	f800283a 	ret
 8007c90:	2007883a 	mov	r3,r4
 8007c94:	300f883a 	mov	r7,r6
 8007c98:	003fc806 	br	8007bbc <__alt_data_end+0xfc007bbc>

08007c9c <_Balloc>:
 8007c9c:	20801317 	ldw	r2,76(r4)
 8007ca0:	defffc04 	addi	sp,sp,-16
 8007ca4:	dc400115 	stw	r17,4(sp)
 8007ca8:	dc000015 	stw	r16,0(sp)
 8007cac:	dfc00315 	stw	ra,12(sp)
 8007cb0:	dc800215 	stw	r18,8(sp)
 8007cb4:	2023883a 	mov	r17,r4
 8007cb8:	2821883a 	mov	r16,r5
 8007cbc:	10000f26 	beq	r2,zero,8007cfc <_Balloc+0x60>
 8007cc0:	8407883a 	add	r3,r16,r16
 8007cc4:	18c7883a 	add	r3,r3,r3
 8007cc8:	10c7883a 	add	r3,r2,r3
 8007ccc:	18800017 	ldw	r2,0(r3)
 8007cd0:	10001126 	beq	r2,zero,8007d18 <_Balloc+0x7c>
 8007cd4:	11000017 	ldw	r4,0(r2)
 8007cd8:	19000015 	stw	r4,0(r3)
 8007cdc:	10000415 	stw	zero,16(r2)
 8007ce0:	10000315 	stw	zero,12(r2)
 8007ce4:	dfc00317 	ldw	ra,12(sp)
 8007ce8:	dc800217 	ldw	r18,8(sp)
 8007cec:	dc400117 	ldw	r17,4(sp)
 8007cf0:	dc000017 	ldw	r16,0(sp)
 8007cf4:	dec00404 	addi	sp,sp,16
 8007cf8:	f800283a 	ret
 8007cfc:	01400104 	movi	r5,4
 8007d00:	01800844 	movi	r6,33
 8007d04:	800ab380 	call	800ab38 <_calloc_r>
 8007d08:	88801315 	stw	r2,76(r17)
 8007d0c:	103fec1e 	bne	r2,zero,8007cc0 <__alt_data_end+0xfc007cc0>
 8007d10:	0005883a 	mov	r2,zero
 8007d14:	003ff306 	br	8007ce4 <__alt_data_end+0xfc007ce4>
 8007d18:	01400044 	movi	r5,1
 8007d1c:	2c24983a 	sll	r18,r5,r16
 8007d20:	8809883a 	mov	r4,r17
 8007d24:	91800144 	addi	r6,r18,5
 8007d28:	318d883a 	add	r6,r6,r6
 8007d2c:	318d883a 	add	r6,r6,r6
 8007d30:	800ab380 	call	800ab38 <_calloc_r>
 8007d34:	103ff626 	beq	r2,zero,8007d10 <__alt_data_end+0xfc007d10>
 8007d38:	14000115 	stw	r16,4(r2)
 8007d3c:	14800215 	stw	r18,8(r2)
 8007d40:	003fe606 	br	8007cdc <__alt_data_end+0xfc007cdc>

08007d44 <_Bfree>:
 8007d44:	28000826 	beq	r5,zero,8007d68 <_Bfree+0x24>
 8007d48:	28c00117 	ldw	r3,4(r5)
 8007d4c:	20801317 	ldw	r2,76(r4)
 8007d50:	18c7883a 	add	r3,r3,r3
 8007d54:	18c7883a 	add	r3,r3,r3
 8007d58:	10c5883a 	add	r2,r2,r3
 8007d5c:	10c00017 	ldw	r3,0(r2)
 8007d60:	28c00015 	stw	r3,0(r5)
 8007d64:	11400015 	stw	r5,0(r2)
 8007d68:	f800283a 	ret

08007d6c <__multadd>:
 8007d6c:	defff704 	addi	sp,sp,-36
 8007d70:	dc800215 	stw	r18,8(sp)
 8007d74:	2c800417 	ldw	r18,16(r5)
 8007d78:	ddc00715 	stw	r23,28(sp)
 8007d7c:	dd800615 	stw	r22,24(sp)
 8007d80:	dd000415 	stw	r20,16(sp)
 8007d84:	dcc00315 	stw	r19,12(sp)
 8007d88:	dc400115 	stw	r17,4(sp)
 8007d8c:	dc000015 	stw	r16,0(sp)
 8007d90:	dfc00815 	stw	ra,32(sp)
 8007d94:	dd400515 	stw	r21,20(sp)
 8007d98:	2827883a 	mov	r19,r5
 8007d9c:	2029883a 	mov	r20,r4
 8007da0:	3023883a 	mov	r17,r6
 8007da4:	3821883a 	mov	r16,r7
 8007da8:	2d800504 	addi	r22,r5,20
 8007dac:	002f883a 	mov	r23,zero
 8007db0:	b5400017 	ldw	r21,0(r22)
 8007db4:	880b883a 	mov	r5,r17
 8007db8:	bdc00044 	addi	r23,r23,1
 8007dbc:	a93fffcc 	andi	r4,r21,65535
 8007dc0:	8001ff40 	call	8001ff4 <__mulsi3>
 8007dc4:	1421883a 	add	r16,r2,r16
 8007dc8:	a808d43a 	srli	r4,r21,16
 8007dcc:	802ad43a 	srli	r21,r16,16
 8007dd0:	880b883a 	mov	r5,r17
 8007dd4:	8001ff40 	call	8001ff4 <__mulsi3>
 8007dd8:	a88f883a 	add	r7,r21,r2
 8007ddc:	3804943a 	slli	r2,r7,16
 8007de0:	80ffffcc 	andi	r3,r16,65535
 8007de4:	b5800104 	addi	r22,r22,4
 8007de8:	10c7883a 	add	r3,r2,r3
 8007dec:	b0ffff15 	stw	r3,-4(r22)
 8007df0:	3820d43a 	srli	r16,r7,16
 8007df4:	bcbfee16 	blt	r23,r18,8007db0 <__alt_data_end+0xfc007db0>
 8007df8:	80000926 	beq	r16,zero,8007e20 <__multadd+0xb4>
 8007dfc:	98800217 	ldw	r2,8(r19)
 8007e00:	9080130e 	bge	r18,r2,8007e50 <__multadd+0xe4>
 8007e04:	90800144 	addi	r2,r18,5
 8007e08:	1085883a 	add	r2,r2,r2
 8007e0c:	1085883a 	add	r2,r2,r2
 8007e10:	9885883a 	add	r2,r19,r2
 8007e14:	14000015 	stw	r16,0(r2)
 8007e18:	94800044 	addi	r18,r18,1
 8007e1c:	9c800415 	stw	r18,16(r19)
 8007e20:	9805883a 	mov	r2,r19
 8007e24:	dfc00817 	ldw	ra,32(sp)
 8007e28:	ddc00717 	ldw	r23,28(sp)
 8007e2c:	dd800617 	ldw	r22,24(sp)
 8007e30:	dd400517 	ldw	r21,20(sp)
 8007e34:	dd000417 	ldw	r20,16(sp)
 8007e38:	dcc00317 	ldw	r19,12(sp)
 8007e3c:	dc800217 	ldw	r18,8(sp)
 8007e40:	dc400117 	ldw	r17,4(sp)
 8007e44:	dc000017 	ldw	r16,0(sp)
 8007e48:	dec00904 	addi	sp,sp,36
 8007e4c:	f800283a 	ret
 8007e50:	99400117 	ldw	r5,4(r19)
 8007e54:	a009883a 	mov	r4,r20
 8007e58:	29400044 	addi	r5,r5,1
 8007e5c:	8007c9c0 	call	8007c9c <_Balloc>
 8007e60:	99800417 	ldw	r6,16(r19)
 8007e64:	99400304 	addi	r5,r19,12
 8007e68:	11000304 	addi	r4,r2,12
 8007e6c:	31800084 	addi	r6,r6,2
 8007e70:	318d883a 	add	r6,r6,r6
 8007e74:	318d883a 	add	r6,r6,r6
 8007e78:	1023883a 	mov	r17,r2
 8007e7c:	80078e40 	call	80078e4 <memcpy>
 8007e80:	99000117 	ldw	r4,4(r19)
 8007e84:	a0c01317 	ldw	r3,76(r20)
 8007e88:	2109883a 	add	r4,r4,r4
 8007e8c:	2109883a 	add	r4,r4,r4
 8007e90:	1907883a 	add	r3,r3,r4
 8007e94:	18800017 	ldw	r2,0(r3)
 8007e98:	98800015 	stw	r2,0(r19)
 8007e9c:	1cc00015 	stw	r19,0(r3)
 8007ea0:	8827883a 	mov	r19,r17
 8007ea4:	003fd706 	br	8007e04 <__alt_data_end+0xfc007e04>

08007ea8 <__s2b>:
 8007ea8:	defff904 	addi	sp,sp,-28
 8007eac:	dc400115 	stw	r17,4(sp)
 8007eb0:	dc000015 	stw	r16,0(sp)
 8007eb4:	2023883a 	mov	r17,r4
 8007eb8:	2821883a 	mov	r16,r5
 8007ebc:	39000204 	addi	r4,r7,8
 8007ec0:	01400244 	movi	r5,9
 8007ec4:	dcc00315 	stw	r19,12(sp)
 8007ec8:	dc800215 	stw	r18,8(sp)
 8007ecc:	dfc00615 	stw	ra,24(sp)
 8007ed0:	dd400515 	stw	r21,20(sp)
 8007ed4:	dd000415 	stw	r20,16(sp)
 8007ed8:	3825883a 	mov	r18,r7
 8007edc:	3027883a 	mov	r19,r6
 8007ee0:	8001f340 	call	8001f34 <__divsi3>
 8007ee4:	00c00044 	movi	r3,1
 8007ee8:	000b883a 	mov	r5,zero
 8007eec:	1880030e 	bge	r3,r2,8007efc <__s2b+0x54>
 8007ef0:	18c7883a 	add	r3,r3,r3
 8007ef4:	29400044 	addi	r5,r5,1
 8007ef8:	18bffd16 	blt	r3,r2,8007ef0 <__alt_data_end+0xfc007ef0>
 8007efc:	8809883a 	mov	r4,r17
 8007f00:	8007c9c0 	call	8007c9c <_Balloc>
 8007f04:	d8c00717 	ldw	r3,28(sp)
 8007f08:	10c00515 	stw	r3,20(r2)
 8007f0c:	00c00044 	movi	r3,1
 8007f10:	10c00415 	stw	r3,16(r2)
 8007f14:	00c00244 	movi	r3,9
 8007f18:	1cc0210e 	bge	r3,r19,8007fa0 <__s2b+0xf8>
 8007f1c:	80eb883a 	add	r21,r16,r3
 8007f20:	a829883a 	mov	r20,r21
 8007f24:	84e1883a 	add	r16,r16,r19
 8007f28:	a1c00007 	ldb	r7,0(r20)
 8007f2c:	8809883a 	mov	r4,r17
 8007f30:	a5000044 	addi	r20,r20,1
 8007f34:	100b883a 	mov	r5,r2
 8007f38:	01800284 	movi	r6,10
 8007f3c:	39fff404 	addi	r7,r7,-48
 8007f40:	8007d6c0 	call	8007d6c <__multadd>
 8007f44:	a43ff81e 	bne	r20,r16,8007f28 <__alt_data_end+0xfc007f28>
 8007f48:	ace1883a 	add	r16,r21,r19
 8007f4c:	843ffe04 	addi	r16,r16,-8
 8007f50:	9c800a0e 	bge	r19,r18,8007f7c <__s2b+0xd4>
 8007f54:	94e5c83a 	sub	r18,r18,r19
 8007f58:	84a5883a 	add	r18,r16,r18
 8007f5c:	81c00007 	ldb	r7,0(r16)
 8007f60:	8809883a 	mov	r4,r17
 8007f64:	84000044 	addi	r16,r16,1
 8007f68:	100b883a 	mov	r5,r2
 8007f6c:	01800284 	movi	r6,10
 8007f70:	39fff404 	addi	r7,r7,-48
 8007f74:	8007d6c0 	call	8007d6c <__multadd>
 8007f78:	84bff81e 	bne	r16,r18,8007f5c <__alt_data_end+0xfc007f5c>
 8007f7c:	dfc00617 	ldw	ra,24(sp)
 8007f80:	dd400517 	ldw	r21,20(sp)
 8007f84:	dd000417 	ldw	r20,16(sp)
 8007f88:	dcc00317 	ldw	r19,12(sp)
 8007f8c:	dc800217 	ldw	r18,8(sp)
 8007f90:	dc400117 	ldw	r17,4(sp)
 8007f94:	dc000017 	ldw	r16,0(sp)
 8007f98:	dec00704 	addi	sp,sp,28
 8007f9c:	f800283a 	ret
 8007fa0:	84000284 	addi	r16,r16,10
 8007fa4:	1827883a 	mov	r19,r3
 8007fa8:	003fe906 	br	8007f50 <__alt_data_end+0xfc007f50>

08007fac <__hi0bits>:
 8007fac:	20bfffec 	andhi	r2,r4,65535
 8007fb0:	1000141e 	bne	r2,zero,8008004 <__hi0bits+0x58>
 8007fb4:	2008943a 	slli	r4,r4,16
 8007fb8:	00800404 	movi	r2,16
 8007fbc:	20ffc02c 	andhi	r3,r4,65280
 8007fc0:	1800021e 	bne	r3,zero,8007fcc <__hi0bits+0x20>
 8007fc4:	2008923a 	slli	r4,r4,8
 8007fc8:	10800204 	addi	r2,r2,8
 8007fcc:	20fc002c 	andhi	r3,r4,61440
 8007fd0:	1800021e 	bne	r3,zero,8007fdc <__hi0bits+0x30>
 8007fd4:	2008913a 	slli	r4,r4,4
 8007fd8:	10800104 	addi	r2,r2,4
 8007fdc:	20f0002c 	andhi	r3,r4,49152
 8007fe0:	1800031e 	bne	r3,zero,8007ff0 <__hi0bits+0x44>
 8007fe4:	2109883a 	add	r4,r4,r4
 8007fe8:	10800084 	addi	r2,r2,2
 8007fec:	2109883a 	add	r4,r4,r4
 8007ff0:	20000316 	blt	r4,zero,8008000 <__hi0bits+0x54>
 8007ff4:	2110002c 	andhi	r4,r4,16384
 8007ff8:	2000041e 	bne	r4,zero,800800c <__hi0bits+0x60>
 8007ffc:	00800804 	movi	r2,32
 8008000:	f800283a 	ret
 8008004:	0005883a 	mov	r2,zero
 8008008:	003fec06 	br	8007fbc <__alt_data_end+0xfc007fbc>
 800800c:	10800044 	addi	r2,r2,1
 8008010:	f800283a 	ret

08008014 <__lo0bits>:
 8008014:	20c00017 	ldw	r3,0(r4)
 8008018:	188001cc 	andi	r2,r3,7
 800801c:	10000826 	beq	r2,zero,8008040 <__lo0bits+0x2c>
 8008020:	1880004c 	andi	r2,r3,1
 8008024:	1000211e 	bne	r2,zero,80080ac <__lo0bits+0x98>
 8008028:	1880008c 	andi	r2,r3,2
 800802c:	1000211e 	bne	r2,zero,80080b4 <__lo0bits+0xa0>
 8008030:	1806d0ba 	srli	r3,r3,2
 8008034:	00800084 	movi	r2,2
 8008038:	20c00015 	stw	r3,0(r4)
 800803c:	f800283a 	ret
 8008040:	18bfffcc 	andi	r2,r3,65535
 8008044:	10001326 	beq	r2,zero,8008094 <__lo0bits+0x80>
 8008048:	0005883a 	mov	r2,zero
 800804c:	19403fcc 	andi	r5,r3,255
 8008050:	2800021e 	bne	r5,zero,800805c <__lo0bits+0x48>
 8008054:	1806d23a 	srli	r3,r3,8
 8008058:	10800204 	addi	r2,r2,8
 800805c:	194003cc 	andi	r5,r3,15
 8008060:	2800021e 	bne	r5,zero,800806c <__lo0bits+0x58>
 8008064:	1806d13a 	srli	r3,r3,4
 8008068:	10800104 	addi	r2,r2,4
 800806c:	194000cc 	andi	r5,r3,3
 8008070:	2800021e 	bne	r5,zero,800807c <__lo0bits+0x68>
 8008074:	1806d0ba 	srli	r3,r3,2
 8008078:	10800084 	addi	r2,r2,2
 800807c:	1940004c 	andi	r5,r3,1
 8008080:	2800081e 	bne	r5,zero,80080a4 <__lo0bits+0x90>
 8008084:	1806d07a 	srli	r3,r3,1
 8008088:	1800051e 	bne	r3,zero,80080a0 <__lo0bits+0x8c>
 800808c:	00800804 	movi	r2,32
 8008090:	f800283a 	ret
 8008094:	1806d43a 	srli	r3,r3,16
 8008098:	00800404 	movi	r2,16
 800809c:	003feb06 	br	800804c <__alt_data_end+0xfc00804c>
 80080a0:	10800044 	addi	r2,r2,1
 80080a4:	20c00015 	stw	r3,0(r4)
 80080a8:	f800283a 	ret
 80080ac:	0005883a 	mov	r2,zero
 80080b0:	f800283a 	ret
 80080b4:	1806d07a 	srli	r3,r3,1
 80080b8:	00800044 	movi	r2,1
 80080bc:	20c00015 	stw	r3,0(r4)
 80080c0:	f800283a 	ret

080080c4 <__i2b>:
 80080c4:	defffd04 	addi	sp,sp,-12
 80080c8:	dc000015 	stw	r16,0(sp)
 80080cc:	04000044 	movi	r16,1
 80080d0:	dc400115 	stw	r17,4(sp)
 80080d4:	2823883a 	mov	r17,r5
 80080d8:	800b883a 	mov	r5,r16
 80080dc:	dfc00215 	stw	ra,8(sp)
 80080e0:	8007c9c0 	call	8007c9c <_Balloc>
 80080e4:	14400515 	stw	r17,20(r2)
 80080e8:	14000415 	stw	r16,16(r2)
 80080ec:	dfc00217 	ldw	ra,8(sp)
 80080f0:	dc400117 	ldw	r17,4(sp)
 80080f4:	dc000017 	ldw	r16,0(sp)
 80080f8:	dec00304 	addi	sp,sp,12
 80080fc:	f800283a 	ret

08008100 <__multiply>:
 8008100:	deffef04 	addi	sp,sp,-68
 8008104:	dc400815 	stw	r17,32(sp)
 8008108:	dc000715 	stw	r16,28(sp)
 800810c:	2c400417 	ldw	r17,16(r5)
 8008110:	34000417 	ldw	r16,16(r6)
 8008114:	dd800d15 	stw	r22,52(sp)
 8008118:	dc800915 	stw	r18,36(sp)
 800811c:	dfc01015 	stw	ra,64(sp)
 8008120:	df000f15 	stw	fp,60(sp)
 8008124:	ddc00e15 	stw	r23,56(sp)
 8008128:	dd400c15 	stw	r21,48(sp)
 800812c:	dd000b15 	stw	r20,44(sp)
 8008130:	dcc00a15 	stw	r19,40(sp)
 8008134:	2825883a 	mov	r18,r5
 8008138:	302d883a 	mov	r22,r6
 800813c:	8c009116 	blt	r17,r16,8008384 <__multiply+0x284>
 8008140:	8005883a 	mov	r2,r16
 8008144:	8821883a 	mov	r16,r17
 8008148:	1023883a 	mov	r17,r2
 800814c:	90800217 	ldw	r2,8(r18)
 8008150:	8447883a 	add	r3,r16,r17
 8008154:	d8c00215 	stw	r3,8(sp)
 8008158:	91400117 	ldw	r5,4(r18)
 800815c:	10c0010e 	bge	r2,r3,8008164 <__multiply+0x64>
 8008160:	29400044 	addi	r5,r5,1
 8008164:	8007c9c0 	call	8007c9c <_Balloc>
 8008168:	d8c00217 	ldw	r3,8(sp)
 800816c:	d8800615 	stw	r2,24(sp)
 8008170:	18eb883a 	add	r21,r3,r3
 8008174:	ad6b883a 	add	r21,r21,r21
 8008178:	10c00504 	addi	r3,r2,20
 800817c:	1d6b883a 	add	r21,r3,r21
 8008180:	d8c00115 	stw	r3,4(sp)
 8008184:	dd400315 	stw	r21,12(sp)
 8008188:	1805883a 	mov	r2,r3
 800818c:	1d40042e 	bgeu	r3,r21,80081a0 <__multiply+0xa0>
 8008190:	d8c00317 	ldw	r3,12(sp)
 8008194:	10000015 	stw	zero,0(r2)
 8008198:	10800104 	addi	r2,r2,4
 800819c:	10fffc36 	bltu	r2,r3,8008190 <__alt_data_end+0xfc008190>
 80081a0:	8c63883a 	add	r17,r17,r17
 80081a4:	b5800504 	addi	r22,r22,20
 80081a8:	8c63883a 	add	r17,r17,r17
 80081ac:	94800504 	addi	r18,r18,20
 80081b0:	8421883a 	add	r16,r16,r16
 80081b4:	b463883a 	add	r17,r22,r17
 80081b8:	8421883a 	add	r16,r16,r16
 80081bc:	dd800015 	stw	r22,0(sp)
 80081c0:	dc800415 	stw	r18,16(sp)
 80081c4:	dc400515 	stw	r17,20(sp)
 80081c8:	9429883a 	add	r20,r18,r16
 80081cc:	b4404f2e 	bgeu	r22,r17,800830c <__multiply+0x20c>
 80081d0:	d8c00017 	ldw	r3,0(sp)
 80081d4:	1c800017 	ldw	r18,0(r3)
 80081d8:	943fffcc 	andi	r16,r18,65535
 80081dc:	80001e26 	beq	r16,zero,8008258 <__multiply+0x158>
 80081e0:	dd800117 	ldw	r22,4(sp)
 80081e4:	dd400417 	ldw	r21,16(sp)
 80081e8:	0025883a 	mov	r18,zero
 80081ec:	adc00017 	ldw	r23,0(r21)
 80081f0:	b4c00017 	ldw	r19,0(r22)
 80081f4:	800b883a 	mov	r5,r16
 80081f8:	b93fffcc 	andi	r4,r23,65535
 80081fc:	8001ff40 	call	8001ff4 <__mulsi3>
 8008200:	9c7fffcc 	andi	r17,r19,65535
 8008204:	8885883a 	add	r2,r17,r2
 8008208:	b808d43a 	srli	r4,r23,16
 800820c:	14a3883a 	add	r17,r2,r18
 8008210:	9826d43a 	srli	r19,r19,16
 8008214:	8824d43a 	srli	r18,r17,16
 8008218:	800b883a 	mov	r5,r16
 800821c:	8001ff40 	call	8001ff4 <__mulsi3>
 8008220:	9885883a 	add	r2,r19,r2
 8008224:	14a7883a 	add	r19,r2,r18
 8008228:	88ffffcc 	andi	r3,r17,65535
 800822c:	9822943a 	slli	r17,r19,16
 8008230:	ad400104 	addi	r21,r21,4
 8008234:	b005883a 	mov	r2,r22
 8008238:	88c6b03a 	or	r3,r17,r3
 800823c:	b0c00015 	stw	r3,0(r22)
 8008240:	9824d43a 	srli	r18,r19,16
 8008244:	b5800104 	addi	r22,r22,4
 8008248:	ad3fe836 	bltu	r21,r20,80081ec <__alt_data_end+0xfc0081ec>
 800824c:	d8c00017 	ldw	r3,0(sp)
 8008250:	14800115 	stw	r18,4(r2)
 8008254:	1c800017 	ldw	r18,0(r3)
 8008258:	9024d43a 	srli	r18,r18,16
 800825c:	90002226 	beq	r18,zero,80082e8 <__multiply+0x1e8>
 8008260:	d8c00117 	ldw	r3,4(sp)
 8008264:	dd800417 	ldw	r22,16(sp)
 8008268:	002f883a 	mov	r23,zero
 800826c:	1f000017 	ldw	fp,0(r3)
 8008270:	1823883a 	mov	r17,r3
 8008274:	182b883a 	mov	r21,r3
 8008278:	e021883a 	mov	r16,fp
 800827c:	00000106 	br	8008284 <__multiply+0x184>
 8008280:	982b883a 	mov	r21,r19
 8008284:	b100000b 	ldhu	r4,0(r22)
 8008288:	8020d43a 	srli	r16,r16,16
 800828c:	900b883a 	mov	r5,r18
 8008290:	8001ff40 	call	8001ff4 <__mulsi3>
 8008294:	1405883a 	add	r2,r2,r16
 8008298:	15ef883a 	add	r23,r2,r23
 800829c:	b804943a 	slli	r2,r23,16
 80082a0:	e0ffffcc 	andi	r3,fp,65535
 80082a4:	8c400104 	addi	r17,r17,4
 80082a8:	10c6b03a 	or	r3,r2,r3
 80082ac:	88ffff15 	stw	r3,-4(r17)
 80082b0:	b5800104 	addi	r22,r22,4
 80082b4:	b13fff17 	ldw	r4,-4(r22)
 80082b8:	acc00104 	addi	r19,r21,4
 80082bc:	900b883a 	mov	r5,r18
 80082c0:	2008d43a 	srli	r4,r4,16
 80082c4:	9c000017 	ldw	r16,0(r19)
 80082c8:	8001ff40 	call	8001ff4 <__mulsi3>
 80082cc:	b806d43a 	srli	r3,r23,16
 80082d0:	813fffcc 	andi	r4,r16,65535
 80082d4:	1105883a 	add	r2,r2,r4
 80082d8:	10f9883a 	add	fp,r2,r3
 80082dc:	e02ed43a 	srli	r23,fp,16
 80082e0:	b53fe736 	bltu	r22,r20,8008280 <__alt_data_end+0xfc008280>
 80082e4:	af000115 	stw	fp,4(r21)
 80082e8:	d8c00017 	ldw	r3,0(sp)
 80082ec:	d9000517 	ldw	r4,20(sp)
 80082f0:	18c00104 	addi	r3,r3,4
 80082f4:	d8c00015 	stw	r3,0(sp)
 80082f8:	d8c00117 	ldw	r3,4(sp)
 80082fc:	18c00104 	addi	r3,r3,4
 8008300:	d8c00115 	stw	r3,4(sp)
 8008304:	d8c00017 	ldw	r3,0(sp)
 8008308:	193fb136 	bltu	r3,r4,80081d0 <__alt_data_end+0xfc0081d0>
 800830c:	d8c00217 	ldw	r3,8(sp)
 8008310:	00c00c0e 	bge	zero,r3,8008344 <__multiply+0x244>
 8008314:	d8c00317 	ldw	r3,12(sp)
 8008318:	18bfff17 	ldw	r2,-4(r3)
 800831c:	1d7fff04 	addi	r21,r3,-4
 8008320:	10000326 	beq	r2,zero,8008330 <__multiply+0x230>
 8008324:	00000706 	br	8008344 <__multiply+0x244>
 8008328:	a8800017 	ldw	r2,0(r21)
 800832c:	1000051e 	bne	r2,zero,8008344 <__multiply+0x244>
 8008330:	d8c00217 	ldw	r3,8(sp)
 8008334:	ad7fff04 	addi	r21,r21,-4
 8008338:	18ffffc4 	addi	r3,r3,-1
 800833c:	d8c00215 	stw	r3,8(sp)
 8008340:	183ff91e 	bne	r3,zero,8008328 <__alt_data_end+0xfc008328>
 8008344:	d8c00617 	ldw	r3,24(sp)
 8008348:	d9000217 	ldw	r4,8(sp)
 800834c:	1805883a 	mov	r2,r3
 8008350:	19000415 	stw	r4,16(r3)
 8008354:	dfc01017 	ldw	ra,64(sp)
 8008358:	df000f17 	ldw	fp,60(sp)
 800835c:	ddc00e17 	ldw	r23,56(sp)
 8008360:	dd800d17 	ldw	r22,52(sp)
 8008364:	dd400c17 	ldw	r21,48(sp)
 8008368:	dd000b17 	ldw	r20,44(sp)
 800836c:	dcc00a17 	ldw	r19,40(sp)
 8008370:	dc800917 	ldw	r18,36(sp)
 8008374:	dc400817 	ldw	r17,32(sp)
 8008378:	dc000717 	ldw	r16,28(sp)
 800837c:	dec01104 	addi	sp,sp,68
 8008380:	f800283a 	ret
 8008384:	3025883a 	mov	r18,r6
 8008388:	282d883a 	mov	r22,r5
 800838c:	003f6f06 	br	800814c <__alt_data_end+0xfc00814c>

08008390 <__pow5mult>:
 8008390:	defffa04 	addi	sp,sp,-24
 8008394:	dcc00315 	stw	r19,12(sp)
 8008398:	dc800215 	stw	r18,8(sp)
 800839c:	dc000015 	stw	r16,0(sp)
 80083a0:	dfc00515 	stw	ra,20(sp)
 80083a4:	dd000415 	stw	r20,16(sp)
 80083a8:	dc400115 	stw	r17,4(sp)
 80083ac:	308000cc 	andi	r2,r6,3
 80083b0:	3021883a 	mov	r16,r6
 80083b4:	2027883a 	mov	r19,r4
 80083b8:	2825883a 	mov	r18,r5
 80083bc:	10002e1e 	bne	r2,zero,8008478 <__pow5mult+0xe8>
 80083c0:	8021d0ba 	srai	r16,r16,2
 80083c4:	80001a26 	beq	r16,zero,8008430 <__pow5mult+0xa0>
 80083c8:	9c401217 	ldw	r17,72(r19)
 80083cc:	8800061e 	bne	r17,zero,80083e8 <__pow5mult+0x58>
 80083d0:	00003406 	br	80084a4 <__pow5mult+0x114>
 80083d4:	8021d07a 	srai	r16,r16,1
 80083d8:	80001526 	beq	r16,zero,8008430 <__pow5mult+0xa0>
 80083dc:	88800017 	ldw	r2,0(r17)
 80083e0:	10001c26 	beq	r2,zero,8008454 <__pow5mult+0xc4>
 80083e4:	1023883a 	mov	r17,r2
 80083e8:	80c0004c 	andi	r3,r16,1
 80083ec:	183ff926 	beq	r3,zero,80083d4 <__alt_data_end+0xfc0083d4>
 80083f0:	900b883a 	mov	r5,r18
 80083f4:	880d883a 	mov	r6,r17
 80083f8:	9809883a 	mov	r4,r19
 80083fc:	80081000 	call	8008100 <__multiply>
 8008400:	90001b26 	beq	r18,zero,8008470 <__pow5mult+0xe0>
 8008404:	91c00117 	ldw	r7,4(r18)
 8008408:	98c01317 	ldw	r3,76(r19)
 800840c:	8021d07a 	srai	r16,r16,1
 8008410:	39cf883a 	add	r7,r7,r7
 8008414:	39cf883a 	add	r7,r7,r7
 8008418:	19c7883a 	add	r3,r3,r7
 800841c:	19000017 	ldw	r4,0(r3)
 8008420:	91000015 	stw	r4,0(r18)
 8008424:	1c800015 	stw	r18,0(r3)
 8008428:	1025883a 	mov	r18,r2
 800842c:	803feb1e 	bne	r16,zero,80083dc <__alt_data_end+0xfc0083dc>
 8008430:	9005883a 	mov	r2,r18
 8008434:	dfc00517 	ldw	ra,20(sp)
 8008438:	dd000417 	ldw	r20,16(sp)
 800843c:	dcc00317 	ldw	r19,12(sp)
 8008440:	dc800217 	ldw	r18,8(sp)
 8008444:	dc400117 	ldw	r17,4(sp)
 8008448:	dc000017 	ldw	r16,0(sp)
 800844c:	dec00604 	addi	sp,sp,24
 8008450:	f800283a 	ret
 8008454:	9809883a 	mov	r4,r19
 8008458:	880b883a 	mov	r5,r17
 800845c:	880d883a 	mov	r6,r17
 8008460:	80081000 	call	8008100 <__multiply>
 8008464:	88800015 	stw	r2,0(r17)
 8008468:	10000015 	stw	zero,0(r2)
 800846c:	003fdd06 	br	80083e4 <__alt_data_end+0xfc0083e4>
 8008470:	1025883a 	mov	r18,r2
 8008474:	003fd706 	br	80083d4 <__alt_data_end+0xfc0083d4>
 8008478:	10bfffc4 	addi	r2,r2,-1
 800847c:	1085883a 	add	r2,r2,r2
 8008480:	00c20074 	movhi	r3,2049
 8008484:	18c0e104 	addi	r3,r3,900
 8008488:	1085883a 	add	r2,r2,r2
 800848c:	1885883a 	add	r2,r3,r2
 8008490:	11800017 	ldw	r6,0(r2)
 8008494:	000f883a 	mov	r7,zero
 8008498:	8007d6c0 	call	8007d6c <__multadd>
 800849c:	1025883a 	mov	r18,r2
 80084a0:	003fc706 	br	80083c0 <__alt_data_end+0xfc0083c0>
 80084a4:	05000044 	movi	r20,1
 80084a8:	9809883a 	mov	r4,r19
 80084ac:	a00b883a 	mov	r5,r20
 80084b0:	8007c9c0 	call	8007c9c <_Balloc>
 80084b4:	1023883a 	mov	r17,r2
 80084b8:	00809c44 	movi	r2,625
 80084bc:	88800515 	stw	r2,20(r17)
 80084c0:	8d000415 	stw	r20,16(r17)
 80084c4:	9c401215 	stw	r17,72(r19)
 80084c8:	88000015 	stw	zero,0(r17)
 80084cc:	003fc606 	br	80083e8 <__alt_data_end+0xfc0083e8>

080084d0 <__lshift>:
 80084d0:	defff904 	addi	sp,sp,-28
 80084d4:	dd000415 	stw	r20,16(sp)
 80084d8:	dcc00315 	stw	r19,12(sp)
 80084dc:	3029d17a 	srai	r20,r6,5
 80084e0:	2cc00417 	ldw	r19,16(r5)
 80084e4:	28800217 	ldw	r2,8(r5)
 80084e8:	dd400515 	stw	r21,20(sp)
 80084ec:	a4e7883a 	add	r19,r20,r19
 80084f0:	dc800215 	stw	r18,8(sp)
 80084f4:	dc400115 	stw	r17,4(sp)
 80084f8:	dc000015 	stw	r16,0(sp)
 80084fc:	dfc00615 	stw	ra,24(sp)
 8008500:	9c000044 	addi	r16,r19,1
 8008504:	2823883a 	mov	r17,r5
 8008508:	302b883a 	mov	r21,r6
 800850c:	2025883a 	mov	r18,r4
 8008510:	29400117 	ldw	r5,4(r5)
 8008514:	1400030e 	bge	r2,r16,8008524 <__lshift+0x54>
 8008518:	1085883a 	add	r2,r2,r2
 800851c:	29400044 	addi	r5,r5,1
 8008520:	143ffd16 	blt	r2,r16,8008518 <__alt_data_end+0xfc008518>
 8008524:	9009883a 	mov	r4,r18
 8008528:	8007c9c0 	call	8007c9c <_Balloc>
 800852c:	11c00504 	addi	r7,r2,20
 8008530:	0500090e 	bge	zero,r20,8008558 <__lshift+0x88>
 8008534:	3811883a 	mov	r8,r7
 8008538:	0007883a 	mov	r3,zero
 800853c:	40000015 	stw	zero,0(r8)
 8008540:	18c00044 	addi	r3,r3,1
 8008544:	42000104 	addi	r8,r8,4
 8008548:	1d3ffc1e 	bne	r3,r20,800853c <__alt_data_end+0xfc00853c>
 800854c:	18c7883a 	add	r3,r3,r3
 8008550:	18c7883a 	add	r3,r3,r3
 8008554:	38cf883a 	add	r7,r7,r3
 8008558:	89000417 	ldw	r4,16(r17)
 800855c:	88c00504 	addi	r3,r17,20
 8008560:	a98007cc 	andi	r6,r21,31
 8008564:	2109883a 	add	r4,r4,r4
 8008568:	2109883a 	add	r4,r4,r4
 800856c:	1909883a 	add	r4,r3,r4
 8008570:	30002326 	beq	r6,zero,8008600 <__lshift+0x130>
 8008574:	01400804 	movi	r5,32
 8008578:	298bc83a 	sub	r5,r5,r6
 800857c:	0013883a 	mov	r9,zero
 8008580:	1a000017 	ldw	r8,0(r3)
 8008584:	3815883a 	mov	r10,r7
 8008588:	39c00104 	addi	r7,r7,4
 800858c:	4190983a 	sll	r8,r8,r6
 8008590:	18c00104 	addi	r3,r3,4
 8008594:	4a10b03a 	or	r8,r9,r8
 8008598:	3a3fff15 	stw	r8,-4(r7)
 800859c:	1a3fff17 	ldw	r8,-4(r3)
 80085a0:	4152d83a 	srl	r9,r8,r5
 80085a4:	193ff636 	bltu	r3,r4,8008580 <__alt_data_end+0xfc008580>
 80085a8:	52400115 	stw	r9,4(r10)
 80085ac:	48000126 	beq	r9,zero,80085b4 <__lshift+0xe4>
 80085b0:	9c000084 	addi	r16,r19,2
 80085b4:	89000117 	ldw	r4,4(r17)
 80085b8:	90c01317 	ldw	r3,76(r18)
 80085bc:	843fffc4 	addi	r16,r16,-1
 80085c0:	2109883a 	add	r4,r4,r4
 80085c4:	2109883a 	add	r4,r4,r4
 80085c8:	1907883a 	add	r3,r3,r4
 80085cc:	19000017 	ldw	r4,0(r3)
 80085d0:	14000415 	stw	r16,16(r2)
 80085d4:	89000015 	stw	r4,0(r17)
 80085d8:	1c400015 	stw	r17,0(r3)
 80085dc:	dfc00617 	ldw	ra,24(sp)
 80085e0:	dd400517 	ldw	r21,20(sp)
 80085e4:	dd000417 	ldw	r20,16(sp)
 80085e8:	dcc00317 	ldw	r19,12(sp)
 80085ec:	dc800217 	ldw	r18,8(sp)
 80085f0:	dc400117 	ldw	r17,4(sp)
 80085f4:	dc000017 	ldw	r16,0(sp)
 80085f8:	dec00704 	addi	sp,sp,28
 80085fc:	f800283a 	ret
 8008600:	19400017 	ldw	r5,0(r3)
 8008604:	39c00104 	addi	r7,r7,4
 8008608:	18c00104 	addi	r3,r3,4
 800860c:	397fff15 	stw	r5,-4(r7)
 8008610:	193ffb36 	bltu	r3,r4,8008600 <__alt_data_end+0xfc008600>
 8008614:	003fe706 	br	80085b4 <__alt_data_end+0xfc0085b4>

08008618 <__mcmp>:
 8008618:	20800417 	ldw	r2,16(r4)
 800861c:	28c00417 	ldw	r3,16(r5)
 8008620:	10c5c83a 	sub	r2,r2,r3
 8008624:	1000111e 	bne	r2,zero,800866c <__mcmp+0x54>
 8008628:	18c7883a 	add	r3,r3,r3
 800862c:	18c7883a 	add	r3,r3,r3
 8008630:	21000504 	addi	r4,r4,20
 8008634:	29400504 	addi	r5,r5,20
 8008638:	20c5883a 	add	r2,r4,r3
 800863c:	28cb883a 	add	r5,r5,r3
 8008640:	00000106 	br	8008648 <__mcmp+0x30>
 8008644:	20800a2e 	bgeu	r4,r2,8008670 <__mcmp+0x58>
 8008648:	10bfff04 	addi	r2,r2,-4
 800864c:	297fff04 	addi	r5,r5,-4
 8008650:	11800017 	ldw	r6,0(r2)
 8008654:	28c00017 	ldw	r3,0(r5)
 8008658:	30fffa26 	beq	r6,r3,8008644 <__alt_data_end+0xfc008644>
 800865c:	30c00236 	bltu	r6,r3,8008668 <__mcmp+0x50>
 8008660:	00800044 	movi	r2,1
 8008664:	f800283a 	ret
 8008668:	00bfffc4 	movi	r2,-1
 800866c:	f800283a 	ret
 8008670:	0005883a 	mov	r2,zero
 8008674:	f800283a 	ret

08008678 <__mdiff>:
 8008678:	defffb04 	addi	sp,sp,-20
 800867c:	dc000015 	stw	r16,0(sp)
 8008680:	2821883a 	mov	r16,r5
 8008684:	dcc00315 	stw	r19,12(sp)
 8008688:	300b883a 	mov	r5,r6
 800868c:	2027883a 	mov	r19,r4
 8008690:	8009883a 	mov	r4,r16
 8008694:	dc800215 	stw	r18,8(sp)
 8008698:	dfc00415 	stw	ra,16(sp)
 800869c:	dc400115 	stw	r17,4(sp)
 80086a0:	3025883a 	mov	r18,r6
 80086a4:	80086180 	call	8008618 <__mcmp>
 80086a8:	10005226 	beq	r2,zero,80087f4 <__mdiff+0x17c>
 80086ac:	10004c16 	blt	r2,zero,80087e0 <__mdiff+0x168>
 80086b0:	0023883a 	mov	r17,zero
 80086b4:	81400117 	ldw	r5,4(r16)
 80086b8:	9809883a 	mov	r4,r19
 80086bc:	8007c9c0 	call	8007c9c <_Balloc>
 80086c0:	83400417 	ldw	r13,16(r16)
 80086c4:	93800417 	ldw	r14,16(r18)
 80086c8:	81000504 	addi	r4,r16,20
 80086cc:	6b59883a 	add	r12,r13,r13
 80086d0:	739d883a 	add	r14,r14,r14
 80086d4:	6319883a 	add	r12,r12,r12
 80086d8:	91800504 	addi	r6,r18,20
 80086dc:	739d883a 	add	r14,r14,r14
 80086e0:	14400315 	stw	r17,12(r2)
 80086e4:	2319883a 	add	r12,r4,r12
 80086e8:	339d883a 	add	r14,r6,r14
 80086ec:	12400504 	addi	r9,r2,20
 80086f0:	0007883a 	mov	r3,zero
 80086f4:	22000017 	ldw	r8,0(r4)
 80086f8:	32800017 	ldw	r10,0(r6)
 80086fc:	4ac00104 	addi	r11,r9,4
 8008700:	41ffffcc 	andi	r7,r8,65535
 8008704:	38c7883a 	add	r3,r7,r3
 8008708:	51ffffcc 	andi	r7,r10,65535
 800870c:	19cfc83a 	sub	r7,r3,r7
 8008710:	4010d43a 	srli	r8,r8,16
 8008714:	5014d43a 	srli	r10,r10,16
 8008718:	3807d43a 	srai	r3,r7,16
 800871c:	39ffffcc 	andi	r7,r7,65535
 8008720:	4291c83a 	sub	r8,r8,r10
 8008724:	40c7883a 	add	r3,r8,r3
 8008728:	1810943a 	slli	r8,r3,16
 800872c:	31800104 	addi	r6,r6,4
 8008730:	21000104 	addi	r4,r4,4
 8008734:	41ceb03a 	or	r7,r8,r7
 8008738:	49c00015 	stw	r7,0(r9)
 800873c:	1807d43a 	srai	r3,r3,16
 8008740:	580b883a 	mov	r5,r11
 8008744:	5813883a 	mov	r9,r11
 8008748:	33bfea36 	bltu	r6,r14,80086f4 <__alt_data_end+0xfc0086f4>
 800874c:	2011883a 	mov	r8,r4
 8008750:	2300152e 	bgeu	r4,r12,80087a8 <__mdiff+0x130>
 8008754:	21400017 	ldw	r5,0(r4)
 8008758:	4a400104 	addi	r9,r9,4
 800875c:	21000104 	addi	r4,r4,4
 8008760:	29ffffcc 	andi	r7,r5,65535
 8008764:	38c7883a 	add	r3,r7,r3
 8008768:	280ad43a 	srli	r5,r5,16
 800876c:	180dd43a 	srai	r6,r3,16
 8008770:	19ffffcc 	andi	r7,r3,65535
 8008774:	3147883a 	add	r3,r6,r5
 8008778:	180a943a 	slli	r5,r3,16
 800877c:	1807d43a 	srai	r3,r3,16
 8008780:	29ceb03a 	or	r7,r5,r7
 8008784:	49ffff15 	stw	r7,-4(r9)
 8008788:	233ff236 	bltu	r4,r12,8008754 <__alt_data_end+0xfc008754>
 800878c:	0206303a 	nor	r3,zero,r8
 8008790:	1b07883a 	add	r3,r3,r12
 8008794:	1806d0ba 	srli	r3,r3,2
 8008798:	18c00044 	addi	r3,r3,1
 800879c:	18c7883a 	add	r3,r3,r3
 80087a0:	18c7883a 	add	r3,r3,r3
 80087a4:	58cb883a 	add	r5,r11,r3
 80087a8:	28ffff04 	addi	r3,r5,-4
 80087ac:	3800041e 	bne	r7,zero,80087c0 <__mdiff+0x148>
 80087b0:	18ffff04 	addi	r3,r3,-4
 80087b4:	19000017 	ldw	r4,0(r3)
 80087b8:	6b7fffc4 	addi	r13,r13,-1
 80087bc:	203ffc26 	beq	r4,zero,80087b0 <__alt_data_end+0xfc0087b0>
 80087c0:	13400415 	stw	r13,16(r2)
 80087c4:	dfc00417 	ldw	ra,16(sp)
 80087c8:	dcc00317 	ldw	r19,12(sp)
 80087cc:	dc800217 	ldw	r18,8(sp)
 80087d0:	dc400117 	ldw	r17,4(sp)
 80087d4:	dc000017 	ldw	r16,0(sp)
 80087d8:	dec00504 	addi	sp,sp,20
 80087dc:	f800283a 	ret
 80087e0:	8005883a 	mov	r2,r16
 80087e4:	04400044 	movi	r17,1
 80087e8:	9021883a 	mov	r16,r18
 80087ec:	1025883a 	mov	r18,r2
 80087f0:	003fb006 	br	80086b4 <__alt_data_end+0xfc0086b4>
 80087f4:	9809883a 	mov	r4,r19
 80087f8:	000b883a 	mov	r5,zero
 80087fc:	8007c9c0 	call	8007c9c <_Balloc>
 8008800:	00c00044 	movi	r3,1
 8008804:	10c00415 	stw	r3,16(r2)
 8008808:	10000515 	stw	zero,20(r2)
 800880c:	003fed06 	br	80087c4 <__alt_data_end+0xfc0087c4>

08008810 <__ulp>:
 8008810:	295ffc2c 	andhi	r5,r5,32752
 8008814:	00bf3034 	movhi	r2,64704
 8008818:	2887883a 	add	r3,r5,r2
 800881c:	00c0020e 	bge	zero,r3,8008828 <__ulp+0x18>
 8008820:	0005883a 	mov	r2,zero
 8008824:	f800283a 	ret
 8008828:	00c7c83a 	sub	r3,zero,r3
 800882c:	180bd53a 	srai	r5,r3,20
 8008830:	008004c4 	movi	r2,19
 8008834:	11400a0e 	bge	r2,r5,8008860 <__ulp+0x50>
 8008838:	00800c84 	movi	r2,50
 800883c:	0007883a 	mov	r3,zero
 8008840:	11400516 	blt	r2,r5,8008858 <__ulp+0x48>
 8008844:	00800cc4 	movi	r2,51
 8008848:	114bc83a 	sub	r5,r2,r5
 800884c:	00800044 	movi	r2,1
 8008850:	1144983a 	sll	r2,r2,r5
 8008854:	f800283a 	ret
 8008858:	00800044 	movi	r2,1
 800885c:	f800283a 	ret
 8008860:	00800234 	movhi	r2,8
 8008864:	1147d83a 	sra	r3,r2,r5
 8008868:	0005883a 	mov	r2,zero
 800886c:	f800283a 	ret

08008870 <__b2d>:
 8008870:	defffa04 	addi	sp,sp,-24
 8008874:	dc000015 	stw	r16,0(sp)
 8008878:	24000417 	ldw	r16,16(r4)
 800887c:	dc400115 	stw	r17,4(sp)
 8008880:	24400504 	addi	r17,r4,20
 8008884:	8421883a 	add	r16,r16,r16
 8008888:	8421883a 	add	r16,r16,r16
 800888c:	8c21883a 	add	r16,r17,r16
 8008890:	dc800215 	stw	r18,8(sp)
 8008894:	84bfff17 	ldw	r18,-4(r16)
 8008898:	dd000415 	stw	r20,16(sp)
 800889c:	dcc00315 	stw	r19,12(sp)
 80088a0:	9009883a 	mov	r4,r18
 80088a4:	2829883a 	mov	r20,r5
 80088a8:	dfc00515 	stw	ra,20(sp)
 80088ac:	8007fac0 	call	8007fac <__hi0bits>
 80088b0:	00c00804 	movi	r3,32
 80088b4:	1887c83a 	sub	r3,r3,r2
 80088b8:	a0c00015 	stw	r3,0(r20)
 80088bc:	00c00284 	movi	r3,10
 80088c0:	84ffff04 	addi	r19,r16,-4
 80088c4:	18801216 	blt	r3,r2,8008910 <__b2d+0xa0>
 80088c8:	014002c4 	movi	r5,11
 80088cc:	2889c83a 	sub	r4,r5,r2
 80088d0:	9106d83a 	srl	r3,r18,r4
 80088d4:	18cffc34 	orhi	r3,r3,16368
 80088d8:	8cc0282e 	bgeu	r17,r19,800897c <__b2d+0x10c>
 80088dc:	817ffe17 	ldw	r5,-8(r16)
 80088e0:	290ad83a 	srl	r5,r5,r4
 80088e4:	10800544 	addi	r2,r2,21
 80088e8:	9084983a 	sll	r2,r18,r2
 80088ec:	2884b03a 	or	r2,r5,r2
 80088f0:	dfc00517 	ldw	ra,20(sp)
 80088f4:	dd000417 	ldw	r20,16(sp)
 80088f8:	dcc00317 	ldw	r19,12(sp)
 80088fc:	dc800217 	ldw	r18,8(sp)
 8008900:	dc400117 	ldw	r17,4(sp)
 8008904:	dc000017 	ldw	r16,0(sp)
 8008908:	dec00604 	addi	sp,sp,24
 800890c:	f800283a 	ret
 8008910:	113ffd44 	addi	r4,r2,-11
 8008914:	8cc00f2e 	bgeu	r17,r19,8008954 <__b2d+0xe4>
 8008918:	81bffe04 	addi	r6,r16,-8
 800891c:	817ffe17 	ldw	r5,-8(r16)
 8008920:	20001326 	beq	r4,zero,8008970 <__b2d+0x100>
 8008924:	00c00ac4 	movi	r3,43
 8008928:	1885c83a 	sub	r2,r3,r2
 800892c:	2886d83a 	srl	r3,r5,r2
 8008930:	9124983a 	sll	r18,r18,r4
 8008934:	90e4b03a 	or	r18,r18,r3
 8008938:	90cffc34 	orhi	r3,r18,16368
 800893c:	8980112e 	bgeu	r17,r6,8008984 <__b2d+0x114>
 8008940:	81bffd17 	ldw	r6,-12(r16)
 8008944:	308cd83a 	srl	r6,r6,r2
 8008948:	2904983a 	sll	r2,r5,r4
 800894c:	1184b03a 	or	r2,r2,r6
 8008950:	003fe706 	br	80088f0 <__alt_data_end+0xfc0088f0>
 8008954:	20000526 	beq	r4,zero,800896c <__b2d+0xfc>
 8008958:	9124983a 	sll	r18,r18,r4
 800895c:	000d883a 	mov	r6,zero
 8008960:	000b883a 	mov	r5,zero
 8008964:	90cffc34 	orhi	r3,r18,16368
 8008968:	003ff706 	br	8008948 <__alt_data_end+0xfc008948>
 800896c:	000b883a 	mov	r5,zero
 8008970:	90cffc34 	orhi	r3,r18,16368
 8008974:	2805883a 	mov	r2,r5
 8008978:	003fdd06 	br	80088f0 <__alt_data_end+0xfc0088f0>
 800897c:	000b883a 	mov	r5,zero
 8008980:	003fd806 	br	80088e4 <__alt_data_end+0xfc0088e4>
 8008984:	000d883a 	mov	r6,zero
 8008988:	003fef06 	br	8008948 <__alt_data_end+0xfc008948>

0800898c <__d2b>:
 800898c:	defff704 	addi	sp,sp,-36
 8008990:	dc000215 	stw	r16,8(sp)
 8008994:	3021883a 	mov	r16,r6
 8008998:	dc400315 	stw	r17,12(sp)
 800899c:	8022907a 	slli	r17,r16,1
 80089a0:	dd400715 	stw	r21,28(sp)
 80089a4:	282b883a 	mov	r21,r5
 80089a8:	01400044 	movi	r5,1
 80089ac:	dd000615 	stw	r20,24(sp)
 80089b0:	dcc00515 	stw	r19,20(sp)
 80089b4:	dc800415 	stw	r18,16(sp)
 80089b8:	dfc00815 	stw	ra,32(sp)
 80089bc:	3829883a 	mov	r20,r7
 80089c0:	dc800917 	ldw	r18,36(sp)
 80089c4:	8822d57a 	srli	r17,r17,21
 80089c8:	8007c9c0 	call	8007c9c <_Balloc>
 80089cc:	1027883a 	mov	r19,r2
 80089d0:	00800434 	movhi	r2,16
 80089d4:	10bfffc4 	addi	r2,r2,-1
 80089d8:	808c703a 	and	r6,r16,r2
 80089dc:	88000126 	beq	r17,zero,80089e4 <__d2b+0x58>
 80089e0:	31800434 	orhi	r6,r6,16
 80089e4:	d9800015 	stw	r6,0(sp)
 80089e8:	a8001f26 	beq	r21,zero,8008a68 <__d2b+0xdc>
 80089ec:	d9000104 	addi	r4,sp,4
 80089f0:	dd400115 	stw	r21,4(sp)
 80089f4:	80080140 	call	8008014 <__lo0bits>
 80089f8:	d8c00017 	ldw	r3,0(sp)
 80089fc:	1000291e 	bne	r2,zero,8008aa4 <__d2b+0x118>
 8008a00:	d9000117 	ldw	r4,4(sp)
 8008a04:	99000515 	stw	r4,20(r19)
 8008a08:	1820c03a 	cmpne	r16,r3,zero
 8008a0c:	84000044 	addi	r16,r16,1
 8008a10:	98c00615 	stw	r3,24(r19)
 8008a14:	9c000415 	stw	r16,16(r19)
 8008a18:	88001b1e 	bne	r17,zero,8008a88 <__d2b+0xfc>
 8008a1c:	800690ba 	slli	r3,r16,2
 8008a20:	10bef384 	addi	r2,r2,-1074
 8008a24:	a0800015 	stw	r2,0(r20)
 8008a28:	98c5883a 	add	r2,r19,r3
 8008a2c:	11000417 	ldw	r4,16(r2)
 8008a30:	8020917a 	slli	r16,r16,5
 8008a34:	8007fac0 	call	8007fac <__hi0bits>
 8008a38:	8085c83a 	sub	r2,r16,r2
 8008a3c:	90800015 	stw	r2,0(r18)
 8008a40:	9805883a 	mov	r2,r19
 8008a44:	dfc00817 	ldw	ra,32(sp)
 8008a48:	dd400717 	ldw	r21,28(sp)
 8008a4c:	dd000617 	ldw	r20,24(sp)
 8008a50:	dcc00517 	ldw	r19,20(sp)
 8008a54:	dc800417 	ldw	r18,16(sp)
 8008a58:	dc400317 	ldw	r17,12(sp)
 8008a5c:	dc000217 	ldw	r16,8(sp)
 8008a60:	dec00904 	addi	sp,sp,36
 8008a64:	f800283a 	ret
 8008a68:	d809883a 	mov	r4,sp
 8008a6c:	80080140 	call	8008014 <__lo0bits>
 8008a70:	d8c00017 	ldw	r3,0(sp)
 8008a74:	04000044 	movi	r16,1
 8008a78:	9c000415 	stw	r16,16(r19)
 8008a7c:	98c00515 	stw	r3,20(r19)
 8008a80:	10800804 	addi	r2,r2,32
 8008a84:	883fe526 	beq	r17,zero,8008a1c <__alt_data_end+0xfc008a1c>
 8008a88:	8c7ef344 	addi	r17,r17,-1075
 8008a8c:	88a3883a 	add	r17,r17,r2
 8008a90:	00c00d44 	movi	r3,53
 8008a94:	a4400015 	stw	r17,0(r20)
 8008a98:	1885c83a 	sub	r2,r3,r2
 8008a9c:	90800015 	stw	r2,0(r18)
 8008aa0:	003fe706 	br	8008a40 <__alt_data_end+0xfc008a40>
 8008aa4:	01000804 	movi	r4,32
 8008aa8:	2089c83a 	sub	r4,r4,r2
 8008aac:	1908983a 	sll	r4,r3,r4
 8008ab0:	d9400117 	ldw	r5,4(sp)
 8008ab4:	1886d83a 	srl	r3,r3,r2
 8008ab8:	2148b03a 	or	r4,r4,r5
 8008abc:	99000515 	stw	r4,20(r19)
 8008ac0:	d8c00015 	stw	r3,0(sp)
 8008ac4:	003fd006 	br	8008a08 <__alt_data_end+0xfc008a08>

08008ac8 <__ratio>:
 8008ac8:	defff904 	addi	sp,sp,-28
 8008acc:	dc400315 	stw	r17,12(sp)
 8008ad0:	2823883a 	mov	r17,r5
 8008ad4:	d9400104 	addi	r5,sp,4
 8008ad8:	dfc00615 	stw	ra,24(sp)
 8008adc:	dcc00515 	stw	r19,20(sp)
 8008ae0:	dc800415 	stw	r18,16(sp)
 8008ae4:	2027883a 	mov	r19,r4
 8008ae8:	dc000215 	stw	r16,8(sp)
 8008aec:	80088700 	call	8008870 <__b2d>
 8008af0:	8809883a 	mov	r4,r17
 8008af4:	d80b883a 	mov	r5,sp
 8008af8:	1025883a 	mov	r18,r2
 8008afc:	1821883a 	mov	r16,r3
 8008b00:	80088700 	call	8008870 <__b2d>
 8008b04:	8a400417 	ldw	r9,16(r17)
 8008b08:	9a000417 	ldw	r8,16(r19)
 8008b0c:	100d883a 	mov	r6,r2
 8008b10:	d8800017 	ldw	r2,0(sp)
 8008b14:	4251c83a 	sub	r8,r8,r9
 8008b18:	4012917a 	slli	r9,r8,5
 8008b1c:	da000117 	ldw	r8,4(sp)
 8008b20:	4091c83a 	sub	r8,r8,r2
 8008b24:	4251883a 	add	r8,r8,r9
 8008b28:	02000d0e 	bge	zero,r8,8008b60 <__ratio+0x98>
 8008b2c:	4010953a 	slli	r8,r8,20
 8008b30:	4421883a 	add	r16,r8,r16
 8008b34:	9009883a 	mov	r4,r18
 8008b38:	800b883a 	mov	r5,r16
 8008b3c:	180f883a 	mov	r7,r3
 8008b40:	8000b4c0 	call	8000b4c <__divdf3>
 8008b44:	dfc00617 	ldw	ra,24(sp)
 8008b48:	dcc00517 	ldw	r19,20(sp)
 8008b4c:	dc800417 	ldw	r18,16(sp)
 8008b50:	dc400317 	ldw	r17,12(sp)
 8008b54:	dc000217 	ldw	r16,8(sp)
 8008b58:	dec00704 	addi	sp,sp,28
 8008b5c:	f800283a 	ret
 8008b60:	4010953a 	slli	r8,r8,20
 8008b64:	1a07c83a 	sub	r3,r3,r8
 8008b68:	003ff206 	br	8008b34 <__alt_data_end+0xfc008b34>

08008b6c <_mprec_log10>:
 8008b6c:	defffe04 	addi	sp,sp,-8
 8008b70:	dc000015 	stw	r16,0(sp)
 8008b74:	dfc00115 	stw	ra,4(sp)
 8008b78:	008005c4 	movi	r2,23
 8008b7c:	2021883a 	mov	r16,r4
 8008b80:	11000d0e 	bge	r2,r4,8008bb8 <_mprec_log10+0x4c>
 8008b84:	0005883a 	mov	r2,zero
 8008b88:	00cffc34 	movhi	r3,16368
 8008b8c:	843fffc4 	addi	r16,r16,-1
 8008b90:	1009883a 	mov	r4,r2
 8008b94:	180b883a 	mov	r5,r3
 8008b98:	000d883a 	mov	r6,zero
 8008b9c:	01d00934 	movhi	r7,16420
 8008ba0:	80014cc0 	call	80014cc <__muldf3>
 8008ba4:	803ff91e 	bne	r16,zero,8008b8c <__alt_data_end+0xfc008b8c>
 8008ba8:	dfc00117 	ldw	ra,4(sp)
 8008bac:	dc000017 	ldw	r16,0(sp)
 8008bb0:	dec00204 	addi	sp,sp,8
 8008bb4:	f800283a 	ret
 8008bb8:	202090fa 	slli	r16,r4,3
 8008bbc:	00820074 	movhi	r2,2049
 8008bc0:	1080f804 	addi	r2,r2,992
 8008bc4:	1421883a 	add	r16,r2,r16
 8008bc8:	80800017 	ldw	r2,0(r16)
 8008bcc:	80c00117 	ldw	r3,4(r16)
 8008bd0:	dfc00117 	ldw	ra,4(sp)
 8008bd4:	dc000017 	ldw	r16,0(sp)
 8008bd8:	dec00204 	addi	sp,sp,8
 8008bdc:	f800283a 	ret

08008be0 <__copybits>:
 8008be0:	297fffc4 	addi	r5,r5,-1
 8008be4:	280fd17a 	srai	r7,r5,5
 8008be8:	30c00417 	ldw	r3,16(r6)
 8008bec:	30800504 	addi	r2,r6,20
 8008bf0:	39c00044 	addi	r7,r7,1
 8008bf4:	18c7883a 	add	r3,r3,r3
 8008bf8:	39cf883a 	add	r7,r7,r7
 8008bfc:	18c7883a 	add	r3,r3,r3
 8008c00:	39cf883a 	add	r7,r7,r7
 8008c04:	10c7883a 	add	r3,r2,r3
 8008c08:	21cf883a 	add	r7,r4,r7
 8008c0c:	10c00d2e 	bgeu	r2,r3,8008c44 <__copybits+0x64>
 8008c10:	200b883a 	mov	r5,r4
 8008c14:	12000017 	ldw	r8,0(r2)
 8008c18:	29400104 	addi	r5,r5,4
 8008c1c:	10800104 	addi	r2,r2,4
 8008c20:	2a3fff15 	stw	r8,-4(r5)
 8008c24:	10fffb36 	bltu	r2,r3,8008c14 <__alt_data_end+0xfc008c14>
 8008c28:	1985c83a 	sub	r2,r3,r6
 8008c2c:	10bffac4 	addi	r2,r2,-21
 8008c30:	1004d0ba 	srli	r2,r2,2
 8008c34:	10800044 	addi	r2,r2,1
 8008c38:	1085883a 	add	r2,r2,r2
 8008c3c:	1085883a 	add	r2,r2,r2
 8008c40:	2089883a 	add	r4,r4,r2
 8008c44:	21c0032e 	bgeu	r4,r7,8008c54 <__copybits+0x74>
 8008c48:	20000015 	stw	zero,0(r4)
 8008c4c:	21000104 	addi	r4,r4,4
 8008c50:	21fffd36 	bltu	r4,r7,8008c48 <__alt_data_end+0xfc008c48>
 8008c54:	f800283a 	ret

08008c58 <__any_on>:
 8008c58:	20c00417 	ldw	r3,16(r4)
 8008c5c:	2805d17a 	srai	r2,r5,5
 8008c60:	21000504 	addi	r4,r4,20
 8008c64:	18800d0e 	bge	r3,r2,8008c9c <__any_on+0x44>
 8008c68:	18c7883a 	add	r3,r3,r3
 8008c6c:	18c7883a 	add	r3,r3,r3
 8008c70:	20c7883a 	add	r3,r4,r3
 8008c74:	20c0192e 	bgeu	r4,r3,8008cdc <__any_on+0x84>
 8008c78:	18bfff17 	ldw	r2,-4(r3)
 8008c7c:	18ffff04 	addi	r3,r3,-4
 8008c80:	1000041e 	bne	r2,zero,8008c94 <__any_on+0x3c>
 8008c84:	20c0142e 	bgeu	r4,r3,8008cd8 <__any_on+0x80>
 8008c88:	18ffff04 	addi	r3,r3,-4
 8008c8c:	19400017 	ldw	r5,0(r3)
 8008c90:	283ffc26 	beq	r5,zero,8008c84 <__alt_data_end+0xfc008c84>
 8008c94:	00800044 	movi	r2,1
 8008c98:	f800283a 	ret
 8008c9c:	10c00a0e 	bge	r2,r3,8008cc8 <__any_on+0x70>
 8008ca0:	1085883a 	add	r2,r2,r2
 8008ca4:	1085883a 	add	r2,r2,r2
 8008ca8:	294007cc 	andi	r5,r5,31
 8008cac:	2087883a 	add	r3,r4,r2
 8008cb0:	283ff026 	beq	r5,zero,8008c74 <__alt_data_end+0xfc008c74>
 8008cb4:	19800017 	ldw	r6,0(r3)
 8008cb8:	3144d83a 	srl	r2,r6,r5
 8008cbc:	114a983a 	sll	r5,r2,r5
 8008cc0:	29bff41e 	bne	r5,r6,8008c94 <__alt_data_end+0xfc008c94>
 8008cc4:	003feb06 	br	8008c74 <__alt_data_end+0xfc008c74>
 8008cc8:	1085883a 	add	r2,r2,r2
 8008ccc:	1085883a 	add	r2,r2,r2
 8008cd0:	2087883a 	add	r3,r4,r2
 8008cd4:	003fe706 	br	8008c74 <__alt_data_end+0xfc008c74>
 8008cd8:	f800283a 	ret
 8008cdc:	0005883a 	mov	r2,zero
 8008ce0:	f800283a 	ret

08008ce4 <_realloc_r>:
 8008ce4:	defff604 	addi	sp,sp,-40
 8008ce8:	dcc00315 	stw	r19,12(sp)
 8008cec:	dc400115 	stw	r17,4(sp)
 8008cf0:	dfc00915 	stw	ra,36(sp)
 8008cf4:	df000815 	stw	fp,32(sp)
 8008cf8:	ddc00715 	stw	r23,28(sp)
 8008cfc:	dd800615 	stw	r22,24(sp)
 8008d00:	dd400515 	stw	r21,20(sp)
 8008d04:	dd000415 	stw	r20,16(sp)
 8008d08:	dc800215 	stw	r18,8(sp)
 8008d0c:	dc000015 	stw	r16,0(sp)
 8008d10:	2827883a 	mov	r19,r5
 8008d14:	3023883a 	mov	r17,r6
 8008d18:	2800bf26 	beq	r5,zero,8009018 <_realloc_r+0x334>
 8008d1c:	2025883a 	mov	r18,r4
 8008d20:	800da900 	call	800da90 <__malloc_lock>
 8008d24:	98ffff17 	ldw	r3,-4(r19)
 8008d28:	01bfff04 	movi	r6,-4
 8008d2c:	890002c4 	addi	r4,r17,11
 8008d30:	01c00584 	movi	r7,22
 8008d34:	9d7ffe04 	addi	r21,r19,-8
 8008d38:	19a0703a 	and	r16,r3,r6
 8008d3c:	39003f2e 	bgeu	r7,r4,8008e3c <_realloc_r+0x158>
 8008d40:	053ffe04 	movi	r20,-8
 8008d44:	2528703a 	and	r20,r4,r20
 8008d48:	a00f883a 	mov	r7,r20
 8008d4c:	a0008216 	blt	r20,zero,8008f58 <_realloc_r+0x274>
 8008d50:	a4408136 	bltu	r20,r17,8008f58 <_realloc_r+0x274>
 8008d54:	81c03c0e 	bge	r16,r7,8008e48 <_realloc_r+0x164>
 8008d58:	07020074 	movhi	fp,2049
 8008d5c:	e7026c04 	addi	fp,fp,2480
 8008d60:	e1000217 	ldw	r4,8(fp)
 8008d64:	ac05883a 	add	r2,r21,r16
 8008d68:	2080bf26 	beq	r4,r2,8009068 <_realloc_r+0x384>
 8008d6c:	11000117 	ldw	r4,4(r2)
 8008d70:	023fff84 	movi	r8,-2
 8008d74:	2210703a 	and	r8,r4,r8
 8008d78:	1211883a 	add	r8,r2,r8
 8008d7c:	41400117 	ldw	r5,4(r8)
 8008d80:	2940004c 	andi	r5,r5,1
 8008d84:	28004a1e 	bne	r5,zero,8008eb0 <_realloc_r+0x1cc>
 8008d88:	017fff04 	movi	r5,-4
 8008d8c:	2148703a 	and	r4,r4,r5
 8008d90:	2409883a 	add	r4,r4,r16
 8008d94:	21c0ad0e 	bge	r4,r7,800904c <_realloc_r+0x368>
 8008d98:	18c0004c 	andi	r3,r3,1
 8008d9c:	18007f1e 	bne	r3,zero,8008f9c <_realloc_r+0x2b8>
 8008da0:	9dfffe17 	ldw	r23,-8(r19)
 8008da4:	adefc83a 	sub	r23,r21,r23
 8008da8:	bd800117 	ldw	r22,4(r23)
 8008dac:	b14a703a 	and	r5,r22,r5
 8008db0:	216d883a 	add	r22,r4,r5
 8008db4:	b1c04516 	blt	r22,r7,8008ecc <_realloc_r+0x1e8>
 8008db8:	10c00317 	ldw	r3,12(r2)
 8008dbc:	10800217 	ldw	r2,8(r2)
 8008dc0:	81bfff04 	addi	r6,r16,-4
 8008dc4:	bc400204 	addi	r17,r23,8
 8008dc8:	10c00315 	stw	r3,12(r2)
 8008dcc:	18800215 	stw	r2,8(r3)
 8008dd0:	b9400217 	ldw	r5,8(r23)
 8008dd4:	b8c00317 	ldw	r3,12(r23)
 8008dd8:	00800904 	movi	r2,36
 8008ddc:	28c00315 	stw	r3,12(r5)
 8008de0:	19400215 	stw	r5,8(r3)
 8008de4:	1180ef36 	bltu	r2,r6,80091a4 <_realloc_r+0x4c0>
 8008de8:	008004c4 	movi	r2,19
 8008dec:	1180da2e 	bgeu	r2,r6,8009158 <_realloc_r+0x474>
 8008df0:	98800017 	ldw	r2,0(r19)
 8008df4:	b8800215 	stw	r2,8(r23)
 8008df8:	98800117 	ldw	r2,4(r19)
 8008dfc:	b8800315 	stw	r2,12(r23)
 8008e00:	008006c4 	movi	r2,27
 8008e04:	1180fc2e 	bgeu	r2,r6,80091f8 <_realloc_r+0x514>
 8008e08:	98800217 	ldw	r2,8(r19)
 8008e0c:	b8800415 	stw	r2,16(r23)
 8008e10:	98800317 	ldw	r2,12(r19)
 8008e14:	b8800515 	stw	r2,20(r23)
 8008e18:	00800904 	movi	r2,36
 8008e1c:	3080421e 	bne	r6,r2,8008f28 <_realloc_r+0x244>
 8008e20:	98800417 	ldw	r2,16(r19)
 8008e24:	9cc00604 	addi	r19,r19,24
 8008e28:	b8c00804 	addi	r3,r23,32
 8008e2c:	b8800615 	stw	r2,24(r23)
 8008e30:	98bfff17 	ldw	r2,-4(r19)
 8008e34:	b8800715 	stw	r2,28(r23)
 8008e38:	00003d06 	br	8008f30 <_realloc_r+0x24c>
 8008e3c:	01c00404 	movi	r7,16
 8008e40:	3829883a 	mov	r20,r7
 8008e44:	003fc206 	br	8008d50 <__alt_data_end+0xfc008d50>
 8008e48:	9823883a 	mov	r17,r19
 8008e4c:	850fc83a 	sub	r7,r16,r20
 8008e50:	008003c4 	movi	r2,15
 8008e54:	18c0004c 	andi	r3,r3,1
 8008e58:	11c04336 	bltu	r2,r7,8008f68 <_realloc_r+0x284>
 8008e5c:	1c06b03a 	or	r3,r3,r16
 8008e60:	a8c00115 	stw	r3,4(r21)
 8008e64:	ac21883a 	add	r16,r21,r16
 8008e68:	80c00117 	ldw	r3,4(r16)
 8008e6c:	18c00054 	ori	r3,r3,1
 8008e70:	80c00115 	stw	r3,4(r16)
 8008e74:	9009883a 	mov	r4,r18
 8008e78:	800dab00 	call	800dab0 <__malloc_unlock>
 8008e7c:	8805883a 	mov	r2,r17
 8008e80:	dfc00917 	ldw	ra,36(sp)
 8008e84:	df000817 	ldw	fp,32(sp)
 8008e88:	ddc00717 	ldw	r23,28(sp)
 8008e8c:	dd800617 	ldw	r22,24(sp)
 8008e90:	dd400517 	ldw	r21,20(sp)
 8008e94:	dd000417 	ldw	r20,16(sp)
 8008e98:	dcc00317 	ldw	r19,12(sp)
 8008e9c:	dc800217 	ldw	r18,8(sp)
 8008ea0:	dc400117 	ldw	r17,4(sp)
 8008ea4:	dc000017 	ldw	r16,0(sp)
 8008ea8:	dec00a04 	addi	sp,sp,40
 8008eac:	f800283a 	ret
 8008eb0:	18c0004c 	andi	r3,r3,1
 8008eb4:	1800391e 	bne	r3,zero,8008f9c <_realloc_r+0x2b8>
 8008eb8:	9dfffe17 	ldw	r23,-8(r19)
 8008ebc:	00bfff04 	movi	r2,-4
 8008ec0:	adefc83a 	sub	r23,r21,r23
 8008ec4:	b9400117 	ldw	r5,4(r23)
 8008ec8:	288a703a 	and	r5,r5,r2
 8008ecc:	2c2d883a 	add	r22,r5,r16
 8008ed0:	b1c03216 	blt	r22,r7,8008f9c <_realloc_r+0x2b8>
 8008ed4:	b8800317 	ldw	r2,12(r23)
 8008ed8:	b8c00217 	ldw	r3,8(r23)
 8008edc:	81bfff04 	addi	r6,r16,-4
 8008ee0:	01000904 	movi	r4,36
 8008ee4:	18800315 	stw	r2,12(r3)
 8008ee8:	10c00215 	stw	r3,8(r2)
 8008eec:	bc400204 	addi	r17,r23,8
 8008ef0:	2180ac36 	bltu	r4,r6,80091a4 <_realloc_r+0x4c0>
 8008ef4:	008004c4 	movi	r2,19
 8008ef8:	1180972e 	bgeu	r2,r6,8009158 <_realloc_r+0x474>
 8008efc:	98800017 	ldw	r2,0(r19)
 8008f00:	b8800215 	stw	r2,8(r23)
 8008f04:	98800117 	ldw	r2,4(r19)
 8008f08:	b8800315 	stw	r2,12(r23)
 8008f0c:	008006c4 	movi	r2,27
 8008f10:	1180b92e 	bgeu	r2,r6,80091f8 <_realloc_r+0x514>
 8008f14:	98800217 	ldw	r2,8(r19)
 8008f18:	b8800415 	stw	r2,16(r23)
 8008f1c:	98800317 	ldw	r2,12(r19)
 8008f20:	b8800515 	stw	r2,20(r23)
 8008f24:	313fbe26 	beq	r6,r4,8008e20 <__alt_data_end+0xfc008e20>
 8008f28:	b8c00604 	addi	r3,r23,24
 8008f2c:	9cc00404 	addi	r19,r19,16
 8008f30:	98800017 	ldw	r2,0(r19)
 8008f34:	b021883a 	mov	r16,r22
 8008f38:	b82b883a 	mov	r21,r23
 8008f3c:	18800015 	stw	r2,0(r3)
 8008f40:	98800117 	ldw	r2,4(r19)
 8008f44:	18800115 	stw	r2,4(r3)
 8008f48:	98800217 	ldw	r2,8(r19)
 8008f4c:	18800215 	stw	r2,8(r3)
 8008f50:	b8c00117 	ldw	r3,4(r23)
 8008f54:	003fbd06 	br	8008e4c <__alt_data_end+0xfc008e4c>
 8008f58:	00800304 	movi	r2,12
 8008f5c:	90800015 	stw	r2,0(r18)
 8008f60:	0005883a 	mov	r2,zero
 8008f64:	003fc606 	br	8008e80 <__alt_data_end+0xfc008e80>
 8008f68:	1d06b03a 	or	r3,r3,r20
 8008f6c:	ad0b883a 	add	r5,r21,r20
 8008f70:	a8c00115 	stw	r3,4(r21)
 8008f74:	38800054 	ori	r2,r7,1
 8008f78:	28800115 	stw	r2,4(r5)
 8008f7c:	29cf883a 	add	r7,r5,r7
 8008f80:	38800117 	ldw	r2,4(r7)
 8008f84:	9009883a 	mov	r4,r18
 8008f88:	29400204 	addi	r5,r5,8
 8008f8c:	10800054 	ori	r2,r2,1
 8008f90:	38800115 	stw	r2,4(r7)
 8008f94:	80064b80 	call	80064b8 <_free_r>
 8008f98:	003fb606 	br	8008e74 <__alt_data_end+0xfc008e74>
 8008f9c:	880b883a 	mov	r5,r17
 8008fa0:	9009883a 	mov	r4,r18
 8008fa4:	80070540 	call	8007054 <_malloc_r>
 8008fa8:	1023883a 	mov	r17,r2
 8008fac:	1000aa26 	beq	r2,zero,8009258 <_realloc_r+0x574>
 8008fb0:	98ffff17 	ldw	r3,-4(r19)
 8008fb4:	113ffe04 	addi	r4,r2,-8
 8008fb8:	00bfff84 	movi	r2,-2
 8008fbc:	1884703a 	and	r2,r3,r2
 8008fc0:	a885883a 	add	r2,r21,r2
 8008fc4:	20808626 	beq	r4,r2,80091e0 <_realloc_r+0x4fc>
 8008fc8:	81bfff04 	addi	r6,r16,-4
 8008fcc:	00800904 	movi	r2,36
 8008fd0:	11807036 	bltu	r2,r6,8009194 <_realloc_r+0x4b0>
 8008fd4:	00c004c4 	movi	r3,19
 8008fd8:	19805636 	bltu	r3,r6,8009134 <_realloc_r+0x450>
 8008fdc:	8805883a 	mov	r2,r17
 8008fe0:	9807883a 	mov	r3,r19
 8008fe4:	19000017 	ldw	r4,0(r3)
 8008fe8:	11000015 	stw	r4,0(r2)
 8008fec:	19000117 	ldw	r4,4(r3)
 8008ff0:	11000115 	stw	r4,4(r2)
 8008ff4:	18c00217 	ldw	r3,8(r3)
 8008ff8:	10c00215 	stw	r3,8(r2)
 8008ffc:	980b883a 	mov	r5,r19
 8009000:	9009883a 	mov	r4,r18
 8009004:	80064b80 	call	80064b8 <_free_r>
 8009008:	9009883a 	mov	r4,r18
 800900c:	800dab00 	call	800dab0 <__malloc_unlock>
 8009010:	8805883a 	mov	r2,r17
 8009014:	003f9a06 	br	8008e80 <__alt_data_end+0xfc008e80>
 8009018:	300b883a 	mov	r5,r6
 800901c:	dfc00917 	ldw	ra,36(sp)
 8009020:	df000817 	ldw	fp,32(sp)
 8009024:	ddc00717 	ldw	r23,28(sp)
 8009028:	dd800617 	ldw	r22,24(sp)
 800902c:	dd400517 	ldw	r21,20(sp)
 8009030:	dd000417 	ldw	r20,16(sp)
 8009034:	dcc00317 	ldw	r19,12(sp)
 8009038:	dc800217 	ldw	r18,8(sp)
 800903c:	dc400117 	ldw	r17,4(sp)
 8009040:	dc000017 	ldw	r16,0(sp)
 8009044:	dec00a04 	addi	sp,sp,40
 8009048:	80070541 	jmpi	8007054 <_malloc_r>
 800904c:	11400317 	ldw	r5,12(r2)
 8009050:	10800217 	ldw	r2,8(r2)
 8009054:	9823883a 	mov	r17,r19
 8009058:	2021883a 	mov	r16,r4
 800905c:	11400315 	stw	r5,12(r2)
 8009060:	28800215 	stw	r2,8(r5)
 8009064:	003f7906 	br	8008e4c <__alt_data_end+0xfc008e4c>
 8009068:	21000117 	ldw	r4,4(r4)
 800906c:	00bfff04 	movi	r2,-4
 8009070:	a1800404 	addi	r6,r20,16
 8009074:	2088703a 	and	r4,r4,r2
 8009078:	2409883a 	add	r4,r4,r16
 800907c:	2180380e 	bge	r4,r6,8009160 <_realloc_r+0x47c>
 8009080:	18c0004c 	andi	r3,r3,1
 8009084:	183fc51e 	bne	r3,zero,8008f9c <__alt_data_end+0xfc008f9c>
 8009088:	9dfffe17 	ldw	r23,-8(r19)
 800908c:	adefc83a 	sub	r23,r21,r23
 8009090:	b9400117 	ldw	r5,4(r23)
 8009094:	288a703a 	and	r5,r5,r2
 8009098:	216d883a 	add	r22,r4,r5
 800909c:	b1bf8b16 	blt	r22,r6,8008ecc <__alt_data_end+0xfc008ecc>
 80090a0:	b8800317 	ldw	r2,12(r23)
 80090a4:	b8c00217 	ldw	r3,8(r23)
 80090a8:	81bfff04 	addi	r6,r16,-4
 80090ac:	01000904 	movi	r4,36
 80090b0:	18800315 	stw	r2,12(r3)
 80090b4:	10c00215 	stw	r3,8(r2)
 80090b8:	bc400204 	addi	r17,r23,8
 80090bc:	21805a36 	bltu	r4,r6,8009228 <_realloc_r+0x544>
 80090c0:	008004c4 	movi	r2,19
 80090c4:	1180562e 	bgeu	r2,r6,8009220 <_realloc_r+0x53c>
 80090c8:	98800017 	ldw	r2,0(r19)
 80090cc:	b8800215 	stw	r2,8(r23)
 80090d0:	98800117 	ldw	r2,4(r19)
 80090d4:	b8800315 	stw	r2,12(r23)
 80090d8:	008006c4 	movi	r2,27
 80090dc:	11805636 	bltu	r2,r6,8009238 <_realloc_r+0x554>
 80090e0:	b8800404 	addi	r2,r23,16
 80090e4:	9cc00204 	addi	r19,r19,8
 80090e8:	98c00017 	ldw	r3,0(r19)
 80090ec:	10c00015 	stw	r3,0(r2)
 80090f0:	98c00117 	ldw	r3,4(r19)
 80090f4:	10c00115 	stw	r3,4(r2)
 80090f8:	98c00217 	ldw	r3,8(r19)
 80090fc:	10c00215 	stw	r3,8(r2)
 8009100:	bd07883a 	add	r3,r23,r20
 8009104:	b505c83a 	sub	r2,r22,r20
 8009108:	e0c00215 	stw	r3,8(fp)
 800910c:	10800054 	ori	r2,r2,1
 8009110:	18800115 	stw	r2,4(r3)
 8009114:	b8800117 	ldw	r2,4(r23)
 8009118:	9009883a 	mov	r4,r18
 800911c:	1080004c 	andi	r2,r2,1
 8009120:	a0a8b03a 	or	r20,r20,r2
 8009124:	bd000115 	stw	r20,4(r23)
 8009128:	800dab00 	call	800dab0 <__malloc_unlock>
 800912c:	8805883a 	mov	r2,r17
 8009130:	003f5306 	br	8008e80 <__alt_data_end+0xfc008e80>
 8009134:	98c00017 	ldw	r3,0(r19)
 8009138:	88c00015 	stw	r3,0(r17)
 800913c:	98c00117 	ldw	r3,4(r19)
 8009140:	88c00115 	stw	r3,4(r17)
 8009144:	00c006c4 	movi	r3,27
 8009148:	19801d36 	bltu	r3,r6,80091c0 <_realloc_r+0x4dc>
 800914c:	88800204 	addi	r2,r17,8
 8009150:	98c00204 	addi	r3,r19,8
 8009154:	003fa306 	br	8008fe4 <__alt_data_end+0xfc008fe4>
 8009158:	8807883a 	mov	r3,r17
 800915c:	003f7406 	br	8008f30 <__alt_data_end+0xfc008f30>
 8009160:	ad2b883a 	add	r21,r21,r20
 8009164:	2505c83a 	sub	r2,r4,r20
 8009168:	e5400215 	stw	r21,8(fp)
 800916c:	10800054 	ori	r2,r2,1
 8009170:	a8800115 	stw	r2,4(r21)
 8009174:	98bfff17 	ldw	r2,-4(r19)
 8009178:	9009883a 	mov	r4,r18
 800917c:	1080004c 	andi	r2,r2,1
 8009180:	a0a8b03a 	or	r20,r20,r2
 8009184:	9d3fff15 	stw	r20,-4(r19)
 8009188:	800dab00 	call	800dab0 <__malloc_unlock>
 800918c:	9805883a 	mov	r2,r19
 8009190:	003f3b06 	br	8008e80 <__alt_data_end+0xfc008e80>
 8009194:	8809883a 	mov	r4,r17
 8009198:	980b883a 	mov	r5,r19
 800919c:	8007a1c0 	call	8007a1c <memmove>
 80091a0:	003f9606 	br	8008ffc <__alt_data_end+0xfc008ffc>
 80091a4:	8809883a 	mov	r4,r17
 80091a8:	980b883a 	mov	r5,r19
 80091ac:	8007a1c0 	call	8007a1c <memmove>
 80091b0:	b8c00117 	ldw	r3,4(r23)
 80091b4:	b021883a 	mov	r16,r22
 80091b8:	b82b883a 	mov	r21,r23
 80091bc:	003f2306 	br	8008e4c <__alt_data_end+0xfc008e4c>
 80091c0:	98c00217 	ldw	r3,8(r19)
 80091c4:	88c00215 	stw	r3,8(r17)
 80091c8:	98c00317 	ldw	r3,12(r19)
 80091cc:	88c00315 	stw	r3,12(r17)
 80091d0:	30800c26 	beq	r6,r2,8009204 <_realloc_r+0x520>
 80091d4:	88800404 	addi	r2,r17,16
 80091d8:	98c00404 	addi	r3,r19,16
 80091dc:	003f8106 	br	8008fe4 <__alt_data_end+0xfc008fe4>
 80091e0:	893fff17 	ldw	r4,-4(r17)
 80091e4:	00bfff04 	movi	r2,-4
 80091e8:	9823883a 	mov	r17,r19
 80091ec:	2084703a 	and	r2,r4,r2
 80091f0:	80a1883a 	add	r16,r16,r2
 80091f4:	003f1506 	br	8008e4c <__alt_data_end+0xfc008e4c>
 80091f8:	b8c00404 	addi	r3,r23,16
 80091fc:	9cc00204 	addi	r19,r19,8
 8009200:	003f4b06 	br	8008f30 <__alt_data_end+0xfc008f30>
 8009204:	99000417 	ldw	r4,16(r19)
 8009208:	88800604 	addi	r2,r17,24
 800920c:	98c00604 	addi	r3,r19,24
 8009210:	89000415 	stw	r4,16(r17)
 8009214:	99000517 	ldw	r4,20(r19)
 8009218:	89000515 	stw	r4,20(r17)
 800921c:	003f7106 	br	8008fe4 <__alt_data_end+0xfc008fe4>
 8009220:	8805883a 	mov	r2,r17
 8009224:	003fb006 	br	80090e8 <__alt_data_end+0xfc0090e8>
 8009228:	8809883a 	mov	r4,r17
 800922c:	980b883a 	mov	r5,r19
 8009230:	8007a1c0 	call	8007a1c <memmove>
 8009234:	003fb206 	br	8009100 <__alt_data_end+0xfc009100>
 8009238:	98800217 	ldw	r2,8(r19)
 800923c:	b8800415 	stw	r2,16(r23)
 8009240:	98800317 	ldw	r2,12(r19)
 8009244:	b8800515 	stw	r2,20(r23)
 8009248:	31000726 	beq	r6,r4,8009268 <_realloc_r+0x584>
 800924c:	b8800604 	addi	r2,r23,24
 8009250:	9cc00404 	addi	r19,r19,16
 8009254:	003fa406 	br	80090e8 <__alt_data_end+0xfc0090e8>
 8009258:	9009883a 	mov	r4,r18
 800925c:	800dab00 	call	800dab0 <__malloc_unlock>
 8009260:	0005883a 	mov	r2,zero
 8009264:	003f0606 	br	8008e80 <__alt_data_end+0xfc008e80>
 8009268:	98c00417 	ldw	r3,16(r19)
 800926c:	9cc00604 	addi	r19,r19,24
 8009270:	b8800804 	addi	r2,r23,32
 8009274:	b8c00615 	stw	r3,24(r23)
 8009278:	98ffff17 	ldw	r3,-4(r19)
 800927c:	b8c00715 	stw	r3,28(r23)
 8009280:	003f9906 	br	80090e8 <__alt_data_end+0xfc0090e8>

08009284 <__fpclassifyd>:
 8009284:	00a00034 	movhi	r2,32768
 8009288:	10bfffc4 	addi	r2,r2,-1
 800928c:	2884703a 	and	r2,r5,r2
 8009290:	10000726 	beq	r2,zero,80092b0 <__fpclassifyd+0x2c>
 8009294:	00fffc34 	movhi	r3,65520
 8009298:	019ff834 	movhi	r6,32736
 800929c:	28c7883a 	add	r3,r5,r3
 80092a0:	31bfffc4 	addi	r6,r6,-1
 80092a4:	30c00536 	bltu	r6,r3,80092bc <__fpclassifyd+0x38>
 80092a8:	00800104 	movi	r2,4
 80092ac:	f800283a 	ret
 80092b0:	2000021e 	bne	r4,zero,80092bc <__fpclassifyd+0x38>
 80092b4:	00800084 	movi	r2,2
 80092b8:	f800283a 	ret
 80092bc:	00dffc34 	movhi	r3,32752
 80092c0:	019ff834 	movhi	r6,32736
 80092c4:	28cb883a 	add	r5,r5,r3
 80092c8:	31bfffc4 	addi	r6,r6,-1
 80092cc:	317ff62e 	bgeu	r6,r5,80092a8 <__alt_data_end+0xfc0092a8>
 80092d0:	01400434 	movhi	r5,16
 80092d4:	297fffc4 	addi	r5,r5,-1
 80092d8:	28800236 	bltu	r5,r2,80092e4 <__fpclassifyd+0x60>
 80092dc:	008000c4 	movi	r2,3
 80092e0:	f800283a 	ret
 80092e4:	10c00226 	beq	r2,r3,80092f0 <__fpclassifyd+0x6c>
 80092e8:	0005883a 	mov	r2,zero
 80092ec:	f800283a 	ret
 80092f0:	2005003a 	cmpeq	r2,r4,zero
 80092f4:	f800283a 	ret

080092f8 <_sbrk_r>:
 80092f8:	defffd04 	addi	sp,sp,-12
 80092fc:	dc000015 	stw	r16,0(sp)
 8009300:	04020074 	movhi	r16,2049
 8009304:	dc400115 	stw	r17,4(sp)
 8009308:	840ed704 	addi	r16,r16,15196
 800930c:	2023883a 	mov	r17,r4
 8009310:	2809883a 	mov	r4,r5
 8009314:	dfc00215 	stw	ra,8(sp)
 8009318:	80000015 	stw	zero,0(r16)
 800931c:	800dca40 	call	800dca4 <sbrk>
 8009320:	00ffffc4 	movi	r3,-1
 8009324:	10c00526 	beq	r2,r3,800933c <_sbrk_r+0x44>
 8009328:	dfc00217 	ldw	ra,8(sp)
 800932c:	dc400117 	ldw	r17,4(sp)
 8009330:	dc000017 	ldw	r16,0(sp)
 8009334:	dec00304 	addi	sp,sp,12
 8009338:	f800283a 	ret
 800933c:	80c00017 	ldw	r3,0(r16)
 8009340:	183ff926 	beq	r3,zero,8009328 <__alt_data_end+0xfc009328>
 8009344:	88c00015 	stw	r3,0(r17)
 8009348:	003ff706 	br	8009328 <__alt_data_end+0xfc009328>

0800934c <__sread>:
 800934c:	defffe04 	addi	sp,sp,-8
 8009350:	dc000015 	stw	r16,0(sp)
 8009354:	2821883a 	mov	r16,r5
 8009358:	2940038f 	ldh	r5,14(r5)
 800935c:	dfc00115 	stw	ra,4(sp)
 8009360:	800b0080 	call	800b008 <_read_r>
 8009364:	10000716 	blt	r2,zero,8009384 <__sread+0x38>
 8009368:	80c01417 	ldw	r3,80(r16)
 800936c:	1887883a 	add	r3,r3,r2
 8009370:	80c01415 	stw	r3,80(r16)
 8009374:	dfc00117 	ldw	ra,4(sp)
 8009378:	dc000017 	ldw	r16,0(sp)
 800937c:	dec00204 	addi	sp,sp,8
 8009380:	f800283a 	ret
 8009384:	80c0030b 	ldhu	r3,12(r16)
 8009388:	18fbffcc 	andi	r3,r3,61439
 800938c:	80c0030d 	sth	r3,12(r16)
 8009390:	dfc00117 	ldw	ra,4(sp)
 8009394:	dc000017 	ldw	r16,0(sp)
 8009398:	dec00204 	addi	sp,sp,8
 800939c:	f800283a 	ret

080093a0 <__seofread>:
 80093a0:	0005883a 	mov	r2,zero
 80093a4:	f800283a 	ret

080093a8 <__swrite>:
 80093a8:	2880030b 	ldhu	r2,12(r5)
 80093ac:	defffb04 	addi	sp,sp,-20
 80093b0:	dcc00315 	stw	r19,12(sp)
 80093b4:	dc800215 	stw	r18,8(sp)
 80093b8:	dc400115 	stw	r17,4(sp)
 80093bc:	dc000015 	stw	r16,0(sp)
 80093c0:	dfc00415 	stw	ra,16(sp)
 80093c4:	10c0400c 	andi	r3,r2,256
 80093c8:	2821883a 	mov	r16,r5
 80093cc:	2027883a 	mov	r19,r4
 80093d0:	3025883a 	mov	r18,r6
 80093d4:	3823883a 	mov	r17,r7
 80093d8:	18000526 	beq	r3,zero,80093f0 <__swrite+0x48>
 80093dc:	2940038f 	ldh	r5,14(r5)
 80093e0:	000d883a 	mov	r6,zero
 80093e4:	01c00084 	movi	r7,2
 80093e8:	800afac0 	call	800afac <_lseek_r>
 80093ec:	8080030b 	ldhu	r2,12(r16)
 80093f0:	8140038f 	ldh	r5,14(r16)
 80093f4:	10bbffcc 	andi	r2,r2,61439
 80093f8:	9809883a 	mov	r4,r19
 80093fc:	900d883a 	mov	r6,r18
 8009400:	880f883a 	mov	r7,r17
 8009404:	8080030d 	sth	r2,12(r16)
 8009408:	dfc00417 	ldw	ra,16(sp)
 800940c:	dcc00317 	ldw	r19,12(sp)
 8009410:	dc800217 	ldw	r18,8(sp)
 8009414:	dc400117 	ldw	r17,4(sp)
 8009418:	dc000017 	ldw	r16,0(sp)
 800941c:	dec00504 	addi	sp,sp,20
 8009420:	800aa881 	jmpi	800aa88 <_write_r>

08009424 <__sseek>:
 8009424:	defffe04 	addi	sp,sp,-8
 8009428:	dc000015 	stw	r16,0(sp)
 800942c:	2821883a 	mov	r16,r5
 8009430:	2940038f 	ldh	r5,14(r5)
 8009434:	dfc00115 	stw	ra,4(sp)
 8009438:	800afac0 	call	800afac <_lseek_r>
 800943c:	00ffffc4 	movi	r3,-1
 8009440:	10c00826 	beq	r2,r3,8009464 <__sseek+0x40>
 8009444:	80c0030b 	ldhu	r3,12(r16)
 8009448:	80801415 	stw	r2,80(r16)
 800944c:	18c40014 	ori	r3,r3,4096
 8009450:	80c0030d 	sth	r3,12(r16)
 8009454:	dfc00117 	ldw	ra,4(sp)
 8009458:	dc000017 	ldw	r16,0(sp)
 800945c:	dec00204 	addi	sp,sp,8
 8009460:	f800283a 	ret
 8009464:	80c0030b 	ldhu	r3,12(r16)
 8009468:	18fbffcc 	andi	r3,r3,61439
 800946c:	80c0030d 	sth	r3,12(r16)
 8009470:	dfc00117 	ldw	ra,4(sp)
 8009474:	dc000017 	ldw	r16,0(sp)
 8009478:	dec00204 	addi	sp,sp,8
 800947c:	f800283a 	ret

08009480 <__sclose>:
 8009480:	2940038f 	ldh	r5,14(r5)
 8009484:	800aae41 	jmpi	800aae4 <_close_r>

08009488 <strcmp>:
 8009488:	2144b03a 	or	r2,r4,r5
 800948c:	108000cc 	andi	r2,r2,3
 8009490:	1000171e 	bne	r2,zero,80094f0 <strcmp+0x68>
 8009494:	20800017 	ldw	r2,0(r4)
 8009498:	28c00017 	ldw	r3,0(r5)
 800949c:	10c0141e 	bne	r2,r3,80094f0 <strcmp+0x68>
 80094a0:	027fbff4 	movhi	r9,65279
 80094a4:	4a7fbfc4 	addi	r9,r9,-257
 80094a8:	0086303a 	nor	r3,zero,r2
 80094ac:	02202074 	movhi	r8,32897
 80094b0:	1245883a 	add	r2,r2,r9
 80094b4:	42202004 	addi	r8,r8,-32640
 80094b8:	10c4703a 	and	r2,r2,r3
 80094bc:	1204703a 	and	r2,r2,r8
 80094c0:	10000226 	beq	r2,zero,80094cc <strcmp+0x44>
 80094c4:	00001706 	br	8009524 <strcmp+0x9c>
 80094c8:	1000161e 	bne	r2,zero,8009524 <strcmp+0x9c>
 80094cc:	21000104 	addi	r4,r4,4
 80094d0:	20c00017 	ldw	r3,0(r4)
 80094d4:	29400104 	addi	r5,r5,4
 80094d8:	29800017 	ldw	r6,0(r5)
 80094dc:	1a4f883a 	add	r7,r3,r9
 80094e0:	00c4303a 	nor	r2,zero,r3
 80094e4:	3884703a 	and	r2,r7,r2
 80094e8:	1204703a 	and	r2,r2,r8
 80094ec:	19bff626 	beq	r3,r6,80094c8 <__alt_data_end+0xfc0094c8>
 80094f0:	20800007 	ldb	r2,0(r4)
 80094f4:	1000051e 	bne	r2,zero,800950c <strcmp+0x84>
 80094f8:	00000606 	br	8009514 <strcmp+0x8c>
 80094fc:	21000044 	addi	r4,r4,1
 8009500:	20800007 	ldb	r2,0(r4)
 8009504:	29400044 	addi	r5,r5,1
 8009508:	10000226 	beq	r2,zero,8009514 <strcmp+0x8c>
 800950c:	28c00007 	ldb	r3,0(r5)
 8009510:	10fffa26 	beq	r2,r3,80094fc <__alt_data_end+0xfc0094fc>
 8009514:	20800003 	ldbu	r2,0(r4)
 8009518:	28c00003 	ldbu	r3,0(r5)
 800951c:	10c5c83a 	sub	r2,r2,r3
 8009520:	f800283a 	ret
 8009524:	0005883a 	mov	r2,zero
 8009528:	f800283a 	ret

0800952c <__sprint_r.part.0>:
 800952c:	28801917 	ldw	r2,100(r5)
 8009530:	defff604 	addi	sp,sp,-40
 8009534:	dd400515 	stw	r21,20(sp)
 8009538:	dcc00315 	stw	r19,12(sp)
 800953c:	dfc00915 	stw	ra,36(sp)
 8009540:	df000815 	stw	fp,32(sp)
 8009544:	ddc00715 	stw	r23,28(sp)
 8009548:	dd800615 	stw	r22,24(sp)
 800954c:	dd000415 	stw	r20,16(sp)
 8009550:	dc800215 	stw	r18,8(sp)
 8009554:	dc400115 	stw	r17,4(sp)
 8009558:	dc000015 	stw	r16,0(sp)
 800955c:	1088000c 	andi	r2,r2,8192
 8009560:	2827883a 	mov	r19,r5
 8009564:	302b883a 	mov	r21,r6
 8009568:	10002d26 	beq	r2,zero,8009620 <__sprint_r.part.0+0xf4>
 800956c:	30800217 	ldw	r2,8(r6)
 8009570:	35800017 	ldw	r22,0(r6)
 8009574:	10002826 	beq	r2,zero,8009618 <__sprint_r.part.0+0xec>
 8009578:	2029883a 	mov	r20,r4
 800957c:	b5c00104 	addi	r23,r22,4
 8009580:	04bfffc4 	movi	r18,-1
 8009584:	bc400017 	ldw	r17,0(r23)
 8009588:	b4000017 	ldw	r16,0(r22)
 800958c:	0039883a 	mov	fp,zero
 8009590:	8822d0ba 	srli	r17,r17,2
 8009594:	04400316 	blt	zero,r17,80095a4 <__sprint_r.part.0+0x78>
 8009598:	00001706 	br	80095f8 <__sprint_r.part.0+0xcc>
 800959c:	84000104 	addi	r16,r16,4
 80095a0:	8f001526 	beq	r17,fp,80095f8 <__sprint_r.part.0+0xcc>
 80095a4:	81400017 	ldw	r5,0(r16)
 80095a8:	a009883a 	mov	r4,r20
 80095ac:	980d883a 	mov	r6,r19
 80095b0:	800ad240 	call	800ad24 <_fputwc_r>
 80095b4:	e7000044 	addi	fp,fp,1
 80095b8:	14bff81e 	bne	r2,r18,800959c <__alt_data_end+0xfc00959c>
 80095bc:	9005883a 	mov	r2,r18
 80095c0:	a8000215 	stw	zero,8(r21)
 80095c4:	a8000115 	stw	zero,4(r21)
 80095c8:	dfc00917 	ldw	ra,36(sp)
 80095cc:	df000817 	ldw	fp,32(sp)
 80095d0:	ddc00717 	ldw	r23,28(sp)
 80095d4:	dd800617 	ldw	r22,24(sp)
 80095d8:	dd400517 	ldw	r21,20(sp)
 80095dc:	dd000417 	ldw	r20,16(sp)
 80095e0:	dcc00317 	ldw	r19,12(sp)
 80095e4:	dc800217 	ldw	r18,8(sp)
 80095e8:	dc400117 	ldw	r17,4(sp)
 80095ec:	dc000017 	ldw	r16,0(sp)
 80095f0:	dec00a04 	addi	sp,sp,40
 80095f4:	f800283a 	ret
 80095f8:	a8c00217 	ldw	r3,8(r21)
 80095fc:	8c63883a 	add	r17,r17,r17
 8009600:	8c63883a 	add	r17,r17,r17
 8009604:	1c45c83a 	sub	r2,r3,r17
 8009608:	a8800215 	stw	r2,8(r21)
 800960c:	b5800204 	addi	r22,r22,8
 8009610:	bdc00204 	addi	r23,r23,8
 8009614:	103fdb1e 	bne	r2,zero,8009584 <__alt_data_end+0xfc009584>
 8009618:	0005883a 	mov	r2,zero
 800961c:	003fe806 	br	80095c0 <__alt_data_end+0xfc0095c0>
 8009620:	80067a80 	call	80067a8 <__sfvwrite_r>
 8009624:	003fe606 	br	80095c0 <__alt_data_end+0xfc0095c0>

08009628 <__sprint_r>:
 8009628:	30c00217 	ldw	r3,8(r6)
 800962c:	18000126 	beq	r3,zero,8009634 <__sprint_r+0xc>
 8009630:	800952c1 	jmpi	800952c <__sprint_r.part.0>
 8009634:	30000115 	stw	zero,4(r6)
 8009638:	0005883a 	mov	r2,zero
 800963c:	f800283a 	ret

08009640 <___vfiprintf_internal_r>:
 8009640:	defeca04 	addi	sp,sp,-1240
 8009644:	dcc12f15 	stw	r19,1212(sp)
 8009648:	dfc13515 	stw	ra,1236(sp)
 800964c:	df013415 	stw	fp,1232(sp)
 8009650:	ddc13315 	stw	r23,1228(sp)
 8009654:	dd813215 	stw	r22,1224(sp)
 8009658:	dd413115 	stw	r21,1220(sp)
 800965c:	dd013015 	stw	r20,1216(sp)
 8009660:	dc812e15 	stw	r18,1208(sp)
 8009664:	dc412d15 	stw	r17,1204(sp)
 8009668:	dc012c15 	stw	r16,1200(sp)
 800966c:	d9012115 	stw	r4,1156(sp)
 8009670:	d9412015 	stw	r5,1152(sp)
 8009674:	d9c12315 	stw	r7,1164(sp)
 8009678:	3027883a 	mov	r19,r6
 800967c:	20000226 	beq	r4,zero,8009688 <___vfiprintf_internal_r+0x48>
 8009680:	20800e17 	ldw	r2,56(r4)
 8009684:	1000f726 	beq	r2,zero,8009a64 <___vfiprintf_internal_r+0x424>
 8009688:	d8812017 	ldw	r2,1152(sp)
 800968c:	10c0030b 	ldhu	r3,12(r2)
 8009690:	1908000c 	andi	r4,r3,8192
 8009694:	1805883a 	mov	r2,r3
 8009698:	2000081e 	bne	r4,zero,80096bc <___vfiprintf_internal_r+0x7c>
 800969c:	d9412017 	ldw	r5,1152(sp)
 80096a0:	18880014 	ori	r2,r3,8192
 80096a4:	00f7ffc4 	movi	r3,-8193
 80096a8:	29001917 	ldw	r4,100(r5)
 80096ac:	2880030d 	sth	r2,12(r5)
 80096b0:	20c8703a 	and	r4,r4,r3
 80096b4:	29001915 	stw	r4,100(r5)
 80096b8:	1007883a 	mov	r3,r2
 80096bc:	1100020c 	andi	r4,r2,8
 80096c0:	2000a726 	beq	r4,zero,8009960 <___vfiprintf_internal_r+0x320>
 80096c4:	d9412017 	ldw	r5,1152(sp)
 80096c8:	29000417 	ldw	r4,16(r5)
 80096cc:	2000a426 	beq	r4,zero,8009960 <___vfiprintf_internal_r+0x320>
 80096d0:	1080068c 	andi	r2,r2,26
 80096d4:	01000284 	movi	r4,10
 80096d8:	1100ab26 	beq	r2,r4,8009988 <___vfiprintf_internal_r+0x348>
 80096dc:	d9010a04 	addi	r4,sp,1064
 80096e0:	d94109c4 	addi	r5,sp,1063
 80096e4:	07020074 	movhi	fp,2049
 80096e8:	04420074 	movhi	r17,2049
 80096ec:	2145c83a 	sub	r2,r4,r5
 80096f0:	e7012e04 	addi	fp,fp,1208
 80096f4:	8c412a04 	addi	r17,r17,1192
 80096f8:	d9011e15 	stw	r4,1144(sp)
 80096fc:	d9411f15 	stw	r5,1148(sp)
 8009700:	dec11a15 	stw	sp,1128(sp)
 8009704:	d8011c15 	stw	zero,1136(sp)
 8009708:	d8011b15 	stw	zero,1132(sp)
 800970c:	d8012715 	stw	zero,1180(sp)
 8009710:	d8012515 	stw	zero,1172(sp)
 8009714:	d811883a 	mov	r8,sp
 8009718:	d8812815 	stw	r2,1184(sp)
 800971c:	982f883a 	mov	r23,r19
 8009720:	b8800007 	ldb	r2,0(r23)
 8009724:	1003b026 	beq	r2,zero,800a5e8 <___vfiprintf_internal_r+0xfa8>
 8009728:	01000944 	movi	r4,37
 800972c:	1103ae26 	beq	r2,r4,800a5e8 <___vfiprintf_internal_r+0xfa8>
 8009730:	b805883a 	mov	r2,r23
 8009734:	00000106 	br	800973c <___vfiprintf_internal_r+0xfc>
 8009738:	19000326 	beq	r3,r4,8009748 <___vfiprintf_internal_r+0x108>
 800973c:	10800044 	addi	r2,r2,1
 8009740:	10c00007 	ldb	r3,0(r2)
 8009744:	183ffc1e 	bne	r3,zero,8009738 <__alt_data_end+0xfc009738>
 8009748:	15e1c83a 	sub	r16,r2,r23
 800974c:	1029883a 	mov	r20,r2
 8009750:	80001026 	beq	r16,zero,8009794 <___vfiprintf_internal_r+0x154>
 8009754:	d8c11c17 	ldw	r3,1136(sp)
 8009758:	d8811b17 	ldw	r2,1132(sp)
 800975c:	45c00015 	stw	r23,0(r8)
 8009760:	80c7883a 	add	r3,r16,r3
 8009764:	10800044 	addi	r2,r2,1
 8009768:	44000115 	stw	r16,4(r8)
 800976c:	d8c11c15 	stw	r3,1136(sp)
 8009770:	d8811b15 	stw	r2,1132(sp)
 8009774:	010001c4 	movi	r4,7
 8009778:	2080740e 	bge	r4,r2,800994c <___vfiprintf_internal_r+0x30c>
 800977c:	1803a71e 	bne	r3,zero,800a61c <___vfiprintf_internal_r+0xfdc>
 8009780:	d8c12517 	ldw	r3,1172(sp)
 8009784:	d8011b15 	stw	zero,1132(sp)
 8009788:	d811883a 	mov	r8,sp
 800978c:	1c07883a 	add	r3,r3,r16
 8009790:	d8c12515 	stw	r3,1172(sp)
 8009794:	a0800007 	ldb	r2,0(r20)
 8009798:	1002bf26 	beq	r2,zero,800a298 <___vfiprintf_internal_r+0xc58>
 800979c:	a5c00044 	addi	r23,r20,1
 80097a0:	a1800047 	ldb	r6,1(r20)
 80097a4:	d8011d85 	stb	zero,1142(sp)
 80097a8:	d8012205 	stb	zero,1160(sp)
 80097ac:	043fffc4 	movi	r16,-1
 80097b0:	d8012415 	stw	zero,1168(sp)
 80097b4:	0025883a 	mov	r18,zero
 80097b8:	05001604 	movi	r20,88
 80097bc:	05400244 	movi	r21,9
 80097c0:	4027883a 	mov	r19,r8
 80097c4:	bdc00044 	addi	r23,r23,1
 80097c8:	30bff804 	addi	r2,r6,-32
 80097cc:	a0825636 	bltu	r20,r2,800a128 <___vfiprintf_internal_r+0xae8>
 80097d0:	100490ba 	slli	r2,r2,2
 80097d4:	01020074 	movhi	r4,2049
 80097d8:	2125fa04 	addi	r4,r4,-26648
 80097dc:	1105883a 	add	r2,r2,r4
 80097e0:	10800017 	ldw	r2,0(r2)
 80097e4:	1000683a 	jmp	r2
 80097e8:	0800a0b8 	rdprs	zero,at,642
 80097ec:	0800a128 	cmpgeui	zero,at,644
 80097f0:	0800a128 	cmpgeui	zero,at,644
 80097f4:	0800a11c 	xori	zero,at,644
 80097f8:	0800a128 	cmpgeui	zero,at,644
 80097fc:	0800a128 	cmpgeui	zero,at,644
 8009800:	0800a128 	cmpgeui	zero,at,644
 8009804:	0800a128 	cmpgeui	zero,at,644
 8009808:	0800a128 	cmpgeui	zero,at,644
 800980c:	0800a128 	cmpgeui	zero,at,644
 8009810:	08009ea8 	cmpgeui	zero,at,634
 8009814:	0800a0d0 	cmplti	zero,at,643
 8009818:	0800a128 	cmpgeui	zero,at,644
 800981c:	08009a7c 	xorhi	zero,at,617
 8009820:	08009ecc 	andi	zero,at,635
 8009824:	0800a128 	cmpgeui	zero,at,644
 8009828:	08009a88 	cmpgei	zero,at,618
 800982c:	08009a94 	ori	zero,at,618
 8009830:	08009a94 	ori	zero,at,618
 8009834:	08009a94 	ori	zero,at,618
 8009838:	08009a94 	ori	zero,at,618
 800983c:	08009a94 	ori	zero,at,618
 8009840:	08009a94 	ori	zero,at,618
 8009844:	08009a94 	ori	zero,at,618
 8009848:	08009a94 	ori	zero,at,618
 800984c:	08009a94 	ori	zero,at,618
 8009850:	0800a128 	cmpgeui	zero,at,644
 8009854:	0800a128 	cmpgeui	zero,at,644
 8009858:	0800a128 	cmpgeui	zero,at,644
 800985c:	0800a128 	cmpgeui	zero,at,644
 8009860:	0800a128 	cmpgeui	zero,at,644
 8009864:	0800a128 	cmpgeui	zero,at,644
 8009868:	0800a128 	cmpgeui	zero,at,644
 800986c:	0800a128 	cmpgeui	zero,at,644
 8009870:	0800a128 	cmpgeui	zero,at,644
 8009874:	0800a128 	cmpgeui	zero,at,644
 8009878:	08009ad4 	ori	zero,at,619
 800987c:	0800a128 	cmpgeui	zero,at,644
 8009880:	0800a128 	cmpgeui	zero,at,644
 8009884:	0800a128 	cmpgeui	zero,at,644
 8009888:	0800a128 	cmpgeui	zero,at,644
 800988c:	0800a128 	cmpgeui	zero,at,644
 8009890:	0800a128 	cmpgeui	zero,at,644
 8009894:	0800a128 	cmpgeui	zero,at,644
 8009898:	0800a128 	cmpgeui	zero,at,644
 800989c:	0800a128 	cmpgeui	zero,at,644
 80098a0:	0800a128 	cmpgeui	zero,at,644
 80098a4:	08009dc4 	addi	zero,at,631
 80098a8:	0800a128 	cmpgeui	zero,at,644
 80098ac:	0800a128 	cmpgeui	zero,at,644
 80098b0:	0800a128 	cmpgeui	zero,at,644
 80098b4:	0800a128 	cmpgeui	zero,at,644
 80098b8:	0800a128 	cmpgeui	zero,at,644
 80098bc:	08009e04 	addi	zero,at,632
 80098c0:	0800a128 	cmpgeui	zero,at,644
 80098c4:	0800a128 	cmpgeui	zero,at,644
 80098c8:	08009e48 	cmpgei	zero,at,633
 80098cc:	0800a128 	cmpgeui	zero,at,644
 80098d0:	0800a128 	cmpgeui	zero,at,644
 80098d4:	0800a128 	cmpgeui	zero,at,644
 80098d8:	0800a128 	cmpgeui	zero,at,644
 80098dc:	0800a128 	cmpgeui	zero,at,644
 80098e0:	0800a128 	cmpgeui	zero,at,644
 80098e4:	0800a128 	cmpgeui	zero,at,644
 80098e8:	0800a128 	cmpgeui	zero,at,644
 80098ec:	0800a128 	cmpgeui	zero,at,644
 80098f0:	0800a128 	cmpgeui	zero,at,644
 80098f4:	08009d90 	cmplti	zero,at,630
 80098f8:	0800a0e0 	cmpeqi	zero,at,643
 80098fc:	0800a128 	cmpgeui	zero,at,644
 8009900:	0800a128 	cmpgeui	zero,at,644
 8009904:	0800a128 	cmpgeui	zero,at,644
 8009908:	08009f1c 	xori	zero,at,636
 800990c:	0800a0e0 	cmpeqi	zero,at,643
 8009910:	0800a128 	cmpgeui	zero,at,644
 8009914:	0800a128 	cmpgeui	zero,at,644
 8009918:	08009e34 	orhi	zero,at,632
 800991c:	0800a128 	cmpgeui	zero,at,644
 8009920:	0800a080 	call	800a08 <__alt_mem_sdram-0x77ff5f8>
 8009924:	0800a008 	cmpgei	zero,at,640
 8009928:	0800a03c 	xorhi	zero,at,640
 800992c:	08009f28 	cmpgeui	zero,at,636
 8009930:	0800a128 	cmpgeui	zero,at,644
 8009934:	08009f34 	orhi	zero,at,636
 8009938:	0800a128 	cmpgeui	zero,at,644
 800993c:	08009f90 	cmplti	zero,at,638
 8009940:	0800a128 	cmpgeui	zero,at,644
 8009944:	0800a128 	cmpgeui	zero,at,644
 8009948:	08009fc4 	addi	zero,at,639
 800994c:	42000204 	addi	r8,r8,8
 8009950:	d8c12517 	ldw	r3,1172(sp)
 8009954:	1c07883a 	add	r3,r3,r16
 8009958:	d8c12515 	stw	r3,1172(sp)
 800995c:	003f8d06 	br	8009794 <__alt_data_end+0xfc009794>
 8009960:	d9012117 	ldw	r4,1156(sp)
 8009964:	d9412017 	ldw	r5,1152(sp)
 8009968:	80043080 	call	8004308 <__swsetup_r>
 800996c:	1000301e 	bne	r2,zero,8009a30 <___vfiprintf_internal_r+0x3f0>
 8009970:	d8812017 	ldw	r2,1152(sp)
 8009974:	01000284 	movi	r4,10
 8009978:	10c0030b 	ldhu	r3,12(r2)
 800997c:	1805883a 	mov	r2,r3
 8009980:	1080068c 	andi	r2,r2,26
 8009984:	113f551e 	bne	r2,r4,80096dc <__alt_data_end+0xfc0096dc>
 8009988:	d9012017 	ldw	r4,1152(sp)
 800998c:	2080038b 	ldhu	r2,14(r4)
 8009990:	113fffcc 	andi	r4,r2,65535
 8009994:	2120001c 	xori	r4,r4,32768
 8009998:	21200004 	addi	r4,r4,-32768
 800999c:	203f4f16 	blt	r4,zero,80096dc <__alt_data_end+0xfc0096dc>
 80099a0:	d9412017 	ldw	r5,1152(sp)
 80099a4:	d9012117 	ldw	r4,1156(sp)
 80099a8:	d9c12317 	ldw	r7,1164(sp)
 80099ac:	2b001917 	ldw	r12,100(r5)
 80099b0:	2ac00717 	ldw	r11,28(r5)
 80099b4:	2a800917 	ldw	r10,36(r5)
 80099b8:	02010004 	movi	r8,1024
 80099bc:	18ffff4c 	andi	r3,r3,65533
 80099c0:	da0b883a 	add	r5,sp,r8
 80099c4:	980d883a 	mov	r6,r19
 80099c8:	d8c1030d 	sth	r3,1036(sp)
 80099cc:	db011915 	stw	r12,1124(sp)
 80099d0:	d881038d 	sth	r2,1038(sp)
 80099d4:	dac10715 	stw	r11,1052(sp)
 80099d8:	da810915 	stw	r10,1060(sp)
 80099dc:	dec10015 	stw	sp,1024(sp)
 80099e0:	dec10415 	stw	sp,1040(sp)
 80099e4:	da010215 	stw	r8,1032(sp)
 80099e8:	da010515 	stw	r8,1044(sp)
 80099ec:	d8010615 	stw	zero,1048(sp)
 80099f0:	80096400 	call	8009640 <___vfiprintf_internal_r>
 80099f4:	1021883a 	mov	r16,r2
 80099f8:	10000416 	blt	r2,zero,8009a0c <___vfiprintf_internal_r+0x3cc>
 80099fc:	d9012117 	ldw	r4,1156(sp)
 8009a00:	d9410004 	addi	r5,sp,1024
 8009a04:	8005d880 	call	8005d88 <_fflush_r>
 8009a08:	10040f1e 	bne	r2,zero,800aa48 <___vfiprintf_internal_r+0x1408>
 8009a0c:	d881030b 	ldhu	r2,1036(sp)
 8009a10:	1080100c 	andi	r2,r2,64
 8009a14:	10000426 	beq	r2,zero,8009a28 <___vfiprintf_internal_r+0x3e8>
 8009a18:	d8c12017 	ldw	r3,1152(sp)
 8009a1c:	1880030b 	ldhu	r2,12(r3)
 8009a20:	10801014 	ori	r2,r2,64
 8009a24:	1880030d 	sth	r2,12(r3)
 8009a28:	8005883a 	mov	r2,r16
 8009a2c:	00000106 	br	8009a34 <___vfiprintf_internal_r+0x3f4>
 8009a30:	00bfffc4 	movi	r2,-1
 8009a34:	dfc13517 	ldw	ra,1236(sp)
 8009a38:	df013417 	ldw	fp,1232(sp)
 8009a3c:	ddc13317 	ldw	r23,1228(sp)
 8009a40:	dd813217 	ldw	r22,1224(sp)
 8009a44:	dd413117 	ldw	r21,1220(sp)
 8009a48:	dd013017 	ldw	r20,1216(sp)
 8009a4c:	dcc12f17 	ldw	r19,1212(sp)
 8009a50:	dc812e17 	ldw	r18,1208(sp)
 8009a54:	dc412d17 	ldw	r17,1204(sp)
 8009a58:	dc012c17 	ldw	r16,1200(sp)
 8009a5c:	dec13604 	addi	sp,sp,1240
 8009a60:	f800283a 	ret
 8009a64:	80063440 	call	8006344 <__sinit>
 8009a68:	003f0706 	br	8009688 <__alt_data_end+0xfc009688>
 8009a6c:	d8c12417 	ldw	r3,1168(sp)
 8009a70:	d8812315 	stw	r2,1164(sp)
 8009a74:	00c7c83a 	sub	r3,zero,r3
 8009a78:	d8c12415 	stw	r3,1168(sp)
 8009a7c:	94800114 	ori	r18,r18,4
 8009a80:	b9800007 	ldb	r6,0(r23)
 8009a84:	003f4f06 	br	80097c4 <__alt_data_end+0xfc0097c4>
 8009a88:	94802014 	ori	r18,r18,128
 8009a8c:	b9800007 	ldb	r6,0(r23)
 8009a90:	003f4c06 	br	80097c4 <__alt_data_end+0xfc0097c4>
 8009a94:	dc012615 	stw	r16,1176(sp)
 8009a98:	d8012415 	stw	zero,1168(sp)
 8009a9c:	35bff404 	addi	r22,r6,-48
 8009aa0:	0009883a 	mov	r4,zero
 8009aa4:	b821883a 	mov	r16,r23
 8009aa8:	01400284 	movi	r5,10
 8009aac:	8001ff40 	call	8001ff4 <__mulsi3>
 8009ab0:	81800007 	ldb	r6,0(r16)
 8009ab4:	1589883a 	add	r4,r2,r22
 8009ab8:	bdc00044 	addi	r23,r23,1
 8009abc:	35bff404 	addi	r22,r6,-48
 8009ac0:	b821883a 	mov	r16,r23
 8009ac4:	adbff82e 	bgeu	r21,r22,8009aa8 <__alt_data_end+0xfc009aa8>
 8009ac8:	d9012415 	stw	r4,1168(sp)
 8009acc:	dc012617 	ldw	r16,1176(sp)
 8009ad0:	003f3d06 	br	80097c8 <__alt_data_end+0xfc0097c8>
 8009ad4:	d8c12203 	ldbu	r3,1160(sp)
 8009ad8:	94800414 	ori	r18,r18,16
 8009adc:	9080080c 	andi	r2,r18,32
 8009ae0:	d8c11d85 	stb	r3,1142(sp)
 8009ae4:	9811883a 	mov	r8,r19
 8009ae8:	d8c12317 	ldw	r3,1164(sp)
 8009aec:	10018226 	beq	r2,zero,800a0f8 <___vfiprintf_internal_r+0xab8>
 8009af0:	d9012317 	ldw	r4,1164(sp)
 8009af4:	18800117 	ldw	r2,4(r3)
 8009af8:	1cc00017 	ldw	r19,0(r3)
 8009afc:	21000204 	addi	r4,r4,8
 8009b00:	d9012315 	stw	r4,1164(sp)
 8009b04:	102b883a 	mov	r21,r2
 8009b08:	10030016 	blt	r2,zero,800a70c <___vfiprintf_internal_r+0x10cc>
 8009b0c:	dd811d83 	ldbu	r22,1142(sp)
 8009b10:	8029883a 	mov	r20,r16
 8009b14:	00800044 	movi	r2,1
 8009b18:	9d46b03a 	or	r3,r19,r21
 8009b1c:	80000216 	blt	r16,zero,8009b28 <___vfiprintf_internal_r+0x4e8>
 8009b20:	013fdfc4 	movi	r4,-129
 8009b24:	9124703a 	and	r18,r18,r4
 8009b28:	1801b41e 	bne	r3,zero,800a1fc <___vfiprintf_internal_r+0xbbc>
 8009b2c:	80028126 	beq	r16,zero,800a534 <___vfiprintf_internal_r+0xef4>
 8009b30:	10803fcc 	andi	r2,r2,255
 8009b34:	00c00044 	movi	r3,1
 8009b38:	10c1d126 	beq	r2,r3,800a280 <___vfiprintf_internal_r+0xc40>
 8009b3c:	00c00084 	movi	r3,2
 8009b40:	10c28626 	beq	r2,r3,800a55c <___vfiprintf_internal_r+0xf1c>
 8009b44:	d8c10a04 	addi	r3,sp,1064
 8009b48:	9808d0fa 	srli	r4,r19,3
 8009b4c:	a80a977a 	slli	r5,r21,29
 8009b50:	a82ad0fa 	srli	r21,r21,3
 8009b54:	9cc001cc 	andi	r19,r19,7
 8009b58:	98800c04 	addi	r2,r19,48
 8009b5c:	18ffffc4 	addi	r3,r3,-1
 8009b60:	2926b03a 	or	r19,r5,r4
 8009b64:	18800005 	stb	r2,0(r3)
 8009b68:	9d48b03a 	or	r4,r19,r21
 8009b6c:	203ff61e 	bne	r4,zero,8009b48 <__alt_data_end+0xfc009b48>
 8009b70:	9100004c 	andi	r4,r18,1
 8009b74:	d8c12215 	stw	r3,1160(sp)
 8009b78:	2002b31e 	bne	r4,zero,800a648 <___vfiprintf_internal_r+0x1008>
 8009b7c:	d9411e17 	ldw	r5,1144(sp)
 8009b80:	28e9c83a 	sub	r20,r5,r3
 8009b84:	a02b883a 	mov	r21,r20
 8009b88:	a400010e 	bge	r20,r16,8009b90 <___vfiprintf_internal_r+0x550>
 8009b8c:	802b883a 	mov	r21,r16
 8009b90:	b5803fcc 	andi	r22,r22,255
 8009b94:	b580201c 	xori	r22,r22,128
 8009b98:	b5bfe004 	addi	r22,r22,-128
 8009b9c:	b0000126 	beq	r22,zero,8009ba4 <___vfiprintf_internal_r+0x564>
 8009ba0:	ad400044 	addi	r21,r21,1
 8009ba4:	9280008c 	andi	r10,r18,2
 8009ba8:	50000126 	beq	r10,zero,8009bb0 <___vfiprintf_internal_r+0x570>
 8009bac:	ad400084 	addi	r21,r21,2
 8009bb0:	9580210c 	andi	r22,r18,132
 8009bb4:	b001751e 	bne	r22,zero,800a18c <___vfiprintf_internal_r+0xb4c>
 8009bb8:	d9012417 	ldw	r4,1168(sp)
 8009bbc:	2567c83a 	sub	r19,r4,r21
 8009bc0:	04c1720e 	bge	zero,r19,800a18c <___vfiprintf_internal_r+0xb4c>
 8009bc4:	01c00404 	movi	r7,16
 8009bc8:	d8c11c17 	ldw	r3,1136(sp)
 8009bcc:	3cc36b0e 	bge	r7,r19,800a97c <___vfiprintf_internal_r+0x133c>
 8009bd0:	00820074 	movhi	r2,2049
 8009bd4:	10812e04 	addi	r2,r2,1208
 8009bd8:	dc012915 	stw	r16,1188(sp)
 8009bdc:	d9011b17 	ldw	r4,1132(sp)
 8009be0:	9821883a 	mov	r16,r19
 8009be4:	d8812615 	stw	r2,1176(sp)
 8009be8:	030001c4 	movi	r12,7
 8009bec:	5027883a 	mov	r19,r10
 8009bf0:	00000506 	br	8009c08 <___vfiprintf_internal_r+0x5c8>
 8009bf4:	21400084 	addi	r5,r4,2
 8009bf8:	42000204 	addi	r8,r8,8
 8009bfc:	1009883a 	mov	r4,r2
 8009c00:	843ffc04 	addi	r16,r16,-16
 8009c04:	3c000d0e 	bge	r7,r16,8009c3c <___vfiprintf_internal_r+0x5fc>
 8009c08:	18c00404 	addi	r3,r3,16
 8009c0c:	20800044 	addi	r2,r4,1
 8009c10:	47000015 	stw	fp,0(r8)
 8009c14:	41c00115 	stw	r7,4(r8)
 8009c18:	d8c11c15 	stw	r3,1136(sp)
 8009c1c:	d8811b15 	stw	r2,1132(sp)
 8009c20:	60bff40e 	bge	r12,r2,8009bf4 <__alt_data_end+0xfc009bf4>
 8009c24:	18014b1e 	bne	r3,zero,800a154 <___vfiprintf_internal_r+0xb14>
 8009c28:	843ffc04 	addi	r16,r16,-16
 8009c2c:	0009883a 	mov	r4,zero
 8009c30:	01400044 	movi	r5,1
 8009c34:	d811883a 	mov	r8,sp
 8009c38:	3c3ff316 	blt	r7,r16,8009c08 <__alt_data_end+0xfc009c08>
 8009c3c:	9815883a 	mov	r10,r19
 8009c40:	8027883a 	mov	r19,r16
 8009c44:	dc012917 	ldw	r16,1188(sp)
 8009c48:	d9012617 	ldw	r4,1176(sp)
 8009c4c:	98c7883a 	add	r3,r19,r3
 8009c50:	44c00115 	stw	r19,4(r8)
 8009c54:	41000015 	stw	r4,0(r8)
 8009c58:	d8c11c15 	stw	r3,1136(sp)
 8009c5c:	d9411b15 	stw	r5,1132(sp)
 8009c60:	008001c4 	movi	r2,7
 8009c64:	11425116 	blt	r2,r5,800a5ac <___vfiprintf_internal_r+0xf6c>
 8009c68:	d9011d87 	ldb	r4,1142(sp)
 8009c6c:	42000204 	addi	r8,r8,8
 8009c70:	28800044 	addi	r2,r5,1
 8009c74:	20014a1e 	bne	r4,zero,800a1a0 <___vfiprintf_internal_r+0xb60>
 8009c78:	50000c26 	beq	r10,zero,8009cac <___vfiprintf_internal_r+0x66c>
 8009c7c:	d9011d04 	addi	r4,sp,1140
 8009c80:	18c00084 	addi	r3,r3,2
 8009c84:	41000015 	stw	r4,0(r8)
 8009c88:	01000084 	movi	r4,2
 8009c8c:	41000115 	stw	r4,4(r8)
 8009c90:	d8c11c15 	stw	r3,1136(sp)
 8009c94:	d8811b15 	stw	r2,1132(sp)
 8009c98:	010001c4 	movi	r4,7
 8009c9c:	20822016 	blt	r4,r2,800a520 <___vfiprintf_internal_r+0xee0>
 8009ca0:	100b883a 	mov	r5,r2
 8009ca4:	42000204 	addi	r8,r8,8
 8009ca8:	10800044 	addi	r2,r2,1
 8009cac:	01002004 	movi	r4,128
 8009cb0:	b101de26 	beq	r22,r4,800a42c <___vfiprintf_internal_r+0xdec>
 8009cb4:	8521c83a 	sub	r16,r16,r20
 8009cb8:	0400230e 	bge	zero,r16,8009d48 <___vfiprintf_internal_r+0x708>
 8009cbc:	04c00404 	movi	r19,16
 8009cc0:	9c030d0e 	bge	r19,r16,800a8f8 <___vfiprintf_internal_r+0x12b8>
 8009cc4:	00820074 	movhi	r2,2049
 8009cc8:	10812a04 	addi	r2,r2,1192
 8009ccc:	d8812615 	stw	r2,1176(sp)
 8009cd0:	058001c4 	movi	r22,7
 8009cd4:	00000506 	br	8009cec <___vfiprintf_internal_r+0x6ac>
 8009cd8:	28800084 	addi	r2,r5,2
 8009cdc:	42000204 	addi	r8,r8,8
 8009ce0:	200b883a 	mov	r5,r4
 8009ce4:	843ffc04 	addi	r16,r16,-16
 8009ce8:	9c000d0e 	bge	r19,r16,8009d20 <___vfiprintf_internal_r+0x6e0>
 8009cec:	18c00404 	addi	r3,r3,16
 8009cf0:	29000044 	addi	r4,r5,1
 8009cf4:	44400015 	stw	r17,0(r8)
 8009cf8:	44c00115 	stw	r19,4(r8)
 8009cfc:	d8c11c15 	stw	r3,1136(sp)
 8009d00:	d9011b15 	stw	r4,1132(sp)
 8009d04:	b13ff40e 	bge	r22,r4,8009cd8 <__alt_data_end+0xfc009cd8>
 8009d08:	1801321e 	bne	r3,zero,800a1d4 <___vfiprintf_internal_r+0xb94>
 8009d0c:	843ffc04 	addi	r16,r16,-16
 8009d10:	000b883a 	mov	r5,zero
 8009d14:	00800044 	movi	r2,1
 8009d18:	d811883a 	mov	r8,sp
 8009d1c:	9c3ff316 	blt	r19,r16,8009cec <__alt_data_end+0xfc009cec>
 8009d20:	d9012617 	ldw	r4,1176(sp)
 8009d24:	1c07883a 	add	r3,r3,r16
 8009d28:	44000115 	stw	r16,4(r8)
 8009d2c:	41000015 	stw	r4,0(r8)
 8009d30:	d8c11c15 	stw	r3,1136(sp)
 8009d34:	d8811b15 	stw	r2,1132(sp)
 8009d38:	010001c4 	movi	r4,7
 8009d3c:	20816216 	blt	r4,r2,800a2c8 <___vfiprintf_internal_r+0xc88>
 8009d40:	42000204 	addi	r8,r8,8
 8009d44:	10800044 	addi	r2,r2,1
 8009d48:	d9012217 	ldw	r4,1160(sp)
 8009d4c:	1d07883a 	add	r3,r3,r20
 8009d50:	45000115 	stw	r20,4(r8)
 8009d54:	41000015 	stw	r4,0(r8)
 8009d58:	d8c11c15 	stw	r3,1136(sp)
 8009d5c:	d8811b15 	stw	r2,1132(sp)
 8009d60:	010001c4 	movi	r4,7
 8009d64:	2081610e 	bge	r4,r2,800a2ec <___vfiprintf_internal_r+0xcac>
 8009d68:	1802211e 	bne	r3,zero,800a5f0 <___vfiprintf_internal_r+0xfb0>
 8009d6c:	d8011b15 	stw	zero,1132(sp)
 8009d70:	9480010c 	andi	r18,r18,4
 8009d74:	9002171e 	bne	r18,zero,800a5d4 <___vfiprintf_internal_r+0xf94>
 8009d78:	d9412417 	ldw	r5,1168(sp)
 8009d7c:	a9433716 	blt	r21,r5,800aa5c <___vfiprintf_internal_r+0x141c>
 8009d80:	d8812517 	ldw	r2,1172(sp)
 8009d84:	1545883a 	add	r2,r2,r21
 8009d88:	d8812515 	stw	r2,1172(sp)
 8009d8c:	00019a06 	br	800a3f8 <___vfiprintf_internal_r+0xdb8>
 8009d90:	d8c12317 	ldw	r3,1164(sp)
 8009d94:	05400044 	movi	r21,1
 8009d98:	9811883a 	mov	r8,r19
 8009d9c:	18800017 	ldw	r2,0(r3)
 8009da0:	18c00104 	addi	r3,r3,4
 8009da4:	d8c12315 	stw	r3,1164(sp)
 8009da8:	d8c10004 	addi	r3,sp,1024
 8009dac:	d8011d85 	stb	zero,1142(sp)
 8009db0:	d8810005 	stb	r2,1024(sp)
 8009db4:	a829883a 	mov	r20,r21
 8009db8:	d8c12215 	stw	r3,1160(sp)
 8009dbc:	0021883a 	mov	r16,zero
 8009dc0:	003f7806 	br	8009ba4 <__alt_data_end+0xfc009ba4>
 8009dc4:	94800414 	ori	r18,r18,16
 8009dc8:	9080080c 	andi	r2,r18,32
 8009dcc:	9811883a 	mov	r8,r19
 8009dd0:	10009026 	beq	r2,zero,800a014 <___vfiprintf_internal_r+0x9d4>
 8009dd4:	d8812317 	ldw	r2,1164(sp)
 8009dd8:	d8c12317 	ldw	r3,1164(sp)
 8009ddc:	14c00017 	ldw	r19,0(r2)
 8009de0:	15400117 	ldw	r21,4(r2)
 8009de4:	18c00204 	addi	r3,r3,8
 8009de8:	d8c12315 	stw	r3,1164(sp)
 8009dec:	0005883a 	mov	r2,zero
 8009df0:	9d46b03a 	or	r3,r19,r21
 8009df4:	d8011d85 	stb	zero,1142(sp)
 8009df8:	8029883a 	mov	r20,r16
 8009dfc:	002d883a 	mov	r22,zero
 8009e00:	003f4606 	br	8009b1c <__alt_data_end+0xfc009b1c>
 8009e04:	94800414 	ori	r18,r18,16
 8009e08:	9080080c 	andi	r2,r18,32
 8009e0c:	9811883a 	mov	r8,r19
 8009e10:	10006226 	beq	r2,zero,8009f9c <___vfiprintf_internal_r+0x95c>
 8009e14:	d9012317 	ldw	r4,1164(sp)
 8009e18:	00800044 	movi	r2,1
 8009e1c:	24c00017 	ldw	r19,0(r4)
 8009e20:	25400117 	ldw	r21,4(r4)
 8009e24:	21000204 	addi	r4,r4,8
 8009e28:	d9012315 	stw	r4,1164(sp)
 8009e2c:	9d46b03a 	or	r3,r19,r21
 8009e30:	003ff006 	br	8009df4 <__alt_data_end+0xfc009df4>
 8009e34:	b9800007 	ldb	r6,0(r23)
 8009e38:	00801b04 	movi	r2,108
 8009e3c:	3082b226 	beq	r6,r2,800a908 <___vfiprintf_internal_r+0x12c8>
 8009e40:	94800414 	ori	r18,r18,16
 8009e44:	003e5f06 	br	80097c4 <__alt_data_end+0xfc0097c4>
 8009e48:	d8c12203 	ldbu	r3,1160(sp)
 8009e4c:	01020074 	movhi	r4,2049
 8009e50:	2100c404 	addi	r4,r4,784
 8009e54:	d8c11d85 	stb	r3,1142(sp)
 8009e58:	d9012715 	stw	r4,1180(sp)
 8009e5c:	90c0080c 	andi	r3,r18,32
 8009e60:	9811883a 	mov	r8,r19
 8009e64:	d8812317 	ldw	r2,1164(sp)
 8009e68:	18005f26 	beq	r3,zero,8009fe8 <___vfiprintf_internal_r+0x9a8>
 8009e6c:	d9012317 	ldw	r4,1164(sp)
 8009e70:	14c00017 	ldw	r19,0(r2)
 8009e74:	15400117 	ldw	r21,4(r2)
 8009e78:	21000204 	addi	r4,r4,8
 8009e7c:	d9012315 	stw	r4,1164(sp)
 8009e80:	9080004c 	andi	r2,r18,1
 8009e84:	1001e226 	beq	r2,zero,800a610 <___vfiprintf_internal_r+0xfd0>
 8009e88:	9d46b03a 	or	r3,r19,r21
 8009e8c:	18024e26 	beq	r3,zero,800a7c8 <___vfiprintf_internal_r+0x1188>
 8009e90:	00800c04 	movi	r2,48
 8009e94:	d8811d05 	stb	r2,1140(sp)
 8009e98:	d9811d45 	stb	r6,1141(sp)
 8009e9c:	94800094 	ori	r18,r18,2
 8009ea0:	00800084 	movi	r2,2
 8009ea4:	003fd306 	br	8009df4 <__alt_data_end+0xfc009df4>
 8009ea8:	d9012317 	ldw	r4,1164(sp)
 8009eac:	d9412317 	ldw	r5,1164(sp)
 8009eb0:	21000017 	ldw	r4,0(r4)
 8009eb4:	28800104 	addi	r2,r5,4
 8009eb8:	d9012415 	stw	r4,1168(sp)
 8009ebc:	203eeb16 	blt	r4,zero,8009a6c <__alt_data_end+0xfc009a6c>
 8009ec0:	d8812315 	stw	r2,1164(sp)
 8009ec4:	b9800007 	ldb	r6,0(r23)
 8009ec8:	003e3e06 	br	80097c4 <__alt_data_end+0xfc0097c4>
 8009ecc:	b9800007 	ldb	r6,0(r23)
 8009ed0:	01000a84 	movi	r4,42
 8009ed4:	b8800044 	addi	r2,r23,1
 8009ed8:	3102d226 	beq	r6,r4,800aa24 <___vfiprintf_internal_r+0x13e4>
 8009edc:	35bff404 	addi	r22,r6,-48
 8009ee0:	102f883a 	mov	r23,r2
 8009ee4:	0021883a 	mov	r16,zero
 8009ee8:	adbe3736 	bltu	r21,r22,80097c8 <__alt_data_end+0xfc0097c8>
 8009eec:	0009883a 	mov	r4,zero
 8009ef0:	01400284 	movi	r5,10
 8009ef4:	8001ff40 	call	8001ff4 <__mulsi3>
 8009ef8:	b9800007 	ldb	r6,0(r23)
 8009efc:	b089883a 	add	r4,r22,r2
 8009f00:	bdc00044 	addi	r23,r23,1
 8009f04:	35bff404 	addi	r22,r6,-48
 8009f08:	adbff92e 	bgeu	r21,r22,8009ef0 <__alt_data_end+0xfc009ef0>
 8009f0c:	2021883a 	mov	r16,r4
 8009f10:	203e2d0e 	bge	r4,zero,80097c8 <__alt_data_end+0xfc0097c8>
 8009f14:	043fffc4 	movi	r16,-1
 8009f18:	003e2b06 	br	80097c8 <__alt_data_end+0xfc0097c8>
 8009f1c:	94801014 	ori	r18,r18,64
 8009f20:	b9800007 	ldb	r6,0(r23)
 8009f24:	003e2706 	br	80097c4 <__alt_data_end+0xfc0097c4>
 8009f28:	94800814 	ori	r18,r18,32
 8009f2c:	b9800007 	ldb	r6,0(r23)
 8009f30:	003e2406 	br	80097c4 <__alt_data_end+0xfc0097c4>
 8009f34:	d9412317 	ldw	r5,1164(sp)
 8009f38:	d8812317 	ldw	r2,1164(sp)
 8009f3c:	d8011d85 	stb	zero,1142(sp)
 8009f40:	29400017 	ldw	r5,0(r5)
 8009f44:	9811883a 	mov	r8,r19
 8009f48:	14c00104 	addi	r19,r2,4
 8009f4c:	d9412215 	stw	r5,1160(sp)
 8009f50:	28029026 	beq	r5,zero,800a994 <___vfiprintf_internal_r+0x1354>
 8009f54:	d9012217 	ldw	r4,1160(sp)
 8009f58:	80027616 	blt	r16,zero,800a934 <___vfiprintf_internal_r+0x12f4>
 8009f5c:	000b883a 	mov	r5,zero
 8009f60:	800d883a 	mov	r6,r16
 8009f64:	da012a15 	stw	r8,1192(sp)
 8009f68:	80077fc0 	call	80077fc <memchr>
 8009f6c:	da012a17 	ldw	r8,1192(sp)
 8009f70:	1002a026 	beq	r2,zero,800a9f4 <___vfiprintf_internal_r+0x13b4>
 8009f74:	d8c12217 	ldw	r3,1160(sp)
 8009f78:	10e9c83a 	sub	r20,r2,r3
 8009f7c:	85023816 	blt	r16,r20,800a860 <___vfiprintf_internal_r+0x1220>
 8009f80:	dd811d83 	ldbu	r22,1142(sp)
 8009f84:	dcc12315 	stw	r19,1164(sp)
 8009f88:	0021883a 	mov	r16,zero
 8009f8c:	003efd06 	br	8009b84 <__alt_data_end+0xfc009b84>
 8009f90:	9080080c 	andi	r2,r18,32
 8009f94:	9811883a 	mov	r8,r19
 8009f98:	103f9e1e 	bne	r2,zero,8009e14 <__alt_data_end+0xfc009e14>
 8009f9c:	9080040c 	andi	r2,r18,16
 8009fa0:	10021726 	beq	r2,zero,800a800 <___vfiprintf_internal_r+0x11c0>
 8009fa4:	d9412317 	ldw	r5,1164(sp)
 8009fa8:	002b883a 	mov	r21,zero
 8009fac:	00800044 	movi	r2,1
 8009fb0:	2cc00017 	ldw	r19,0(r5)
 8009fb4:	29400104 	addi	r5,r5,4
 8009fb8:	d9412315 	stw	r5,1164(sp)
 8009fbc:	9807883a 	mov	r3,r19
 8009fc0:	003f8c06 	br	8009df4 <__alt_data_end+0xfc009df4>
 8009fc4:	d8c12203 	ldbu	r3,1160(sp)
 8009fc8:	01020074 	movhi	r4,2049
 8009fcc:	2100c904 	addi	r4,r4,804
 8009fd0:	d8c11d85 	stb	r3,1142(sp)
 8009fd4:	d9012715 	stw	r4,1180(sp)
 8009fd8:	90c0080c 	andi	r3,r18,32
 8009fdc:	9811883a 	mov	r8,r19
 8009fe0:	d8812317 	ldw	r2,1164(sp)
 8009fe4:	183fa11e 	bne	r3,zero,8009e6c <__alt_data_end+0xfc009e6c>
 8009fe8:	90c0040c 	andi	r3,r18,16
 8009fec:	1801e526 	beq	r3,zero,800a784 <___vfiprintf_internal_r+0x1144>
 8009ff0:	d9412317 	ldw	r5,1164(sp)
 8009ff4:	14c00017 	ldw	r19,0(r2)
 8009ff8:	002b883a 	mov	r21,zero
 8009ffc:	29400104 	addi	r5,r5,4
 800a000:	d9412315 	stw	r5,1164(sp)
 800a004:	003f9e06 	br	8009e80 <__alt_data_end+0xfc009e80>
 800a008:	9080080c 	andi	r2,r18,32
 800a00c:	9811883a 	mov	r8,r19
 800a010:	103f701e 	bne	r2,zero,8009dd4 <__alt_data_end+0xfc009dd4>
 800a014:	9080040c 	andi	r2,r18,16
 800a018:	1001ef26 	beq	r2,zero,800a7d8 <___vfiprintf_internal_r+0x1198>
 800a01c:	d9012317 	ldw	r4,1164(sp)
 800a020:	002b883a 	mov	r21,zero
 800a024:	0005883a 	mov	r2,zero
 800a028:	24c00017 	ldw	r19,0(r4)
 800a02c:	21000104 	addi	r4,r4,4
 800a030:	d9012315 	stw	r4,1164(sp)
 800a034:	9807883a 	mov	r3,r19
 800a038:	003f6e06 	br	8009df4 <__alt_data_end+0xfc009df4>
 800a03c:	d8c12317 	ldw	r3,1164(sp)
 800a040:	9811883a 	mov	r8,r19
 800a044:	00800c04 	movi	r2,48
 800a048:	1cc00017 	ldw	r19,0(r3)
 800a04c:	01020074 	movhi	r4,2049
 800a050:	18c00104 	addi	r3,r3,4
 800a054:	d8811d05 	stb	r2,1140(sp)
 800a058:	2100c904 	addi	r4,r4,804
 800a05c:	00801e04 	movi	r2,120
 800a060:	d8811d45 	stb	r2,1141(sp)
 800a064:	d8c12315 	stw	r3,1164(sp)
 800a068:	002b883a 	mov	r21,zero
 800a06c:	94800094 	ori	r18,r18,2
 800a070:	d9012715 	stw	r4,1180(sp)
 800a074:	00800084 	movi	r2,2
 800a078:	9807883a 	mov	r3,r19
 800a07c:	003f5d06 	br	8009df4 <__alt_data_end+0xfc009df4>
 800a080:	d8c12203 	ldbu	r3,1160(sp)
 800a084:	9080080c 	andi	r2,r18,32
 800a088:	9811883a 	mov	r8,r19
 800a08c:	d8c11d85 	stb	r3,1142(sp)
 800a090:	1001b126 	beq	r2,zero,800a758 <___vfiprintf_internal_r+0x1118>
 800a094:	d9012317 	ldw	r4,1164(sp)
 800a098:	d9412517 	ldw	r5,1172(sp)
 800a09c:	20800017 	ldw	r2,0(r4)
 800a0a0:	2807d7fa 	srai	r3,r5,31
 800a0a4:	21000104 	addi	r4,r4,4
 800a0a8:	d9012315 	stw	r4,1164(sp)
 800a0ac:	11400015 	stw	r5,0(r2)
 800a0b0:	10c00115 	stw	r3,4(r2)
 800a0b4:	003d9a06 	br	8009720 <__alt_data_end+0xfc009720>
 800a0b8:	d8812207 	ldb	r2,1160(sp)
 800a0bc:	1001c41e 	bne	r2,zero,800a7d0 <___vfiprintf_internal_r+0x1190>
 800a0c0:	00c00804 	movi	r3,32
 800a0c4:	d8c12205 	stb	r3,1160(sp)
 800a0c8:	b9800007 	ldb	r6,0(r23)
 800a0cc:	003dbd06 	br	80097c4 <__alt_data_end+0xfc0097c4>
 800a0d0:	00c00ac4 	movi	r3,43
 800a0d4:	d8c12205 	stb	r3,1160(sp)
 800a0d8:	b9800007 	ldb	r6,0(r23)
 800a0dc:	003db906 	br	80097c4 <__alt_data_end+0xfc0097c4>
 800a0e0:	d8c12203 	ldbu	r3,1160(sp)
 800a0e4:	9080080c 	andi	r2,r18,32
 800a0e8:	9811883a 	mov	r8,r19
 800a0ec:	d8c11d85 	stb	r3,1142(sp)
 800a0f0:	d8c12317 	ldw	r3,1164(sp)
 800a0f4:	103e7e1e 	bne	r2,zero,8009af0 <__alt_data_end+0xfc009af0>
 800a0f8:	9080040c 	andi	r2,r18,16
 800a0fc:	1001a926 	beq	r2,zero,800a7a4 <___vfiprintf_internal_r+0x1164>
 800a100:	1cc00017 	ldw	r19,0(r3)
 800a104:	d9412317 	ldw	r5,1164(sp)
 800a108:	982bd7fa 	srai	r21,r19,31
 800a10c:	29400104 	addi	r5,r5,4
 800a110:	d9412315 	stw	r5,1164(sp)
 800a114:	a805883a 	mov	r2,r21
 800a118:	003e7b06 	br	8009b08 <__alt_data_end+0xfc009b08>
 800a11c:	94800054 	ori	r18,r18,1
 800a120:	b9800007 	ldb	r6,0(r23)
 800a124:	003da706 	br	80097c4 <__alt_data_end+0xfc0097c4>
 800a128:	d8c12203 	ldbu	r3,1160(sp)
 800a12c:	9811883a 	mov	r8,r19
 800a130:	d8c11d85 	stb	r3,1142(sp)
 800a134:	30005826 	beq	r6,zero,800a298 <___vfiprintf_internal_r+0xc58>
 800a138:	05400044 	movi	r21,1
 800a13c:	d8c10004 	addi	r3,sp,1024
 800a140:	d9810005 	stb	r6,1024(sp)
 800a144:	d8011d85 	stb	zero,1142(sp)
 800a148:	a829883a 	mov	r20,r21
 800a14c:	d8c12215 	stw	r3,1160(sp)
 800a150:	003f1a06 	br	8009dbc <__alt_data_end+0xfc009dbc>
 800a154:	d9012117 	ldw	r4,1156(sp)
 800a158:	d9412017 	ldw	r5,1152(sp)
 800a15c:	d9811a04 	addi	r6,sp,1128
 800a160:	d9c12a15 	stw	r7,1192(sp)
 800a164:	db012b15 	stw	r12,1196(sp)
 800a168:	800952c0 	call	800952c <__sprint_r.part.0>
 800a16c:	d9c12a17 	ldw	r7,1192(sp)
 800a170:	db012b17 	ldw	r12,1196(sp)
 800a174:	10004e1e 	bne	r2,zero,800a2b0 <___vfiprintf_internal_r+0xc70>
 800a178:	d9011b17 	ldw	r4,1132(sp)
 800a17c:	d8c11c17 	ldw	r3,1136(sp)
 800a180:	d811883a 	mov	r8,sp
 800a184:	21400044 	addi	r5,r4,1
 800a188:	003e9d06 	br	8009c00 <__alt_data_end+0xfc009c00>
 800a18c:	d9411b17 	ldw	r5,1132(sp)
 800a190:	d8c11c17 	ldw	r3,1136(sp)
 800a194:	28800044 	addi	r2,r5,1
 800a198:	d9011d87 	ldb	r4,1142(sp)
 800a19c:	203eb626 	beq	r4,zero,8009c78 <__alt_data_end+0xfc009c78>
 800a1a0:	01000044 	movi	r4,1
 800a1a4:	d9411d84 	addi	r5,sp,1142
 800a1a8:	1907883a 	add	r3,r3,r4
 800a1ac:	41400015 	stw	r5,0(r8)
 800a1b0:	41000115 	stw	r4,4(r8)
 800a1b4:	d8c11c15 	stw	r3,1136(sp)
 800a1b8:	d8811b15 	stw	r2,1132(sp)
 800a1bc:	014001c4 	movi	r5,7
 800a1c0:	2880ce16 	blt	r5,r2,800a4fc <___vfiprintf_internal_r+0xebc>
 800a1c4:	100b883a 	mov	r5,r2
 800a1c8:	42000204 	addi	r8,r8,8
 800a1cc:	10800044 	addi	r2,r2,1
 800a1d0:	003ea906 	br	8009c78 <__alt_data_end+0xfc009c78>
 800a1d4:	d9012117 	ldw	r4,1156(sp)
 800a1d8:	d9412017 	ldw	r5,1152(sp)
 800a1dc:	d9811a04 	addi	r6,sp,1128
 800a1e0:	800952c0 	call	800952c <__sprint_r.part.0>
 800a1e4:	1000321e 	bne	r2,zero,800a2b0 <___vfiprintf_internal_r+0xc70>
 800a1e8:	d9411b17 	ldw	r5,1132(sp)
 800a1ec:	d8c11c17 	ldw	r3,1136(sp)
 800a1f0:	d811883a 	mov	r8,sp
 800a1f4:	28800044 	addi	r2,r5,1
 800a1f8:	003eba06 	br	8009ce4 <__alt_data_end+0xfc009ce4>
 800a1fc:	10803fcc 	andi	r2,r2,255
 800a200:	00c00044 	movi	r3,1
 800a204:	10fe4d1e 	bne	r2,r3,8009b3c <__alt_data_end+0xfc009b3c>
 800a208:	a800021e 	bne	r21,zero,800a214 <___vfiprintf_internal_r+0xbd4>
 800a20c:	00800244 	movi	r2,9
 800a210:	14c01b2e 	bgeu	r2,r19,800a280 <___vfiprintf_internal_r+0xc40>
 800a214:	dc012215 	stw	r16,1160(sp)
 800a218:	dd010a04 	addi	r20,sp,1064
 800a21c:	a821883a 	mov	r16,r21
 800a220:	402b883a 	mov	r21,r8
 800a224:	9809883a 	mov	r4,r19
 800a228:	800b883a 	mov	r5,r16
 800a22c:	01800284 	movi	r6,10
 800a230:	000f883a 	mov	r7,zero
 800a234:	800ba140 	call	800ba14 <__umoddi3>
 800a238:	10800c04 	addi	r2,r2,48
 800a23c:	a53fffc4 	addi	r20,r20,-1
 800a240:	9809883a 	mov	r4,r19
 800a244:	800b883a 	mov	r5,r16
 800a248:	01800284 	movi	r6,10
 800a24c:	000f883a 	mov	r7,zero
 800a250:	a0800005 	stb	r2,0(r20)
 800a254:	800b3d40 	call	800b3d4 <__udivdi3>
 800a258:	1027883a 	mov	r19,r2
 800a25c:	10c4b03a 	or	r2,r2,r3
 800a260:	1821883a 	mov	r16,r3
 800a264:	103fef1e 	bne	r2,zero,800a224 <__alt_data_end+0xfc00a224>
 800a268:	d9011e17 	ldw	r4,1144(sp)
 800a26c:	dc012217 	ldw	r16,1160(sp)
 800a270:	a811883a 	mov	r8,r21
 800a274:	dd012215 	stw	r20,1160(sp)
 800a278:	2529c83a 	sub	r20,r4,r20
 800a27c:	003e4106 	br	8009b84 <__alt_data_end+0xfc009b84>
 800a280:	9cc00c04 	addi	r19,r19,48
 800a284:	d8c109c4 	addi	r3,sp,1063
 800a288:	dcc109c5 	stb	r19,1063(sp)
 800a28c:	dd012817 	ldw	r20,1184(sp)
 800a290:	d8c12215 	stw	r3,1160(sp)
 800a294:	003e3b06 	br	8009b84 <__alt_data_end+0xfc009b84>
 800a298:	d8811c17 	ldw	r2,1136(sp)
 800a29c:	10000426 	beq	r2,zero,800a2b0 <___vfiprintf_internal_r+0xc70>
 800a2a0:	d9012117 	ldw	r4,1156(sp)
 800a2a4:	d9412017 	ldw	r5,1152(sp)
 800a2a8:	d9811a04 	addi	r6,sp,1128
 800a2ac:	800952c0 	call	800952c <__sprint_r.part.0>
 800a2b0:	d9412017 	ldw	r5,1152(sp)
 800a2b4:	2880030b 	ldhu	r2,12(r5)
 800a2b8:	1080100c 	andi	r2,r2,64
 800a2bc:	103ddc1e 	bne	r2,zero,8009a30 <__alt_data_end+0xfc009a30>
 800a2c0:	d8812517 	ldw	r2,1172(sp)
 800a2c4:	003ddb06 	br	8009a34 <__alt_data_end+0xfc009a34>
 800a2c8:	1801061e 	bne	r3,zero,800a6e4 <___vfiprintf_internal_r+0x10a4>
 800a2cc:	d8c12217 	ldw	r3,1160(sp)
 800a2d0:	00800044 	movi	r2,1
 800a2d4:	dd000115 	stw	r20,4(sp)
 800a2d8:	d8c00015 	stw	r3,0(sp)
 800a2dc:	dd011c15 	stw	r20,1136(sp)
 800a2e0:	d8811b15 	stw	r2,1132(sp)
 800a2e4:	a007883a 	mov	r3,r20
 800a2e8:	d811883a 	mov	r8,sp
 800a2ec:	42000204 	addi	r8,r8,8
 800a2f0:	9480010c 	andi	r18,r18,4
 800a2f4:	90003426 	beq	r18,zero,800a3c8 <___vfiprintf_internal_r+0xd88>
 800a2f8:	d9412417 	ldw	r5,1168(sp)
 800a2fc:	2d65c83a 	sub	r18,r5,r21
 800a300:	0480310e 	bge	zero,r18,800a3c8 <___vfiprintf_internal_r+0xd88>
 800a304:	04000404 	movi	r16,16
 800a308:	8481ad0e 	bge	r16,r18,800a9c0 <___vfiprintf_internal_r+0x1380>
 800a30c:	01420074 	movhi	r5,2049
 800a310:	29412e04 	addi	r5,r5,1208
 800a314:	d9011b17 	ldw	r4,1132(sp)
 800a318:	d9412615 	stw	r5,1176(sp)
 800a31c:	04c001c4 	movi	r19,7
 800a320:	dd012117 	ldw	r20,1156(sp)
 800a324:	dd812017 	ldw	r22,1152(sp)
 800a328:	00000506 	br	800a340 <___vfiprintf_internal_r+0xd00>
 800a32c:	21400084 	addi	r5,r4,2
 800a330:	42000204 	addi	r8,r8,8
 800a334:	1009883a 	mov	r4,r2
 800a338:	94bffc04 	addi	r18,r18,-16
 800a33c:	84800d0e 	bge	r16,r18,800a374 <___vfiprintf_internal_r+0xd34>
 800a340:	18c00404 	addi	r3,r3,16
 800a344:	20800044 	addi	r2,r4,1
 800a348:	47000015 	stw	fp,0(r8)
 800a34c:	44000115 	stw	r16,4(r8)
 800a350:	d8c11c15 	stw	r3,1136(sp)
 800a354:	d8811b15 	stw	r2,1132(sp)
 800a358:	98bff40e 	bge	r19,r2,800a32c <__alt_data_end+0xfc00a32c>
 800a35c:	1800291e 	bne	r3,zero,800a404 <___vfiprintf_internal_r+0xdc4>
 800a360:	94bffc04 	addi	r18,r18,-16
 800a364:	0009883a 	mov	r4,zero
 800a368:	01400044 	movi	r5,1
 800a36c:	d811883a 	mov	r8,sp
 800a370:	84bff316 	blt	r16,r18,800a340 <__alt_data_end+0xfc00a340>
 800a374:	d8812617 	ldw	r2,1176(sp)
 800a378:	1c87883a 	add	r3,r3,r18
 800a37c:	44800115 	stw	r18,4(r8)
 800a380:	40800015 	stw	r2,0(r8)
 800a384:	d8c11c15 	stw	r3,1136(sp)
 800a388:	d9411b15 	stw	r5,1132(sp)
 800a38c:	008001c4 	movi	r2,7
 800a390:	11400d0e 	bge	r2,r5,800a3c8 <___vfiprintf_internal_r+0xd88>
 800a394:	1800061e 	bne	r3,zero,800a3b0 <___vfiprintf_internal_r+0xd70>
 800a398:	d8c12417 	ldw	r3,1168(sp)
 800a39c:	a8c12e16 	blt	r21,r3,800a858 <___vfiprintf_internal_r+0x1218>
 800a3a0:	d9012517 	ldw	r4,1172(sp)
 800a3a4:	2549883a 	add	r4,r4,r21
 800a3a8:	d9012515 	stw	r4,1172(sp)
 800a3ac:	00001206 	br	800a3f8 <___vfiprintf_internal_r+0xdb8>
 800a3b0:	d9012117 	ldw	r4,1156(sp)
 800a3b4:	d9412017 	ldw	r5,1152(sp)
 800a3b8:	d9811a04 	addi	r6,sp,1128
 800a3bc:	800952c0 	call	800952c <__sprint_r.part.0>
 800a3c0:	103fbb1e 	bne	r2,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a3c4:	d8c11c17 	ldw	r3,1136(sp)
 800a3c8:	d8812417 	ldw	r2,1168(sp)
 800a3cc:	a880010e 	bge	r21,r2,800a3d4 <___vfiprintf_internal_r+0xd94>
 800a3d0:	102b883a 	mov	r21,r2
 800a3d4:	d9012517 	ldw	r4,1172(sp)
 800a3d8:	2549883a 	add	r4,r4,r21
 800a3dc:	d9012515 	stw	r4,1172(sp)
 800a3e0:	18000526 	beq	r3,zero,800a3f8 <___vfiprintf_internal_r+0xdb8>
 800a3e4:	d9012117 	ldw	r4,1156(sp)
 800a3e8:	d9412017 	ldw	r5,1152(sp)
 800a3ec:	d9811a04 	addi	r6,sp,1128
 800a3f0:	800952c0 	call	800952c <__sprint_r.part.0>
 800a3f4:	103fae1e 	bne	r2,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a3f8:	d8011b15 	stw	zero,1132(sp)
 800a3fc:	d811883a 	mov	r8,sp
 800a400:	003cc706 	br	8009720 <__alt_data_end+0xfc009720>
 800a404:	a009883a 	mov	r4,r20
 800a408:	b00b883a 	mov	r5,r22
 800a40c:	d9811a04 	addi	r6,sp,1128
 800a410:	800952c0 	call	800952c <__sprint_r.part.0>
 800a414:	103fa61e 	bne	r2,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a418:	d9011b17 	ldw	r4,1132(sp)
 800a41c:	d8c11c17 	ldw	r3,1136(sp)
 800a420:	d811883a 	mov	r8,sp
 800a424:	21400044 	addi	r5,r4,1
 800a428:	003fc306 	br	800a338 <__alt_data_end+0xfc00a338>
 800a42c:	d9012417 	ldw	r4,1168(sp)
 800a430:	256dc83a 	sub	r22,r4,r21
 800a434:	05be1f0e 	bge	zero,r22,8009cb4 <__alt_data_end+0xfc009cb4>
 800a438:	04c00404 	movi	r19,16
 800a43c:	9d81720e 	bge	r19,r22,800aa08 <___vfiprintf_internal_r+0x13c8>
 800a440:	00820074 	movhi	r2,2049
 800a444:	10812a04 	addi	r2,r2,1192
 800a448:	d8812615 	stw	r2,1176(sp)
 800a44c:	028001c4 	movi	r10,7
 800a450:	00000506 	br	800a468 <___vfiprintf_internal_r+0xe28>
 800a454:	29000084 	addi	r4,r5,2
 800a458:	42000204 	addi	r8,r8,8
 800a45c:	100b883a 	mov	r5,r2
 800a460:	b5bffc04 	addi	r22,r22,-16
 800a464:	9d800d0e 	bge	r19,r22,800a49c <___vfiprintf_internal_r+0xe5c>
 800a468:	18c00404 	addi	r3,r3,16
 800a46c:	28800044 	addi	r2,r5,1
 800a470:	44400015 	stw	r17,0(r8)
 800a474:	44c00115 	stw	r19,4(r8)
 800a478:	d8c11c15 	stw	r3,1136(sp)
 800a47c:	d8811b15 	stw	r2,1132(sp)
 800a480:	50bff40e 	bge	r10,r2,800a454 <__alt_data_end+0xfc00a454>
 800a484:	1800111e 	bne	r3,zero,800a4cc <___vfiprintf_internal_r+0xe8c>
 800a488:	b5bffc04 	addi	r22,r22,-16
 800a48c:	000b883a 	mov	r5,zero
 800a490:	01000044 	movi	r4,1
 800a494:	d811883a 	mov	r8,sp
 800a498:	9dbff316 	blt	r19,r22,800a468 <__alt_data_end+0xfc00a468>
 800a49c:	d9412617 	ldw	r5,1176(sp)
 800a4a0:	1d87883a 	add	r3,r3,r22
 800a4a4:	45800115 	stw	r22,4(r8)
 800a4a8:	41400015 	stw	r5,0(r8)
 800a4ac:	d8c11c15 	stw	r3,1136(sp)
 800a4b0:	d9011b15 	stw	r4,1132(sp)
 800a4b4:	008001c4 	movi	r2,7
 800a4b8:	11008516 	blt	r2,r4,800a6d0 <___vfiprintf_internal_r+0x1090>
 800a4bc:	42000204 	addi	r8,r8,8
 800a4c0:	20800044 	addi	r2,r4,1
 800a4c4:	200b883a 	mov	r5,r4
 800a4c8:	003dfa06 	br	8009cb4 <__alt_data_end+0xfc009cb4>
 800a4cc:	d9012117 	ldw	r4,1156(sp)
 800a4d0:	d9412017 	ldw	r5,1152(sp)
 800a4d4:	d9811a04 	addi	r6,sp,1128
 800a4d8:	da812a15 	stw	r10,1192(sp)
 800a4dc:	800952c0 	call	800952c <__sprint_r.part.0>
 800a4e0:	da812a17 	ldw	r10,1192(sp)
 800a4e4:	103f721e 	bne	r2,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a4e8:	d9411b17 	ldw	r5,1132(sp)
 800a4ec:	d8c11c17 	ldw	r3,1136(sp)
 800a4f0:	d811883a 	mov	r8,sp
 800a4f4:	29000044 	addi	r4,r5,1
 800a4f8:	003fd906 	br	800a460 <__alt_data_end+0xfc00a460>
 800a4fc:	1800681e 	bne	r3,zero,800a6a0 <___vfiprintf_internal_r+0x1060>
 800a500:	50004d26 	beq	r10,zero,800a638 <___vfiprintf_internal_r+0xff8>
 800a504:	d8811d04 	addi	r2,sp,1140
 800a508:	00c00084 	movi	r3,2
 800a50c:	d8800015 	stw	r2,0(sp)
 800a510:	d8c00115 	stw	r3,4(sp)
 800a514:	2005883a 	mov	r2,r4
 800a518:	d811883a 	mov	r8,sp
 800a51c:	003de006 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800a520:	1800551e 	bne	r3,zero,800a678 <___vfiprintf_internal_r+0x1038>
 800a524:	000b883a 	mov	r5,zero
 800a528:	00800044 	movi	r2,1
 800a52c:	d811883a 	mov	r8,sp
 800a530:	003dde06 	br	8009cac <__alt_data_end+0xfc009cac>
 800a534:	10803fcc 	andi	r2,r2,255
 800a538:	1000191e 	bne	r2,zero,800a5a0 <___vfiprintf_internal_r+0xf60>
 800a53c:	9080004c 	andi	r2,r18,1
 800a540:	10001726 	beq	r2,zero,800a5a0 <___vfiprintf_internal_r+0xf60>
 800a544:	00800c04 	movi	r2,48
 800a548:	d8c109c4 	addi	r3,sp,1063
 800a54c:	d88109c5 	stb	r2,1063(sp)
 800a550:	dd012817 	ldw	r20,1184(sp)
 800a554:	d8c12215 	stw	r3,1160(sp)
 800a558:	003d8a06 	br	8009b84 <__alt_data_end+0xfc009b84>
 800a55c:	d9012717 	ldw	r4,1180(sp)
 800a560:	dd010a04 	addi	r20,sp,1064
 800a564:	988003cc 	andi	r2,r19,15
 800a568:	a806973a 	slli	r3,r21,28
 800a56c:	2085883a 	add	r2,r4,r2
 800a570:	9826d13a 	srli	r19,r19,4
 800a574:	10800003 	ldbu	r2,0(r2)
 800a578:	a82ad13a 	srli	r21,r21,4
 800a57c:	a53fffc4 	addi	r20,r20,-1
 800a580:	1ce6b03a 	or	r19,r3,r19
 800a584:	a0800005 	stb	r2,0(r20)
 800a588:	9d44b03a 	or	r2,r19,r21
 800a58c:	103ff51e 	bne	r2,zero,800a564 <__alt_data_end+0xfc00a564>
 800a590:	d9411e17 	ldw	r5,1144(sp)
 800a594:	dd012215 	stw	r20,1160(sp)
 800a598:	2d29c83a 	sub	r20,r5,r20
 800a59c:	003d7906 	br	8009b84 <__alt_data_end+0xfc009b84>
 800a5a0:	d8c10a04 	addi	r3,sp,1064
 800a5a4:	d8c12215 	stw	r3,1160(sp)
 800a5a8:	003d7606 	br	8009b84 <__alt_data_end+0xfc009b84>
 800a5ac:	18009e1e 	bne	r3,zero,800a828 <___vfiprintf_internal_r+0x11e8>
 800a5b0:	d8811d87 	ldb	r2,1142(sp)
 800a5b4:	10005f26 	beq	r2,zero,800a734 <___vfiprintf_internal_r+0x10f4>
 800a5b8:	00c00044 	movi	r3,1
 800a5bc:	d9011d84 	addi	r4,sp,1142
 800a5c0:	1805883a 	mov	r2,r3
 800a5c4:	d9000015 	stw	r4,0(sp)
 800a5c8:	d8c00115 	stw	r3,4(sp)
 800a5cc:	d811883a 	mov	r8,sp
 800a5d0:	003efc06 	br	800a1c4 <__alt_data_end+0xfc00a1c4>
 800a5d4:	d9412417 	ldw	r5,1168(sp)
 800a5d8:	d811883a 	mov	r8,sp
 800a5dc:	2d65c83a 	sub	r18,r5,r21
 800a5e0:	04bf4816 	blt	zero,r18,800a304 <__alt_data_end+0xfc00a304>
 800a5e4:	003f6c06 	br	800a398 <__alt_data_end+0xfc00a398>
 800a5e8:	b829883a 	mov	r20,r23
 800a5ec:	003c6906 	br	8009794 <__alt_data_end+0xfc009794>
 800a5f0:	d9012117 	ldw	r4,1156(sp)
 800a5f4:	d9412017 	ldw	r5,1152(sp)
 800a5f8:	d9811a04 	addi	r6,sp,1128
 800a5fc:	800952c0 	call	800952c <__sprint_r.part.0>
 800a600:	103f2b1e 	bne	r2,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a604:	d8c11c17 	ldw	r3,1136(sp)
 800a608:	d811883a 	mov	r8,sp
 800a60c:	003f3806 	br	800a2f0 <__alt_data_end+0xfc00a2f0>
 800a610:	00800084 	movi	r2,2
 800a614:	9d46b03a 	or	r3,r19,r21
 800a618:	003df606 	br	8009df4 <__alt_data_end+0xfc009df4>
 800a61c:	d9012117 	ldw	r4,1156(sp)
 800a620:	d9412017 	ldw	r5,1152(sp)
 800a624:	d9811a04 	addi	r6,sp,1128
 800a628:	800952c0 	call	800952c <__sprint_r.part.0>
 800a62c:	103f201e 	bne	r2,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a630:	d811883a 	mov	r8,sp
 800a634:	003cc606 	br	8009950 <__alt_data_end+0xfc009950>
 800a638:	000b883a 	mov	r5,zero
 800a63c:	2005883a 	mov	r2,r4
 800a640:	d811883a 	mov	r8,sp
 800a644:	003d9906 	br	8009cac <__alt_data_end+0xfc009cac>
 800a648:	10803fcc 	andi	r2,r2,255
 800a64c:	1080201c 	xori	r2,r2,128
 800a650:	10bfe004 	addi	r2,r2,-128
 800a654:	01000c04 	movi	r4,48
 800a658:	1100b226 	beq	r2,r4,800a924 <___vfiprintf_internal_r+0x12e4>
 800a65c:	d9412217 	ldw	r5,1160(sp)
 800a660:	d8811e17 	ldw	r2,1144(sp)
 800a664:	193fffc5 	stb	r4,-1(r3)
 800a668:	297fffc4 	addi	r5,r5,-1
 800a66c:	d9412215 	stw	r5,1160(sp)
 800a670:	1169c83a 	sub	r20,r2,r5
 800a674:	003d4306 	br	8009b84 <__alt_data_end+0xfc009b84>
 800a678:	d9012117 	ldw	r4,1156(sp)
 800a67c:	d9412017 	ldw	r5,1152(sp)
 800a680:	d9811a04 	addi	r6,sp,1128
 800a684:	800952c0 	call	800952c <__sprint_r.part.0>
 800a688:	103f091e 	bne	r2,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a68c:	d9411b17 	ldw	r5,1132(sp)
 800a690:	d8c11c17 	ldw	r3,1136(sp)
 800a694:	d811883a 	mov	r8,sp
 800a698:	28800044 	addi	r2,r5,1
 800a69c:	003d8306 	br	8009cac <__alt_data_end+0xfc009cac>
 800a6a0:	d9012117 	ldw	r4,1156(sp)
 800a6a4:	d9412017 	ldw	r5,1152(sp)
 800a6a8:	d9811a04 	addi	r6,sp,1128
 800a6ac:	da812a15 	stw	r10,1192(sp)
 800a6b0:	800952c0 	call	800952c <__sprint_r.part.0>
 800a6b4:	da812a17 	ldw	r10,1192(sp)
 800a6b8:	103efd1e 	bne	r2,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a6bc:	d9411b17 	ldw	r5,1132(sp)
 800a6c0:	d8c11c17 	ldw	r3,1136(sp)
 800a6c4:	d811883a 	mov	r8,sp
 800a6c8:	28800044 	addi	r2,r5,1
 800a6cc:	003d6a06 	br	8009c78 <__alt_data_end+0xfc009c78>
 800a6d0:	1800a01e 	bne	r3,zero,800a954 <___vfiprintf_internal_r+0x1314>
 800a6d4:	000b883a 	mov	r5,zero
 800a6d8:	00800044 	movi	r2,1
 800a6dc:	d811883a 	mov	r8,sp
 800a6e0:	003d7406 	br	8009cb4 <__alt_data_end+0xfc009cb4>
 800a6e4:	d9012117 	ldw	r4,1156(sp)
 800a6e8:	d9412017 	ldw	r5,1152(sp)
 800a6ec:	d9811a04 	addi	r6,sp,1128
 800a6f0:	800952c0 	call	800952c <__sprint_r.part.0>
 800a6f4:	103eee1e 	bne	r2,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a6f8:	d8811b17 	ldw	r2,1132(sp)
 800a6fc:	d8c11c17 	ldw	r3,1136(sp)
 800a700:	d811883a 	mov	r8,sp
 800a704:	10800044 	addi	r2,r2,1
 800a708:	003d8f06 	br	8009d48 <__alt_data_end+0xfc009d48>
 800a70c:	04e7c83a 	sub	r19,zero,r19
 800a710:	9804c03a 	cmpne	r2,r19,zero
 800a714:	056bc83a 	sub	r21,zero,r21
 800a718:	a8abc83a 	sub	r21,r21,r2
 800a71c:	05800b44 	movi	r22,45
 800a720:	dd811d85 	stb	r22,1142(sp)
 800a724:	8029883a 	mov	r20,r16
 800a728:	00800044 	movi	r2,1
 800a72c:	9d46b03a 	or	r3,r19,r21
 800a730:	003cfa06 	br	8009b1c <__alt_data_end+0xfc009b1c>
 800a734:	000b883a 	mov	r5,zero
 800a738:	00800044 	movi	r2,1
 800a73c:	d811883a 	mov	r8,sp
 800a740:	503d5a26 	beq	r10,zero,8009cac <__alt_data_end+0xfc009cac>
 800a744:	00c00084 	movi	r3,2
 800a748:	d9011d04 	addi	r4,sp,1140
 800a74c:	d9000015 	stw	r4,0(sp)
 800a750:	d8c00115 	stw	r3,4(sp)
 800a754:	003d5206 	br	8009ca0 <__alt_data_end+0xfc009ca0>
 800a758:	9080040c 	andi	r2,r18,16
 800a75c:	1000421e 	bne	r2,zero,800a868 <___vfiprintf_internal_r+0x1228>
 800a760:	9480100c 	andi	r18,r18,64
 800a764:	90009c26 	beq	r18,zero,800a9d8 <___vfiprintf_internal_r+0x1398>
 800a768:	d9412317 	ldw	r5,1164(sp)
 800a76c:	d8c12517 	ldw	r3,1172(sp)
 800a770:	28800017 	ldw	r2,0(r5)
 800a774:	29400104 	addi	r5,r5,4
 800a778:	d9412315 	stw	r5,1164(sp)
 800a77c:	10c0000d 	sth	r3,0(r2)
 800a780:	003be706 	br	8009720 <__alt_data_end+0xfc009720>
 800a784:	90c0100c 	andi	r3,r18,64
 800a788:	18003e26 	beq	r3,zero,800a884 <___vfiprintf_internal_r+0x1244>
 800a78c:	d8c12317 	ldw	r3,1164(sp)
 800a790:	14c0000b 	ldhu	r19,0(r2)
 800a794:	002b883a 	mov	r21,zero
 800a798:	18c00104 	addi	r3,r3,4
 800a79c:	d8c12315 	stw	r3,1164(sp)
 800a7a0:	003db706 	br	8009e80 <__alt_data_end+0xfc009e80>
 800a7a4:	9080100c 	andi	r2,r18,64
 800a7a8:	10004c26 	beq	r2,zero,800a8dc <___vfiprintf_internal_r+0x129c>
 800a7ac:	1cc0000f 	ldh	r19,0(r3)
 800a7b0:	d8812317 	ldw	r2,1164(sp)
 800a7b4:	982bd7fa 	srai	r21,r19,31
 800a7b8:	10800104 	addi	r2,r2,4
 800a7bc:	d8812315 	stw	r2,1164(sp)
 800a7c0:	a805883a 	mov	r2,r21
 800a7c4:	003cd006 	br	8009b08 <__alt_data_end+0xfc009b08>
 800a7c8:	00800084 	movi	r2,2
 800a7cc:	003d8906 	br	8009df4 <__alt_data_end+0xfc009df4>
 800a7d0:	b9800007 	ldb	r6,0(r23)
 800a7d4:	003bfb06 	br	80097c4 <__alt_data_end+0xfc0097c4>
 800a7d8:	9080100c 	andi	r2,r18,64
 800a7dc:	10003726 	beq	r2,zero,800a8bc <___vfiprintf_internal_r+0x127c>
 800a7e0:	d9412317 	ldw	r5,1164(sp)
 800a7e4:	002b883a 	mov	r21,zero
 800a7e8:	0005883a 	mov	r2,zero
 800a7ec:	2cc0000b 	ldhu	r19,0(r5)
 800a7f0:	29400104 	addi	r5,r5,4
 800a7f4:	d9412315 	stw	r5,1164(sp)
 800a7f8:	9807883a 	mov	r3,r19
 800a7fc:	003d7d06 	br	8009df4 <__alt_data_end+0xfc009df4>
 800a800:	9080100c 	andi	r2,r18,64
 800a804:	10002526 	beq	r2,zero,800a89c <___vfiprintf_internal_r+0x125c>
 800a808:	d8812317 	ldw	r2,1164(sp)
 800a80c:	002b883a 	mov	r21,zero
 800a810:	14c0000b 	ldhu	r19,0(r2)
 800a814:	10800104 	addi	r2,r2,4
 800a818:	d8812315 	stw	r2,1164(sp)
 800a81c:	9807883a 	mov	r3,r19
 800a820:	00800044 	movi	r2,1
 800a824:	003d7306 	br	8009df4 <__alt_data_end+0xfc009df4>
 800a828:	d9012117 	ldw	r4,1156(sp)
 800a82c:	d9412017 	ldw	r5,1152(sp)
 800a830:	d9811a04 	addi	r6,sp,1128
 800a834:	da812a15 	stw	r10,1192(sp)
 800a838:	800952c0 	call	800952c <__sprint_r.part.0>
 800a83c:	da812a17 	ldw	r10,1192(sp)
 800a840:	103e9b1e 	bne	r2,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a844:	d9411b17 	ldw	r5,1132(sp)
 800a848:	d8c11c17 	ldw	r3,1136(sp)
 800a84c:	d811883a 	mov	r8,sp
 800a850:	28800044 	addi	r2,r5,1
 800a854:	003e5006 	br	800a198 <__alt_data_end+0xfc00a198>
 800a858:	182b883a 	mov	r21,r3
 800a85c:	003ed006 	br	800a3a0 <__alt_data_end+0xfc00a3a0>
 800a860:	8029883a 	mov	r20,r16
 800a864:	003dc606 	br	8009f80 <__alt_data_end+0xfc009f80>
 800a868:	d8c12317 	ldw	r3,1164(sp)
 800a86c:	d9012517 	ldw	r4,1172(sp)
 800a870:	18800017 	ldw	r2,0(r3)
 800a874:	18c00104 	addi	r3,r3,4
 800a878:	d8c12315 	stw	r3,1164(sp)
 800a87c:	11000015 	stw	r4,0(r2)
 800a880:	003ba706 	br	8009720 <__alt_data_end+0xfc009720>
 800a884:	d9012317 	ldw	r4,1164(sp)
 800a888:	14c00017 	ldw	r19,0(r2)
 800a88c:	002b883a 	mov	r21,zero
 800a890:	21000104 	addi	r4,r4,4
 800a894:	d9012315 	stw	r4,1164(sp)
 800a898:	003d7906 	br	8009e80 <__alt_data_end+0xfc009e80>
 800a89c:	d8c12317 	ldw	r3,1164(sp)
 800a8a0:	002b883a 	mov	r21,zero
 800a8a4:	00800044 	movi	r2,1
 800a8a8:	1cc00017 	ldw	r19,0(r3)
 800a8ac:	18c00104 	addi	r3,r3,4
 800a8b0:	d8c12315 	stw	r3,1164(sp)
 800a8b4:	9807883a 	mov	r3,r19
 800a8b8:	003d4e06 	br	8009df4 <__alt_data_end+0xfc009df4>
 800a8bc:	d8812317 	ldw	r2,1164(sp)
 800a8c0:	002b883a 	mov	r21,zero
 800a8c4:	14c00017 	ldw	r19,0(r2)
 800a8c8:	10800104 	addi	r2,r2,4
 800a8cc:	d8812315 	stw	r2,1164(sp)
 800a8d0:	9807883a 	mov	r3,r19
 800a8d4:	0005883a 	mov	r2,zero
 800a8d8:	003d4606 	br	8009df4 <__alt_data_end+0xfc009df4>
 800a8dc:	1cc00017 	ldw	r19,0(r3)
 800a8e0:	d8c12317 	ldw	r3,1164(sp)
 800a8e4:	982bd7fa 	srai	r21,r19,31
 800a8e8:	18c00104 	addi	r3,r3,4
 800a8ec:	d8c12315 	stw	r3,1164(sp)
 800a8f0:	a805883a 	mov	r2,r21
 800a8f4:	003c8406 	br	8009b08 <__alt_data_end+0xfc009b08>
 800a8f8:	01020074 	movhi	r4,2049
 800a8fc:	21012a04 	addi	r4,r4,1192
 800a900:	d9012615 	stw	r4,1176(sp)
 800a904:	003d0606 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a908:	b9800043 	ldbu	r6,1(r23)
 800a90c:	94800814 	ori	r18,r18,32
 800a910:	bdc00044 	addi	r23,r23,1
 800a914:	31803fcc 	andi	r6,r6,255
 800a918:	3180201c 	xori	r6,r6,128
 800a91c:	31bfe004 	addi	r6,r6,-128
 800a920:	003ba806 	br	80097c4 <__alt_data_end+0xfc0097c4>
 800a924:	d8811e17 	ldw	r2,1144(sp)
 800a928:	d8c12217 	ldw	r3,1160(sp)
 800a92c:	10e9c83a 	sub	r20,r2,r3
 800a930:	003c9406 	br	8009b84 <__alt_data_end+0xfc009b84>
 800a934:	da012a15 	stw	r8,1192(sp)
 800a938:	80021500 	call	8002150 <strlen>
 800a93c:	1029883a 	mov	r20,r2
 800a940:	dd811d83 	ldbu	r22,1142(sp)
 800a944:	dcc12315 	stw	r19,1164(sp)
 800a948:	0021883a 	mov	r16,zero
 800a94c:	da012a17 	ldw	r8,1192(sp)
 800a950:	003c8c06 	br	8009b84 <__alt_data_end+0xfc009b84>
 800a954:	d9012117 	ldw	r4,1156(sp)
 800a958:	d9412017 	ldw	r5,1152(sp)
 800a95c:	d9811a04 	addi	r6,sp,1128
 800a960:	800952c0 	call	800952c <__sprint_r.part.0>
 800a964:	103e521e 	bne	r2,zero,800a2b0 <__alt_data_end+0xfc00a2b0>
 800a968:	d9411b17 	ldw	r5,1132(sp)
 800a96c:	d8c11c17 	ldw	r3,1136(sp)
 800a970:	d811883a 	mov	r8,sp
 800a974:	28800044 	addi	r2,r5,1
 800a978:	003cce06 	br	8009cb4 <__alt_data_end+0xfc009cb4>
 800a97c:	01420074 	movhi	r5,2049
 800a980:	29412e04 	addi	r5,r5,1208
 800a984:	d9412615 	stw	r5,1176(sp)
 800a988:	d9411b17 	ldw	r5,1132(sp)
 800a98c:	29400044 	addi	r5,r5,1
 800a990:	003cad06 	br	8009c48 <__alt_data_end+0xfc009c48>
 800a994:	00800184 	movi	r2,6
 800a998:	1400012e 	bgeu	r2,r16,800a9a0 <___vfiprintf_internal_r+0x1360>
 800a99c:	1021883a 	mov	r16,r2
 800a9a0:	8029883a 	mov	r20,r16
 800a9a4:	802b883a 	mov	r21,r16
 800a9a8:	80001c16 	blt	r16,zero,800aa1c <___vfiprintf_internal_r+0x13dc>
 800a9ac:	00c20074 	movhi	r3,2049
 800a9b0:	18c0ce04 	addi	r3,r3,824
 800a9b4:	dcc12315 	stw	r19,1164(sp)
 800a9b8:	d8c12215 	stw	r3,1160(sp)
 800a9bc:	003cff06 	br	8009dbc <__alt_data_end+0xfc009dbc>
 800a9c0:	d9411b17 	ldw	r5,1132(sp)
 800a9c4:	00820074 	movhi	r2,2049
 800a9c8:	10812e04 	addi	r2,r2,1208
 800a9cc:	d8812615 	stw	r2,1176(sp)
 800a9d0:	29400044 	addi	r5,r5,1
 800a9d4:	003e6706 	br	800a374 <__alt_data_end+0xfc00a374>
 800a9d8:	d9012317 	ldw	r4,1164(sp)
 800a9dc:	d9412517 	ldw	r5,1172(sp)
 800a9e0:	20800017 	ldw	r2,0(r4)
 800a9e4:	21000104 	addi	r4,r4,4
 800a9e8:	d9012315 	stw	r4,1164(sp)
 800a9ec:	11400015 	stw	r5,0(r2)
 800a9f0:	003b4b06 	br	8009720 <__alt_data_end+0xfc009720>
 800a9f4:	8029883a 	mov	r20,r16
 800a9f8:	dd811d83 	ldbu	r22,1142(sp)
 800a9fc:	dcc12315 	stw	r19,1164(sp)
 800aa00:	0021883a 	mov	r16,zero
 800aa04:	003c5f06 	br	8009b84 <__alt_data_end+0xfc009b84>
 800aa08:	01020074 	movhi	r4,2049
 800aa0c:	21012a04 	addi	r4,r4,1192
 800aa10:	d9012615 	stw	r4,1176(sp)
 800aa14:	1009883a 	mov	r4,r2
 800aa18:	003ea006 	br	800a49c <__alt_data_end+0xfc00a49c>
 800aa1c:	002b883a 	mov	r21,zero
 800aa20:	003fe206 	br	800a9ac <__alt_data_end+0xfc00a9ac>
 800aa24:	d9412317 	ldw	r5,1164(sp)
 800aa28:	b807883a 	mov	r3,r23
 800aa2c:	102f883a 	mov	r23,r2
 800aa30:	2c000017 	ldw	r16,0(r5)
 800aa34:	29000104 	addi	r4,r5,4
 800aa38:	d9012315 	stw	r4,1164(sp)
 800aa3c:	80000416 	blt	r16,zero,800aa50 <___vfiprintf_internal_r+0x1410>
 800aa40:	19800047 	ldb	r6,1(r3)
 800aa44:	003b5f06 	br	80097c4 <__alt_data_end+0xfc0097c4>
 800aa48:	043fffc4 	movi	r16,-1
 800aa4c:	003bef06 	br	8009a0c <__alt_data_end+0xfc009a0c>
 800aa50:	043fffc4 	movi	r16,-1
 800aa54:	19800047 	ldb	r6,1(r3)
 800aa58:	003b5a06 	br	80097c4 <__alt_data_end+0xfc0097c4>
 800aa5c:	282b883a 	mov	r21,r5
 800aa60:	003cc706 	br	8009d80 <__alt_data_end+0xfc009d80>

0800aa64 <__vfiprintf_internal>:
 800aa64:	2007883a 	mov	r3,r4
 800aa68:	01020074 	movhi	r4,2049
 800aa6c:	2107fc04 	addi	r4,r4,8176
 800aa70:	21000017 	ldw	r4,0(r4)
 800aa74:	2805883a 	mov	r2,r5
 800aa78:	300f883a 	mov	r7,r6
 800aa7c:	180b883a 	mov	r5,r3
 800aa80:	100d883a 	mov	r6,r2
 800aa84:	80096401 	jmpi	8009640 <___vfiprintf_internal_r>

0800aa88 <_write_r>:
 800aa88:	defffd04 	addi	sp,sp,-12
 800aa8c:	dc000015 	stw	r16,0(sp)
 800aa90:	04020074 	movhi	r16,2049
 800aa94:	dc400115 	stw	r17,4(sp)
 800aa98:	840ed704 	addi	r16,r16,15196
 800aa9c:	2023883a 	mov	r17,r4
 800aaa0:	2809883a 	mov	r4,r5
 800aaa4:	300b883a 	mov	r5,r6
 800aaa8:	380d883a 	mov	r6,r7
 800aaac:	dfc00215 	stw	ra,8(sp)
 800aab0:	80000015 	stw	zero,0(r16)
 800aab4:	800dda40 	call	800dda4 <write>
 800aab8:	00ffffc4 	movi	r3,-1
 800aabc:	10c00526 	beq	r2,r3,800aad4 <_write_r+0x4c>
 800aac0:	dfc00217 	ldw	ra,8(sp)
 800aac4:	dc400117 	ldw	r17,4(sp)
 800aac8:	dc000017 	ldw	r16,0(sp)
 800aacc:	dec00304 	addi	sp,sp,12
 800aad0:	f800283a 	ret
 800aad4:	80c00017 	ldw	r3,0(r16)
 800aad8:	183ff926 	beq	r3,zero,800aac0 <__alt_data_end+0xfc00aac0>
 800aadc:	88c00015 	stw	r3,0(r17)
 800aae0:	003ff706 	br	800aac0 <__alt_data_end+0xfc00aac0>

0800aae4 <_close_r>:
 800aae4:	defffd04 	addi	sp,sp,-12
 800aae8:	dc000015 	stw	r16,0(sp)
 800aaec:	04020074 	movhi	r16,2049
 800aaf0:	dc400115 	stw	r17,4(sp)
 800aaf4:	840ed704 	addi	r16,r16,15196
 800aaf8:	2023883a 	mov	r17,r4
 800aafc:	2809883a 	mov	r4,r5
 800ab00:	dfc00215 	stw	ra,8(sp)
 800ab04:	80000015 	stw	zero,0(r16)
 800ab08:	800d5000 	call	800d500 <close>
 800ab0c:	00ffffc4 	movi	r3,-1
 800ab10:	10c00526 	beq	r2,r3,800ab28 <_close_r+0x44>
 800ab14:	dfc00217 	ldw	ra,8(sp)
 800ab18:	dc400117 	ldw	r17,4(sp)
 800ab1c:	dc000017 	ldw	r16,0(sp)
 800ab20:	dec00304 	addi	sp,sp,12
 800ab24:	f800283a 	ret
 800ab28:	80c00017 	ldw	r3,0(r16)
 800ab2c:	183ff926 	beq	r3,zero,800ab14 <__alt_data_end+0xfc00ab14>
 800ab30:	88c00015 	stw	r3,0(r17)
 800ab34:	003ff706 	br	800ab14 <__alt_data_end+0xfc00ab14>

0800ab38 <_calloc_r>:
 800ab38:	defffe04 	addi	sp,sp,-8
 800ab3c:	dc000015 	stw	r16,0(sp)
 800ab40:	2021883a 	mov	r16,r4
 800ab44:	2809883a 	mov	r4,r5
 800ab48:	300b883a 	mov	r5,r6
 800ab4c:	dfc00115 	stw	ra,4(sp)
 800ab50:	8001ff40 	call	8001ff4 <__mulsi3>
 800ab54:	8009883a 	mov	r4,r16
 800ab58:	100b883a 	mov	r5,r2
 800ab5c:	80070540 	call	8007054 <_malloc_r>
 800ab60:	1021883a 	mov	r16,r2
 800ab64:	10002826 	beq	r2,zero,800ac08 <_calloc_r+0xd0>
 800ab68:	11bfff17 	ldw	r6,-4(r2)
 800ab6c:	00bfff04 	movi	r2,-4
 800ab70:	00c00904 	movi	r3,36
 800ab74:	308c703a 	and	r6,r6,r2
 800ab78:	308d883a 	add	r6,r6,r2
 800ab7c:	19801436 	bltu	r3,r6,800abd0 <_calloc_r+0x98>
 800ab80:	008004c4 	movi	r2,19
 800ab84:	11800936 	bltu	r2,r6,800abac <_calloc_r+0x74>
 800ab88:	8005883a 	mov	r2,r16
 800ab8c:	10000015 	stw	zero,0(r2)
 800ab90:	10000115 	stw	zero,4(r2)
 800ab94:	10000215 	stw	zero,8(r2)
 800ab98:	8005883a 	mov	r2,r16
 800ab9c:	dfc00117 	ldw	ra,4(sp)
 800aba0:	dc000017 	ldw	r16,0(sp)
 800aba4:	dec00204 	addi	sp,sp,8
 800aba8:	f800283a 	ret
 800abac:	80000015 	stw	zero,0(r16)
 800abb0:	80000115 	stw	zero,4(r16)
 800abb4:	008006c4 	movi	r2,27
 800abb8:	11800d2e 	bgeu	r2,r6,800abf0 <_calloc_r+0xb8>
 800abbc:	80000215 	stw	zero,8(r16)
 800abc0:	80000315 	stw	zero,12(r16)
 800abc4:	30c00c26 	beq	r6,r3,800abf8 <_calloc_r+0xc0>
 800abc8:	80800404 	addi	r2,r16,16
 800abcc:	003fef06 	br	800ab8c <__alt_data_end+0xfc00ab8c>
 800abd0:	8009883a 	mov	r4,r16
 800abd4:	000b883a 	mov	r5,zero
 800abd8:	8007b780 	call	8007b78 <memset>
 800abdc:	8005883a 	mov	r2,r16
 800abe0:	dfc00117 	ldw	ra,4(sp)
 800abe4:	dc000017 	ldw	r16,0(sp)
 800abe8:	dec00204 	addi	sp,sp,8
 800abec:	f800283a 	ret
 800abf0:	80800204 	addi	r2,r16,8
 800abf4:	003fe506 	br	800ab8c <__alt_data_end+0xfc00ab8c>
 800abf8:	80000415 	stw	zero,16(r16)
 800abfc:	80800604 	addi	r2,r16,24
 800ac00:	80000515 	stw	zero,20(r16)
 800ac04:	003fe106 	br	800ab8c <__alt_data_end+0xfc00ab8c>
 800ac08:	0005883a 	mov	r2,zero
 800ac0c:	003fe306 	br	800ab9c <__alt_data_end+0xfc00ab9c>

0800ac10 <_fclose_r>:
 800ac10:	28003226 	beq	r5,zero,800acdc <_fclose_r+0xcc>
 800ac14:	defffc04 	addi	sp,sp,-16
 800ac18:	dc400115 	stw	r17,4(sp)
 800ac1c:	2023883a 	mov	r17,r4
 800ac20:	dc000015 	stw	r16,0(sp)
 800ac24:	dfc00315 	stw	ra,12(sp)
 800ac28:	dc800215 	stw	r18,8(sp)
 800ac2c:	2821883a 	mov	r16,r5
 800ac30:	80063540 	call	8006354 <__sfp_lock_acquire>
 800ac34:	88000226 	beq	r17,zero,800ac40 <_fclose_r+0x30>
 800ac38:	88800e17 	ldw	r2,56(r17)
 800ac3c:	10002926 	beq	r2,zero,800ace4 <_fclose_r+0xd4>
 800ac40:	8080030f 	ldh	r2,12(r16)
 800ac44:	10002226 	beq	r2,zero,800acd0 <_fclose_r+0xc0>
 800ac48:	8809883a 	mov	r4,r17
 800ac4c:	800b883a 	mov	r5,r16
 800ac50:	8005d880 	call	8005d88 <_fflush_r>
 800ac54:	1025883a 	mov	r18,r2
 800ac58:	80800b17 	ldw	r2,44(r16)
 800ac5c:	10000426 	beq	r2,zero,800ac70 <_fclose_r+0x60>
 800ac60:	81400717 	ldw	r5,28(r16)
 800ac64:	8809883a 	mov	r4,r17
 800ac68:	103ee83a 	callr	r2
 800ac6c:	10002616 	blt	r2,zero,800ad08 <_fclose_r+0xf8>
 800ac70:	8080030b 	ldhu	r2,12(r16)
 800ac74:	1080200c 	andi	r2,r2,128
 800ac78:	10001f1e 	bne	r2,zero,800acf8 <_fclose_r+0xe8>
 800ac7c:	81400c17 	ldw	r5,48(r16)
 800ac80:	28000526 	beq	r5,zero,800ac98 <_fclose_r+0x88>
 800ac84:	80801004 	addi	r2,r16,64
 800ac88:	28800226 	beq	r5,r2,800ac94 <_fclose_r+0x84>
 800ac8c:	8809883a 	mov	r4,r17
 800ac90:	80064b80 	call	80064b8 <_free_r>
 800ac94:	80000c15 	stw	zero,48(r16)
 800ac98:	81401117 	ldw	r5,68(r16)
 800ac9c:	28000326 	beq	r5,zero,800acac <_fclose_r+0x9c>
 800aca0:	8809883a 	mov	r4,r17
 800aca4:	80064b80 	call	80064b8 <_free_r>
 800aca8:	80001115 	stw	zero,68(r16)
 800acac:	8000030d 	sth	zero,12(r16)
 800acb0:	80063580 	call	8006358 <__sfp_lock_release>
 800acb4:	9005883a 	mov	r2,r18
 800acb8:	dfc00317 	ldw	ra,12(sp)
 800acbc:	dc800217 	ldw	r18,8(sp)
 800acc0:	dc400117 	ldw	r17,4(sp)
 800acc4:	dc000017 	ldw	r16,0(sp)
 800acc8:	dec00404 	addi	sp,sp,16
 800accc:	f800283a 	ret
 800acd0:	80063580 	call	8006358 <__sfp_lock_release>
 800acd4:	0005883a 	mov	r2,zero
 800acd8:	003ff706 	br	800acb8 <__alt_data_end+0xfc00acb8>
 800acdc:	0005883a 	mov	r2,zero
 800ace0:	f800283a 	ret
 800ace4:	8809883a 	mov	r4,r17
 800ace8:	80063440 	call	8006344 <__sinit>
 800acec:	8080030f 	ldh	r2,12(r16)
 800acf0:	103fd51e 	bne	r2,zero,800ac48 <__alt_data_end+0xfc00ac48>
 800acf4:	003ff606 	br	800acd0 <__alt_data_end+0xfc00acd0>
 800acf8:	81400417 	ldw	r5,16(r16)
 800acfc:	8809883a 	mov	r4,r17
 800ad00:	80064b80 	call	80064b8 <_free_r>
 800ad04:	003fdd06 	br	800ac7c <__alt_data_end+0xfc00ac7c>
 800ad08:	04bfffc4 	movi	r18,-1
 800ad0c:	003fd806 	br	800ac70 <__alt_data_end+0xfc00ac70>

0800ad10 <fclose>:
 800ad10:	00820074 	movhi	r2,2049
 800ad14:	1087fc04 	addi	r2,r2,8176
 800ad18:	200b883a 	mov	r5,r4
 800ad1c:	11000017 	ldw	r4,0(r2)
 800ad20:	800ac101 	jmpi	800ac10 <_fclose_r>

0800ad24 <_fputwc_r>:
 800ad24:	3080030b 	ldhu	r2,12(r6)
 800ad28:	defff804 	addi	sp,sp,-32
 800ad2c:	dcc00415 	stw	r19,16(sp)
 800ad30:	dc800315 	stw	r18,12(sp)
 800ad34:	dc000115 	stw	r16,4(sp)
 800ad38:	dfc00715 	stw	ra,28(sp)
 800ad3c:	dd400615 	stw	r21,24(sp)
 800ad40:	dd000515 	stw	r20,20(sp)
 800ad44:	dc400215 	stw	r17,8(sp)
 800ad48:	10c8000c 	andi	r3,r2,8192
 800ad4c:	3021883a 	mov	r16,r6
 800ad50:	2027883a 	mov	r19,r4
 800ad54:	2825883a 	mov	r18,r5
 800ad58:	1800051e 	bne	r3,zero,800ad70 <_fputwc_r+0x4c>
 800ad5c:	30c01917 	ldw	r3,100(r6)
 800ad60:	10880014 	ori	r2,r2,8192
 800ad64:	3080030d 	sth	r2,12(r6)
 800ad68:	18880014 	ori	r2,r3,8192
 800ad6c:	30801915 	stw	r2,100(r6)
 800ad70:	8006e440 	call	8006e44 <__locale_mb_cur_max>
 800ad74:	00c00044 	movi	r3,1
 800ad78:	10c03e26 	beq	r2,r3,800ae74 <_fputwc_r+0x150>
 800ad7c:	9809883a 	mov	r4,r19
 800ad80:	d80b883a 	mov	r5,sp
 800ad84:	900d883a 	mov	r6,r18
 800ad88:	81c01704 	addi	r7,r16,92
 800ad8c:	800b1d40 	call	800b1d4 <_wcrtomb_r>
 800ad90:	1029883a 	mov	r20,r2
 800ad94:	00bfffc4 	movi	r2,-1
 800ad98:	a0802026 	beq	r20,r2,800ae1c <_fputwc_r+0xf8>
 800ad9c:	d9400003 	ldbu	r5,0(sp)
 800ada0:	a0001c26 	beq	r20,zero,800ae14 <_fputwc_r+0xf0>
 800ada4:	0023883a 	mov	r17,zero
 800ada8:	05400284 	movi	r21,10
 800adac:	00000906 	br	800add4 <_fputwc_r+0xb0>
 800adb0:	80800017 	ldw	r2,0(r16)
 800adb4:	11400005 	stb	r5,0(r2)
 800adb8:	80c00017 	ldw	r3,0(r16)
 800adbc:	18c00044 	addi	r3,r3,1
 800adc0:	80c00015 	stw	r3,0(r16)
 800adc4:	8c400044 	addi	r17,r17,1
 800adc8:	dc45883a 	add	r2,sp,r17
 800adcc:	8d00112e 	bgeu	r17,r20,800ae14 <_fputwc_r+0xf0>
 800add0:	11400003 	ldbu	r5,0(r2)
 800add4:	80c00217 	ldw	r3,8(r16)
 800add8:	18ffffc4 	addi	r3,r3,-1
 800addc:	80c00215 	stw	r3,8(r16)
 800ade0:	183ff30e 	bge	r3,zero,800adb0 <__alt_data_end+0xfc00adb0>
 800ade4:	80800617 	ldw	r2,24(r16)
 800ade8:	18801916 	blt	r3,r2,800ae50 <_fputwc_r+0x12c>
 800adec:	80800017 	ldw	r2,0(r16)
 800adf0:	11400005 	stb	r5,0(r2)
 800adf4:	80800017 	ldw	r2,0(r16)
 800adf8:	10c00003 	ldbu	r3,0(r2)
 800adfc:	10800044 	addi	r2,r2,1
 800ae00:	1d402326 	beq	r3,r21,800ae90 <_fputwc_r+0x16c>
 800ae04:	80800015 	stw	r2,0(r16)
 800ae08:	8c400044 	addi	r17,r17,1
 800ae0c:	dc45883a 	add	r2,sp,r17
 800ae10:	8d3fef36 	bltu	r17,r20,800add0 <__alt_data_end+0xfc00add0>
 800ae14:	9005883a 	mov	r2,r18
 800ae18:	00000406 	br	800ae2c <_fputwc_r+0x108>
 800ae1c:	80c0030b 	ldhu	r3,12(r16)
 800ae20:	a005883a 	mov	r2,r20
 800ae24:	18c01014 	ori	r3,r3,64
 800ae28:	80c0030d 	sth	r3,12(r16)
 800ae2c:	dfc00717 	ldw	ra,28(sp)
 800ae30:	dd400617 	ldw	r21,24(sp)
 800ae34:	dd000517 	ldw	r20,20(sp)
 800ae38:	dcc00417 	ldw	r19,16(sp)
 800ae3c:	dc800317 	ldw	r18,12(sp)
 800ae40:	dc400217 	ldw	r17,8(sp)
 800ae44:	dc000117 	ldw	r16,4(sp)
 800ae48:	dec00804 	addi	sp,sp,32
 800ae4c:	f800283a 	ret
 800ae50:	9809883a 	mov	r4,r19
 800ae54:	29403fcc 	andi	r5,r5,255
 800ae58:	800d883a 	mov	r6,r16
 800ae5c:	800b0640 	call	800b064 <__swbuf_r>
 800ae60:	10bfffe0 	cmpeqi	r2,r2,-1
 800ae64:	10803fcc 	andi	r2,r2,255
 800ae68:	103fd626 	beq	r2,zero,800adc4 <__alt_data_end+0xfc00adc4>
 800ae6c:	00bfffc4 	movi	r2,-1
 800ae70:	003fee06 	br	800ae2c <__alt_data_end+0xfc00ae2c>
 800ae74:	90ffffc4 	addi	r3,r18,-1
 800ae78:	01003f84 	movi	r4,254
 800ae7c:	20ffbf36 	bltu	r4,r3,800ad7c <__alt_data_end+0xfc00ad7c>
 800ae80:	900b883a 	mov	r5,r18
 800ae84:	dc800005 	stb	r18,0(sp)
 800ae88:	1029883a 	mov	r20,r2
 800ae8c:	003fc506 	br	800ada4 <__alt_data_end+0xfc00ada4>
 800ae90:	9809883a 	mov	r4,r19
 800ae94:	a80b883a 	mov	r5,r21
 800ae98:	800d883a 	mov	r6,r16
 800ae9c:	800b0640 	call	800b064 <__swbuf_r>
 800aea0:	10bfffe0 	cmpeqi	r2,r2,-1
 800aea4:	003fef06 	br	800ae64 <__alt_data_end+0xfc00ae64>

0800aea8 <fputwc>:
 800aea8:	defffc04 	addi	sp,sp,-16
 800aeac:	dc000115 	stw	r16,4(sp)
 800aeb0:	04020074 	movhi	r16,2049
 800aeb4:	8407fc04 	addi	r16,r16,8176
 800aeb8:	dc400215 	stw	r17,8(sp)
 800aebc:	2023883a 	mov	r17,r4
 800aec0:	81000017 	ldw	r4,0(r16)
 800aec4:	dfc00315 	stw	ra,12(sp)
 800aec8:	280d883a 	mov	r6,r5
 800aecc:	20000626 	beq	r4,zero,800aee8 <fputwc+0x40>
 800aed0:	20800e17 	ldw	r2,56(r4)
 800aed4:	1000041e 	bne	r2,zero,800aee8 <fputwc+0x40>
 800aed8:	d9400015 	stw	r5,0(sp)
 800aedc:	80063440 	call	8006344 <__sinit>
 800aee0:	81000017 	ldw	r4,0(r16)
 800aee4:	d9800017 	ldw	r6,0(sp)
 800aee8:	880b883a 	mov	r5,r17
 800aeec:	dfc00317 	ldw	ra,12(sp)
 800aef0:	dc400217 	ldw	r17,8(sp)
 800aef4:	dc000117 	ldw	r16,4(sp)
 800aef8:	dec00404 	addi	sp,sp,16
 800aefc:	800ad241 	jmpi	800ad24 <_fputwc_r>

0800af00 <_fstat_r>:
 800af00:	defffd04 	addi	sp,sp,-12
 800af04:	dc000015 	stw	r16,0(sp)
 800af08:	04020074 	movhi	r16,2049
 800af0c:	dc400115 	stw	r17,4(sp)
 800af10:	840ed704 	addi	r16,r16,15196
 800af14:	2023883a 	mov	r17,r4
 800af18:	2809883a 	mov	r4,r5
 800af1c:	300b883a 	mov	r5,r6
 800af20:	dfc00215 	stw	ra,8(sp)
 800af24:	80000015 	stw	zero,0(r16)
 800af28:	800d6540 	call	800d654 <fstat>
 800af2c:	00ffffc4 	movi	r3,-1
 800af30:	10c00526 	beq	r2,r3,800af48 <_fstat_r+0x48>
 800af34:	dfc00217 	ldw	ra,8(sp)
 800af38:	dc400117 	ldw	r17,4(sp)
 800af3c:	dc000017 	ldw	r16,0(sp)
 800af40:	dec00304 	addi	sp,sp,12
 800af44:	f800283a 	ret
 800af48:	80c00017 	ldw	r3,0(r16)
 800af4c:	183ff926 	beq	r3,zero,800af34 <__alt_data_end+0xfc00af34>
 800af50:	88c00015 	stw	r3,0(r17)
 800af54:	003ff706 	br	800af34 <__alt_data_end+0xfc00af34>

0800af58 <_isatty_r>:
 800af58:	defffd04 	addi	sp,sp,-12
 800af5c:	dc000015 	stw	r16,0(sp)
 800af60:	04020074 	movhi	r16,2049
 800af64:	dc400115 	stw	r17,4(sp)
 800af68:	840ed704 	addi	r16,r16,15196
 800af6c:	2023883a 	mov	r17,r4
 800af70:	2809883a 	mov	r4,r5
 800af74:	dfc00215 	stw	ra,8(sp)
 800af78:	80000015 	stw	zero,0(r16)
 800af7c:	800d75c0 	call	800d75c <isatty>
 800af80:	00ffffc4 	movi	r3,-1
 800af84:	10c00526 	beq	r2,r3,800af9c <_isatty_r+0x44>
 800af88:	dfc00217 	ldw	ra,8(sp)
 800af8c:	dc400117 	ldw	r17,4(sp)
 800af90:	dc000017 	ldw	r16,0(sp)
 800af94:	dec00304 	addi	sp,sp,12
 800af98:	f800283a 	ret
 800af9c:	80c00017 	ldw	r3,0(r16)
 800afa0:	183ff926 	beq	r3,zero,800af88 <__alt_data_end+0xfc00af88>
 800afa4:	88c00015 	stw	r3,0(r17)
 800afa8:	003ff706 	br	800af88 <__alt_data_end+0xfc00af88>

0800afac <_lseek_r>:
 800afac:	defffd04 	addi	sp,sp,-12
 800afb0:	dc000015 	stw	r16,0(sp)
 800afb4:	04020074 	movhi	r16,2049
 800afb8:	dc400115 	stw	r17,4(sp)
 800afbc:	840ed704 	addi	r16,r16,15196
 800afc0:	2023883a 	mov	r17,r4
 800afc4:	2809883a 	mov	r4,r5
 800afc8:	300b883a 	mov	r5,r6
 800afcc:	380d883a 	mov	r6,r7
 800afd0:	dfc00215 	stw	ra,8(sp)
 800afd4:	80000015 	stw	zero,0(r16)
 800afd8:	800d93c0 	call	800d93c <lseek>
 800afdc:	00ffffc4 	movi	r3,-1
 800afe0:	10c00526 	beq	r2,r3,800aff8 <_lseek_r+0x4c>
 800afe4:	dfc00217 	ldw	ra,8(sp)
 800afe8:	dc400117 	ldw	r17,4(sp)
 800afec:	dc000017 	ldw	r16,0(sp)
 800aff0:	dec00304 	addi	sp,sp,12
 800aff4:	f800283a 	ret
 800aff8:	80c00017 	ldw	r3,0(r16)
 800affc:	183ff926 	beq	r3,zero,800afe4 <__alt_data_end+0xfc00afe4>
 800b000:	88c00015 	stw	r3,0(r17)
 800b004:	003ff706 	br	800afe4 <__alt_data_end+0xfc00afe4>

0800b008 <_read_r>:
 800b008:	defffd04 	addi	sp,sp,-12
 800b00c:	dc000015 	stw	r16,0(sp)
 800b010:	04020074 	movhi	r16,2049
 800b014:	dc400115 	stw	r17,4(sp)
 800b018:	840ed704 	addi	r16,r16,15196
 800b01c:	2023883a 	mov	r17,r4
 800b020:	2809883a 	mov	r4,r5
 800b024:	300b883a 	mov	r5,r6
 800b028:	380d883a 	mov	r6,r7
 800b02c:	dfc00215 	stw	ra,8(sp)
 800b030:	80000015 	stw	zero,0(r16)
 800b034:	800db200 	call	800db20 <read>
 800b038:	00ffffc4 	movi	r3,-1
 800b03c:	10c00526 	beq	r2,r3,800b054 <_read_r+0x4c>
 800b040:	dfc00217 	ldw	ra,8(sp)
 800b044:	dc400117 	ldw	r17,4(sp)
 800b048:	dc000017 	ldw	r16,0(sp)
 800b04c:	dec00304 	addi	sp,sp,12
 800b050:	f800283a 	ret
 800b054:	80c00017 	ldw	r3,0(r16)
 800b058:	183ff926 	beq	r3,zero,800b040 <__alt_data_end+0xfc00b040>
 800b05c:	88c00015 	stw	r3,0(r17)
 800b060:	003ff706 	br	800b040 <__alt_data_end+0xfc00b040>

0800b064 <__swbuf_r>:
 800b064:	defffc04 	addi	sp,sp,-16
 800b068:	dc800215 	stw	r18,8(sp)
 800b06c:	dc400115 	stw	r17,4(sp)
 800b070:	dc000015 	stw	r16,0(sp)
 800b074:	dfc00315 	stw	ra,12(sp)
 800b078:	2025883a 	mov	r18,r4
 800b07c:	2823883a 	mov	r17,r5
 800b080:	3021883a 	mov	r16,r6
 800b084:	20000226 	beq	r4,zero,800b090 <__swbuf_r+0x2c>
 800b088:	20800e17 	ldw	r2,56(r4)
 800b08c:	10004126 	beq	r2,zero,800b194 <__swbuf_r+0x130>
 800b090:	80c00617 	ldw	r3,24(r16)
 800b094:	8180030b 	ldhu	r6,12(r16)
 800b098:	80c00215 	stw	r3,8(r16)
 800b09c:	30c0020c 	andi	r3,r6,8
 800b0a0:	18003526 	beq	r3,zero,800b178 <__swbuf_r+0x114>
 800b0a4:	80c00417 	ldw	r3,16(r16)
 800b0a8:	18003326 	beq	r3,zero,800b178 <__swbuf_r+0x114>
 800b0ac:	3088000c 	andi	r2,r6,8192
 800b0b0:	8c403fcc 	andi	r17,r17,255
 800b0b4:	10001726 	beq	r2,zero,800b114 <__swbuf_r+0xb0>
 800b0b8:	80800017 	ldw	r2,0(r16)
 800b0bc:	81000517 	ldw	r4,20(r16)
 800b0c0:	10c7c83a 	sub	r3,r2,r3
 800b0c4:	19001d0e 	bge	r3,r4,800b13c <__swbuf_r+0xd8>
 800b0c8:	18c00044 	addi	r3,r3,1
 800b0cc:	81400217 	ldw	r5,8(r16)
 800b0d0:	11000044 	addi	r4,r2,1
 800b0d4:	81000015 	stw	r4,0(r16)
 800b0d8:	297fffc4 	addi	r5,r5,-1
 800b0dc:	81400215 	stw	r5,8(r16)
 800b0e0:	14400005 	stb	r17,0(r2)
 800b0e4:	80800517 	ldw	r2,20(r16)
 800b0e8:	10c01d26 	beq	r2,r3,800b160 <__swbuf_r+0xfc>
 800b0ec:	8080030b 	ldhu	r2,12(r16)
 800b0f0:	1080004c 	andi	r2,r2,1
 800b0f4:	1000181e 	bne	r2,zero,800b158 <__swbuf_r+0xf4>
 800b0f8:	8805883a 	mov	r2,r17
 800b0fc:	dfc00317 	ldw	ra,12(sp)
 800b100:	dc800217 	ldw	r18,8(sp)
 800b104:	dc400117 	ldw	r17,4(sp)
 800b108:	dc000017 	ldw	r16,0(sp)
 800b10c:	dec00404 	addi	sp,sp,16
 800b110:	f800283a 	ret
 800b114:	81001917 	ldw	r4,100(r16)
 800b118:	00b7ffc4 	movi	r2,-8193
 800b11c:	31880014 	ori	r6,r6,8192
 800b120:	2084703a 	and	r2,r4,r2
 800b124:	80801915 	stw	r2,100(r16)
 800b128:	80800017 	ldw	r2,0(r16)
 800b12c:	81000517 	ldw	r4,20(r16)
 800b130:	8180030d 	sth	r6,12(r16)
 800b134:	10c7c83a 	sub	r3,r2,r3
 800b138:	193fe316 	blt	r3,r4,800b0c8 <__alt_data_end+0xfc00b0c8>
 800b13c:	9009883a 	mov	r4,r18
 800b140:	800b883a 	mov	r5,r16
 800b144:	8005d880 	call	8005d88 <_fflush_r>
 800b148:	1000091e 	bne	r2,zero,800b170 <__swbuf_r+0x10c>
 800b14c:	80800017 	ldw	r2,0(r16)
 800b150:	00c00044 	movi	r3,1
 800b154:	003fdd06 	br	800b0cc <__alt_data_end+0xfc00b0cc>
 800b158:	00800284 	movi	r2,10
 800b15c:	88bfe61e 	bne	r17,r2,800b0f8 <__alt_data_end+0xfc00b0f8>
 800b160:	9009883a 	mov	r4,r18
 800b164:	800b883a 	mov	r5,r16
 800b168:	8005d880 	call	8005d88 <_fflush_r>
 800b16c:	103fe226 	beq	r2,zero,800b0f8 <__alt_data_end+0xfc00b0f8>
 800b170:	00bfffc4 	movi	r2,-1
 800b174:	003fe106 	br	800b0fc <__alt_data_end+0xfc00b0fc>
 800b178:	9009883a 	mov	r4,r18
 800b17c:	800b883a 	mov	r5,r16
 800b180:	80043080 	call	8004308 <__swsetup_r>
 800b184:	1000051e 	bne	r2,zero,800b19c <__swbuf_r+0x138>
 800b188:	8180030b 	ldhu	r6,12(r16)
 800b18c:	80c00417 	ldw	r3,16(r16)
 800b190:	003fc606 	br	800b0ac <__alt_data_end+0xfc00b0ac>
 800b194:	80063440 	call	8006344 <__sinit>
 800b198:	003fbd06 	br	800b090 <__alt_data_end+0xfc00b090>
 800b19c:	80c0030b 	ldhu	r3,12(r16)
 800b1a0:	00bfffc4 	movi	r2,-1
 800b1a4:	18c01014 	ori	r3,r3,64
 800b1a8:	80c0030d 	sth	r3,12(r16)
 800b1ac:	00c00244 	movi	r3,9
 800b1b0:	90c00015 	stw	r3,0(r18)
 800b1b4:	003fd106 	br	800b0fc <__alt_data_end+0xfc00b0fc>

0800b1b8 <__swbuf>:
 800b1b8:	00c20074 	movhi	r3,2049
 800b1bc:	18c7fc04 	addi	r3,r3,8176
 800b1c0:	2005883a 	mov	r2,r4
 800b1c4:	19000017 	ldw	r4,0(r3)
 800b1c8:	280d883a 	mov	r6,r5
 800b1cc:	100b883a 	mov	r5,r2
 800b1d0:	800b0641 	jmpi	800b064 <__swbuf_r>

0800b1d4 <_wcrtomb_r>:
 800b1d4:	defff604 	addi	sp,sp,-40
 800b1d8:	00820074 	movhi	r2,2049
 800b1dc:	dc800815 	stw	r18,32(sp)
 800b1e0:	dc400715 	stw	r17,28(sp)
 800b1e4:	dc000615 	stw	r16,24(sp)
 800b1e8:	10880004 	addi	r2,r2,8192
 800b1ec:	dfc00915 	stw	ra,36(sp)
 800b1f0:	2021883a 	mov	r16,r4
 800b1f4:	3823883a 	mov	r17,r7
 800b1f8:	14800017 	ldw	r18,0(r2)
 800b1fc:	28001426 	beq	r5,zero,800b250 <_wcrtomb_r+0x7c>
 800b200:	d9400415 	stw	r5,16(sp)
 800b204:	d9800515 	stw	r6,20(sp)
 800b208:	8006e380 	call	8006e38 <__locale_charset>
 800b20c:	d9400417 	ldw	r5,16(sp)
 800b210:	d9800517 	ldw	r6,20(sp)
 800b214:	8009883a 	mov	r4,r16
 800b218:	dc400015 	stw	r17,0(sp)
 800b21c:	100f883a 	mov	r7,r2
 800b220:	903ee83a 	callr	r18
 800b224:	00ffffc4 	movi	r3,-1
 800b228:	10c0031e 	bne	r2,r3,800b238 <_wcrtomb_r+0x64>
 800b22c:	88000015 	stw	zero,0(r17)
 800b230:	00c02284 	movi	r3,138
 800b234:	80c00015 	stw	r3,0(r16)
 800b238:	dfc00917 	ldw	ra,36(sp)
 800b23c:	dc800817 	ldw	r18,32(sp)
 800b240:	dc400717 	ldw	r17,28(sp)
 800b244:	dc000617 	ldw	r16,24(sp)
 800b248:	dec00a04 	addi	sp,sp,40
 800b24c:	f800283a 	ret
 800b250:	8006e380 	call	8006e38 <__locale_charset>
 800b254:	8009883a 	mov	r4,r16
 800b258:	dc400015 	stw	r17,0(sp)
 800b25c:	d9400104 	addi	r5,sp,4
 800b260:	000d883a 	mov	r6,zero
 800b264:	100f883a 	mov	r7,r2
 800b268:	903ee83a 	callr	r18
 800b26c:	003fed06 	br	800b224 <__alt_data_end+0xfc00b224>

0800b270 <wcrtomb>:
 800b270:	defff504 	addi	sp,sp,-44
 800b274:	dc400515 	stw	r17,20(sp)
 800b278:	dc000415 	stw	r16,16(sp)
 800b27c:	dfc00a15 	stw	ra,40(sp)
 800b280:	dd400915 	stw	r21,36(sp)
 800b284:	dd000815 	stw	r20,32(sp)
 800b288:	dcc00715 	stw	r19,28(sp)
 800b28c:	dc800615 	stw	r18,24(sp)
 800b290:	2021883a 	mov	r16,r4
 800b294:	3023883a 	mov	r17,r6
 800b298:	20001d26 	beq	r4,zero,800b310 <wcrtomb+0xa0>
 800b29c:	04820074 	movhi	r18,2049
 800b2a0:	9487fc04 	addi	r18,r18,8176
 800b2a4:	00820074 	movhi	r2,2049
 800b2a8:	95400017 	ldw	r21,0(r18)
 800b2ac:	10880004 	addi	r2,r2,8192
 800b2b0:	15000017 	ldw	r20,0(r2)
 800b2b4:	2827883a 	mov	r19,r5
 800b2b8:	8006e380 	call	8006e38 <__locale_charset>
 800b2bc:	a809883a 	mov	r4,r21
 800b2c0:	dc400015 	stw	r17,0(sp)
 800b2c4:	800b883a 	mov	r5,r16
 800b2c8:	980d883a 	mov	r6,r19
 800b2cc:	100f883a 	mov	r7,r2
 800b2d0:	a03ee83a 	callr	r20
 800b2d4:	00ffffc4 	movi	r3,-1
 800b2d8:	10c0041e 	bne	r2,r3,800b2ec <wcrtomb+0x7c>
 800b2dc:	90c00017 	ldw	r3,0(r18)
 800b2e0:	01002284 	movi	r4,138
 800b2e4:	88000015 	stw	zero,0(r17)
 800b2e8:	19000015 	stw	r4,0(r3)
 800b2ec:	dfc00a17 	ldw	ra,40(sp)
 800b2f0:	dd400917 	ldw	r21,36(sp)
 800b2f4:	dd000817 	ldw	r20,32(sp)
 800b2f8:	dcc00717 	ldw	r19,28(sp)
 800b2fc:	dc800617 	ldw	r18,24(sp)
 800b300:	dc400517 	ldw	r17,20(sp)
 800b304:	dc000417 	ldw	r16,16(sp)
 800b308:	dec00b04 	addi	sp,sp,44
 800b30c:	f800283a 	ret
 800b310:	04820074 	movhi	r18,2049
 800b314:	9487fc04 	addi	r18,r18,8176
 800b318:	00820074 	movhi	r2,2049
 800b31c:	94c00017 	ldw	r19,0(r18)
 800b320:	10880004 	addi	r2,r2,8192
 800b324:	14000017 	ldw	r16,0(r2)
 800b328:	8006e380 	call	8006e38 <__locale_charset>
 800b32c:	9809883a 	mov	r4,r19
 800b330:	dc400015 	stw	r17,0(sp)
 800b334:	d9400104 	addi	r5,sp,4
 800b338:	000d883a 	mov	r6,zero
 800b33c:	100f883a 	mov	r7,r2
 800b340:	803ee83a 	callr	r16
 800b344:	003fe306 	br	800b2d4 <__alt_data_end+0xfc00b2d4>

0800b348 <__ascii_wctomb>:
 800b348:	28000526 	beq	r5,zero,800b360 <__ascii_wctomb+0x18>
 800b34c:	00803fc4 	movi	r2,255
 800b350:	11800536 	bltu	r2,r6,800b368 <__ascii_wctomb+0x20>
 800b354:	29800005 	stb	r6,0(r5)
 800b358:	00800044 	movi	r2,1
 800b35c:	f800283a 	ret
 800b360:	0005883a 	mov	r2,zero
 800b364:	f800283a 	ret
 800b368:	00802284 	movi	r2,138
 800b36c:	20800015 	stw	r2,0(r4)
 800b370:	00bfffc4 	movi	r2,-1
 800b374:	f800283a 	ret

0800b378 <_wctomb_r>:
 800b378:	00820074 	movhi	r2,2049
 800b37c:	defff904 	addi	sp,sp,-28
 800b380:	10880004 	addi	r2,r2,8192
 800b384:	dfc00615 	stw	ra,24(sp)
 800b388:	dc400515 	stw	r17,20(sp)
 800b38c:	dc000415 	stw	r16,16(sp)
 800b390:	3823883a 	mov	r17,r7
 800b394:	14000017 	ldw	r16,0(r2)
 800b398:	d9000115 	stw	r4,4(sp)
 800b39c:	d9400215 	stw	r5,8(sp)
 800b3a0:	d9800315 	stw	r6,12(sp)
 800b3a4:	8006e380 	call	8006e38 <__locale_charset>
 800b3a8:	d9000117 	ldw	r4,4(sp)
 800b3ac:	d9400217 	ldw	r5,8(sp)
 800b3b0:	d9800317 	ldw	r6,12(sp)
 800b3b4:	dc400015 	stw	r17,0(sp)
 800b3b8:	100f883a 	mov	r7,r2
 800b3bc:	803ee83a 	callr	r16
 800b3c0:	dfc00617 	ldw	ra,24(sp)
 800b3c4:	dc400517 	ldw	r17,20(sp)
 800b3c8:	dc000417 	ldw	r16,16(sp)
 800b3cc:	dec00704 	addi	sp,sp,28
 800b3d0:	f800283a 	ret

0800b3d4 <__udivdi3>:
 800b3d4:	defff504 	addi	sp,sp,-44
 800b3d8:	dcc00415 	stw	r19,16(sp)
 800b3dc:	dc000115 	stw	r16,4(sp)
 800b3e0:	dfc00a15 	stw	ra,40(sp)
 800b3e4:	df000915 	stw	fp,36(sp)
 800b3e8:	ddc00815 	stw	r23,32(sp)
 800b3ec:	dd800715 	stw	r22,28(sp)
 800b3f0:	dd400615 	stw	r21,24(sp)
 800b3f4:	dd000515 	stw	r20,20(sp)
 800b3f8:	dc800315 	stw	r18,12(sp)
 800b3fc:	dc400215 	stw	r17,8(sp)
 800b400:	2027883a 	mov	r19,r4
 800b404:	2821883a 	mov	r16,r5
 800b408:	3800471e 	bne	r7,zero,800b528 <__udivdi3+0x154>
 800b40c:	3025883a 	mov	r18,r6
 800b410:	2023883a 	mov	r17,r4
 800b414:	2980592e 	bgeu	r5,r6,800b57c <__udivdi3+0x1a8>
 800b418:	00bfffd4 	movui	r2,65535
 800b41c:	2829883a 	mov	r20,r5
 800b420:	1180b236 	bltu	r2,r6,800b6ec <__udivdi3+0x318>
 800b424:	00803fc4 	movi	r2,255
 800b428:	1181622e 	bgeu	r2,r6,800b9b4 <__udivdi3+0x5e0>
 800b42c:	00800204 	movi	r2,8
 800b430:	1007883a 	mov	r3,r2
 800b434:	3084d83a 	srl	r2,r6,r2
 800b438:	01020074 	movhi	r4,2049
 800b43c:	21007f04 	addi	r4,r4,508
 800b440:	2085883a 	add	r2,r4,r2
 800b444:	11000003 	ldbu	r4,0(r2)
 800b448:	20c9883a 	add	r4,r4,r3
 800b44c:	00c00804 	movi	r3,32
 800b450:	1907c83a 	sub	r3,r3,r4
 800b454:	18000526 	beq	r3,zero,800b46c <__udivdi3+0x98>
 800b458:	80e0983a 	sll	r16,r16,r3
 800b45c:	9908d83a 	srl	r4,r19,r4
 800b460:	30e4983a 	sll	r18,r6,r3
 800b464:	98e2983a 	sll	r17,r19,r3
 800b468:	8128b03a 	or	r20,r16,r4
 800b46c:	902ad43a 	srli	r21,r18,16
 800b470:	a009883a 	mov	r4,r20
 800b474:	95bfffcc 	andi	r22,r18,65535
 800b478:	a80b883a 	mov	r5,r21
 800b47c:	8001fec0 	call	8001fec <__umodsi3>
 800b480:	a009883a 	mov	r4,r20
 800b484:	a80b883a 	mov	r5,r21
 800b488:	102f883a 	mov	r23,r2
 800b48c:	8001fe40 	call	8001fe4 <__udivsi3>
 800b490:	1009883a 	mov	r4,r2
 800b494:	b00b883a 	mov	r5,r22
 800b498:	1021883a 	mov	r16,r2
 800b49c:	8001ff40 	call	8001ff4 <__mulsi3>
 800b4a0:	b82e943a 	slli	r23,r23,16
 800b4a4:	8808d43a 	srli	r4,r17,16
 800b4a8:	b906b03a 	or	r3,r23,r4
 800b4ac:	1880052e 	bgeu	r3,r2,800b4c4 <__udivdi3+0xf0>
 800b4b0:	1c87883a 	add	r3,r3,r18
 800b4b4:	813fffc4 	addi	r4,r16,-1
 800b4b8:	1c800136 	bltu	r3,r18,800b4c0 <__udivdi3+0xec>
 800b4bc:	18815236 	bltu	r3,r2,800ba08 <__udivdi3+0x634>
 800b4c0:	2021883a 	mov	r16,r4
 800b4c4:	18a7c83a 	sub	r19,r3,r2
 800b4c8:	9809883a 	mov	r4,r19
 800b4cc:	a80b883a 	mov	r5,r21
 800b4d0:	8001fec0 	call	8001fec <__umodsi3>
 800b4d4:	1029883a 	mov	r20,r2
 800b4d8:	9809883a 	mov	r4,r19
 800b4dc:	a80b883a 	mov	r5,r21
 800b4e0:	a028943a 	slli	r20,r20,16
 800b4e4:	8001fe40 	call	8001fe4 <__udivsi3>
 800b4e8:	1009883a 	mov	r4,r2
 800b4ec:	b00b883a 	mov	r5,r22
 800b4f0:	8c7fffcc 	andi	r17,r17,65535
 800b4f4:	1027883a 	mov	r19,r2
 800b4f8:	a462b03a 	or	r17,r20,r17
 800b4fc:	8001ff40 	call	8001ff4 <__mulsi3>
 800b500:	8880052e 	bgeu	r17,r2,800b518 <__udivdi3+0x144>
 800b504:	8ca3883a 	add	r17,r17,r18
 800b508:	98ffffc4 	addi	r3,r19,-1
 800b50c:	8c811036 	bltu	r17,r18,800b950 <__udivdi3+0x57c>
 800b510:	88810f2e 	bgeu	r17,r2,800b950 <__udivdi3+0x57c>
 800b514:	9cffff84 	addi	r19,r19,-2
 800b518:	8020943a 	slli	r16,r16,16
 800b51c:	0007883a 	mov	r3,zero
 800b520:	9c04b03a 	or	r2,r19,r16
 800b524:	00006006 	br	800b6a8 <__udivdi3+0x2d4>
 800b528:	29c05d36 	bltu	r5,r7,800b6a0 <__udivdi3+0x2cc>
 800b52c:	00bfffd4 	movui	r2,65535
 800b530:	11c0692e 	bgeu	r2,r7,800b6d8 <__udivdi3+0x304>
 800b534:	00804034 	movhi	r2,256
 800b538:	10bfffc4 	addi	r2,r2,-1
 800b53c:	11c10e2e 	bgeu	r2,r7,800b978 <__udivdi3+0x5a4>
 800b540:	01400604 	movi	r5,24
 800b544:	2811883a 	mov	r8,r5
 800b548:	394ad83a 	srl	r5,r7,r5
 800b54c:	00820074 	movhi	r2,2049
 800b550:	10807f04 	addi	r2,r2,508
 800b554:	114b883a 	add	r5,r2,r5
 800b558:	29400003 	ldbu	r5,0(r5)
 800b55c:	00c00804 	movi	r3,32
 800b560:	2a0b883a 	add	r5,r5,r8
 800b564:	196fc83a 	sub	r23,r3,r5
 800b568:	b8006b1e 	bne	r23,zero,800b718 <__udivdi3+0x344>
 800b56c:	3c011436 	bltu	r7,r16,800b9c0 <__udivdi3+0x5ec>
 800b570:	9985403a 	cmpgeu	r2,r19,r6
 800b574:	0007883a 	mov	r3,zero
 800b578:	00004b06 	br	800b6a8 <__udivdi3+0x2d4>
 800b57c:	3000041e 	bne	r6,zero,800b590 <__udivdi3+0x1bc>
 800b580:	01000044 	movi	r4,1
 800b584:	000b883a 	mov	r5,zero
 800b588:	8001fe40 	call	8001fe4 <__udivsi3>
 800b58c:	1025883a 	mov	r18,r2
 800b590:	00bfffd4 	movui	r2,65535
 800b594:	14805b2e 	bgeu	r2,r18,800b704 <__udivdi3+0x330>
 800b598:	00804034 	movhi	r2,256
 800b59c:	10bfffc4 	addi	r2,r2,-1
 800b5a0:	1480fe2e 	bgeu	r2,r18,800b99c <__udivdi3+0x5c8>
 800b5a4:	00800604 	movi	r2,24
 800b5a8:	1007883a 	mov	r3,r2
 800b5ac:	9084d83a 	srl	r2,r18,r2
 800b5b0:	01020074 	movhi	r4,2049
 800b5b4:	21007f04 	addi	r4,r4,508
 800b5b8:	2085883a 	add	r2,r4,r2
 800b5bc:	11800003 	ldbu	r6,0(r2)
 800b5c0:	01c00804 	movi	r7,32
 800b5c4:	30c7883a 	add	r3,r6,r3
 800b5c8:	38cfc83a 	sub	r7,r7,r3
 800b5cc:	3800a71e 	bne	r7,zero,800b86c <__udivdi3+0x498>
 800b5d0:	9028d43a 	srli	r20,r18,16
 800b5d4:	84a1c83a 	sub	r16,r16,r18
 800b5d8:	957fffcc 	andi	r21,r18,65535
 800b5dc:	00c00044 	movi	r3,1
 800b5e0:	8009883a 	mov	r4,r16
 800b5e4:	a00b883a 	mov	r5,r20
 800b5e8:	d8c00015 	stw	r3,0(sp)
 800b5ec:	8001fec0 	call	8001fec <__umodsi3>
 800b5f0:	8009883a 	mov	r4,r16
 800b5f4:	a00b883a 	mov	r5,r20
 800b5f8:	102d883a 	mov	r22,r2
 800b5fc:	8001fe40 	call	8001fe4 <__udivsi3>
 800b600:	1009883a 	mov	r4,r2
 800b604:	a80b883a 	mov	r5,r21
 800b608:	1021883a 	mov	r16,r2
 800b60c:	8001ff40 	call	8001ff4 <__mulsi3>
 800b610:	b02c943a 	slli	r22,r22,16
 800b614:	880ed43a 	srli	r7,r17,16
 800b618:	d8c00017 	ldw	r3,0(sp)
 800b61c:	b1ccb03a 	or	r6,r22,r7
 800b620:	3080052e 	bgeu	r6,r2,800b638 <__udivdi3+0x264>
 800b624:	348d883a 	add	r6,r6,r18
 800b628:	813fffc4 	addi	r4,r16,-1
 800b62c:	34800136 	bltu	r6,r18,800b634 <__udivdi3+0x260>
 800b630:	3080f236 	bltu	r6,r2,800b9fc <__udivdi3+0x628>
 800b634:	2021883a 	mov	r16,r4
 800b638:	30a7c83a 	sub	r19,r6,r2
 800b63c:	9809883a 	mov	r4,r19
 800b640:	a00b883a 	mov	r5,r20
 800b644:	d8c00015 	stw	r3,0(sp)
 800b648:	8001fec0 	call	8001fec <__umodsi3>
 800b64c:	102d883a 	mov	r22,r2
 800b650:	9809883a 	mov	r4,r19
 800b654:	a00b883a 	mov	r5,r20
 800b658:	b02c943a 	slli	r22,r22,16
 800b65c:	8001fe40 	call	8001fe4 <__udivsi3>
 800b660:	1009883a 	mov	r4,r2
 800b664:	a80b883a 	mov	r5,r21
 800b668:	8c7fffcc 	andi	r17,r17,65535
 800b66c:	1027883a 	mov	r19,r2
 800b670:	b462b03a 	or	r17,r22,r17
 800b674:	8001ff40 	call	8001ff4 <__mulsi3>
 800b678:	d8c00017 	ldw	r3,0(sp)
 800b67c:	8880052e 	bgeu	r17,r2,800b694 <__udivdi3+0x2c0>
 800b680:	8ca3883a 	add	r17,r17,r18
 800b684:	993fffc4 	addi	r4,r19,-1
 800b688:	8c80af36 	bltu	r17,r18,800b948 <__udivdi3+0x574>
 800b68c:	8880ae2e 	bgeu	r17,r2,800b948 <__udivdi3+0x574>
 800b690:	9cffff84 	addi	r19,r19,-2
 800b694:	8020943a 	slli	r16,r16,16
 800b698:	9c04b03a 	or	r2,r19,r16
 800b69c:	00000206 	br	800b6a8 <__udivdi3+0x2d4>
 800b6a0:	0007883a 	mov	r3,zero
 800b6a4:	0005883a 	mov	r2,zero
 800b6a8:	dfc00a17 	ldw	ra,40(sp)
 800b6ac:	df000917 	ldw	fp,36(sp)
 800b6b0:	ddc00817 	ldw	r23,32(sp)
 800b6b4:	dd800717 	ldw	r22,28(sp)
 800b6b8:	dd400617 	ldw	r21,24(sp)
 800b6bc:	dd000517 	ldw	r20,20(sp)
 800b6c0:	dcc00417 	ldw	r19,16(sp)
 800b6c4:	dc800317 	ldw	r18,12(sp)
 800b6c8:	dc400217 	ldw	r17,8(sp)
 800b6cc:	dc000117 	ldw	r16,4(sp)
 800b6d0:	dec00b04 	addi	sp,sp,44
 800b6d4:	f800283a 	ret
 800b6d8:	00803fc4 	movi	r2,255
 800b6dc:	11c0a92e 	bgeu	r2,r7,800b984 <__udivdi3+0x5b0>
 800b6e0:	01400204 	movi	r5,8
 800b6e4:	2811883a 	mov	r8,r5
 800b6e8:	003f9706 	br	800b548 <__alt_data_end+0xfc00b548>
 800b6ec:	00804034 	movhi	r2,256
 800b6f0:	10bfffc4 	addi	r2,r2,-1
 800b6f4:	1180a62e 	bgeu	r2,r6,800b990 <__udivdi3+0x5bc>
 800b6f8:	00800604 	movi	r2,24
 800b6fc:	1007883a 	mov	r3,r2
 800b700:	003f4c06 	br	800b434 <__alt_data_end+0xfc00b434>
 800b704:	00803fc4 	movi	r2,255
 800b708:	1480a72e 	bgeu	r2,r18,800b9a8 <__udivdi3+0x5d4>
 800b70c:	00800204 	movi	r2,8
 800b710:	1007883a 	mov	r3,r2
 800b714:	003fa506 	br	800b5ac <__alt_data_end+0xfc00b5ac>
 800b718:	3178d83a 	srl	fp,r6,r5
 800b71c:	3dce983a 	sll	r7,r7,r23
 800b720:	8168d83a 	srl	r20,r16,r5
 800b724:	9950d83a 	srl	r8,r19,r5
 800b728:	3f38b03a 	or	fp,r7,fp
 800b72c:	e024d43a 	srli	r18,fp,16
 800b730:	85e0983a 	sll	r16,r16,r23
 800b734:	a009883a 	mov	r4,r20
 800b738:	900b883a 	mov	r5,r18
 800b73c:	8220b03a 	or	r16,r16,r8
 800b740:	35ea983a 	sll	r21,r6,r23
 800b744:	8001fec0 	call	8001fec <__umodsi3>
 800b748:	a009883a 	mov	r4,r20
 800b74c:	900b883a 	mov	r5,r18
 800b750:	1023883a 	mov	r17,r2
 800b754:	e5bfffcc 	andi	r22,fp,65535
 800b758:	8001fe40 	call	8001fe4 <__udivsi3>
 800b75c:	1009883a 	mov	r4,r2
 800b760:	b00b883a 	mov	r5,r22
 800b764:	1029883a 	mov	r20,r2
 800b768:	8001ff40 	call	8001ff4 <__mulsi3>
 800b76c:	8806943a 	slli	r3,r17,16
 800b770:	8014d43a 	srli	r10,r16,16
 800b774:	1a92b03a 	or	r9,r3,r10
 800b778:	4880042e 	bgeu	r9,r2,800b78c <__udivdi3+0x3b8>
 800b77c:	4f13883a 	add	r9,r9,fp
 800b780:	a0ffffc4 	addi	r3,r20,-1
 800b784:	4f00952e 	bgeu	r9,fp,800b9dc <__udivdi3+0x608>
 800b788:	1829883a 	mov	r20,r3
 800b78c:	48a3c83a 	sub	r17,r9,r2
 800b790:	8809883a 	mov	r4,r17
 800b794:	900b883a 	mov	r5,r18
 800b798:	8001fec0 	call	8001fec <__umodsi3>
 800b79c:	8809883a 	mov	r4,r17
 800b7a0:	900b883a 	mov	r5,r18
 800b7a4:	d8800015 	stw	r2,0(sp)
 800b7a8:	8001fe40 	call	8001fe4 <__udivsi3>
 800b7ac:	1009883a 	mov	r4,r2
 800b7b0:	b00b883a 	mov	r5,r22
 800b7b4:	1023883a 	mov	r17,r2
 800b7b8:	8001ff40 	call	8001ff4 <__mulsi3>
 800b7bc:	d8c00017 	ldw	r3,0(sp)
 800b7c0:	823fffcc 	andi	r8,r16,65535
 800b7c4:	1806943a 	slli	r3,r3,16
 800b7c8:	1a20b03a 	or	r16,r3,r8
 800b7cc:	8080042e 	bgeu	r16,r2,800b7e0 <__udivdi3+0x40c>
 800b7d0:	8721883a 	add	r16,r16,fp
 800b7d4:	88ffffc4 	addi	r3,r17,-1
 800b7d8:	87007c2e 	bgeu	r16,fp,800b9cc <__udivdi3+0x5f8>
 800b7dc:	1823883a 	mov	r17,r3
 800b7e0:	a028943a 	slli	r20,r20,16
 800b7e4:	acbfffcc 	andi	r18,r21,65535
 800b7e8:	900b883a 	mov	r5,r18
 800b7ec:	8d28b03a 	or	r20,r17,r20
 800b7f0:	a022d43a 	srli	r17,r20,16
 800b7f4:	a5bfffcc 	andi	r22,r20,65535
 800b7f8:	b009883a 	mov	r4,r22
 800b7fc:	a82ad43a 	srli	r21,r21,16
 800b800:	80a1c83a 	sub	r16,r16,r2
 800b804:	8001ff40 	call	8001ff4 <__mulsi3>
 800b808:	8809883a 	mov	r4,r17
 800b80c:	900b883a 	mov	r5,r18
 800b810:	1039883a 	mov	fp,r2
 800b814:	8001ff40 	call	8001ff4 <__mulsi3>
 800b818:	8809883a 	mov	r4,r17
 800b81c:	a80b883a 	mov	r5,r21
 800b820:	1025883a 	mov	r18,r2
 800b824:	8001ff40 	call	8001ff4 <__mulsi3>
 800b828:	b009883a 	mov	r4,r22
 800b82c:	a80b883a 	mov	r5,r21
 800b830:	1023883a 	mov	r17,r2
 800b834:	8001ff40 	call	8001ff4 <__mulsi3>
 800b838:	e006d43a 	srli	r3,fp,16
 800b83c:	9085883a 	add	r2,r18,r2
 800b840:	10c7883a 	add	r3,r2,r3
 800b844:	1c80022e 	bgeu	r3,r18,800b850 <__udivdi3+0x47c>
 800b848:	00800074 	movhi	r2,1
 800b84c:	88a3883a 	add	r17,r17,r2
 800b850:	1808d43a 	srli	r4,r3,16
 800b854:	8909883a 	add	r4,r17,r4
 800b858:	81004436 	bltu	r16,r4,800b96c <__udivdi3+0x598>
 800b85c:	81003e26 	beq	r16,r4,800b958 <__udivdi3+0x584>
 800b860:	a005883a 	mov	r2,r20
 800b864:	0007883a 	mov	r3,zero
 800b868:	003f8f06 	br	800b6a8 <__alt_data_end+0xfc00b6a8>
 800b86c:	91e4983a 	sll	r18,r18,r7
 800b870:	80eed83a 	srl	r23,r16,r3
 800b874:	81cc983a 	sll	r6,r16,r7
 800b878:	9028d43a 	srli	r20,r18,16
 800b87c:	98c6d83a 	srl	r3,r19,r3
 800b880:	b809883a 	mov	r4,r23
 800b884:	a00b883a 	mov	r5,r20
 800b888:	30ecb03a 	or	r22,r6,r3
 800b88c:	99e2983a 	sll	r17,r19,r7
 800b890:	8001fec0 	call	8001fec <__umodsi3>
 800b894:	b809883a 	mov	r4,r23
 800b898:	a00b883a 	mov	r5,r20
 800b89c:	1021883a 	mov	r16,r2
 800b8a0:	957fffcc 	andi	r21,r18,65535
 800b8a4:	8001fe40 	call	8001fe4 <__udivsi3>
 800b8a8:	a80b883a 	mov	r5,r21
 800b8ac:	1009883a 	mov	r4,r2
 800b8b0:	102f883a 	mov	r23,r2
 800b8b4:	8001ff40 	call	8001ff4 <__mulsi3>
 800b8b8:	8020943a 	slli	r16,r16,16
 800b8bc:	b00ad43a 	srli	r5,r22,16
 800b8c0:	814cb03a 	or	r6,r16,r5
 800b8c4:	3080062e 	bgeu	r6,r2,800b8e0 <__udivdi3+0x50c>
 800b8c8:	348d883a 	add	r6,r6,r18
 800b8cc:	b8ffffc4 	addi	r3,r23,-1
 800b8d0:	34804836 	bltu	r6,r18,800b9f4 <__udivdi3+0x620>
 800b8d4:	3080472e 	bgeu	r6,r2,800b9f4 <__udivdi3+0x620>
 800b8d8:	bdffff84 	addi	r23,r23,-2
 800b8dc:	348d883a 	add	r6,r6,r18
 800b8e0:	30a7c83a 	sub	r19,r6,r2
 800b8e4:	9809883a 	mov	r4,r19
 800b8e8:	a00b883a 	mov	r5,r20
 800b8ec:	8001fec0 	call	8001fec <__umodsi3>
 800b8f0:	9809883a 	mov	r4,r19
 800b8f4:	a00b883a 	mov	r5,r20
 800b8f8:	1039883a 	mov	fp,r2
 800b8fc:	8001fe40 	call	8001fe4 <__udivsi3>
 800b900:	1009883a 	mov	r4,r2
 800b904:	a80b883a 	mov	r5,r21
 800b908:	e038943a 	slli	fp,fp,16
 800b90c:	1027883a 	mov	r19,r2
 800b910:	8001ff40 	call	8001ff4 <__mulsi3>
 800b914:	b1bfffcc 	andi	r6,r22,65535
 800b918:	e18cb03a 	or	r6,fp,r6
 800b91c:	3080062e 	bgeu	r6,r2,800b938 <__udivdi3+0x564>
 800b920:	348d883a 	add	r6,r6,r18
 800b924:	98ffffc4 	addi	r3,r19,-1
 800b928:	34803036 	bltu	r6,r18,800b9ec <__udivdi3+0x618>
 800b92c:	30802f2e 	bgeu	r6,r2,800b9ec <__udivdi3+0x618>
 800b930:	9cffff84 	addi	r19,r19,-2
 800b934:	348d883a 	add	r6,r6,r18
 800b938:	b82e943a 	slli	r23,r23,16
 800b93c:	30a1c83a 	sub	r16,r6,r2
 800b940:	9dc6b03a 	or	r3,r19,r23
 800b944:	003f2606 	br	800b5e0 <__alt_data_end+0xfc00b5e0>
 800b948:	2027883a 	mov	r19,r4
 800b94c:	003f5106 	br	800b694 <__alt_data_end+0xfc00b694>
 800b950:	1827883a 	mov	r19,r3
 800b954:	003ef006 	br	800b518 <__alt_data_end+0xfc00b518>
 800b958:	1808943a 	slli	r4,r3,16
 800b95c:	9dc6983a 	sll	r3,r19,r23
 800b960:	e73fffcc 	andi	fp,fp,65535
 800b964:	2709883a 	add	r4,r4,fp
 800b968:	193fbd2e 	bgeu	r3,r4,800b860 <__alt_data_end+0xfc00b860>
 800b96c:	a0bfffc4 	addi	r2,r20,-1
 800b970:	0007883a 	mov	r3,zero
 800b974:	003f4c06 	br	800b6a8 <__alt_data_end+0xfc00b6a8>
 800b978:	01400404 	movi	r5,16
 800b97c:	2811883a 	mov	r8,r5
 800b980:	003ef106 	br	800b548 <__alt_data_end+0xfc00b548>
 800b984:	000b883a 	mov	r5,zero
 800b988:	0011883a 	mov	r8,zero
 800b98c:	003eee06 	br	800b548 <__alt_data_end+0xfc00b548>
 800b990:	00800404 	movi	r2,16
 800b994:	1007883a 	mov	r3,r2
 800b998:	003ea606 	br	800b434 <__alt_data_end+0xfc00b434>
 800b99c:	00800404 	movi	r2,16
 800b9a0:	1007883a 	mov	r3,r2
 800b9a4:	003f0106 	br	800b5ac <__alt_data_end+0xfc00b5ac>
 800b9a8:	0005883a 	mov	r2,zero
 800b9ac:	0007883a 	mov	r3,zero
 800b9b0:	003efe06 	br	800b5ac <__alt_data_end+0xfc00b5ac>
 800b9b4:	0005883a 	mov	r2,zero
 800b9b8:	0007883a 	mov	r3,zero
 800b9bc:	003e9d06 	br	800b434 <__alt_data_end+0xfc00b434>
 800b9c0:	0007883a 	mov	r3,zero
 800b9c4:	00800044 	movi	r2,1
 800b9c8:	003f3706 	br	800b6a8 <__alt_data_end+0xfc00b6a8>
 800b9cc:	80bf832e 	bgeu	r16,r2,800b7dc <__alt_data_end+0xfc00b7dc>
 800b9d0:	8c7fff84 	addi	r17,r17,-2
 800b9d4:	8721883a 	add	r16,r16,fp
 800b9d8:	003f8106 	br	800b7e0 <__alt_data_end+0xfc00b7e0>
 800b9dc:	48bf6a2e 	bgeu	r9,r2,800b788 <__alt_data_end+0xfc00b788>
 800b9e0:	a53fff84 	addi	r20,r20,-2
 800b9e4:	4f13883a 	add	r9,r9,fp
 800b9e8:	003f6806 	br	800b78c <__alt_data_end+0xfc00b78c>
 800b9ec:	1827883a 	mov	r19,r3
 800b9f0:	003fd106 	br	800b938 <__alt_data_end+0xfc00b938>
 800b9f4:	182f883a 	mov	r23,r3
 800b9f8:	003fb906 	br	800b8e0 <__alt_data_end+0xfc00b8e0>
 800b9fc:	843fff84 	addi	r16,r16,-2
 800ba00:	348d883a 	add	r6,r6,r18
 800ba04:	003f0c06 	br	800b638 <__alt_data_end+0xfc00b638>
 800ba08:	843fff84 	addi	r16,r16,-2
 800ba0c:	1c87883a 	add	r3,r3,r18
 800ba10:	003eac06 	br	800b4c4 <__alt_data_end+0xfc00b4c4>

0800ba14 <__umoddi3>:
 800ba14:	defff404 	addi	sp,sp,-48
 800ba18:	dd800815 	stw	r22,32(sp)
 800ba1c:	dc400315 	stw	r17,12(sp)
 800ba20:	dc000215 	stw	r16,8(sp)
 800ba24:	dfc00b15 	stw	ra,44(sp)
 800ba28:	df000a15 	stw	fp,40(sp)
 800ba2c:	ddc00915 	stw	r23,36(sp)
 800ba30:	dd400715 	stw	r21,28(sp)
 800ba34:	dd000615 	stw	r20,24(sp)
 800ba38:	dcc00515 	stw	r19,20(sp)
 800ba3c:	dc800415 	stw	r18,16(sp)
 800ba40:	2021883a 	mov	r16,r4
 800ba44:	2823883a 	mov	r17,r5
 800ba48:	282d883a 	mov	r22,r5
 800ba4c:	38003c1e 	bne	r7,zero,800bb40 <__umoddi3+0x12c>
 800ba50:	3027883a 	mov	r19,r6
 800ba54:	2029883a 	mov	r20,r4
 800ba58:	2980522e 	bgeu	r5,r6,800bba4 <__umoddi3+0x190>
 800ba5c:	00bfffd4 	movui	r2,65535
 800ba60:	1180a436 	bltu	r2,r6,800bcf4 <__umoddi3+0x2e0>
 800ba64:	00803fc4 	movi	r2,255
 800ba68:	11815e2e 	bgeu	r2,r6,800bfe4 <__umoddi3+0x5d0>
 800ba6c:	01400204 	movi	r5,8
 800ba70:	2805883a 	mov	r2,r5
 800ba74:	314ad83a 	srl	r5,r6,r5
 800ba78:	00c20074 	movhi	r3,2049
 800ba7c:	18c07f04 	addi	r3,r3,508
 800ba80:	194b883a 	add	r5,r3,r5
 800ba84:	29000003 	ldbu	r4,0(r5)
 800ba88:	2089883a 	add	r4,r4,r2
 800ba8c:	00800804 	movi	r2,32
 800ba90:	1105c83a 	sub	r2,r2,r4
 800ba94:	10010c26 	beq	r2,zero,800bec8 <__umoddi3+0x4b4>
 800ba98:	88a2983a 	sll	r17,r17,r2
 800ba9c:	8108d83a 	srl	r4,r16,r4
 800baa0:	30a6983a 	sll	r19,r6,r2
 800baa4:	80a8983a 	sll	r20,r16,r2
 800baa8:	1025883a 	mov	r18,r2
 800baac:	892cb03a 	or	r22,r17,r4
 800bab0:	9822d43a 	srli	r17,r19,16
 800bab4:	b009883a 	mov	r4,r22
 800bab8:	9d7fffcc 	andi	r21,r19,65535
 800babc:	880b883a 	mov	r5,r17
 800bac0:	8001fec0 	call	8001fec <__umodsi3>
 800bac4:	b009883a 	mov	r4,r22
 800bac8:	880b883a 	mov	r5,r17
 800bacc:	102f883a 	mov	r23,r2
 800bad0:	8001fe40 	call	8001fe4 <__udivsi3>
 800bad4:	1009883a 	mov	r4,r2
 800bad8:	a80b883a 	mov	r5,r21
 800badc:	8001ff40 	call	8001ff4 <__mulsi3>
 800bae0:	b82e943a 	slli	r23,r23,16
 800bae4:	a008d43a 	srli	r4,r20,16
 800bae8:	b906b03a 	or	r3,r23,r4
 800baec:	1880042e 	bgeu	r3,r2,800bb00 <__umoddi3+0xec>
 800baf0:	1cc7883a 	add	r3,r3,r19
 800baf4:	1cc00236 	bltu	r3,r19,800bb00 <__umoddi3+0xec>
 800baf8:	1880012e 	bgeu	r3,r2,800bb00 <__umoddi3+0xec>
 800bafc:	1cc7883a 	add	r3,r3,r19
 800bb00:	18a1c83a 	sub	r16,r3,r2
 800bb04:	8009883a 	mov	r4,r16
 800bb08:	880b883a 	mov	r5,r17
 800bb0c:	8001fec0 	call	8001fec <__umodsi3>
 800bb10:	8009883a 	mov	r4,r16
 800bb14:	880b883a 	mov	r5,r17
 800bb18:	102d883a 	mov	r22,r2
 800bb1c:	8001fe40 	call	8001fe4 <__udivsi3>
 800bb20:	1009883a 	mov	r4,r2
 800bb24:	a80b883a 	mov	r5,r21
 800bb28:	b02c943a 	slli	r22,r22,16
 800bb2c:	8001ff40 	call	8001ff4 <__mulsi3>
 800bb30:	a13fffcc 	andi	r4,r20,65535
 800bb34:	b106b03a 	or	r3,r22,r4
 800bb38:	1880572e 	bgeu	r3,r2,800bc98 <__umoddi3+0x284>
 800bb3c:	00005206 	br	800bc88 <__umoddi3+0x274>
 800bb40:	29c05936 	bltu	r5,r7,800bca8 <__umoddi3+0x294>
 800bb44:	00bfffd4 	movui	r2,65535
 800bb48:	11c0652e 	bgeu	r2,r7,800bce0 <__umoddi3+0x2cc>
 800bb4c:	00804034 	movhi	r2,256
 800bb50:	10bfffc4 	addi	r2,r2,-1
 800bb54:	11c1172e 	bgeu	r2,r7,800bfb4 <__umoddi3+0x5a0>
 800bb58:	01400604 	movi	r5,24
 800bb5c:	282b883a 	mov	r21,r5
 800bb60:	394ad83a 	srl	r5,r7,r5
 800bb64:	00c20074 	movhi	r3,2049
 800bb68:	18c07f04 	addi	r3,r3,508
 800bb6c:	194b883a 	add	r5,r3,r5
 800bb70:	28800003 	ldbu	r2,0(r5)
 800bb74:	00c00804 	movi	r3,32
 800bb78:	156b883a 	add	r21,r2,r21
 800bb7c:	1d69c83a 	sub	r20,r3,r21
 800bb80:	a000671e 	bne	r20,zero,800bd20 <__umoddi3+0x30c>
 800bb84:	3c400136 	bltu	r7,r17,800bb8c <__umoddi3+0x178>
 800bb88:	81812336 	bltu	r16,r6,800c018 <__umoddi3+0x604>
 800bb8c:	8185c83a 	sub	r2,r16,r6
 800bb90:	89e3c83a 	sub	r17,r17,r7
 800bb94:	8087803a 	cmpltu	r3,r16,r2
 800bb98:	88edc83a 	sub	r22,r17,r3
 800bb9c:	b007883a 	mov	r3,r22
 800bba0:	00004306 	br	800bcb0 <__umoddi3+0x29c>
 800bba4:	3000041e 	bne	r6,zero,800bbb8 <__umoddi3+0x1a4>
 800bba8:	01000044 	movi	r4,1
 800bbac:	000b883a 	mov	r5,zero
 800bbb0:	8001fe40 	call	8001fe4 <__udivsi3>
 800bbb4:	1027883a 	mov	r19,r2
 800bbb8:	00bfffd4 	movui	r2,65535
 800bbbc:	14c0532e 	bgeu	r2,r19,800bd0c <__umoddi3+0x2f8>
 800bbc0:	00804034 	movhi	r2,256
 800bbc4:	10bfffc4 	addi	r2,r2,-1
 800bbc8:	14c1032e 	bgeu	r2,r19,800bfd8 <__umoddi3+0x5c4>
 800bbcc:	00800604 	movi	r2,24
 800bbd0:	1007883a 	mov	r3,r2
 800bbd4:	9884d83a 	srl	r2,r19,r2
 800bbd8:	01020074 	movhi	r4,2049
 800bbdc:	21007f04 	addi	r4,r4,508
 800bbe0:	2085883a 	add	r2,r4,r2
 800bbe4:	11000003 	ldbu	r4,0(r2)
 800bbe8:	00800804 	movi	r2,32
 800bbec:	20c7883a 	add	r3,r4,r3
 800bbf0:	10c5c83a 	sub	r2,r2,r3
 800bbf4:	1000b61e 	bne	r2,zero,800bed0 <__umoddi3+0x4bc>
 800bbf8:	982ad43a 	srli	r21,r19,16
 800bbfc:	8ce3c83a 	sub	r17,r17,r19
 800bc00:	9dbfffcc 	andi	r22,r19,65535
 800bc04:	0025883a 	mov	r18,zero
 800bc08:	8809883a 	mov	r4,r17
 800bc0c:	a80b883a 	mov	r5,r21
 800bc10:	8001fec0 	call	8001fec <__umodsi3>
 800bc14:	8809883a 	mov	r4,r17
 800bc18:	a80b883a 	mov	r5,r21
 800bc1c:	102f883a 	mov	r23,r2
 800bc20:	8001fe40 	call	8001fe4 <__udivsi3>
 800bc24:	1009883a 	mov	r4,r2
 800bc28:	b00b883a 	mov	r5,r22
 800bc2c:	8001ff40 	call	8001ff4 <__mulsi3>
 800bc30:	b82e943a 	slli	r23,r23,16
 800bc34:	a008d43a 	srli	r4,r20,16
 800bc38:	b906b03a 	or	r3,r23,r4
 800bc3c:	1880032e 	bgeu	r3,r2,800bc4c <__umoddi3+0x238>
 800bc40:	1cc7883a 	add	r3,r3,r19
 800bc44:	1cc00136 	bltu	r3,r19,800bc4c <__umoddi3+0x238>
 800bc48:	1880f136 	bltu	r3,r2,800c010 <__umoddi3+0x5fc>
 800bc4c:	18a1c83a 	sub	r16,r3,r2
 800bc50:	8009883a 	mov	r4,r16
 800bc54:	a80b883a 	mov	r5,r21
 800bc58:	8001fec0 	call	8001fec <__umodsi3>
 800bc5c:	8009883a 	mov	r4,r16
 800bc60:	a80b883a 	mov	r5,r21
 800bc64:	1023883a 	mov	r17,r2
 800bc68:	8001fe40 	call	8001fe4 <__udivsi3>
 800bc6c:	1009883a 	mov	r4,r2
 800bc70:	b00b883a 	mov	r5,r22
 800bc74:	8822943a 	slli	r17,r17,16
 800bc78:	8001ff40 	call	8001ff4 <__mulsi3>
 800bc7c:	a13fffcc 	andi	r4,r20,65535
 800bc80:	8906b03a 	or	r3,r17,r4
 800bc84:	1880042e 	bgeu	r3,r2,800bc98 <__umoddi3+0x284>
 800bc88:	1cc7883a 	add	r3,r3,r19
 800bc8c:	1cc00236 	bltu	r3,r19,800bc98 <__umoddi3+0x284>
 800bc90:	1880012e 	bgeu	r3,r2,800bc98 <__umoddi3+0x284>
 800bc94:	1cc7883a 	add	r3,r3,r19
 800bc98:	1887c83a 	sub	r3,r3,r2
 800bc9c:	1c84d83a 	srl	r2,r3,r18
 800bca0:	0007883a 	mov	r3,zero
 800bca4:	00000206 	br	800bcb0 <__umoddi3+0x29c>
 800bca8:	2005883a 	mov	r2,r4
 800bcac:	2807883a 	mov	r3,r5
 800bcb0:	dfc00b17 	ldw	ra,44(sp)
 800bcb4:	df000a17 	ldw	fp,40(sp)
 800bcb8:	ddc00917 	ldw	r23,36(sp)
 800bcbc:	dd800817 	ldw	r22,32(sp)
 800bcc0:	dd400717 	ldw	r21,28(sp)
 800bcc4:	dd000617 	ldw	r20,24(sp)
 800bcc8:	dcc00517 	ldw	r19,20(sp)
 800bccc:	dc800417 	ldw	r18,16(sp)
 800bcd0:	dc400317 	ldw	r17,12(sp)
 800bcd4:	dc000217 	ldw	r16,8(sp)
 800bcd8:	dec00c04 	addi	sp,sp,48
 800bcdc:	f800283a 	ret
 800bce0:	00803fc4 	movi	r2,255
 800bce4:	11c0b02e 	bgeu	r2,r7,800bfa8 <__umoddi3+0x594>
 800bce8:	01400204 	movi	r5,8
 800bcec:	282b883a 	mov	r21,r5
 800bcf0:	003f9b06 	br	800bb60 <__alt_data_end+0xfc00bb60>
 800bcf4:	00804034 	movhi	r2,256
 800bcf8:	10bfffc4 	addi	r2,r2,-1
 800bcfc:	1180b02e 	bgeu	r2,r6,800bfc0 <__umoddi3+0x5ac>
 800bd00:	01400604 	movi	r5,24
 800bd04:	2805883a 	mov	r2,r5
 800bd08:	003f5a06 	br	800ba74 <__alt_data_end+0xfc00ba74>
 800bd0c:	00803fc4 	movi	r2,255
 800bd10:	14c0ae2e 	bgeu	r2,r19,800bfcc <__umoddi3+0x5b8>
 800bd14:	00800204 	movi	r2,8
 800bd18:	1007883a 	mov	r3,r2
 800bd1c:	003fad06 	br	800bbd4 <__alt_data_end+0xfc00bbd4>
 800bd20:	3d0a983a 	sll	r5,r7,r20
 800bd24:	356cd83a 	srl	r22,r6,r21
 800bd28:	8d78d83a 	srl	fp,r17,r21
 800bd2c:	8d10983a 	sll	r8,r17,r20
 800bd30:	2dacb03a 	or	r22,r5,r22
 800bd34:	b02ed43a 	srli	r23,r22,16
 800bd38:	8564d83a 	srl	r18,r16,r21
 800bd3c:	e009883a 	mov	r4,fp
 800bd40:	b80b883a 	mov	r5,r23
 800bd44:	44a4b03a 	or	r18,r8,r18
 800bd48:	3526983a 	sll	r19,r6,r20
 800bd4c:	8001fec0 	call	8001fec <__umodsi3>
 800bd50:	e009883a 	mov	r4,fp
 800bd54:	b80b883a 	mov	r5,r23
 800bd58:	b47fffcc 	andi	r17,r22,65535
 800bd5c:	d8800015 	stw	r2,0(sp)
 800bd60:	8001fe40 	call	8001fe4 <__udivsi3>
 800bd64:	1009883a 	mov	r4,r2
 800bd68:	880b883a 	mov	r5,r17
 800bd6c:	1039883a 	mov	fp,r2
 800bd70:	8001ff40 	call	8001ff4 <__mulsi3>
 800bd74:	d9800017 	ldw	r6,0(sp)
 800bd78:	9008d43a 	srli	r4,r18,16
 800bd7c:	8520983a 	sll	r16,r16,r20
 800bd80:	300c943a 	slli	r6,r6,16
 800bd84:	3106b03a 	or	r3,r6,r4
 800bd88:	1880042e 	bgeu	r3,r2,800bd9c <__umoddi3+0x388>
 800bd8c:	1d87883a 	add	r3,r3,r22
 800bd90:	e13fffc4 	addi	r4,fp,-1
 800bd94:	1d809a2e 	bgeu	r3,r22,800c000 <__umoddi3+0x5ec>
 800bd98:	2039883a 	mov	fp,r4
 800bd9c:	1887c83a 	sub	r3,r3,r2
 800bda0:	1809883a 	mov	r4,r3
 800bda4:	b80b883a 	mov	r5,r23
 800bda8:	d8c00115 	stw	r3,4(sp)
 800bdac:	8001fec0 	call	8001fec <__umodsi3>
 800bdb0:	d8c00117 	ldw	r3,4(sp)
 800bdb4:	b80b883a 	mov	r5,r23
 800bdb8:	d8800015 	stw	r2,0(sp)
 800bdbc:	1809883a 	mov	r4,r3
 800bdc0:	8001fe40 	call	8001fe4 <__udivsi3>
 800bdc4:	880b883a 	mov	r5,r17
 800bdc8:	1009883a 	mov	r4,r2
 800bdcc:	102f883a 	mov	r23,r2
 800bdd0:	8001ff40 	call	8001ff4 <__mulsi3>
 800bdd4:	d9800017 	ldw	r6,0(sp)
 800bdd8:	947fffcc 	andi	r17,r18,65535
 800bddc:	300c943a 	slli	r6,r6,16
 800bde0:	3464b03a 	or	r18,r6,r17
 800bde4:	9080042e 	bgeu	r18,r2,800bdf8 <__umoddi3+0x3e4>
 800bde8:	95a5883a 	add	r18,r18,r22
 800bdec:	b8ffffc4 	addi	r3,r23,-1
 800bdf0:	95807f2e 	bgeu	r18,r22,800bff0 <__umoddi3+0x5dc>
 800bdf4:	182f883a 	mov	r23,r3
 800bdf8:	e038943a 	slli	fp,fp,16
 800bdfc:	980cd43a 	srli	r6,r19,16
 800be00:	98ffffcc 	andi	r3,r19,65535
 800be04:	bf38b03a 	or	fp,r23,fp
 800be08:	e02ed43a 	srli	r23,fp,16
 800be0c:	e73fffcc 	andi	fp,fp,65535
 800be10:	180b883a 	mov	r5,r3
 800be14:	e009883a 	mov	r4,fp
 800be18:	d9800015 	stw	r6,0(sp)
 800be1c:	d8c00115 	stw	r3,4(sp)
 800be20:	90a5c83a 	sub	r18,r18,r2
 800be24:	8001ff40 	call	8001ff4 <__mulsi3>
 800be28:	d8c00117 	ldw	r3,4(sp)
 800be2c:	b809883a 	mov	r4,r23
 800be30:	1023883a 	mov	r17,r2
 800be34:	180b883a 	mov	r5,r3
 800be38:	8001ff40 	call	8001ff4 <__mulsi3>
 800be3c:	d9800017 	ldw	r6,0(sp)
 800be40:	b809883a 	mov	r4,r23
 800be44:	d8800115 	stw	r2,4(sp)
 800be48:	300b883a 	mov	r5,r6
 800be4c:	302f883a 	mov	r23,r6
 800be50:	8001ff40 	call	8001ff4 <__mulsi3>
 800be54:	e009883a 	mov	r4,fp
 800be58:	b80b883a 	mov	r5,r23
 800be5c:	d8800015 	stw	r2,0(sp)
 800be60:	8001ff40 	call	8001ff4 <__mulsi3>
 800be64:	d8c00117 	ldw	r3,4(sp)
 800be68:	880cd43a 	srli	r6,r17,16
 800be6c:	d9c00017 	ldw	r7,0(sp)
 800be70:	1885883a 	add	r2,r3,r2
 800be74:	118d883a 	add	r6,r2,r6
 800be78:	30c0022e 	bgeu	r6,r3,800be84 <__umoddi3+0x470>
 800be7c:	00800074 	movhi	r2,1
 800be80:	388f883a 	add	r7,r7,r2
 800be84:	3006d43a 	srli	r3,r6,16
 800be88:	300c943a 	slli	r6,r6,16
 800be8c:	8c7fffcc 	andi	r17,r17,65535
 800be90:	38c7883a 	add	r3,r7,r3
 800be94:	3463883a 	add	r17,r6,r17
 800be98:	90c03d36 	bltu	r18,r3,800bf90 <__umoddi3+0x57c>
 800be9c:	90c06026 	beq	r18,r3,800c020 <__umoddi3+0x60c>
 800bea0:	90c9c83a 	sub	r4,r18,r3
 800bea4:	880f883a 	mov	r7,r17
 800bea8:	81cfc83a 	sub	r7,r16,r7
 800beac:	81c7803a 	cmpltu	r3,r16,r7
 800beb0:	20c7c83a 	sub	r3,r4,r3
 800beb4:	1d44983a 	sll	r2,r3,r21
 800beb8:	3d0ed83a 	srl	r7,r7,r20
 800bebc:	1d06d83a 	srl	r3,r3,r20
 800bec0:	11c4b03a 	or	r2,r2,r7
 800bec4:	003f7a06 	br	800bcb0 <__alt_data_end+0xfc00bcb0>
 800bec8:	0025883a 	mov	r18,zero
 800becc:	003ef806 	br	800bab0 <__alt_data_end+0xfc00bab0>
 800bed0:	98a6983a 	sll	r19,r19,r2
 800bed4:	88e8d83a 	srl	r20,r17,r3
 800bed8:	80c6d83a 	srl	r3,r16,r3
 800bedc:	982ad43a 	srli	r21,r19,16
 800bee0:	88a2983a 	sll	r17,r17,r2
 800bee4:	a009883a 	mov	r4,r20
 800bee8:	a80b883a 	mov	r5,r21
 800beec:	88eeb03a 	or	r23,r17,r3
 800bef0:	1025883a 	mov	r18,r2
 800bef4:	8001fec0 	call	8001fec <__umodsi3>
 800bef8:	a009883a 	mov	r4,r20
 800befc:	a80b883a 	mov	r5,r21
 800bf00:	1023883a 	mov	r17,r2
 800bf04:	9dbfffcc 	andi	r22,r19,65535
 800bf08:	8001fe40 	call	8001fe4 <__udivsi3>
 800bf0c:	1009883a 	mov	r4,r2
 800bf10:	b00b883a 	mov	r5,r22
 800bf14:	8001ff40 	call	8001ff4 <__mulsi3>
 800bf18:	8822943a 	slli	r17,r17,16
 800bf1c:	b808d43a 	srli	r4,r23,16
 800bf20:	84a8983a 	sll	r20,r16,r18
 800bf24:	8906b03a 	or	r3,r17,r4
 800bf28:	1880042e 	bgeu	r3,r2,800bf3c <__umoddi3+0x528>
 800bf2c:	1cc7883a 	add	r3,r3,r19
 800bf30:	1cc00236 	bltu	r3,r19,800bf3c <__umoddi3+0x528>
 800bf34:	1880012e 	bgeu	r3,r2,800bf3c <__umoddi3+0x528>
 800bf38:	1cc7883a 	add	r3,r3,r19
 800bf3c:	18a1c83a 	sub	r16,r3,r2
 800bf40:	8009883a 	mov	r4,r16
 800bf44:	a80b883a 	mov	r5,r21
 800bf48:	8001fec0 	call	8001fec <__umodsi3>
 800bf4c:	8009883a 	mov	r4,r16
 800bf50:	a80b883a 	mov	r5,r21
 800bf54:	1039883a 	mov	fp,r2
 800bf58:	8001fe40 	call	8001fe4 <__udivsi3>
 800bf5c:	1009883a 	mov	r4,r2
 800bf60:	b00b883a 	mov	r5,r22
 800bf64:	8001ff40 	call	8001ff4 <__mulsi3>
 800bf68:	e006943a 	slli	r3,fp,16
 800bf6c:	b93fffcc 	andi	r4,r23,65535
 800bf70:	1906b03a 	or	r3,r3,r4
 800bf74:	1880042e 	bgeu	r3,r2,800bf88 <__umoddi3+0x574>
 800bf78:	1cc7883a 	add	r3,r3,r19
 800bf7c:	1cc00236 	bltu	r3,r19,800bf88 <__umoddi3+0x574>
 800bf80:	1880012e 	bgeu	r3,r2,800bf88 <__umoddi3+0x574>
 800bf84:	1cc7883a 	add	r3,r3,r19
 800bf88:	18a3c83a 	sub	r17,r3,r2
 800bf8c:	003f1e06 	br	800bc08 <__alt_data_end+0xfc00bc08>
 800bf90:	8ccfc83a 	sub	r7,r17,r19
 800bf94:	1d89c83a 	sub	r4,r3,r22
 800bf98:	89e3803a 	cmpltu	r17,r17,r7
 800bf9c:	2463c83a 	sub	r17,r4,r17
 800bfa0:	9449c83a 	sub	r4,r18,r17
 800bfa4:	003fc006 	br	800bea8 <__alt_data_end+0xfc00bea8>
 800bfa8:	000b883a 	mov	r5,zero
 800bfac:	002b883a 	mov	r21,zero
 800bfb0:	003eeb06 	br	800bb60 <__alt_data_end+0xfc00bb60>
 800bfb4:	01400404 	movi	r5,16
 800bfb8:	282b883a 	mov	r21,r5
 800bfbc:	003ee806 	br	800bb60 <__alt_data_end+0xfc00bb60>
 800bfc0:	01400404 	movi	r5,16
 800bfc4:	2805883a 	mov	r2,r5
 800bfc8:	003eaa06 	br	800ba74 <__alt_data_end+0xfc00ba74>
 800bfcc:	0005883a 	mov	r2,zero
 800bfd0:	0007883a 	mov	r3,zero
 800bfd4:	003eff06 	br	800bbd4 <__alt_data_end+0xfc00bbd4>
 800bfd8:	00800404 	movi	r2,16
 800bfdc:	1007883a 	mov	r3,r2
 800bfe0:	003efc06 	br	800bbd4 <__alt_data_end+0xfc00bbd4>
 800bfe4:	000b883a 	mov	r5,zero
 800bfe8:	0005883a 	mov	r2,zero
 800bfec:	003ea106 	br	800ba74 <__alt_data_end+0xfc00ba74>
 800bff0:	90bf802e 	bgeu	r18,r2,800bdf4 <__alt_data_end+0xfc00bdf4>
 800bff4:	bdffff84 	addi	r23,r23,-2
 800bff8:	95a5883a 	add	r18,r18,r22
 800bffc:	003f7e06 	br	800bdf8 <__alt_data_end+0xfc00bdf8>
 800c000:	18bf652e 	bgeu	r3,r2,800bd98 <__alt_data_end+0xfc00bd98>
 800c004:	e73fff84 	addi	fp,fp,-2
 800c008:	1d87883a 	add	r3,r3,r22
 800c00c:	003f6306 	br	800bd9c <__alt_data_end+0xfc00bd9c>
 800c010:	1cc7883a 	add	r3,r3,r19
 800c014:	003f0d06 	br	800bc4c <__alt_data_end+0xfc00bc4c>
 800c018:	8005883a 	mov	r2,r16
 800c01c:	003edf06 	br	800bb9c <__alt_data_end+0xfc00bb9c>
 800c020:	847fdb36 	bltu	r16,r17,800bf90 <__alt_data_end+0xfc00bf90>
 800c024:	880f883a 	mov	r7,r17
 800c028:	0009883a 	mov	r4,zero
 800c02c:	003f9e06 	br	800bea8 <__alt_data_end+0xfc00bea8>

0800c030 <__adddf3>:
 800c030:	02000434 	movhi	r8,16
 800c034:	423fffc4 	addi	r8,r8,-1
 800c038:	defffb04 	addi	sp,sp,-20
 800c03c:	2a12703a 	and	r9,r5,r8
 800c040:	2806d7fa 	srli	r3,r5,31
 800c044:	3a10703a 	and	r8,r7,r8
 800c048:	3804d53a 	srli	r2,r7,20
 800c04c:	3014d77a 	srli	r10,r6,29
 800c050:	dc000015 	stw	r16,0(sp)
 800c054:	481290fa 	slli	r9,r9,3
 800c058:	2820d53a 	srli	r16,r5,20
 800c05c:	401090fa 	slli	r8,r8,3
 800c060:	200ad77a 	srli	r5,r4,29
 800c064:	380ed7fa 	srli	r7,r7,31
 800c068:	dc800215 	stw	r18,8(sp)
 800c06c:	dc400115 	stw	r17,4(sp)
 800c070:	dfc00415 	stw	ra,16(sp)
 800c074:	dcc00315 	stw	r19,12(sp)
 800c078:	1c803fcc 	andi	r18,r3,255
 800c07c:	8401ffcc 	andi	r16,r16,2047
 800c080:	494ab03a 	or	r5,r9,r5
 800c084:	202290fa 	slli	r17,r4,3
 800c088:	1081ffcc 	andi	r2,r2,2047
 800c08c:	4290b03a 	or	r8,r8,r10
 800c090:	300c90fa 	slli	r6,r6,3
 800c094:	91c07026 	beq	r18,r7,800c258 <__adddf3+0x228>
 800c098:	8087c83a 	sub	r3,r16,r2
 800c09c:	00c0b30e 	bge	zero,r3,800c36c <__adddf3+0x33c>
 800c0a0:	10002a1e 	bne	r2,zero,800c14c <__adddf3+0x11c>
 800c0a4:	4184b03a 	or	r2,r8,r6
 800c0a8:	1000991e 	bne	r2,zero,800c310 <__adddf3+0x2e0>
 800c0ac:	888001cc 	andi	r2,r17,7
 800c0b0:	10005b26 	beq	r2,zero,800c220 <__adddf3+0x1f0>
 800c0b4:	88c003cc 	andi	r3,r17,15
 800c0b8:	00800104 	movi	r2,4
 800c0bc:	18805826 	beq	r3,r2,800c220 <__adddf3+0x1f0>
 800c0c0:	89800104 	addi	r6,r17,4
 800c0c4:	3463803a 	cmpltu	r17,r6,r17
 800c0c8:	2c4b883a 	add	r5,r5,r17
 800c0cc:	2880202c 	andhi	r2,r5,128
 800c0d0:	9007883a 	mov	r3,r18
 800c0d4:	3023883a 	mov	r17,r6
 800c0d8:	10005426 	beq	r2,zero,800c22c <__adddf3+0x1fc>
 800c0dc:	84000044 	addi	r16,r16,1
 800c0e0:	0081ffc4 	movi	r2,2047
 800c0e4:	8080c126 	beq	r16,r2,800c3ec <__adddf3+0x3bc>
 800c0e8:	013fe034 	movhi	r4,65408
 800c0ec:	213fffc4 	addi	r4,r4,-1
 800c0f0:	290a703a 	and	r5,r5,r4
 800c0f4:	2804977a 	slli	r2,r5,29
 800c0f8:	280a927a 	slli	r5,r5,9
 800c0fc:	8822d0fa 	srli	r17,r17,3
 800c100:	8401ffcc 	andi	r16,r16,2047
 800c104:	2808d33a 	srli	r4,r5,12
 800c108:	1444b03a 	or	r2,r2,r17
 800c10c:	8401ffcc 	andi	r16,r16,2047
 800c110:	800a953a 	slli	r5,r16,20
 800c114:	18c03fcc 	andi	r3,r3,255
 800c118:	04000434 	movhi	r16,16
 800c11c:	180697fa 	slli	r3,r3,31
 800c120:	843fffc4 	addi	r16,r16,-1
 800c124:	2420703a 	and	r16,r4,r16
 800c128:	8160b03a 	or	r16,r16,r5
 800c12c:	80c6b03a 	or	r3,r16,r3
 800c130:	dfc00417 	ldw	ra,16(sp)
 800c134:	dcc00317 	ldw	r19,12(sp)
 800c138:	dc800217 	ldw	r18,8(sp)
 800c13c:	dc400117 	ldw	r17,4(sp)
 800c140:	dc000017 	ldw	r16,0(sp)
 800c144:	dec00504 	addi	sp,sp,20
 800c148:	f800283a 	ret
 800c14c:	0081ffc4 	movi	r2,2047
 800c150:	80bfd626 	beq	r16,r2,800c0ac <__alt_data_end+0xfc00c0ac>
 800c154:	42002034 	orhi	r8,r8,128
 800c158:	00800e04 	movi	r2,56
 800c15c:	10c0a616 	blt	r2,r3,800c3f8 <__adddf3+0x3c8>
 800c160:	008007c4 	movi	r2,31
 800c164:	10c0c916 	blt	r2,r3,800c48c <__adddf3+0x45c>
 800c168:	00800804 	movi	r2,32
 800c16c:	10c5c83a 	sub	r2,r2,r3
 800c170:	408e983a 	sll	r7,r8,r2
 800c174:	30c8d83a 	srl	r4,r6,r3
 800c178:	3084983a 	sll	r2,r6,r2
 800c17c:	40c6d83a 	srl	r3,r8,r3
 800c180:	390cb03a 	or	r6,r7,r4
 800c184:	1004c03a 	cmpne	r2,r2,zero
 800c188:	308cb03a 	or	r6,r6,r2
 800c18c:	898dc83a 	sub	r6,r17,r6
 800c190:	89a3803a 	cmpltu	r17,r17,r6
 800c194:	28cbc83a 	sub	r5,r5,r3
 800c198:	2c4bc83a 	sub	r5,r5,r17
 800c19c:	3023883a 	mov	r17,r6
 800c1a0:	2880202c 	andhi	r2,r5,128
 800c1a4:	10006d26 	beq	r2,zero,800c35c <__adddf3+0x32c>
 800c1a8:	04c02034 	movhi	r19,128
 800c1ac:	9cffffc4 	addi	r19,r19,-1
 800c1b0:	2ce6703a 	and	r19,r5,r19
 800c1b4:	98007e26 	beq	r19,zero,800c3b0 <__adddf3+0x380>
 800c1b8:	9809883a 	mov	r4,r19
 800c1bc:	8001e640 	call	8001e64 <__clzsi2>
 800c1c0:	10fffe04 	addi	r3,r2,-8
 800c1c4:	010007c4 	movi	r4,31
 800c1c8:	20c07f16 	blt	r4,r3,800c3c8 <__adddf3+0x398>
 800c1cc:	01400a04 	movi	r5,40
 800c1d0:	2885c83a 	sub	r2,r5,r2
 800c1d4:	888ad83a 	srl	r5,r17,r2
 800c1d8:	98e6983a 	sll	r19,r19,r3
 800c1dc:	88e2983a 	sll	r17,r17,r3
 800c1e0:	2ce6b03a 	or	r19,r5,r19
 800c1e4:	1c007c16 	blt	r3,r16,800c3d8 <__adddf3+0x3a8>
 800c1e8:	1c21c83a 	sub	r16,r3,r16
 800c1ec:	81400044 	addi	r5,r16,1
 800c1f0:	00c007c4 	movi	r3,31
 800c1f4:	19409816 	blt	r3,r5,800c458 <__adddf3+0x428>
 800c1f8:	1c21c83a 	sub	r16,r3,r16
 800c1fc:	8c08983a 	sll	r4,r17,r16
 800c200:	8946d83a 	srl	r3,r17,r5
 800c204:	9c20983a 	sll	r16,r19,r16
 800c208:	2008c03a 	cmpne	r4,r4,zero
 800c20c:	994ad83a 	srl	r5,r19,r5
 800c210:	1c06b03a 	or	r3,r3,r16
 800c214:	1922b03a 	or	r17,r3,r4
 800c218:	0021883a 	mov	r16,zero
 800c21c:	003fa306 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c220:	2880202c 	andhi	r2,r5,128
 800c224:	9007883a 	mov	r3,r18
 800c228:	103fac1e 	bne	r2,zero,800c0dc <__alt_data_end+0xfc00c0dc>
 800c22c:	2804977a 	slli	r2,r5,29
 800c230:	8822d0fa 	srli	r17,r17,3
 800c234:	0101ffc4 	movi	r4,2047
 800c238:	280ad0fa 	srli	r5,r5,3
 800c23c:	1444b03a 	or	r2,r2,r17
 800c240:	81002c26 	beq	r16,r4,800c2f4 <__adddf3+0x2c4>
 800c244:	8120703a 	and	r16,r16,r4
 800c248:	01000434 	movhi	r4,16
 800c24c:	213fffc4 	addi	r4,r4,-1
 800c250:	2908703a 	and	r4,r5,r4
 800c254:	003fad06 	br	800c10c <__alt_data_end+0xfc00c10c>
 800c258:	8089c83a 	sub	r4,r16,r2
 800c25c:	01006a0e 	bge	zero,r4,800c408 <__adddf3+0x3d8>
 800c260:	10003326 	beq	r2,zero,800c330 <__adddf3+0x300>
 800c264:	0081ffc4 	movi	r2,2047
 800c268:	80bf9026 	beq	r16,r2,800c0ac <__alt_data_end+0xfc00c0ac>
 800c26c:	42002034 	orhi	r8,r8,128
 800c270:	00800e04 	movi	r2,56
 800c274:	1100b116 	blt	r2,r4,800c53c <__adddf3+0x50c>
 800c278:	008007c4 	movi	r2,31
 800c27c:	1100e216 	blt	r2,r4,800c608 <__adddf3+0x5d8>
 800c280:	00800804 	movi	r2,32
 800c284:	1105c83a 	sub	r2,r2,r4
 800c288:	4092983a 	sll	r9,r8,r2
 800c28c:	310ed83a 	srl	r7,r6,r4
 800c290:	3084983a 	sll	r2,r6,r2
 800c294:	4110d83a 	srl	r8,r8,r4
 800c298:	49ccb03a 	or	r6,r9,r7
 800c29c:	1004c03a 	cmpne	r2,r2,zero
 800c2a0:	308cb03a 	or	r6,r6,r2
 800c2a4:	344d883a 	add	r6,r6,r17
 800c2a8:	3463803a 	cmpltu	r17,r6,r17
 800c2ac:	414b883a 	add	r5,r8,r5
 800c2b0:	2c4b883a 	add	r5,r5,r17
 800c2b4:	3023883a 	mov	r17,r6
 800c2b8:	2880202c 	andhi	r2,r5,128
 800c2bc:	10002726 	beq	r2,zero,800c35c <__adddf3+0x32c>
 800c2c0:	84000044 	addi	r16,r16,1
 800c2c4:	0081ffc4 	movi	r2,2047
 800c2c8:	8080ae26 	beq	r16,r2,800c584 <__adddf3+0x554>
 800c2cc:	00bfe034 	movhi	r2,65408
 800c2d0:	10bfffc4 	addi	r2,r2,-1
 800c2d4:	288a703a 	and	r5,r5,r2
 800c2d8:	880cd07a 	srli	r6,r17,1
 800c2dc:	280897fa 	slli	r4,r5,31
 800c2e0:	88c0004c 	andi	r3,r17,1
 800c2e4:	30e2b03a 	or	r17,r6,r3
 800c2e8:	280ad07a 	srli	r5,r5,1
 800c2ec:	8922b03a 	or	r17,r17,r4
 800c2f0:	003f6e06 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c2f4:	1148b03a 	or	r4,r2,r5
 800c2f8:	20003c26 	beq	r4,zero,800c3ec <__adddf3+0x3bc>
 800c2fc:	29000234 	orhi	r4,r5,8
 800c300:	01400434 	movhi	r5,16
 800c304:	297fffc4 	addi	r5,r5,-1
 800c308:	2148703a 	and	r4,r4,r5
 800c30c:	003f7f06 	br	800c10c <__alt_data_end+0xfc00c10c>
 800c310:	18ffffc4 	addi	r3,r3,-1
 800c314:	18004d1e 	bne	r3,zero,800c44c <__adddf3+0x41c>
 800c318:	898dc83a 	sub	r6,r17,r6
 800c31c:	89a3803a 	cmpltu	r17,r17,r6
 800c320:	2a0bc83a 	sub	r5,r5,r8
 800c324:	2c4bc83a 	sub	r5,r5,r17
 800c328:	3023883a 	mov	r17,r6
 800c32c:	003f9c06 	br	800c1a0 <__alt_data_end+0xfc00c1a0>
 800c330:	4184b03a 	or	r2,r8,r6
 800c334:	103f5d26 	beq	r2,zero,800c0ac <__alt_data_end+0xfc00c0ac>
 800c338:	213fffc4 	addi	r4,r4,-1
 800c33c:	203fd926 	beq	r4,zero,800c2a4 <__alt_data_end+0xfc00c2a4>
 800c340:	0081ffc4 	movi	r2,2047
 800c344:	80bfca1e 	bne	r16,r2,800c270 <__alt_data_end+0xfc00c270>
 800c348:	003f5806 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c34c:	10c8b03a 	or	r4,r2,r3
 800c350:	20008b26 	beq	r4,zero,800c580 <__adddf3+0x550>
 800c354:	100b883a 	mov	r5,r2
 800c358:	1823883a 	mov	r17,r3
 800c35c:	888001cc 	andi	r2,r17,7
 800c360:	103f541e 	bne	r2,zero,800c0b4 <__alt_data_end+0xfc00c0b4>
 800c364:	9007883a 	mov	r3,r18
 800c368:	003fb006 	br	800c22c <__alt_data_end+0xfc00c22c>
 800c36c:	1800531e 	bne	r3,zero,800c4bc <__adddf3+0x48c>
 800c370:	80800044 	addi	r2,r16,1
 800c374:	1081ffcc 	andi	r2,r2,2047
 800c378:	00c00044 	movi	r3,1
 800c37c:	1880990e 	bge	r3,r2,800c5e4 <__adddf3+0x5b4>
 800c380:	8985c83a 	sub	r2,r17,r6
 800c384:	8887803a 	cmpltu	r3,r17,r2
 800c388:	2a27c83a 	sub	r19,r5,r8
 800c38c:	98e7c83a 	sub	r19,r19,r3
 800c390:	98c0202c 	andhi	r3,r19,128
 800c394:	18006226 	beq	r3,zero,800c520 <__adddf3+0x4f0>
 800c398:	3463c83a 	sub	r17,r6,r17
 800c39c:	4151c83a 	sub	r8,r8,r5
 800c3a0:	344d803a 	cmpltu	r6,r6,r17
 800c3a4:	41a7c83a 	sub	r19,r8,r6
 800c3a8:	3825883a 	mov	r18,r7
 800c3ac:	983f821e 	bne	r19,zero,800c1b8 <__alt_data_end+0xfc00c1b8>
 800c3b0:	8809883a 	mov	r4,r17
 800c3b4:	8001e640 	call	8001e64 <__clzsi2>
 800c3b8:	10800804 	addi	r2,r2,32
 800c3bc:	10fffe04 	addi	r3,r2,-8
 800c3c0:	010007c4 	movi	r4,31
 800c3c4:	20ff810e 	bge	r4,r3,800c1cc <__alt_data_end+0xfc00c1cc>
 800c3c8:	14fff604 	addi	r19,r2,-40
 800c3cc:	8ce6983a 	sll	r19,r17,r19
 800c3d0:	0023883a 	mov	r17,zero
 800c3d4:	1c3f840e 	bge	r3,r16,800c1e8 <__alt_data_end+0xfc00c1e8>
 800c3d8:	017fe034 	movhi	r5,65408
 800c3dc:	297fffc4 	addi	r5,r5,-1
 800c3e0:	80e1c83a 	sub	r16,r16,r3
 800c3e4:	994a703a 	and	r5,r19,r5
 800c3e8:	003f3006 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c3ec:	0009883a 	mov	r4,zero
 800c3f0:	0005883a 	mov	r2,zero
 800c3f4:	003f4506 	br	800c10c <__alt_data_end+0xfc00c10c>
 800c3f8:	418cb03a 	or	r6,r8,r6
 800c3fc:	300cc03a 	cmpne	r6,r6,zero
 800c400:	0007883a 	mov	r3,zero
 800c404:	003f6106 	br	800c18c <__alt_data_end+0xfc00c18c>
 800c408:	2000921e 	bne	r4,zero,800c654 <__adddf3+0x624>
 800c40c:	80800044 	addi	r2,r16,1
 800c410:	11c1ffcc 	andi	r7,r2,2047
 800c414:	01000044 	movi	r4,1
 800c418:	21c0610e 	bge	r4,r7,800c5a0 <__adddf3+0x570>
 800c41c:	0101ffc4 	movi	r4,2047
 800c420:	1100a326 	beq	r2,r4,800c6b0 <__adddf3+0x680>
 800c424:	344d883a 	add	r6,r6,r17
 800c428:	3463803a 	cmpltu	r17,r6,r17
 800c42c:	414b883a 	add	r5,r8,r5
 800c430:	2c4b883a 	add	r5,r5,r17
 800c434:	282297fa 	slli	r17,r5,31
 800c438:	300cd07a 	srli	r6,r6,1
 800c43c:	280ad07a 	srli	r5,r5,1
 800c440:	1021883a 	mov	r16,r2
 800c444:	89a2b03a 	or	r17,r17,r6
 800c448:	003f1806 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c44c:	0081ffc4 	movi	r2,2047
 800c450:	80bf411e 	bne	r16,r2,800c158 <__alt_data_end+0xfc00c158>
 800c454:	003f1506 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c458:	80bff844 	addi	r2,r16,-31
 800c45c:	00c00804 	movi	r3,32
 800c460:	9884d83a 	srl	r2,r19,r2
 800c464:	28c04a26 	beq	r5,r3,800c590 <__adddf3+0x560>
 800c468:	00c00fc4 	movi	r3,63
 800c46c:	1c21c83a 	sub	r16,r3,r16
 800c470:	9c26983a 	sll	r19,r19,r16
 800c474:	9c62b03a 	or	r17,r19,r17
 800c478:	8822c03a 	cmpne	r17,r17,zero
 800c47c:	88a2b03a 	or	r17,r17,r2
 800c480:	000b883a 	mov	r5,zero
 800c484:	0021883a 	mov	r16,zero
 800c488:	003fb406 	br	800c35c <__alt_data_end+0xfc00c35c>
 800c48c:	18bff804 	addi	r2,r3,-32
 800c490:	01000804 	movi	r4,32
 800c494:	4084d83a 	srl	r2,r8,r2
 800c498:	19003f26 	beq	r3,r4,800c598 <__adddf3+0x568>
 800c49c:	01001004 	movi	r4,64
 800c4a0:	20c7c83a 	sub	r3,r4,r3
 800c4a4:	40d0983a 	sll	r8,r8,r3
 800c4a8:	418cb03a 	or	r6,r8,r6
 800c4ac:	300cc03a 	cmpne	r6,r6,zero
 800c4b0:	308cb03a 	or	r6,r6,r2
 800c4b4:	0007883a 	mov	r3,zero
 800c4b8:	003f3406 	br	800c18c <__alt_data_end+0xfc00c18c>
 800c4bc:	80002326 	beq	r16,zero,800c54c <__adddf3+0x51c>
 800c4c0:	0101ffc4 	movi	r4,2047
 800c4c4:	11005e26 	beq	r2,r4,800c640 <__adddf3+0x610>
 800c4c8:	00c7c83a 	sub	r3,zero,r3
 800c4cc:	29402034 	orhi	r5,r5,128
 800c4d0:	01000e04 	movi	r4,56
 800c4d4:	20c07216 	blt	r4,r3,800c6a0 <__adddf3+0x670>
 800c4d8:	010007c4 	movi	r4,31
 800c4dc:	20c0ce16 	blt	r4,r3,800c818 <__adddf3+0x7e8>
 800c4e0:	01000804 	movi	r4,32
 800c4e4:	20c9c83a 	sub	r4,r4,r3
 800c4e8:	2914983a 	sll	r10,r5,r4
 800c4ec:	88d2d83a 	srl	r9,r17,r3
 800c4f0:	8908983a 	sll	r4,r17,r4
 800c4f4:	28c6d83a 	srl	r3,r5,r3
 800c4f8:	5262b03a 	or	r17,r10,r9
 800c4fc:	2008c03a 	cmpne	r4,r4,zero
 800c500:	8922b03a 	or	r17,r17,r4
 800c504:	3463c83a 	sub	r17,r6,r17
 800c508:	40c7c83a 	sub	r3,r8,r3
 800c50c:	344d803a 	cmpltu	r6,r6,r17
 800c510:	198bc83a 	sub	r5,r3,r6
 800c514:	1021883a 	mov	r16,r2
 800c518:	3825883a 	mov	r18,r7
 800c51c:	003f2006 	br	800c1a0 <__alt_data_end+0xfc00c1a0>
 800c520:	9886b03a 	or	r3,r19,r2
 800c524:	1800141e 	bne	r3,zero,800c578 <__adddf3+0x548>
 800c528:	0007883a 	mov	r3,zero
 800c52c:	000b883a 	mov	r5,zero
 800c530:	0023883a 	mov	r17,zero
 800c534:	0021883a 	mov	r16,zero
 800c538:	003f3c06 	br	800c22c <__alt_data_end+0xfc00c22c>
 800c53c:	418cb03a 	or	r6,r8,r6
 800c540:	300cc03a 	cmpne	r6,r6,zero
 800c544:	0011883a 	mov	r8,zero
 800c548:	003f5606 	br	800c2a4 <__alt_data_end+0xfc00c2a4>
 800c54c:	2c48b03a 	or	r4,r5,r17
 800c550:	20003b26 	beq	r4,zero,800c640 <__adddf3+0x610>
 800c554:	00c6303a 	nor	r3,zero,r3
 800c558:	1800371e 	bne	r3,zero,800c638 <__adddf3+0x608>
 800c55c:	3463c83a 	sub	r17,r6,r17
 800c560:	414bc83a 	sub	r5,r8,r5
 800c564:	344d803a 	cmpltu	r6,r6,r17
 800c568:	298bc83a 	sub	r5,r5,r6
 800c56c:	1021883a 	mov	r16,r2
 800c570:	3825883a 	mov	r18,r7
 800c574:	003f0a06 	br	800c1a0 <__alt_data_end+0xfc00c1a0>
 800c578:	1023883a 	mov	r17,r2
 800c57c:	003f0d06 	br	800c1b4 <__alt_data_end+0xfc00c1b4>
 800c580:	0007883a 	mov	r3,zero
 800c584:	000b883a 	mov	r5,zero
 800c588:	0023883a 	mov	r17,zero
 800c58c:	003f2706 	br	800c22c <__alt_data_end+0xfc00c22c>
 800c590:	0027883a 	mov	r19,zero
 800c594:	003fb706 	br	800c474 <__alt_data_end+0xfc00c474>
 800c598:	0011883a 	mov	r8,zero
 800c59c:	003fc206 	br	800c4a8 <__alt_data_end+0xfc00c4a8>
 800c5a0:	2c44b03a 	or	r2,r5,r17
 800c5a4:	8000871e 	bne	r16,zero,800c7c4 <__adddf3+0x794>
 800c5a8:	1000b126 	beq	r2,zero,800c870 <__adddf3+0x840>
 800c5ac:	4184b03a 	or	r2,r8,r6
 800c5b0:	103ebe26 	beq	r2,zero,800c0ac <__alt_data_end+0xfc00c0ac>
 800c5b4:	3445883a 	add	r2,r6,r17
 800c5b8:	1463803a 	cmpltu	r17,r2,r17
 800c5bc:	414b883a 	add	r5,r8,r5
 800c5c0:	2c4b883a 	add	r5,r5,r17
 800c5c4:	28c0202c 	andhi	r3,r5,128
 800c5c8:	1023883a 	mov	r17,r2
 800c5cc:	183f6326 	beq	r3,zero,800c35c <__alt_data_end+0xfc00c35c>
 800c5d0:	00bfe034 	movhi	r2,65408
 800c5d4:	10bfffc4 	addi	r2,r2,-1
 800c5d8:	2021883a 	mov	r16,r4
 800c5dc:	288a703a 	and	r5,r5,r2
 800c5e0:	003eb206 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c5e4:	2c44b03a 	or	r2,r5,r17
 800c5e8:	8000251e 	bne	r16,zero,800c680 <__adddf3+0x650>
 800c5ec:	10004b1e 	bne	r2,zero,800c71c <__adddf3+0x6ec>
 800c5f0:	4184b03a 	or	r2,r8,r6
 800c5f4:	103fe226 	beq	r2,zero,800c580 <__alt_data_end+0xfc00c580>
 800c5f8:	400b883a 	mov	r5,r8
 800c5fc:	3023883a 	mov	r17,r6
 800c600:	3825883a 	mov	r18,r7
 800c604:	003ea906 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c608:	20bff804 	addi	r2,r4,-32
 800c60c:	01c00804 	movi	r7,32
 800c610:	4084d83a 	srl	r2,r8,r2
 800c614:	21c07e26 	beq	r4,r7,800c810 <__adddf3+0x7e0>
 800c618:	01c01004 	movi	r7,64
 800c61c:	3909c83a 	sub	r4,r7,r4
 800c620:	4110983a 	sll	r8,r8,r4
 800c624:	418cb03a 	or	r6,r8,r6
 800c628:	300cc03a 	cmpne	r6,r6,zero
 800c62c:	308cb03a 	or	r6,r6,r2
 800c630:	0011883a 	mov	r8,zero
 800c634:	003f1b06 	br	800c2a4 <__alt_data_end+0xfc00c2a4>
 800c638:	0101ffc4 	movi	r4,2047
 800c63c:	113fa41e 	bne	r2,r4,800c4d0 <__alt_data_end+0xfc00c4d0>
 800c640:	400b883a 	mov	r5,r8
 800c644:	3023883a 	mov	r17,r6
 800c648:	1021883a 	mov	r16,r2
 800c64c:	3825883a 	mov	r18,r7
 800c650:	003e9606 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c654:	80001a1e 	bne	r16,zero,800c6c0 <__adddf3+0x690>
 800c658:	2c4eb03a 	or	r7,r5,r17
 800c65c:	38005526 	beq	r7,zero,800c7b4 <__adddf3+0x784>
 800c660:	0108303a 	nor	r4,zero,r4
 800c664:	2000511e 	bne	r4,zero,800c7ac <__adddf3+0x77c>
 800c668:	89a3883a 	add	r17,r17,r6
 800c66c:	414b883a 	add	r5,r8,r5
 800c670:	898d803a 	cmpltu	r6,r17,r6
 800c674:	298b883a 	add	r5,r5,r6
 800c678:	1021883a 	mov	r16,r2
 800c67c:	003f0e06 	br	800c2b8 <__alt_data_end+0xfc00c2b8>
 800c680:	1000341e 	bne	r2,zero,800c754 <__adddf3+0x724>
 800c684:	4184b03a 	or	r2,r8,r6
 800c688:	10006f26 	beq	r2,zero,800c848 <__adddf3+0x818>
 800c68c:	400b883a 	mov	r5,r8
 800c690:	3023883a 	mov	r17,r6
 800c694:	3825883a 	mov	r18,r7
 800c698:	0401ffc4 	movi	r16,2047
 800c69c:	003e8306 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c6a0:	2c62b03a 	or	r17,r5,r17
 800c6a4:	8822c03a 	cmpne	r17,r17,zero
 800c6a8:	0007883a 	mov	r3,zero
 800c6ac:	003f9506 	br	800c504 <__alt_data_end+0xfc00c504>
 800c6b0:	1021883a 	mov	r16,r2
 800c6b4:	000b883a 	mov	r5,zero
 800c6b8:	0023883a 	mov	r17,zero
 800c6bc:	003edb06 	br	800c22c <__alt_data_end+0xfc00c22c>
 800c6c0:	01c1ffc4 	movi	r7,2047
 800c6c4:	11c03b26 	beq	r2,r7,800c7b4 <__adddf3+0x784>
 800c6c8:	0109c83a 	sub	r4,zero,r4
 800c6cc:	29402034 	orhi	r5,r5,128
 800c6d0:	01c00e04 	movi	r7,56
 800c6d4:	39006216 	blt	r7,r4,800c860 <__adddf3+0x830>
 800c6d8:	01c007c4 	movi	r7,31
 800c6dc:	39006b16 	blt	r7,r4,800c88c <__adddf3+0x85c>
 800c6e0:	01c00804 	movi	r7,32
 800c6e4:	390fc83a 	sub	r7,r7,r4
 800c6e8:	29d4983a 	sll	r10,r5,r7
 800c6ec:	8912d83a 	srl	r9,r17,r4
 800c6f0:	89ce983a 	sll	r7,r17,r7
 800c6f4:	2908d83a 	srl	r4,r5,r4
 800c6f8:	5262b03a 	or	r17,r10,r9
 800c6fc:	380ac03a 	cmpne	r5,r7,zero
 800c700:	8962b03a 	or	r17,r17,r5
 800c704:	89a3883a 	add	r17,r17,r6
 800c708:	2211883a 	add	r8,r4,r8
 800c70c:	898d803a 	cmpltu	r6,r17,r6
 800c710:	418b883a 	add	r5,r8,r6
 800c714:	1021883a 	mov	r16,r2
 800c718:	003ee706 	br	800c2b8 <__alt_data_end+0xfc00c2b8>
 800c71c:	4184b03a 	or	r2,r8,r6
 800c720:	103e6226 	beq	r2,zero,800c0ac <__alt_data_end+0xfc00c0ac>
 800c724:	8987c83a 	sub	r3,r17,r6
 800c728:	88c9803a 	cmpltu	r4,r17,r3
 800c72c:	2a05c83a 	sub	r2,r5,r8
 800c730:	1105c83a 	sub	r2,r2,r4
 800c734:	1100202c 	andhi	r4,r2,128
 800c738:	203f0426 	beq	r4,zero,800c34c <__alt_data_end+0xfc00c34c>
 800c73c:	3463c83a 	sub	r17,r6,r17
 800c740:	414bc83a 	sub	r5,r8,r5
 800c744:	344d803a 	cmpltu	r6,r6,r17
 800c748:	298bc83a 	sub	r5,r5,r6
 800c74c:	3825883a 	mov	r18,r7
 800c750:	003e5606 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c754:	4184b03a 	or	r2,r8,r6
 800c758:	10002b26 	beq	r2,zero,800c808 <__adddf3+0x7d8>
 800c75c:	2804d0fa 	srli	r2,r5,3
 800c760:	8822d0fa 	srli	r17,r17,3
 800c764:	280a977a 	slli	r5,r5,29
 800c768:	10c0022c 	andhi	r3,r2,8
 800c76c:	2c62b03a 	or	r17,r5,r17
 800c770:	18000826 	beq	r3,zero,800c794 <__adddf3+0x764>
 800c774:	4008d0fa 	srli	r4,r8,3
 800c778:	20c0022c 	andhi	r3,r4,8
 800c77c:	1800051e 	bne	r3,zero,800c794 <__adddf3+0x764>
 800c780:	300cd0fa 	srli	r6,r6,3
 800c784:	4010977a 	slli	r8,r8,29
 800c788:	2005883a 	mov	r2,r4
 800c78c:	3825883a 	mov	r18,r7
 800c790:	41a2b03a 	or	r17,r8,r6
 800c794:	880ad77a 	srli	r5,r17,29
 800c798:	100490fa 	slli	r2,r2,3
 800c79c:	882290fa 	slli	r17,r17,3
 800c7a0:	0401ffc4 	movi	r16,2047
 800c7a4:	288ab03a 	or	r5,r5,r2
 800c7a8:	003e4006 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c7ac:	01c1ffc4 	movi	r7,2047
 800c7b0:	11ffc71e 	bne	r2,r7,800c6d0 <__alt_data_end+0xfc00c6d0>
 800c7b4:	400b883a 	mov	r5,r8
 800c7b8:	3023883a 	mov	r17,r6
 800c7bc:	1021883a 	mov	r16,r2
 800c7c0:	003e3a06 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c7c4:	10002d26 	beq	r2,zero,800c87c <__adddf3+0x84c>
 800c7c8:	4184b03a 	or	r2,r8,r6
 800c7cc:	10000e26 	beq	r2,zero,800c808 <__adddf3+0x7d8>
 800c7d0:	2804d0fa 	srli	r2,r5,3
 800c7d4:	8822d0fa 	srli	r17,r17,3
 800c7d8:	280a977a 	slli	r5,r5,29
 800c7dc:	10c0022c 	andhi	r3,r2,8
 800c7e0:	2c62b03a 	or	r17,r5,r17
 800c7e4:	183feb26 	beq	r3,zero,800c794 <__alt_data_end+0xfc00c794>
 800c7e8:	4008d0fa 	srli	r4,r8,3
 800c7ec:	20c0022c 	andhi	r3,r4,8
 800c7f0:	183fe81e 	bne	r3,zero,800c794 <__alt_data_end+0xfc00c794>
 800c7f4:	300cd0fa 	srli	r6,r6,3
 800c7f8:	4010977a 	slli	r8,r8,29
 800c7fc:	2005883a 	mov	r2,r4
 800c800:	41a2b03a 	or	r17,r8,r6
 800c804:	003fe306 	br	800c794 <__alt_data_end+0xfc00c794>
 800c808:	0401ffc4 	movi	r16,2047
 800c80c:	003e2706 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c810:	0011883a 	mov	r8,zero
 800c814:	003f8306 	br	800c624 <__alt_data_end+0xfc00c624>
 800c818:	193ff804 	addi	r4,r3,-32
 800c81c:	02400804 	movi	r9,32
 800c820:	2908d83a 	srl	r4,r5,r4
 800c824:	1a402526 	beq	r3,r9,800c8bc <__adddf3+0x88c>
 800c828:	02401004 	movi	r9,64
 800c82c:	48c7c83a 	sub	r3,r9,r3
 800c830:	28ca983a 	sll	r5,r5,r3
 800c834:	2c62b03a 	or	r17,r5,r17
 800c838:	8822c03a 	cmpne	r17,r17,zero
 800c83c:	8922b03a 	or	r17,r17,r4
 800c840:	0007883a 	mov	r3,zero
 800c844:	003f2f06 	br	800c504 <__alt_data_end+0xfc00c504>
 800c848:	01402034 	movhi	r5,128
 800c84c:	0007883a 	mov	r3,zero
 800c850:	297fffc4 	addi	r5,r5,-1
 800c854:	047ffe04 	movi	r17,-8
 800c858:	0401ffc4 	movi	r16,2047
 800c85c:	003e7306 	br	800c22c <__alt_data_end+0xfc00c22c>
 800c860:	2c62b03a 	or	r17,r5,r17
 800c864:	8822c03a 	cmpne	r17,r17,zero
 800c868:	0009883a 	mov	r4,zero
 800c86c:	003fa506 	br	800c704 <__alt_data_end+0xfc00c704>
 800c870:	400b883a 	mov	r5,r8
 800c874:	3023883a 	mov	r17,r6
 800c878:	003e0c06 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c87c:	400b883a 	mov	r5,r8
 800c880:	3023883a 	mov	r17,r6
 800c884:	0401ffc4 	movi	r16,2047
 800c888:	003e0806 	br	800c0ac <__alt_data_end+0xfc00c0ac>
 800c88c:	21fff804 	addi	r7,r4,-32
 800c890:	02400804 	movi	r9,32
 800c894:	29ced83a 	srl	r7,r5,r7
 800c898:	22400a26 	beq	r4,r9,800c8c4 <__adddf3+0x894>
 800c89c:	02401004 	movi	r9,64
 800c8a0:	4909c83a 	sub	r4,r9,r4
 800c8a4:	290a983a 	sll	r5,r5,r4
 800c8a8:	2c62b03a 	or	r17,r5,r17
 800c8ac:	8822c03a 	cmpne	r17,r17,zero
 800c8b0:	89e2b03a 	or	r17,r17,r7
 800c8b4:	0009883a 	mov	r4,zero
 800c8b8:	003f9206 	br	800c704 <__alt_data_end+0xfc00c704>
 800c8bc:	000b883a 	mov	r5,zero
 800c8c0:	003fdc06 	br	800c834 <__alt_data_end+0xfc00c834>
 800c8c4:	000b883a 	mov	r5,zero
 800c8c8:	003ff706 	br	800c8a8 <__alt_data_end+0xfc00c8a8>

0800c8cc <__eqdf2>:
 800c8cc:	2804d53a 	srli	r2,r5,20
 800c8d0:	3806d53a 	srli	r3,r7,20
 800c8d4:	02000434 	movhi	r8,16
 800c8d8:	423fffc4 	addi	r8,r8,-1
 800c8dc:	1081ffcc 	andi	r2,r2,2047
 800c8e0:	0241ffc4 	movi	r9,2047
 800c8e4:	2a14703a 	and	r10,r5,r8
 800c8e8:	18c1ffcc 	andi	r3,r3,2047
 800c8ec:	3a10703a 	and	r8,r7,r8
 800c8f0:	280ad7fa 	srli	r5,r5,31
 800c8f4:	380ed7fa 	srli	r7,r7,31
 800c8f8:	12400f26 	beq	r2,r9,800c938 <__eqdf2+0x6c>
 800c8fc:	0241ffc4 	movi	r9,2047
 800c900:	1a400326 	beq	r3,r9,800c910 <__eqdf2+0x44>
 800c904:	10c00526 	beq	r2,r3,800c91c <__eqdf2+0x50>
 800c908:	00800044 	movi	r2,1
 800c90c:	f800283a 	ret
 800c910:	4192b03a 	or	r9,r8,r6
 800c914:	483ffc1e 	bne	r9,zero,800c908 <__alt_data_end+0xfc00c908>
 800c918:	10fffb1e 	bne	r2,r3,800c908 <__alt_data_end+0xfc00c908>
 800c91c:	523ffa1e 	bne	r10,r8,800c908 <__alt_data_end+0xfc00c908>
 800c920:	21bff91e 	bne	r4,r6,800c908 <__alt_data_end+0xfc00c908>
 800c924:	29c00826 	beq	r5,r7,800c948 <__eqdf2+0x7c>
 800c928:	103ff71e 	bne	r2,zero,800c908 <__alt_data_end+0xfc00c908>
 800c92c:	5104b03a 	or	r2,r10,r4
 800c930:	1004c03a 	cmpne	r2,r2,zero
 800c934:	f800283a 	ret
 800c938:	5112b03a 	or	r9,r10,r4
 800c93c:	483fef26 	beq	r9,zero,800c8fc <__alt_data_end+0xfc00c8fc>
 800c940:	00800044 	movi	r2,1
 800c944:	f800283a 	ret
 800c948:	0005883a 	mov	r2,zero
 800c94c:	f800283a 	ret

0800c950 <__gedf2>:
 800c950:	2804d53a 	srli	r2,r5,20
 800c954:	3806d53a 	srli	r3,r7,20
 800c958:	02000434 	movhi	r8,16
 800c95c:	423fffc4 	addi	r8,r8,-1
 800c960:	0241ffc4 	movi	r9,2047
 800c964:	1081ffcc 	andi	r2,r2,2047
 800c968:	2a14703a 	and	r10,r5,r8
 800c96c:	1a46703a 	and	r3,r3,r9
 800c970:	3a10703a 	and	r8,r7,r8
 800c974:	280ad7fa 	srli	r5,r5,31
 800c978:	380ed7fa 	srli	r7,r7,31
 800c97c:	12400b26 	beq	r2,r9,800c9ac <__gedf2+0x5c>
 800c980:	1a401626 	beq	r3,r9,800c9dc <__gedf2+0x8c>
 800c984:	10000c1e 	bne	r2,zero,800c9b8 <__gedf2+0x68>
 800c988:	5112b03a 	or	r9,r10,r4
 800c98c:	4813003a 	cmpeq	r9,r9,zero
 800c990:	4817883a 	mov	r11,r9
 800c994:	18000c1e 	bne	r3,zero,800c9c8 <__gedf2+0x78>
 800c998:	4198b03a 	or	r12,r8,r6
 800c99c:	60000a1e 	bne	r12,zero,800c9c8 <__gedf2+0x78>
 800c9a0:	48001326 	beq	r9,zero,800c9f0 <__gedf2+0xa0>
 800c9a4:	0005883a 	mov	r2,zero
 800c9a8:	f800283a 	ret
 800c9ac:	5112b03a 	or	r9,r10,r4
 800c9b0:	4800191e 	bne	r9,zero,800ca18 <__gedf2+0xc8>
 800c9b4:	18800926 	beq	r3,r2,800c9dc <__gedf2+0x8c>
 800c9b8:	18000b1e 	bne	r3,zero,800c9e8 <__gedf2+0x98>
 800c9bc:	4192b03a 	or	r9,r8,r6
 800c9c0:	0017883a 	mov	r11,zero
 800c9c4:	48000a26 	beq	r9,zero,800c9f0 <__gedf2+0xa0>
 800c9c8:	39c03fcc 	andi	r7,r7,255
 800c9cc:	58000726 	beq	r11,zero,800c9ec <__gedf2+0x9c>
 800c9d0:	3800081e 	bne	r7,zero,800c9f4 <__gedf2+0xa4>
 800c9d4:	00bfffc4 	movi	r2,-1
 800c9d8:	f800283a 	ret
 800c9dc:	4192b03a 	or	r9,r8,r6
 800c9e0:	48000d1e 	bne	r9,zero,800ca18 <__gedf2+0xc8>
 800c9e4:	103fe826 	beq	r2,zero,800c988 <__alt_data_end+0xfc00c988>
 800c9e8:	39c03fcc 	andi	r7,r7,255
 800c9ec:	29c00326 	beq	r5,r7,800c9fc <__gedf2+0xac>
 800c9f0:	283ff81e 	bne	r5,zero,800c9d4 <__alt_data_end+0xfc00c9d4>
 800c9f4:	00800044 	movi	r2,1
 800c9f8:	f800283a 	ret
 800c9fc:	18bffc16 	blt	r3,r2,800c9f0 <__alt_data_end+0xfc00c9f0>
 800ca00:	10c00316 	blt	r2,r3,800ca10 <__gedf2+0xc0>
 800ca04:	42bffa36 	bltu	r8,r10,800c9f0 <__alt_data_end+0xfc00c9f0>
 800ca08:	52000526 	beq	r10,r8,800ca20 <__gedf2+0xd0>
 800ca0c:	523fe52e 	bgeu	r10,r8,800c9a4 <__alt_data_end+0xfc00c9a4>
 800ca10:	283ff026 	beq	r5,zero,800c9d4 <__alt_data_end+0xfc00c9d4>
 800ca14:	003ff706 	br	800c9f4 <__alt_data_end+0xfc00c9f4>
 800ca18:	00bfff84 	movi	r2,-2
 800ca1c:	f800283a 	ret
 800ca20:	313ff336 	bltu	r6,r4,800c9f0 <__alt_data_end+0xfc00c9f0>
 800ca24:	21bfdf2e 	bgeu	r4,r6,800c9a4 <__alt_data_end+0xfc00c9a4>
 800ca28:	283fea26 	beq	r5,zero,800c9d4 <__alt_data_end+0xfc00c9d4>
 800ca2c:	003ff106 	br	800c9f4 <__alt_data_end+0xfc00c9f4>

0800ca30 <__ledf2>:
 800ca30:	2804d53a 	srli	r2,r5,20
 800ca34:	3810d53a 	srli	r8,r7,20
 800ca38:	00c00434 	movhi	r3,16
 800ca3c:	18ffffc4 	addi	r3,r3,-1
 800ca40:	0241ffc4 	movi	r9,2047
 800ca44:	1081ffcc 	andi	r2,r2,2047
 800ca48:	28d4703a 	and	r10,r5,r3
 800ca4c:	4250703a 	and	r8,r8,r9
 800ca50:	38c6703a 	and	r3,r7,r3
 800ca54:	280ad7fa 	srli	r5,r5,31
 800ca58:	380ed7fa 	srli	r7,r7,31
 800ca5c:	12400b26 	beq	r2,r9,800ca8c <__ledf2+0x5c>
 800ca60:	42401926 	beq	r8,r9,800cac8 <__ledf2+0x98>
 800ca64:	10000c1e 	bne	r2,zero,800ca98 <__ledf2+0x68>
 800ca68:	5112b03a 	or	r9,r10,r4
 800ca6c:	4813003a 	cmpeq	r9,r9,zero
 800ca70:	4817883a 	mov	r11,r9
 800ca74:	40000f26 	beq	r8,zero,800cab4 <__ledf2+0x84>
 800ca78:	39c03fcc 	andi	r7,r7,255
 800ca7c:	58001826 	beq	r11,zero,800cae0 <__ledf2+0xb0>
 800ca80:	38000a1e 	bne	r7,zero,800caac <__ledf2+0x7c>
 800ca84:	00bfffc4 	movi	r2,-1
 800ca88:	f800283a 	ret
 800ca8c:	5112b03a 	or	r9,r10,r4
 800ca90:	48000f1e 	bne	r9,zero,800cad0 <__ledf2+0xa0>
 800ca94:	40800c26 	beq	r8,r2,800cac8 <__ledf2+0x98>
 800ca98:	4000101e 	bne	r8,zero,800cadc <__ledf2+0xac>
 800ca9c:	1992b03a 	or	r9,r3,r6
 800caa0:	0017883a 	mov	r11,zero
 800caa4:	483ff41e 	bne	r9,zero,800ca78 <__alt_data_end+0xfc00ca78>
 800caa8:	283ff61e 	bne	r5,zero,800ca84 <__alt_data_end+0xfc00ca84>
 800caac:	00800044 	movi	r2,1
 800cab0:	f800283a 	ret
 800cab4:	1998b03a 	or	r12,r3,r6
 800cab8:	603fef1e 	bne	r12,zero,800ca78 <__alt_data_end+0xfc00ca78>
 800cabc:	483ffa26 	beq	r9,zero,800caa8 <__alt_data_end+0xfc00caa8>
 800cac0:	0005883a 	mov	r2,zero
 800cac4:	f800283a 	ret
 800cac8:	1992b03a 	or	r9,r3,r6
 800cacc:	48000226 	beq	r9,zero,800cad8 <__ledf2+0xa8>
 800cad0:	00800084 	movi	r2,2
 800cad4:	f800283a 	ret
 800cad8:	103fe326 	beq	r2,zero,800ca68 <__alt_data_end+0xfc00ca68>
 800cadc:	39c03fcc 	andi	r7,r7,255
 800cae0:	29fff11e 	bne	r5,r7,800caa8 <__alt_data_end+0xfc00caa8>
 800cae4:	40bff016 	blt	r8,r2,800caa8 <__alt_data_end+0xfc00caa8>
 800cae8:	12000316 	blt	r2,r8,800caf8 <__ledf2+0xc8>
 800caec:	1abfee36 	bltu	r3,r10,800caa8 <__alt_data_end+0xfc00caa8>
 800caf0:	50c00326 	beq	r10,r3,800cb00 <__ledf2+0xd0>
 800caf4:	50fff22e 	bgeu	r10,r3,800cac0 <__alt_data_end+0xfc00cac0>
 800caf8:	283fe226 	beq	r5,zero,800ca84 <__alt_data_end+0xfc00ca84>
 800cafc:	003feb06 	br	800caac <__alt_data_end+0xfc00caac>
 800cb00:	313fe936 	bltu	r6,r4,800caa8 <__alt_data_end+0xfc00caa8>
 800cb04:	21bfee2e 	bgeu	r4,r6,800cac0 <__alt_data_end+0xfc00cac0>
 800cb08:	283fde26 	beq	r5,zero,800ca84 <__alt_data_end+0xfc00ca84>
 800cb0c:	003fe706 	br	800caac <__alt_data_end+0xfc00caac>

0800cb10 <__subdf3>:
 800cb10:	00c00434 	movhi	r3,16
 800cb14:	18ffffc4 	addi	r3,r3,-1
 800cb18:	defffb04 	addi	sp,sp,-20
 800cb1c:	28d2703a 	and	r9,r5,r3
 800cb20:	3814d53a 	srli	r10,r7,20
 800cb24:	38c6703a 	and	r3,r7,r3
 800cb28:	3004d77a 	srli	r2,r6,29
 800cb2c:	dc800215 	stw	r18,8(sp)
 800cb30:	dc000015 	stw	r16,0(sp)
 800cb34:	2824d7fa 	srli	r18,r5,31
 800cb38:	2820d53a 	srli	r16,r5,20
 800cb3c:	481290fa 	slli	r9,r9,3
 800cb40:	200ad77a 	srli	r5,r4,29
 800cb44:	180690fa 	slli	r3,r3,3
 800cb48:	dc400115 	stw	r17,4(sp)
 800cb4c:	dfc00415 	stw	ra,16(sp)
 800cb50:	202290fa 	slli	r17,r4,3
 800cb54:	dcc00315 	stw	r19,12(sp)
 800cb58:	5281ffcc 	andi	r10,r10,2047
 800cb5c:	0101ffc4 	movi	r4,2047
 800cb60:	9011883a 	mov	r8,r18
 800cb64:	8401ffcc 	andi	r16,r16,2047
 800cb68:	94803fcc 	andi	r18,r18,255
 800cb6c:	494ab03a 	or	r5,r9,r5
 800cb70:	380ed7fa 	srli	r7,r7,31
 800cb74:	1886b03a 	or	r3,r3,r2
 800cb78:	300c90fa 	slli	r6,r6,3
 800cb7c:	51009026 	beq	r10,r4,800cdc0 <__subdf3+0x2b0>
 800cb80:	39c0005c 	xori	r7,r7,1
 800cb84:	8285c83a 	sub	r2,r16,r10
 800cb88:	91c06f26 	beq	r18,r7,800cd48 <__subdf3+0x238>
 800cb8c:	0080b10e 	bge	zero,r2,800ce54 <__subdf3+0x344>
 800cb90:	50002a1e 	bne	r10,zero,800cc3c <__subdf3+0x12c>
 800cb94:	1988b03a 	or	r4,r3,r6
 800cb98:	2000941e 	bne	r4,zero,800cdec <__subdf3+0x2dc>
 800cb9c:	888001cc 	andi	r2,r17,7
 800cba0:	10005b26 	beq	r2,zero,800cd10 <__subdf3+0x200>
 800cba4:	88c003cc 	andi	r3,r17,15
 800cba8:	00800104 	movi	r2,4
 800cbac:	18805826 	beq	r3,r2,800cd10 <__subdf3+0x200>
 800cbb0:	88c00104 	addi	r3,r17,4
 800cbb4:	1c63803a 	cmpltu	r17,r3,r17
 800cbb8:	2c4b883a 	add	r5,r5,r17
 800cbbc:	2880202c 	andhi	r2,r5,128
 800cbc0:	9200004c 	andi	r8,r18,1
 800cbc4:	1823883a 	mov	r17,r3
 800cbc8:	10005426 	beq	r2,zero,800cd1c <__subdf3+0x20c>
 800cbcc:	84000044 	addi	r16,r16,1
 800cbd0:	0081ffc4 	movi	r2,2047
 800cbd4:	8080bf26 	beq	r16,r2,800ced4 <__subdf3+0x3c4>
 800cbd8:	013fe034 	movhi	r4,65408
 800cbdc:	213fffc4 	addi	r4,r4,-1
 800cbe0:	290a703a 	and	r5,r5,r4
 800cbe4:	2804977a 	slli	r2,r5,29
 800cbe8:	280a927a 	slli	r5,r5,9
 800cbec:	8822d0fa 	srli	r17,r17,3
 800cbf0:	8401ffcc 	andi	r16,r16,2047
 800cbf4:	2808d33a 	srli	r4,r5,12
 800cbf8:	1444b03a 	or	r2,r2,r17
 800cbfc:	8401ffcc 	andi	r16,r16,2047
 800cc00:	800a953a 	slli	r5,r16,20
 800cc04:	40c03fcc 	andi	r3,r8,255
 800cc08:	04000434 	movhi	r16,16
 800cc0c:	180697fa 	slli	r3,r3,31
 800cc10:	843fffc4 	addi	r16,r16,-1
 800cc14:	2420703a 	and	r16,r4,r16
 800cc18:	8160b03a 	or	r16,r16,r5
 800cc1c:	80c6b03a 	or	r3,r16,r3
 800cc20:	dfc00417 	ldw	ra,16(sp)
 800cc24:	dcc00317 	ldw	r19,12(sp)
 800cc28:	dc800217 	ldw	r18,8(sp)
 800cc2c:	dc400117 	ldw	r17,4(sp)
 800cc30:	dc000017 	ldw	r16,0(sp)
 800cc34:	dec00504 	addi	sp,sp,20
 800cc38:	f800283a 	ret
 800cc3c:	0101ffc4 	movi	r4,2047
 800cc40:	813fd626 	beq	r16,r4,800cb9c <__alt_data_end+0xfc00cb9c>
 800cc44:	18c02034 	orhi	r3,r3,128
 800cc48:	01000e04 	movi	r4,56
 800cc4c:	2080a416 	blt	r4,r2,800cee0 <__subdf3+0x3d0>
 800cc50:	010007c4 	movi	r4,31
 800cc54:	2080c716 	blt	r4,r2,800cf74 <__subdf3+0x464>
 800cc58:	01000804 	movi	r4,32
 800cc5c:	2089c83a 	sub	r4,r4,r2
 800cc60:	1910983a 	sll	r8,r3,r4
 800cc64:	308ed83a 	srl	r7,r6,r2
 800cc68:	3108983a 	sll	r4,r6,r4
 800cc6c:	1884d83a 	srl	r2,r3,r2
 800cc70:	41ccb03a 	or	r6,r8,r7
 800cc74:	2008c03a 	cmpne	r4,r4,zero
 800cc78:	310cb03a 	or	r6,r6,r4
 800cc7c:	898dc83a 	sub	r6,r17,r6
 800cc80:	89a3803a 	cmpltu	r17,r17,r6
 800cc84:	288bc83a 	sub	r5,r5,r2
 800cc88:	2c4bc83a 	sub	r5,r5,r17
 800cc8c:	3023883a 	mov	r17,r6
 800cc90:	2880202c 	andhi	r2,r5,128
 800cc94:	10006b26 	beq	r2,zero,800ce44 <__subdf3+0x334>
 800cc98:	04c02034 	movhi	r19,128
 800cc9c:	9cffffc4 	addi	r19,r19,-1
 800cca0:	2ce6703a 	and	r19,r5,r19
 800cca4:	98007c26 	beq	r19,zero,800ce98 <__subdf3+0x388>
 800cca8:	9809883a 	mov	r4,r19
 800ccac:	8001e640 	call	8001e64 <__clzsi2>
 800ccb0:	10fffe04 	addi	r3,r2,-8
 800ccb4:	010007c4 	movi	r4,31
 800ccb8:	20c07d16 	blt	r4,r3,800ceb0 <__subdf3+0x3a0>
 800ccbc:	01400a04 	movi	r5,40
 800ccc0:	2885c83a 	sub	r2,r5,r2
 800ccc4:	888ad83a 	srl	r5,r17,r2
 800ccc8:	98e6983a 	sll	r19,r19,r3
 800cccc:	88e2983a 	sll	r17,r17,r3
 800ccd0:	2ce6b03a 	or	r19,r5,r19
 800ccd4:	1c007a16 	blt	r3,r16,800cec0 <__subdf3+0x3b0>
 800ccd8:	1c21c83a 	sub	r16,r3,r16
 800ccdc:	81400044 	addi	r5,r16,1
 800cce0:	00c007c4 	movi	r3,31
 800cce4:	19409616 	blt	r3,r5,800cf40 <__subdf3+0x430>
 800cce8:	1c21c83a 	sub	r16,r3,r16
 800ccec:	8c08983a 	sll	r4,r17,r16
 800ccf0:	8946d83a 	srl	r3,r17,r5
 800ccf4:	9c20983a 	sll	r16,r19,r16
 800ccf8:	2008c03a 	cmpne	r4,r4,zero
 800ccfc:	994ad83a 	srl	r5,r19,r5
 800cd00:	1c06b03a 	or	r3,r3,r16
 800cd04:	1922b03a 	or	r17,r3,r4
 800cd08:	0021883a 	mov	r16,zero
 800cd0c:	003fa306 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800cd10:	2880202c 	andhi	r2,r5,128
 800cd14:	9200004c 	andi	r8,r18,1
 800cd18:	103fac1e 	bne	r2,zero,800cbcc <__alt_data_end+0xfc00cbcc>
 800cd1c:	2804977a 	slli	r2,r5,29
 800cd20:	8822d0fa 	srli	r17,r17,3
 800cd24:	00c1ffc4 	movi	r3,2047
 800cd28:	280ad0fa 	srli	r5,r5,3
 800cd2c:	1444b03a 	or	r2,r2,r17
 800cd30:	80c02726 	beq	r16,r3,800cdd0 <__subdf3+0x2c0>
 800cd34:	01000434 	movhi	r4,16
 800cd38:	213fffc4 	addi	r4,r4,-1
 800cd3c:	80e0703a 	and	r16,r16,r3
 800cd40:	2908703a 	and	r4,r5,r4
 800cd44:	003fad06 	br	800cbfc <__alt_data_end+0xfc00cbfc>
 800cd48:	0080690e 	bge	zero,r2,800cef0 <__subdf3+0x3e0>
 800cd4c:	50002f26 	beq	r10,zero,800ce0c <__subdf3+0x2fc>
 800cd50:	0101ffc4 	movi	r4,2047
 800cd54:	813f9126 	beq	r16,r4,800cb9c <__alt_data_end+0xfc00cb9c>
 800cd58:	18c02034 	orhi	r3,r3,128
 800cd5c:	01000e04 	movi	r4,56
 800cd60:	2080b00e 	bge	r4,r2,800d024 <__subdf3+0x514>
 800cd64:	198cb03a 	or	r6,r3,r6
 800cd68:	300ec03a 	cmpne	r7,r6,zero
 800cd6c:	0005883a 	mov	r2,zero
 800cd70:	3c4f883a 	add	r7,r7,r17
 800cd74:	3c63803a 	cmpltu	r17,r7,r17
 800cd78:	114b883a 	add	r5,r2,r5
 800cd7c:	2c4b883a 	add	r5,r5,r17
 800cd80:	3823883a 	mov	r17,r7
 800cd84:	2880202c 	andhi	r2,r5,128
 800cd88:	10002e26 	beq	r2,zero,800ce44 <__subdf3+0x334>
 800cd8c:	84000044 	addi	r16,r16,1
 800cd90:	0081ffc4 	movi	r2,2047
 800cd94:	8080de26 	beq	r16,r2,800d110 <__subdf3+0x600>
 800cd98:	00bfe034 	movhi	r2,65408
 800cd9c:	10bfffc4 	addi	r2,r2,-1
 800cda0:	288a703a 	and	r5,r5,r2
 800cda4:	880cd07a 	srli	r6,r17,1
 800cda8:	280897fa 	slli	r4,r5,31
 800cdac:	88c0004c 	andi	r3,r17,1
 800cdb0:	30e2b03a 	or	r17,r6,r3
 800cdb4:	280ad07a 	srli	r5,r5,1
 800cdb8:	8922b03a 	or	r17,r17,r4
 800cdbc:	003f7706 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800cdc0:	1984b03a 	or	r2,r3,r6
 800cdc4:	103f6e26 	beq	r2,zero,800cb80 <__alt_data_end+0xfc00cb80>
 800cdc8:	39c03fcc 	andi	r7,r7,255
 800cdcc:	003f6d06 	br	800cb84 <__alt_data_end+0xfc00cb84>
 800cdd0:	1146b03a 	or	r3,r2,r5
 800cdd4:	18003f26 	beq	r3,zero,800ced4 <__subdf3+0x3c4>
 800cdd8:	00c00434 	movhi	r3,16
 800cddc:	29000234 	orhi	r4,r5,8
 800cde0:	18ffffc4 	addi	r3,r3,-1
 800cde4:	20c8703a 	and	r4,r4,r3
 800cde8:	003f8406 	br	800cbfc <__alt_data_end+0xfc00cbfc>
 800cdec:	10bfffc4 	addi	r2,r2,-1
 800cdf0:	1000501e 	bne	r2,zero,800cf34 <__subdf3+0x424>
 800cdf4:	898fc83a 	sub	r7,r17,r6
 800cdf8:	89e3803a 	cmpltu	r17,r17,r7
 800cdfc:	28cbc83a 	sub	r5,r5,r3
 800ce00:	2c4bc83a 	sub	r5,r5,r17
 800ce04:	3823883a 	mov	r17,r7
 800ce08:	003fa106 	br	800cc90 <__alt_data_end+0xfc00cc90>
 800ce0c:	1988b03a 	or	r4,r3,r6
 800ce10:	203f6226 	beq	r4,zero,800cb9c <__alt_data_end+0xfc00cb9c>
 800ce14:	10bfffc4 	addi	r2,r2,-1
 800ce18:	10009b1e 	bne	r2,zero,800d088 <__subdf3+0x578>
 800ce1c:	344d883a 	add	r6,r6,r17
 800ce20:	3463803a 	cmpltu	r17,r6,r17
 800ce24:	194b883a 	add	r5,r3,r5
 800ce28:	2c4b883a 	add	r5,r5,r17
 800ce2c:	3023883a 	mov	r17,r6
 800ce30:	003fd406 	br	800cd84 <__alt_data_end+0xfc00cd84>
 800ce34:	1106b03a 	or	r3,r2,r4
 800ce38:	1800b426 	beq	r3,zero,800d10c <__subdf3+0x5fc>
 800ce3c:	100b883a 	mov	r5,r2
 800ce40:	2023883a 	mov	r17,r4
 800ce44:	888001cc 	andi	r2,r17,7
 800ce48:	103f561e 	bne	r2,zero,800cba4 <__alt_data_end+0xfc00cba4>
 800ce4c:	9200004c 	andi	r8,r18,1
 800ce50:	003fb206 	br	800cd1c <__alt_data_end+0xfc00cd1c>
 800ce54:	1000531e 	bne	r2,zero,800cfa4 <__subdf3+0x494>
 800ce58:	80800044 	addi	r2,r16,1
 800ce5c:	1081ffcc 	andi	r2,r2,2047
 800ce60:	01000044 	movi	r4,1
 800ce64:	2080a00e 	bge	r4,r2,800d0e8 <__subdf3+0x5d8>
 800ce68:	8985c83a 	sub	r2,r17,r6
 800ce6c:	8889803a 	cmpltu	r4,r17,r2
 800ce70:	28e7c83a 	sub	r19,r5,r3
 800ce74:	9927c83a 	sub	r19,r19,r4
 800ce78:	9900202c 	andhi	r4,r19,128
 800ce7c:	20006226 	beq	r4,zero,800d008 <__subdf3+0x4f8>
 800ce80:	3463c83a 	sub	r17,r6,r17
 800ce84:	194bc83a 	sub	r5,r3,r5
 800ce88:	344d803a 	cmpltu	r6,r6,r17
 800ce8c:	29a7c83a 	sub	r19,r5,r6
 800ce90:	3825883a 	mov	r18,r7
 800ce94:	983f841e 	bne	r19,zero,800cca8 <__alt_data_end+0xfc00cca8>
 800ce98:	8809883a 	mov	r4,r17
 800ce9c:	8001e640 	call	8001e64 <__clzsi2>
 800cea0:	10800804 	addi	r2,r2,32
 800cea4:	10fffe04 	addi	r3,r2,-8
 800cea8:	010007c4 	movi	r4,31
 800ceac:	20ff830e 	bge	r4,r3,800ccbc <__alt_data_end+0xfc00ccbc>
 800ceb0:	14fff604 	addi	r19,r2,-40
 800ceb4:	8ce6983a 	sll	r19,r17,r19
 800ceb8:	0023883a 	mov	r17,zero
 800cebc:	1c3f860e 	bge	r3,r16,800ccd8 <__alt_data_end+0xfc00ccd8>
 800cec0:	017fe034 	movhi	r5,65408
 800cec4:	297fffc4 	addi	r5,r5,-1
 800cec8:	80e1c83a 	sub	r16,r16,r3
 800cecc:	994a703a 	and	r5,r19,r5
 800ced0:	003f3206 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800ced4:	0009883a 	mov	r4,zero
 800ced8:	0005883a 	mov	r2,zero
 800cedc:	003f4706 	br	800cbfc <__alt_data_end+0xfc00cbfc>
 800cee0:	198cb03a 	or	r6,r3,r6
 800cee4:	300cc03a 	cmpne	r6,r6,zero
 800cee8:	0005883a 	mov	r2,zero
 800ceec:	003f6306 	br	800cc7c <__alt_data_end+0xfc00cc7c>
 800cef0:	10009d1e 	bne	r2,zero,800d168 <__subdf3+0x658>
 800cef4:	81c00044 	addi	r7,r16,1
 800cef8:	3881ffcc 	andi	r2,r7,2047
 800cefc:	02400044 	movi	r9,1
 800cf00:	4880680e 	bge	r9,r2,800d0a4 <__subdf3+0x594>
 800cf04:	0081ffc4 	movi	r2,2047
 800cf08:	3880ae26 	beq	r7,r2,800d1c4 <__subdf3+0x6b4>
 800cf0c:	344d883a 	add	r6,r6,r17
 800cf10:	3463803a 	cmpltu	r17,r6,r17
 800cf14:	194b883a 	add	r5,r3,r5
 800cf18:	2c4b883a 	add	r5,r5,r17
 800cf1c:	282297fa 	slli	r17,r5,31
 800cf20:	300cd07a 	srli	r6,r6,1
 800cf24:	280ad07a 	srli	r5,r5,1
 800cf28:	3821883a 	mov	r16,r7
 800cf2c:	89a2b03a 	or	r17,r17,r6
 800cf30:	003f1a06 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800cf34:	0101ffc4 	movi	r4,2047
 800cf38:	813f431e 	bne	r16,r4,800cc48 <__alt_data_end+0xfc00cc48>
 800cf3c:	003f1706 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800cf40:	80bff844 	addi	r2,r16,-31
 800cf44:	00c00804 	movi	r3,32
 800cf48:	9884d83a 	srl	r2,r19,r2
 800cf4c:	28c05126 	beq	r5,r3,800d094 <__subdf3+0x584>
 800cf50:	00c00fc4 	movi	r3,63
 800cf54:	1c21c83a 	sub	r16,r3,r16
 800cf58:	9c26983a 	sll	r19,r19,r16
 800cf5c:	9c62b03a 	or	r17,r19,r17
 800cf60:	8822c03a 	cmpne	r17,r17,zero
 800cf64:	88a2b03a 	or	r17,r17,r2
 800cf68:	000b883a 	mov	r5,zero
 800cf6c:	0021883a 	mov	r16,zero
 800cf70:	003fb406 	br	800ce44 <__alt_data_end+0xfc00ce44>
 800cf74:	113ff804 	addi	r4,r2,-32
 800cf78:	01c00804 	movi	r7,32
 800cf7c:	1908d83a 	srl	r4,r3,r4
 800cf80:	11c04626 	beq	r2,r7,800d09c <__subdf3+0x58c>
 800cf84:	01c01004 	movi	r7,64
 800cf88:	3885c83a 	sub	r2,r7,r2
 800cf8c:	1884983a 	sll	r2,r3,r2
 800cf90:	118cb03a 	or	r6,r2,r6
 800cf94:	300cc03a 	cmpne	r6,r6,zero
 800cf98:	310cb03a 	or	r6,r6,r4
 800cf9c:	0005883a 	mov	r2,zero
 800cfa0:	003f3606 	br	800cc7c <__alt_data_end+0xfc00cc7c>
 800cfa4:	80002b26 	beq	r16,zero,800d054 <__subdf3+0x544>
 800cfa8:	0101ffc4 	movi	r4,2047
 800cfac:	51006926 	beq	r10,r4,800d154 <__subdf3+0x644>
 800cfb0:	0085c83a 	sub	r2,zero,r2
 800cfb4:	29402034 	orhi	r5,r5,128
 800cfb8:	01000e04 	movi	r4,56
 800cfbc:	20807d16 	blt	r4,r2,800d1b4 <__subdf3+0x6a4>
 800cfc0:	010007c4 	movi	r4,31
 800cfc4:	2080d916 	blt	r4,r2,800d32c <__subdf3+0x81c>
 800cfc8:	01000804 	movi	r4,32
 800cfcc:	2089c83a 	sub	r4,r4,r2
 800cfd0:	2912983a 	sll	r9,r5,r4
 800cfd4:	8890d83a 	srl	r8,r17,r2
 800cfd8:	8908983a 	sll	r4,r17,r4
 800cfdc:	2884d83a 	srl	r2,r5,r2
 800cfe0:	4a22b03a 	or	r17,r9,r8
 800cfe4:	2008c03a 	cmpne	r4,r4,zero
 800cfe8:	8922b03a 	or	r17,r17,r4
 800cfec:	3463c83a 	sub	r17,r6,r17
 800cff0:	1885c83a 	sub	r2,r3,r2
 800cff4:	344d803a 	cmpltu	r6,r6,r17
 800cff8:	118bc83a 	sub	r5,r2,r6
 800cffc:	5021883a 	mov	r16,r10
 800d000:	3825883a 	mov	r18,r7
 800d004:	003f2206 	br	800cc90 <__alt_data_end+0xfc00cc90>
 800d008:	9886b03a 	or	r3,r19,r2
 800d00c:	18001c1e 	bne	r3,zero,800d080 <__subdf3+0x570>
 800d010:	0011883a 	mov	r8,zero
 800d014:	000b883a 	mov	r5,zero
 800d018:	0023883a 	mov	r17,zero
 800d01c:	0021883a 	mov	r16,zero
 800d020:	003f3e06 	br	800cd1c <__alt_data_end+0xfc00cd1c>
 800d024:	010007c4 	movi	r4,31
 800d028:	20803c16 	blt	r4,r2,800d11c <__subdf3+0x60c>
 800d02c:	01000804 	movi	r4,32
 800d030:	2089c83a 	sub	r4,r4,r2
 800d034:	1912983a 	sll	r9,r3,r4
 800d038:	308ed83a 	srl	r7,r6,r2
 800d03c:	3108983a 	sll	r4,r6,r4
 800d040:	1884d83a 	srl	r2,r3,r2
 800d044:	49ceb03a 	or	r7,r9,r7
 800d048:	2008c03a 	cmpne	r4,r4,zero
 800d04c:	390eb03a 	or	r7,r7,r4
 800d050:	003f4706 	br	800cd70 <__alt_data_end+0xfc00cd70>
 800d054:	2c48b03a 	or	r4,r5,r17
 800d058:	20003e26 	beq	r4,zero,800d154 <__subdf3+0x644>
 800d05c:	0084303a 	nor	r2,zero,r2
 800d060:	10003a1e 	bne	r2,zero,800d14c <__subdf3+0x63c>
 800d064:	3463c83a 	sub	r17,r6,r17
 800d068:	194bc83a 	sub	r5,r3,r5
 800d06c:	344d803a 	cmpltu	r6,r6,r17
 800d070:	298bc83a 	sub	r5,r5,r6
 800d074:	5021883a 	mov	r16,r10
 800d078:	3825883a 	mov	r18,r7
 800d07c:	003f0406 	br	800cc90 <__alt_data_end+0xfc00cc90>
 800d080:	1023883a 	mov	r17,r2
 800d084:	003f0706 	br	800cca4 <__alt_data_end+0xfc00cca4>
 800d088:	0101ffc4 	movi	r4,2047
 800d08c:	813f331e 	bne	r16,r4,800cd5c <__alt_data_end+0xfc00cd5c>
 800d090:	003ec206 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800d094:	0027883a 	mov	r19,zero
 800d098:	003fb006 	br	800cf5c <__alt_data_end+0xfc00cf5c>
 800d09c:	0005883a 	mov	r2,zero
 800d0a0:	003fbb06 	br	800cf90 <__alt_data_end+0xfc00cf90>
 800d0a4:	2c44b03a 	or	r2,r5,r17
 800d0a8:	80008b1e 	bne	r16,zero,800d2d8 <__subdf3+0x7c8>
 800d0ac:	1000b526 	beq	r2,zero,800d384 <__subdf3+0x874>
 800d0b0:	1984b03a 	or	r2,r3,r6
 800d0b4:	103eb926 	beq	r2,zero,800cb9c <__alt_data_end+0xfc00cb9c>
 800d0b8:	3449883a 	add	r4,r6,r17
 800d0bc:	2463803a 	cmpltu	r17,r4,r17
 800d0c0:	194b883a 	add	r5,r3,r5
 800d0c4:	2c4b883a 	add	r5,r5,r17
 800d0c8:	2880202c 	andhi	r2,r5,128
 800d0cc:	2023883a 	mov	r17,r4
 800d0d0:	103f5c26 	beq	r2,zero,800ce44 <__alt_data_end+0xfc00ce44>
 800d0d4:	00bfe034 	movhi	r2,65408
 800d0d8:	10bfffc4 	addi	r2,r2,-1
 800d0dc:	4821883a 	mov	r16,r9
 800d0e0:	288a703a 	and	r5,r5,r2
 800d0e4:	003ead06 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800d0e8:	2c44b03a 	or	r2,r5,r17
 800d0ec:	8000291e 	bne	r16,zero,800d194 <__subdf3+0x684>
 800d0f0:	10004f1e 	bne	r2,zero,800d230 <__subdf3+0x720>
 800d0f4:	1984b03a 	or	r2,r3,r6
 800d0f8:	10000426 	beq	r2,zero,800d10c <__subdf3+0x5fc>
 800d0fc:	180b883a 	mov	r5,r3
 800d100:	3023883a 	mov	r17,r6
 800d104:	3825883a 	mov	r18,r7
 800d108:	003ea406 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800d10c:	0011883a 	mov	r8,zero
 800d110:	000b883a 	mov	r5,zero
 800d114:	0023883a 	mov	r17,zero
 800d118:	003f0006 	br	800cd1c <__alt_data_end+0xfc00cd1c>
 800d11c:	11fff804 	addi	r7,r2,-32
 800d120:	19c8d83a 	srl	r4,r3,r7
 800d124:	01c00804 	movi	r7,32
 800d128:	11c07e26 	beq	r2,r7,800d324 <__subdf3+0x814>
 800d12c:	01c01004 	movi	r7,64
 800d130:	3885c83a 	sub	r2,r7,r2
 800d134:	1884983a 	sll	r2,r3,r2
 800d138:	118cb03a 	or	r6,r2,r6
 800d13c:	300ec03a 	cmpne	r7,r6,zero
 800d140:	390eb03a 	or	r7,r7,r4
 800d144:	0005883a 	mov	r2,zero
 800d148:	003f0906 	br	800cd70 <__alt_data_end+0xfc00cd70>
 800d14c:	0101ffc4 	movi	r4,2047
 800d150:	513f991e 	bne	r10,r4,800cfb8 <__alt_data_end+0xfc00cfb8>
 800d154:	180b883a 	mov	r5,r3
 800d158:	3023883a 	mov	r17,r6
 800d15c:	5021883a 	mov	r16,r10
 800d160:	3825883a 	mov	r18,r7
 800d164:	003e8d06 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800d168:	80001a1e 	bne	r16,zero,800d1d4 <__subdf3+0x6c4>
 800d16c:	2c48b03a 	or	r4,r5,r17
 800d170:	20005526 	beq	r4,zero,800d2c8 <__subdf3+0x7b8>
 800d174:	0084303a 	nor	r2,zero,r2
 800d178:	1000511e 	bne	r2,zero,800d2c0 <__subdf3+0x7b0>
 800d17c:	89a3883a 	add	r17,r17,r6
 800d180:	194b883a 	add	r5,r3,r5
 800d184:	898d803a 	cmpltu	r6,r17,r6
 800d188:	298b883a 	add	r5,r5,r6
 800d18c:	5021883a 	mov	r16,r10
 800d190:	003efc06 	br	800cd84 <__alt_data_end+0xfc00cd84>
 800d194:	1000341e 	bne	r2,zero,800d268 <__subdf3+0x758>
 800d198:	1984b03a 	or	r2,r3,r6
 800d19c:	10006f26 	beq	r2,zero,800d35c <__subdf3+0x84c>
 800d1a0:	180b883a 	mov	r5,r3
 800d1a4:	3023883a 	mov	r17,r6
 800d1a8:	3825883a 	mov	r18,r7
 800d1ac:	0401ffc4 	movi	r16,2047
 800d1b0:	003e7a06 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800d1b4:	2c62b03a 	or	r17,r5,r17
 800d1b8:	8822c03a 	cmpne	r17,r17,zero
 800d1bc:	0005883a 	mov	r2,zero
 800d1c0:	003f8a06 	br	800cfec <__alt_data_end+0xfc00cfec>
 800d1c4:	3821883a 	mov	r16,r7
 800d1c8:	000b883a 	mov	r5,zero
 800d1cc:	0023883a 	mov	r17,zero
 800d1d0:	003ed206 	br	800cd1c <__alt_data_end+0xfc00cd1c>
 800d1d4:	0101ffc4 	movi	r4,2047
 800d1d8:	51003b26 	beq	r10,r4,800d2c8 <__subdf3+0x7b8>
 800d1dc:	0085c83a 	sub	r2,zero,r2
 800d1e0:	29402034 	orhi	r5,r5,128
 800d1e4:	01000e04 	movi	r4,56
 800d1e8:	20806216 	blt	r4,r2,800d374 <__subdf3+0x864>
 800d1ec:	010007c4 	movi	r4,31
 800d1f0:	20806b16 	blt	r4,r2,800d3a0 <__subdf3+0x890>
 800d1f4:	01000804 	movi	r4,32
 800d1f8:	2089c83a 	sub	r4,r4,r2
 800d1fc:	2912983a 	sll	r9,r5,r4
 800d200:	888ed83a 	srl	r7,r17,r2
 800d204:	8908983a 	sll	r4,r17,r4
 800d208:	2884d83a 	srl	r2,r5,r2
 800d20c:	49e2b03a 	or	r17,r9,r7
 800d210:	2008c03a 	cmpne	r4,r4,zero
 800d214:	8922b03a 	or	r17,r17,r4
 800d218:	89a3883a 	add	r17,r17,r6
 800d21c:	10c5883a 	add	r2,r2,r3
 800d220:	898d803a 	cmpltu	r6,r17,r6
 800d224:	118b883a 	add	r5,r2,r6
 800d228:	5021883a 	mov	r16,r10
 800d22c:	003ed506 	br	800cd84 <__alt_data_end+0xfc00cd84>
 800d230:	1984b03a 	or	r2,r3,r6
 800d234:	103e5926 	beq	r2,zero,800cb9c <__alt_data_end+0xfc00cb9c>
 800d238:	8989c83a 	sub	r4,r17,r6
 800d23c:	8911803a 	cmpltu	r8,r17,r4
 800d240:	28c5c83a 	sub	r2,r5,r3
 800d244:	1205c83a 	sub	r2,r2,r8
 800d248:	1200202c 	andhi	r8,r2,128
 800d24c:	403ef926 	beq	r8,zero,800ce34 <__alt_data_end+0xfc00ce34>
 800d250:	3463c83a 	sub	r17,r6,r17
 800d254:	194bc83a 	sub	r5,r3,r5
 800d258:	344d803a 	cmpltu	r6,r6,r17
 800d25c:	298bc83a 	sub	r5,r5,r6
 800d260:	3825883a 	mov	r18,r7
 800d264:	003e4d06 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800d268:	1984b03a 	or	r2,r3,r6
 800d26c:	10002b26 	beq	r2,zero,800d31c <__subdf3+0x80c>
 800d270:	2808d0fa 	srli	r4,r5,3
 800d274:	8822d0fa 	srli	r17,r17,3
 800d278:	280a977a 	slli	r5,r5,29
 800d27c:	2080022c 	andhi	r2,r4,8
 800d280:	2c62b03a 	or	r17,r5,r17
 800d284:	10000826 	beq	r2,zero,800d2a8 <__subdf3+0x798>
 800d288:	1810d0fa 	srli	r8,r3,3
 800d28c:	4080022c 	andhi	r2,r8,8
 800d290:	1000051e 	bne	r2,zero,800d2a8 <__subdf3+0x798>
 800d294:	300cd0fa 	srli	r6,r6,3
 800d298:	1804977a 	slli	r2,r3,29
 800d29c:	4009883a 	mov	r4,r8
 800d2a0:	3825883a 	mov	r18,r7
 800d2a4:	11a2b03a 	or	r17,r2,r6
 800d2a8:	880ad77a 	srli	r5,r17,29
 800d2ac:	200890fa 	slli	r4,r4,3
 800d2b0:	882290fa 	slli	r17,r17,3
 800d2b4:	0401ffc4 	movi	r16,2047
 800d2b8:	290ab03a 	or	r5,r5,r4
 800d2bc:	003e3706 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800d2c0:	0101ffc4 	movi	r4,2047
 800d2c4:	513fc71e 	bne	r10,r4,800d1e4 <__alt_data_end+0xfc00d1e4>
 800d2c8:	180b883a 	mov	r5,r3
 800d2cc:	3023883a 	mov	r17,r6
 800d2d0:	5021883a 	mov	r16,r10
 800d2d4:	003e3106 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800d2d8:	10002d26 	beq	r2,zero,800d390 <__subdf3+0x880>
 800d2dc:	1984b03a 	or	r2,r3,r6
 800d2e0:	10000e26 	beq	r2,zero,800d31c <__subdf3+0x80c>
 800d2e4:	2808d0fa 	srli	r4,r5,3
 800d2e8:	8822d0fa 	srli	r17,r17,3
 800d2ec:	280a977a 	slli	r5,r5,29
 800d2f0:	2080022c 	andhi	r2,r4,8
 800d2f4:	2c62b03a 	or	r17,r5,r17
 800d2f8:	103feb26 	beq	r2,zero,800d2a8 <__alt_data_end+0xfc00d2a8>
 800d2fc:	180ed0fa 	srli	r7,r3,3
 800d300:	3880022c 	andhi	r2,r7,8
 800d304:	103fe81e 	bne	r2,zero,800d2a8 <__alt_data_end+0xfc00d2a8>
 800d308:	300cd0fa 	srli	r6,r6,3
 800d30c:	1804977a 	slli	r2,r3,29
 800d310:	3809883a 	mov	r4,r7
 800d314:	11a2b03a 	or	r17,r2,r6
 800d318:	003fe306 	br	800d2a8 <__alt_data_end+0xfc00d2a8>
 800d31c:	0401ffc4 	movi	r16,2047
 800d320:	003e1e06 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800d324:	0005883a 	mov	r2,zero
 800d328:	003f8306 	br	800d138 <__alt_data_end+0xfc00d138>
 800d32c:	113ff804 	addi	r4,r2,-32
 800d330:	02000804 	movi	r8,32
 800d334:	2908d83a 	srl	r4,r5,r4
 800d338:	12002526 	beq	r2,r8,800d3d0 <__subdf3+0x8c0>
 800d33c:	02001004 	movi	r8,64
 800d340:	4085c83a 	sub	r2,r8,r2
 800d344:	288a983a 	sll	r5,r5,r2
 800d348:	2c62b03a 	or	r17,r5,r17
 800d34c:	8822c03a 	cmpne	r17,r17,zero
 800d350:	8922b03a 	or	r17,r17,r4
 800d354:	0005883a 	mov	r2,zero
 800d358:	003f2406 	br	800cfec <__alt_data_end+0xfc00cfec>
 800d35c:	01402034 	movhi	r5,128
 800d360:	0011883a 	mov	r8,zero
 800d364:	297fffc4 	addi	r5,r5,-1
 800d368:	047ffe04 	movi	r17,-8
 800d36c:	0401ffc4 	movi	r16,2047
 800d370:	003e6a06 	br	800cd1c <__alt_data_end+0xfc00cd1c>
 800d374:	2c62b03a 	or	r17,r5,r17
 800d378:	8822c03a 	cmpne	r17,r17,zero
 800d37c:	0005883a 	mov	r2,zero
 800d380:	003fa506 	br	800d218 <__alt_data_end+0xfc00d218>
 800d384:	180b883a 	mov	r5,r3
 800d388:	3023883a 	mov	r17,r6
 800d38c:	003e0306 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800d390:	180b883a 	mov	r5,r3
 800d394:	3023883a 	mov	r17,r6
 800d398:	0401ffc4 	movi	r16,2047
 800d39c:	003dff06 	br	800cb9c <__alt_data_end+0xfc00cb9c>
 800d3a0:	113ff804 	addi	r4,r2,-32
 800d3a4:	01c00804 	movi	r7,32
 800d3a8:	2908d83a 	srl	r4,r5,r4
 800d3ac:	11c00a26 	beq	r2,r7,800d3d8 <__subdf3+0x8c8>
 800d3b0:	01c01004 	movi	r7,64
 800d3b4:	3885c83a 	sub	r2,r7,r2
 800d3b8:	288a983a 	sll	r5,r5,r2
 800d3bc:	2c62b03a 	or	r17,r5,r17
 800d3c0:	8822c03a 	cmpne	r17,r17,zero
 800d3c4:	8922b03a 	or	r17,r17,r4
 800d3c8:	0005883a 	mov	r2,zero
 800d3cc:	003f9206 	br	800d218 <__alt_data_end+0xfc00d218>
 800d3d0:	000b883a 	mov	r5,zero
 800d3d4:	003fdc06 	br	800d348 <__alt_data_end+0xfc00d348>
 800d3d8:	000b883a 	mov	r5,zero
 800d3dc:	003ff706 	br	800d3bc <__alt_data_end+0xfc00d3bc>

0800d3e0 <__floatsidf>:
 800d3e0:	defffd04 	addi	sp,sp,-12
 800d3e4:	dc400115 	stw	r17,4(sp)
 800d3e8:	dfc00215 	stw	ra,8(sp)
 800d3ec:	dc000015 	stw	r16,0(sp)
 800d3f0:	2023883a 	mov	r17,r4
 800d3f4:	20001426 	beq	r4,zero,800d448 <__floatsidf+0x68>
 800d3f8:	2020d7fa 	srli	r16,r4,31
 800d3fc:	80000126 	beq	r16,zero,800d404 <__floatsidf+0x24>
 800d400:	0123c83a 	sub	r17,zero,r4
 800d404:	8809883a 	mov	r4,r17
 800d408:	8001e640 	call	8001e64 <__clzsi2>
 800d40c:	01410784 	movi	r5,1054
 800d410:	00c00284 	movi	r3,10
 800d414:	288bc83a 	sub	r5,r5,r2
 800d418:	18801c16 	blt	r3,r2,800d48c <__floatsidf+0xac>
 800d41c:	00c002c4 	movi	r3,11
 800d420:	1887c83a 	sub	r3,r3,r2
 800d424:	88c8d83a 	srl	r4,r17,r3
 800d428:	00c00434 	movhi	r3,16
 800d42c:	18ffffc4 	addi	r3,r3,-1
 800d430:	10800544 	addi	r2,r2,21
 800d434:	20c8703a 	and	r4,r4,r3
 800d438:	8884983a 	sll	r2,r17,r2
 800d43c:	28c1ffcc 	andi	r3,r5,2047
 800d440:	800d883a 	mov	r6,r16
 800d444:	00000406 	br	800d458 <__floatsidf+0x78>
 800d448:	000d883a 	mov	r6,zero
 800d44c:	0007883a 	mov	r3,zero
 800d450:	0009883a 	mov	r4,zero
 800d454:	0005883a 	mov	r2,zero
 800d458:	180a953a 	slli	r5,r3,20
 800d45c:	31803fcc 	andi	r6,r6,255
 800d460:	00c00434 	movhi	r3,16
 800d464:	300c97fa 	slli	r6,r6,31
 800d468:	18ffffc4 	addi	r3,r3,-1
 800d46c:	20c6703a 	and	r3,r4,r3
 800d470:	1946b03a 	or	r3,r3,r5
 800d474:	1986b03a 	or	r3,r3,r6
 800d478:	dfc00217 	ldw	ra,8(sp)
 800d47c:	dc400117 	ldw	r17,4(sp)
 800d480:	dc000017 	ldw	r16,0(sp)
 800d484:	dec00304 	addi	sp,sp,12
 800d488:	f800283a 	ret
 800d48c:	10fffd44 	addi	r3,r2,-11
 800d490:	88c8983a 	sll	r4,r17,r3
 800d494:	00800434 	movhi	r2,16
 800d498:	10bfffc4 	addi	r2,r2,-1
 800d49c:	2088703a 	and	r4,r4,r2
 800d4a0:	28c1ffcc 	andi	r3,r5,2047
 800d4a4:	800d883a 	mov	r6,r16
 800d4a8:	0005883a 	mov	r2,zero
 800d4ac:	003fea06 	br	800d458 <__alt_data_end+0xfc00d458>

0800d4b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d4b0:	defffe04 	addi	sp,sp,-8
 800d4b4:	dfc00115 	stw	ra,4(sp)
 800d4b8:	df000015 	stw	fp,0(sp)
 800d4bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d4c0:	00820074 	movhi	r2,2049
 800d4c4:	10880604 	addi	r2,r2,8216
 800d4c8:	10800017 	ldw	r2,0(r2)
 800d4cc:	10000526 	beq	r2,zero,800d4e4 <alt_get_errno+0x34>
 800d4d0:	00820074 	movhi	r2,2049
 800d4d4:	10880604 	addi	r2,r2,8216
 800d4d8:	10800017 	ldw	r2,0(r2)
 800d4dc:	103ee83a 	callr	r2
 800d4e0:	00000206 	br	800d4ec <alt_get_errno+0x3c>
 800d4e4:	00820074 	movhi	r2,2049
 800d4e8:	108ed704 	addi	r2,r2,15196
}
 800d4ec:	e037883a 	mov	sp,fp
 800d4f0:	dfc00117 	ldw	ra,4(sp)
 800d4f4:	df000017 	ldw	fp,0(sp)
 800d4f8:	dec00204 	addi	sp,sp,8
 800d4fc:	f800283a 	ret

0800d500 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d500:	defffb04 	addi	sp,sp,-20
 800d504:	dfc00415 	stw	ra,16(sp)
 800d508:	df000315 	stw	fp,12(sp)
 800d50c:	df000304 	addi	fp,sp,12
 800d510:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d514:	e0bfff17 	ldw	r2,-4(fp)
 800d518:	10000816 	blt	r2,zero,800d53c <close+0x3c>
 800d51c:	e13fff17 	ldw	r4,-4(fp)
 800d520:	01400304 	movi	r5,12
 800d524:	8001ff40 	call	8001ff4 <__mulsi3>
 800d528:	1007883a 	mov	r3,r2
 800d52c:	00820074 	movhi	r2,2049
 800d530:	10837804 	addi	r2,r2,3552
 800d534:	1885883a 	add	r2,r3,r2
 800d538:	00000106 	br	800d540 <close+0x40>
 800d53c:	0005883a 	mov	r2,zero
 800d540:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d544:	e0bffd17 	ldw	r2,-12(fp)
 800d548:	10001926 	beq	r2,zero,800d5b0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d54c:	e0bffd17 	ldw	r2,-12(fp)
 800d550:	10800017 	ldw	r2,0(r2)
 800d554:	10800417 	ldw	r2,16(r2)
 800d558:	10000626 	beq	r2,zero,800d574 <close+0x74>
 800d55c:	e0bffd17 	ldw	r2,-12(fp)
 800d560:	10800017 	ldw	r2,0(r2)
 800d564:	10800417 	ldw	r2,16(r2)
 800d568:	e13ffd17 	ldw	r4,-12(fp)
 800d56c:	103ee83a 	callr	r2
 800d570:	00000106 	br	800d578 <close+0x78>
 800d574:	0005883a 	mov	r2,zero
 800d578:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d57c:	e13fff17 	ldw	r4,-4(fp)
 800d580:	800dc240 	call	800dc24 <alt_release_fd>
    if (rval < 0)
 800d584:	e0bffe17 	ldw	r2,-8(fp)
 800d588:	1000070e 	bge	r2,zero,800d5a8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800d58c:	800d4b00 	call	800d4b0 <alt_get_errno>
 800d590:	1007883a 	mov	r3,r2
 800d594:	e0bffe17 	ldw	r2,-8(fp)
 800d598:	0085c83a 	sub	r2,zero,r2
 800d59c:	18800015 	stw	r2,0(r3)
      return -1;
 800d5a0:	00bfffc4 	movi	r2,-1
 800d5a4:	00000706 	br	800d5c4 <close+0xc4>
    }
    return 0;
 800d5a8:	0005883a 	mov	r2,zero
 800d5ac:	00000506 	br	800d5c4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d5b0:	800d4b00 	call	800d4b0 <alt_get_errno>
 800d5b4:	1007883a 	mov	r3,r2
 800d5b8:	00801444 	movi	r2,81
 800d5bc:	18800015 	stw	r2,0(r3)
    return -1;
 800d5c0:	00bfffc4 	movi	r2,-1
  }
}
 800d5c4:	e037883a 	mov	sp,fp
 800d5c8:	dfc00117 	ldw	ra,4(sp)
 800d5cc:	df000017 	ldw	fp,0(sp)
 800d5d0:	dec00204 	addi	sp,sp,8
 800d5d4:	f800283a 	ret

0800d5d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d5d8:	defffc04 	addi	sp,sp,-16
 800d5dc:	df000315 	stw	fp,12(sp)
 800d5e0:	df000304 	addi	fp,sp,12
 800d5e4:	e13ffd15 	stw	r4,-12(fp)
 800d5e8:	e17ffe15 	stw	r5,-8(fp)
 800d5ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d5f0:	e0bfff17 	ldw	r2,-4(fp)
}
 800d5f4:	e037883a 	mov	sp,fp
 800d5f8:	df000017 	ldw	fp,0(sp)
 800d5fc:	dec00104 	addi	sp,sp,4
 800d600:	f800283a 	ret

0800d604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d604:	defffe04 	addi	sp,sp,-8
 800d608:	dfc00115 	stw	ra,4(sp)
 800d60c:	df000015 	stw	fp,0(sp)
 800d610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d614:	00820074 	movhi	r2,2049
 800d618:	10880604 	addi	r2,r2,8216
 800d61c:	10800017 	ldw	r2,0(r2)
 800d620:	10000526 	beq	r2,zero,800d638 <alt_get_errno+0x34>
 800d624:	00820074 	movhi	r2,2049
 800d628:	10880604 	addi	r2,r2,8216
 800d62c:	10800017 	ldw	r2,0(r2)
 800d630:	103ee83a 	callr	r2
 800d634:	00000206 	br	800d640 <alt_get_errno+0x3c>
 800d638:	00820074 	movhi	r2,2049
 800d63c:	108ed704 	addi	r2,r2,15196
}
 800d640:	e037883a 	mov	sp,fp
 800d644:	dfc00117 	ldw	ra,4(sp)
 800d648:	df000017 	ldw	fp,0(sp)
 800d64c:	dec00204 	addi	sp,sp,8
 800d650:	f800283a 	ret

0800d654 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d654:	defffb04 	addi	sp,sp,-20
 800d658:	dfc00415 	stw	ra,16(sp)
 800d65c:	df000315 	stw	fp,12(sp)
 800d660:	df000304 	addi	fp,sp,12
 800d664:	e13ffe15 	stw	r4,-8(fp)
 800d668:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d66c:	e0bffe17 	ldw	r2,-8(fp)
 800d670:	10000816 	blt	r2,zero,800d694 <fstat+0x40>
 800d674:	e13ffe17 	ldw	r4,-8(fp)
 800d678:	01400304 	movi	r5,12
 800d67c:	8001ff40 	call	8001ff4 <__mulsi3>
 800d680:	1007883a 	mov	r3,r2
 800d684:	00820074 	movhi	r2,2049
 800d688:	10837804 	addi	r2,r2,3552
 800d68c:	1885883a 	add	r2,r3,r2
 800d690:	00000106 	br	800d698 <fstat+0x44>
 800d694:	0005883a 	mov	r2,zero
 800d698:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800d69c:	e0bffd17 	ldw	r2,-12(fp)
 800d6a0:	10001026 	beq	r2,zero,800d6e4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d6a4:	e0bffd17 	ldw	r2,-12(fp)
 800d6a8:	10800017 	ldw	r2,0(r2)
 800d6ac:	10800817 	ldw	r2,32(r2)
 800d6b0:	10000726 	beq	r2,zero,800d6d0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800d6b4:	e0bffd17 	ldw	r2,-12(fp)
 800d6b8:	10800017 	ldw	r2,0(r2)
 800d6bc:	10800817 	ldw	r2,32(r2)
 800d6c0:	e13ffd17 	ldw	r4,-12(fp)
 800d6c4:	e17fff17 	ldw	r5,-4(fp)
 800d6c8:	103ee83a 	callr	r2
 800d6cc:	00000a06 	br	800d6f8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d6d0:	e0bfff17 	ldw	r2,-4(fp)
 800d6d4:	00c80004 	movi	r3,8192
 800d6d8:	10c00115 	stw	r3,4(r2)
      return 0;
 800d6dc:	0005883a 	mov	r2,zero
 800d6e0:	00000506 	br	800d6f8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d6e4:	800d6040 	call	800d604 <alt_get_errno>
 800d6e8:	1007883a 	mov	r3,r2
 800d6ec:	00801444 	movi	r2,81
 800d6f0:	18800015 	stw	r2,0(r3)
    return -1;
 800d6f4:	00bfffc4 	movi	r2,-1
  }
}
 800d6f8:	e037883a 	mov	sp,fp
 800d6fc:	dfc00117 	ldw	ra,4(sp)
 800d700:	df000017 	ldw	fp,0(sp)
 800d704:	dec00204 	addi	sp,sp,8
 800d708:	f800283a 	ret

0800d70c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d70c:	defffe04 	addi	sp,sp,-8
 800d710:	dfc00115 	stw	ra,4(sp)
 800d714:	df000015 	stw	fp,0(sp)
 800d718:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d71c:	00820074 	movhi	r2,2049
 800d720:	10880604 	addi	r2,r2,8216
 800d724:	10800017 	ldw	r2,0(r2)
 800d728:	10000526 	beq	r2,zero,800d740 <alt_get_errno+0x34>
 800d72c:	00820074 	movhi	r2,2049
 800d730:	10880604 	addi	r2,r2,8216
 800d734:	10800017 	ldw	r2,0(r2)
 800d738:	103ee83a 	callr	r2
 800d73c:	00000206 	br	800d748 <alt_get_errno+0x3c>
 800d740:	00820074 	movhi	r2,2049
 800d744:	108ed704 	addi	r2,r2,15196
}
 800d748:	e037883a 	mov	sp,fp
 800d74c:	dfc00117 	ldw	ra,4(sp)
 800d750:	df000017 	ldw	fp,0(sp)
 800d754:	dec00204 	addi	sp,sp,8
 800d758:	f800283a 	ret

0800d75c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d75c:	deffed04 	addi	sp,sp,-76
 800d760:	dfc01215 	stw	ra,72(sp)
 800d764:	df001115 	stw	fp,68(sp)
 800d768:	df001104 	addi	fp,sp,68
 800d76c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d770:	e0bfff17 	ldw	r2,-4(fp)
 800d774:	10000816 	blt	r2,zero,800d798 <isatty+0x3c>
 800d778:	e13fff17 	ldw	r4,-4(fp)
 800d77c:	01400304 	movi	r5,12
 800d780:	8001ff40 	call	8001ff4 <__mulsi3>
 800d784:	1007883a 	mov	r3,r2
 800d788:	00820074 	movhi	r2,2049
 800d78c:	10837804 	addi	r2,r2,3552
 800d790:	1885883a 	add	r2,r3,r2
 800d794:	00000106 	br	800d79c <isatty+0x40>
 800d798:	0005883a 	mov	r2,zero
 800d79c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800d7a0:	e0bfef17 	ldw	r2,-68(fp)
 800d7a4:	10000e26 	beq	r2,zero,800d7e0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d7a8:	e0bfef17 	ldw	r2,-68(fp)
 800d7ac:	10800017 	ldw	r2,0(r2)
 800d7b0:	10800817 	ldw	r2,32(r2)
 800d7b4:	1000021e 	bne	r2,zero,800d7c0 <isatty+0x64>
    {
      return 1;
 800d7b8:	00800044 	movi	r2,1
 800d7bc:	00000d06 	br	800d7f4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d7c0:	e0bff004 	addi	r2,fp,-64
 800d7c4:	e13fff17 	ldw	r4,-4(fp)
 800d7c8:	100b883a 	mov	r5,r2
 800d7cc:	800d6540 	call	800d654 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d7d0:	e0bff117 	ldw	r2,-60(fp)
 800d7d4:	10880020 	cmpeqi	r2,r2,8192
 800d7d8:	10803fcc 	andi	r2,r2,255
 800d7dc:	00000506 	br	800d7f4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d7e0:	800d70c0 	call	800d70c <alt_get_errno>
 800d7e4:	1007883a 	mov	r3,r2
 800d7e8:	00801444 	movi	r2,81
 800d7ec:	18800015 	stw	r2,0(r3)
    return 0;
 800d7f0:	0005883a 	mov	r2,zero
  }
}
 800d7f4:	e037883a 	mov	sp,fp
 800d7f8:	dfc00117 	ldw	ra,4(sp)
 800d7fc:	df000017 	ldw	fp,0(sp)
 800d800:	dec00204 	addi	sp,sp,8
 800d804:	f800283a 	ret

0800d808 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800d808:	defffc04 	addi	sp,sp,-16
 800d80c:	df000315 	stw	fp,12(sp)
 800d810:	df000304 	addi	fp,sp,12
 800d814:	e13ffd15 	stw	r4,-12(fp)
 800d818:	e17ffe15 	stw	r5,-8(fp)
 800d81c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800d820:	e0fffe17 	ldw	r3,-8(fp)
 800d824:	e0bffd17 	ldw	r2,-12(fp)
 800d828:	18800c26 	beq	r3,r2,800d85c <alt_load_section+0x54>
  {
    while( to != end )
 800d82c:	00000806 	br	800d850 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800d830:	e0bffe17 	ldw	r2,-8(fp)
 800d834:	10c00104 	addi	r3,r2,4
 800d838:	e0fffe15 	stw	r3,-8(fp)
 800d83c:	e0fffd17 	ldw	r3,-12(fp)
 800d840:	19000104 	addi	r4,r3,4
 800d844:	e13ffd15 	stw	r4,-12(fp)
 800d848:	18c00017 	ldw	r3,0(r3)
 800d84c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800d850:	e0fffe17 	ldw	r3,-8(fp)
 800d854:	e0bfff17 	ldw	r2,-4(fp)
 800d858:	18bff51e 	bne	r3,r2,800d830 <__alt_data_end+0xfc00d830>
    {
      *to++ = *from++;
    }
  }
}
 800d85c:	e037883a 	mov	sp,fp
 800d860:	df000017 	ldw	fp,0(sp)
 800d864:	dec00104 	addi	sp,sp,4
 800d868:	f800283a 	ret

0800d86c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800d86c:	defffe04 	addi	sp,sp,-8
 800d870:	dfc00115 	stw	ra,4(sp)
 800d874:	df000015 	stw	fp,0(sp)
 800d878:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800d87c:	01020074 	movhi	r4,2049
 800d880:	21080b04 	addi	r4,r4,8236
 800d884:	01420074 	movhi	r5,2049
 800d888:	29414504 	addi	r5,r5,1300
 800d88c:	01820074 	movhi	r6,2049
 800d890:	31880b04 	addi	r6,r6,8236
 800d894:	800d8080 	call	800d808 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800d898:	01020034 	movhi	r4,2048
 800d89c:	21000804 	addi	r4,r4,32
 800d8a0:	01420034 	movhi	r5,2048
 800d8a4:	29400804 	addi	r5,r5,32
 800d8a8:	01820034 	movhi	r6,2048
 800d8ac:	31806f04 	addi	r6,r6,444
 800d8b0:	800d8080 	call	800d808 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800d8b4:	01020074 	movhi	r4,2049
 800d8b8:	21005a04 	addi	r4,r4,360
 800d8bc:	01420074 	movhi	r5,2049
 800d8c0:	29405a04 	addi	r5,r5,360
 800d8c4:	01820074 	movhi	r6,2049
 800d8c8:	31814504 	addi	r6,r6,1300
 800d8cc:	800d8080 	call	800d808 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800d8d0:	800f0e00 	call	800f0e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800d8d4:	800f3380 	call	800f338 <alt_icache_flush_all>
}
 800d8d8:	e037883a 	mov	sp,fp
 800d8dc:	dfc00117 	ldw	ra,4(sp)
 800d8e0:	df000017 	ldw	fp,0(sp)
 800d8e4:	dec00204 	addi	sp,sp,8
 800d8e8:	f800283a 	ret

0800d8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d8ec:	defffe04 	addi	sp,sp,-8
 800d8f0:	dfc00115 	stw	ra,4(sp)
 800d8f4:	df000015 	stw	fp,0(sp)
 800d8f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d8fc:	00820074 	movhi	r2,2049
 800d900:	10880604 	addi	r2,r2,8216
 800d904:	10800017 	ldw	r2,0(r2)
 800d908:	10000526 	beq	r2,zero,800d920 <alt_get_errno+0x34>
 800d90c:	00820074 	movhi	r2,2049
 800d910:	10880604 	addi	r2,r2,8216
 800d914:	10800017 	ldw	r2,0(r2)
 800d918:	103ee83a 	callr	r2
 800d91c:	00000206 	br	800d928 <alt_get_errno+0x3c>
 800d920:	00820074 	movhi	r2,2049
 800d924:	108ed704 	addi	r2,r2,15196
}
 800d928:	e037883a 	mov	sp,fp
 800d92c:	dfc00117 	ldw	ra,4(sp)
 800d930:	df000017 	ldw	fp,0(sp)
 800d934:	dec00204 	addi	sp,sp,8
 800d938:	f800283a 	ret

0800d93c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d93c:	defff904 	addi	sp,sp,-28
 800d940:	dfc00615 	stw	ra,24(sp)
 800d944:	df000515 	stw	fp,20(sp)
 800d948:	df000504 	addi	fp,sp,20
 800d94c:	e13ffd15 	stw	r4,-12(fp)
 800d950:	e17ffe15 	stw	r5,-8(fp)
 800d954:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d958:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d95c:	e0bffd17 	ldw	r2,-12(fp)
 800d960:	10000816 	blt	r2,zero,800d984 <lseek+0x48>
 800d964:	e13ffd17 	ldw	r4,-12(fp)
 800d968:	01400304 	movi	r5,12
 800d96c:	8001ff40 	call	8001ff4 <__mulsi3>
 800d970:	1007883a 	mov	r3,r2
 800d974:	00820074 	movhi	r2,2049
 800d978:	10837804 	addi	r2,r2,3552
 800d97c:	1885883a 	add	r2,r3,r2
 800d980:	00000106 	br	800d988 <lseek+0x4c>
 800d984:	0005883a 	mov	r2,zero
 800d988:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800d98c:	e0bffc17 	ldw	r2,-16(fp)
 800d990:	10001026 	beq	r2,zero,800d9d4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d994:	e0bffc17 	ldw	r2,-16(fp)
 800d998:	10800017 	ldw	r2,0(r2)
 800d99c:	10800717 	ldw	r2,28(r2)
 800d9a0:	10000926 	beq	r2,zero,800d9c8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800d9a4:	e0bffc17 	ldw	r2,-16(fp)
 800d9a8:	10800017 	ldw	r2,0(r2)
 800d9ac:	10800717 	ldw	r2,28(r2)
 800d9b0:	e13ffc17 	ldw	r4,-16(fp)
 800d9b4:	e17ffe17 	ldw	r5,-8(fp)
 800d9b8:	e1bfff17 	ldw	r6,-4(fp)
 800d9bc:	103ee83a 	callr	r2
 800d9c0:	e0bffb15 	stw	r2,-20(fp)
 800d9c4:	00000506 	br	800d9dc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800d9c8:	00bfde84 	movi	r2,-134
 800d9cc:	e0bffb15 	stw	r2,-20(fp)
 800d9d0:	00000206 	br	800d9dc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800d9d4:	00bfebc4 	movi	r2,-81
 800d9d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800d9dc:	e0bffb17 	ldw	r2,-20(fp)
 800d9e0:	1000070e 	bge	r2,zero,800da00 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800d9e4:	800d8ec0 	call	800d8ec <alt_get_errno>
 800d9e8:	1007883a 	mov	r3,r2
 800d9ec:	e0bffb17 	ldw	r2,-20(fp)
 800d9f0:	0085c83a 	sub	r2,zero,r2
 800d9f4:	18800015 	stw	r2,0(r3)
    rc = -1;
 800d9f8:	00bfffc4 	movi	r2,-1
 800d9fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800da00:	e0bffb17 	ldw	r2,-20(fp)
}
 800da04:	e037883a 	mov	sp,fp
 800da08:	dfc00117 	ldw	ra,4(sp)
 800da0c:	df000017 	ldw	fp,0(sp)
 800da10:	dec00204 	addi	sp,sp,8
 800da14:	f800283a 	ret

0800da18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800da18:	defffd04 	addi	sp,sp,-12
 800da1c:	dfc00215 	stw	ra,8(sp)
 800da20:	df000115 	stw	fp,4(sp)
 800da24:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800da28:	0009883a 	mov	r4,zero
 800da2c:	800dedc0 	call	800dedc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800da30:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800da34:	800df100 	call	800df10 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800da38:	01020074 	movhi	r4,2049
 800da3c:	21013504 	addi	r4,r4,1236
 800da40:	01420074 	movhi	r5,2049
 800da44:	29413504 	addi	r5,r5,1236
 800da48:	01820074 	movhi	r6,2049
 800da4c:	31813504 	addi	r6,r6,1236
 800da50:	800f7040 	call	800f704 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800da54:	800f1f00 	call	800f1f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800da58:	01020074 	movhi	r4,2049
 800da5c:	213c9304 	addi	r4,r4,-3508
 800da60:	800fdc40 	call	800fdc4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800da64:	d126dd17 	ldw	r4,-25740(gp)
 800da68:	d0e6de17 	ldw	r3,-25736(gp)
 800da6c:	d0a6df17 	ldw	r2,-25732(gp)
 800da70:	180b883a 	mov	r5,r3
 800da74:	100d883a 	mov	r6,r2
 800da78:	80001f80 	call	80001f8 <main>
 800da7c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800da80:	01000044 	movi	r4,1
 800da84:	800d5000 	call	800d500 <close>
  exit (result);
 800da88:	e13fff17 	ldw	r4,-4(fp)
 800da8c:	800fdd80 	call	800fdd8 <exit>

0800da90 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800da90:	defffe04 	addi	sp,sp,-8
 800da94:	df000115 	stw	fp,4(sp)
 800da98:	df000104 	addi	fp,sp,4
 800da9c:	e13fff15 	stw	r4,-4(fp)
}
 800daa0:	e037883a 	mov	sp,fp
 800daa4:	df000017 	ldw	fp,0(sp)
 800daa8:	dec00104 	addi	sp,sp,4
 800daac:	f800283a 	ret

0800dab0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800dab0:	defffe04 	addi	sp,sp,-8
 800dab4:	df000115 	stw	fp,4(sp)
 800dab8:	df000104 	addi	fp,sp,4
 800dabc:	e13fff15 	stw	r4,-4(fp)
}
 800dac0:	e037883a 	mov	sp,fp
 800dac4:	df000017 	ldw	fp,0(sp)
 800dac8:	dec00104 	addi	sp,sp,4
 800dacc:	f800283a 	ret

0800dad0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dad0:	defffe04 	addi	sp,sp,-8
 800dad4:	dfc00115 	stw	ra,4(sp)
 800dad8:	df000015 	stw	fp,0(sp)
 800dadc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800dae0:	00820074 	movhi	r2,2049
 800dae4:	10880604 	addi	r2,r2,8216
 800dae8:	10800017 	ldw	r2,0(r2)
 800daec:	10000526 	beq	r2,zero,800db04 <alt_get_errno+0x34>
 800daf0:	00820074 	movhi	r2,2049
 800daf4:	10880604 	addi	r2,r2,8216
 800daf8:	10800017 	ldw	r2,0(r2)
 800dafc:	103ee83a 	callr	r2
 800db00:	00000206 	br	800db0c <alt_get_errno+0x3c>
 800db04:	00820074 	movhi	r2,2049
 800db08:	108ed704 	addi	r2,r2,15196
}
 800db0c:	e037883a 	mov	sp,fp
 800db10:	dfc00117 	ldw	ra,4(sp)
 800db14:	df000017 	ldw	fp,0(sp)
 800db18:	dec00204 	addi	sp,sp,8
 800db1c:	f800283a 	ret

0800db20 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800db20:	defff904 	addi	sp,sp,-28
 800db24:	dfc00615 	stw	ra,24(sp)
 800db28:	df000515 	stw	fp,20(sp)
 800db2c:	df000504 	addi	fp,sp,20
 800db30:	e13ffd15 	stw	r4,-12(fp)
 800db34:	e17ffe15 	stw	r5,-8(fp)
 800db38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800db3c:	e0bffd17 	ldw	r2,-12(fp)
 800db40:	10000816 	blt	r2,zero,800db64 <read+0x44>
 800db44:	e13ffd17 	ldw	r4,-12(fp)
 800db48:	01400304 	movi	r5,12
 800db4c:	8001ff40 	call	8001ff4 <__mulsi3>
 800db50:	1007883a 	mov	r3,r2
 800db54:	00820074 	movhi	r2,2049
 800db58:	10837804 	addi	r2,r2,3552
 800db5c:	1885883a 	add	r2,r3,r2
 800db60:	00000106 	br	800db68 <read+0x48>
 800db64:	0005883a 	mov	r2,zero
 800db68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800db6c:	e0bffb17 	ldw	r2,-20(fp)
 800db70:	10002226 	beq	r2,zero,800dbfc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800db74:	e0bffb17 	ldw	r2,-20(fp)
 800db78:	10800217 	ldw	r2,8(r2)
 800db7c:	108000cc 	andi	r2,r2,3
 800db80:	10800060 	cmpeqi	r2,r2,1
 800db84:	1000181e 	bne	r2,zero,800dbe8 <read+0xc8>
        (fd->dev->read))
 800db88:	e0bffb17 	ldw	r2,-20(fp)
 800db8c:	10800017 	ldw	r2,0(r2)
 800db90:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800db94:	10001426 	beq	r2,zero,800dbe8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800db98:	e0bffb17 	ldw	r2,-20(fp)
 800db9c:	10800017 	ldw	r2,0(r2)
 800dba0:	10800517 	ldw	r2,20(r2)
 800dba4:	e0ffff17 	ldw	r3,-4(fp)
 800dba8:	e13ffb17 	ldw	r4,-20(fp)
 800dbac:	e17ffe17 	ldw	r5,-8(fp)
 800dbb0:	180d883a 	mov	r6,r3
 800dbb4:	103ee83a 	callr	r2
 800dbb8:	e0bffc15 	stw	r2,-16(fp)
 800dbbc:	e0bffc17 	ldw	r2,-16(fp)
 800dbc0:	1000070e 	bge	r2,zero,800dbe0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800dbc4:	800dad00 	call	800dad0 <alt_get_errno>
 800dbc8:	1007883a 	mov	r3,r2
 800dbcc:	e0bffc17 	ldw	r2,-16(fp)
 800dbd0:	0085c83a 	sub	r2,zero,r2
 800dbd4:	18800015 	stw	r2,0(r3)
          return -1;
 800dbd8:	00bfffc4 	movi	r2,-1
 800dbdc:	00000c06 	br	800dc10 <read+0xf0>
        }
        return rval;
 800dbe0:	e0bffc17 	ldw	r2,-16(fp)
 800dbe4:	00000a06 	br	800dc10 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800dbe8:	800dad00 	call	800dad0 <alt_get_errno>
 800dbec:	1007883a 	mov	r3,r2
 800dbf0:	00800344 	movi	r2,13
 800dbf4:	18800015 	stw	r2,0(r3)
 800dbf8:	00000406 	br	800dc0c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800dbfc:	800dad00 	call	800dad0 <alt_get_errno>
 800dc00:	1007883a 	mov	r3,r2
 800dc04:	00801444 	movi	r2,81
 800dc08:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800dc0c:	00bfffc4 	movi	r2,-1
}
 800dc10:	e037883a 	mov	sp,fp
 800dc14:	dfc00117 	ldw	ra,4(sp)
 800dc18:	df000017 	ldw	fp,0(sp)
 800dc1c:	dec00204 	addi	sp,sp,8
 800dc20:	f800283a 	ret

0800dc24 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800dc24:	defffc04 	addi	sp,sp,-16
 800dc28:	dfc00315 	stw	ra,12(sp)
 800dc2c:	df000215 	stw	fp,8(sp)
 800dc30:	dc000115 	stw	r16,4(sp)
 800dc34:	df000204 	addi	fp,sp,8
 800dc38:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800dc3c:	e0bffe17 	ldw	r2,-8(fp)
 800dc40:	108000d0 	cmplti	r2,r2,3
 800dc44:	1000111e 	bne	r2,zero,800dc8c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800dc48:	04020074 	movhi	r16,2049
 800dc4c:	84037804 	addi	r16,r16,3552
 800dc50:	e0bffe17 	ldw	r2,-8(fp)
 800dc54:	1009883a 	mov	r4,r2
 800dc58:	01400304 	movi	r5,12
 800dc5c:	8001ff40 	call	8001ff4 <__mulsi3>
 800dc60:	8085883a 	add	r2,r16,r2
 800dc64:	10800204 	addi	r2,r2,8
 800dc68:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800dc6c:	04020074 	movhi	r16,2049
 800dc70:	84037804 	addi	r16,r16,3552
 800dc74:	e0bffe17 	ldw	r2,-8(fp)
 800dc78:	1009883a 	mov	r4,r2
 800dc7c:	01400304 	movi	r5,12
 800dc80:	8001ff40 	call	8001ff4 <__mulsi3>
 800dc84:	8085883a 	add	r2,r16,r2
 800dc88:	10000015 	stw	zero,0(r2)
  }
}
 800dc8c:	e6ffff04 	addi	sp,fp,-4
 800dc90:	dfc00217 	ldw	ra,8(sp)
 800dc94:	df000117 	ldw	fp,4(sp)
 800dc98:	dc000017 	ldw	r16,0(sp)
 800dc9c:	dec00304 	addi	sp,sp,12
 800dca0:	f800283a 	ret

0800dca4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800dca4:	defff904 	addi	sp,sp,-28
 800dca8:	df000615 	stw	fp,24(sp)
 800dcac:	df000604 	addi	fp,sp,24
 800dcb0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dcb4:	0005303a 	rdctl	r2,status
 800dcb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dcbc:	e0fffc17 	ldw	r3,-16(fp)
 800dcc0:	00bfff84 	movi	r2,-2
 800dcc4:	1884703a 	and	r2,r3,r2
 800dcc8:	1001703a 	wrctl	status,r2
  
  return context;
 800dccc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800dcd0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800dcd4:	d0a00c17 	ldw	r2,-32720(gp)
 800dcd8:	10c000c4 	addi	r3,r2,3
 800dcdc:	00bfff04 	movi	r2,-4
 800dce0:	1884703a 	and	r2,r3,r2
 800dce4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800dce8:	d0e00c17 	ldw	r3,-32720(gp)
 800dcec:	e0bfff17 	ldw	r2,-4(fp)
 800dcf0:	1887883a 	add	r3,r3,r2
 800dcf4:	00830034 	movhi	r2,3072
 800dcf8:	10800004 	addi	r2,r2,0
 800dcfc:	10c0062e 	bgeu	r2,r3,800dd18 <sbrk+0x74>
 800dd00:	e0bffa17 	ldw	r2,-24(fp)
 800dd04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dd08:	e0bffd17 	ldw	r2,-12(fp)
 800dd0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800dd10:	00bfffc4 	movi	r2,-1
 800dd14:	00000b06 	br	800dd44 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800dd18:	d0a00c17 	ldw	r2,-32720(gp)
 800dd1c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800dd20:	d0e00c17 	ldw	r3,-32720(gp)
 800dd24:	e0bfff17 	ldw	r2,-4(fp)
 800dd28:	1885883a 	add	r2,r3,r2
 800dd2c:	d0a00c15 	stw	r2,-32720(gp)
 800dd30:	e0bffa17 	ldw	r2,-24(fp)
 800dd34:	e0bffe15 	stw	r2,-8(fp)
 800dd38:	e0bffe17 	ldw	r2,-8(fp)
 800dd3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800dd40:	e0bffb17 	ldw	r2,-20(fp)
} 
 800dd44:	e037883a 	mov	sp,fp
 800dd48:	df000017 	ldw	fp,0(sp)
 800dd4c:	dec00104 	addi	sp,sp,4
 800dd50:	f800283a 	ret

0800dd54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dd54:	defffe04 	addi	sp,sp,-8
 800dd58:	dfc00115 	stw	ra,4(sp)
 800dd5c:	df000015 	stw	fp,0(sp)
 800dd60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800dd64:	00820074 	movhi	r2,2049
 800dd68:	10880604 	addi	r2,r2,8216
 800dd6c:	10800017 	ldw	r2,0(r2)
 800dd70:	10000526 	beq	r2,zero,800dd88 <alt_get_errno+0x34>
 800dd74:	00820074 	movhi	r2,2049
 800dd78:	10880604 	addi	r2,r2,8216
 800dd7c:	10800017 	ldw	r2,0(r2)
 800dd80:	103ee83a 	callr	r2
 800dd84:	00000206 	br	800dd90 <alt_get_errno+0x3c>
 800dd88:	00820074 	movhi	r2,2049
 800dd8c:	108ed704 	addi	r2,r2,15196
}
 800dd90:	e037883a 	mov	sp,fp
 800dd94:	dfc00117 	ldw	ra,4(sp)
 800dd98:	df000017 	ldw	fp,0(sp)
 800dd9c:	dec00204 	addi	sp,sp,8
 800dda0:	f800283a 	ret

0800dda4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800dda4:	defff904 	addi	sp,sp,-28
 800dda8:	dfc00615 	stw	ra,24(sp)
 800ddac:	df000515 	stw	fp,20(sp)
 800ddb0:	df000504 	addi	fp,sp,20
 800ddb4:	e13ffd15 	stw	r4,-12(fp)
 800ddb8:	e17ffe15 	stw	r5,-8(fp)
 800ddbc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ddc0:	e0bffd17 	ldw	r2,-12(fp)
 800ddc4:	10000816 	blt	r2,zero,800dde8 <write+0x44>
 800ddc8:	e13ffd17 	ldw	r4,-12(fp)
 800ddcc:	01400304 	movi	r5,12
 800ddd0:	8001ff40 	call	8001ff4 <__mulsi3>
 800ddd4:	1007883a 	mov	r3,r2
 800ddd8:	00820074 	movhi	r2,2049
 800dddc:	10837804 	addi	r2,r2,3552
 800dde0:	1885883a 	add	r2,r3,r2
 800dde4:	00000106 	br	800ddec <write+0x48>
 800dde8:	0005883a 	mov	r2,zero
 800ddec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800ddf0:	e0bffb17 	ldw	r2,-20(fp)
 800ddf4:	10002126 	beq	r2,zero,800de7c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800ddf8:	e0bffb17 	ldw	r2,-20(fp)
 800ddfc:	10800217 	ldw	r2,8(r2)
 800de00:	108000cc 	andi	r2,r2,3
 800de04:	10001826 	beq	r2,zero,800de68 <write+0xc4>
 800de08:	e0bffb17 	ldw	r2,-20(fp)
 800de0c:	10800017 	ldw	r2,0(r2)
 800de10:	10800617 	ldw	r2,24(r2)
 800de14:	10001426 	beq	r2,zero,800de68 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800de18:	e0bffb17 	ldw	r2,-20(fp)
 800de1c:	10800017 	ldw	r2,0(r2)
 800de20:	10800617 	ldw	r2,24(r2)
 800de24:	e0ffff17 	ldw	r3,-4(fp)
 800de28:	e13ffb17 	ldw	r4,-20(fp)
 800de2c:	e17ffe17 	ldw	r5,-8(fp)
 800de30:	180d883a 	mov	r6,r3
 800de34:	103ee83a 	callr	r2
 800de38:	e0bffc15 	stw	r2,-16(fp)
 800de3c:	e0bffc17 	ldw	r2,-16(fp)
 800de40:	1000070e 	bge	r2,zero,800de60 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800de44:	800dd540 	call	800dd54 <alt_get_errno>
 800de48:	1007883a 	mov	r3,r2
 800de4c:	e0bffc17 	ldw	r2,-16(fp)
 800de50:	0085c83a 	sub	r2,zero,r2
 800de54:	18800015 	stw	r2,0(r3)
        return -1;
 800de58:	00bfffc4 	movi	r2,-1
 800de5c:	00000c06 	br	800de90 <write+0xec>
      }
      return rval;
 800de60:	e0bffc17 	ldw	r2,-16(fp)
 800de64:	00000a06 	br	800de90 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800de68:	800dd540 	call	800dd54 <alt_get_errno>
 800de6c:	1007883a 	mov	r3,r2
 800de70:	00800344 	movi	r2,13
 800de74:	18800015 	stw	r2,0(r3)
 800de78:	00000406 	br	800de8c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800de7c:	800dd540 	call	800dd54 <alt_get_errno>
 800de80:	1007883a 	mov	r3,r2
 800de84:	00801444 	movi	r2,81
 800de88:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800de8c:	00bfffc4 	movi	r2,-1
}
 800de90:	e037883a 	mov	sp,fp
 800de94:	dfc00117 	ldw	ra,4(sp)
 800de98:	df000017 	ldw	fp,0(sp)
 800de9c:	dec00204 	addi	sp,sp,8
 800dea0:	f800283a 	ret

0800dea4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800dea4:	defffd04 	addi	sp,sp,-12
 800dea8:	dfc00215 	stw	ra,8(sp)
 800deac:	df000115 	stw	fp,4(sp)
 800deb0:	df000104 	addi	fp,sp,4
 800deb4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800deb8:	e13fff17 	ldw	r4,-4(fp)
 800debc:	01420074 	movhi	r5,2049
 800dec0:	29480304 	addi	r5,r5,8204
 800dec4:	800f14c0 	call	800f14c <alt_dev_llist_insert>
}
 800dec8:	e037883a 	mov	sp,fp
 800decc:	dfc00117 	ldw	ra,4(sp)
 800ded0:	df000017 	ldw	fp,0(sp)
 800ded4:	dec00204 	addi	sp,sp,8
 800ded8:	f800283a 	ret

0800dedc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800dedc:	defffd04 	addi	sp,sp,-12
 800dee0:	dfc00215 	stw	ra,8(sp)
 800dee4:	df000115 	stw	fp,4(sp)
 800dee8:	df000104 	addi	fp,sp,4
 800deec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800def0:	800fbbc0 	call	800fbbc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800def4:	00800044 	movi	r2,1
 800def8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800defc:	e037883a 	mov	sp,fp
 800df00:	dfc00117 	ldw	ra,4(sp)
 800df04:	df000017 	ldw	fp,0(sp)
 800df08:	dec00204 	addi	sp,sp,8
 800df0c:	f800283a 	ret

0800df10 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800df10:	defffe04 	addi	sp,sp,-8
 800df14:	dfc00115 	stw	ra,4(sp)
 800df18:	df000015 	stw	fp,0(sp)
 800df1c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800df20:	01082004 	movi	r4,8320
 800df24:	000b883a 	mov	r5,zero
 800df28:	01800104 	movi	r6,4
 800df2c:	01c0fa04 	movi	r7,1000
 800df30:	800ea400 	call	800ea40 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800df34:	01020074 	movhi	r4,2049
 800df38:	2103e204 	addi	r4,r4,3976
 800df3c:	000b883a 	mov	r5,zero
 800df40:	000d883a 	mov	r6,zero
 800df44:	800e0e40 	call	800e0e4 <altera_avalon_jtag_uart_init>
 800df48:	01020074 	movhi	r4,2049
 800df4c:	2103d804 	addi	r4,r4,3936
 800df50:	800dea40 	call	800dea4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 800df54:	01020074 	movhi	r4,2049
 800df58:	2107f004 	addi	r4,r4,8128
 800df5c:	800eb780 	call	800eb78 <alt_up_character_lcd_init>
 800df60:	01020074 	movhi	r4,2049
 800df64:	2107f004 	addi	r4,r4,8128
 800df68:	800dea40 	call	800dea4 <alt_dev_reg>
}
 800df6c:	e037883a 	mov	sp,fp
 800df70:	dfc00117 	ldw	ra,4(sp)
 800df74:	df000017 	ldw	fp,0(sp)
 800df78:	dec00204 	addi	sp,sp,8
 800df7c:	f800283a 	ret

0800df80 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800df80:	defffa04 	addi	sp,sp,-24
 800df84:	dfc00515 	stw	ra,20(sp)
 800df88:	df000415 	stw	fp,16(sp)
 800df8c:	df000404 	addi	fp,sp,16
 800df90:	e13ffd15 	stw	r4,-12(fp)
 800df94:	e17ffe15 	stw	r5,-8(fp)
 800df98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800df9c:	e0bffd17 	ldw	r2,-12(fp)
 800dfa0:	10800017 	ldw	r2,0(r2)
 800dfa4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800dfa8:	e0bffc17 	ldw	r2,-16(fp)
 800dfac:	10c00a04 	addi	r3,r2,40
 800dfb0:	e0bffd17 	ldw	r2,-12(fp)
 800dfb4:	10800217 	ldw	r2,8(r2)
 800dfb8:	1809883a 	mov	r4,r3
 800dfbc:	e17ffe17 	ldw	r5,-8(fp)
 800dfc0:	e1bfff17 	ldw	r6,-4(fp)
 800dfc4:	100f883a 	mov	r7,r2
 800dfc8:	800e5a80 	call	800e5a8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800dfcc:	e037883a 	mov	sp,fp
 800dfd0:	dfc00117 	ldw	ra,4(sp)
 800dfd4:	df000017 	ldw	fp,0(sp)
 800dfd8:	dec00204 	addi	sp,sp,8
 800dfdc:	f800283a 	ret

0800dfe0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800dfe0:	defffa04 	addi	sp,sp,-24
 800dfe4:	dfc00515 	stw	ra,20(sp)
 800dfe8:	df000415 	stw	fp,16(sp)
 800dfec:	df000404 	addi	fp,sp,16
 800dff0:	e13ffd15 	stw	r4,-12(fp)
 800dff4:	e17ffe15 	stw	r5,-8(fp)
 800dff8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800dffc:	e0bffd17 	ldw	r2,-12(fp)
 800e000:	10800017 	ldw	r2,0(r2)
 800e004:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800e008:	e0bffc17 	ldw	r2,-16(fp)
 800e00c:	10c00a04 	addi	r3,r2,40
 800e010:	e0bffd17 	ldw	r2,-12(fp)
 800e014:	10800217 	ldw	r2,8(r2)
 800e018:	1809883a 	mov	r4,r3
 800e01c:	e17ffe17 	ldw	r5,-8(fp)
 800e020:	e1bfff17 	ldw	r6,-4(fp)
 800e024:	100f883a 	mov	r7,r2
 800e028:	800e7b40 	call	800e7b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800e02c:	e037883a 	mov	sp,fp
 800e030:	dfc00117 	ldw	ra,4(sp)
 800e034:	df000017 	ldw	fp,0(sp)
 800e038:	dec00204 	addi	sp,sp,8
 800e03c:	f800283a 	ret

0800e040 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800e040:	defffc04 	addi	sp,sp,-16
 800e044:	dfc00315 	stw	ra,12(sp)
 800e048:	df000215 	stw	fp,8(sp)
 800e04c:	df000204 	addi	fp,sp,8
 800e050:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e054:	e0bfff17 	ldw	r2,-4(fp)
 800e058:	10800017 	ldw	r2,0(r2)
 800e05c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800e060:	e0bffe17 	ldw	r2,-8(fp)
 800e064:	10c00a04 	addi	r3,r2,40
 800e068:	e0bfff17 	ldw	r2,-4(fp)
 800e06c:	10800217 	ldw	r2,8(r2)
 800e070:	1809883a 	mov	r4,r3
 800e074:	100b883a 	mov	r5,r2
 800e078:	800e4540 	call	800e454 <altera_avalon_jtag_uart_close>
}
 800e07c:	e037883a 	mov	sp,fp
 800e080:	dfc00117 	ldw	ra,4(sp)
 800e084:	df000017 	ldw	fp,0(sp)
 800e088:	dec00204 	addi	sp,sp,8
 800e08c:	f800283a 	ret

0800e090 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800e090:	defffa04 	addi	sp,sp,-24
 800e094:	dfc00515 	stw	ra,20(sp)
 800e098:	df000415 	stw	fp,16(sp)
 800e09c:	df000404 	addi	fp,sp,16
 800e0a0:	e13ffd15 	stw	r4,-12(fp)
 800e0a4:	e17ffe15 	stw	r5,-8(fp)
 800e0a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800e0ac:	e0bffd17 	ldw	r2,-12(fp)
 800e0b0:	10800017 	ldw	r2,0(r2)
 800e0b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800e0b8:	e0bffc17 	ldw	r2,-16(fp)
 800e0bc:	10800a04 	addi	r2,r2,40
 800e0c0:	1009883a 	mov	r4,r2
 800e0c4:	e17ffe17 	ldw	r5,-8(fp)
 800e0c8:	e1bfff17 	ldw	r6,-4(fp)
 800e0cc:	800e4bc0 	call	800e4bc <altera_avalon_jtag_uart_ioctl>
}
 800e0d0:	e037883a 	mov	sp,fp
 800e0d4:	dfc00117 	ldw	ra,4(sp)
 800e0d8:	df000017 	ldw	fp,0(sp)
 800e0dc:	dec00204 	addi	sp,sp,8
 800e0e0:	f800283a 	ret

0800e0e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800e0e4:	defffa04 	addi	sp,sp,-24
 800e0e8:	dfc00515 	stw	ra,20(sp)
 800e0ec:	df000415 	stw	fp,16(sp)
 800e0f0:	df000404 	addi	fp,sp,16
 800e0f4:	e13ffd15 	stw	r4,-12(fp)
 800e0f8:	e17ffe15 	stw	r5,-8(fp)
 800e0fc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e100:	e0bffd17 	ldw	r2,-12(fp)
 800e104:	00c00044 	movi	r3,1
 800e108:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800e10c:	e0bffd17 	ldw	r2,-12(fp)
 800e110:	10800017 	ldw	r2,0(r2)
 800e114:	10800104 	addi	r2,r2,4
 800e118:	1007883a 	mov	r3,r2
 800e11c:	e0bffd17 	ldw	r2,-12(fp)
 800e120:	10800817 	ldw	r2,32(r2)
 800e124:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800e128:	e0fffe17 	ldw	r3,-8(fp)
 800e12c:	e0bfff17 	ldw	r2,-4(fp)
 800e130:	d8000015 	stw	zero,0(sp)
 800e134:	1809883a 	mov	r4,r3
 800e138:	100b883a 	mov	r5,r2
 800e13c:	01820074 	movhi	r6,2049
 800e140:	31b86a04 	addi	r6,r6,-7768
 800e144:	e1fffd17 	ldw	r7,-12(fp)
 800e148:	800f3540 	call	800f354 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800e14c:	e0bffd17 	ldw	r2,-12(fp)
 800e150:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800e154:	e0bffd17 	ldw	r2,-12(fp)
 800e158:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800e15c:	00820074 	movhi	r2,2049
 800e160:	108edc04 	addi	r2,r2,15216
 800e164:	10800017 	ldw	r2,0(r2)
 800e168:	1809883a 	mov	r4,r3
 800e16c:	100b883a 	mov	r5,r2
 800e170:	01820074 	movhi	r6,2049
 800e174:	31b8eb04 	addi	r6,r6,-7252
 800e178:	e1fffd17 	ldw	r7,-12(fp)
 800e17c:	800efa00 	call	800efa0 <alt_alarm_start>
 800e180:	1000040e 	bge	r2,zero,800e194 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800e184:	e0fffd17 	ldw	r3,-12(fp)
 800e188:	00a00034 	movhi	r2,32768
 800e18c:	10bfffc4 	addi	r2,r2,-1
 800e190:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800e194:	e037883a 	mov	sp,fp
 800e198:	dfc00117 	ldw	ra,4(sp)
 800e19c:	df000017 	ldw	fp,0(sp)
 800e1a0:	dec00204 	addi	sp,sp,8
 800e1a4:	f800283a 	ret

0800e1a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800e1a8:	defff804 	addi	sp,sp,-32
 800e1ac:	df000715 	stw	fp,28(sp)
 800e1b0:	df000704 	addi	fp,sp,28
 800e1b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800e1b8:	e0bfff17 	ldw	r2,-4(fp)
 800e1bc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800e1c0:	e0bffb17 	ldw	r2,-20(fp)
 800e1c4:	10800017 	ldw	r2,0(r2)
 800e1c8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e1cc:	e0bffc17 	ldw	r2,-16(fp)
 800e1d0:	10800104 	addi	r2,r2,4
 800e1d4:	10800037 	ldwio	r2,0(r2)
 800e1d8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800e1dc:	e0bffd17 	ldw	r2,-12(fp)
 800e1e0:	1080c00c 	andi	r2,r2,768
 800e1e4:	1000011e 	bne	r2,zero,800e1ec <altera_avalon_jtag_uart_irq+0x44>
      break;
 800e1e8:	00006c06 	br	800e39c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800e1ec:	e0bffd17 	ldw	r2,-12(fp)
 800e1f0:	1080400c 	andi	r2,r2,256
 800e1f4:	10003426 	beq	r2,zero,800e2c8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800e1f8:	00800074 	movhi	r2,1
 800e1fc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e200:	e0bffb17 	ldw	r2,-20(fp)
 800e204:	10800a17 	ldw	r2,40(r2)
 800e208:	10800044 	addi	r2,r2,1
 800e20c:	1081ffcc 	andi	r2,r2,2047
 800e210:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800e214:	e0bffb17 	ldw	r2,-20(fp)
 800e218:	10c00b17 	ldw	r3,44(r2)
 800e21c:	e0bffe17 	ldw	r2,-8(fp)
 800e220:	1880011e 	bne	r3,r2,800e228 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800e224:	00001606 	br	800e280 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800e228:	e0bffc17 	ldw	r2,-16(fp)
 800e22c:	10800037 	ldwio	r2,0(r2)
 800e230:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800e234:	e0bff917 	ldw	r2,-28(fp)
 800e238:	10a0000c 	andi	r2,r2,32768
 800e23c:	1000011e 	bne	r2,zero,800e244 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800e240:	00000f06 	br	800e280 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800e244:	e0bffb17 	ldw	r2,-20(fp)
 800e248:	10800a17 	ldw	r2,40(r2)
 800e24c:	e0fff917 	ldw	r3,-28(fp)
 800e250:	1809883a 	mov	r4,r3
 800e254:	e0fffb17 	ldw	r3,-20(fp)
 800e258:	1885883a 	add	r2,r3,r2
 800e25c:	10800e04 	addi	r2,r2,56
 800e260:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e264:	e0bffb17 	ldw	r2,-20(fp)
 800e268:	10800a17 	ldw	r2,40(r2)
 800e26c:	10800044 	addi	r2,r2,1
 800e270:	10c1ffcc 	andi	r3,r2,2047
 800e274:	e0bffb17 	ldw	r2,-20(fp)
 800e278:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800e27c:	003fe006 	br	800e200 <__alt_data_end+0xfc00e200>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800e280:	e0bff917 	ldw	r2,-28(fp)
 800e284:	10bfffec 	andhi	r2,r2,65535
 800e288:	10000f26 	beq	r2,zero,800e2c8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e28c:	e0bffb17 	ldw	r2,-20(fp)
 800e290:	10c00817 	ldw	r3,32(r2)
 800e294:	00bfff84 	movi	r2,-2
 800e298:	1886703a 	and	r3,r3,r2
 800e29c:	e0bffb17 	ldw	r2,-20(fp)
 800e2a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800e2a4:	e0bffc17 	ldw	r2,-16(fp)
 800e2a8:	10800104 	addi	r2,r2,4
 800e2ac:	1007883a 	mov	r3,r2
 800e2b0:	e0bffb17 	ldw	r2,-20(fp)
 800e2b4:	10800817 	ldw	r2,32(r2)
 800e2b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e2bc:	e0bffc17 	ldw	r2,-16(fp)
 800e2c0:	10800104 	addi	r2,r2,4
 800e2c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800e2c8:	e0bffd17 	ldw	r2,-12(fp)
 800e2cc:	1080800c 	andi	r2,r2,512
 800e2d0:	10003126 	beq	r2,zero,800e398 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800e2d4:	e0bffd17 	ldw	r2,-12(fp)
 800e2d8:	1004d43a 	srli	r2,r2,16
 800e2dc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800e2e0:	00001406 	br	800e334 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800e2e4:	e0bffc17 	ldw	r2,-16(fp)
 800e2e8:	e0fffb17 	ldw	r3,-20(fp)
 800e2ec:	18c00d17 	ldw	r3,52(r3)
 800e2f0:	e13ffb17 	ldw	r4,-20(fp)
 800e2f4:	20c7883a 	add	r3,r4,r3
 800e2f8:	18c20e04 	addi	r3,r3,2104
 800e2fc:	18c00003 	ldbu	r3,0(r3)
 800e300:	18c03fcc 	andi	r3,r3,255
 800e304:	18c0201c 	xori	r3,r3,128
 800e308:	18ffe004 	addi	r3,r3,-128
 800e30c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e310:	e0bffb17 	ldw	r2,-20(fp)
 800e314:	10800d17 	ldw	r2,52(r2)
 800e318:	10800044 	addi	r2,r2,1
 800e31c:	10c1ffcc 	andi	r3,r2,2047
 800e320:	e0bffb17 	ldw	r2,-20(fp)
 800e324:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800e328:	e0bffa17 	ldw	r2,-24(fp)
 800e32c:	10bfffc4 	addi	r2,r2,-1
 800e330:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800e334:	e0bffa17 	ldw	r2,-24(fp)
 800e338:	10000526 	beq	r2,zero,800e350 <altera_avalon_jtag_uart_irq+0x1a8>
 800e33c:	e0bffb17 	ldw	r2,-20(fp)
 800e340:	10c00d17 	ldw	r3,52(r2)
 800e344:	e0bffb17 	ldw	r2,-20(fp)
 800e348:	10800c17 	ldw	r2,48(r2)
 800e34c:	18bfe51e 	bne	r3,r2,800e2e4 <__alt_data_end+0xfc00e2e4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800e350:	e0bffa17 	ldw	r2,-24(fp)
 800e354:	10001026 	beq	r2,zero,800e398 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e358:	e0bffb17 	ldw	r2,-20(fp)
 800e35c:	10c00817 	ldw	r3,32(r2)
 800e360:	00bfff44 	movi	r2,-3
 800e364:	1886703a 	and	r3,r3,r2
 800e368:	e0bffb17 	ldw	r2,-20(fp)
 800e36c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e370:	e0bffb17 	ldw	r2,-20(fp)
 800e374:	10800017 	ldw	r2,0(r2)
 800e378:	10800104 	addi	r2,r2,4
 800e37c:	1007883a 	mov	r3,r2
 800e380:	e0bffb17 	ldw	r2,-20(fp)
 800e384:	10800817 	ldw	r2,32(r2)
 800e388:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e38c:	e0bffc17 	ldw	r2,-16(fp)
 800e390:	10800104 	addi	r2,r2,4
 800e394:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800e398:	003f8c06 	br	800e1cc <__alt_data_end+0xfc00e1cc>
}
 800e39c:	e037883a 	mov	sp,fp
 800e3a0:	df000017 	ldw	fp,0(sp)
 800e3a4:	dec00104 	addi	sp,sp,4
 800e3a8:	f800283a 	ret

0800e3ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800e3ac:	defff804 	addi	sp,sp,-32
 800e3b0:	df000715 	stw	fp,28(sp)
 800e3b4:	df000704 	addi	fp,sp,28
 800e3b8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800e3bc:	e0bffb17 	ldw	r2,-20(fp)
 800e3c0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800e3c4:	e0bff917 	ldw	r2,-28(fp)
 800e3c8:	10800017 	ldw	r2,0(r2)
 800e3cc:	10800104 	addi	r2,r2,4
 800e3d0:	10800037 	ldwio	r2,0(r2)
 800e3d4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800e3d8:	e0bffa17 	ldw	r2,-24(fp)
 800e3dc:	1081000c 	andi	r2,r2,1024
 800e3e0:	10000b26 	beq	r2,zero,800e410 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800e3e4:	e0bff917 	ldw	r2,-28(fp)
 800e3e8:	10800017 	ldw	r2,0(r2)
 800e3ec:	10800104 	addi	r2,r2,4
 800e3f0:	1007883a 	mov	r3,r2
 800e3f4:	e0bff917 	ldw	r2,-28(fp)
 800e3f8:	10800817 	ldw	r2,32(r2)
 800e3fc:	10810014 	ori	r2,r2,1024
 800e400:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800e404:	e0bff917 	ldw	r2,-28(fp)
 800e408:	10000915 	stw	zero,36(r2)
 800e40c:	00000a06 	br	800e438 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800e410:	e0bff917 	ldw	r2,-28(fp)
 800e414:	10c00917 	ldw	r3,36(r2)
 800e418:	00a00034 	movhi	r2,32768
 800e41c:	10bfff04 	addi	r2,r2,-4
 800e420:	10c00536 	bltu	r2,r3,800e438 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800e424:	e0bff917 	ldw	r2,-28(fp)
 800e428:	10800917 	ldw	r2,36(r2)
 800e42c:	10c00044 	addi	r3,r2,1
 800e430:	e0bff917 	ldw	r2,-28(fp)
 800e434:	10c00915 	stw	r3,36(r2)
 800e438:	00820074 	movhi	r2,2049
 800e43c:	108edc04 	addi	r2,r2,15216
 800e440:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800e444:	e037883a 	mov	sp,fp
 800e448:	df000017 	ldw	fp,0(sp)
 800e44c:	dec00104 	addi	sp,sp,4
 800e450:	f800283a 	ret

0800e454 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800e454:	defffd04 	addi	sp,sp,-12
 800e458:	df000215 	stw	fp,8(sp)
 800e45c:	df000204 	addi	fp,sp,8
 800e460:	e13ffe15 	stw	r4,-8(fp)
 800e464:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e468:	00000506 	br	800e480 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800e46c:	e0bfff17 	ldw	r2,-4(fp)
 800e470:	1090000c 	andi	r2,r2,16384
 800e474:	10000226 	beq	r2,zero,800e480 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800e478:	00bffd44 	movi	r2,-11
 800e47c:	00000b06 	br	800e4ac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e480:	e0bffe17 	ldw	r2,-8(fp)
 800e484:	10c00d17 	ldw	r3,52(r2)
 800e488:	e0bffe17 	ldw	r2,-8(fp)
 800e48c:	10800c17 	ldw	r2,48(r2)
 800e490:	18800526 	beq	r3,r2,800e4a8 <altera_avalon_jtag_uart_close+0x54>
 800e494:	e0bffe17 	ldw	r2,-8(fp)
 800e498:	10c00917 	ldw	r3,36(r2)
 800e49c:	e0bffe17 	ldw	r2,-8(fp)
 800e4a0:	10800117 	ldw	r2,4(r2)
 800e4a4:	18bff136 	bltu	r3,r2,800e46c <__alt_data_end+0xfc00e46c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800e4a8:	0005883a 	mov	r2,zero
}
 800e4ac:	e037883a 	mov	sp,fp
 800e4b0:	df000017 	ldw	fp,0(sp)
 800e4b4:	dec00104 	addi	sp,sp,4
 800e4b8:	f800283a 	ret

0800e4bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800e4bc:	defffa04 	addi	sp,sp,-24
 800e4c0:	df000515 	stw	fp,20(sp)
 800e4c4:	df000504 	addi	fp,sp,20
 800e4c8:	e13ffd15 	stw	r4,-12(fp)
 800e4cc:	e17ffe15 	stw	r5,-8(fp)
 800e4d0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800e4d4:	00bff9c4 	movi	r2,-25
 800e4d8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800e4dc:	e0bffe17 	ldw	r2,-8(fp)
 800e4e0:	10da8060 	cmpeqi	r3,r2,27137
 800e4e4:	1800031e 	bne	r3,zero,800e4f4 <altera_avalon_jtag_uart_ioctl+0x38>
 800e4e8:	109a80a0 	cmpeqi	r2,r2,27138
 800e4ec:	1000191e 	bne	r2,zero,800e554 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800e4f0:	00002806 	br	800e594 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800e4f4:	e0bffd17 	ldw	r2,-12(fp)
 800e4f8:	10c00117 	ldw	r3,4(r2)
 800e4fc:	00a00034 	movhi	r2,32768
 800e500:	10bfffc4 	addi	r2,r2,-1
 800e504:	18801226 	beq	r3,r2,800e550 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800e508:	e0bfff17 	ldw	r2,-4(fp)
 800e50c:	10800017 	ldw	r2,0(r2)
 800e510:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800e514:	e0bffc17 	ldw	r2,-16(fp)
 800e518:	10800090 	cmplti	r2,r2,2
 800e51c:	1000061e 	bne	r2,zero,800e538 <altera_avalon_jtag_uart_ioctl+0x7c>
 800e520:	e0fffc17 	ldw	r3,-16(fp)
 800e524:	00a00034 	movhi	r2,32768
 800e528:	10bfffc4 	addi	r2,r2,-1
 800e52c:	18800226 	beq	r3,r2,800e538 <altera_avalon_jtag_uart_ioctl+0x7c>
 800e530:	e0bffc17 	ldw	r2,-16(fp)
 800e534:	00000206 	br	800e540 <altera_avalon_jtag_uart_ioctl+0x84>
 800e538:	00a00034 	movhi	r2,32768
 800e53c:	10bfff84 	addi	r2,r2,-2
 800e540:	e0fffd17 	ldw	r3,-12(fp)
 800e544:	18800115 	stw	r2,4(r3)
      rc = 0;
 800e548:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800e54c:	00001106 	br	800e594 <altera_avalon_jtag_uart_ioctl+0xd8>
 800e550:	00001006 	br	800e594 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800e554:	e0bffd17 	ldw	r2,-12(fp)
 800e558:	10c00117 	ldw	r3,4(r2)
 800e55c:	00a00034 	movhi	r2,32768
 800e560:	10bfffc4 	addi	r2,r2,-1
 800e564:	18800a26 	beq	r3,r2,800e590 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800e568:	e0bffd17 	ldw	r2,-12(fp)
 800e56c:	10c00917 	ldw	r3,36(r2)
 800e570:	e0bffd17 	ldw	r2,-12(fp)
 800e574:	10800117 	ldw	r2,4(r2)
 800e578:	1885803a 	cmpltu	r2,r3,r2
 800e57c:	10c03fcc 	andi	r3,r2,255
 800e580:	e0bfff17 	ldw	r2,-4(fp)
 800e584:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800e588:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800e58c:	00000006 	br	800e590 <altera_avalon_jtag_uart_ioctl+0xd4>
 800e590:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800e594:	e0bffb17 	ldw	r2,-20(fp)
}
 800e598:	e037883a 	mov	sp,fp
 800e59c:	df000017 	ldw	fp,0(sp)
 800e5a0:	dec00104 	addi	sp,sp,4
 800e5a4:	f800283a 	ret

0800e5a8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800e5a8:	defff304 	addi	sp,sp,-52
 800e5ac:	dfc00c15 	stw	ra,48(sp)
 800e5b0:	df000b15 	stw	fp,44(sp)
 800e5b4:	df000b04 	addi	fp,sp,44
 800e5b8:	e13ffc15 	stw	r4,-16(fp)
 800e5bc:	e17ffd15 	stw	r5,-12(fp)
 800e5c0:	e1bffe15 	stw	r6,-8(fp)
 800e5c4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800e5c8:	e0bffd17 	ldw	r2,-12(fp)
 800e5cc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e5d0:	00004906 	br	800e6f8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800e5d4:	e0bffc17 	ldw	r2,-16(fp)
 800e5d8:	10800a17 	ldw	r2,40(r2)
 800e5dc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800e5e0:	e0bffc17 	ldw	r2,-16(fp)
 800e5e4:	10800b17 	ldw	r2,44(r2)
 800e5e8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800e5ec:	e0fff717 	ldw	r3,-36(fp)
 800e5f0:	e0bff817 	ldw	r2,-32(fp)
 800e5f4:	18800536 	bltu	r3,r2,800e60c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800e5f8:	e0fff717 	ldw	r3,-36(fp)
 800e5fc:	e0bff817 	ldw	r2,-32(fp)
 800e600:	1885c83a 	sub	r2,r3,r2
 800e604:	e0bff615 	stw	r2,-40(fp)
 800e608:	00000406 	br	800e61c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800e60c:	00c20004 	movi	r3,2048
 800e610:	e0bff817 	ldw	r2,-32(fp)
 800e614:	1885c83a 	sub	r2,r3,r2
 800e618:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e61c:	e0bff617 	ldw	r2,-40(fp)
 800e620:	1000011e 	bne	r2,zero,800e628 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800e624:	00001d06 	br	800e69c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800e628:	e0fffe17 	ldw	r3,-8(fp)
 800e62c:	e0bff617 	ldw	r2,-40(fp)
 800e630:	1880022e 	bgeu	r3,r2,800e63c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800e634:	e0bffe17 	ldw	r2,-8(fp)
 800e638:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800e63c:	e0bff817 	ldw	r2,-32(fp)
 800e640:	10800e04 	addi	r2,r2,56
 800e644:	e0fffc17 	ldw	r3,-16(fp)
 800e648:	1885883a 	add	r2,r3,r2
 800e64c:	e13ff517 	ldw	r4,-44(fp)
 800e650:	100b883a 	mov	r5,r2
 800e654:	e1bff617 	ldw	r6,-40(fp)
 800e658:	80078e40 	call	80078e4 <memcpy>
      ptr   += n;
 800e65c:	e0fff517 	ldw	r3,-44(fp)
 800e660:	e0bff617 	ldw	r2,-40(fp)
 800e664:	1885883a 	add	r2,r3,r2
 800e668:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800e66c:	e0fffe17 	ldw	r3,-8(fp)
 800e670:	e0bff617 	ldw	r2,-40(fp)
 800e674:	1885c83a 	sub	r2,r3,r2
 800e678:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e67c:	e0fff817 	ldw	r3,-32(fp)
 800e680:	e0bff617 	ldw	r2,-40(fp)
 800e684:	1885883a 	add	r2,r3,r2
 800e688:	10c1ffcc 	andi	r3,r2,2047
 800e68c:	e0bffc17 	ldw	r2,-16(fp)
 800e690:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800e694:	e0bffe17 	ldw	r2,-8(fp)
 800e698:	00bfce16 	blt	zero,r2,800e5d4 <__alt_data_end+0xfc00e5d4>

    /* If we read any data then return it */
    if (ptr != buffer)
 800e69c:	e0fff517 	ldw	r3,-44(fp)
 800e6a0:	e0bffd17 	ldw	r2,-12(fp)
 800e6a4:	18800126 	beq	r3,r2,800e6ac <altera_avalon_jtag_uart_read+0x104>
      break;
 800e6a8:	00001506 	br	800e700 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800e6ac:	e0bfff17 	ldw	r2,-4(fp)
 800e6b0:	1090000c 	andi	r2,r2,16384
 800e6b4:	10000126 	beq	r2,zero,800e6bc <altera_avalon_jtag_uart_read+0x114>
      break;
 800e6b8:	00001106 	br	800e700 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800e6bc:	0001883a 	nop
 800e6c0:	e0bffc17 	ldw	r2,-16(fp)
 800e6c4:	10c00a17 	ldw	r3,40(r2)
 800e6c8:	e0bff717 	ldw	r2,-36(fp)
 800e6cc:	1880051e 	bne	r3,r2,800e6e4 <altera_avalon_jtag_uart_read+0x13c>
 800e6d0:	e0bffc17 	ldw	r2,-16(fp)
 800e6d4:	10c00917 	ldw	r3,36(r2)
 800e6d8:	e0bffc17 	ldw	r2,-16(fp)
 800e6dc:	10800117 	ldw	r2,4(r2)
 800e6e0:	18bff736 	bltu	r3,r2,800e6c0 <__alt_data_end+0xfc00e6c0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800e6e4:	e0bffc17 	ldw	r2,-16(fp)
 800e6e8:	10c00a17 	ldw	r3,40(r2)
 800e6ec:	e0bff717 	ldw	r2,-36(fp)
 800e6f0:	1880011e 	bne	r3,r2,800e6f8 <altera_avalon_jtag_uart_read+0x150>
      break;
 800e6f4:	00000206 	br	800e700 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e6f8:	e0bffe17 	ldw	r2,-8(fp)
 800e6fc:	00bfb516 	blt	zero,r2,800e5d4 <__alt_data_end+0xfc00e5d4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800e700:	e0fff517 	ldw	r3,-44(fp)
 800e704:	e0bffd17 	ldw	r2,-12(fp)
 800e708:	18801826 	beq	r3,r2,800e76c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e70c:	0005303a 	rdctl	r2,status
 800e710:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e714:	e0fffa17 	ldw	r3,-24(fp)
 800e718:	00bfff84 	movi	r2,-2
 800e71c:	1884703a 	and	r2,r3,r2
 800e720:	1001703a 	wrctl	status,r2
  
  return context;
 800e724:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800e728:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e72c:	e0bffc17 	ldw	r2,-16(fp)
 800e730:	10800817 	ldw	r2,32(r2)
 800e734:	10c00054 	ori	r3,r2,1
 800e738:	e0bffc17 	ldw	r2,-16(fp)
 800e73c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e740:	e0bffc17 	ldw	r2,-16(fp)
 800e744:	10800017 	ldw	r2,0(r2)
 800e748:	10800104 	addi	r2,r2,4
 800e74c:	1007883a 	mov	r3,r2
 800e750:	e0bffc17 	ldw	r2,-16(fp)
 800e754:	10800817 	ldw	r2,32(r2)
 800e758:	18800035 	stwio	r2,0(r3)
 800e75c:	e0bff917 	ldw	r2,-28(fp)
 800e760:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e764:	e0bffb17 	ldw	r2,-20(fp)
 800e768:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800e76c:	e0fff517 	ldw	r3,-44(fp)
 800e770:	e0bffd17 	ldw	r2,-12(fp)
 800e774:	18800426 	beq	r3,r2,800e788 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800e778:	e0fff517 	ldw	r3,-44(fp)
 800e77c:	e0bffd17 	ldw	r2,-12(fp)
 800e780:	1885c83a 	sub	r2,r3,r2
 800e784:	00000606 	br	800e7a0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800e788:	e0bfff17 	ldw	r2,-4(fp)
 800e78c:	1090000c 	andi	r2,r2,16384
 800e790:	10000226 	beq	r2,zero,800e79c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800e794:	00bffd44 	movi	r2,-11
 800e798:	00000106 	br	800e7a0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800e79c:	00bffec4 	movi	r2,-5
}
 800e7a0:	e037883a 	mov	sp,fp
 800e7a4:	dfc00117 	ldw	ra,4(sp)
 800e7a8:	df000017 	ldw	fp,0(sp)
 800e7ac:	dec00204 	addi	sp,sp,8
 800e7b0:	f800283a 	ret

0800e7b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800e7b4:	defff304 	addi	sp,sp,-52
 800e7b8:	dfc00c15 	stw	ra,48(sp)
 800e7bc:	df000b15 	stw	fp,44(sp)
 800e7c0:	df000b04 	addi	fp,sp,44
 800e7c4:	e13ffc15 	stw	r4,-16(fp)
 800e7c8:	e17ffd15 	stw	r5,-12(fp)
 800e7cc:	e1bffe15 	stw	r6,-8(fp)
 800e7d0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800e7d4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800e7d8:	e0bffd17 	ldw	r2,-12(fp)
 800e7dc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e7e0:	00003806 	br	800e8c4 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800e7e4:	e0bffc17 	ldw	r2,-16(fp)
 800e7e8:	10800c17 	ldw	r2,48(r2)
 800e7ec:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800e7f0:	e0bffc17 	ldw	r2,-16(fp)
 800e7f4:	10800d17 	ldw	r2,52(r2)
 800e7f8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800e7fc:	e0fff817 	ldw	r3,-32(fp)
 800e800:	e0bff517 	ldw	r2,-44(fp)
 800e804:	1880062e 	bgeu	r3,r2,800e820 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800e808:	e0fff517 	ldw	r3,-44(fp)
 800e80c:	e0bff817 	ldw	r2,-32(fp)
 800e810:	1885c83a 	sub	r2,r3,r2
 800e814:	10bfffc4 	addi	r2,r2,-1
 800e818:	e0bff615 	stw	r2,-40(fp)
 800e81c:	00000b06 	br	800e84c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800e820:	e0bff517 	ldw	r2,-44(fp)
 800e824:	10000526 	beq	r2,zero,800e83c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800e828:	00c20004 	movi	r3,2048
 800e82c:	e0bff817 	ldw	r2,-32(fp)
 800e830:	1885c83a 	sub	r2,r3,r2
 800e834:	e0bff615 	stw	r2,-40(fp)
 800e838:	00000406 	br	800e84c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800e83c:	00c1ffc4 	movi	r3,2047
 800e840:	e0bff817 	ldw	r2,-32(fp)
 800e844:	1885c83a 	sub	r2,r3,r2
 800e848:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e84c:	e0bff617 	ldw	r2,-40(fp)
 800e850:	1000011e 	bne	r2,zero,800e858 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800e854:	00001d06 	br	800e8cc <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800e858:	e0fffe17 	ldw	r3,-8(fp)
 800e85c:	e0bff617 	ldw	r2,-40(fp)
 800e860:	1880022e 	bgeu	r3,r2,800e86c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800e864:	e0bffe17 	ldw	r2,-8(fp)
 800e868:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800e86c:	e0bff817 	ldw	r2,-32(fp)
 800e870:	10820e04 	addi	r2,r2,2104
 800e874:	e0fffc17 	ldw	r3,-16(fp)
 800e878:	1885883a 	add	r2,r3,r2
 800e87c:	1009883a 	mov	r4,r2
 800e880:	e17ffd17 	ldw	r5,-12(fp)
 800e884:	e1bff617 	ldw	r6,-40(fp)
 800e888:	80078e40 	call	80078e4 <memcpy>
      ptr   += n;
 800e88c:	e0fffd17 	ldw	r3,-12(fp)
 800e890:	e0bff617 	ldw	r2,-40(fp)
 800e894:	1885883a 	add	r2,r3,r2
 800e898:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800e89c:	e0fffe17 	ldw	r3,-8(fp)
 800e8a0:	e0bff617 	ldw	r2,-40(fp)
 800e8a4:	1885c83a 	sub	r2,r3,r2
 800e8a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e8ac:	e0fff817 	ldw	r3,-32(fp)
 800e8b0:	e0bff617 	ldw	r2,-40(fp)
 800e8b4:	1885883a 	add	r2,r3,r2
 800e8b8:	10c1ffcc 	andi	r3,r2,2047
 800e8bc:	e0bffc17 	ldw	r2,-16(fp)
 800e8c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e8c4:	e0bffe17 	ldw	r2,-8(fp)
 800e8c8:	00bfc616 	blt	zero,r2,800e7e4 <__alt_data_end+0xfc00e7e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e8cc:	0005303a 	rdctl	r2,status
 800e8d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e8d4:	e0fffa17 	ldw	r3,-24(fp)
 800e8d8:	00bfff84 	movi	r2,-2
 800e8dc:	1884703a 	and	r2,r3,r2
 800e8e0:	1001703a 	wrctl	status,r2
  
  return context;
 800e8e4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800e8e8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e8ec:	e0bffc17 	ldw	r2,-16(fp)
 800e8f0:	10800817 	ldw	r2,32(r2)
 800e8f4:	10c00094 	ori	r3,r2,2
 800e8f8:	e0bffc17 	ldw	r2,-16(fp)
 800e8fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e900:	e0bffc17 	ldw	r2,-16(fp)
 800e904:	10800017 	ldw	r2,0(r2)
 800e908:	10800104 	addi	r2,r2,4
 800e90c:	1007883a 	mov	r3,r2
 800e910:	e0bffc17 	ldw	r2,-16(fp)
 800e914:	10800817 	ldw	r2,32(r2)
 800e918:	18800035 	stwio	r2,0(r3)
 800e91c:	e0bff917 	ldw	r2,-28(fp)
 800e920:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e924:	e0bffb17 	ldw	r2,-20(fp)
 800e928:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800e92c:	e0bffe17 	ldw	r2,-8(fp)
 800e930:	0080120e 	bge	zero,r2,800e97c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800e934:	e0bfff17 	ldw	r2,-4(fp)
 800e938:	1090000c 	andi	r2,r2,16384
 800e93c:	10000126 	beq	r2,zero,800e944 <altera_avalon_jtag_uart_write+0x190>
        break;
 800e940:	00001006 	br	800e984 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800e944:	0001883a 	nop
 800e948:	e0bffc17 	ldw	r2,-16(fp)
 800e94c:	10c00d17 	ldw	r3,52(r2)
 800e950:	e0bff517 	ldw	r2,-44(fp)
 800e954:	1880051e 	bne	r3,r2,800e96c <altera_avalon_jtag_uart_write+0x1b8>
 800e958:	e0bffc17 	ldw	r2,-16(fp)
 800e95c:	10c00917 	ldw	r3,36(r2)
 800e960:	e0bffc17 	ldw	r2,-16(fp)
 800e964:	10800117 	ldw	r2,4(r2)
 800e968:	18bff736 	bltu	r3,r2,800e948 <__alt_data_end+0xfc00e948>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800e96c:	e0bffc17 	ldw	r2,-16(fp)
 800e970:	10800917 	ldw	r2,36(r2)
 800e974:	10000126 	beq	r2,zero,800e97c <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800e978:	00000206 	br	800e984 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800e97c:	e0bffe17 	ldw	r2,-8(fp)
 800e980:	00bf9716 	blt	zero,r2,800e7e0 <__alt_data_end+0xfc00e7e0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800e984:	e0fffd17 	ldw	r3,-12(fp)
 800e988:	e0bff717 	ldw	r2,-36(fp)
 800e98c:	18800426 	beq	r3,r2,800e9a0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800e990:	e0fffd17 	ldw	r3,-12(fp)
 800e994:	e0bff717 	ldw	r2,-36(fp)
 800e998:	1885c83a 	sub	r2,r3,r2
 800e99c:	00000606 	br	800e9b8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800e9a0:	e0bfff17 	ldw	r2,-4(fp)
 800e9a4:	1090000c 	andi	r2,r2,16384
 800e9a8:	10000226 	beq	r2,zero,800e9b4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800e9ac:	00bffd44 	movi	r2,-11
 800e9b0:	00000106 	br	800e9b8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800e9b4:	00bffec4 	movi	r2,-5
}
 800e9b8:	e037883a 	mov	sp,fp
 800e9bc:	dfc00117 	ldw	ra,4(sp)
 800e9c0:	df000017 	ldw	fp,0(sp)
 800e9c4:	dec00204 	addi	sp,sp,8
 800e9c8:	f800283a 	ret

0800e9cc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800e9cc:	defffa04 	addi	sp,sp,-24
 800e9d0:	dfc00515 	stw	ra,20(sp)
 800e9d4:	df000415 	stw	fp,16(sp)
 800e9d8:	df000404 	addi	fp,sp,16
 800e9dc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800e9e0:	0007883a 	mov	r3,zero
 800e9e4:	e0bfff17 	ldw	r2,-4(fp)
 800e9e8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800e9ec:	e0bfff17 	ldw	r2,-4(fp)
 800e9f0:	10800104 	addi	r2,r2,4
 800e9f4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e9f8:	0005303a 	rdctl	r2,status
 800e9fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ea00:	e0fffd17 	ldw	r3,-12(fp)
 800ea04:	00bfff84 	movi	r2,-2
 800ea08:	1884703a 	and	r2,r3,r2
 800ea0c:	1001703a 	wrctl	status,r2
  
  return context;
 800ea10:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800ea14:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800ea18:	800fab80 	call	800fab8 <alt_tick>
 800ea1c:	e0bffc17 	ldw	r2,-16(fp)
 800ea20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ea24:	e0bffe17 	ldw	r2,-8(fp)
 800ea28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800ea2c:	e037883a 	mov	sp,fp
 800ea30:	dfc00117 	ldw	ra,4(sp)
 800ea34:	df000017 	ldw	fp,0(sp)
 800ea38:	dec00204 	addi	sp,sp,8
 800ea3c:	f800283a 	ret

0800ea40 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800ea40:	defff804 	addi	sp,sp,-32
 800ea44:	dfc00715 	stw	ra,28(sp)
 800ea48:	df000615 	stw	fp,24(sp)
 800ea4c:	df000604 	addi	fp,sp,24
 800ea50:	e13ffc15 	stw	r4,-16(fp)
 800ea54:	e17ffd15 	stw	r5,-12(fp)
 800ea58:	e1bffe15 	stw	r6,-8(fp)
 800ea5c:	e1ffff15 	stw	r7,-4(fp)
 800ea60:	e0bfff17 	ldw	r2,-4(fp)
 800ea64:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800ea68:	00820074 	movhi	r2,2049
 800ea6c:	108edc04 	addi	r2,r2,15216
 800ea70:	10800017 	ldw	r2,0(r2)
 800ea74:	1000041e 	bne	r2,zero,800ea88 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 800ea78:	00820074 	movhi	r2,2049
 800ea7c:	108edc04 	addi	r2,r2,15216
 800ea80:	e0fffb17 	ldw	r3,-20(fp)
 800ea84:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800ea88:	e0bffc17 	ldw	r2,-16(fp)
 800ea8c:	10800104 	addi	r2,r2,4
 800ea90:	00c001c4 	movi	r3,7
 800ea94:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800ea98:	d8000015 	stw	zero,0(sp)
 800ea9c:	e13ffd17 	ldw	r4,-12(fp)
 800eaa0:	e17ffe17 	ldw	r5,-8(fp)
 800eaa4:	01820074 	movhi	r6,2049
 800eaa8:	31ba7304 	addi	r6,r6,-5684
 800eaac:	e1fffc17 	ldw	r7,-16(fp)
 800eab0:	800f3540 	call	800f354 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800eab4:	e037883a 	mov	sp,fp
 800eab8:	dfc00117 	ldw	ra,4(sp)
 800eabc:	df000017 	ldw	fp,0(sp)
 800eac0:	dec00204 	addi	sp,sp,8
 800eac4:	f800283a 	ret

0800eac8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 800eac8:	defffc04 	addi	sp,sp,-16
 800eacc:	df000315 	stw	fp,12(sp)
 800ead0:	df000304 	addi	fp,sp,12
 800ead4:	e13ffe15 	stw	r4,-8(fp)
 800ead8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 800eadc:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 800eae0:	e0bfff17 	ldw	r2,-4(fp)
 800eae4:	1000061e 	bne	r2,zero,800eb00 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 800eae8:	e0bffe17 	ldw	r2,-8(fp)
 800eaec:	1007883a 	mov	r3,r2
 800eaf0:	e0bffd03 	ldbu	r2,-12(fp)
 800eaf4:	1884b03a 	or	r2,r3,r2
 800eaf8:	e0bffd05 	stb	r2,-12(fp)
 800eafc:	00000806 	br	800eb20 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 800eb00:	e0bffe17 	ldw	r2,-8(fp)
 800eb04:	1007883a 	mov	r3,r2
 800eb08:	e0bffd03 	ldbu	r2,-12(fp)
 800eb0c:	1884b03a 	or	r2,r3,r2
 800eb10:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 800eb14:	e0bffd03 	ldbu	r2,-12(fp)
 800eb18:	10801014 	ori	r2,r2,64
 800eb1c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 800eb20:	e0fffd03 	ldbu	r3,-12(fp)
 800eb24:	00bfe004 	movi	r2,-128
 800eb28:	1884b03a 	or	r2,r3,r2
}
 800eb2c:	e037883a 	mov	sp,fp
 800eb30:	df000017 	ldw	fp,0(sp)
 800eb34:	dec00104 	addi	sp,sp,4
 800eb38:	f800283a 	ret

0800eb3c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 800eb3c:	defffd04 	addi	sp,sp,-12
 800eb40:	df000215 	stw	fp,8(sp)
 800eb44:	df000204 	addi	fp,sp,8
 800eb48:	e13ffe15 	stw	r4,-8(fp)
 800eb4c:	2805883a 	mov	r2,r5
 800eb50:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 800eb54:	e0bffe17 	ldw	r2,-8(fp)
 800eb58:	10800a17 	ldw	r2,40(r2)
 800eb5c:	1007883a 	mov	r3,r2
 800eb60:	e0bfff03 	ldbu	r2,-4(fp)
 800eb64:	18800025 	stbio	r2,0(r3)
}
 800eb68:	e037883a 	mov	sp,fp
 800eb6c:	df000017 	ldw	fp,0(sp)
 800eb70:	dec00104 	addi	sp,sp,4
 800eb74:	f800283a 	ret

0800eb78 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 800eb78:	defffe04 	addi	sp,sp,-8
 800eb7c:	df000115 	stw	fp,4(sp)
 800eb80:	df000104 	addi	fp,sp,4
 800eb84:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 800eb88:	e0bfff17 	ldw	r2,-4(fp)
 800eb8c:	10800a17 	ldw	r2,40(r2)
 800eb90:	1007883a 	mov	r3,r2
 800eb94:	00800044 	movi	r2,1
 800eb98:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 800eb9c:	e037883a 	mov	sp,fp
 800eba0:	df000017 	ldw	fp,0(sp)
 800eba4:	dec00104 	addi	sp,sp,4
 800eba8:	f800283a 	ret

0800ebac <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 800ebac:	defffc04 	addi	sp,sp,-16
 800ebb0:	dfc00315 	stw	ra,12(sp)
 800ebb4:	df000215 	stw	fp,8(sp)
 800ebb8:	df000204 	addi	fp,sp,8
 800ebbc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 800ebc0:	e13fff17 	ldw	r4,-4(fp)
 800ebc4:	01420074 	movhi	r5,2049
 800ebc8:	29480304 	addi	r5,r5,8204
 800ebcc:	800f2a80 	call	800f2a8 <alt_find_dev>
 800ebd0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800ebd4:	e0bffe17 	ldw	r2,-8(fp)
}
 800ebd8:	e037883a 	mov	sp,fp
 800ebdc:	dfc00117 	ldw	ra,4(sp)
 800ebe0:	df000017 	ldw	fp,0(sp)
 800ebe4:	dec00204 	addi	sp,sp,8
 800ebe8:	f800283a 	ret

0800ebec <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 800ebec:	defffb04 	addi	sp,sp,-20
 800ebf0:	df000415 	stw	fp,16(sp)
 800ebf4:	df000404 	addi	fp,sp,16
 800ebf8:	e13ffd15 	stw	r4,-12(fp)
 800ebfc:	e17ffe15 	stw	r5,-8(fp)
 800ec00:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 800ec04:	e03ffc15 	stw	zero,-16(fp)
 800ec08:	00000f06 	br	800ec48 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 800ec0c:	e0bffd17 	ldw	r2,-12(fp)
 800ec10:	10800a17 	ldw	r2,40(r2)
 800ec14:	10800044 	addi	r2,r2,1
 800ec18:	1009883a 	mov	r4,r2
 800ec1c:	e0fffe17 	ldw	r3,-8(fp)
 800ec20:	e0bffc17 	ldw	r2,-16(fp)
 800ec24:	1885883a 	add	r2,r3,r2
 800ec28:	10800003 	ldbu	r2,0(r2)
 800ec2c:	10803fcc 	andi	r2,r2,255
 800ec30:	1080201c 	xori	r2,r2,128
 800ec34:	10bfe004 	addi	r2,r2,-128
 800ec38:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 800ec3c:	e0bffc17 	ldw	r2,-16(fp)
 800ec40:	10800044 	addi	r2,r2,1
 800ec44:	e0bffc15 	stw	r2,-16(fp)
 800ec48:	e0fffc17 	ldw	r3,-16(fp)
 800ec4c:	e0bfff17 	ldw	r2,-4(fp)
 800ec50:	18bfee36 	bltu	r3,r2,800ec0c <__alt_data_end+0xfc00ec0c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 800ec54:	e037883a 	mov	sp,fp
 800ec58:	df000017 	ldw	fp,0(sp)
 800ec5c:	dec00104 	addi	sp,sp,4
 800ec60:	f800283a 	ret

0800ec64 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 800ec64:	defffd04 	addi	sp,sp,-12
 800ec68:	df000215 	stw	fp,8(sp)
 800ec6c:	df000204 	addi	fp,sp,8
 800ec70:	e13ffe15 	stw	r4,-8(fp)
 800ec74:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 800ec78:	00000d06 	br	800ecb0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 800ec7c:	e0bffe17 	ldw	r2,-8(fp)
 800ec80:	10800a17 	ldw	r2,40(r2)
 800ec84:	10800044 	addi	r2,r2,1
 800ec88:	1007883a 	mov	r3,r2
 800ec8c:	e0bfff17 	ldw	r2,-4(fp)
 800ec90:	10800003 	ldbu	r2,0(r2)
 800ec94:	10803fcc 	andi	r2,r2,255
 800ec98:	1080201c 	xori	r2,r2,128
 800ec9c:	10bfe004 	addi	r2,r2,-128
 800eca0:	18800025 	stbio	r2,0(r3)
		++ptr;
 800eca4:	e0bfff17 	ldw	r2,-4(fp)
 800eca8:	10800044 	addi	r2,r2,1
 800ecac:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 800ecb0:	e0bfff17 	ldw	r2,-4(fp)
 800ecb4:	10800003 	ldbu	r2,0(r2)
 800ecb8:	10803fcc 	andi	r2,r2,255
 800ecbc:	1080201c 	xori	r2,r2,128
 800ecc0:	10bfe004 	addi	r2,r2,-128
 800ecc4:	103fed1e 	bne	r2,zero,800ec7c <__alt_data_end+0xfc00ec7c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 800ecc8:	e037883a 	mov	sp,fp
 800eccc:	df000017 	ldw	fp,0(sp)
 800ecd0:	dec00104 	addi	sp,sp,4
 800ecd4:	f800283a 	ret

0800ecd8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 800ecd8:	defffb04 	addi	sp,sp,-20
 800ecdc:	dfc00415 	stw	ra,16(sp)
 800ece0:	df000315 	stw	fp,12(sp)
 800ece4:	df000304 	addi	fp,sp,12
 800ece8:	e13ffd15 	stw	r4,-12(fp)
 800ecec:	e17ffe15 	stw	r5,-8(fp)
 800ecf0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 800ecf4:	e0bffd17 	ldw	r2,-12(fp)
 800ecf8:	10c00017 	ldw	r3,0(r2)
 800ecfc:	e0bfff17 	ldw	r2,-4(fp)
 800ed00:	1809883a 	mov	r4,r3
 800ed04:	e17ffe17 	ldw	r5,-8(fp)
 800ed08:	100d883a 	mov	r6,r2
 800ed0c:	800ebec0 	call	800ebec <alt_up_character_lcd_write>
	return 0;
 800ed10:	0005883a 	mov	r2,zero
}
 800ed14:	e037883a 	mov	sp,fp
 800ed18:	dfc00117 	ldw	ra,4(sp)
 800ed1c:	df000017 	ldw	fp,0(sp)
 800ed20:	dec00204 	addi	sp,sp,8
 800ed24:	f800283a 	ret

0800ed28 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 800ed28:	defffa04 	addi	sp,sp,-24
 800ed2c:	dfc00515 	stw	ra,20(sp)
 800ed30:	df000415 	stw	fp,16(sp)
 800ed34:	df000404 	addi	fp,sp,16
 800ed38:	e13ffd15 	stw	r4,-12(fp)
 800ed3c:	e17ffe15 	stw	r5,-8(fp)
 800ed40:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 800ed44:	e0bffe17 	ldw	r2,-8(fp)
 800ed48:	10800a28 	cmpgeui	r2,r2,40
 800ed4c:	1000031e 	bne	r2,zero,800ed5c <alt_up_character_lcd_set_cursor_pos+0x34>
 800ed50:	e0bfff17 	ldw	r2,-4(fp)
 800ed54:	108000b0 	cmpltui	r2,r2,2
 800ed58:	1000021e 	bne	r2,zero,800ed64 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 800ed5c:	00bfffc4 	movi	r2,-1
 800ed60:	00000906 	br	800ed88 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800ed64:	e13ffe17 	ldw	r4,-8(fp)
 800ed68:	e17fff17 	ldw	r5,-4(fp)
 800ed6c:	800eac80 	call	800eac8 <get_DDRAM_addr>
 800ed70:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 800ed74:	e0bffc03 	ldbu	r2,-16(fp)
 800ed78:	e13ffd17 	ldw	r4,-12(fp)
 800ed7c:	100b883a 	mov	r5,r2
 800ed80:	800eb3c0 	call	800eb3c <alt_up_character_lcd_send_cmd>
	return 0;
 800ed84:	0005883a 	mov	r2,zero
}
 800ed88:	e037883a 	mov	sp,fp
 800ed8c:	dfc00117 	ldw	ra,4(sp)
 800ed90:	df000017 	ldw	fp,0(sp)
 800ed94:	dec00204 	addi	sp,sp,8
 800ed98:	f800283a 	ret

0800ed9c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800ed9c:	defffb04 	addi	sp,sp,-20
 800eda0:	dfc00415 	stw	ra,16(sp)
 800eda4:	df000315 	stw	fp,12(sp)
 800eda8:	df000304 	addi	fp,sp,12
 800edac:	e13ffe15 	stw	r4,-8(fp)
 800edb0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800edb4:	e0bfff17 	ldw	r2,-4(fp)
 800edb8:	1000011e 	bne	r2,zero,800edc0 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 800edbc:	00001406 	br	800ee10 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800edc0:	e0bfff17 	ldw	r2,-4(fp)
 800edc4:	0080020e 	bge	zero,r2,800edd0 <alt_up_character_lcd_shift_cursor+0x34>
 800edc8:	00800504 	movi	r2,20
 800edcc:	00000106 	br	800edd4 <alt_up_character_lcd_shift_cursor+0x38>
 800edd0:	00800404 	movi	r2,16
 800edd4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800edd8:	e0bfff17 	ldw	r2,-4(fp)
 800eddc:	1000010e 	bge	r2,zero,800ede4 <alt_up_character_lcd_shift_cursor+0x48>
 800ede0:	0085c83a 	sub	r2,zero,r2
 800ede4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800ede8:	00000406 	br	800edfc <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800edec:	e0bffd43 	ldbu	r2,-11(fp)
 800edf0:	e13ffe17 	ldw	r4,-8(fp)
 800edf4:	100b883a 	mov	r5,r2
 800edf8:	800eb3c0 	call	800eb3c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800edfc:	e0bffd03 	ldbu	r2,-12(fp)
 800ee00:	10ffffc4 	addi	r3,r2,-1
 800ee04:	e0fffd05 	stb	r3,-12(fp)
 800ee08:	10803fcc 	andi	r2,r2,255
 800ee0c:	103ff71e 	bne	r2,zero,800edec <__alt_data_end+0xfc00edec>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800ee10:	e037883a 	mov	sp,fp
 800ee14:	dfc00117 	ldw	ra,4(sp)
 800ee18:	df000017 	ldw	fp,0(sp)
 800ee1c:	dec00204 	addi	sp,sp,8
 800ee20:	f800283a 	ret

0800ee24 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800ee24:	defffb04 	addi	sp,sp,-20
 800ee28:	dfc00415 	stw	ra,16(sp)
 800ee2c:	df000315 	stw	fp,12(sp)
 800ee30:	df000304 	addi	fp,sp,12
 800ee34:	e13ffe15 	stw	r4,-8(fp)
 800ee38:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800ee3c:	e0bfff17 	ldw	r2,-4(fp)
 800ee40:	1000011e 	bne	r2,zero,800ee48 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 800ee44:	00001406 	br	800ee98 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800ee48:	e0bfff17 	ldw	r2,-4(fp)
 800ee4c:	0080020e 	bge	zero,r2,800ee58 <alt_up_character_lcd_shift_display+0x34>
 800ee50:	00800704 	movi	r2,28
 800ee54:	00000106 	br	800ee5c <alt_up_character_lcd_shift_display+0x38>
 800ee58:	00800604 	movi	r2,24
 800ee5c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800ee60:	e0bfff17 	ldw	r2,-4(fp)
 800ee64:	1000010e 	bge	r2,zero,800ee6c <alt_up_character_lcd_shift_display+0x48>
 800ee68:	0085c83a 	sub	r2,zero,r2
 800ee6c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800ee70:	00000406 	br	800ee84 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800ee74:	e0bffd43 	ldbu	r2,-11(fp)
 800ee78:	e13ffe17 	ldw	r4,-8(fp)
 800ee7c:	100b883a 	mov	r5,r2
 800ee80:	800eb3c0 	call	800eb3c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800ee84:	e0bffd03 	ldbu	r2,-12(fp)
 800ee88:	10ffffc4 	addi	r3,r2,-1
 800ee8c:	e0fffd05 	stb	r3,-12(fp)
 800ee90:	10803fcc 	andi	r2,r2,255
 800ee94:	103ff71e 	bne	r2,zero,800ee74 <__alt_data_end+0xfc00ee74>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800ee98:	e037883a 	mov	sp,fp
 800ee9c:	dfc00117 	ldw	ra,4(sp)
 800eea0:	df000017 	ldw	fp,0(sp)
 800eea4:	dec00204 	addi	sp,sp,8
 800eea8:	f800283a 	ret

0800eeac <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 800eeac:	defffa04 	addi	sp,sp,-24
 800eeb0:	dfc00515 	stw	ra,20(sp)
 800eeb4:	df000415 	stw	fp,16(sp)
 800eeb8:	df000404 	addi	fp,sp,16
 800eebc:	e13ffd15 	stw	r4,-12(fp)
 800eec0:	e17ffe15 	stw	r5,-8(fp)
 800eec4:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 800eec8:	e0bffe17 	ldw	r2,-8(fp)
 800eecc:	10800a28 	cmpgeui	r2,r2,40
 800eed0:	1000031e 	bne	r2,zero,800eee0 <alt_up_character_lcd_erase_pos+0x34>
 800eed4:	e0bfff17 	ldw	r2,-4(fp)
 800eed8:	108000b0 	cmpltui	r2,r2,2
 800eedc:	1000021e 	bne	r2,zero,800eee8 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 800eee0:	00bfffc4 	movi	r2,-1
 800eee4:	00000f06 	br	800ef24 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800eee8:	e13ffe17 	ldw	r4,-8(fp)
 800eeec:	e17fff17 	ldw	r5,-4(fp)
 800eef0:	800eac80 	call	800eac8 <get_DDRAM_addr>
 800eef4:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 800eef8:	e0bffc03 	ldbu	r2,-16(fp)
 800eefc:	e13ffd17 	ldw	r4,-12(fp)
 800ef00:	100b883a 	mov	r5,r2
 800ef04:	800eb3c0 	call	800eb3c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 800ef08:	e0bffd17 	ldw	r2,-12(fp)
 800ef0c:	10800a17 	ldw	r2,40(r2)
 800ef10:	10800044 	addi	r2,r2,1
 800ef14:	1007883a 	mov	r3,r2
 800ef18:	00800084 	movi	r2,2
 800ef1c:	18800025 	stbio	r2,0(r3)
	return 0;
 800ef20:	0005883a 	mov	r2,zero
}
 800ef24:	e037883a 	mov	sp,fp
 800ef28:	dfc00117 	ldw	ra,4(sp)
 800ef2c:	df000017 	ldw	fp,0(sp)
 800ef30:	dec00204 	addi	sp,sp,8
 800ef34:	f800283a 	ret

0800ef38 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 800ef38:	defffd04 	addi	sp,sp,-12
 800ef3c:	dfc00215 	stw	ra,8(sp)
 800ef40:	df000115 	stw	fp,4(sp)
 800ef44:	df000104 	addi	fp,sp,4
 800ef48:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 800ef4c:	e13fff17 	ldw	r4,-4(fp)
 800ef50:	01400304 	movi	r5,12
 800ef54:	800eb3c0 	call	800eb3c <alt_up_character_lcd_send_cmd>
}
 800ef58:	e037883a 	mov	sp,fp
 800ef5c:	dfc00117 	ldw	ra,4(sp)
 800ef60:	df000017 	ldw	fp,0(sp)
 800ef64:	dec00204 	addi	sp,sp,8
 800ef68:	f800283a 	ret

0800ef6c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 800ef6c:	defffd04 	addi	sp,sp,-12
 800ef70:	dfc00215 	stw	ra,8(sp)
 800ef74:	df000115 	stw	fp,4(sp)
 800ef78:	df000104 	addi	fp,sp,4
 800ef7c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 800ef80:	e13fff17 	ldw	r4,-4(fp)
 800ef84:	014003c4 	movi	r5,15
 800ef88:	800eb3c0 	call	800eb3c <alt_up_character_lcd_send_cmd>
}
 800ef8c:	e037883a 	mov	sp,fp
 800ef90:	dfc00117 	ldw	ra,4(sp)
 800ef94:	df000017 	ldw	fp,0(sp)
 800ef98:	dec00204 	addi	sp,sp,8
 800ef9c:	f800283a 	ret

0800efa0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800efa0:	defff504 	addi	sp,sp,-44
 800efa4:	df000a15 	stw	fp,40(sp)
 800efa8:	df000a04 	addi	fp,sp,40
 800efac:	e13ffc15 	stw	r4,-16(fp)
 800efb0:	e17ffd15 	stw	r5,-12(fp)
 800efb4:	e1bffe15 	stw	r6,-8(fp)
 800efb8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800efbc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800efc0:	00820074 	movhi	r2,2049
 800efc4:	108edc04 	addi	r2,r2,15216
 800efc8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800efcc:	10003f26 	beq	r2,zero,800f0cc <alt_alarm_start+0x12c>
  {
    if (alarm)
 800efd0:	e0bffc17 	ldw	r2,-16(fp)
 800efd4:	10003b26 	beq	r2,zero,800f0c4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800efd8:	e0bffc17 	ldw	r2,-16(fp)
 800efdc:	e0fffe17 	ldw	r3,-8(fp)
 800efe0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800efe4:	e0bffc17 	ldw	r2,-16(fp)
 800efe8:	e0ffff17 	ldw	r3,-4(fp)
 800efec:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eff0:	0005303a 	rdctl	r2,status
 800eff4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eff8:	e0fff817 	ldw	r3,-32(fp)
 800effc:	00bfff84 	movi	r2,-2
 800f000:	1884703a 	and	r2,r3,r2
 800f004:	1001703a 	wrctl	status,r2
  
  return context;
 800f008:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800f00c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800f010:	00820074 	movhi	r2,2049
 800f014:	108edd04 	addi	r2,r2,15220
 800f018:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800f01c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800f020:	e0fffd17 	ldw	r3,-12(fp)
 800f024:	e0bff617 	ldw	r2,-40(fp)
 800f028:	1885883a 	add	r2,r3,r2
 800f02c:	10c00044 	addi	r3,r2,1
 800f030:	e0bffc17 	ldw	r2,-16(fp)
 800f034:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800f038:	e0bffc17 	ldw	r2,-16(fp)
 800f03c:	10c00217 	ldw	r3,8(r2)
 800f040:	e0bff617 	ldw	r2,-40(fp)
 800f044:	1880042e 	bgeu	r3,r2,800f058 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800f048:	e0bffc17 	ldw	r2,-16(fp)
 800f04c:	00c00044 	movi	r3,1
 800f050:	10c00405 	stb	r3,16(r2)
 800f054:	00000206 	br	800f060 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800f058:	e0bffc17 	ldw	r2,-16(fp)
 800f05c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800f060:	e0fffc17 	ldw	r3,-16(fp)
 800f064:	00820074 	movhi	r2,2049
 800f068:	10880904 	addi	r2,r2,8228
 800f06c:	e0bff915 	stw	r2,-28(fp)
 800f070:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800f074:	e0bffa17 	ldw	r2,-24(fp)
 800f078:	e0fff917 	ldw	r3,-28(fp)
 800f07c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800f080:	e0bff917 	ldw	r2,-28(fp)
 800f084:	10c00017 	ldw	r3,0(r2)
 800f088:	e0bffa17 	ldw	r2,-24(fp)
 800f08c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800f090:	e0bff917 	ldw	r2,-28(fp)
 800f094:	10800017 	ldw	r2,0(r2)
 800f098:	e0fffa17 	ldw	r3,-24(fp)
 800f09c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800f0a0:	e0bff917 	ldw	r2,-28(fp)
 800f0a4:	e0fffa17 	ldw	r3,-24(fp)
 800f0a8:	10c00015 	stw	r3,0(r2)
 800f0ac:	e0bff717 	ldw	r2,-36(fp)
 800f0b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f0b4:	e0bffb17 	ldw	r2,-20(fp)
 800f0b8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800f0bc:	0005883a 	mov	r2,zero
 800f0c0:	00000306 	br	800f0d0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800f0c4:	00bffa84 	movi	r2,-22
 800f0c8:	00000106 	br	800f0d0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800f0cc:	00bfde84 	movi	r2,-134
  }
}
 800f0d0:	e037883a 	mov	sp,fp
 800f0d4:	df000017 	ldw	fp,0(sp)
 800f0d8:	dec00104 	addi	sp,sp,4
 800f0dc:	f800283a 	ret

0800f0e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800f0e0:	deffff04 	addi	sp,sp,-4
 800f0e4:	df000015 	stw	fp,0(sp)
 800f0e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800f0ec:	e037883a 	mov	sp,fp
 800f0f0:	df000017 	ldw	fp,0(sp)
 800f0f4:	dec00104 	addi	sp,sp,4
 800f0f8:	f800283a 	ret

0800f0fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f0fc:	defffe04 	addi	sp,sp,-8
 800f100:	dfc00115 	stw	ra,4(sp)
 800f104:	df000015 	stw	fp,0(sp)
 800f108:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f10c:	00820074 	movhi	r2,2049
 800f110:	10880604 	addi	r2,r2,8216
 800f114:	10800017 	ldw	r2,0(r2)
 800f118:	10000526 	beq	r2,zero,800f130 <alt_get_errno+0x34>
 800f11c:	00820074 	movhi	r2,2049
 800f120:	10880604 	addi	r2,r2,8216
 800f124:	10800017 	ldw	r2,0(r2)
 800f128:	103ee83a 	callr	r2
 800f12c:	00000206 	br	800f138 <alt_get_errno+0x3c>
 800f130:	00820074 	movhi	r2,2049
 800f134:	108ed704 	addi	r2,r2,15196
}
 800f138:	e037883a 	mov	sp,fp
 800f13c:	dfc00117 	ldw	ra,4(sp)
 800f140:	df000017 	ldw	fp,0(sp)
 800f144:	dec00204 	addi	sp,sp,8
 800f148:	f800283a 	ret

0800f14c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800f14c:	defffa04 	addi	sp,sp,-24
 800f150:	dfc00515 	stw	ra,20(sp)
 800f154:	df000415 	stw	fp,16(sp)
 800f158:	df000404 	addi	fp,sp,16
 800f15c:	e13ffe15 	stw	r4,-8(fp)
 800f160:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800f164:	e0bffe17 	ldw	r2,-8(fp)
 800f168:	10000326 	beq	r2,zero,800f178 <alt_dev_llist_insert+0x2c>
 800f16c:	e0bffe17 	ldw	r2,-8(fp)
 800f170:	10800217 	ldw	r2,8(r2)
 800f174:	1000061e 	bne	r2,zero,800f190 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800f178:	800f0fc0 	call	800f0fc <alt_get_errno>
 800f17c:	1007883a 	mov	r3,r2
 800f180:	00800584 	movi	r2,22
 800f184:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800f188:	00bffa84 	movi	r2,-22
 800f18c:	00001306 	br	800f1dc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800f190:	e0bffe17 	ldw	r2,-8(fp)
 800f194:	e0ffff17 	ldw	r3,-4(fp)
 800f198:	e0fffc15 	stw	r3,-16(fp)
 800f19c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800f1a0:	e0bffd17 	ldw	r2,-12(fp)
 800f1a4:	e0fffc17 	ldw	r3,-16(fp)
 800f1a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800f1ac:	e0bffc17 	ldw	r2,-16(fp)
 800f1b0:	10c00017 	ldw	r3,0(r2)
 800f1b4:	e0bffd17 	ldw	r2,-12(fp)
 800f1b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800f1bc:	e0bffc17 	ldw	r2,-16(fp)
 800f1c0:	10800017 	ldw	r2,0(r2)
 800f1c4:	e0fffd17 	ldw	r3,-12(fp)
 800f1c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800f1cc:	e0bffc17 	ldw	r2,-16(fp)
 800f1d0:	e0fffd17 	ldw	r3,-12(fp)
 800f1d4:	10c00015 	stw	r3,0(r2)

  return 0;  
 800f1d8:	0005883a 	mov	r2,zero
}
 800f1dc:	e037883a 	mov	sp,fp
 800f1e0:	dfc00117 	ldw	ra,4(sp)
 800f1e4:	df000017 	ldw	fp,0(sp)
 800f1e8:	dec00204 	addi	sp,sp,8
 800f1ec:	f800283a 	ret

0800f1f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800f1f0:	defffd04 	addi	sp,sp,-12
 800f1f4:	dfc00215 	stw	ra,8(sp)
 800f1f8:	df000115 	stw	fp,4(sp)
 800f1fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800f200:	00820074 	movhi	r2,2049
 800f204:	10805904 	addi	r2,r2,356
 800f208:	e0bfff15 	stw	r2,-4(fp)
 800f20c:	00000606 	br	800f228 <_do_ctors+0x38>
        (*ctor) (); 
 800f210:	e0bfff17 	ldw	r2,-4(fp)
 800f214:	10800017 	ldw	r2,0(r2)
 800f218:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800f21c:	e0bfff17 	ldw	r2,-4(fp)
 800f220:	10bfff04 	addi	r2,r2,-4
 800f224:	e0bfff15 	stw	r2,-4(fp)
 800f228:	e0ffff17 	ldw	r3,-4(fp)
 800f22c:	00820074 	movhi	r2,2049
 800f230:	10805a04 	addi	r2,r2,360
 800f234:	18bff62e 	bgeu	r3,r2,800f210 <__alt_data_end+0xfc00f210>
        (*ctor) (); 
}
 800f238:	e037883a 	mov	sp,fp
 800f23c:	dfc00117 	ldw	ra,4(sp)
 800f240:	df000017 	ldw	fp,0(sp)
 800f244:	dec00204 	addi	sp,sp,8
 800f248:	f800283a 	ret

0800f24c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800f24c:	defffd04 	addi	sp,sp,-12
 800f250:	dfc00215 	stw	ra,8(sp)
 800f254:	df000115 	stw	fp,4(sp)
 800f258:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800f25c:	00820074 	movhi	r2,2049
 800f260:	10805904 	addi	r2,r2,356
 800f264:	e0bfff15 	stw	r2,-4(fp)
 800f268:	00000606 	br	800f284 <_do_dtors+0x38>
        (*dtor) (); 
 800f26c:	e0bfff17 	ldw	r2,-4(fp)
 800f270:	10800017 	ldw	r2,0(r2)
 800f274:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800f278:	e0bfff17 	ldw	r2,-4(fp)
 800f27c:	10bfff04 	addi	r2,r2,-4
 800f280:	e0bfff15 	stw	r2,-4(fp)
 800f284:	e0ffff17 	ldw	r3,-4(fp)
 800f288:	00820074 	movhi	r2,2049
 800f28c:	10805a04 	addi	r2,r2,360
 800f290:	18bff62e 	bgeu	r3,r2,800f26c <__alt_data_end+0xfc00f26c>
        (*dtor) (); 
}
 800f294:	e037883a 	mov	sp,fp
 800f298:	dfc00117 	ldw	ra,4(sp)
 800f29c:	df000017 	ldw	fp,0(sp)
 800f2a0:	dec00204 	addi	sp,sp,8
 800f2a4:	f800283a 	ret

0800f2a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800f2a8:	defffa04 	addi	sp,sp,-24
 800f2ac:	dfc00515 	stw	ra,20(sp)
 800f2b0:	df000415 	stw	fp,16(sp)
 800f2b4:	df000404 	addi	fp,sp,16
 800f2b8:	e13ffe15 	stw	r4,-8(fp)
 800f2bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800f2c0:	e0bfff17 	ldw	r2,-4(fp)
 800f2c4:	10800017 	ldw	r2,0(r2)
 800f2c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800f2cc:	e13ffe17 	ldw	r4,-8(fp)
 800f2d0:	80021500 	call	8002150 <strlen>
 800f2d4:	10800044 	addi	r2,r2,1
 800f2d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800f2dc:	00000d06 	br	800f314 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800f2e0:	e0bffc17 	ldw	r2,-16(fp)
 800f2e4:	10c00217 	ldw	r3,8(r2)
 800f2e8:	e0bffd17 	ldw	r2,-12(fp)
 800f2ec:	1809883a 	mov	r4,r3
 800f2f0:	e17ffe17 	ldw	r5,-8(fp)
 800f2f4:	100d883a 	mov	r6,r2
 800f2f8:	800fe100 	call	800fe10 <memcmp>
 800f2fc:	1000021e 	bne	r2,zero,800f308 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800f300:	e0bffc17 	ldw	r2,-16(fp)
 800f304:	00000706 	br	800f324 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800f308:	e0bffc17 	ldw	r2,-16(fp)
 800f30c:	10800017 	ldw	r2,0(r2)
 800f310:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800f314:	e0fffc17 	ldw	r3,-16(fp)
 800f318:	e0bfff17 	ldw	r2,-4(fp)
 800f31c:	18bff01e 	bne	r3,r2,800f2e0 <__alt_data_end+0xfc00f2e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800f320:	0005883a 	mov	r2,zero
}
 800f324:	e037883a 	mov	sp,fp
 800f328:	dfc00117 	ldw	ra,4(sp)
 800f32c:	df000017 	ldw	fp,0(sp)
 800f330:	dec00204 	addi	sp,sp,8
 800f334:	f800283a 	ret

0800f338 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800f338:	deffff04 	addi	sp,sp,-4
 800f33c:	df000015 	stw	fp,0(sp)
 800f340:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800f344:	e037883a 	mov	sp,fp
 800f348:	df000017 	ldw	fp,0(sp)
 800f34c:	dec00104 	addi	sp,sp,4
 800f350:	f800283a 	ret

0800f354 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800f354:	defff904 	addi	sp,sp,-28
 800f358:	dfc00615 	stw	ra,24(sp)
 800f35c:	df000515 	stw	fp,20(sp)
 800f360:	df000504 	addi	fp,sp,20
 800f364:	e13ffc15 	stw	r4,-16(fp)
 800f368:	e17ffd15 	stw	r5,-12(fp)
 800f36c:	e1bffe15 	stw	r6,-8(fp)
 800f370:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800f374:	e0800217 	ldw	r2,8(fp)
 800f378:	d8800015 	stw	r2,0(sp)
 800f37c:	e13ffc17 	ldw	r4,-16(fp)
 800f380:	e17ffd17 	ldw	r5,-12(fp)
 800f384:	e1bffe17 	ldw	r6,-8(fp)
 800f388:	e1ffff17 	ldw	r7,-4(fp)
 800f38c:	800f5340 	call	800f534 <alt_iic_isr_register>
}  
 800f390:	e037883a 	mov	sp,fp
 800f394:	dfc00117 	ldw	ra,4(sp)
 800f398:	df000017 	ldw	fp,0(sp)
 800f39c:	dec00204 	addi	sp,sp,8
 800f3a0:	f800283a 	ret

0800f3a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800f3a4:	defff904 	addi	sp,sp,-28
 800f3a8:	df000615 	stw	fp,24(sp)
 800f3ac:	df000604 	addi	fp,sp,24
 800f3b0:	e13ffe15 	stw	r4,-8(fp)
 800f3b4:	e17fff15 	stw	r5,-4(fp)
 800f3b8:	e0bfff17 	ldw	r2,-4(fp)
 800f3bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f3c0:	0005303a 	rdctl	r2,status
 800f3c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f3c8:	e0fffb17 	ldw	r3,-20(fp)
 800f3cc:	00bfff84 	movi	r2,-2
 800f3d0:	1884703a 	and	r2,r3,r2
 800f3d4:	1001703a 	wrctl	status,r2
  
  return context;
 800f3d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f3dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800f3e0:	e0bffa17 	ldw	r2,-24(fp)
 800f3e4:	00c00044 	movi	r3,1
 800f3e8:	1884983a 	sll	r2,r3,r2
 800f3ec:	1007883a 	mov	r3,r2
 800f3f0:	00820074 	movhi	r2,2049
 800f3f4:	108edb04 	addi	r2,r2,15212
 800f3f8:	10800017 	ldw	r2,0(r2)
 800f3fc:	1886b03a 	or	r3,r3,r2
 800f400:	00820074 	movhi	r2,2049
 800f404:	108edb04 	addi	r2,r2,15212
 800f408:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f40c:	00820074 	movhi	r2,2049
 800f410:	108edb04 	addi	r2,r2,15212
 800f414:	10800017 	ldw	r2,0(r2)
 800f418:	100170fa 	wrctl	ienable,r2
 800f41c:	e0bffc17 	ldw	r2,-16(fp)
 800f420:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f424:	e0bffd17 	ldw	r2,-12(fp)
 800f428:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f42c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800f430:	0001883a 	nop
}
 800f434:	e037883a 	mov	sp,fp
 800f438:	df000017 	ldw	fp,0(sp)
 800f43c:	dec00104 	addi	sp,sp,4
 800f440:	f800283a 	ret

0800f444 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800f444:	defff904 	addi	sp,sp,-28
 800f448:	df000615 	stw	fp,24(sp)
 800f44c:	df000604 	addi	fp,sp,24
 800f450:	e13ffe15 	stw	r4,-8(fp)
 800f454:	e17fff15 	stw	r5,-4(fp)
 800f458:	e0bfff17 	ldw	r2,-4(fp)
 800f45c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f460:	0005303a 	rdctl	r2,status
 800f464:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f468:	e0fffb17 	ldw	r3,-20(fp)
 800f46c:	00bfff84 	movi	r2,-2
 800f470:	1884703a 	and	r2,r3,r2
 800f474:	1001703a 	wrctl	status,r2
  
  return context;
 800f478:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f47c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800f480:	e0bffa17 	ldw	r2,-24(fp)
 800f484:	00c00044 	movi	r3,1
 800f488:	1884983a 	sll	r2,r3,r2
 800f48c:	0084303a 	nor	r2,zero,r2
 800f490:	1007883a 	mov	r3,r2
 800f494:	00820074 	movhi	r2,2049
 800f498:	108edb04 	addi	r2,r2,15212
 800f49c:	10800017 	ldw	r2,0(r2)
 800f4a0:	1886703a 	and	r3,r3,r2
 800f4a4:	00820074 	movhi	r2,2049
 800f4a8:	108edb04 	addi	r2,r2,15212
 800f4ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f4b0:	00820074 	movhi	r2,2049
 800f4b4:	108edb04 	addi	r2,r2,15212
 800f4b8:	10800017 	ldw	r2,0(r2)
 800f4bc:	100170fa 	wrctl	ienable,r2
 800f4c0:	e0bffc17 	ldw	r2,-16(fp)
 800f4c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f4c8:	e0bffd17 	ldw	r2,-12(fp)
 800f4cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f4d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800f4d4:	0001883a 	nop
}
 800f4d8:	e037883a 	mov	sp,fp
 800f4dc:	df000017 	ldw	fp,0(sp)
 800f4e0:	dec00104 	addi	sp,sp,4
 800f4e4:	f800283a 	ret

0800f4e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800f4e8:	defffc04 	addi	sp,sp,-16
 800f4ec:	df000315 	stw	fp,12(sp)
 800f4f0:	df000304 	addi	fp,sp,12
 800f4f4:	e13ffe15 	stw	r4,-8(fp)
 800f4f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800f4fc:	000530fa 	rdctl	r2,ienable
 800f500:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800f504:	e0bfff17 	ldw	r2,-4(fp)
 800f508:	00c00044 	movi	r3,1
 800f50c:	1884983a 	sll	r2,r3,r2
 800f510:	1007883a 	mov	r3,r2
 800f514:	e0bffd17 	ldw	r2,-12(fp)
 800f518:	1884703a 	and	r2,r3,r2
 800f51c:	1004c03a 	cmpne	r2,r2,zero
 800f520:	10803fcc 	andi	r2,r2,255
}
 800f524:	e037883a 	mov	sp,fp
 800f528:	df000017 	ldw	fp,0(sp)
 800f52c:	dec00104 	addi	sp,sp,4
 800f530:	f800283a 	ret

0800f534 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800f534:	defff504 	addi	sp,sp,-44
 800f538:	dfc00a15 	stw	ra,40(sp)
 800f53c:	df000915 	stw	fp,36(sp)
 800f540:	df000904 	addi	fp,sp,36
 800f544:	e13ffc15 	stw	r4,-16(fp)
 800f548:	e17ffd15 	stw	r5,-12(fp)
 800f54c:	e1bffe15 	stw	r6,-8(fp)
 800f550:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800f554:	00bffa84 	movi	r2,-22
 800f558:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800f55c:	e0bffd17 	ldw	r2,-12(fp)
 800f560:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800f564:	e0bff817 	ldw	r2,-32(fp)
 800f568:	10800808 	cmpgei	r2,r2,32
 800f56c:	1000271e 	bne	r2,zero,800f60c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f570:	0005303a 	rdctl	r2,status
 800f574:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f578:	e0fffa17 	ldw	r3,-24(fp)
 800f57c:	00bfff84 	movi	r2,-2
 800f580:	1884703a 	and	r2,r3,r2
 800f584:	1001703a 	wrctl	status,r2
  
  return context;
 800f588:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800f58c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 800f590:	00820074 	movhi	r2,2049
 800f594:	108ee804 	addi	r2,r2,15264
 800f598:	e0fff817 	ldw	r3,-32(fp)
 800f59c:	180690fa 	slli	r3,r3,3
 800f5a0:	10c5883a 	add	r2,r2,r3
 800f5a4:	e0fffe17 	ldw	r3,-8(fp)
 800f5a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800f5ac:	00820074 	movhi	r2,2049
 800f5b0:	108ee804 	addi	r2,r2,15264
 800f5b4:	e0fff817 	ldw	r3,-32(fp)
 800f5b8:	180690fa 	slli	r3,r3,3
 800f5bc:	10c5883a 	add	r2,r2,r3
 800f5c0:	10800104 	addi	r2,r2,4
 800f5c4:	e0ffff17 	ldw	r3,-4(fp)
 800f5c8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800f5cc:	e0bffe17 	ldw	r2,-8(fp)
 800f5d0:	10000526 	beq	r2,zero,800f5e8 <alt_iic_isr_register+0xb4>
 800f5d4:	e0bff817 	ldw	r2,-32(fp)
 800f5d8:	e13ffc17 	ldw	r4,-16(fp)
 800f5dc:	100b883a 	mov	r5,r2
 800f5e0:	800f3a40 	call	800f3a4 <alt_ic_irq_enable>
 800f5e4:	00000406 	br	800f5f8 <alt_iic_isr_register+0xc4>
 800f5e8:	e0bff817 	ldw	r2,-32(fp)
 800f5ec:	e13ffc17 	ldw	r4,-16(fp)
 800f5f0:	100b883a 	mov	r5,r2
 800f5f4:	800f4440 	call	800f444 <alt_ic_irq_disable>
 800f5f8:	e0bff715 	stw	r2,-36(fp)
 800f5fc:	e0bff917 	ldw	r2,-28(fp)
 800f600:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f604:	e0bffb17 	ldw	r2,-20(fp)
 800f608:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800f60c:	e0bff717 	ldw	r2,-36(fp)
}
 800f610:	e037883a 	mov	sp,fp
 800f614:	dfc00117 	ldw	ra,4(sp)
 800f618:	df000017 	ldw	fp,0(sp)
 800f61c:	dec00204 	addi	sp,sp,8
 800f620:	f800283a 	ret

0800f624 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800f624:	defff804 	addi	sp,sp,-32
 800f628:	dfc00715 	stw	ra,28(sp)
 800f62c:	df000615 	stw	fp,24(sp)
 800f630:	dc000515 	stw	r16,20(sp)
 800f634:	df000604 	addi	fp,sp,24
 800f638:	e13ffb15 	stw	r4,-20(fp)
 800f63c:	e17ffc15 	stw	r5,-16(fp)
 800f640:	e1bffd15 	stw	r6,-12(fp)
 800f644:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800f648:	e13ffc17 	ldw	r4,-16(fp)
 800f64c:	e17ffd17 	ldw	r5,-12(fp)
 800f650:	e1bffe17 	ldw	r6,-8(fp)
 800f654:	800f8c00 	call	800f8c0 <open>
 800f658:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800f65c:	e0bffa17 	ldw	r2,-24(fp)
 800f660:	10002216 	blt	r2,zero,800f6ec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800f664:	04020074 	movhi	r16,2049
 800f668:	84037804 	addi	r16,r16,3552
 800f66c:	e0bffa17 	ldw	r2,-24(fp)
 800f670:	1009883a 	mov	r4,r2
 800f674:	01400304 	movi	r5,12
 800f678:	8001ff40 	call	8001ff4 <__mulsi3>
 800f67c:	8085883a 	add	r2,r16,r2
 800f680:	10c00017 	ldw	r3,0(r2)
 800f684:	e0bffb17 	ldw	r2,-20(fp)
 800f688:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800f68c:	04020074 	movhi	r16,2049
 800f690:	84037804 	addi	r16,r16,3552
 800f694:	e0bffa17 	ldw	r2,-24(fp)
 800f698:	1009883a 	mov	r4,r2
 800f69c:	01400304 	movi	r5,12
 800f6a0:	8001ff40 	call	8001ff4 <__mulsi3>
 800f6a4:	8085883a 	add	r2,r16,r2
 800f6a8:	10800104 	addi	r2,r2,4
 800f6ac:	10c00017 	ldw	r3,0(r2)
 800f6b0:	e0bffb17 	ldw	r2,-20(fp)
 800f6b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800f6b8:	04020074 	movhi	r16,2049
 800f6bc:	84037804 	addi	r16,r16,3552
 800f6c0:	e0bffa17 	ldw	r2,-24(fp)
 800f6c4:	1009883a 	mov	r4,r2
 800f6c8:	01400304 	movi	r5,12
 800f6cc:	8001ff40 	call	8001ff4 <__mulsi3>
 800f6d0:	8085883a 	add	r2,r16,r2
 800f6d4:	10800204 	addi	r2,r2,8
 800f6d8:	10c00017 	ldw	r3,0(r2)
 800f6dc:	e0bffb17 	ldw	r2,-20(fp)
 800f6e0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800f6e4:	e13ffa17 	ldw	r4,-24(fp)
 800f6e8:	800dc240 	call	800dc24 <alt_release_fd>
  }
} 
 800f6ec:	e6ffff04 	addi	sp,fp,-4
 800f6f0:	dfc00217 	ldw	ra,8(sp)
 800f6f4:	df000117 	ldw	fp,4(sp)
 800f6f8:	dc000017 	ldw	r16,0(sp)
 800f6fc:	dec00304 	addi	sp,sp,12
 800f700:	f800283a 	ret

0800f704 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800f704:	defffb04 	addi	sp,sp,-20
 800f708:	dfc00415 	stw	ra,16(sp)
 800f70c:	df000315 	stw	fp,12(sp)
 800f710:	df000304 	addi	fp,sp,12
 800f714:	e13ffd15 	stw	r4,-12(fp)
 800f718:	e17ffe15 	stw	r5,-8(fp)
 800f71c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800f720:	01020074 	movhi	r4,2049
 800f724:	21037b04 	addi	r4,r4,3564
 800f728:	e17ffd17 	ldw	r5,-12(fp)
 800f72c:	01800044 	movi	r6,1
 800f730:	01c07fc4 	movi	r7,511
 800f734:	800f6240 	call	800f624 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800f738:	01020074 	movhi	r4,2049
 800f73c:	21037804 	addi	r4,r4,3552
 800f740:	e17ffe17 	ldw	r5,-8(fp)
 800f744:	000d883a 	mov	r6,zero
 800f748:	01c07fc4 	movi	r7,511
 800f74c:	800f6240 	call	800f624 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800f750:	01020074 	movhi	r4,2049
 800f754:	21037e04 	addi	r4,r4,3576
 800f758:	e17fff17 	ldw	r5,-4(fp)
 800f75c:	01800044 	movi	r6,1
 800f760:	01c07fc4 	movi	r7,511
 800f764:	800f6240 	call	800f624 <alt_open_fd>
}  
 800f768:	e037883a 	mov	sp,fp
 800f76c:	dfc00117 	ldw	ra,4(sp)
 800f770:	df000017 	ldw	fp,0(sp)
 800f774:	dec00204 	addi	sp,sp,8
 800f778:	f800283a 	ret

0800f77c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f77c:	defffe04 	addi	sp,sp,-8
 800f780:	dfc00115 	stw	ra,4(sp)
 800f784:	df000015 	stw	fp,0(sp)
 800f788:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f78c:	00820074 	movhi	r2,2049
 800f790:	10880604 	addi	r2,r2,8216
 800f794:	10800017 	ldw	r2,0(r2)
 800f798:	10000526 	beq	r2,zero,800f7b0 <alt_get_errno+0x34>
 800f79c:	00820074 	movhi	r2,2049
 800f7a0:	10880604 	addi	r2,r2,8216
 800f7a4:	10800017 	ldw	r2,0(r2)
 800f7a8:	103ee83a 	callr	r2
 800f7ac:	00000206 	br	800f7b8 <alt_get_errno+0x3c>
 800f7b0:	00820074 	movhi	r2,2049
 800f7b4:	108ed704 	addi	r2,r2,15196
}
 800f7b8:	e037883a 	mov	sp,fp
 800f7bc:	dfc00117 	ldw	ra,4(sp)
 800f7c0:	df000017 	ldw	fp,0(sp)
 800f7c4:	dec00204 	addi	sp,sp,8
 800f7c8:	f800283a 	ret

0800f7cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800f7cc:	defffb04 	addi	sp,sp,-20
 800f7d0:	dfc00415 	stw	ra,16(sp)
 800f7d4:	df000315 	stw	fp,12(sp)
 800f7d8:	dc000215 	stw	r16,8(sp)
 800f7dc:	df000304 	addi	fp,sp,12
 800f7e0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800f7e4:	e0bffe17 	ldw	r2,-8(fp)
 800f7e8:	10800217 	ldw	r2,8(r2)
 800f7ec:	10d00034 	orhi	r3,r2,16384
 800f7f0:	e0bffe17 	ldw	r2,-8(fp)
 800f7f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800f7f8:	e03ffd15 	stw	zero,-12(fp)
 800f7fc:	00002306 	br	800f88c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f800:	04020074 	movhi	r16,2049
 800f804:	84037804 	addi	r16,r16,3552
 800f808:	e0bffd17 	ldw	r2,-12(fp)
 800f80c:	1009883a 	mov	r4,r2
 800f810:	01400304 	movi	r5,12
 800f814:	8001ff40 	call	8001ff4 <__mulsi3>
 800f818:	8085883a 	add	r2,r16,r2
 800f81c:	10c00017 	ldw	r3,0(r2)
 800f820:	e0bffe17 	ldw	r2,-8(fp)
 800f824:	10800017 	ldw	r2,0(r2)
 800f828:	1880151e 	bne	r3,r2,800f880 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f82c:	04020074 	movhi	r16,2049
 800f830:	84037804 	addi	r16,r16,3552
 800f834:	e0bffd17 	ldw	r2,-12(fp)
 800f838:	1009883a 	mov	r4,r2
 800f83c:	01400304 	movi	r5,12
 800f840:	8001ff40 	call	8001ff4 <__mulsi3>
 800f844:	8085883a 	add	r2,r16,r2
 800f848:	10800204 	addi	r2,r2,8
 800f84c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f850:	10000b0e 	bge	r2,zero,800f880 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800f854:	e13ffd17 	ldw	r4,-12(fp)
 800f858:	01400304 	movi	r5,12
 800f85c:	8001ff40 	call	8001ff4 <__mulsi3>
 800f860:	1007883a 	mov	r3,r2
 800f864:	00820074 	movhi	r2,2049
 800f868:	10837804 	addi	r2,r2,3552
 800f86c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f870:	e0bffe17 	ldw	r2,-8(fp)
 800f874:	18800226 	beq	r3,r2,800f880 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800f878:	00bffcc4 	movi	r2,-13
 800f87c:	00000a06 	br	800f8a8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800f880:	e0bffd17 	ldw	r2,-12(fp)
 800f884:	10800044 	addi	r2,r2,1
 800f888:	e0bffd15 	stw	r2,-12(fp)
 800f88c:	00820074 	movhi	r2,2049
 800f890:	10880504 	addi	r2,r2,8212
 800f894:	10800017 	ldw	r2,0(r2)
 800f898:	1007883a 	mov	r3,r2
 800f89c:	e0bffd17 	ldw	r2,-12(fp)
 800f8a0:	18bfd72e 	bgeu	r3,r2,800f800 <__alt_data_end+0xfc00f800>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800f8a4:	0005883a 	mov	r2,zero
}
 800f8a8:	e6ffff04 	addi	sp,fp,-4
 800f8ac:	dfc00217 	ldw	ra,8(sp)
 800f8b0:	df000117 	ldw	fp,4(sp)
 800f8b4:	dc000017 	ldw	r16,0(sp)
 800f8b8:	dec00304 	addi	sp,sp,12
 800f8bc:	f800283a 	ret

0800f8c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800f8c0:	defff604 	addi	sp,sp,-40
 800f8c4:	dfc00915 	stw	ra,36(sp)
 800f8c8:	df000815 	stw	fp,32(sp)
 800f8cc:	df000804 	addi	fp,sp,32
 800f8d0:	e13ffd15 	stw	r4,-12(fp)
 800f8d4:	e17ffe15 	stw	r5,-8(fp)
 800f8d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800f8dc:	00bfffc4 	movi	r2,-1
 800f8e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800f8e4:	00bffb44 	movi	r2,-19
 800f8e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800f8ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800f8f0:	e13ffd17 	ldw	r4,-12(fp)
 800f8f4:	01420074 	movhi	r5,2049
 800f8f8:	29480304 	addi	r5,r5,8204
 800f8fc:	800f2a80 	call	800f2a8 <alt_find_dev>
 800f900:	e0bff815 	stw	r2,-32(fp)
 800f904:	e0bff817 	ldw	r2,-32(fp)
 800f908:	1000051e 	bne	r2,zero,800f920 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800f90c:	e13ffd17 	ldw	r4,-12(fp)
 800f910:	800fbdc0 	call	800fbdc <alt_find_file>
 800f914:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800f918:	00800044 	movi	r2,1
 800f91c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800f920:	e0bff817 	ldw	r2,-32(fp)
 800f924:	10002b26 	beq	r2,zero,800f9d4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800f928:	e13ff817 	ldw	r4,-32(fp)
 800f92c:	800fcf00 	call	800fcf0 <alt_get_fd>
 800f930:	e0bff915 	stw	r2,-28(fp)
 800f934:	e0bff917 	ldw	r2,-28(fp)
 800f938:	1000030e 	bge	r2,zero,800f948 <open+0x88>
    {
      status = index;
 800f93c:	e0bff917 	ldw	r2,-28(fp)
 800f940:	e0bffa15 	stw	r2,-24(fp)
 800f944:	00002506 	br	800f9dc <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 800f948:	e13ff917 	ldw	r4,-28(fp)
 800f94c:	01400304 	movi	r5,12
 800f950:	8001ff40 	call	8001ff4 <__mulsi3>
 800f954:	1007883a 	mov	r3,r2
 800f958:	00820074 	movhi	r2,2049
 800f95c:	10837804 	addi	r2,r2,3552
 800f960:	1885883a 	add	r2,r3,r2
 800f964:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800f968:	e0fffe17 	ldw	r3,-8(fp)
 800f96c:	00900034 	movhi	r2,16384
 800f970:	10bfffc4 	addi	r2,r2,-1
 800f974:	1886703a 	and	r3,r3,r2
 800f978:	e0bffc17 	ldw	r2,-16(fp)
 800f97c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800f980:	e0bffb17 	ldw	r2,-20(fp)
 800f984:	1000051e 	bne	r2,zero,800f99c <open+0xdc>
 800f988:	e13ffc17 	ldw	r4,-16(fp)
 800f98c:	800f7cc0 	call	800f7cc <alt_file_locked>
 800f990:	e0bffa15 	stw	r2,-24(fp)
 800f994:	e0bffa17 	ldw	r2,-24(fp)
 800f998:	10001016 	blt	r2,zero,800f9dc <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800f99c:	e0bff817 	ldw	r2,-32(fp)
 800f9a0:	10800317 	ldw	r2,12(r2)
 800f9a4:	10000826 	beq	r2,zero,800f9c8 <open+0x108>
 800f9a8:	e0bff817 	ldw	r2,-32(fp)
 800f9ac:	10800317 	ldw	r2,12(r2)
 800f9b0:	e13ffc17 	ldw	r4,-16(fp)
 800f9b4:	e17ffd17 	ldw	r5,-12(fp)
 800f9b8:	e1bffe17 	ldw	r6,-8(fp)
 800f9bc:	e1ffff17 	ldw	r7,-4(fp)
 800f9c0:	103ee83a 	callr	r2
 800f9c4:	00000106 	br	800f9cc <open+0x10c>
 800f9c8:	0005883a 	mov	r2,zero
 800f9cc:	e0bffa15 	stw	r2,-24(fp)
 800f9d0:	00000206 	br	800f9dc <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800f9d4:	00bffb44 	movi	r2,-19
 800f9d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800f9dc:	e0bffa17 	ldw	r2,-24(fp)
 800f9e0:	1000090e 	bge	r2,zero,800fa08 <open+0x148>
  {
    alt_release_fd (index);  
 800f9e4:	e13ff917 	ldw	r4,-28(fp)
 800f9e8:	800dc240 	call	800dc24 <alt_release_fd>
    ALT_ERRNO = -status;
 800f9ec:	800f77c0 	call	800f77c <alt_get_errno>
 800f9f0:	1007883a 	mov	r3,r2
 800f9f4:	e0bffa17 	ldw	r2,-24(fp)
 800f9f8:	0085c83a 	sub	r2,zero,r2
 800f9fc:	18800015 	stw	r2,0(r3)
    return -1;
 800fa00:	00bfffc4 	movi	r2,-1
 800fa04:	00000106 	br	800fa0c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 800fa08:	e0bff917 	ldw	r2,-28(fp)
}
 800fa0c:	e037883a 	mov	sp,fp
 800fa10:	dfc00117 	ldw	ra,4(sp)
 800fa14:	df000017 	ldw	fp,0(sp)
 800fa18:	dec00204 	addi	sp,sp,8
 800fa1c:	f800283a 	ret

0800fa20 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800fa20:	defffa04 	addi	sp,sp,-24
 800fa24:	df000515 	stw	fp,20(sp)
 800fa28:	df000504 	addi	fp,sp,20
 800fa2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fa30:	0005303a 	rdctl	r2,status
 800fa34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fa38:	e0fffc17 	ldw	r3,-16(fp)
 800fa3c:	00bfff84 	movi	r2,-2
 800fa40:	1884703a 	and	r2,r3,r2
 800fa44:	1001703a 	wrctl	status,r2
  
  return context;
 800fa48:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800fa4c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800fa50:	e0bfff17 	ldw	r2,-4(fp)
 800fa54:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800fa58:	e0bffd17 	ldw	r2,-12(fp)
 800fa5c:	10800017 	ldw	r2,0(r2)
 800fa60:	e0fffd17 	ldw	r3,-12(fp)
 800fa64:	18c00117 	ldw	r3,4(r3)
 800fa68:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800fa6c:	e0bffd17 	ldw	r2,-12(fp)
 800fa70:	10800117 	ldw	r2,4(r2)
 800fa74:	e0fffd17 	ldw	r3,-12(fp)
 800fa78:	18c00017 	ldw	r3,0(r3)
 800fa7c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800fa80:	e0bffd17 	ldw	r2,-12(fp)
 800fa84:	e0fffd17 	ldw	r3,-12(fp)
 800fa88:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800fa8c:	e0bffd17 	ldw	r2,-12(fp)
 800fa90:	e0fffd17 	ldw	r3,-12(fp)
 800fa94:	10c00015 	stw	r3,0(r2)
 800fa98:	e0bffb17 	ldw	r2,-20(fp)
 800fa9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800faa0:	e0bffe17 	ldw	r2,-8(fp)
 800faa4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800faa8:	e037883a 	mov	sp,fp
 800faac:	df000017 	ldw	fp,0(sp)
 800fab0:	dec00104 	addi	sp,sp,4
 800fab4:	f800283a 	ret

0800fab8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800fab8:	defffb04 	addi	sp,sp,-20
 800fabc:	dfc00415 	stw	ra,16(sp)
 800fac0:	df000315 	stw	fp,12(sp)
 800fac4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800fac8:	d0a00e17 	ldw	r2,-32712(gp)
 800facc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800fad0:	d0a6e217 	ldw	r2,-25720(gp)
 800fad4:	10800044 	addi	r2,r2,1
 800fad8:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800fadc:	00002e06 	br	800fb98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800fae0:	e0bffd17 	ldw	r2,-12(fp)
 800fae4:	10800017 	ldw	r2,0(r2)
 800fae8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800faec:	e0bffd17 	ldw	r2,-12(fp)
 800faf0:	10800403 	ldbu	r2,16(r2)
 800faf4:	10803fcc 	andi	r2,r2,255
 800faf8:	10000426 	beq	r2,zero,800fb0c <alt_tick+0x54>
 800fafc:	d0a6e217 	ldw	r2,-25720(gp)
 800fb00:	1000021e 	bne	r2,zero,800fb0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800fb04:	e0bffd17 	ldw	r2,-12(fp)
 800fb08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800fb0c:	e0bffd17 	ldw	r2,-12(fp)
 800fb10:	10800217 	ldw	r2,8(r2)
 800fb14:	d0e6e217 	ldw	r3,-25720(gp)
 800fb18:	18801d36 	bltu	r3,r2,800fb90 <alt_tick+0xd8>
 800fb1c:	e0bffd17 	ldw	r2,-12(fp)
 800fb20:	10800403 	ldbu	r2,16(r2)
 800fb24:	10803fcc 	andi	r2,r2,255
 800fb28:	1000191e 	bne	r2,zero,800fb90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800fb2c:	e0bffd17 	ldw	r2,-12(fp)
 800fb30:	10800317 	ldw	r2,12(r2)
 800fb34:	e0fffd17 	ldw	r3,-12(fp)
 800fb38:	18c00517 	ldw	r3,20(r3)
 800fb3c:	1809883a 	mov	r4,r3
 800fb40:	103ee83a 	callr	r2
 800fb44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800fb48:	e0bfff17 	ldw	r2,-4(fp)
 800fb4c:	1000031e 	bne	r2,zero,800fb5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800fb50:	e13ffd17 	ldw	r4,-12(fp)
 800fb54:	800fa200 	call	800fa20 <alt_alarm_stop>
 800fb58:	00000d06 	br	800fb90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800fb5c:	e0bffd17 	ldw	r2,-12(fp)
 800fb60:	10c00217 	ldw	r3,8(r2)
 800fb64:	e0bfff17 	ldw	r2,-4(fp)
 800fb68:	1887883a 	add	r3,r3,r2
 800fb6c:	e0bffd17 	ldw	r2,-12(fp)
 800fb70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800fb74:	e0bffd17 	ldw	r2,-12(fp)
 800fb78:	10c00217 	ldw	r3,8(r2)
 800fb7c:	d0a6e217 	ldw	r2,-25720(gp)
 800fb80:	1880032e 	bgeu	r3,r2,800fb90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800fb84:	e0bffd17 	ldw	r2,-12(fp)
 800fb88:	00c00044 	movi	r3,1
 800fb8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800fb90:	e0bffe17 	ldw	r2,-8(fp)
 800fb94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800fb98:	e0fffd17 	ldw	r3,-12(fp)
 800fb9c:	d0a00e04 	addi	r2,gp,-32712
 800fba0:	18bfcf1e 	bne	r3,r2,800fae0 <__alt_data_end+0xfc00fae0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800fba4:	0001883a 	nop
}
 800fba8:	e037883a 	mov	sp,fp
 800fbac:	dfc00117 	ldw	ra,4(sp)
 800fbb0:	df000017 	ldw	fp,0(sp)
 800fbb4:	dec00204 	addi	sp,sp,8
 800fbb8:	f800283a 	ret

0800fbbc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800fbbc:	deffff04 	addi	sp,sp,-4
 800fbc0:	df000015 	stw	fp,0(sp)
 800fbc4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800fbc8:	000170fa 	wrctl	ienable,zero
}
 800fbcc:	e037883a 	mov	sp,fp
 800fbd0:	df000017 	ldw	fp,0(sp)
 800fbd4:	dec00104 	addi	sp,sp,4
 800fbd8:	f800283a 	ret

0800fbdc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800fbdc:	defffb04 	addi	sp,sp,-20
 800fbe0:	dfc00415 	stw	ra,16(sp)
 800fbe4:	df000315 	stw	fp,12(sp)
 800fbe8:	df000304 	addi	fp,sp,12
 800fbec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800fbf0:	00820074 	movhi	r2,2049
 800fbf4:	10880104 	addi	r2,r2,8196
 800fbf8:	10800017 	ldw	r2,0(r2)
 800fbfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800fc00:	00003106 	br	800fcc8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 800fc04:	e0bffd17 	ldw	r2,-12(fp)
 800fc08:	10800217 	ldw	r2,8(r2)
 800fc0c:	1009883a 	mov	r4,r2
 800fc10:	80021500 	call	8002150 <strlen>
 800fc14:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800fc18:	e0bffd17 	ldw	r2,-12(fp)
 800fc1c:	10c00217 	ldw	r3,8(r2)
 800fc20:	e0bffe17 	ldw	r2,-8(fp)
 800fc24:	10bfffc4 	addi	r2,r2,-1
 800fc28:	1885883a 	add	r2,r3,r2
 800fc2c:	10800003 	ldbu	r2,0(r2)
 800fc30:	10803fcc 	andi	r2,r2,255
 800fc34:	1080201c 	xori	r2,r2,128
 800fc38:	10bfe004 	addi	r2,r2,-128
 800fc3c:	10800bd8 	cmpnei	r2,r2,47
 800fc40:	1000031e 	bne	r2,zero,800fc50 <alt_find_file+0x74>
    {
      len -= 1;
 800fc44:	e0bffe17 	ldw	r2,-8(fp)
 800fc48:	10bfffc4 	addi	r2,r2,-1
 800fc4c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800fc50:	e0bffe17 	ldw	r2,-8(fp)
 800fc54:	e0ffff17 	ldw	r3,-4(fp)
 800fc58:	1885883a 	add	r2,r3,r2
 800fc5c:	10800003 	ldbu	r2,0(r2)
 800fc60:	10803fcc 	andi	r2,r2,255
 800fc64:	1080201c 	xori	r2,r2,128
 800fc68:	10bfe004 	addi	r2,r2,-128
 800fc6c:	10800be0 	cmpeqi	r2,r2,47
 800fc70:	1000081e 	bne	r2,zero,800fc94 <alt_find_file+0xb8>
 800fc74:	e0bffe17 	ldw	r2,-8(fp)
 800fc78:	e0ffff17 	ldw	r3,-4(fp)
 800fc7c:	1885883a 	add	r2,r3,r2
 800fc80:	10800003 	ldbu	r2,0(r2)
 800fc84:	10803fcc 	andi	r2,r2,255
 800fc88:	1080201c 	xori	r2,r2,128
 800fc8c:	10bfe004 	addi	r2,r2,-128
 800fc90:	10000a1e 	bne	r2,zero,800fcbc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800fc94:	e0bffd17 	ldw	r2,-12(fp)
 800fc98:	10c00217 	ldw	r3,8(r2)
 800fc9c:	e0bffe17 	ldw	r2,-8(fp)
 800fca0:	1809883a 	mov	r4,r3
 800fca4:	e17fff17 	ldw	r5,-4(fp)
 800fca8:	100d883a 	mov	r6,r2
 800fcac:	800fe100 	call	800fe10 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800fcb0:	1000021e 	bne	r2,zero,800fcbc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800fcb4:	e0bffd17 	ldw	r2,-12(fp)
 800fcb8:	00000806 	br	800fcdc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 800fcbc:	e0bffd17 	ldw	r2,-12(fp)
 800fcc0:	10800017 	ldw	r2,0(r2)
 800fcc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800fcc8:	e0fffd17 	ldw	r3,-12(fp)
 800fccc:	00820074 	movhi	r2,2049
 800fcd0:	10880104 	addi	r2,r2,8196
 800fcd4:	18bfcb1e 	bne	r3,r2,800fc04 <__alt_data_end+0xfc00fc04>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800fcd8:	0005883a 	mov	r2,zero
}
 800fcdc:	e037883a 	mov	sp,fp
 800fce0:	dfc00117 	ldw	ra,4(sp)
 800fce4:	df000017 	ldw	fp,0(sp)
 800fce8:	dec00204 	addi	sp,sp,8
 800fcec:	f800283a 	ret

0800fcf0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800fcf0:	defffa04 	addi	sp,sp,-24
 800fcf4:	dfc00515 	stw	ra,20(sp)
 800fcf8:	df000415 	stw	fp,16(sp)
 800fcfc:	dc000315 	stw	r16,12(sp)
 800fd00:	df000404 	addi	fp,sp,16
 800fd04:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800fd08:	00bffa04 	movi	r2,-24
 800fd0c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800fd10:	e03ffc15 	stw	zero,-16(fp)
 800fd14:	00002106 	br	800fd9c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 800fd18:	04020074 	movhi	r16,2049
 800fd1c:	84037804 	addi	r16,r16,3552
 800fd20:	e0bffc17 	ldw	r2,-16(fp)
 800fd24:	1009883a 	mov	r4,r2
 800fd28:	01400304 	movi	r5,12
 800fd2c:	8001ff40 	call	8001ff4 <__mulsi3>
 800fd30:	8085883a 	add	r2,r16,r2
 800fd34:	10800017 	ldw	r2,0(r2)
 800fd38:	1000151e 	bne	r2,zero,800fd90 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 800fd3c:	04020074 	movhi	r16,2049
 800fd40:	84037804 	addi	r16,r16,3552
 800fd44:	e0bffc17 	ldw	r2,-16(fp)
 800fd48:	1009883a 	mov	r4,r2
 800fd4c:	01400304 	movi	r5,12
 800fd50:	8001ff40 	call	8001ff4 <__mulsi3>
 800fd54:	8085883a 	add	r2,r16,r2
 800fd58:	e0fffe17 	ldw	r3,-8(fp)
 800fd5c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800fd60:	00820074 	movhi	r2,2049
 800fd64:	10880504 	addi	r2,r2,8212
 800fd68:	10c00017 	ldw	r3,0(r2)
 800fd6c:	e0bffc17 	ldw	r2,-16(fp)
 800fd70:	1880040e 	bge	r3,r2,800fd84 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 800fd74:	00820074 	movhi	r2,2049
 800fd78:	10880504 	addi	r2,r2,8212
 800fd7c:	e0fffc17 	ldw	r3,-16(fp)
 800fd80:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 800fd84:	e0bffc17 	ldw	r2,-16(fp)
 800fd88:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800fd8c:	00000606 	br	800fda8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800fd90:	e0bffc17 	ldw	r2,-16(fp)
 800fd94:	10800044 	addi	r2,r2,1
 800fd98:	e0bffc15 	stw	r2,-16(fp)
 800fd9c:	e0bffc17 	ldw	r2,-16(fp)
 800fda0:	10800810 	cmplti	r2,r2,32
 800fda4:	103fdc1e 	bne	r2,zero,800fd18 <__alt_data_end+0xfc00fd18>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800fda8:	e0bffd17 	ldw	r2,-12(fp)
}
 800fdac:	e6ffff04 	addi	sp,fp,-4
 800fdb0:	dfc00217 	ldw	ra,8(sp)
 800fdb4:	df000117 	ldw	fp,4(sp)
 800fdb8:	dc000017 	ldw	r16,0(sp)
 800fdbc:	dec00304 	addi	sp,sp,12
 800fdc0:	f800283a 	ret

0800fdc4 <atexit>:
 800fdc4:	200b883a 	mov	r5,r4
 800fdc8:	000d883a 	mov	r6,zero
 800fdcc:	0009883a 	mov	r4,zero
 800fdd0:	000f883a 	mov	r7,zero
 800fdd4:	800fe8c1 	jmpi	800fe8c <__register_exitproc>

0800fdd8 <exit>:
 800fdd8:	defffe04 	addi	sp,sp,-8
 800fddc:	000b883a 	mov	r5,zero
 800fde0:	dc000015 	stw	r16,0(sp)
 800fde4:	dfc00115 	stw	ra,4(sp)
 800fde8:	2021883a 	mov	r16,r4
 800fdec:	800ffa00 	call	800ffa0 <__call_exitprocs>
 800fdf0:	00820074 	movhi	r2,2049
 800fdf4:	1087fb04 	addi	r2,r2,8172
 800fdf8:	11000017 	ldw	r4,0(r2)
 800fdfc:	20800f17 	ldw	r2,60(r4)
 800fe00:	10000126 	beq	r2,zero,800fe08 <exit+0x30>
 800fe04:	103ee83a 	callr	r2
 800fe08:	8009883a 	mov	r4,r16
 800fe0c:	80101340 	call	8010134 <_exit>

0800fe10 <memcmp>:
 800fe10:	01c000c4 	movi	r7,3
 800fe14:	3980192e 	bgeu	r7,r6,800fe7c <memcmp+0x6c>
 800fe18:	2144b03a 	or	r2,r4,r5
 800fe1c:	11c4703a 	and	r2,r2,r7
 800fe20:	10000f26 	beq	r2,zero,800fe60 <memcmp+0x50>
 800fe24:	20800003 	ldbu	r2,0(r4)
 800fe28:	28c00003 	ldbu	r3,0(r5)
 800fe2c:	10c0151e 	bne	r2,r3,800fe84 <memcmp+0x74>
 800fe30:	31bfff84 	addi	r6,r6,-2
 800fe34:	01ffffc4 	movi	r7,-1
 800fe38:	00000406 	br	800fe4c <memcmp+0x3c>
 800fe3c:	20800003 	ldbu	r2,0(r4)
 800fe40:	28c00003 	ldbu	r3,0(r5)
 800fe44:	31bfffc4 	addi	r6,r6,-1
 800fe48:	10c00e1e 	bne	r2,r3,800fe84 <memcmp+0x74>
 800fe4c:	21000044 	addi	r4,r4,1
 800fe50:	29400044 	addi	r5,r5,1
 800fe54:	31fff91e 	bne	r6,r7,800fe3c <__alt_data_end+0xfc00fe3c>
 800fe58:	0005883a 	mov	r2,zero
 800fe5c:	f800283a 	ret
 800fe60:	20c00017 	ldw	r3,0(r4)
 800fe64:	28800017 	ldw	r2,0(r5)
 800fe68:	1880041e 	bne	r3,r2,800fe7c <memcmp+0x6c>
 800fe6c:	31bfff04 	addi	r6,r6,-4
 800fe70:	21000104 	addi	r4,r4,4
 800fe74:	29400104 	addi	r5,r5,4
 800fe78:	39bff936 	bltu	r7,r6,800fe60 <__alt_data_end+0xfc00fe60>
 800fe7c:	303fe91e 	bne	r6,zero,800fe24 <__alt_data_end+0xfc00fe24>
 800fe80:	003ff506 	br	800fe58 <__alt_data_end+0xfc00fe58>
 800fe84:	10c5c83a 	sub	r2,r2,r3
 800fe88:	f800283a 	ret

0800fe8c <__register_exitproc>:
 800fe8c:	00820074 	movhi	r2,2049
 800fe90:	defffa04 	addi	sp,sp,-24
 800fe94:	1087fb04 	addi	r2,r2,8172
 800fe98:	dc000315 	stw	r16,12(sp)
 800fe9c:	14000017 	ldw	r16,0(r2)
 800fea0:	dc400415 	stw	r17,16(sp)
 800fea4:	dfc00515 	stw	ra,20(sp)
 800fea8:	80805217 	ldw	r2,328(r16)
 800feac:	2023883a 	mov	r17,r4
 800feb0:	10003626 	beq	r2,zero,800ff8c <__register_exitproc+0x100>
 800feb4:	10c00117 	ldw	r3,4(r2)
 800feb8:	010007c4 	movi	r4,31
 800febc:	20c00e16 	blt	r4,r3,800fef8 <__register_exitproc+0x6c>
 800fec0:	1a400044 	addi	r9,r3,1
 800fec4:	8800211e 	bne	r17,zero,800ff4c <__register_exitproc+0xc0>
 800fec8:	18c00084 	addi	r3,r3,2
 800fecc:	18c7883a 	add	r3,r3,r3
 800fed0:	18c7883a 	add	r3,r3,r3
 800fed4:	12400115 	stw	r9,4(r2)
 800fed8:	10c7883a 	add	r3,r2,r3
 800fedc:	19400015 	stw	r5,0(r3)
 800fee0:	0005883a 	mov	r2,zero
 800fee4:	dfc00517 	ldw	ra,20(sp)
 800fee8:	dc400417 	ldw	r17,16(sp)
 800feec:	dc000317 	ldw	r16,12(sp)
 800fef0:	dec00604 	addi	sp,sp,24
 800fef4:	f800283a 	ret
 800fef8:	00800034 	movhi	r2,0
 800fefc:	10800004 	addi	r2,r2,0
 800ff00:	10002526 	beq	r2,zero,800ff98 <__register_exitproc+0x10c>
 800ff04:	01006404 	movi	r4,400
 800ff08:	d9400015 	stw	r5,0(sp)
 800ff0c:	d9800115 	stw	r6,4(sp)
 800ff10:	d9c00215 	stw	r7,8(sp)
 800ff14:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 800ff18:	d9400017 	ldw	r5,0(sp)
 800ff1c:	d9800117 	ldw	r6,4(sp)
 800ff20:	d9c00217 	ldw	r7,8(sp)
 800ff24:	10001c26 	beq	r2,zero,800ff98 <__register_exitproc+0x10c>
 800ff28:	80c05217 	ldw	r3,328(r16)
 800ff2c:	10000115 	stw	zero,4(r2)
 800ff30:	02400044 	movi	r9,1
 800ff34:	10c00015 	stw	r3,0(r2)
 800ff38:	80805215 	stw	r2,328(r16)
 800ff3c:	10006215 	stw	zero,392(r2)
 800ff40:	10006315 	stw	zero,396(r2)
 800ff44:	0007883a 	mov	r3,zero
 800ff48:	883fdf26 	beq	r17,zero,800fec8 <__alt_data_end+0xfc00fec8>
 800ff4c:	18d1883a 	add	r8,r3,r3
 800ff50:	4211883a 	add	r8,r8,r8
 800ff54:	1211883a 	add	r8,r2,r8
 800ff58:	41802215 	stw	r6,136(r8)
 800ff5c:	01000044 	movi	r4,1
 800ff60:	11806217 	ldw	r6,392(r2)
 800ff64:	20c8983a 	sll	r4,r4,r3
 800ff68:	310cb03a 	or	r6,r6,r4
 800ff6c:	11806215 	stw	r6,392(r2)
 800ff70:	41c04215 	stw	r7,264(r8)
 800ff74:	01800084 	movi	r6,2
 800ff78:	89bfd31e 	bne	r17,r6,800fec8 <__alt_data_end+0xfc00fec8>
 800ff7c:	11806317 	ldw	r6,396(r2)
 800ff80:	3108b03a 	or	r4,r6,r4
 800ff84:	11006315 	stw	r4,396(r2)
 800ff88:	003fcf06 	br	800fec8 <__alt_data_end+0xfc00fec8>
 800ff8c:	80805304 	addi	r2,r16,332
 800ff90:	80805215 	stw	r2,328(r16)
 800ff94:	003fc706 	br	800feb4 <__alt_data_end+0xfc00feb4>
 800ff98:	00bfffc4 	movi	r2,-1
 800ff9c:	003fd106 	br	800fee4 <__alt_data_end+0xfc00fee4>

0800ffa0 <__call_exitprocs>:
 800ffa0:	00820074 	movhi	r2,2049
 800ffa4:	1087fb04 	addi	r2,r2,8172
 800ffa8:	10800017 	ldw	r2,0(r2)
 800ffac:	defff404 	addi	sp,sp,-48
 800ffb0:	dd800815 	stw	r22,32(sp)
 800ffb4:	d8800015 	stw	r2,0(sp)
 800ffb8:	10805204 	addi	r2,r2,328
 800ffbc:	dd000615 	stw	r20,24(sp)
 800ffc0:	dc800415 	stw	r18,16(sp)
 800ffc4:	dfc00b15 	stw	ra,44(sp)
 800ffc8:	df000a15 	stw	fp,40(sp)
 800ffcc:	ddc00915 	stw	r23,36(sp)
 800ffd0:	dd400715 	stw	r21,28(sp)
 800ffd4:	dcc00515 	stw	r19,20(sp)
 800ffd8:	dc400315 	stw	r17,12(sp)
 800ffdc:	dc000215 	stw	r16,8(sp)
 800ffe0:	2025883a 	mov	r18,r4
 800ffe4:	2829883a 	mov	r20,r5
 800ffe8:	d8800115 	stw	r2,4(sp)
 800ffec:	05bfffc4 	movi	r22,-1
 800fff0:	d8800017 	ldw	r2,0(sp)
 800fff4:	14c05217 	ldw	r19,328(r2)
 800fff8:	98001d26 	beq	r19,zero,8010070 <__call_exitprocs+0xd0>
 800fffc:	dd400117 	ldw	r21,4(sp)
 8010000:	98800117 	ldw	r2,4(r19)
 8010004:	173fffc4 	addi	fp,r2,-1
 8010008:	e0000d16 	blt	fp,zero,8010040 <__call_exitprocs+0xa0>
 801000c:	14000044 	addi	r16,r2,1
 8010010:	8421883a 	add	r16,r16,r16
 8010014:	8421883a 	add	r16,r16,r16
 8010018:	84402004 	addi	r17,r16,128
 801001c:	9c63883a 	add	r17,r19,r17
 8010020:	9c21883a 	add	r16,r19,r16
 8010024:	a0001e26 	beq	r20,zero,80100a0 <__call_exitprocs+0x100>
 8010028:	80804017 	ldw	r2,256(r16)
 801002c:	15001c26 	beq	r2,r20,80100a0 <__call_exitprocs+0x100>
 8010030:	e73fffc4 	addi	fp,fp,-1
 8010034:	843fff04 	addi	r16,r16,-4
 8010038:	8c7fff04 	addi	r17,r17,-4
 801003c:	e5bff91e 	bne	fp,r22,8010024 <__alt_data_end+0xfc010024>
 8010040:	00800034 	movhi	r2,0
 8010044:	10800004 	addi	r2,r2,0
 8010048:	10000926 	beq	r2,zero,8010070 <__call_exitprocs+0xd0>
 801004c:	98800117 	ldw	r2,4(r19)
 8010050:	1000311e 	bne	r2,zero,8010118 <__call_exitprocs+0x178>
 8010054:	98800017 	ldw	r2,0(r19)
 8010058:	10003426 	beq	r2,zero,801012c <__call_exitprocs+0x18c>
 801005c:	9809883a 	mov	r4,r19
 8010060:	a8800015 	stw	r2,0(r21)
 8010064:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8010068:	acc00017 	ldw	r19,0(r21)
 801006c:	983fe41e 	bne	r19,zero,8010000 <__alt_data_end+0xfc010000>
 8010070:	dfc00b17 	ldw	ra,44(sp)
 8010074:	df000a17 	ldw	fp,40(sp)
 8010078:	ddc00917 	ldw	r23,36(sp)
 801007c:	dd800817 	ldw	r22,32(sp)
 8010080:	dd400717 	ldw	r21,28(sp)
 8010084:	dd000617 	ldw	r20,24(sp)
 8010088:	dcc00517 	ldw	r19,20(sp)
 801008c:	dc800417 	ldw	r18,16(sp)
 8010090:	dc400317 	ldw	r17,12(sp)
 8010094:	dc000217 	ldw	r16,8(sp)
 8010098:	dec00c04 	addi	sp,sp,48
 801009c:	f800283a 	ret
 80100a0:	98800117 	ldw	r2,4(r19)
 80100a4:	80c00017 	ldw	r3,0(r16)
 80100a8:	10bfffc4 	addi	r2,r2,-1
 80100ac:	17001526 	beq	r2,fp,8010104 <__call_exitprocs+0x164>
 80100b0:	80000015 	stw	zero,0(r16)
 80100b4:	183fde26 	beq	r3,zero,8010030 <__alt_data_end+0xfc010030>
 80100b8:	00800044 	movi	r2,1
 80100bc:	1708983a 	sll	r4,r2,fp
 80100c0:	98806217 	ldw	r2,392(r19)
 80100c4:	9dc00117 	ldw	r23,4(r19)
 80100c8:	2084703a 	and	r2,r4,r2
 80100cc:	1000061e 	bne	r2,zero,80100e8 <__call_exitprocs+0x148>
 80100d0:	183ee83a 	callr	r3
 80100d4:	98800117 	ldw	r2,4(r19)
 80100d8:	15ffc51e 	bne	r2,r23,800fff0 <__alt_data_end+0xfc00fff0>
 80100dc:	a8800017 	ldw	r2,0(r21)
 80100e0:	14ffd326 	beq	r2,r19,8010030 <__alt_data_end+0xfc010030>
 80100e4:	003fc206 	br	800fff0 <__alt_data_end+0xfc00fff0>
 80100e8:	98806317 	ldw	r2,396(r19)
 80100ec:	2084703a 	and	r2,r4,r2
 80100f0:	1000061e 	bne	r2,zero,801010c <__call_exitprocs+0x16c>
 80100f4:	89400017 	ldw	r5,0(r17)
 80100f8:	9009883a 	mov	r4,r18
 80100fc:	183ee83a 	callr	r3
 8010100:	003ff406 	br	80100d4 <__alt_data_end+0xfc0100d4>
 8010104:	9f000115 	stw	fp,4(r19)
 8010108:	003fea06 	br	80100b4 <__alt_data_end+0xfc0100b4>
 801010c:	89000017 	ldw	r4,0(r17)
 8010110:	183ee83a 	callr	r3
 8010114:	003fef06 	br	80100d4 <__alt_data_end+0xfc0100d4>
 8010118:	98800017 	ldw	r2,0(r19)
 801011c:	982b883a 	mov	r21,r19
 8010120:	1027883a 	mov	r19,r2
 8010124:	983fb61e 	bne	r19,zero,8010000 <__alt_data_end+0xfc010000>
 8010128:	003fd106 	br	8010070 <__alt_data_end+0xfc010070>
 801012c:	0005883a 	mov	r2,zero
 8010130:	003ffa06 	br	801011c <__alt_data_end+0xfc01011c>

08010134 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8010134:	defffd04 	addi	sp,sp,-12
 8010138:	df000215 	stw	fp,8(sp)
 801013c:	df000204 	addi	fp,sp,8
 8010140:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8010144:	0001883a 	nop
 8010148:	e0bfff17 	ldw	r2,-4(fp)
 801014c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8010150:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8010154:	10000226 	beq	r2,zero,8010160 <_exit+0x2c>
    ALT_SIM_FAIL();
 8010158:	002af070 	cmpltui	zero,zero,43969
 801015c:	00000106 	br	8010164 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8010160:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8010164:	003fff06 	br	8010164 <__alt_data_end+0xfc010164>
