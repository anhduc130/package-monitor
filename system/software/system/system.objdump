
system.elf:     file format elf32-littlenios2
system.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0002387c memsz 0x0002387c flags r-x
    LOAD off    0x0002489c vaddr 0x0802389c paddr 0x080253b8 align 2**12
         filesz 0x00001b1c memsz 0x00001b1c flags rw-
    LOAD off    0x00026ed4 vaddr 0x08026ed4 paddr 0x08026ed4 align 2**12
         filesz 0x00000000 memsz 0x000006d0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000187cc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000af14  08018988  08018988  00019988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b1c  0802389c  080253b8  0002489c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000006d0  08026ed4  08026ed4  00026ed4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  080275a4  080275a4  000263b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000263b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010d8  00000000  00000000  000263e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002f2d2  00000000  00000000  000274b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bc2d  00000000  00000000  0005678a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000eb80  00000000  00000000  000623b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003558  00000000  00000000  00070f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004c32  00000000  00000000  00074490  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001cf85  00000000  00000000  000790c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00096048  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000016d0  00000000  00000000  00096088  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009bf7d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0009bf80  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009bf8c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009bf8d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0009bf8e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0009bf99  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0009bfa4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0009bfaf  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000019  00000000  00000000  0009bfba  2**0
                  CONTENTS, READONLY
 26 .jdi          0000437f  00000000  00000000  0009bfd3  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b8c6  00000000  00000000  000a0352  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08018988 l    d  .rodata	00000000 .rodata
0802389c l    d  .rwdata	00000000 .rwdata
08026ed4 l    d  .bss	00000000 .bss
080275a4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../system_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 fontParser.c
00000000 l    df *ABS*	00000000 fonts.c
00000000 l    df *ABS*	00000000 graphics.c
00000000 l    df *ABS*	00000000 keys.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 security.c
00000000 l    df *ABS*	00000000 serial.c
00000000 l    df *ABS*	00000000 switches.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08004ae4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ctype_.c
080234c1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strdup.c
00000000 l    df *ABS*	00000000 strdup_r.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
0802368a l     O .rodata	00000010 zeroes.4166
0802369a l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
080236aa l     O .rodata	00000010 zeroes.4181
080236ba l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800bdc4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800d96c l     F .text	00000008 __fp_lock
0800d974 l     F .text	00000008 __fp_unlock
0800d988 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
08023ca4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
080240e8 l     O .rwdata	00000020 lc_ctype_charset
080240c8 l     O .rwdata	00000020 lc_message_charset
08024108 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
080236ec l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08023810 l     O .rodata	00000010 zeroes.4110
08023820 l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
08011974 l     F .text	000000fc __sprint_r.part.0
08023840 l     O .rodata	00000010 blanks.4125
08023830 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 alt_close.c
08015934 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08015a5c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08015a88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08015da4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08015ea0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08015f84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08016168 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080253a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
080165b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08016708 l     F .text	00000038 alt_dev_reg
080242e8 l     O .rwdata	00001060 jtag_uart_0
08025348 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08016a0c l     F .text	00000204 altera_avalon_jtag_uart_irq
08016c10 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08017230 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08017ab8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08017fe0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08018138 l     F .text	00000050 alt_get_errno
08018188 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800fc70 g     F .text	00000074 _mprec_log10
0800fd5c g     F .text	0000008c __any_on
080133a0 g     F .text	00000054 _isatty_r
080236f8 g     O .rodata	00000028 __mprec_tinytens
080160b0 g     F .text	00000078 alt_main
08007858 g     F .text	00000090 strcpy
080072d8 g     F .text	000000b8 _puts_r
080274a4 g     O .bss	00000100 alt_irq
080133f4 g     F .text	0000005c _lseek_r
080253b8 g       *ABS*	00000000 __flash_rwdata_start
080173a0 g     F .text	0000003c alt_up_character_lcd_send_cmd
08014e20 g     F .text	00000084 .hidden __eqdf2
0800e748 g     F .text	00000058 _gettimeofday_r
080275a4 g       *ABS*	00000000 __alt_heap_start
08007aac g     F .text	00000008 strtok_r
0800729c g     F .text	0000003c printf
080006f8 g     F .text	000000c4 Graphics_DrawHorizontalLine
08018c22 g     O .rodata	00000a64 Font10x14
0801361c g     F .text	0000009c _wcrtomb_r
08000fa0 g     F .text	00000190 Graphics_DrawInitializationScreen
080104d4 g     F .text	0000005c __sseek
0800dcd0 g     F .text	00000010 __sinit
080134ac g     F .text	00000154 __swbuf_r
0800e7a0 g     F .text	0000007c _setlocale_r
0800db28 g     F .text	00000078 __sfmoreglue
08016148 g     F .text	00000020 __malloc_unlock
08003cf0 g     F .text	0000004c TS_ReadRx
08027024 g     O .bss	00000080 jsonbuf
0800eb20 g     F .text	0000015c memmove
0800dcb8 g     F .text	00000018 _cleanup
0800754c g     F .text	000000e4 snprintf
0800eda0 g     F .text	000000a8 _Balloc
08007a14 g     F .text	00000098 __strtok_r
08014ea4 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0801732c g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08013348 g     F .text	00000058 _fstat_r
08026ef4 g     O .bss	00000004 errno
08010450 g     F .text	00000008 __seofread
080014dc g     F .text	0000001c Graphics_DrawLoadingScreen
080107a4 g     F .text	000011d0 ___svfiprintf_internal_r
08026f18 g     O .bss	00000004 alt_argv
0802d374 g       *ABS*	00000000 _gp
08016588 g     F .text	00000030 usleep
08003f88 g     F .text	00000050 putcharRS232
08000920 g     F .text	0000016c Graphics_DrawCircle
08003444 g     F .text	000001c0 Security_SendSMS
08001f78 g     F .text	00000044 Graphics_ButtonNumToNum
080020b8 g     F .text	0000012c Graphics_AreaRect
08024168 g     O .rwdata	00000180 alt_fd_list
08004020 g     F .text	00000038 RS232TestForReceivedData
080007bc g     F .text	000000c4 Graphics_DrawVerticalLine
080015a0 g     F .text	0000008c Graphics_DrawLockScreen
08017c64 g     F .text	00000090 alt_find_dev
08007138 g     F .text	00000138 memcpy
08003834 g     F .text	0000014c Security_CheckMasterCode
0801753c g     F .text	00000050 alt_up_character_lcd_write_fd
08003f3c g     F .text	0000004c Init_RS232
0800d97c g     F .text	0000000c _cleanup_r
080064e8 g     F .text	000000d0 .hidden __floatsidf
080180c0 g     F .text	00000078 alt_io_redirect
08014f84 g     F .text	000000e0 .hidden __ltdf2
08018988 g       *ABS*	00000000 __DTOR_END__
08007390 g     F .text	00000014 puts
080040f0 g     F .text	00000094 Wifi_ReadResponse
08010388 g     F .text	00000074 __fpclassifyd
0800fbcc g     F .text	000000a4 __ratio
08012eac g     F .text	00000024 __vfiprintf_internal
0800194c g     F .text	00000068 Graphics_DrawNumPad
08016e0c g     F .text	0000020c altera_avalon_jtag_uart_read
08006968 g     F .text	00000014 malloc
08007270 g     F .text	0000002c _printf_r
08004c00 g     F .text	00000008 .hidden __udivsi3
08015df4 g     F .text	000000ac isatty
08023748 g     O .rodata	000000c8 __mprec_tens
0801d718 g     O .rodata	00005794 Font38x59
0800e81c g     F .text	0000000c __locale_charset
080049b0 g     F .text	00000110 Wifi_ParseConfirmed
08004c38 g     F .text	000000b8 .hidden __lesf2
08026f04 g     O .bss	00000008 alt_timezone
08026ef0 g     O .bss	00000004 __malloc_top_pad
08000a8c g     F .text	00000158 Graphics_DrawRectangle
080023a4 g     F .text	00000030 Leds_WriteVal
08025388 g     O .rwdata	00000004 __mb_cur_max
0800e84c g     F .text	0000000c _localeconv_r
0800f1c8 g     F .text	0000003c __i2b
0800e134 g     F .text	000004a4 __sfvwrite_r
080014f8 g     F .text	000000a8 Graphics_DrawUnlockScreen
08007420 g     F .text	00000054 _sbrk_r
08026ed4 g     O .bss	00000004 home_button_rect
08013450 g     F .text	0000005c _read_r
080253a0 g     O .rwdata	00000004 alt_max_fd
08013058 g     F .text	00000100 _fclose_r
08003a84 g     F .text	0000003c TS_EnableTouch
0800d93c g     F .text	00000030 fflush
08026eec g     O .bss	00000004 __malloc_max_sbrked_mem
0800665c g     F .text	00000110 .hidden __extendsfdf2
080017a0 g     F .text	000001ac Graphics_InitializeNumberPad
08014584 g     F .text	0000089c .hidden __adddf3
0800f974 g     F .text	0000011c __b2d
0800162c g     F .text	000000d0 Graphics_DrawMenu
08013f68 g     F .text	0000061c .hidden __umoddi3
08015fd4 g     F .text	000000dc lseek
08002030 g     F .text	00000088 Graphics_RectangleTouched
08000c48 g     F .text	000000a4 Graphics_DrawText
08004ac0 g     F .text	00000024 Switches_GetValue
08025380 g     O .rwdata	00000004 _global_impure_ptr
0800fde8 g     F .text	000005a0 _realloc_r
080275a4 g       *ABS*	00000000 __bss_end
08017ef0 g     F .text	000000f0 alt_iic_isr_register
08016484 g     F .text	00000104 alt_tick
08001be8 g     F .text	00000094 Graphics_DrawSquare
08013928 g     F .text	00000640 .hidden __udivdi3
0801316c g     F .text	00000184 _fputwc_r
08023720 g     O .rodata	00000028 __mprec_bigtens
0800efac g     F .text	00000104 __s2b
080065b8 g     F .text	000000a4 .hidden __floatunsidf
0800f71c g     F .text	00000060 __mcmp
080270a4 g     O .bss	00000200 rbuf
0800dcf0 g     F .text	00000018 __fp_lock_all
08017ea4 g     F .text	0000004c alt_ic_irq_enabled
080163ec g     F .text	00000098 alt_alarm_stop
08019686 g     O .rodata	0000140a Font16x27
08026f28 g     O .bss	00000004 alt_irq_active
08003a48 g     F .text	0000003c TS_DisableTouch
080000ec g     F .exceptions	000000d0 alt_irq_handler
08024140 g     O .rwdata	00000028 alt_dev_null
080078fc g     F .text	00000068 _strdup_r
08000be4 g     F .text	00000064 Graphics_PointsDrawRectangle
080177d0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
08001130 g     F .text	00000210 Graphics_DrawWelcomeScreen
08000e90 g     F .text	00000030 Graphics_Destroy_Rectangle
08000880 g     F .text	000000a0 Graphics_DrawStraightLine
080019b4 g     F .text	00000064 Graphics_InitializeHomeButton
08017a9c g     F .text	0000001c alt_dcache_flush_all
0800f0b0 g     F .text	00000068 __hi0bits
08004058 g     F .text	00000098 Wifi_Init
08006460 g     F .text	00000088 .hidden __fixdfsi
08004898 g     F .text	00000118 Wifi_ParseMasterPw
080253b8 g       *ABS*	00000000 __ram_rwdata_end
08025398 g     O .rwdata	00000008 alt_dev_list
08016608 g     F .text	00000100 write
080039f0 g     F .text	00000058 TS_Init
0802389c g       *ABS*	00000000 __ram_rodata_end
08015ad8 g     F .text	000000b8 fstat
08014f84 g     F .text	000000e0 .hidden __ledf2
080003ac g     F .text	00000198 Graphics_Font10x14
0800f494 g     F .text	00000140 __pow5mult
08011a88 g     F .text	00001424 ___vfiprintf_internal_r
08026f00 g     O .bss	00000004 __nlocale_changed
08004c08 g     F .text	00000008 .hidden __umodsi3
08001d34 g     F .text	00000244 Graphics_GetNumberPressed
080275a4 g       *ABS*	00000000 end
08016948 g     F .text	000000c4 altera_avalon_jtag_uart_init
08003d8c g     F .text	000001b0 TS_GetRelease
08000f1c g     F .text	00000084 Graphics_DrawLineDemo
08018988 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
080172a4 g     F .text	00000088 alt_avalon_timer_sc_init
08006904 g     F .text	00000064 .hidden __clzsi2
08007474 g     F .text	000000d8 _snprintf_r
08017018 g     F .text	00000218 altera_avalon_jtag_uart_write
0800dce0 g     F .text	00000004 __sfp_lock_acquire
0800ea38 g     F .text	000000e8 memchr
08017450 g     F .text	00000078 alt_up_character_lcd_write
08009b74 g     F .text	000020fc ___vfprintf_internal_r
08007630 g     F .text	00000058 _sprintf_r
08004300 g     F .text	0000008c Wifi_EnsureGet
0800de44 g     F .text	000002f0 _free_r
0800e828 g     F .text	00000010 __locale_mb_cur_max
080187c0 g     F .text	00000194 __call_exitprocs
08026efc g     O .bss	00000004 __mlocale_changed
08025378 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08026f20 g     O .bss	00000004 _alt_tick_rate
080016fc g     F .text	000000a4 Graphics_DrawField
080073bc g     F .text	00000064 rand
0800f5d4 g     F .text	00000148 __lshift
08026f54 g     O .bss	00000030 numpad
08003b40 g     F .text	000001b0 TS_GetPress
08026f24 g     O .bss	00000004 _alt_nticks
080161b8 g     F .text	00000104 read
08016774 g     F .text	00000070 alt_sys_init
08017688 g     F .text	00000088 alt_up_character_lcd_shift_display
08005140 g     F .text	00000134 .hidden __floatsisf
080105dc g     F .text	000001c8 __ssprint_r
08002fa4 g     F .text	00000084 Security_CheckCode
080186ac g     F .text	00000114 __register_exitproc
08026f84 g     O .bss	00000028 Master_Phone_Number
0800f204 g     F .text	00000290 __multiply
08017710 g     F .text	0000008c alt_up_character_lcd_erase_pos
08001fbc g     F .text	00000074 Graphics_InRectangle
08016cb8 g     F .text	00000068 altera_avalon_jtag_uart_close
08004c10 g     F .text	00000028 .hidden __mulsi3
0802389c g       *ABS*	00000000 __ram_rwdata_start
08018988 g       *ABS*	00000000 __ram_rodata_start
08026f2c g     O .bss	00000028 __malloc_current_mallinfo
0800fa90 g     F .text	0000013c __d2b
080167e4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08018510 g     F .text	000000d4 alt_get_fd
08017944 g     F .text	00000158 alt_busy_sleep
08026fac g     O .bss	00000028 User_Phone_Number
08012f2c g     F .text	00000054 _close_r
080079fc g     F .text	00000018 strtok
08018630 g     F .text	0000007c memcmp
080168a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080275a4 g       *ABS*	00000000 __alt_stack_base
080168f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800bc94 g     F .text	00000130 __swsetup_r
08005274 g     F .text	00000980 .hidden __divdf3
0800dba0 g     F .text	00000118 __sfp
0800fce4 g     F .text	00000078 __copybits
08003028 g     F .text	00000164 Security_RegisterOwner
0802389c g     O .rwdata	00000408 __malloc_av_
0800dcec g     F .text	00000004 __sinit_lock_release
08005bf4 g     F .text	0000086c .hidden __muldf3
080103fc g     F .text	00000054 __sread
080183fc g     F .text	00000114 alt_find_file
08017b08 g     F .text	000000a4 alt_dev_llist_insert
08016128 g     F .text	00000020 __malloc_lock
0801633c g     F .text	000000b0 sbrk
08007ab4 g     F .text	00002070 ___svfprintf_internal_r
080078e8 g     F .text	00000014 strdup
0800d714 g     F .text	00000228 _fflush_r
08012f80 g     F .text	000000d8 _calloc_r
08004668 g     F .text	00000118 Wifi_ParsePhoneNumber
08015b90 g     F .text	00000214 gettimeofday
08000544 g     F .text	0000007c Graphics_WriteAPixel
08026ed4 g       *ABS*	00000000 __bss_start
0800ec7c g     F .text	00000124 memset
0800247c g     F .text	00000a80 main
08026fd4 g     O .bss	00000018 Master_Code
08026f1c g     O .bss	00000004 alt_envp
08026ee8 g     O .bss	00000004 __malloc_max_total_mem
08026ed8 g     O .bss	00000004 request_code_rect
08016844 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08013600 g     F .text	0000001c __swbuf
080073a4 g     F .text	00000018 srand
08004c38 g     F .text	000000b8 .hidden __ltsf2
08017600 g     F .text	00000088 alt_up_character_lcd_shift_cursor
08001a48 g     F .text	000001a0 Graphics_DrawHomeIcon
08010530 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08013158 g     F .text	00000014 fclose
0800676c g     F .text	00000198 .hidden __truncdfsf2
0800bfec g     F .text	00001728 _dtoa_r
08006990 g     F .text	000007a8 _malloc_r
08013790 g     F .text	00000030 __ascii_wctomb
08009b24 g     F .text	00000050 time
080253a4 g     O .rwdata	00000004 alt_errno
08001410 g     F .text	000000cc Graphics_DrawMasterCodeMenu
0800e5d8 g     F .text	000000b8 _fwalk
08004b50 g     F .text	00000054 .hidden __divsi3
08017410 g     F .text	00000040 alt_up_character_lcd_open_dev
080037d8 g     F .text	0000005c Security_WaitApproved
0800dd20 g     F .text	00000124 _malloc_trim_r
08018988 g       *ABS*	00000000 __CTOR_END__
08004cf0 g     F .text	00000450 .hidden __mulsf3
080173dc g     F .text	00000034 alt_up_character_lcd_init
08010538 g     F .text	000000a4 strcmp
08018988 g       *ABS*	00000000 __flash_rodata_start
08018988 g       *ABS*	00000000 __DTOR_LIST__
0800438c g     F .text	000000a4 Wifi_EnsurePut
08014e20 g     F .text	00000084 .hidden __nedf2
08003ac0 g     F .text	00000040 TS_WaitForTouch
08016740 g     F .text	00000034 alt_irq_init
08026edc g     O .bss	00000004 sign_up_rect
080162bc g     F .text	00000080 alt_release_fd
08007688 g     F .text	0000006c sprintf
0801779c g     F .text	00000034 alt_up_character_lcd_cursor_off
080232c0 g     O .rodata	00000100 .hidden __clz_tab
08026ef8 g     O .bss	00000004 _PathLocale
080185e4 g     F .text	00000014 atexit
08012ed0 g     F .text	0000005c _write_r
0800e858 g     F .text	0000001c setlocale
08026ee0 g     O .bss	00000004 log_in_rect
08004500 g     F .text	00000048 Wifi_ReadRx
080272a4 g     O .bss	00000200 cbuf
08025384 g     O .rwdata	00000004 _impure_ptr
08026f14 g     O .bss	00000004 alt_argc
08003d3c g     F .text	00000050 TS_WriteTx
08003b00 g     F .text	00000040 TS_WaitForRelease
08004184 g     F .text	0000003c Wifi_PrintResponse
08004548 g     F .text	00000050 Wifi_WriteTx
080021e4 g     F .text	000000f4 Graphics_AreaTriangle
08017c08 g     F .text	0000005c _do_dtors
0800e844 g     F .text	00000008 __locale_cjk_lang
08018988 g     O .rodata	00000299 Font5x7
08000020 g       .exceptions	00000000 alt_irq_entry
0800f914 g     F .text	00000060 __ulp
0800dd08 g     F .text	00000018 __fp_unlock_all
08025390 g     O .rwdata	00000008 alt_fs_list
08004780 g     F .text	00000118 Wifi_ParsePw
08001c7c g     F .text	000000b8 Graphics_DrawUserEnteredDigit
08003604 g     F .text	000001d4 Security_SendConfirmedSMS
08026fec g     O .bss	00000018 Master_Code_Input
0800444c g     F .text	000000b4 Wifi_SendCommand
0800318c g     F .text	000002b8 Security_ObtainValues
08026f0c g     O .bss	00000008 alt_resettime
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800e874 g     F .text	0000000c localeconv
08003fd8 g     F .text	00000048 getcharRS232
08004598 g     F .text	000000d0 Wifi_ExtractJson
08000dc8 g     F .text	000000c8 Graphics_Init_Rectangle
08017d10 g     F .text	00000050 alt_ic_isr_register
080253b8 g       *ABS*	00000000 _edata
0800423c g     F .text	00000050 Wifi_ClearBuffer
080039d4 g     F .text	0000001c Security_SendRequestOpen
080275a4 g       *ABS*	00000000 _end
08026ee4 g     O .bss	00000004 graphics_field_cursor
080001bc g       *ABS*	00000000 __ram_exceptions_end
080005c0 g     F .text	00000090 Graphics_ReadAPixel
08016d20 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08000cec g     F .text	000000dc Graphics_DrawTextCentered
08017e00 g     F .text	000000a4 alt_ic_irq_disable
08000650 g     F .text	0000002c Graphics_Initialize
08010458 g     F .text	0000007c __swrite
0802537c g     O .rwdata	00000004 __malloc_trim_threshold
080183dc g     F .text	00000020 altera_nios2_qsys_irq_init
0800e838 g     F .text	0000000c __locale_msgcharset
080185f8 g     F .text	00000038 exit
0800e690 g     F .text	000000b8 _fwalk_reent
080041c0 g     F .text	0000007c Wifi_CopyBuffer
0800f77c g     F .text	00000198 __mdiff
08004ba4 g     F .text	0000005c .hidden __modsi3
08025374 g     O .rwdata	00000004 __ctype_ptr__
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800dce4 g     F .text	00000004 __sfp_lock_release
080001f8 g     F .text	000001b4 Graphics_Font5x7
08000000 g       *ABS*	00000000 __alt_mem_sdram
080174c8 g     F .text	00000074 alt_up_character_lcd_string
08002efc g     F .text	000000a8 Security_GenerateCode
080233c0 g     O .rodata	00000101 _ctype_
08001a18 g     F .text	00000030 Graphics_DrawHomeButton
0801aa90 g     O .rodata	00002c88 Font22x40
08003980 g     F .text	00000054 Security_CheckIsRegistered
0800067c g     F .text	0000007c Graphics_ProgramPalette
08018954 g     F .text	00000034 _exit
08017804 g     F .text	00000140 alt_alarm_start
0801381c g     F .text	0000010c .hidden __muldi3
0800e880 g     F .text	000001b8 __smakebuf_r
08002380 g     F .text	00000024 Keys_GetValue
08007964 g     F .text	00000098 strlen
0801827c g     F .text	00000160 open
08014ea4 g     F .text	000000e0 .hidden __gedf2
08027004 g     O .bss	00000010 Security_Code
0802538c g     O .rwdata	00000004 __wctomb
08011a70 g     F .text	00000018 __sprint_r
08017cf4 g     F .text	0000001c alt_icache_flush_all
08004430 g     F .text	0000001c Wifi_WaitUntilReady
080076f4 g     F .text	00000164 strchr
0801758c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
080253b4 g     O .rwdata	00000004 alt_priority_mask
080023d4 g     F .text	000000a8 Leds_Celebrate
08017d60 g     F .text	000000a0 alt_ic_irq_enable
08027014 g     O .bss	00000010 Security_Code_Input
0800bc70 g     F .text	00000024 __vfprintf_internal
0800428c g     F .text	00000074 Wifi_EnsureConnection
080137c0 g     F .text	0000005c _wctomb_r
08015064 g     F .text	000008d0 .hidden __subdf3
0800f118 g     F .text	000000b0 __lo0bits
080253ac g     O .rwdata	00000008 alt_alarm_list
08017bac g     F .text	0000005c _do_ctors
080136b8 g     F .text	000000d8 wcrtomb
08015984 g     F .text	000000d8 close
080022d8 g     F .text	000000a8 Graphics_InitializeRectangleCentered
08000ec0 g     F .text	0000005c Graphics_ClearScreen
08015f04 g     F .text	00000080 alt_load
080132f0 g     F .text	00000058 fputwc
0800697c g     F .text	00000014 free
0800dce8 g     F .text	00000004 __sinit_lock_acquire
0800ee70 g     F .text	0000013c __multadd
0800ee48 g     F .text	00000028 _Bfree
08001340 g     F .text	000000d0 Graphics_DrawPhoneNumberMenu



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200b4 	movhi	r2,2050
 8000130:	109d2904 	addi	r2,r2,29860
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200b4 	movhi	r2,2050
 8000148:	109d2904 	addi	r2,r2,29860
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 80001c8:	d6b4dd14 	ori	gp,gp,54132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 80001d0:	109bb514 	ori	r2,r2,28372

    movhi r3, %hi(__bss_end)
 80001d4:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 80001d8:	18dd6914 	ori	r3,r3,30116

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	8015f040 	call	8015f04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	80160b00 	call	80160b0 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <Graphics_Font5x7>:

#include "Fonts.h"
#include "Graphics.h"

void Graphics_Font5x7(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 80001f8:	defff204 	addi	sp,sp,-56
 80001fc:	dfc00d15 	stw	ra,52(sp)
 8000200:	df000c15 	stw	fp,48(sp)
 8000204:	ddc00b15 	stw	r23,44(sp)
 8000208:	dd800a15 	stw	r22,40(sp)
 800020c:	dd400915 	stw	r21,36(sp)
 8000210:	dd000815 	stw	r20,32(sp)
 8000214:	dcc00715 	stw	r19,28(sp)
 8000218:	dc800615 	stw	r18,24(sp)
 800021c:	dc400515 	stw	r17,20(sp)
 8000220:	dc000415 	stw	r16,16(sp)
 8000224:	df000c04 	addi	fp,sp,48
 8000228:	e13ff415 	stw	r4,-48(fp)
 800022c:	e17ff515 	stw	r5,-44(fp)
 8000230:	e1bff615 	stw	r6,-40(fp)
 8000234:	e1fff715 	stw	r7,-36(fp)
// using register variables (as opposed to stack based ones) may make execution faster
// depends on compiler and CPU

	register int row, column, theX = x, theY = y ;
 8000238:	e53ff417 	ldw	r20,-48(fp)
 800023c:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour  ;
 8000240:	e0bff617 	ldw	r2,-40(fp)
 8000244:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 8000248:	e4c00217 	ldw	r19,8(fp)

// if x,y coord off edge of screen don't bother
// XRES and YRES are #defined to be 800 and 480 respectively
    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 800024c:	e0bff417 	ldw	r2,-48(fp)
 8000250:	10bfffcc 	andi	r2,r2,65535
 8000254:	10a0001c 	xori	r2,r2,32768
 8000258:	10a00004 	addi	r2,r2,-32768
 800025c:	1080c808 	cmpgei	r2,r2,800
 8000260:	1000061e 	bne	r2,zero,800027c <Graphics_Font5x7+0x84>
 8000264:	e0bff517 	ldw	r2,-44(fp)
 8000268:	10bfffcc 	andi	r2,r2,65535
 800026c:	10a0001c 	xori	r2,r2,32768
 8000270:	10a00004 	addi	r2,r2,-32768
 8000274:	10807810 	cmplti	r2,r2,480
 8000278:	1000011e 	bne	r2,zero,8000280 <Graphics_Font5x7+0x88>
        return ;
 800027c:	00003e06 	br	8000378 <Graphics_Font5x7+0x180>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 8000280:	9805883a 	mov	r2,r19
 8000284:	10bfffcc 	andi	r2,r2,65535
 8000288:	10a0001c 	xori	r2,r2,32768
 800028c:	10a00004 	addi	r2,r2,-32768
 8000290:	10800810 	cmplti	r2,r2,32
 8000294:	1000381e 	bne	r2,zero,8000378 <Graphics_Font5x7+0x180>
 8000298:	9805883a 	mov	r2,r19
 800029c:	10bfffcc 	andi	r2,r2,65535
 80002a0:	10a0001c 	xori	r2,r2,32768
 80002a4:	10a00004 	addi	r2,r2,-32768
 80002a8:	10801fc8 	cmpgei	r2,r2,127
 80002ac:	1000321e 	bne	r2,zero,8000378 <Graphics_Font5x7+0x180>
		theC = theC - 0x20 ;
 80002b0:	9cfff804 	addi	r19,r19,-32
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 80002b4:	0021883a 	mov	r16,zero
 80002b8:	00002906 	br	8000360 <Graphics_Font5x7+0x168>

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
 80002bc:	044200b4 	movhi	r17,2050
 80002c0:	8c626204 	addi	r17,r17,-30328
 80002c4:	9809883a 	mov	r4,r19
 80002c8:	014001c4 	movi	r5,7
 80002cc:	8004c100 	call	8004c10 <__mulsi3>
 80002d0:	1405883a 	add	r2,r2,r16
 80002d4:	8885883a 	add	r2,r17,r2
 80002d8:	10800003 	ldbu	r2,0(r2)
 80002dc:	15803fcc 	andi	r22,r2,255
			BitMask = 16 ;
 80002e0:	04800404 	movi	r18,16

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 80002e4:	0023883a 	mov	r17,zero
 80002e8:	00001606 	br	8000344 <Graphics_Font5x7+0x14c>

// if a pixel in the character display it
				if((pixels & BitMask))
 80002ec:	b484703a 	and	r2,r22,r18
 80002f0:	10000926 	beq	r2,zero,8000318 <Graphics_Font5x7+0x120>
					Graphics_WriteAPixel(theX+column, theY+row, theColour) ;
 80002f4:	a449883a 	add	r4,r20,r17
 80002f8:	ac07883a 	add	r3,r21,r16
 80002fc:	b8803fcc 	andi	r2,r23,255
 8000300:	1080201c 	xori	r2,r2,128
 8000304:	10bfe004 	addi	r2,r2,-128
 8000308:	180b883a 	mov	r5,r3
 800030c:	100d883a 	mov	r6,r2
 8000310:	80005440 	call	8000544 <Graphics_WriteAPixel>
 8000314:	00000906 	br	800033c <Graphics_Font5x7+0x144>

				else {
					if(Erase == TRUE)
 8000318:	e0800317 	ldw	r2,12(fp)
 800031c:	10800058 	cmpnei	r2,r2,1
 8000320:	1000061e 	bne	r2,zero,800033c <Graphics_Font5x7+0x144>

// if pixel is part of background (not part of character)
// erase the background to value of variable BackGroundColour

						Graphics_WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 8000324:	a447883a 	add	r3,r20,r17
 8000328:	ac05883a 	add	r2,r21,r16
 800032c:	1809883a 	mov	r4,r3
 8000330:	100b883a 	mov	r5,r2
 8000334:	e1bff717 	ldw	r6,-36(fp)
 8000338:	80005440 	call	8000544 <Graphics_WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 800033c:	9025d07a 	srai	r18,r18,1

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
			BitMask = 16 ;

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 8000340:	8c400044 	addi	r17,r17,1
 8000344:	8805883a 	mov	r2,r17
 8000348:	10803fcc 	andi	r2,r2,255
 800034c:	1080201c 	xori	r2,r2,128
 8000350:	10bfe004 	addi	r2,r2,-128
 8000354:	10800150 	cmplti	r2,r2,5
 8000358:	103fe41e 	bne	r2,zero,80002ec <__alt_data_end+0xfc0002ec>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 800035c:	84000044 	addi	r16,r16,1
 8000360:	8005883a 	mov	r2,r16
 8000364:	10803fcc 	andi	r2,r2,255
 8000368:	1080201c 	xori	r2,r2,128
 800036c:	10bfe004 	addi	r2,r2,-128
 8000370:	108001d0 	cmplti	r2,r2,7
 8000374:	103fd11e 	bne	r2,zero,80002bc <__alt_data_end+0xfc0002bc>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8000378:	e6fff804 	addi	sp,fp,-32
 800037c:	dfc00917 	ldw	ra,36(sp)
 8000380:	df000817 	ldw	fp,32(sp)
 8000384:	ddc00717 	ldw	r23,28(sp)
 8000388:	dd800617 	ldw	r22,24(sp)
 800038c:	dd400517 	ldw	r21,20(sp)
 8000390:	dd000417 	ldw	r20,16(sp)
 8000394:	dcc00317 	ldw	r19,12(sp)
 8000398:	dc800217 	ldw	r18,8(sp)
 800039c:	dc400117 	ldw	r17,4(sp)
 80003a0:	dc000017 	ldw	r16,0(sp)
 80003a4:	dec00a04 	addi	sp,sp,40
 80003a8:	f800283a 	ret

080003ac <Graphics_Font10x14>:

void Graphics_Font10x14(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
 80003ac:	defff004 	addi	sp,sp,-64
 80003b0:	dfc00f15 	stw	ra,60(sp)
 80003b4:	df000e15 	stw	fp,56(sp)
 80003b8:	ddc00d15 	stw	r23,52(sp)
 80003bc:	dd800c15 	stw	r22,48(sp)
 80003c0:	dd400b15 	stw	r21,44(sp)
 80003c4:	dd000a15 	stw	r20,40(sp)
 80003c8:	dcc00915 	stw	r19,36(sp)
 80003cc:	dc800815 	stw	r18,32(sp)
 80003d0:	dc400715 	stw	r17,28(sp)
 80003d4:	dc000615 	stw	r16,24(sp)
 80003d8:	df000e04 	addi	fp,sp,56
 80003dc:	e13ff215 	stw	r4,-56(fp)
 80003e0:	e17ff315 	stw	r5,-52(fp)
 80003e4:	e1bff415 	stw	r6,-48(fp)
 80003e8:	e1fff515 	stw	r7,-44(fp)
	register int 	row,
					column,
					theX = x,
 80003ec:	e53ff217 	ldw	r20,-56(fp)
					theY = y ;
 80003f0:	e57ff317 	ldw	r21,-52(fp)
	register int 	pixels ;
	register char 	theColour = colour  ;
 80003f4:	e0bff417 	ldw	r2,-48(fp)
 80003f8:	e0bff605 	stb	r2,-40(fp)
	register int 	BitMask,
					theCharacter = c,
 80003fc:	e4c00217 	ldw	r19,8(fp)
					j,
					theRow, theColumn;


    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
 8000400:	e0bff217 	ldw	r2,-56(fp)
 8000404:	10bfffcc 	andi	r2,r2,65535
 8000408:	10a0001c 	xori	r2,r2,32768
 800040c:	10a00004 	addi	r2,r2,-32768
 8000410:	1080c808 	cmpgei	r2,r2,800
 8000414:	1000061e 	bne	r2,zero,8000430 <Graphics_Font10x14+0x84>
 8000418:	e0bff317 	ldw	r2,-52(fp)
 800041c:	10bfffcc 	andi	r2,r2,65535
 8000420:	10a0001c 	xori	r2,r2,32768
 8000424:	10a00004 	addi	r2,r2,-32768
 8000428:	10807810 	cmplti	r2,r2,480
 800042c:	1000011e 	bne	r2,zero,8000434 <Graphics_Font10x14+0x88>
        return ;
 8000430:	00003706 	br	8000510 <Graphics_Font10x14+0x164>

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
 8000434:	9805883a 	mov	r2,r19
 8000438:	10bfffcc 	andi	r2,r2,65535
 800043c:	10a0001c 	xori	r2,r2,32768
 8000440:	10a00004 	addi	r2,r2,-32768
 8000444:	10800810 	cmplti	r2,r2,32
 8000448:	1000311e 	bne	r2,zero,8000510 <Graphics_Font10x14+0x164>
 800044c:	9805883a 	mov	r2,r19
 8000450:	10bfffcc 	andi	r2,r2,65535
 8000454:	10a0001c 	xori	r2,r2,32768
 8000458:	10a00004 	addi	r2,r2,-32768
 800045c:	10801fc8 	cmpgei	r2,r2,127
 8000460:	10002b1e 	bne	r2,zero,8000510 <Graphics_Font10x14+0x164>
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
 8000464:	9cfff804 	addi	r19,r19,-32
		theRow = FONT2_YPIXELS;
 8000468:	05800384 	movi	r22,14
		theColumn = FONT2_XPIXELS;
 800046c:	05c00284 	movi	r23,10

		for(row = 0; row < theRow ; row ++)	{
 8000470:	0021883a 	mov	r16,zero
 8000474:	00002506 	br	800050c <Graphics_Font10x14+0x160>
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
 8000478:	044200b4 	movhi	r17,2050
 800047c:	8c630884 	addi	r17,r17,-29662
 8000480:	9809883a 	mov	r4,r19
 8000484:	01400384 	movi	r5,14
 8000488:	8004c100 	call	8004c10 <__mulsi3>
 800048c:	1405883a 	add	r2,r2,r16
 8000490:	1085883a 	add	r2,r2,r2
 8000494:	8885883a 	add	r2,r17,r2
 8000498:	1080000b 	ldhu	r2,0(r2)
 800049c:	10bfffcc 	andi	r2,r2,65535
 80004a0:	e0bff715 	stw	r2,-36(fp)
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 80004a4:	04808004 	movi	r18,512
			for(column = 0; column < theColumn;   )  	{
 80004a8:	0023883a 	mov	r17,zero
 80004ac:	00001506 	br	8000504 <Graphics_Font10x14+0x158>
				if((pixels & BitMask))														// if valid pixel, then write it
 80004b0:	e0fff717 	ldw	r3,-36(fp)
 80004b4:	1c84703a 	and	r2,r3,r18
 80004b8:	10000726 	beq	r2,zero,80004d8 <Graphics_Font10x14+0x12c>
					Graphics_WriteAPixel(theX+column, theY+row, theColour) ;
 80004bc:	a449883a 	add	r4,r20,r17
 80004c0:	ac07883a 	add	r3,r21,r16
 80004c4:	e0bff607 	ldb	r2,-40(fp)
 80004c8:	180b883a 	mov	r5,r3
 80004cc:	100d883a 	mov	r6,r2
 80004d0:	80005440 	call	8000544 <Graphics_WriteAPixel>
 80004d4:	00000906 	br	80004fc <Graphics_Font10x14+0x150>
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == TRUE)
 80004d8:	e0800317 	ldw	r2,12(fp)
 80004dc:	10800058 	cmpnei	r2,r2,1
 80004e0:	1000061e 	bne	r2,zero,80004fc <Graphics_Font10x14+0x150>
						Graphics_WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 80004e4:	a447883a 	add	r3,r20,r17
 80004e8:	ac05883a 	add	r2,r21,r16
 80004ec:	1809883a 	mov	r4,r3
 80004f0:	100b883a 	mov	r5,r2
 80004f4:	e1bff517 	ldw	r6,-44(fp)
 80004f8:	80005440 	call	8000544 <Graphics_WriteAPixel>
					// else leave it alone
				}
					column ++ ;
 80004fc:	8c400044 	addi	r17,r17,1
				BitMask = BitMask >> 1 ;
 8000500:	9025d07a 	srai	r18,r18,1
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
 8000504:	8dffea16 	blt	r17,r23,80004b0 <__alt_data_end+0xfc0004b0>
	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
 8000508:	84000044 	addi	r16,r16,1
 800050c:	85bfda16 	blt	r16,r22,8000478 <__alt_data_end+0xfc000478>
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8000510:	e6fff804 	addi	sp,fp,-32
 8000514:	dfc00917 	ldw	ra,36(sp)
 8000518:	df000817 	ldw	fp,32(sp)
 800051c:	ddc00717 	ldw	r23,28(sp)
 8000520:	dd800617 	ldw	r22,24(sp)
 8000524:	dd400517 	ldw	r21,20(sp)
 8000528:	dd000417 	ldw	r20,16(sp)
 800052c:	dcc00317 	ldw	r19,12(sp)
 8000530:	dc800217 	ldw	r18,8(sp)
 8000534:	dc400117 	ldw	r17,4(sp)
 8000538:	dc000017 	ldw	r16,0(sp)
 800053c:	dec00a04 	addi	sp,sp,40
 8000540:	f800283a 	ret

08000544 <Graphics_WriteAPixel>:

/**********************************************************************
 * This function writes a single pixel to the x,y coords specified in the specified colour
 * Note colour is a palette number (0-255) not a 24 bit RGB value
 **********************************************************************/
void Graphics_WriteAPixel(int x, int y, int Colour) {
 8000544:	defffc04 	addi	sp,sp,-16
 8000548:	df000315 	stw	fp,12(sp)
 800054c:	df000304 	addi	fp,sp,12
 8000550:	e13ffd15 	stw	r4,-12(fp)
 8000554:	e17ffe15 	stw	r5,-8(fp)
 8000558:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;
 800055c:	0001883a 	nop
 8000560:	00a10034 	movhi	r2,33792
 8000564:	1080000b 	ldhu	r2,0(r2)
 8000568:	10bfffcc 	andi	r2,r2,65535
 800056c:	1080004c 	andi	r2,r2,1
 8000570:	103ffb26 	beq	r2,zero,8000560 <__alt_data_end+0xfc000560>

	GraphicsX1Reg = x;
 8000574:	00a10034 	movhi	r2,33792
 8000578:	10800084 	addi	r2,r2,2
 800057c:	e0fffd17 	ldw	r3,-12(fp)
 8000580:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000584:	00a10034 	movhi	r2,33792
 8000588:	10800104 	addi	r2,r2,4
 800058c:	e0fffe17 	ldw	r3,-8(fp)
 8000590:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000594:	00a10034 	movhi	r2,33792
 8000598:	10800384 	addi	r2,r2,14
 800059c:	e0ffff17 	ldw	r3,-4(fp)
 80005a0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel;
 80005a4:	00a10034 	movhi	r2,33792
 80005a8:	00c00284 	movi	r3,10
 80005ac:	10c0000d 	sth	r3,0(r2)
}
 80005b0:	e037883a 	mov	sp,fp
 80005b4:	df000017 	ldw	fp,0(sp)
 80005b8:	dec00104 	addi	sp,sp,4
 80005bc:	f800283a 	ret

080005c0 <Graphics_ReadAPixel>:

/*****************************************************************************************
 * This function read a single pixel from x,y coords specified and returns its colour
 * Note returned colour is a palette number (0-255) not a 24 bit RGB value
 ******************************************************************************************/
int Graphics_ReadAPixel(int x, int y) {
 80005c0:	defffd04 	addi	sp,sp,-12
 80005c4:	df000215 	stw	fp,8(sp)
 80005c8:	df000204 	addi	fp,sp,8
 80005cc:	e13ffe15 	stw	r4,-8(fp)
 80005d0:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;
 80005d4:	0001883a 	nop
 80005d8:	00a10034 	movhi	r2,33792
 80005dc:	1080000b 	ldhu	r2,0(r2)
 80005e0:	10bfffcc 	andi	r2,r2,65535
 80005e4:	1080004c 	andi	r2,r2,1
 80005e8:	103ffb26 	beq	r2,zero,80005d8 <__alt_data_end+0xfc0005d8>

	GraphicsX1Reg = x;
 80005ec:	00a10034 	movhi	r2,33792
 80005f0:	10800084 	addi	r2,r2,2
 80005f4:	e0fffe17 	ldw	r3,-8(fp)
 80005f8:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80005fc:	00a10034 	movhi	r2,33792
 8000600:	10800104 	addi	r2,r2,4
 8000604:	e0ffff17 	ldw	r3,-4(fp)
 8000608:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel;
 800060c:	00a10034 	movhi	r2,33792
 8000610:	00c002c4 	movi	r3,11
 8000614:	10c0000d 	sth	r3,0(r2)

	WAIT_FOR_GRAPHICS;
 8000618:	0001883a 	nop
 800061c:	00a10034 	movhi	r2,33792
 8000620:	1080000b 	ldhu	r2,0(r2)
 8000624:	10bfffcc 	andi	r2,r2,65535
 8000628:	1080004c 	andi	r2,r2,1
 800062c:	103ffb26 	beq	r2,zero,800061c <__alt_data_end+0xfc00061c>
	return (int) (GraphicsColourReg);
 8000630:	00a10034 	movhi	r2,33792
 8000634:	10800384 	addi	r2,r2,14
 8000638:	1080000b 	ldhu	r2,0(r2)
 800063c:	10bfffcc 	andi	r2,r2,65535
}
 8000640:	e037883a 	mov	sp,fp
 8000644:	df000017 	ldw	fp,0(sp)
 8000648:	dec00104 	addi	sp,sp,4
 800064c:	f800283a 	ret

08000650 <Graphics_Initialize>:

void Graphics_Initialize() {
 8000650:	defffe04 	addi	sp,sp,-8
 8000654:	dfc00115 	stw	ra,4(sp)
 8000658:	df000015 	stw	fp,0(sp)
 800065c:	d839883a 	mov	fp,sp
	Graphics_InitializeHomeButton();
 8000660:	80019b40 	call	80019b4 <Graphics_InitializeHomeButton>
	Graphics_InitializeNumberPad();
 8000664:	80017a00 	call	80017a0 <Graphics_InitializeNumberPad>
}
 8000668:	e037883a 	mov	sp,fp
 800066c:	dfc00117 	ldw	ra,4(sp)
 8000670:	df000017 	ldw	fp,0(sp)
 8000674:	dec00204 	addi	sp,sp,8
 8000678:	f800283a 	ret

0800067c <Graphics_ProgramPalette>:

/****************************************************************************************************
 ** Subroutine to program a hardware (graphics chip) palette number with an RGB value
 ** e.g. ProgramPalette(RED, 0x00FF0000) ;
 ****************************************************************************************************/
void Graphics_ProgramPalette(int PaletteNumber, int RGB) {
 800067c:	defffd04 	addi	sp,sp,-12
 8000680:	df000215 	stw	fp,8(sp)
 8000684:	df000204 	addi	fp,sp,8
 8000688:	e13ffe15 	stw	r4,-8(fp)
 800068c:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000690:	0001883a 	nop
 8000694:	00a10034 	movhi	r2,33792
 8000698:	1080000b 	ldhu	r2,0(r2)
 800069c:	10bfffcc 	andi	r2,r2,65535
 80006a0:	1080004c 	andi	r2,r2,1
 80006a4:	103ffb26 	beq	r2,zero,8000694 <__alt_data_end+0xfc000694>
	GraphicsColourReg = PaletteNumber;
 80006a8:	00a10034 	movhi	r2,33792
 80006ac:	10800384 	addi	r2,r2,14
 80006b0:	e0fffe17 	ldw	r3,-8(fp)
 80006b4:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = RGB >> 16;
 80006b8:	00a10034 	movhi	r2,33792
 80006bc:	10800084 	addi	r2,r2,2
 80006c0:	e0ffff17 	ldw	r3,-4(fp)
 80006c4:	1807d43a 	srai	r3,r3,16
 80006c8:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = RGB;
 80006cc:	00a10034 	movhi	r2,33792
 80006d0:	10800104 	addi	r2,r2,4
 80006d4:	e0ffff17 	ldw	r3,-4(fp)
 80006d8:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = ProgramPaletteColour;
 80006dc:	00a10034 	movhi	r2,33792
 80006e0:	00c00404 	movi	r3,16
 80006e4:	10c0000d 	sth	r3,0(r2)
}
 80006e8:	e037883a 	mov	sp,fp
 80006ec:	df000017 	ldw	fp,0(sp)
 80006f0:	dec00104 	addi	sp,sp,4
 80006f4:	f800283a 	ret

080006f8 <Graphics_DrawHorizontalLine>:

/*****************************************************************************************
 *	Function to draw a horizontal line from x1 to x2 with the given colour.
 *
 ******************************************************************************************/
void Graphics_DrawHorizontalLine(int x1, int x2, int y, int Colour) {
 80006f8:	defffa04 	addi	sp,sp,-24
 80006fc:	df000515 	stw	fp,20(sp)
 8000700:	df000504 	addi	fp,sp,20
 8000704:	e13ffc15 	stw	r4,-16(fp)
 8000708:	e17ffd15 	stw	r5,-12(fp)
 800070c:	e1bffe15 	stw	r6,-8(fp)
 8000710:	e1ffff15 	stw	r7,-4(fp)
	if (x2 < x1) {
 8000714:	e0fffd17 	ldw	r3,-12(fp)
 8000718:	e0bffc17 	ldw	r2,-16(fp)
 800071c:	1880060e 	bge	r3,r2,8000738 <Graphics_DrawHorizontalLine+0x40>
		int temp = x1;
 8000720:	e0bffc17 	ldw	r2,-16(fp)
 8000724:	e0bffb15 	stw	r2,-20(fp)
		x1 = x2;
 8000728:	e0bffd17 	ldw	r2,-12(fp)
 800072c:	e0bffc15 	stw	r2,-16(fp)
		x2 = temp;
 8000730:	e0bffb17 	ldw	r2,-20(fp)
 8000734:	e0bffd15 	stw	r2,-12(fp)
	}

	WAIT_FOR_GRAPHICS;
 8000738:	0001883a 	nop
 800073c:	00a10034 	movhi	r2,33792
 8000740:	1080000b 	ldhu	r2,0(r2)
 8000744:	10bfffcc 	andi	r2,r2,65535
 8000748:	1080004c 	andi	r2,r2,1
 800074c:	103ffb26 	beq	r2,zero,800073c <__alt_data_end+0xfc00073c>

	GraphicsX1Reg = x1;
 8000750:	00a10034 	movhi	r2,33792
 8000754:	10800084 	addi	r2,r2,2
 8000758:	e0fffc17 	ldw	r3,-16(fp)
 800075c:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 8000760:	00a10034 	movhi	r2,33792
 8000764:	10800184 	addi	r2,r2,6
 8000768:	e0fffd17 	ldw	r3,-12(fp)
 800076c:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000770:	00a10034 	movhi	r2,33792
 8000774:	10800104 	addi	r2,r2,4
 8000778:	e0fffe17 	ldw	r3,-8(fp)
 800077c:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y;
 8000780:	00a10034 	movhi	r2,33792
 8000784:	10800204 	addi	r2,r2,8
 8000788:	e0fffe17 	ldw	r3,-8(fp)
 800078c:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000790:	00a10034 	movhi	r2,33792
 8000794:	10800384 	addi	r2,r2,14
 8000798:	e0ffff17 	ldw	r3,-4(fp)
 800079c:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;
 80007a0:	00a10034 	movhi	r2,33792
 80007a4:	00c00044 	movi	r3,1
 80007a8:	10c0000d 	sth	r3,0(r2)
}
 80007ac:	e037883a 	mov	sp,fp
 80007b0:	df000017 	ldw	fp,0(sp)
 80007b4:	dec00104 	addi	sp,sp,4
 80007b8:	f800283a 	ret

080007bc <Graphics_DrawVerticalLine>:

/*****************************************************************************************
 *	Function to draw a vertical line from y1 to y2 with the given colour.
 *
 ******************************************************************************************/
void Graphics_DrawVerticalLine(int y1, int y2, int x, int Colour) {
 80007bc:	defffa04 	addi	sp,sp,-24
 80007c0:	df000515 	stw	fp,20(sp)
 80007c4:	df000504 	addi	fp,sp,20
 80007c8:	e13ffc15 	stw	r4,-16(fp)
 80007cc:	e17ffd15 	stw	r5,-12(fp)
 80007d0:	e1bffe15 	stw	r6,-8(fp)
 80007d4:	e1ffff15 	stw	r7,-4(fp)
	if (y2 < y1) {
 80007d8:	e0fffd17 	ldw	r3,-12(fp)
 80007dc:	e0bffc17 	ldw	r2,-16(fp)
 80007e0:	1880060e 	bge	r3,r2,80007fc <Graphics_DrawVerticalLine+0x40>
		int temp = y1;
 80007e4:	e0bffc17 	ldw	r2,-16(fp)
 80007e8:	e0bffb15 	stw	r2,-20(fp)
		y1 = y2;
 80007ec:	e0bffd17 	ldw	r2,-12(fp)
 80007f0:	e0bffc15 	stw	r2,-16(fp)
		y2 = temp;
 80007f4:	e0bffb17 	ldw	r2,-20(fp)
 80007f8:	e0bffd15 	stw	r2,-12(fp)
	}

	WAIT_FOR_GRAPHICS;
 80007fc:	0001883a 	nop
 8000800:	00a10034 	movhi	r2,33792
 8000804:	1080000b 	ldhu	r2,0(r2)
 8000808:	10bfffcc 	andi	r2,r2,65535
 800080c:	1080004c 	andi	r2,r2,1
 8000810:	103ffb26 	beq	r2,zero,8000800 <__alt_data_end+0xfc000800>

	GraphicsX1Reg = x;
 8000814:	00a10034 	movhi	r2,33792
 8000818:	10800084 	addi	r2,r2,2
 800081c:	e0fffe17 	ldw	r3,-8(fp)
 8000820:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x;
 8000824:	00a10034 	movhi	r2,33792
 8000828:	10800184 	addi	r2,r2,6
 800082c:	e0fffe17 	ldw	r3,-8(fp)
 8000830:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000834:	00a10034 	movhi	r2,33792
 8000838:	10800104 	addi	r2,r2,4
 800083c:	e0fffc17 	ldw	r3,-16(fp)
 8000840:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000844:	00a10034 	movhi	r2,33792
 8000848:	10800204 	addi	r2,r2,8
 800084c:	e0fffd17 	ldw	r3,-12(fp)
 8000850:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000854:	00a10034 	movhi	r2,33792
 8000858:	10800384 	addi	r2,r2,14
 800085c:	e0ffff17 	ldw	r3,-4(fp)
 8000860:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;
 8000864:	00a10034 	movhi	r2,33792
 8000868:	00c00084 	movi	r3,2
 800086c:	10c0000d 	sth	r3,0(r2)
}
 8000870:	e037883a 	mov	sp,fp
 8000874:	df000017 	ldw	fp,0(sp)
 8000878:	dec00104 	addi	sp,sp,4
 800087c:	f800283a 	ret

08000880 <Graphics_DrawStraightLine>:

/*****************************************************************************************
 *	Function to draw a line from x1, y1 to x2, y2 with the given colour.
 *
 ******************************************************************************************/
void Graphics_DrawStraightLine(int x1, int y1, int x2, int y2, int Colour) {
 8000880:	defffb04 	addi	sp,sp,-20
 8000884:	df000415 	stw	fp,16(sp)
 8000888:	df000404 	addi	fp,sp,16
 800088c:	e13ffc15 	stw	r4,-16(fp)
 8000890:	e17ffd15 	stw	r5,-12(fp)
 8000894:	e1bffe15 	stw	r6,-8(fp)
 8000898:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 800089c:	0001883a 	nop
 80008a0:	00a10034 	movhi	r2,33792
 80008a4:	1080000b 	ldhu	r2,0(r2)
 80008a8:	10bfffcc 	andi	r2,r2,65535
 80008ac:	1080004c 	andi	r2,r2,1
 80008b0:	103ffb26 	beq	r2,zero,80008a0 <__alt_data_end+0xfc0008a0>

	GraphicsX1Reg = x1;
 80008b4:	00a10034 	movhi	r2,33792
 80008b8:	10800084 	addi	r2,r2,2
 80008bc:	e0fffc17 	ldw	r3,-16(fp)
 80008c0:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 80008c4:	00a10034 	movhi	r2,33792
 80008c8:	10800184 	addi	r2,r2,6
 80008cc:	e0fffe17 	ldw	r3,-8(fp)
 80008d0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 80008d4:	00a10034 	movhi	r2,33792
 80008d8:	10800104 	addi	r2,r2,4
 80008dc:	e0fffd17 	ldw	r3,-12(fp)
 80008e0:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 80008e4:	00a10034 	movhi	r2,33792
 80008e8:	10800204 	addi	r2,r2,8
 80008ec:	e0ffff17 	ldw	r3,-4(fp)
 80008f0:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 80008f4:	00a10034 	movhi	r2,33792
 80008f8:	10800384 	addi	r2,r2,14
 80008fc:	e0c00117 	ldw	r3,4(fp)
 8000900:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;
 8000904:	00a10034 	movhi	r2,33792
 8000908:	00c000c4 	movi	r3,3
 800090c:	10c0000d 	sth	r3,0(r2)
}
 8000910:	e037883a 	mov	sp,fp
 8000914:	df000017 	ldw	fp,0(sp)
 8000918:	dec00104 	addi	sp,sp,4
 800091c:	f800283a 	ret

08000920 <Graphics_DrawCircle>:

/*****************************************************************************************
 *	Function to draw a circle given an x coordinate, y coordinate and the radius.
 *
 ******************************************************************************************/
void Graphics_DrawCircle(int x0, int y0, int radius, int colour) {
 8000920:	defff704 	addi	sp,sp,-36
 8000924:	dfc00815 	stw	ra,32(sp)
 8000928:	df000715 	stw	fp,28(sp)
 800092c:	df000704 	addi	fp,sp,28
 8000930:	e13ffc15 	stw	r4,-16(fp)
 8000934:	e17ffd15 	stw	r5,-12(fp)
 8000938:	e1bffe15 	stw	r6,-8(fp)
 800093c:	e1ffff15 	stw	r7,-4(fp)
	int x = radius;
 8000940:	e0bffe17 	ldw	r2,-8(fp)
 8000944:	e0bff915 	stw	r2,-28(fp)
	int y = 0;
 8000948:	e03ffa15 	stw	zero,-24(fp)
	int err = 0;
 800094c:	e03ffb15 	stw	zero,-20(fp)

	while (x >= y) {
 8000950:	00004606 	br	8000a6c <Graphics_DrawCircle+0x14c>
//		Graphics_WriteAPixel(x0 - x, y0 - y, colour);
//		Graphics_WriteAPixel(x0 - y, y0 - x, colour);
//		Graphics_WriteAPixel(x0 + y, y0 - x, colour);
//		Graphics_WriteAPixel(x0 + x, y0 - y, colour);

		Graphics_DrawHorizontalLine(x0 - x, x0 + x, y0 + y, colour);
 8000954:	e0fffc17 	ldw	r3,-16(fp)
 8000958:	e0bff917 	ldw	r2,-28(fp)
 800095c:	1889c83a 	sub	r4,r3,r2
 8000960:	e0fffc17 	ldw	r3,-16(fp)
 8000964:	e0bff917 	ldw	r2,-28(fp)
 8000968:	188b883a 	add	r5,r3,r2
 800096c:	e0fffd17 	ldw	r3,-12(fp)
 8000970:	e0bffa17 	ldw	r2,-24(fp)
 8000974:	1885883a 	add	r2,r3,r2
 8000978:	100d883a 	mov	r6,r2
 800097c:	e1ffff17 	ldw	r7,-4(fp)
 8000980:	80006f80 	call	80006f8 <Graphics_DrawHorizontalLine>
		Graphics_DrawHorizontalLine(x0 - x, x0 + x, y0 - y, colour);
 8000984:	e0fffc17 	ldw	r3,-16(fp)
 8000988:	e0bff917 	ldw	r2,-28(fp)
 800098c:	1889c83a 	sub	r4,r3,r2
 8000990:	e0fffc17 	ldw	r3,-16(fp)
 8000994:	e0bff917 	ldw	r2,-28(fp)
 8000998:	188b883a 	add	r5,r3,r2
 800099c:	e0fffd17 	ldw	r3,-12(fp)
 80009a0:	e0bffa17 	ldw	r2,-24(fp)
 80009a4:	1885c83a 	sub	r2,r3,r2
 80009a8:	100d883a 	mov	r6,r2
 80009ac:	e1ffff17 	ldw	r7,-4(fp)
 80009b0:	80006f80 	call	80006f8 <Graphics_DrawHorizontalLine>
		Graphics_DrawVerticalLine(y0 - x, y0 + x, x0 + y, colour);
 80009b4:	e0fffd17 	ldw	r3,-12(fp)
 80009b8:	e0bff917 	ldw	r2,-28(fp)
 80009bc:	1889c83a 	sub	r4,r3,r2
 80009c0:	e0fffd17 	ldw	r3,-12(fp)
 80009c4:	e0bff917 	ldw	r2,-28(fp)
 80009c8:	188b883a 	add	r5,r3,r2
 80009cc:	e0fffc17 	ldw	r3,-16(fp)
 80009d0:	e0bffa17 	ldw	r2,-24(fp)
 80009d4:	1885883a 	add	r2,r3,r2
 80009d8:	100d883a 	mov	r6,r2
 80009dc:	e1ffff17 	ldw	r7,-4(fp)
 80009e0:	80007bc0 	call	80007bc <Graphics_DrawVerticalLine>
		Graphics_DrawVerticalLine(y0 - x, y0 + x, x0 - y, colour);
 80009e4:	e0fffd17 	ldw	r3,-12(fp)
 80009e8:	e0bff917 	ldw	r2,-28(fp)
 80009ec:	1889c83a 	sub	r4,r3,r2
 80009f0:	e0fffd17 	ldw	r3,-12(fp)
 80009f4:	e0bff917 	ldw	r2,-28(fp)
 80009f8:	188b883a 	add	r5,r3,r2
 80009fc:	e0fffc17 	ldw	r3,-16(fp)
 8000a00:	e0bffa17 	ldw	r2,-24(fp)
 8000a04:	1885c83a 	sub	r2,r3,r2
 8000a08:	100d883a 	mov	r6,r2
 8000a0c:	e1ffff17 	ldw	r7,-4(fp)
 8000a10:	80007bc0 	call	80007bc <Graphics_DrawVerticalLine>

		if (err <= 0) {
 8000a14:	e0bffb17 	ldw	r2,-20(fp)
 8000a18:	00800916 	blt	zero,r2,8000a40 <Graphics_DrawCircle+0x120>
			y += 1;
 8000a1c:	e0bffa17 	ldw	r2,-24(fp)
 8000a20:	10800044 	addi	r2,r2,1
 8000a24:	e0bffa15 	stw	r2,-24(fp)
			err += 2 * y + 1;
 8000a28:	e0bffa17 	ldw	r2,-24(fp)
 8000a2c:	1085883a 	add	r2,r2,r2
 8000a30:	10800044 	addi	r2,r2,1
 8000a34:	e0fffb17 	ldw	r3,-20(fp)
 8000a38:	1885883a 	add	r2,r3,r2
 8000a3c:	e0bffb15 	stw	r2,-20(fp)
		}
		if (err > 0) {
 8000a40:	e0bffb17 	ldw	r2,-20(fp)
 8000a44:	0080090e 	bge	zero,r2,8000a6c <Graphics_DrawCircle+0x14c>
			x -= 1;
 8000a48:	e0bff917 	ldw	r2,-28(fp)
 8000a4c:	10bfffc4 	addi	r2,r2,-1
 8000a50:	e0bff915 	stw	r2,-28(fp)
			err -= 2 * x + 1;
 8000a54:	e0bff917 	ldw	r2,-28(fp)
 8000a58:	1085883a 	add	r2,r2,r2
 8000a5c:	0084303a 	nor	r2,zero,r2
 8000a60:	e0fffb17 	ldw	r3,-20(fp)
 8000a64:	1885883a 	add	r2,r3,r2
 8000a68:	e0bffb15 	stw	r2,-20(fp)
void Graphics_DrawCircle(int x0, int y0, int radius, int colour) {
	int x = radius;
	int y = 0;
	int err = 0;

	while (x >= y) {
 8000a6c:	e0fff917 	ldw	r3,-28(fp)
 8000a70:	e0bffa17 	ldw	r2,-24(fp)
 8000a74:	18bfb70e 	bge	r3,r2,8000954 <__alt_data_end+0xfc000954>
		if (err > 0) {
			x -= 1;
			err -= 2 * x + 1;
		}
	}
}
 8000a78:	e037883a 	mov	sp,fp
 8000a7c:	dfc00117 	ldw	ra,4(sp)
 8000a80:	df000017 	ldw	fp,0(sp)
 8000a84:	dec00204 	addi	sp,sp,8
 8000a88:	f800283a 	ret

08000a8c <Graphics_DrawRectangle>:

/*****************************************************************************************
 *	Function to draw a rectangle given a Rectangle_t object.
 *
 ******************************************************************************************/
void Graphics_DrawRectangle(Rectangle_t *rect) {
 8000a8c:	defff104 	addi	sp,sp,-60
 8000a90:	dfc00e15 	stw	ra,56(sp)
 8000a94:	df000d15 	stw	fp,52(sp)
 8000a98:	dc400c15 	stw	r17,48(sp)
 8000a9c:	dc000b15 	stw	r16,44(sp)
 8000aa0:	df000d04 	addi	fp,sp,52
 8000aa4:	e13ffd15 	stw	r4,-12(fp)
	int x1 = rect->x1;
 8000aa8:	e0bffd17 	ldw	r2,-12(fp)
 8000aac:	10800017 	ldw	r2,0(r2)
 8000ab0:	e0bff815 	stw	r2,-32(fp)
	int y1 = rect->y1;
 8000ab4:	e0bffd17 	ldw	r2,-12(fp)
 8000ab8:	10800217 	ldw	r2,8(r2)
 8000abc:	e0bff915 	stw	r2,-28(fp)
	int x2 = rect->x2;
 8000ac0:	e0bffd17 	ldw	r2,-12(fp)
 8000ac4:	10800117 	ldw	r2,4(r2)
 8000ac8:	e0bffa15 	stw	r2,-24(fp)
	int y2 = rect->y2;
 8000acc:	e0bffd17 	ldw	r2,-12(fp)
 8000ad0:	10800317 	ldw	r2,12(r2)
 8000ad4:	e0bffb15 	stw	r2,-20(fp)
	int yPos = rect->y1;
 8000ad8:	e0bffd17 	ldw	r2,-12(fp)
 8000adc:	10800217 	ldw	r2,8(r2)
 8000ae0:	e0bff715 	stw	r2,-36(fp)
	int colour = rect->colour;
 8000ae4:	e0bffd17 	ldw	r2,-12(fp)
 8000ae8:	10800617 	ldw	r2,24(r2)
 8000aec:	e0bffc15 	stw	r2,-16(fp)

	while (yPos <= y2) {
 8000af0:	00000806 	br	8000b14 <Graphics_DrawRectangle+0x88>
		Graphics_DrawHorizontalLine(x1, x2, yPos, colour);
 8000af4:	e13ff817 	ldw	r4,-32(fp)
 8000af8:	e17ffa17 	ldw	r5,-24(fp)
 8000afc:	e1bff717 	ldw	r6,-36(fp)
 8000b00:	e1fffc17 	ldw	r7,-16(fp)
 8000b04:	80006f80 	call	80006f8 <Graphics_DrawHorizontalLine>
		yPos++;
 8000b08:	e0bff717 	ldw	r2,-36(fp)
 8000b0c:	10800044 	addi	r2,r2,1
 8000b10:	e0bff715 	stw	r2,-36(fp)
	int x2 = rect->x2;
	int y2 = rect->y2;
	int yPos = rect->y1;
	int colour = rect->colour;

	while (yPos <= y2) {
 8000b14:	e0bff717 	ldw	r2,-36(fp)
 8000b18:	e0fffb17 	ldw	r3,-20(fp)
 8000b1c:	18bff50e 	bge	r3,r2,8000af4 <__alt_data_end+0xfc000af4>
		Graphics_DrawHorizontalLine(x1, x2, yPos, colour);
		yPos++;
	}

	if (rect->type == 1){
 8000b20:	e0bffd17 	ldw	r2,-12(fp)
 8000b24:	10800817 	ldw	r2,32(r2)
 8000b28:	10800058 	cmpnei	r2,r2,1
 8000b2c:	1000081e 	bne	r2,zero,8000b50 <Graphics_DrawRectangle+0xc4>
		Graphics_DrawHomeIcon(x1 + 30, y1 + 5);
 8000b30:	e0bff817 	ldw	r2,-32(fp)
 8000b34:	10c00784 	addi	r3,r2,30
 8000b38:	e0bff917 	ldw	r2,-28(fp)
 8000b3c:	10800144 	addi	r2,r2,5
 8000b40:	1809883a 	mov	r4,r3
 8000b44:	100b883a 	mov	r5,r2
 8000b48:	8001a480 	call	8001a48 <Graphics_DrawHomeIcon>
		return;
 8000b4c:	00001e06 	br	8000bc8 <Graphics_DrawRectangle+0x13c>
	}

	if (rect->text != NULL){
 8000b50:	e0bffd17 	ldw	r2,-12(fp)
 8000b54:	10800717 	ldw	r2,28(r2)
 8000b58:	10001b26 	beq	r2,zero,8000bc8 <Graphics_DrawRectangle+0x13c>
		Graphics_DrawTextCentered(y1 +(y2-y1-10)/2, x1, x2, WHITE, GRAY, rect->text, strlen(rect->text),0);
 8000b5c:	e0fffb17 	ldw	r3,-20(fp)
 8000b60:	e0bff917 	ldw	r2,-28(fp)
 8000b64:	1885c83a 	sub	r2,r3,r2
 8000b68:	10bffd84 	addi	r2,r2,-10
 8000b6c:	1006d7fa 	srli	r3,r2,31
 8000b70:	1885883a 	add	r2,r3,r2
 8000b74:	1005d07a 	srai	r2,r2,1
 8000b78:	1007883a 	mov	r3,r2
 8000b7c:	e0bff917 	ldw	r2,-28(fp)
 8000b80:	18a3883a 	add	r17,r3,r2
 8000b84:	e0bffd17 	ldw	r2,-12(fp)
 8000b88:	14000717 	ldw	r16,28(r2)
 8000b8c:	e0bffd17 	ldw	r2,-12(fp)
 8000b90:	10800717 	ldw	r2,28(r2)
 8000b94:	1009883a 	mov	r4,r2
 8000b98:	80079640 	call	8007964 <strlen>
 8000b9c:	1007883a 	mov	r3,r2
 8000ba0:	00800244 	movi	r2,9
 8000ba4:	d8800015 	stw	r2,0(sp)
 8000ba8:	dc000115 	stw	r16,4(sp)
 8000bac:	d8c00215 	stw	r3,8(sp)
 8000bb0:	d8000315 	stw	zero,12(sp)
 8000bb4:	8809883a 	mov	r4,r17
 8000bb8:	e17ff817 	ldw	r5,-32(fp)
 8000bbc:	e1bffa17 	ldw	r6,-24(fp)
 8000bc0:	01c00044 	movi	r7,1
 8000bc4:	8000cec0 	call	8000cec <Graphics_DrawTextCentered>
	}
}
 8000bc8:	e6fffe04 	addi	sp,fp,-8
 8000bcc:	dfc00317 	ldw	ra,12(sp)
 8000bd0:	df000217 	ldw	fp,8(sp)
 8000bd4:	dc400117 	ldw	r17,4(sp)
 8000bd8:	dc000017 	ldw	r16,0(sp)
 8000bdc:	dec00404 	addi	sp,sp,16
 8000be0:	f800283a 	ret

08000be4 <Graphics_PointsDrawRectangle>:

/*****************************************************************************************
 *	Function to draw a rectangle given the x and y coordinates and a colour.
 *
 ******************************************************************************************/
void Graphics_PointsDrawRectangle(int x1, int y1, int x2, int y2, int Colour) {
 8000be4:	defffa04 	addi	sp,sp,-24
 8000be8:	dfc00515 	stw	ra,20(sp)
 8000bec:	df000415 	stw	fp,16(sp)
 8000bf0:	df000404 	addi	fp,sp,16
 8000bf4:	e13ffc15 	stw	r4,-16(fp)
 8000bf8:	e17ffd15 	stw	r5,-12(fp)
 8000bfc:	e1bffe15 	stw	r6,-8(fp)
 8000c00:	e1ffff15 	stw	r7,-4(fp)
	while (y1 <= y2) {
 8000c04:	00000806 	br	8000c28 <Graphics_PointsDrawRectangle+0x44>
		Graphics_DrawHorizontalLine(x1, x2, y1, Colour);
 8000c08:	e13ffc17 	ldw	r4,-16(fp)
 8000c0c:	e17ffe17 	ldw	r5,-8(fp)
 8000c10:	e1bffd17 	ldw	r6,-12(fp)
 8000c14:	e1c00217 	ldw	r7,8(fp)
 8000c18:	80006f80 	call	80006f8 <Graphics_DrawHorizontalLine>
		y1++;
 8000c1c:	e0bffd17 	ldw	r2,-12(fp)
 8000c20:	10800044 	addi	r2,r2,1
 8000c24:	e0bffd15 	stw	r2,-12(fp)
/*****************************************************************************************
 *	Function to draw a rectangle given the x and y coordinates and a colour.
 *
 ******************************************************************************************/
void Graphics_PointsDrawRectangle(int x1, int y1, int x2, int y2, int Colour) {
	while (y1 <= y2) {
 8000c28:	e0bffd17 	ldw	r2,-12(fp)
 8000c2c:	e0ffff17 	ldw	r3,-4(fp)
 8000c30:	18bff50e 	bge	r3,r2,8000c08 <__alt_data_end+0xfc000c08>
		Graphics_DrawHorizontalLine(x1, x2, y1, Colour);
		y1++;
	}
}
 8000c34:	e037883a 	mov	sp,fp
 8000c38:	dfc00117 	ldw	ra,4(sp)
 8000c3c:	df000017 	ldw	fp,0(sp)
 8000c40:	dec00204 	addi	sp,sp,8
 8000c44:	f800283a 	ret

08000c48 <Graphics_DrawText>:

/*****************************************************************************************
 *	Function to draw text at the given coordinate in the given colour.
 *
 ******************************************************************************************/
void Graphics_DrawText(int x, int y, int colour, int backgroundColour, char *text, int n, int erase){
 8000c48:	defff604 	addi	sp,sp,-40
 8000c4c:	dfc00915 	stw	ra,36(sp)
 8000c50:	df000815 	stw	fp,32(sp)
 8000c54:	df000804 	addi	fp,sp,32
 8000c58:	e13ffc15 	stw	r4,-16(fp)
 8000c5c:	e17ffd15 	stw	r5,-12(fp)
 8000c60:	e1bffe15 	stw	r6,-8(fp)
 8000c64:	e1ffff15 	stw	r7,-4(fp)
	int i;
	int xPos = x;
 8000c68:	e0bffc17 	ldw	r2,-16(fp)
 8000c6c:	e0bffb15 	stw	r2,-20(fp)
	for (i = 0; i < n; i++){
 8000c70:	e03ffa15 	stw	zero,-24(fp)
 8000c74:	00001506 	br	8000ccc <Graphics_DrawText+0x84>
		Graphics_Font10x14(xPos, y, colour, backgroundColour, text[i], erase);
 8000c78:	e0bffa17 	ldw	r2,-24(fp)
 8000c7c:	e0c00217 	ldw	r3,8(fp)
 8000c80:	1885883a 	add	r2,r3,r2
 8000c84:	10800003 	ldbu	r2,0(r2)
 8000c88:	10803fcc 	andi	r2,r2,255
 8000c8c:	1080201c 	xori	r2,r2,128
 8000c90:	10bfe004 	addi	r2,r2,-128
 8000c94:	d8800015 	stw	r2,0(sp)
 8000c98:	e0800417 	ldw	r2,16(fp)
 8000c9c:	d8800115 	stw	r2,4(sp)
 8000ca0:	e13ffb17 	ldw	r4,-20(fp)
 8000ca4:	e17ffd17 	ldw	r5,-12(fp)
 8000ca8:	e1bffe17 	ldw	r6,-8(fp)
 8000cac:	e1ffff17 	ldw	r7,-4(fp)
 8000cb0:	80003ac0 	call	80003ac <Graphics_Font10x14>
		xPos = xPos + 12;
 8000cb4:	e0bffb17 	ldw	r2,-20(fp)
 8000cb8:	10800304 	addi	r2,r2,12
 8000cbc:	e0bffb15 	stw	r2,-20(fp)
 *
 ******************************************************************************************/
void Graphics_DrawText(int x, int y, int colour, int backgroundColour, char *text, int n, int erase){
	int i;
	int xPos = x;
	for (i = 0; i < n; i++){
 8000cc0:	e0bffa17 	ldw	r2,-24(fp)
 8000cc4:	10800044 	addi	r2,r2,1
 8000cc8:	e0bffa15 	stw	r2,-24(fp)
 8000ccc:	e0fffa17 	ldw	r3,-24(fp)
 8000cd0:	e0800317 	ldw	r2,12(fp)
 8000cd4:	18bfe816 	blt	r3,r2,8000c78 <__alt_data_end+0xfc000c78>
		Graphics_Font10x14(xPos, y, colour, backgroundColour, text[i], erase);
		xPos = xPos + 12;
	}
}
 8000cd8:	e037883a 	mov	sp,fp
 8000cdc:	dfc00117 	ldw	ra,4(sp)
 8000ce0:	df000017 	ldw	fp,0(sp)
 8000ce4:	dec00204 	addi	sp,sp,8
 8000ce8:	f800283a 	ret

08000cec <Graphics_DrawTextCentered>:

/*****************************************************************************************
 *	Function to draw centered text given a y coordinate, left x bound and a right x bound.
 *
 ******************************************************************************************/
void Graphics_DrawTextCentered(int y, int xBoundLeft, int xBoundRight, int colour, int backgroundColour, char *text, int n, int erase){
 8000cec:	defff504 	addi	sp,sp,-44
 8000cf0:	dfc00a15 	stw	ra,40(sp)
 8000cf4:	df000915 	stw	fp,36(sp)
 8000cf8:	df000904 	addi	fp,sp,36
 8000cfc:	e13ffc15 	stw	r4,-16(fp)
 8000d00:	e17ffd15 	stw	r5,-12(fp)
 8000d04:	e1bffe15 	stw	r6,-8(fp)
 8000d08:	e1ffff15 	stw	r7,-4(fp)
	int i;
	int textLength = 12 * n;
 8000d0c:	e1000417 	ldw	r4,16(fp)
 8000d10:	01400304 	movi	r5,12
 8000d14:	8004c100 	call	8004c10 <__mulsi3>
 8000d18:	e0bffb15 	stw	r2,-20(fp)
	int xPos =	xBoundLeft + (xBoundRight - textLength - xBoundLeft) / 2;
 8000d1c:	e0fffe17 	ldw	r3,-8(fp)
 8000d20:	e0bffb17 	ldw	r2,-20(fp)
 8000d24:	1887c83a 	sub	r3,r3,r2
 8000d28:	e0bffd17 	ldw	r2,-12(fp)
 8000d2c:	1885c83a 	sub	r2,r3,r2
 8000d30:	1006d7fa 	srli	r3,r2,31
 8000d34:	1885883a 	add	r2,r3,r2
 8000d38:	1005d07a 	srai	r2,r2,1
 8000d3c:	1007883a 	mov	r3,r2
 8000d40:	e0bffd17 	ldw	r2,-12(fp)
 8000d44:	1885883a 	add	r2,r3,r2
 8000d48:	e0bffa15 	stw	r2,-24(fp)
	for (i = 0; i < n; i++){
 8000d4c:	e03ff915 	stw	zero,-28(fp)
 8000d50:	00001506 	br	8000da8 <Graphics_DrawTextCentered+0xbc>
		Graphics_Font10x14(xPos, y, colour, backgroundColour, text[i], erase);
 8000d54:	e0bff917 	ldw	r2,-28(fp)
 8000d58:	e0c00317 	ldw	r3,12(fp)
 8000d5c:	1885883a 	add	r2,r3,r2
 8000d60:	10800003 	ldbu	r2,0(r2)
 8000d64:	10803fcc 	andi	r2,r2,255
 8000d68:	1080201c 	xori	r2,r2,128
 8000d6c:	10bfe004 	addi	r2,r2,-128
 8000d70:	d8800015 	stw	r2,0(sp)
 8000d74:	e0800517 	ldw	r2,20(fp)
 8000d78:	d8800115 	stw	r2,4(sp)
 8000d7c:	e13ffa17 	ldw	r4,-24(fp)
 8000d80:	e17ffc17 	ldw	r5,-16(fp)
 8000d84:	e1bfff17 	ldw	r6,-4(fp)
 8000d88:	e1c00217 	ldw	r7,8(fp)
 8000d8c:	80003ac0 	call	80003ac <Graphics_Font10x14>
		xPos = xPos + 12;
 8000d90:	e0bffa17 	ldw	r2,-24(fp)
 8000d94:	10800304 	addi	r2,r2,12
 8000d98:	e0bffa15 	stw	r2,-24(fp)
 ******************************************************************************************/
void Graphics_DrawTextCentered(int y, int xBoundLeft, int xBoundRight, int colour, int backgroundColour, char *text, int n, int erase){
	int i;
	int textLength = 12 * n;
	int xPos =	xBoundLeft + (xBoundRight - textLength - xBoundLeft) / 2;
	for (i = 0; i < n; i++){
 8000d9c:	e0bff917 	ldw	r2,-28(fp)
 8000da0:	10800044 	addi	r2,r2,1
 8000da4:	e0bff915 	stw	r2,-28(fp)
 8000da8:	e0fff917 	ldw	r3,-28(fp)
 8000dac:	e0800417 	ldw	r2,16(fp)
 8000db0:	18bfe816 	blt	r3,r2,8000d54 <__alt_data_end+0xfc000d54>
		Graphics_Font10x14(xPos, y, colour, backgroundColour, text[i], erase);
		xPos = xPos + 12;
	}
}
 8000db4:	e037883a 	mov	sp,fp
 8000db8:	dfc00117 	ldw	ra,4(sp)
 8000dbc:	df000017 	ldw	fp,0(sp)
 8000dc0:	dec00204 	addi	sp,sp,8
 8000dc4:	f800283a 	ret

08000dc8 <Graphics_Init_Rectangle>:

/*****************************************************************************************
 *	Initializes and returns a rectangle given the four points, a colour and text for the rectangle
 *
 ******************************************************************************************/
Rectangle_t* Graphics_Init_Rectangle(int x1, int y1, int x2, int y2, int colour, int type, const char *text) {
 8000dc8:	defff904 	addi	sp,sp,-28
 8000dcc:	dfc00615 	stw	ra,24(sp)
 8000dd0:	df000515 	stw	fp,20(sp)
 8000dd4:	df000504 	addi	fp,sp,20
 8000dd8:	e13ffc15 	stw	r4,-16(fp)
 8000ddc:	e17ffd15 	stw	r5,-12(fp)
 8000de0:	e1bffe15 	stw	r6,-8(fp)
 8000de4:	e1ffff15 	stw	r7,-4(fp)
	Rectangle_t* rect = malloc(sizeof(Rectangle_t));
 8000de8:	01000904 	movi	r4,36
 8000dec:	80069680 	call	8006968 <malloc>
 8000df0:	e0bffb15 	stw	r2,-20(fp)

	rect->x1 = x1;
 8000df4:	e0bffb17 	ldw	r2,-20(fp)
 8000df8:	e0fffc17 	ldw	r3,-16(fp)
 8000dfc:	10c00015 	stw	r3,0(r2)
	rect->x2 = x2;
 8000e00:	e0bffb17 	ldw	r2,-20(fp)
 8000e04:	e0fffe17 	ldw	r3,-8(fp)
 8000e08:	10c00115 	stw	r3,4(r2)
	rect->y1 = y1;
 8000e0c:	e0bffb17 	ldw	r2,-20(fp)
 8000e10:	e0fffd17 	ldw	r3,-12(fp)
 8000e14:	10c00215 	stw	r3,8(r2)
	rect->y2 = y2;
 8000e18:	e0bffb17 	ldw	r2,-20(fp)
 8000e1c:	e0ffff17 	ldw	r3,-4(fp)
 8000e20:	10c00315 	stw	r3,12(r2)
	rect->type = type;
 8000e24:	e0bffb17 	ldw	r2,-20(fp)
 8000e28:	e0c00317 	ldw	r3,12(fp)
 8000e2c:	10c00815 	stw	r3,32(r2)

	rect->colour = colour;
 8000e30:	e0bffb17 	ldw	r2,-20(fp)
 8000e34:	e0c00217 	ldw	r3,8(fp)
 8000e38:	10c00615 	stw	r3,24(r2)
	rect->x_length = x2 - x1;
 8000e3c:	e0fffe17 	ldw	r3,-8(fp)
 8000e40:	e0bffc17 	ldw	r2,-16(fp)
 8000e44:	1887c83a 	sub	r3,r3,r2
 8000e48:	e0bffb17 	ldw	r2,-20(fp)
 8000e4c:	10c00415 	stw	r3,16(r2)
	rect->y_length = y2 - y1;
 8000e50:	e0ffff17 	ldw	r3,-4(fp)
 8000e54:	e0bffd17 	ldw	r2,-12(fp)
 8000e58:	1887c83a 	sub	r3,r3,r2
 8000e5c:	e0bffb17 	ldw	r2,-20(fp)
 8000e60:	10c00515 	stw	r3,20(r2)
	rect->text = strdup(text);
 8000e64:	e1000417 	ldw	r4,16(fp)
 8000e68:	80078e80 	call	80078e8 <strdup>
 8000e6c:	1007883a 	mov	r3,r2
 8000e70:	e0bffb17 	ldw	r2,-20(fp)
 8000e74:	10c00715 	stw	r3,28(r2)

	return rect;
 8000e78:	e0bffb17 	ldw	r2,-20(fp)
}
 8000e7c:	e037883a 	mov	sp,fp
 8000e80:	dfc00117 	ldw	ra,4(sp)
 8000e84:	df000017 	ldw	fp,0(sp)
 8000e88:	dec00204 	addi	sp,sp,8
 8000e8c:	f800283a 	ret

08000e90 <Graphics_Destroy_Rectangle>:

/*****************************************************************************************
 *	Destroys the given rectangle
 *
 ******************************************************************************************/
void Graphics_Destroy_Rectangle(Rectangle_t* rect) {
 8000e90:	defffd04 	addi	sp,sp,-12
 8000e94:	dfc00215 	stw	ra,8(sp)
 8000e98:	df000115 	stw	fp,4(sp)
 8000e9c:	df000104 	addi	fp,sp,4
 8000ea0:	e13fff15 	stw	r4,-4(fp)
	free(rect);
 8000ea4:	e13fff17 	ldw	r4,-4(fp)
 8000ea8:	800697c0 	call	800697c <free>
}
 8000eac:	e037883a 	mov	sp,fp
 8000eb0:	dfc00117 	ldw	ra,4(sp)
 8000eb4:	df000017 	ldw	fp,0(sp)
 8000eb8:	dec00204 	addi	sp,sp,8
 8000ebc:	f800283a 	ret

08000ec0 <Graphics_ClearScreen>:

/*****************************************************************************************
 *	Clears the screen with the given colour
 *
 ******************************************************************************************/
void Graphics_ClearScreen(int Colour) {
 8000ec0:	defffc04 	addi	sp,sp,-16
 8000ec4:	dfc00315 	stw	ra,12(sp)
 8000ec8:	df000215 	stw	fp,8(sp)
 8000ecc:	df000204 	addi	fp,sp,8
 8000ed0:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0; i < 481; i++) {
 8000ed4:	e03ffe15 	stw	zero,-8(fp)
 8000ed8:	00000806 	br	8000efc <Graphics_ClearScreen+0x3c>
		Graphics_DrawHorizontalLine(0, 800, i, Colour);
 8000edc:	0009883a 	mov	r4,zero
 8000ee0:	0140c804 	movi	r5,800
 8000ee4:	e1bffe17 	ldw	r6,-8(fp)
 8000ee8:	e1ffff17 	ldw	r7,-4(fp)
 8000eec:	80006f80 	call	80006f8 <Graphics_DrawHorizontalLine>
 *	Clears the screen with the given colour
 *
 ******************************************************************************************/
void Graphics_ClearScreen(int Colour) {
	int i;
	for (i = 0; i < 481; i++) {
 8000ef0:	e0bffe17 	ldw	r2,-8(fp)
 8000ef4:	10800044 	addi	r2,r2,1
 8000ef8:	e0bffe15 	stw	r2,-8(fp)
 8000efc:	e0bffe17 	ldw	r2,-8(fp)
 8000f00:	10807850 	cmplti	r2,r2,481
 8000f04:	103ff51e 	bne	r2,zero,8000edc <__alt_data_end+0xfc000edc>
		Graphics_DrawHorizontalLine(0, 800, i, Colour);
	}
}
 8000f08:	e037883a 	mov	sp,fp
 8000f0c:	dfc00117 	ldw	ra,4(sp)
 8000f10:	df000017 	ldw	fp,0(sp)
 8000f14:	dec00204 	addi	sp,sp,8
 8000f18:	f800283a 	ret

08000f1c <Graphics_DrawLineDemo>:

/*****************************************************************************************
 *	Function to display the line demo
 *
 ******************************************************************************************/
void Graphics_DrawLineDemo() {
 8000f1c:	defffd04 	addi	sp,sp,-12
 8000f20:	dfc00215 	stw	ra,8(sp)
 8000f24:	df000115 	stw	fp,4(sp)
 8000f28:	df000104 	addi	fp,sp,4
	Graphics_DrawHorizontalLine(0, 800, 240, MAGENTA);
 8000f2c:	0009883a 	mov	r4,zero
 8000f30:	0140c804 	movi	r5,800
 8000f34:	01803c04 	movi	r6,240
 8000f38:	01c001c4 	movi	r7,7
 8000f3c:	80006f80 	call	80006f8 <Graphics_DrawHorizontalLine>
	Graphics_DrawVerticalLine(0, 480, 400, MAGENTA);
 8000f40:	0009883a 	mov	r4,zero
 8000f44:	01407804 	movi	r5,480
 8000f48:	01806404 	movi	r6,400
 8000f4c:	01c001c4 	movi	r7,7
 8000f50:	80007bc0 	call	80007bc <Graphics_DrawVerticalLine>
	Graphics_DrawStraightLine(0, 0, 800, 480, MAGENTA);
 8000f54:	008001c4 	movi	r2,7
 8000f58:	d8800015 	stw	r2,0(sp)
 8000f5c:	0009883a 	mov	r4,zero
 8000f60:	000b883a 	mov	r5,zero
 8000f64:	0180c804 	movi	r6,800
 8000f68:	01c07804 	movi	r7,480
 8000f6c:	80008800 	call	8000880 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(0, 480, 800, 0, MAGENTA);
 8000f70:	008001c4 	movi	r2,7
 8000f74:	d8800015 	stw	r2,0(sp)
 8000f78:	0009883a 	mov	r4,zero
 8000f7c:	01407804 	movi	r5,480
 8000f80:	0180c804 	movi	r6,800
 8000f84:	000f883a 	mov	r7,zero
 8000f88:	80008800 	call	8000880 <Graphics_DrawStraightLine>
}
 8000f8c:	e037883a 	mov	sp,fp
 8000f90:	dfc00117 	ldw	ra,4(sp)
 8000f94:	df000017 	ldw	fp,0(sp)
 8000f98:	dec00204 	addi	sp,sp,8
 8000f9c:	f800283a 	ret

08000fa0 <Graphics_DrawInitializationScreen>:

/*****************************************************************************************
 *	Function to display the initialization screen
 *
 ******************************************************************************************/
void Graphics_DrawInitializationScreen(){
 8000fa0:	deffe504 	addi	sp,sp,-108
 8000fa4:	dfc01a15 	stw	ra,104(sp)
 8000fa8:	df001915 	stw	fp,100(sp)
 8000fac:	df001904 	addi	fp,sp,100
	char initializeLabel[] = "WELCOME TO THE HOME PACKAGE MONITOR!";
 8000fb0:	0090d334 	movhi	r2,17228
 8000fb4:	109155c4 	addi	r2,r2,17751
 8000fb8:	e0bfec15 	stw	r2,-80(fp)
 8000fbc:	00881174 	movhi	r2,8261
 8000fc0:	109353c4 	addi	r2,r2,19791
 8000fc4:	e0bfed15 	stw	r2,-76(fp)
 8000fc8:	00950834 	movhi	r2,21536
 8000fcc:	1093d504 	addi	r2,r2,20308
 8000fd0:	e0bfee15 	stw	r2,-72(fp)
 8000fd4:	00920834 	movhi	r2,18464
 8000fd8:	10915204 	addi	r2,r2,17736
 8000fdc:	e0bfef15 	stw	r2,-68(fp)
 8000fe0:	00881174 	movhi	r2,8261
 8000fe4:	109353c4 	addi	r2,r2,19791
 8000fe8:	e0bff015 	stw	r2,-64(fp)
 8000fec:	0092d0f4 	movhi	r2,19267
 8000ff0:	10905404 	addi	r2,r2,16720
 8000ff4:	e0bff115 	stw	r2,-60(fp)
 8000ff8:	00881174 	movhi	r2,8261
 8000ffc:	1091d044 	addi	r2,r2,18241
 8001000:	e0bff215 	stw	r2,-56(fp)
 8001004:	009253b4 	movhi	r2,18766
 8001008:	1093d344 	addi	r2,r2,20301
 800100c:	e0bff315 	stw	r2,-52(fp)
 8001010:	008854b4 	movhi	r2,8530
 8001014:	1093d504 	addi	r2,r2,20308
 8001018:	e0bff415 	stw	r2,-48(fp)
 800101c:	e03ff505 	stb	zero,-44(fp)
	char promptLabel[] = "SIGN UP TO INITIALIZE THE MASTER PASSCODE";
 8001020:	008200b4 	movhi	r2,2050
 8001024:	108bad04 	addi	r2,r2,11956
 8001028:	e0fff544 	addi	r3,fp,-43
 800102c:	100b883a 	mov	r5,r2
 8001030:	00800a84 	movi	r2,42
 8001034:	1809883a 	mov	r4,r3
 8001038:	100d883a 	mov	r6,r2
 800103c:	80071380 	call	8007138 <memcpy>
	char *signUpLabel = "SIGN UP";
 8001040:	008200b4 	movhi	r2,2050
 8001044:	108bab04 	addi	r2,r2,11948
 8001048:	e0bfeb15 	stw	r2,-84(fp)
	Graphics_ClearScreen(BLACK);
 800104c:	0009883a 	mov	r4,zero
 8001050:	8000ec00 	call	8000ec0 <Graphics_ClearScreen>

	Graphics_DrawTextCentered(200, 0, XRES, WHITE, BLACK, initializeLabel, strlen(initializeLabel), 0);
 8001054:	e0bfec04 	addi	r2,fp,-80
 8001058:	1009883a 	mov	r4,r2
 800105c:	80079640 	call	8007964 <strlen>
 8001060:	1007883a 	mov	r3,r2
 8001064:	d8000015 	stw	zero,0(sp)
 8001068:	e0bfec04 	addi	r2,fp,-80
 800106c:	d8800115 	stw	r2,4(sp)
 8001070:	d8c00215 	stw	r3,8(sp)
 8001074:	d8000315 	stw	zero,12(sp)
 8001078:	01003204 	movi	r4,200
 800107c:	000b883a 	mov	r5,zero
 8001080:	0180c804 	movi	r6,800
 8001084:	01c00044 	movi	r7,1
 8001088:	8000cec0 	call	8000cec <Graphics_DrawTextCentered>
	Graphics_DrawTextCentered(250, 0, XRES, WHITE, BLACK, promptLabel, strlen(promptLabel), 0);
 800108c:	e0bff544 	addi	r2,fp,-43
 8001090:	1009883a 	mov	r4,r2
 8001094:	80079640 	call	8007964 <strlen>
 8001098:	1007883a 	mov	r3,r2
 800109c:	d8000015 	stw	zero,0(sp)
 80010a0:	e0bff544 	addi	r2,fp,-43
 80010a4:	d8800115 	stw	r2,4(sp)
 80010a8:	d8c00215 	stw	r3,8(sp)
 80010ac:	d8000315 	stw	zero,12(sp)
 80010b0:	01003e84 	movi	r4,250
 80010b4:	000b883a 	mov	r5,zero
 80010b8:	0180c804 	movi	r6,800
 80010bc:	01c00044 	movi	r7,1
 80010c0:	8000cec0 	call	8000cec <Graphics_DrawTextCentered>

	sign_up_rect = Graphics_InitializeRectangleCentered((strlen(signUpLabel) * 12) + 30, 300, 50, 0, 800, GREEN, signUpLabel);
 80010c4:	e13feb17 	ldw	r4,-84(fp)
 80010c8:	80079640 	call	8007964 <strlen>
 80010cc:	1009883a 	mov	r4,r2
 80010d0:	01400304 	movi	r5,12
 80010d4:	8004c100 	call	8004c10 <__mulsi3>
 80010d8:	10800784 	addi	r2,r2,30
 80010dc:	1007883a 	mov	r3,r2
 80010e0:	0080c804 	movi	r2,800
 80010e4:	d8800015 	stw	r2,0(sp)
 80010e8:	00800304 	movi	r2,12
 80010ec:	d8800115 	stw	r2,4(sp)
 80010f0:	e0bfeb17 	ldw	r2,-84(fp)
 80010f4:	d8800215 	stw	r2,8(sp)
 80010f8:	1809883a 	mov	r4,r3
 80010fc:	01404b04 	movi	r5,300
 8001100:	01800c84 	movi	r6,50
 8001104:	000f883a 	mov	r7,zero
 8001108:	80022d80 	call	80022d8 <Graphics_InitializeRectangleCentered>
 800110c:	d0a6da15 	stw	r2,-25752(gp)
	Graphics_DrawRectangle(sign_up_rect);
 8001110:	d0a6da17 	ldw	r2,-25752(gp)
 8001114:	1009883a 	mov	r4,r2
 8001118:	8000a8c0 	call	8000a8c <Graphics_DrawRectangle>
}
 800111c:	e037883a 	mov	sp,fp
 8001120:	dfc00117 	ldw	ra,4(sp)
 8001124:	df000017 	ldw	fp,0(sp)
 8001128:	dec00204 	addi	sp,sp,8
 800112c:	f800283a 	ret

08001130 <Graphics_DrawWelcomeScreen>:

/*****************************************************************************************
 *	Function to draw the welcome screen GUI.
 *
 ******************************************************************************************/
void Graphics_DrawWelcomeScreen(){
 8001130:	deffea04 	addi	sp,sp,-88
 8001134:	dfc01515 	stw	ra,84(sp)
 8001138:	df001415 	stw	fp,80(sp)
 800113c:	df001404 	addi	fp,sp,80
	char requestLabel[] = "WELCOME, PLEASE LOG IN OR REQUEST A CODE";
 8001140:	0090d334 	movhi	r2,17228
 8001144:	109155c4 	addi	r2,r2,17751
 8001148:	e0bff015 	stw	r2,-64(fp)
 800114c:	008b1174 	movhi	r2,11333
 8001150:	109353c4 	addi	r2,r2,19791
 8001154:	e0bff115 	stw	r2,-60(fp)
 8001158:	00915334 	movhi	r2,17740
 800115c:	10940804 	addi	r2,r2,20512
 8001160:	e0bff215 	stw	r2,-56(fp)
 8001164:	00881174 	movhi	r2,8261
 8001168:	1094d044 	addi	r2,r2,21313
 800116c:	e0bff315 	stw	r2,-52(fp)
 8001170:	008811f4 	movhi	r2,8263
 8001174:	1093d304 	addi	r2,r2,20300
 8001178:	e0bff415 	stw	r2,-48(fp)
 800117c:	0093c834 	movhi	r2,20256
 8001180:	10939244 	addi	r2,r2,20041
 8001184:	e0bff515 	stw	r2,-44(fp)
 8001188:	009154b4 	movhi	r2,17746
 800118c:	10881484 	addi	r2,r2,8274
 8001190:	e0bff615 	stw	r2,-40(fp)
 8001194:	0094d174 	movhi	r2,21317
 8001198:	10955444 	addi	r2,r2,21841
 800119c:	e0bff715 	stw	r2,-36(fp)
 80011a0:	00881074 	movhi	r2,8257
 80011a4:	10881504 	addi	r2,r2,8276
 80011a8:	e0bff815 	stw	r2,-32(fp)
 80011ac:	00915134 	movhi	r2,17732
 80011b0:	1093d0c4 	addi	r2,r2,20291
 80011b4:	e0bff915 	stw	r2,-28(fp)
 80011b8:	e03ffa05 	stb	zero,-24(fp)
	char requestCode[] = "REQUEST CODE";
 80011bc:	00801484 	movi	r2,82
 80011c0:	e0bffa45 	stb	r2,-23(fp)
 80011c4:	00801144 	movi	r2,69
 80011c8:	e0bffa85 	stb	r2,-22(fp)
 80011cc:	00801444 	movi	r2,81
 80011d0:	e0bffac5 	stb	r2,-21(fp)
 80011d4:	00801544 	movi	r2,85
 80011d8:	e0bffb05 	stb	r2,-20(fp)
 80011dc:	00801144 	movi	r2,69
 80011e0:	e0bffb45 	stb	r2,-19(fp)
 80011e4:	008014c4 	movi	r2,83
 80011e8:	e0bffb85 	stb	r2,-18(fp)
 80011ec:	00801504 	movi	r2,84
 80011f0:	e0bffbc5 	stb	r2,-17(fp)
 80011f4:	00800804 	movi	r2,32
 80011f8:	e0bffc05 	stb	r2,-16(fp)
 80011fc:	008010c4 	movi	r2,67
 8001200:	e0bffc45 	stb	r2,-15(fp)
 8001204:	008013c4 	movi	r2,79
 8001208:	e0bffc85 	stb	r2,-14(fp)
 800120c:	00801104 	movi	r2,68
 8001210:	e0bffcc5 	stb	r2,-13(fp)
 8001214:	00801144 	movi	r2,69
 8001218:	e0bffd05 	stb	r2,-12(fp)
 800121c:	e03ffd45 	stb	zero,-11(fp)
	char logInLabel[] = "LOG IN";
 8001220:	0093d304 	movi	r2,20300
 8001224:	e0bffd8d 	sth	r2,-10(fp)
 8001228:	008811c4 	movi	r2,8263
 800122c:	e0bffe0d 	sth	r2,-8(fp)
 8001230:	00939244 	movi	r2,20041
 8001234:	e0bffe8d 	sth	r2,-6(fp)
 8001238:	e03fff05 	stb	zero,-4(fp)
	Graphics_ClearScreen(BLACK);
 800123c:	0009883a 	mov	r4,zero
 8001240:	8000ec00 	call	8000ec0 <Graphics_ClearScreen>

	Graphics_DrawTextCentered(220, 0, 800, WHITE, BLACK, requestLabel, strlen(requestLabel), 0);
 8001244:	e13ff004 	addi	r4,fp,-64
 8001248:	80079640 	call	8007964 <strlen>
 800124c:	d8000015 	stw	zero,0(sp)
 8001250:	e0fff004 	addi	r3,fp,-64
 8001254:	d8c00115 	stw	r3,4(sp)
 8001258:	d8800215 	stw	r2,8(sp)
 800125c:	d8000315 	stw	zero,12(sp)
 8001260:	01003704 	movi	r4,220
 8001264:	000b883a 	mov	r5,zero
 8001268:	0180c804 	movi	r6,800
 800126c:	01c00044 	movi	r7,1
 8001270:	8000cec0 	call	8000cec <Graphics_DrawTextCentered>

	request_code_rect = Graphics_InitializeRectangleCentered(strlen(requestCode)*12 + 30, 250, 75, 0, 800, GREEN, requestCode);
 8001274:	e0bffa44 	addi	r2,fp,-23
 8001278:	1009883a 	mov	r4,r2
 800127c:	80079640 	call	8007964 <strlen>
 8001280:	1009883a 	mov	r4,r2
 8001284:	01400304 	movi	r5,12
 8001288:	8004c100 	call	8004c10 <__mulsi3>
 800128c:	10800784 	addi	r2,r2,30
 8001290:	1007883a 	mov	r3,r2
 8001294:	0080c804 	movi	r2,800
 8001298:	d8800015 	stw	r2,0(sp)
 800129c:	00800304 	movi	r2,12
 80012a0:	d8800115 	stw	r2,4(sp)
 80012a4:	e0bffa44 	addi	r2,fp,-23
 80012a8:	d8800215 	stw	r2,8(sp)
 80012ac:	1809883a 	mov	r4,r3
 80012b0:	01403e84 	movi	r5,250
 80012b4:	018012c4 	movi	r6,75
 80012b8:	000f883a 	mov	r7,zero
 80012bc:	80022d80 	call	80022d8 <Graphics_InitializeRectangleCentered>
 80012c0:	d0a6d915 	stw	r2,-25756(gp)
	Graphics_DrawRectangle(request_code_rect);
 80012c4:	d0a6d917 	ldw	r2,-25756(gp)
 80012c8:	1009883a 	mov	r4,r2
 80012cc:	8000a8c0 	call	8000a8c <Graphics_DrawRectangle>

	log_in_rect = Graphics_InitializeRectangleCentered(strlen(logInLabel)*12 + 30, 30, 75, 650, 750, BLUE, logInLabel);
 80012d0:	e0bffd84 	addi	r2,fp,-10
 80012d4:	1009883a 	mov	r4,r2
 80012d8:	80079640 	call	8007964 <strlen>
 80012dc:	1009883a 	mov	r4,r2
 80012e0:	01400304 	movi	r5,12
 80012e4:	8004c100 	call	8004c10 <__mulsi3>
 80012e8:	10800784 	addi	r2,r2,30
 80012ec:	1007883a 	mov	r3,r2
 80012f0:	0080bb84 	movi	r2,750
 80012f4:	d8800015 	stw	r2,0(sp)
 80012f8:	00800104 	movi	r2,4
 80012fc:	d8800115 	stw	r2,4(sp)
 8001300:	e0bffd84 	addi	r2,fp,-10
 8001304:	d8800215 	stw	r2,8(sp)
 8001308:	1809883a 	mov	r4,r3
 800130c:	01400784 	movi	r5,30
 8001310:	018012c4 	movi	r6,75
 8001314:	01c0a284 	movi	r7,650
 8001318:	80022d80 	call	80022d8 <Graphics_InitializeRectangleCentered>
 800131c:	d0a6db15 	stw	r2,-25748(gp)
	Graphics_DrawRectangle(log_in_rect);
 8001320:	d0a6db17 	ldw	r2,-25748(gp)
 8001324:	1009883a 	mov	r4,r2
 8001328:	8000a8c0 	call	8000a8c <Graphics_DrawRectangle>
}
 800132c:	e037883a 	mov	sp,fp
 8001330:	dfc00117 	ldw	ra,4(sp)
 8001334:	df000017 	ldw	fp,0(sp)
 8001338:	dec00204 	addi	sp,sp,8
 800133c:	f800283a 	ret

08001340 <Graphics_DrawPhoneNumberMenu>:

void Graphics_DrawPhoneNumberMenu(){
 8001340:	defff304 	addi	sp,sp,-52
 8001344:	dfc00c15 	stw	ra,48(sp)
 8001348:	df000b15 	stw	fp,44(sp)
 800134c:	df000b04 	addi	fp,sp,44
	Graphics_ClearScreen(BLACK);
 8001350:	0009883a 	mov	r4,zero
 8001354:	8000ec00 	call	8000ec0 <Graphics_ClearScreen>

	char promptLabel[] = "PLEASE ENTER YOUR PHONE NUMBER:";
 8001358:	00905174 	movhi	r2,16709
 800135c:	10931404 	addi	r2,r2,19536
 8001360:	e0bff815 	stw	r2,-32(fp)
 8001364:	00914834 	movhi	r2,17696
 8001368:	109154c4 	addi	r2,r2,17747
 800136c:	e0bff915 	stw	r2,-28(fp)
 8001370:	00949174 	movhi	r2,21061
 8001374:	10951384 	addi	r2,r2,21582
 8001378:	e0bffa15 	stw	r2,-24(fp)
 800137c:	009553f4 	movhi	r2,21839
 8001380:	10964804 	addi	r2,r2,22816
 8001384:	e0bffb15 	stw	r2,-20(fp)
 8001388:	00921434 	movhi	r2,18512
 800138c:	10881484 	addi	r2,r2,8274
 8001390:	e0bffc15 	stw	r2,-16(fp)
 8001394:	00881174 	movhi	r2,8261
 8001398:	109393c4 	addi	r2,r2,20047
 800139c:	e0bffd15 	stw	r2,-12(fp)
 80013a0:	00909374 	movhi	r2,16973
 80013a4:	10955384 	addi	r2,r2,21838
 80013a8:	e0bffe15 	stw	r2,-8(fp)
 80013ac:	00800eb4 	movhi	r2,58
 80013b0:	10949144 	addi	r2,r2,21061
 80013b4:	e0bfff15 	stw	r2,-4(fp)
	Graphics_InitializeHomeButton();
 80013b8:	80019b40 	call	80019b4 <Graphics_InitializeHomeButton>
	Graphics_DrawHomeButton();
 80013bc:	8001a180 	call	8001a18 <Graphics_DrawHomeButton>
	Graphics_DrawText(FIELDSTARTX + 15, FIELDSTARTY - 20, WHITE, BLACK, promptLabel, strlen(promptLabel),0);
 80013c0:	e13ff804 	addi	r4,fp,-32
 80013c4:	80079640 	call	8007964 <strlen>
 80013c8:	e0fff804 	addi	r3,fp,-32
 80013cc:	d8c00015 	stw	r3,0(sp)
 80013d0:	d8800115 	stw	r2,4(sp)
 80013d4:	d8000215 	stw	zero,8(sp)
 80013d8:	01002944 	movi	r4,165
 80013dc:	014003c4 	movi	r5,15
 80013e0:	01800044 	movi	r6,1
 80013e4:	000f883a 	mov	r7,zero
 80013e8:	8000c480 	call	8000c48 <Graphics_DrawText>
	Graphics_DrawField(PHONENUMLENGTH, PHONEINDEXLEN);
 80013ec:	01000284 	movi	r4,10
 80013f0:	01400a44 	movi	r5,41
 80013f4:	80016fc0 	call	80016fc <Graphics_DrawField>
	Graphics_DrawNumPad();
 80013f8:	800194c0 	call	800194c <Graphics_DrawNumPad>
}
 80013fc:	e037883a 	mov	sp,fp
 8001400:	dfc00117 	ldw	ra,4(sp)
 8001404:	df000017 	ldw	fp,0(sp)
 8001408:	dec00204 	addi	sp,sp,8
 800140c:	f800283a 	ret

08001410 <Graphics_DrawMasterCodeMenu>:

void Graphics_DrawMasterCodeMenu(){
 8001410:	defff304 	addi	sp,sp,-52
 8001414:	dfc00c15 	stw	ra,48(sp)
 8001418:	df000b15 	stw	fp,44(sp)
 800141c:	df000b04 	addi	fp,sp,44
	Graphics_ClearScreen(BLACK);
 8001420:	0009883a 	mov	r4,zero
 8001424:	8000ec00 	call	8000ec0 <Graphics_ClearScreen>

	char promptLabel[] = "PLEASE ENTER THE MASTER CODE:";
 8001428:	00905174 	movhi	r2,16709
 800142c:	10931404 	addi	r2,r2,19536
 8001430:	e0bff815 	stw	r2,-32(fp)
 8001434:	00914834 	movhi	r2,17696
 8001438:	109154c4 	addi	r2,r2,17747
 800143c:	e0bff915 	stw	r2,-28(fp)
 8001440:	00949174 	movhi	r2,21061
 8001444:	10951384 	addi	r2,r2,21582
 8001448:	e0bffa15 	stw	r2,-24(fp)
 800144c:	00915234 	movhi	r2,17736
 8001450:	10950804 	addi	r2,r2,21536
 8001454:	e0bffb15 	stw	r2,-20(fp)
 8001458:	0094d074 	movhi	r2,21313
 800145c:	10934804 	addi	r2,r2,19744
 8001460:	e0bffc15 	stw	r2,-16(fp)
 8001464:	008814b4 	movhi	r2,8274
 8001468:	10915504 	addi	r2,r2,17748
 800146c:	e0bffd15 	stw	r2,-12(fp)
 8001470:	00915134 	movhi	r2,17732
 8001474:	1093d0c4 	addi	r2,r2,20291
 8001478:	e0bffe15 	stw	r2,-8(fp)
 800147c:	00800e84 	movi	r2,58
 8001480:	e0bfff0d 	sth	r2,-4(fp)
	Graphics_InitializeHomeButton();
 8001484:	80019b40 	call	80019b4 <Graphics_InitializeHomeButton>
	Graphics_DrawHomeButton();
 8001488:	8001a180 	call	8001a18 <Graphics_DrawHomeButton>
	Graphics_DrawText(FIELDSTARTX + 15, FIELDSTARTY - 20, WHITE, BLACK, promptLabel, strlen(promptLabel),0);
 800148c:	e13ff804 	addi	r4,fp,-32
 8001490:	80079640 	call	8007964 <strlen>
 8001494:	e0fff804 	addi	r3,fp,-32
 8001498:	d8c00015 	stw	r3,0(sp)
 800149c:	d8800115 	stw	r2,4(sp)
 80014a0:	d8000215 	stw	zero,8(sp)
 80014a4:	01002944 	movi	r4,165
 80014a8:	014003c4 	movi	r5,15
 80014ac:	01800044 	movi	r6,1
 80014b0:	000f883a 	mov	r7,zero
 80014b4:	8000c480 	call	8000c48 <Graphics_DrawText>
	Graphics_DrawField(MASTERCODELENGTH, MASTERINDEXLEN);
 80014b8:	01000184 	movi	r4,6
 80014bc:	01401284 	movi	r5,74
 80014c0:	80016fc0 	call	80016fc <Graphics_DrawField>
	Graphics_DrawNumPad();
 80014c4:	800194c0 	call	800194c <Graphics_DrawNumPad>
}
 80014c8:	e037883a 	mov	sp,fp
 80014cc:	dfc00117 	ldw	ra,4(sp)
 80014d0:	df000017 	ldw	fp,0(sp)
 80014d4:	dec00204 	addi	sp,sp,8
 80014d8:	f800283a 	ret

080014dc <Graphics_DrawLoadingScreen>:

void Graphics_DrawLoadingScreen(){
 80014dc:	deffff04 	addi	sp,sp,-4
 80014e0:	df000015 	stw	fp,0(sp)
 80014e4:	d839883a 	mov	fp,sp

}
 80014e8:	e037883a 	mov	sp,fp
 80014ec:	df000017 	ldw	fp,0(sp)
 80014f0:	dec00104 	addi	sp,sp,4
 80014f4:	f800283a 	ret

080014f8 <Graphics_DrawUnlockScreen>:

/*****************************************************************************************
 *	Function to draw the unlock screen GUI.
 *
 ******************************************************************************************/
void Graphics_DrawUnlockScreen(){
 80014f8:	defff404 	addi	sp,sp,-48
 80014fc:	dfc00b15 	stw	ra,44(sp)
 8001500:	df000a15 	stw	fp,40(sp)
 8001504:	df000a04 	addi	fp,sp,40
	Graphics_ClearScreen(GREEN);
 8001508:	01000304 	movi	r4,12
 800150c:	8000ec00 	call	8000ec0 <Graphics_ClearScreen>
	char successLabel[] = "Successfully Unlocked!";
 8001510:	0098d8f4 	movhi	r2,25443
 8001514:	109d54c4 	addi	r2,r2,30035
 8001518:	e0bffa15 	stw	r2,-24(fp)
 800151c:	00999cf4 	movhi	r2,26227
 8001520:	109cd944 	addi	r2,r2,29541
 8001524:	e0bffb15 	stw	r2,-20(fp)
 8001528:	009e5b34 	movhi	r2,31084
 800152c:	109b1d44 	addi	r2,r2,27765
 8001530:	e0bffc15 	stw	r2,-16(fp)
 8001534:	009b1bb4 	movhi	r2,27758
 8001538:	10954804 	addi	r2,r2,21792
 800153c:	e0bffd15 	stw	r2,-12(fp)
 8001540:	00995af4 	movhi	r2,25963
 8001544:	1098dbc4 	addi	r2,r2,25455
 8001548:	e0bffe15 	stw	r2,-8(fp)
 800154c:	00885904 	movi	r2,8548
 8001550:	e0bfff0d 	sth	r2,-4(fp)
 8001554:	e03fff85 	stb	zero,-2(fp)
	Graphics_DrawTextCentered(200, 0, 800, WHITE, BLACK, successLabel, strlen(successLabel), 0);
 8001558:	e13ffa04 	addi	r4,fp,-24
 800155c:	80079640 	call	8007964 <strlen>
 8001560:	d8000015 	stw	zero,0(sp)
 8001564:	e0fffa04 	addi	r3,fp,-24
 8001568:	d8c00115 	stw	r3,4(sp)
 800156c:	d8800215 	stw	r2,8(sp)
 8001570:	d8000315 	stw	zero,12(sp)
 8001574:	01003204 	movi	r4,200
 8001578:	000b883a 	mov	r5,zero
 800157c:	0180c804 	movi	r6,800
 8001580:	01c00044 	movi	r7,1
 8001584:	8000cec0 	call	8000cec <Graphics_DrawTextCentered>
	Graphics_DrawHomeButton();
 8001588:	8001a180 	call	8001a18 <Graphics_DrawHomeButton>
}
 800158c:	e037883a 	mov	sp,fp
 8001590:	dfc00117 	ldw	ra,4(sp)
 8001594:	df000017 	ldw	fp,0(sp)
 8001598:	dec00204 	addi	sp,sp,8
 800159c:	f800283a 	ret

080015a0 <Graphics_DrawLockScreen>:

/*****************************************************************************************
 *	Function to draw the lock screen GUI.
 *
 ******************************************************************************************/
void Graphics_DrawLockScreen(){
 80015a0:	defff604 	addi	sp,sp,-40
 80015a4:	dfc00915 	stw	ra,36(sp)
 80015a8:	df000815 	stw	fp,32(sp)
 80015ac:	df000804 	addi	fp,sp,32
	Graphics_ClearScreen(RED);
 80015b0:	01000084 	movi	r4,2
 80015b4:	8000ec00 	call	8000ec0 <Graphics_ClearScreen>
	char failureLabel[] = "Incorrect Pin";
 80015b8:	009bd8f4 	movhi	r2,28515
 80015bc:	109b9244 	addi	r2,r2,28233
 80015c0:	e0bffc15 	stw	r2,-16(fp)
 80015c4:	0098d974 	movhi	r2,25445
 80015c8:	109c9c84 	addi	r2,r2,29298
 80015cc:	e0bffd15 	stw	r2,-12(fp)
 80015d0:	009a5434 	movhi	r2,26960
 80015d4:	10881d04 	addi	r2,r2,8308
 80015d8:	e0bffe15 	stw	r2,-8(fp)
 80015dc:	00801b84 	movi	r2,110
 80015e0:	e0bfff0d 	sth	r2,-4(fp)
	Graphics_DrawTextCentered(200, 0, 800, WHITE, BLACK, failureLabel, strlen(failureLabel), 0);
 80015e4:	e13ffc04 	addi	r4,fp,-16
 80015e8:	80079640 	call	8007964 <strlen>
 80015ec:	d8000015 	stw	zero,0(sp)
 80015f0:	e0fffc04 	addi	r3,fp,-16
 80015f4:	d8c00115 	stw	r3,4(sp)
 80015f8:	d8800215 	stw	r2,8(sp)
 80015fc:	d8000315 	stw	zero,12(sp)
 8001600:	01003204 	movi	r4,200
 8001604:	000b883a 	mov	r5,zero
 8001608:	0180c804 	movi	r6,800
 800160c:	01c00044 	movi	r7,1
 8001610:	8000cec0 	call	8000cec <Graphics_DrawTextCentered>
	Graphics_DrawHomeButton();
 8001614:	8001a180 	call	8001a18 <Graphics_DrawHomeButton>
}
 8001618:	e037883a 	mov	sp,fp
 800161c:	dfc00117 	ldw	ra,4(sp)
 8001620:	df000017 	ldw	fp,0(sp)
 8001624:	dec00204 	addi	sp,sp,8
 8001628:	f800283a 	ret

0800162c <Graphics_DrawMenu>:

/*****************************************************************************************
 *	Function to draw the main menu GUI.
 *
 ******************************************************************************************/
void Graphics_DrawMenu() {
 800162c:	defff304 	addi	sp,sp,-52
 8001630:	dfc00c15 	stw	ra,48(sp)
 8001634:	df000b15 	stw	fp,44(sp)
 8001638:	df000b04 	addi	fp,sp,44
	char menuLabel[] = "PLEASE ENTER THE ACCESS CODE:";
 800163c:	00905174 	movhi	r2,16709
 8001640:	10931404 	addi	r2,r2,19536
 8001644:	e0bff815 	stw	r2,-32(fp)
 8001648:	00914834 	movhi	r2,17696
 800164c:	109154c4 	addi	r2,r2,17747
 8001650:	e0bff915 	stw	r2,-28(fp)
 8001654:	00949174 	movhi	r2,21061
 8001658:	10951384 	addi	r2,r2,21582
 800165c:	e0bffa15 	stw	r2,-24(fp)
 8001660:	00915234 	movhi	r2,17736
 8001664:	10950804 	addi	r2,r2,21536
 8001668:	e0bffb15 	stw	r2,-20(fp)
 800166c:	0090d0f4 	movhi	r2,17219
 8001670:	10904804 	addi	r2,r2,16672
 8001674:	e0bffc15 	stw	r2,-16(fp)
 8001678:	008814f4 	movhi	r2,8275
 800167c:	1094d144 	addi	r2,r2,21317
 8001680:	e0bffd15 	stw	r2,-12(fp)
 8001684:	00915134 	movhi	r2,17732
 8001688:	1093d0c4 	addi	r2,r2,20291
 800168c:	e0bffe15 	stw	r2,-8(fp)
 8001690:	00800e84 	movi	r2,58
 8001694:	e0bfff0d 	sth	r2,-4(fp)
	graphics_field_cursor = 0;
 8001698:	d026dc15 	stw	zero,-25744(gp)

	Graphics_ClearScreen(BLACK);
 800169c:	0009883a 	mov	r4,zero
 80016a0:	8000ec00 	call	8000ec0 <Graphics_ClearScreen>

	Graphics_InitializeHomeButton();
 80016a4:	80019b40 	call	80019b4 <Graphics_InitializeHomeButton>
	Graphics_DrawHomeButton();
 80016a8:	8001a180 	call	8001a18 <Graphics_DrawHomeButton>
	Graphics_DrawText(FIELDSTARTX + 15, FIELDSTARTY - 20, WHITE, BLACK, menuLabel, strlen(menuLabel),0);
 80016ac:	e13ff804 	addi	r4,fp,-32
 80016b0:	80079640 	call	8007964 <strlen>
 80016b4:	e0fff804 	addi	r3,fp,-32
 80016b8:	d8c00015 	stw	r3,0(sp)
 80016bc:	d8800115 	stw	r2,4(sp)
 80016c0:	d8000215 	stw	zero,8(sp)
 80016c4:	01002944 	movi	r4,165
 80016c8:	014003c4 	movi	r5,15
 80016cc:	01800044 	movi	r6,1
 80016d0:	000f883a 	mov	r7,zero
 80016d4:	8000c480 	call	8000c48 <Graphics_DrawText>
	Graphics_DrawField(CODELENGTH, CODEINDEXLEN);
 80016d8:	01000104 	movi	r4,4
 80016dc:	01401cc4 	movi	r5,115
 80016e0:	80016fc0 	call	80016fc <Graphics_DrawField>

	Graphics_DrawNumPad();
 80016e4:	800194c0 	call	800194c <Graphics_DrawNumPad>
}
 80016e8:	e037883a 	mov	sp,fp
 80016ec:	dfc00117 	ldw	ra,4(sp)
 80016f0:	df000017 	ldw	fp,0(sp)
 80016f4:	dec00204 	addi	sp,sp,8
 80016f8:	f800283a 	ret

080016fc <Graphics_DrawField>:

/*****************************************************************************************
 *	Function to draw the white field in our number pad GUI.
 *
 ******************************************************************************************/
void Graphics_DrawField(int codeLength, int indexLength) {
 80016fc:	defff904 	addi	sp,sp,-28
 8001700:	dfc00615 	stw	ra,24(sp)
 8001704:	df000515 	stw	fp,20(sp)
 8001708:	df000504 	addi	fp,sp,20
 800170c:	e13ffe15 	stw	r4,-8(fp)
 8001710:	e17fff15 	stw	r5,-4(fp)
	int i;
	int xStart = FIELDSTARTX + FIELDSPACE;
 8001714:	00802784 	movi	r2,158
 8001718:	e0bffd15 	stw	r2,-12(fp)

	Graphics_PointsDrawRectangle(FIELDSTARTX, FIELDSTARTY, FIELDENDX, FIELDENDY, WHITE);
 800171c:	00800044 	movi	r2,1
 8001720:	d8800015 	stw	r2,0(sp)
 8001724:	01002584 	movi	r4,150
 8001728:	014008c4 	movi	r5,35
 800172c:	0180a284 	movi	r6,650
 8001730:	01c01904 	movi	r7,100
 8001734:	8000be40 	call	8000be4 <Graphics_PointsDrawRectangle>

	for (i = 0; i < codeLength; i++) {
 8001738:	e03ffc15 	stw	zero,-16(fp)
 800173c:	00001006 	br	8001780 <Graphics_DrawField+0x84>
		Graphics_DrawHorizontalLine(xStart, xStart + indexLength, FIELDENDY - 10, BLACK);
 8001740:	e0fffd17 	ldw	r3,-12(fp)
 8001744:	e0bfff17 	ldw	r2,-4(fp)
 8001748:	1885883a 	add	r2,r3,r2
 800174c:	e13ffd17 	ldw	r4,-12(fp)
 8001750:	100b883a 	mov	r5,r2
 8001754:	01801684 	movi	r6,90
 8001758:	000f883a 	mov	r7,zero
 800175c:	80006f80 	call	80006f8 <Graphics_DrawHorizontalLine>
		xStart = xStart + indexLength + FIELDSPACE;
 8001760:	e0fffd17 	ldw	r3,-12(fp)
 8001764:	e0bfff17 	ldw	r2,-4(fp)
 8001768:	1885883a 	add	r2,r3,r2
 800176c:	10800204 	addi	r2,r2,8
 8001770:	e0bffd15 	stw	r2,-12(fp)
	int i;
	int xStart = FIELDSTARTX + FIELDSPACE;

	Graphics_PointsDrawRectangle(FIELDSTARTX, FIELDSTARTY, FIELDENDX, FIELDENDY, WHITE);

	for (i = 0; i < codeLength; i++) {
 8001774:	e0bffc17 	ldw	r2,-16(fp)
 8001778:	10800044 	addi	r2,r2,1
 800177c:	e0bffc15 	stw	r2,-16(fp)
 8001780:	e0fffc17 	ldw	r3,-16(fp)
 8001784:	e0bffe17 	ldw	r2,-8(fp)
 8001788:	18bfed16 	blt	r3,r2,8001740 <__alt_data_end+0xfc001740>
		Graphics_DrawHorizontalLine(xStart, xStart + indexLength, FIELDENDY - 10, BLACK);
		xStart = xStart + indexLength + FIELDSPACE;
	}
}
 800178c:	e037883a 	mov	sp,fp
 8001790:	dfc00117 	ldw	ra,4(sp)
 8001794:	df000017 	ldw	fp,0(sp)
 8001798:	dec00204 	addi	sp,sp,8
 800179c:	f800283a 	ret

080017a0 <Graphics_InitializeNumberPad>:

void Graphics_InitializeNumberPad(){
 80017a0:	defff004 	addi	sp,sp,-64
 80017a4:	dfc00f15 	stw	ra,60(sp)
 80017a8:	df000e15 	stw	fp,56(sp)
 80017ac:	df000e04 	addi	fp,sp,56
	int i, j;
	int k = 0;
 80017b0:	e03ff715 	stw	zero,-36(fp)
	int xPosStart, xPosEnd = 0;
 80017b4:	e03ff915 	stw	zero,-28(fp)
	int yPosStart = 125;
 80017b8:	00801f44 	movi	r2,125
 80017bc:	e0bffa15 	stw	r2,-24(fp)
	int yPosEnd = yPosStart + SQUAREHEIGHT;
 80017c0:	e0bffa17 	ldw	r2,-24(fp)
 80017c4:	10800f04 	addi	r2,r2,60
 80017c8:	e0bffb15 	stw	r2,-20(fp)
	char *text;

	for (j = 0; j < 4; j++) {
 80017cc:	e03ff615 	stw	zero,-40(fp)
 80017d0:	00005606 	br	800192c <Graphics_InitializeNumberPad+0x18c>
		xPosStart = (800 - ((SQUAREWIDTH * 3) + (SPACESIZE * 2))) / 2;
 80017d4:	00802584 	movi	r2,150
 80017d8:	e0bff815 	stw	r2,-32(fp)
		xPosEnd = xPosStart + SQUAREWIDTH;
 80017dc:	e0bff817 	ldw	r2,-32(fp)
 80017e0:	10802584 	addi	r2,r2,150
 80017e4:	e0bff915 	stw	r2,-28(fp)
		for (i = 0; i < 3; i++) {
 80017e8:	e03ff515 	stw	zero,-44(fp)
 80017ec:	00004306 	br	80018fc <Graphics_InitializeNumberPad+0x15c>
			int colour = GRAY;
 80017f0:	00800244 	movi	r2,9
 80017f4:	e0bffd15 	stw	r2,-12(fp)
			if(j == 3 && i == 0){
 80017f8:	e0bff617 	ldw	r2,-40(fp)
 80017fc:	108000d8 	cmpnei	r2,r2,3
 8001800:	1000081e 	bne	r2,zero,8001824 <Graphics_InitializeNumberPad+0x84>
 8001804:	e0bff517 	ldw	r2,-44(fp)
 8001808:	1000061e 	bne	r2,zero,8001824 <Graphics_InitializeNumberPad+0x84>
				colour = GREEN;
 800180c:	00800304 	movi	r2,12
 8001810:	e0bffd15 	stw	r2,-12(fp)
				text = "SUBMIT";
 8001814:	008200b4 	movhi	r2,2050
 8001818:	108bb804 	addi	r2,r2,12000
 800181c:	e0bffc15 	stw	r2,-16(fp)
 8001820:	00001706 	br	8001880 <Graphics_InitializeNumberPad+0xe0>
			}
			else if (j == 3 && i == 2){
 8001824:	e0bff617 	ldw	r2,-40(fp)
 8001828:	108000d8 	cmpnei	r2,r2,3
 800182c:	1000091e 	bne	r2,zero,8001854 <Graphics_InitializeNumberPad+0xb4>
 8001830:	e0bff517 	ldw	r2,-44(fp)
 8001834:	10800098 	cmpnei	r2,r2,2
 8001838:	1000061e 	bne	r2,zero,8001854 <Graphics_InitializeNumberPad+0xb4>
				colour = RED;
 800183c:	00800084 	movi	r2,2
 8001840:	e0bffd15 	stw	r2,-12(fp)
				text = "CLEAR";
 8001844:	008200b4 	movhi	r2,2050
 8001848:	108bba04 	addi	r2,r2,12008
 800184c:	e0bffc15 	stw	r2,-16(fp)
 8001850:	00000b06 	br	8001880 <Graphics_InitializeNumberPad+0xe0>
			}
			else {
				char num[1];
				sprintf(num, "%d", Graphics_ButtonNumToNum(k));
 8001854:	e13ff717 	ldw	r4,-36(fp)
 8001858:	8001f780 	call	8001f78 <Graphics_ButtonNumToNum>
 800185c:	1007883a 	mov	r3,r2
 8001860:	e0bfff04 	addi	r2,fp,-4
 8001864:	1009883a 	mov	r4,r2
 8001868:	014200b4 	movhi	r5,2050
 800186c:	294bbc04 	addi	r5,r5,12016
 8001870:	180d883a 	mov	r6,r3
 8001874:	80076880 	call	8007688 <sprintf>
				text = num;
 8001878:	e0bfff04 	addi	r2,fp,-4
 800187c:	e0bffc15 	stw	r2,-16(fp)
			}

			Rectangle_t* rect = Graphics_Init_Rectangle(xPosStart, yPosStart, xPosEnd, yPosEnd, colour, REGULAR_BUTTON, text);
 8001880:	e0bffd17 	ldw	r2,-12(fp)
 8001884:	d8800015 	stw	r2,0(sp)
 8001888:	d8000115 	stw	zero,4(sp)
 800188c:	e0bffc17 	ldw	r2,-16(fp)
 8001890:	d8800215 	stw	r2,8(sp)
 8001894:	e13ff817 	ldw	r4,-32(fp)
 8001898:	e17ffa17 	ldw	r5,-24(fp)
 800189c:	e1bff917 	ldw	r6,-28(fp)
 80018a0:	e1fffb17 	ldw	r7,-20(fp)
 80018a4:	8000dc80 	call	8000dc8 <Graphics_Init_Rectangle>
 80018a8:	e0bffe15 	stw	r2,-8(fp)
			numpad[k] = rect;
 80018ac:	008200b4 	movhi	r2,2050
 80018b0:	109bd504 	addi	r2,r2,28500
 80018b4:	e0fff717 	ldw	r3,-36(fp)
 80018b8:	18c7883a 	add	r3,r3,r3
 80018bc:	18c7883a 	add	r3,r3,r3
 80018c0:	10c5883a 	add	r2,r2,r3
 80018c4:	e0fffe17 	ldw	r3,-8(fp)
 80018c8:	10c00015 	stw	r3,0(r2)
			//Graphics_DrawRectangle(rect);
			xPosStart = xPosEnd + SPACESIZE;
 80018cc:	e0bff917 	ldw	r2,-28(fp)
 80018d0:	10800644 	addi	r2,r2,25
 80018d4:	e0bff815 	stw	r2,-32(fp)
			xPosEnd = xPosStart + SQUAREWIDTH;
 80018d8:	e0bff817 	ldw	r2,-32(fp)
 80018dc:	10802584 	addi	r2,r2,150
 80018e0:	e0bff915 	stw	r2,-28(fp)

			k++;
 80018e4:	e0bff717 	ldw	r2,-36(fp)
 80018e8:	10800044 	addi	r2,r2,1
 80018ec:	e0bff715 	stw	r2,-36(fp)
	char *text;

	for (j = 0; j < 4; j++) {
		xPosStart = (800 - ((SQUAREWIDTH * 3) + (SPACESIZE * 2))) / 2;
		xPosEnd = xPosStart + SQUAREWIDTH;
		for (i = 0; i < 3; i++) {
 80018f0:	e0bff517 	ldw	r2,-44(fp)
 80018f4:	10800044 	addi	r2,r2,1
 80018f8:	e0bff515 	stw	r2,-44(fp)
 80018fc:	e0bff517 	ldw	r2,-44(fp)
 8001900:	108000d0 	cmplti	r2,r2,3
 8001904:	103fba1e 	bne	r2,zero,80017f0 <__alt_data_end+0xfc0017f0>
			xPosStart = xPosEnd + SPACESIZE;
			xPosEnd = xPosStart + SQUAREWIDTH;

			k++;
		}
		yPosStart = yPosEnd + SPACESIZE;
 8001908:	e0bffb17 	ldw	r2,-20(fp)
 800190c:	10800644 	addi	r2,r2,25
 8001910:	e0bffa15 	stw	r2,-24(fp)
		yPosEnd = yPosStart + SQUAREHEIGHT;
 8001914:	e0bffa17 	ldw	r2,-24(fp)
 8001918:	10800f04 	addi	r2,r2,60
 800191c:	e0bffb15 	stw	r2,-20(fp)
	int xPosStart, xPosEnd = 0;
	int yPosStart = 125;
	int yPosEnd = yPosStart + SQUAREHEIGHT;
	char *text;

	for (j = 0; j < 4; j++) {
 8001920:	e0bff617 	ldw	r2,-40(fp)
 8001924:	10800044 	addi	r2,r2,1
 8001928:	e0bff615 	stw	r2,-40(fp)
 800192c:	e0bff617 	ldw	r2,-40(fp)
 8001930:	10800110 	cmplti	r2,r2,4
 8001934:	103fa71e 	bne	r2,zero,80017d4 <__alt_data_end+0xfc0017d4>
			k++;
		}
		yPosStart = yPosEnd + SPACESIZE;
		yPosEnd = yPosStart + SQUAREHEIGHT;
	}
}
 8001938:	e037883a 	mov	sp,fp
 800193c:	dfc00117 	ldw	ra,4(sp)
 8001940:	df000017 	ldw	fp,0(sp)
 8001944:	dec00204 	addi	sp,sp,8
 8001948:	f800283a 	ret

0800194c <Graphics_DrawNumPad>:

void Graphics_DrawNumPad(){
 800194c:	defffd04 	addi	sp,sp,-12
 8001950:	dfc00215 	stw	ra,8(sp)
 8001954:	df000115 	stw	fp,4(sp)
 8001958:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUMPAD_SIZE; i++){
 800195c:	e03fff15 	stw	zero,-4(fp)
 8001960:	00000c06 	br	8001994 <Graphics_DrawNumPad+0x48>
		Graphics_DrawRectangle(numpad[i]);
 8001964:	008200b4 	movhi	r2,2050
 8001968:	109bd504 	addi	r2,r2,28500
 800196c:	e0ffff17 	ldw	r3,-4(fp)
 8001970:	18c7883a 	add	r3,r3,r3
 8001974:	18c7883a 	add	r3,r3,r3
 8001978:	10c5883a 	add	r2,r2,r3
 800197c:	10800017 	ldw	r2,0(r2)
 8001980:	1009883a 	mov	r4,r2
 8001984:	8000a8c0 	call	8000a8c <Graphics_DrawRectangle>
	}
}

void Graphics_DrawNumPad(){
	int i;
	for (i = 0; i < NUMPAD_SIZE; i++){
 8001988:	e0bfff17 	ldw	r2,-4(fp)
 800198c:	10800044 	addi	r2,r2,1
 8001990:	e0bfff15 	stw	r2,-4(fp)
 8001994:	e0bfff17 	ldw	r2,-4(fp)
 8001998:	10800310 	cmplti	r2,r2,12
 800199c:	103ff11e 	bne	r2,zero,8001964 <__alt_data_end+0xfc001964>
		Graphics_DrawRectangle(numpad[i]);
	}
}
 80019a0:	e037883a 	mov	sp,fp
 80019a4:	dfc00117 	ldw	ra,4(sp)
 80019a8:	df000017 	ldw	fp,0(sp)
 80019ac:	dec00204 	addi	sp,sp,8
 80019b0:	f800283a 	ret

080019b4 <Graphics_InitializeHomeButton>:

void Graphics_InitializeHomeButton(){
 80019b4:	defff904 	addi	sp,sp,-28
 80019b8:	dfc00615 	stw	ra,24(sp)
 80019bc:	df000515 	stw	fp,20(sp)
 80019c0:	df000504 	addi	fp,sp,20
	char homeButtonLabel[] = "HOME";
 80019c4:	00915374 	movhi	r2,17741
 80019c8:	1093d204 	addi	r2,r2,20296
 80019cc:	e0bffe15 	stw	r2,-8(fp)
 80019d0:	e03fff05 	stb	zero,-4(fp)
	home_button_rect = Graphics_Init_Rectangle(25, 15, 140, 65, BLUE, HOME_BUTTON, homeButtonLabel);
 80019d4:	00800104 	movi	r2,4
 80019d8:	d8800015 	stw	r2,0(sp)
 80019dc:	00800044 	movi	r2,1
 80019e0:	d8800115 	stw	r2,4(sp)
 80019e4:	e0bffe04 	addi	r2,fp,-8
 80019e8:	d8800215 	stw	r2,8(sp)
 80019ec:	01000644 	movi	r4,25
 80019f0:	014003c4 	movi	r5,15
 80019f4:	01802304 	movi	r6,140
 80019f8:	01c01044 	movi	r7,65
 80019fc:	8000dc80 	call	8000dc8 <Graphics_Init_Rectangle>
 8001a00:	d0a6d815 	stw	r2,-25760(gp)
}
 8001a04:	e037883a 	mov	sp,fp
 8001a08:	dfc00117 	ldw	ra,4(sp)
 8001a0c:	df000017 	ldw	fp,0(sp)
 8001a10:	dec00204 	addi	sp,sp,8
 8001a14:	f800283a 	ret

08001a18 <Graphics_DrawHomeButton>:

void Graphics_DrawHomeButton() {
 8001a18:	defffe04 	addi	sp,sp,-8
 8001a1c:	dfc00115 	stw	ra,4(sp)
 8001a20:	df000015 	stw	fp,0(sp)
 8001a24:	d839883a 	mov	fp,sp
	Graphics_DrawRectangle(home_button_rect);
 8001a28:	d0a6d817 	ldw	r2,-25760(gp)
 8001a2c:	1009883a 	mov	r4,r2
 8001a30:	8000a8c0 	call	8000a8c <Graphics_DrawRectangle>
}
 8001a34:	e037883a 	mov	sp,fp
 8001a38:	dfc00117 	ldw	ra,4(sp)
 8001a3c:	df000017 	ldw	fp,0(sp)
 8001a40:	dec00204 	addi	sp,sp,8
 8001a44:	f800283a 	ret

08001a48 <Graphics_DrawHomeIcon>:

void Graphics_DrawHomeIcon(int xStart, int yStart){
 8001a48:	defff504 	addi	sp,sp,-44
 8001a4c:	dfc00a15 	stw	ra,40(sp)
 8001a50:	df000915 	stw	fp,36(sp)
 8001a54:	dc400815 	stw	r17,32(sp)
 8001a58:	dc000715 	stw	r16,28(sp)
 8001a5c:	df000904 	addi	fp,sp,36
 8001a60:	e13ffc15 	stw	r4,-16(fp)
 8001a64:	e17ffd15 	stw	r5,-12(fp)
	char homeButtonLabel[] = "HOME";
 8001a68:	00915374 	movhi	r2,17741
 8001a6c:	1093d204 	addi	r2,r2,20296
 8001a70:	e0bffa15 	stw	r2,-24(fp)
 8001a74:	e03ffb05 	stb	zero,-20(fp)
	Graphics_DrawStraightLine(xStart, yStart, xStart + 20, yStart + 20,WHITE);
 8001a78:	e0bffc17 	ldw	r2,-16(fp)
 8001a7c:	11800504 	addi	r6,r2,20
 8001a80:	e0bffd17 	ldw	r2,-12(fp)
 8001a84:	10c00504 	addi	r3,r2,20
 8001a88:	00800044 	movi	r2,1
 8001a8c:	d8800015 	stw	r2,0(sp)
 8001a90:	e13ffc17 	ldw	r4,-16(fp)
 8001a94:	e17ffd17 	ldw	r5,-12(fp)
 8001a98:	180f883a 	mov	r7,r3
 8001a9c:	80008800 	call	8000880 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(xStart, yStart, xStart - 20, yStart + 20,WHITE);
 8001aa0:	e0bffc17 	ldw	r2,-16(fp)
 8001aa4:	11bffb04 	addi	r6,r2,-20
 8001aa8:	e0bffd17 	ldw	r2,-12(fp)
 8001aac:	10c00504 	addi	r3,r2,20
 8001ab0:	00800044 	movi	r2,1
 8001ab4:	d8800015 	stw	r2,0(sp)
 8001ab8:	e13ffc17 	ldw	r4,-16(fp)
 8001abc:	e17ffd17 	ldw	r5,-12(fp)
 8001ac0:	180f883a 	mov	r7,r3
 8001ac4:	80008800 	call	8000880 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(xStart - 20, yStart + 20, xStart + 20, yStart + 20,WHITE);
 8001ac8:	e0bffc17 	ldw	r2,-16(fp)
 8001acc:	113ffb04 	addi	r4,r2,-20
 8001ad0:	e0bffd17 	ldw	r2,-12(fp)
 8001ad4:	11400504 	addi	r5,r2,20
 8001ad8:	e0bffc17 	ldw	r2,-16(fp)
 8001adc:	11800504 	addi	r6,r2,20
 8001ae0:	e0bffd17 	ldw	r2,-12(fp)
 8001ae4:	10c00504 	addi	r3,r2,20
 8001ae8:	00800044 	movi	r2,1
 8001aec:	d8800015 	stw	r2,0(sp)
 8001af0:	180f883a 	mov	r7,r3
 8001af4:	80008800 	call	8000880 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(xStart - 10, yStart + 20, xStart - 10, yStart + 40,WHITE);
 8001af8:	e0bffc17 	ldw	r2,-16(fp)
 8001afc:	113ffd84 	addi	r4,r2,-10
 8001b00:	e0bffd17 	ldw	r2,-12(fp)
 8001b04:	11400504 	addi	r5,r2,20
 8001b08:	e0bffc17 	ldw	r2,-16(fp)
 8001b0c:	11bffd84 	addi	r6,r2,-10
 8001b10:	e0bffd17 	ldw	r2,-12(fp)
 8001b14:	10c00a04 	addi	r3,r2,40
 8001b18:	00800044 	movi	r2,1
 8001b1c:	d8800015 	stw	r2,0(sp)
 8001b20:	180f883a 	mov	r7,r3
 8001b24:	80008800 	call	8000880 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(xStart + 10, yStart + 20, xStart + 10, yStart + 40,WHITE);
 8001b28:	e0bffc17 	ldw	r2,-16(fp)
 8001b2c:	11000284 	addi	r4,r2,10
 8001b30:	e0bffd17 	ldw	r2,-12(fp)
 8001b34:	11400504 	addi	r5,r2,20
 8001b38:	e0bffc17 	ldw	r2,-16(fp)
 8001b3c:	11800284 	addi	r6,r2,10
 8001b40:	e0bffd17 	ldw	r2,-12(fp)
 8001b44:	10c00a04 	addi	r3,r2,40
 8001b48:	00800044 	movi	r2,1
 8001b4c:	d8800015 	stw	r2,0(sp)
 8001b50:	180f883a 	mov	r7,r3
 8001b54:	80008800 	call	8000880 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(xStart - 10, yStart + 40, xStart + 10, yStart + 40,WHITE);
 8001b58:	e0bffc17 	ldw	r2,-16(fp)
 8001b5c:	113ffd84 	addi	r4,r2,-10
 8001b60:	e0bffd17 	ldw	r2,-12(fp)
 8001b64:	11400a04 	addi	r5,r2,40
 8001b68:	e0bffc17 	ldw	r2,-16(fp)
 8001b6c:	11800284 	addi	r6,r2,10
 8001b70:	e0bffd17 	ldw	r2,-12(fp)
 8001b74:	10c00a04 	addi	r3,r2,40
 8001b78:	00800044 	movi	r2,1
 8001b7c:	d8800015 	stw	r2,0(sp)
 8001b80:	180f883a 	mov	r7,r3
 8001b84:	80008800 	call	8000880 <Graphics_DrawStraightLine>
	Graphics_DrawText(xStart + 30, yStart + 20, WHITE, BLACK, "HOME",strlen(homeButtonLabel),0);
 8001b88:	e0bffc17 	ldw	r2,-16(fp)
 8001b8c:	14400784 	addi	r17,r2,30
 8001b90:	e0bffd17 	ldw	r2,-12(fp)
 8001b94:	14000504 	addi	r16,r2,20
 8001b98:	e13ffa04 	addi	r4,fp,-24
 8001b9c:	80079640 	call	8007964 <strlen>
 8001ba0:	1007883a 	mov	r3,r2
 8001ba4:	008200b4 	movhi	r2,2050
 8001ba8:	108bbd04 	addi	r2,r2,12020
 8001bac:	d8800015 	stw	r2,0(sp)
 8001bb0:	d8c00115 	stw	r3,4(sp)
 8001bb4:	d8000215 	stw	zero,8(sp)
 8001bb8:	8809883a 	mov	r4,r17
 8001bbc:	800b883a 	mov	r5,r16
 8001bc0:	01800044 	movi	r6,1
 8001bc4:	000f883a 	mov	r7,zero
 8001bc8:	8000c480 	call	8000c48 <Graphics_DrawText>
}
 8001bcc:	e6fffe04 	addi	sp,fp,-8
 8001bd0:	dfc00317 	ldw	ra,12(sp)
 8001bd4:	df000217 	ldw	fp,8(sp)
 8001bd8:	dc400117 	ldw	r17,4(sp)
 8001bdc:	dc000017 	ldw	r16,0(sp)
 8001be0:	dec00404 	addi	sp,sp,16
 8001be4:	f800283a 	ret

08001be8 <Graphics_DrawSquare>:

/*****************************************************************************************
 *	Function to draw a rectangle in our number pad GUI.
 *
 ******************************************************************************************/
void Graphics_DrawSquare(int index, int colour, int codeIndexLength) {
 8001be8:	defffa04 	addi	sp,sp,-24
 8001bec:	dfc00515 	stw	ra,20(sp)
 8001bf0:	df000415 	stw	fp,16(sp)
 8001bf4:	df000404 	addi	fp,sp,16
 8001bf8:	e13ffd15 	stw	r4,-12(fp)
 8001bfc:	e17ffe15 	stw	r5,-8(fp)
 8001c00:	e1bfff15 	stw	r6,-4(fp)
	int lineStart = FIELDSTARTX + FIELDSPACE;
 8001c04:	00802784 	movi	r2,158
 8001c08:	e0bffc15 	stw	r2,-16(fp)
	while (index > 0){
 8001c0c:	00000806 	br	8001c30 <Graphics_DrawSquare+0x48>
		lineStart = lineStart + codeIndexLength + FIELDSPACE;
 8001c10:	e0fffc17 	ldw	r3,-16(fp)
 8001c14:	e0bfff17 	ldw	r2,-4(fp)
 8001c18:	1885883a 	add	r2,r3,r2
 8001c1c:	10800204 	addi	r2,r2,8
 8001c20:	e0bffc15 	stw	r2,-16(fp)
		index--;
 8001c24:	e0bffd17 	ldw	r2,-12(fp)
 8001c28:	10bfffc4 	addi	r2,r2,-1
 8001c2c:	e0bffd15 	stw	r2,-12(fp)
 *	Function to draw a rectangle in our number pad GUI.
 *
 ******************************************************************************************/
void Graphics_DrawSquare(int index, int colour, int codeIndexLength) {
	int lineStart = FIELDSTARTX + FIELDSPACE;
	while (index > 0){
 8001c30:	e0bffd17 	ldw	r2,-12(fp)
 8001c34:	00bff616 	blt	zero,r2,8001c10 <__alt_data_end+0xfc001c10>
		lineStart = lineStart + codeIndexLength + FIELDSPACE;
		index--;
	}

	Graphics_DrawCircle(lineStart + (codeIndexLength / 2), FIELDSTARTY + 30, 15, colour);
 8001c38:	e0bfff17 	ldw	r2,-4(fp)
 8001c3c:	1006d7fa 	srli	r3,r2,31
 8001c40:	1885883a 	add	r2,r3,r2
 8001c44:	1005d07a 	srai	r2,r2,1
 8001c48:	1007883a 	mov	r3,r2
 8001c4c:	e0bffc17 	ldw	r2,-16(fp)
 8001c50:	1885883a 	add	r2,r3,r2
 8001c54:	1009883a 	mov	r4,r2
 8001c58:	01401044 	movi	r5,65
 8001c5c:	018003c4 	movi	r6,15
 8001c60:	e1fffe17 	ldw	r7,-8(fp)
 8001c64:	80009200 	call	8000920 <Graphics_DrawCircle>
	//Graphics_PointsDrawRectangle(lineStart + 45, FIELDSTARTY + 15, lineStart + INDEXSIZE - 45, FIELDSTARTY + 45, colour);
}
 8001c68:	e037883a 	mov	sp,fp
 8001c6c:	dfc00117 	ldw	ra,4(sp)
 8001c70:	df000017 	ldw	fp,0(sp)
 8001c74:	dec00204 	addi	sp,sp,8
 8001c78:	f800283a 	ret

08001c7c <Graphics_DrawUserEnteredDigit>:
//	for (i = 0; i < CODELENGTH; i++){
//		Graphics_DrawUserEnteredDigit(i, User_Input[i], BLACK);
//	}
//}

void Graphics_DrawUserEnteredDigit(int index, int digitVal, int colour, int codeIndexLength){
 8001c7c:	defff404 	addi	sp,sp,-48
 8001c80:	dfc00b15 	stw	ra,44(sp)
 8001c84:	df000a15 	stw	fp,40(sp)
 8001c88:	df000a04 	addi	fp,sp,40
 8001c8c:	e13ffc15 	stw	r4,-16(fp)
 8001c90:	e17ffd15 	stw	r5,-12(fp)
 8001c94:	e1bffe15 	stw	r6,-8(fp)
 8001c98:	e1ffff15 	stw	r7,-4(fp)
	int lineStart = FIELDSTARTX + FIELDSPACE;
 8001c9c:	00802784 	movi	r2,158
 8001ca0:	e0bffa15 	stw	r2,-24(fp)
	while (index > 0){
 8001ca4:	00000806 	br	8001cc8 <Graphics_DrawUserEnteredDigit+0x4c>
		lineStart = lineStart + codeIndexLength + FIELDSPACE;
 8001ca8:	e0fffa17 	ldw	r3,-24(fp)
 8001cac:	e0bfff17 	ldw	r2,-4(fp)
 8001cb0:	1885883a 	add	r2,r3,r2
 8001cb4:	10800204 	addi	r2,r2,8
 8001cb8:	e0bffa15 	stw	r2,-24(fp)
		index--;
 8001cbc:	e0bffc17 	ldw	r2,-16(fp)
 8001cc0:	10bfffc4 	addi	r2,r2,-1
 8001cc4:	e0bffc15 	stw	r2,-16(fp)
//	}
//}

void Graphics_DrawUserEnteredDigit(int index, int digitVal, int colour, int codeIndexLength){
	int lineStart = FIELDSTARTX + FIELDSPACE;
	while (index > 0){
 8001cc8:	e0bffc17 	ldw	r2,-16(fp)
 8001ccc:	00bff616 	blt	zero,r2,8001ca8 <__alt_data_end+0xfc001ca8>
		lineStart = lineStart + codeIndexLength + FIELDSPACE;
		index--;
	}

	char *digit;
	sprintf(digit, "%d", digitVal);
 8001cd0:	e13ffb17 	ldw	r4,-20(fp)
 8001cd4:	014200b4 	movhi	r5,2050
 8001cd8:	294bbc04 	addi	r5,r5,12016
 8001cdc:	e1bffd17 	ldw	r6,-12(fp)
 8001ce0:	80076880 	call	8007688 <sprintf>

	Graphics_DrawTextCentered(FIELDSTARTY + 30, lineStart, lineStart + codeIndexLength, BLACK, WHITE, digit, 1,0 );
 8001ce4:	e0fffa17 	ldw	r3,-24(fp)
 8001ce8:	e0bfff17 	ldw	r2,-4(fp)
 8001cec:	1887883a 	add	r3,r3,r2
 8001cf0:	00800044 	movi	r2,1
 8001cf4:	d8800015 	stw	r2,0(sp)
 8001cf8:	e0bffb17 	ldw	r2,-20(fp)
 8001cfc:	d8800115 	stw	r2,4(sp)
 8001d00:	00800044 	movi	r2,1
 8001d04:	d8800215 	stw	r2,8(sp)
 8001d08:	d8000315 	stw	zero,12(sp)
 8001d0c:	01001044 	movi	r4,65
 8001d10:	e17ffa17 	ldw	r5,-24(fp)
 8001d14:	180d883a 	mov	r6,r3
 8001d18:	000f883a 	mov	r7,zero
 8001d1c:	8000cec0 	call	8000cec <Graphics_DrawTextCentered>
}
 8001d20:	e037883a 	mov	sp,fp
 8001d24:	dfc00117 	ldw	ra,4(sp)
 8001d28:	df000017 	ldw	fp,0(sp)
 8001d2c:	dec00204 	addi	sp,sp,8
 8001d30:	f800283a 	ret

08001d34 <Graphics_GetNumberPressed>:

/*
 * Get the index of the number pressed on the number pad, indices range from 0 to 11.
 */
int Graphics_GetNumberPressed(int point_x, int point_y, int codeLength, int array[], int codeIndexLength) {
 8001d34:	defff704 	addi	sp,sp,-36
 8001d38:	dfc00815 	stw	ra,32(sp)
 8001d3c:	df000715 	stw	fp,28(sp)
 8001d40:	dc000615 	stw	r16,24(sp)
 8001d44:	df000704 	addi	fp,sp,28
 8001d48:	e13ffb15 	stw	r4,-20(fp)
 8001d4c:	e17ffc15 	stw	r5,-16(fp)
 8001d50:	e1bffd15 	stw	r6,-12(fp)
 8001d54:	e1fffe15 	stw	r7,-8(fp)
	int i;
	for(i = 0; i < NUMPAD_SIZE; i++){
 8001d58:	e03ff915 	stw	zero,-28(fp)
 8001d5c:	00007c06 	br	8001f50 <Graphics_GetNumberPressed+0x21c>
		if(Graphics_InRectangle(point_x, point_y, numpad[i])) {
 8001d60:	008200b4 	movhi	r2,2050
 8001d64:	109bd504 	addi	r2,r2,28500
 8001d68:	e0fff917 	ldw	r3,-28(fp)
 8001d6c:	18c7883a 	add	r3,r3,r3
 8001d70:	18c7883a 	add	r3,r3,r3
 8001d74:	10c5883a 	add	r2,r2,r3
 8001d78:	10800017 	ldw	r2,0(r2)
 8001d7c:	e13ffb17 	ldw	r4,-20(fp)
 8001d80:	e17ffc17 	ldw	r5,-16(fp)
 8001d84:	100d883a 	mov	r6,r2
 8001d88:	8001fbc0 	call	8001fbc <Graphics_InRectangle>
 8001d8c:	10006d26 	beq	r2,zero,8001f44 <Graphics_GetNumberPressed+0x210>

			// Change the colour temporarily to show press
			numpad[i]->colour = BLACK;
 8001d90:	008200b4 	movhi	r2,2050
 8001d94:	109bd504 	addi	r2,r2,28500
 8001d98:	e0fff917 	ldw	r3,-28(fp)
 8001d9c:	18c7883a 	add	r3,r3,r3
 8001da0:	18c7883a 	add	r3,r3,r3
 8001da4:	10c5883a 	add	r2,r2,r3
 8001da8:	10800017 	ldw	r2,0(r2)
 8001dac:	10000615 	stw	zero,24(r2)
			Graphics_DrawRectangle(numpad[i]);
 8001db0:	008200b4 	movhi	r2,2050
 8001db4:	109bd504 	addi	r2,r2,28500
 8001db8:	e0fff917 	ldw	r3,-28(fp)
 8001dbc:	18c7883a 	add	r3,r3,r3
 8001dc0:	18c7883a 	add	r3,r3,r3
 8001dc4:	10c5883a 	add	r2,r2,r3
 8001dc8:	10800017 	ldw	r2,0(r2)
 8001dcc:	1009883a 	mov	r4,r2
 8001dd0:	8000a8c0 	call	8000a8c <Graphics_DrawRectangle>
			usleep(50000);
 8001dd4:	0130d414 	movui	r4,50000
 8001dd8:	80165880 	call	8016588 <usleep>

			if(i == NUMPAD_DELETE) {
 8001ddc:	e0bff917 	ldw	r2,-28(fp)
 8001de0:	108002d8 	cmpnei	r2,r2,11
 8001de4:	10001f1e 	bne	r2,zero,8001e64 <Graphics_GetNumberPressed+0x130>
				numpad[i]->colour = RED;
 8001de8:	008200b4 	movhi	r2,2050
 8001dec:	109bd504 	addi	r2,r2,28500
 8001df0:	e0fff917 	ldw	r3,-28(fp)
 8001df4:	18c7883a 	add	r3,r3,r3
 8001df8:	18c7883a 	add	r3,r3,r3
 8001dfc:	10c5883a 	add	r2,r2,r3
 8001e00:	10800017 	ldw	r2,0(r2)
 8001e04:	00c00084 	movi	r3,2
 8001e08:	10c00615 	stw	r3,24(r2)
				graphics_field_cursor = 0;
 8001e0c:	d026dc15 	stw	zero,-25744(gp)
				// Decrement since we've deleted a character
				int j;
				for(j = 0; j < codeLength; j++) {
 8001e10:	e03ffa15 	stw	zero,-24(fp)
 8001e14:	00000f06 	br	8001e54 <Graphics_GetNumberPressed+0x120>
					Graphics_DrawSquare(j,WHITE, codeIndexLength);
 8001e18:	e13ffa17 	ldw	r4,-24(fp)
 8001e1c:	01400044 	movi	r5,1
 8001e20:	e1800217 	ldw	r6,8(fp)
 8001e24:	8001be80 	call	8001be8 <Graphics_DrawSquare>
					array[j] = -1;
 8001e28:	e0bffa17 	ldw	r2,-24(fp)
 8001e2c:	1085883a 	add	r2,r2,r2
 8001e30:	1085883a 	add	r2,r2,r2
 8001e34:	1007883a 	mov	r3,r2
 8001e38:	e0bffe17 	ldw	r2,-8(fp)
 8001e3c:	10c5883a 	add	r2,r2,r3
 8001e40:	00ffffc4 	movi	r3,-1
 8001e44:	10c00015 	stw	r3,0(r2)
			if(i == NUMPAD_DELETE) {
				numpad[i]->colour = RED;
				graphics_field_cursor = 0;
				// Decrement since we've deleted a character
				int j;
				for(j = 0; j < codeLength; j++) {
 8001e48:	e0bffa17 	ldw	r2,-24(fp)
 8001e4c:	10800044 	addi	r2,r2,1
 8001e50:	e0bffa15 	stw	r2,-24(fp)
 8001e54:	e0fffa17 	ldw	r3,-24(fp)
 8001e58:	e0bffd17 	ldw	r2,-12(fp)
 8001e5c:	18bfee16 	blt	r3,r2,8001e18 <__alt_data_end+0xfc001e18>
 8001e60:	00002d06 	br	8001f18 <Graphics_GetNumberPressed+0x1e4>
					Graphics_DrawSquare(j,WHITE, codeIndexLength);
					array[j] = -1;
				}
			} else if(i == NUMPAD_ENTER) {
 8001e64:	e0bff917 	ldw	r2,-28(fp)
 8001e68:	10800258 	cmpnei	r2,r2,9
 8001e6c:	10000a1e 	bne	r2,zero,8001e98 <Graphics_GetNumberPressed+0x164>
				numpad[i]->colour = GREEN;
 8001e70:	008200b4 	movhi	r2,2050
 8001e74:	109bd504 	addi	r2,r2,28500
 8001e78:	e0fff917 	ldw	r3,-28(fp)
 8001e7c:	18c7883a 	add	r3,r3,r3
 8001e80:	18c7883a 	add	r3,r3,r3
 8001e84:	10c5883a 	add	r2,r2,r3
 8001e88:	10800017 	ldw	r2,0(r2)
 8001e8c:	00c00304 	movi	r3,12
 8001e90:	10c00615 	stw	r3,24(r2)
 8001e94:	00002006 	br	8001f18 <Graphics_GetNumberPressed+0x1e4>
			} else {
				numpad[i]->colour = GRAY;
 8001e98:	008200b4 	movhi	r2,2050
 8001e9c:	109bd504 	addi	r2,r2,28500
 8001ea0:	e0fff917 	ldw	r3,-28(fp)
 8001ea4:	18c7883a 	add	r3,r3,r3
 8001ea8:	18c7883a 	add	r3,r3,r3
 8001eac:	10c5883a 	add	r2,r2,r3
 8001eb0:	10800017 	ldw	r2,0(r2)
 8001eb4:	00c00244 	movi	r3,9
 8001eb8:	10c00615 	stw	r3,24(r2)

				// Increment since we've drawn a character
				if(graphics_field_cursor < codeLength) {
 8001ebc:	d0e6dc17 	ldw	r3,-25744(gp)
 8001ec0:	e0bffd17 	ldw	r2,-12(fp)
 8001ec4:	1880140e 	bge	r3,r2,8001f18 <Graphics_GetNumberPressed+0x1e4>
					//Graphics_DrawSquare(graphics_field_cursor,BLACK);
					array[graphics_field_cursor] = Graphics_ButtonNumToNum(i);
 8001ec8:	d0a6dc17 	ldw	r2,-25744(gp)
 8001ecc:	1085883a 	add	r2,r2,r2
 8001ed0:	1085883a 	add	r2,r2,r2
 8001ed4:	1007883a 	mov	r3,r2
 8001ed8:	e0bffe17 	ldw	r2,-8(fp)
 8001edc:	10e1883a 	add	r16,r2,r3
 8001ee0:	e13ff917 	ldw	r4,-28(fp)
 8001ee4:	8001f780 	call	8001f78 <Graphics_ButtonNumToNum>
 8001ee8:	80800015 	stw	r2,0(r16)
					Graphics_DrawUserEnteredDigit(graphics_field_cursor, Graphics_ButtonNumToNum(i), BLACK, codeIndexLength);
 8001eec:	d426dc17 	ldw	r16,-25744(gp)
 8001ef0:	e13ff917 	ldw	r4,-28(fp)
 8001ef4:	8001f780 	call	8001f78 <Graphics_ButtonNumToNum>
 8001ef8:	8009883a 	mov	r4,r16
 8001efc:	100b883a 	mov	r5,r2
 8001f00:	000d883a 	mov	r6,zero
 8001f04:	e1c00217 	ldw	r7,8(fp)
 8001f08:	8001c7c0 	call	8001c7c <Graphics_DrawUserEnteredDigit>
					graphics_field_cursor++;
 8001f0c:	d0a6dc17 	ldw	r2,-25744(gp)
 8001f10:	10800044 	addi	r2,r2,1
 8001f14:	d0a6dc15 	stw	r2,-25744(gp)
				}
			}
			Graphics_DrawRectangle(numpad[i]);
 8001f18:	008200b4 	movhi	r2,2050
 8001f1c:	109bd504 	addi	r2,r2,28500
 8001f20:	e0fff917 	ldw	r3,-28(fp)
 8001f24:	18c7883a 	add	r3,r3,r3
 8001f28:	18c7883a 	add	r3,r3,r3
 8001f2c:	10c5883a 	add	r2,r2,r3
 8001f30:	10800017 	ldw	r2,0(r2)
 8001f34:	1009883a 	mov	r4,r2
 8001f38:	8000a8c0 	call	8000a8c <Graphics_DrawRectangle>

			return i;
 8001f3c:	e0bff917 	ldw	r2,-28(fp)
 8001f40:	00000706 	br	8001f60 <Graphics_GetNumberPressed+0x22c>
/*
 * Get the index of the number pressed on the number pad, indices range from 0 to 11.
 */
int Graphics_GetNumberPressed(int point_x, int point_y, int codeLength, int array[], int codeIndexLength) {
	int i;
	for(i = 0; i < NUMPAD_SIZE; i++){
 8001f44:	e0bff917 	ldw	r2,-28(fp)
 8001f48:	10800044 	addi	r2,r2,1
 8001f4c:	e0bff915 	stw	r2,-28(fp)
 8001f50:	e0bff917 	ldw	r2,-28(fp)
 8001f54:	10800310 	cmplti	r2,r2,12
 8001f58:	103f811e 	bne	r2,zero,8001d60 <__alt_data_end+0xfc001d60>
			Graphics_DrawRectangle(numpad[i]);

			return i;
		}
	}
	return -1;
 8001f5c:	00bfffc4 	movi	r2,-1
}
 8001f60:	e6ffff04 	addi	sp,fp,-4
 8001f64:	dfc00217 	ldw	ra,8(sp)
 8001f68:	df000117 	ldw	fp,4(sp)
 8001f6c:	dc000017 	ldw	r16,0(sp)
 8001f70:	dec00304 	addi	sp,sp,12
 8001f74:	f800283a 	ret

08001f78 <Graphics_ButtonNumToNum>:

/*****************************************************************************************
 *	Function to convert a button index to it's corresponding number pad number.
 *
 ******************************************************************************************/
int Graphics_ButtonNumToNum(int button) {
 8001f78:	defffd04 	addi	sp,sp,-12
 8001f7c:	df000215 	stw	fp,8(sp)
 8001f80:	df000204 	addi	fp,sp,8
 8001f84:	e13fff15 	stw	r4,-4(fp)
	int num = button + 1;
 8001f88:	e0bfff17 	ldw	r2,-4(fp)
 8001f8c:	10800044 	addi	r2,r2,1
 8001f90:	e0bffe15 	stw	r2,-8(fp)
	if(num == 11)
 8001f94:	e0bffe17 	ldw	r2,-8(fp)
 8001f98:	108002d8 	cmpnei	r2,r2,11
 8001f9c:	1000021e 	bne	r2,zero,8001fa8 <Graphics_ButtonNumToNum+0x30>
		return 0;
 8001fa0:	0005883a 	mov	r2,zero
 8001fa4:	00000106 	br	8001fac <Graphics_ButtonNumToNum+0x34>
	return num;
 8001fa8:	e0bffe17 	ldw	r2,-8(fp)
}
 8001fac:	e037883a 	mov	sp,fp
 8001fb0:	df000017 	ldw	fp,0(sp)
 8001fb4:	dec00104 	addi	sp,sp,4
 8001fb8:	f800283a 	ret

08001fbc <Graphics_InRectangle>:

/**
 * Returns 1 if point inside rect
 */
int Graphics_InRectangle(int point_x, int point_y, Rectangle_t* rect) {
 8001fbc:	defffc04 	addi	sp,sp,-16
 8001fc0:	df000315 	stw	fp,12(sp)
 8001fc4:	df000304 	addi	fp,sp,12
 8001fc8:	e13ffd15 	stw	r4,-12(fp)
 8001fcc:	e17ffe15 	stw	r5,-8(fp)
 8001fd0:	e1bfff15 	stw	r6,-4(fp)
	return point_x < rect->x2 && point_x > rect->x1 && point_y < rect->y2 && point_y > rect->y1;
 8001fd4:	e0bfff17 	ldw	r2,-4(fp)
 8001fd8:	10800117 	ldw	r2,4(r2)
 8001fdc:	e0fffd17 	ldw	r3,-12(fp)
 8001fe0:	18800e0e 	bge	r3,r2,800201c <Graphics_InRectangle+0x60>
 8001fe4:	e0bfff17 	ldw	r2,-4(fp)
 8001fe8:	10c00017 	ldw	r3,0(r2)
 8001fec:	e0bffd17 	ldw	r2,-12(fp)
 8001ff0:	18800a0e 	bge	r3,r2,800201c <Graphics_InRectangle+0x60>
 8001ff4:	e0bfff17 	ldw	r2,-4(fp)
 8001ff8:	10800317 	ldw	r2,12(r2)
 8001ffc:	e0fffe17 	ldw	r3,-8(fp)
 8002000:	1880060e 	bge	r3,r2,800201c <Graphics_InRectangle+0x60>
 8002004:	e0bfff17 	ldw	r2,-4(fp)
 8002008:	10c00217 	ldw	r3,8(r2)
 800200c:	e0bffe17 	ldw	r2,-8(fp)
 8002010:	1880020e 	bge	r3,r2,800201c <Graphics_InRectangle+0x60>
 8002014:	00800044 	movi	r2,1
 8002018:	00000106 	br	8002020 <Graphics_InRectangle+0x64>
 800201c:	0005883a 	mov	r2,zero
}
 8002020:	e037883a 	mov	sp,fp
 8002024:	df000017 	ldw	fp,0(sp)
 8002028:	dec00104 	addi	sp,sp,4
 800202c:	f800283a 	ret

08002030 <Graphics_RectangleTouched>:

/**
 * Returns 1 if point inside request code rect
 */
int Graphics_RectangleTouched(int point_x, int point_y, Rectangle_t *rect) {
 8002030:	defff904 	addi	sp,sp,-28
 8002034:	dfc00615 	stw	ra,24(sp)
 8002038:	df000515 	stw	fp,20(sp)
 800203c:	df000504 	addi	fp,sp,20
 8002040:	e13ffd15 	stw	r4,-12(fp)
 8002044:	e17ffe15 	stw	r5,-8(fp)
 8002048:	e1bfff15 	stw	r6,-4(fp)
	int isTouched = Graphics_InRectangle(point_x,point_y,rect);
 800204c:	e13ffd17 	ldw	r4,-12(fp)
 8002050:	e17ffe17 	ldw	r5,-8(fp)
 8002054:	e1bfff17 	ldw	r6,-4(fp)
 8002058:	8001fbc0 	call	8001fbc <Graphics_InRectangle>
 800205c:	e0bffb15 	stw	r2,-20(fp)
	int originalColour = rect->colour;
 8002060:	e0bfff17 	ldw	r2,-4(fp)
 8002064:	10800617 	ldw	r2,24(r2)
 8002068:	e0bffc15 	stw	r2,-16(fp)
	if(isTouched) {
 800206c:	e0bffb17 	ldw	r2,-20(fp)
 8002070:	10000b26 	beq	r2,zero,80020a0 <Graphics_RectangleTouched+0x70>
		rect->colour = BLACK;
 8002074:	e0bfff17 	ldw	r2,-4(fp)
 8002078:	10000615 	stw	zero,24(r2)
		Graphics_DrawRectangle(rect);
 800207c:	e13fff17 	ldw	r4,-4(fp)
 8002080:	8000a8c0 	call	8000a8c <Graphics_DrawRectangle>
		usleep(50000);
 8002084:	0130d414 	movui	r4,50000
 8002088:	80165880 	call	8016588 <usleep>
		rect->colour = originalColour;
 800208c:	e0bfff17 	ldw	r2,-4(fp)
 8002090:	e0fffc17 	ldw	r3,-16(fp)
 8002094:	10c00615 	stw	r3,24(r2)
		Graphics_DrawRectangle(rect);
 8002098:	e13fff17 	ldw	r4,-4(fp)
 800209c:	8000a8c0 	call	8000a8c <Graphics_DrawRectangle>
	}
	return isTouched;
 80020a0:	e0bffb17 	ldw	r2,-20(fp)
}
 80020a4:	e037883a 	mov	sp,fp
 80020a8:	dfc00117 	ldw	ra,4(sp)
 80020ac:	df000017 	ldw	fp,0(sp)
 80020b0:	dec00204 	addi	sp,sp,8
 80020b4:	f800283a 	ret

080020b8 <Graphics_AreaRect>:

/**
 * Returns the rough area of a rectangle given top left (x1,y1) and bottom right (x2,y2)
 */
float Graphics_AreaRect(Rectangle_t* rect) {
 80020b8:	defff504 	addi	sp,sp,-44
 80020bc:	dfc00a15 	stw	ra,40(sp)
 80020c0:	df000915 	stw	fp,36(sp)
 80020c4:	dc800815 	stw	r18,32(sp)
 80020c8:	dc400715 	stw	r17,28(sp)
 80020cc:	dc000615 	stw	r16,24(sp)
 80020d0:	df000904 	addi	fp,sp,36
 80020d4:	e13ffc15 	stw	r4,-16(fp)
	int x1 = rect->x1;
 80020d8:	e0bffc17 	ldw	r2,-16(fp)
 80020dc:	10800017 	ldw	r2,0(r2)
 80020e0:	e0bff715 	stw	r2,-36(fp)
	int y1 = rect->y1;
 80020e4:	e0bffc17 	ldw	r2,-16(fp)
 80020e8:	10800217 	ldw	r2,8(r2)
 80020ec:	e0bff815 	stw	r2,-32(fp)
	int x2 = rect->x2;
 80020f0:	e0bffc17 	ldw	r2,-16(fp)
 80020f4:	10800117 	ldw	r2,4(r2)
 80020f8:	e0bff915 	stw	r2,-28(fp)
	int y2 = rect->y2;
 80020fc:	e0bffc17 	ldw	r2,-16(fp)
 8002100:	10800317 	ldw	r2,12(r2)
 8002104:	e0bffa15 	stw	r2,-24(fp)

	float area = (y2 - y1)*(x2-x1) + (y1-y2)*(x1-x2);
 8002108:	e0fffa17 	ldw	r3,-24(fp)
 800210c:	e0bff817 	ldw	r2,-32(fp)
 8002110:	1889c83a 	sub	r4,r3,r2
 8002114:	e0fff917 	ldw	r3,-28(fp)
 8002118:	e0bff717 	ldw	r2,-36(fp)
 800211c:	1885c83a 	sub	r2,r3,r2
 8002120:	100b883a 	mov	r5,r2
 8002124:	8004c100 	call	8004c10 <__mulsi3>
 8002128:	1025883a 	mov	r18,r2
 800212c:	e0fff817 	ldw	r3,-32(fp)
 8002130:	e0bffa17 	ldw	r2,-24(fp)
 8002134:	1889c83a 	sub	r4,r3,r2
 8002138:	e0fff717 	ldw	r3,-36(fp)
 800213c:	e0bff917 	ldw	r2,-28(fp)
 8002140:	1885c83a 	sub	r2,r3,r2
 8002144:	100b883a 	mov	r5,r2
 8002148:	8004c100 	call	8004c10 <__mulsi3>
 800214c:	9085883a 	add	r2,r18,r2
 8002150:	1009883a 	mov	r4,r2
 8002154:	80051400 	call	8005140 <__floatsisf>
 8002158:	1007883a 	mov	r3,r2
 800215c:	e0fffb15 	stw	r3,-20(fp)
	area = area < 0.0 ? area * -1.0 : area;
 8002160:	e13ffb17 	ldw	r4,-20(fp)
 8002164:	000b883a 	mov	r5,zero
 8002168:	8004c380 	call	8004c38 <__lesf2>
 800216c:	10000b0e 	bge	r2,zero,800219c <Graphics_AreaRect+0xe4>
 8002170:	e13ffb17 	ldw	r4,-20(fp)
 8002174:	800665c0 	call	800665c <__extendsfdf2>
 8002178:	1009883a 	mov	r4,r2
 800217c:	180b883a 	mov	r5,r3
 8002180:	2021883a 	mov	r16,r4
 8002184:	2c60003c 	xorhi	r17,r5,32768
 8002188:	8009883a 	mov	r4,r16
 800218c:	880b883a 	mov	r5,r17
 8002190:	800676c0 	call	800676c <__truncdfsf2>
 8002194:	1007883a 	mov	r3,r2
 8002198:	00000106 	br	80021a0 <Graphics_AreaRect+0xe8>
 800219c:	e0fffb17 	ldw	r3,-20(fp)
 80021a0:	e0fffb15 	stw	r3,-20(fp)
	area = 1.0/2.0 * area;
 80021a4:	e13ffb17 	ldw	r4,-20(fp)
 80021a8:	014fc034 	movhi	r5,16128
 80021ac:	8004cf00 	call	8004cf0 <__mulsf3>
 80021b0:	1007883a 	mov	r3,r2
 80021b4:	e0fffb15 	stw	r3,-20(fp)
	return area;
 80021b8:	e0bffb17 	ldw	r2,-20(fp)
 80021bc:	1007883a 	mov	r3,r2
}
 80021c0:	1805883a 	mov	r2,r3
 80021c4:	e6fffd04 	addi	sp,fp,-12
 80021c8:	dfc00417 	ldw	ra,16(sp)
 80021cc:	df000317 	ldw	fp,12(sp)
 80021d0:	dc800217 	ldw	r18,8(sp)
 80021d4:	dc400117 	ldw	r17,4(sp)
 80021d8:	dc000017 	ldw	r16,0(sp)
 80021dc:	dec00504 	addi	sp,sp,20
 80021e0:	f800283a 	ret

080021e4 <Graphics_AreaTriangle>:

/**
 * Returns the rough area of a rectangle triangle given 3 points
 */
float Graphics_AreaTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {
 80021e4:	defff804 	addi	sp,sp,-32
 80021e8:	dfc00715 	stw	ra,28(sp)
 80021ec:	df000615 	stw	fp,24(sp)
 80021f0:	dc000515 	stw	r16,20(sp)
 80021f4:	df000604 	addi	fp,sp,24
 80021f8:	e13ffb15 	stw	r4,-20(fp)
 80021fc:	e17ffc15 	stw	r5,-16(fp)
 8002200:	e1bffd15 	stw	r6,-12(fp)
 8002204:	e1fffe15 	stw	r7,-8(fp)
	int area = 1.0/2.0 * (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));
 8002208:	e0fffe17 	ldw	r3,-8(fp)
 800220c:	e0800317 	ldw	r2,12(fp)
 8002210:	1885c83a 	sub	r2,r3,r2
 8002214:	1009883a 	mov	r4,r2
 8002218:	e17ffb17 	ldw	r5,-20(fp)
 800221c:	8004c100 	call	8004c10 <__mulsi3>
 8002220:	1021883a 	mov	r16,r2
 8002224:	e0c00317 	ldw	r3,12(fp)
 8002228:	e0bffc17 	ldw	r2,-16(fp)
 800222c:	1885c83a 	sub	r2,r3,r2
 8002230:	1009883a 	mov	r4,r2
 8002234:	e17ffd17 	ldw	r5,-12(fp)
 8002238:	8004c100 	call	8004c10 <__mulsi3>
 800223c:	80a1883a 	add	r16,r16,r2
 8002240:	e0fffc17 	ldw	r3,-16(fp)
 8002244:	e0bffe17 	ldw	r2,-8(fp)
 8002248:	1885c83a 	sub	r2,r3,r2
 800224c:	1009883a 	mov	r4,r2
 8002250:	e1400217 	ldw	r5,8(fp)
 8002254:	8004c100 	call	8004c10 <__mulsi3>
 8002258:	8085883a 	add	r2,r16,r2
 800225c:	1009883a 	mov	r4,r2
 8002260:	80064e80 	call	80064e8 <__floatsidf>
 8002264:	100b883a 	mov	r5,r2
 8002268:	180d883a 	mov	r6,r3
 800226c:	2809883a 	mov	r4,r5
 8002270:	300b883a 	mov	r5,r6
 8002274:	000d883a 	mov	r6,zero
 8002278:	01cff834 	movhi	r7,16352
 800227c:	8005bf40 	call	8005bf4 <__muldf3>
 8002280:	1009883a 	mov	r4,r2
 8002284:	180b883a 	mov	r5,r3
 8002288:	2005883a 	mov	r2,r4
 800228c:	2807883a 	mov	r3,r5
 8002290:	1009883a 	mov	r4,r2
 8002294:	180b883a 	mov	r5,r3
 8002298:	80064600 	call	8006460 <__fixdfsi>
 800229c:	e0bffa15 	stw	r2,-24(fp)
	area = area < 0 ? area * -1 : area;
 80022a0:	e0bffa17 	ldw	r2,-24(fp)
 80022a4:	1000010e 	bge	r2,zero,80022ac <Graphics_AreaTriangle+0xc8>
 80022a8:	0085c83a 	sub	r2,zero,r2
 80022ac:	e0bffa15 	stw	r2,-24(fp)
	return area;
 80022b0:	e13ffa17 	ldw	r4,-24(fp)
 80022b4:	80051400 	call	8005140 <__floatsisf>
 80022b8:	1007883a 	mov	r3,r2
 80022bc:	1805883a 	mov	r2,r3
}
 80022c0:	e6ffff04 	addi	sp,fp,-4
 80022c4:	dfc00217 	ldw	ra,8(sp)
 80022c8:	df000117 	ldw	fp,4(sp)
 80022cc:	dc000017 	ldw	r16,0(sp)
 80022d0:	dec00304 	addi	sp,sp,12
 80022d4:	f800283a 	ret

080022d8 <Graphics_InitializeRectangleCentered>:

Rectangle_t* Graphics_InitializeRectangleCentered(int xLength, int yPos, int yLength, int xBoundLeft, int xBoundRight, int colour, char *text){
 80022d8:	defff504 	addi	sp,sp,-44
 80022dc:	dfc00a15 	stw	ra,40(sp)
 80022e0:	df000915 	stw	fp,36(sp)
 80022e4:	df000904 	addi	fp,sp,36
 80022e8:	e13ffc15 	stw	r4,-16(fp)
 80022ec:	e17ffd15 	stw	r5,-12(fp)
 80022f0:	e1bffe15 	stw	r6,-8(fp)
 80022f4:	e1ffff15 	stw	r7,-4(fp)
	int xPos =	xBoundLeft + (xBoundRight - xLength - xBoundLeft) / 2;
 80022f8:	e0c00217 	ldw	r3,8(fp)
 80022fc:	e0bffc17 	ldw	r2,-16(fp)
 8002300:	1887c83a 	sub	r3,r3,r2
 8002304:	e0bfff17 	ldw	r2,-4(fp)
 8002308:	1885c83a 	sub	r2,r3,r2
 800230c:	1006d7fa 	srli	r3,r2,31
 8002310:	1885883a 	add	r2,r3,r2
 8002314:	1005d07a 	srai	r2,r2,1
 8002318:	1007883a 	mov	r3,r2
 800231c:	e0bfff17 	ldw	r2,-4(fp)
 8002320:	1885883a 	add	r2,r3,r2
 8002324:	e0bffa15 	stw	r2,-24(fp)
	Rectangle_t *rect = Graphics_Init_Rectangle(xPos, yPos, xPos + xLength, yPos + yLength, colour, REGULAR_BUTTON, text);
 8002328:	e0fffa17 	ldw	r3,-24(fp)
 800232c:	e0bffc17 	ldw	r2,-16(fp)
 8002330:	188d883a 	add	r6,r3,r2
 8002334:	e0fffd17 	ldw	r3,-12(fp)
 8002338:	e0bffe17 	ldw	r2,-8(fp)
 800233c:	1887883a 	add	r3,r3,r2
 8002340:	e0800317 	ldw	r2,12(fp)
 8002344:	d8800015 	stw	r2,0(sp)
 8002348:	d8000115 	stw	zero,4(sp)
 800234c:	e0800417 	ldw	r2,16(fp)
 8002350:	d8800215 	stw	r2,8(sp)
 8002354:	e13ffa17 	ldw	r4,-24(fp)
 8002358:	e17ffd17 	ldw	r5,-12(fp)
 800235c:	180f883a 	mov	r7,r3
 8002360:	8000dc80 	call	8000dc8 <Graphics_Init_Rectangle>
 8002364:	e0bffb15 	stw	r2,-20(fp)
	return rect;
 8002368:	e0bffb17 	ldw	r2,-20(fp)
}
 800236c:	e037883a 	mov	sp,fp
 8002370:	dfc00117 	ldw	ra,4(sp)
 8002374:	df000017 	ldw	fp,0(sp)
 8002378:	dec00204 	addi	sp,sp,8
 800237c:	f800283a 	ret

08002380 <Keys_GetValue>:
 *      Author: r3z9a
 */

#include "keys.h"

uint8_t Keys_GetValue() {
 8002380:	deffff04 	addi	sp,sp,-4
 8002384:	df000015 	stw	fp,0(sp)
 8002388:	d839883a 	mov	fp,sp
	return Keys_Base;
 800238c:	00881804 	movi	r2,8288
 8002390:	10800003 	ldbu	r2,0(r2)
}
 8002394:	e037883a 	mov	sp,fp
 8002398:	df000017 	ldw	fp,0(sp)
 800239c:	dec00104 	addi	sp,sp,4
 80023a0:	f800283a 	ret

080023a4 <Leds_WriteVal>:
#include <stdint.h>
#include <stdlib.h>

#include "leds.h"

void Leds_WriteVal(uint8_t val) {
 80023a4:	defffe04 	addi	sp,sp,-8
 80023a8:	df000115 	stw	fp,4(sp)
 80023ac:	df000104 	addi	fp,sp,4
 80023b0:	2005883a 	mov	r2,r4
 80023b4:	e0bfff05 	stb	r2,-4(fp)
	Leds_Base = val;
 80023b8:	00880404 	movi	r2,8208
 80023bc:	e0ffff03 	ldbu	r3,-4(fp)
 80023c0:	10c00005 	stb	r3,0(r2)
}
 80023c4:	e037883a 	mov	sp,fp
 80023c8:	df000017 	ldw	fp,0(sp)
 80023cc:	dec00104 	addi	sp,sp,4
 80023d0:	f800283a 	ret

080023d4 <Leds_Celebrate>:

void Leds_Celebrate() {
 80023d4:	defffd04 	addi	sp,sp,-12
 80023d8:	dfc00215 	stw	ra,8(sp)
 80023dc:	df000115 	stw	fp,4(sp)
 80023e0:	df000104 	addi	fp,sp,4
	int i = 0;
 80023e4:	e03fff15 	stw	zero,-4(fp)
	for(i=0;i<1024;i++) {
 80023e8:	e03fff15 	stw	zero,-4(fp)
 80023ec:	00000e06 	br	8002428 <Leds_Celebrate+0x54>
		Leds_Base = 0xff;
 80023f0:	00880404 	movi	r2,8208
 80023f4:	00ffffc4 	movi	r3,-1
 80023f8:	10c00005 	stb	r3,0(r2)
		usleep(100000);
 80023fc:	010000b4 	movhi	r4,2
 8002400:	2121a804 	addi	r4,r4,-31072
 8002404:	80165880 	call	8016588 <usleep>
		Leds_Base = 0x00;
 8002408:	00880404 	movi	r2,8208
 800240c:	10000005 	stb	zero,0(r2)
		usleep(100000);
 8002410:	010000b4 	movhi	r4,2
 8002414:	2121a804 	addi	r4,r4,-31072
 8002418:	80165880 	call	8016588 <usleep>
	Leds_Base = val;
}

void Leds_Celebrate() {
	int i = 0;
	for(i=0;i<1024;i++) {
 800241c:	e0bfff17 	ldw	r2,-4(fp)
 8002420:	10800044 	addi	r2,r2,1
 8002424:	e0bfff15 	stw	r2,-4(fp)
 8002428:	e0bfff17 	ldw	r2,-4(fp)
 800242c:	10810010 	cmplti	r2,r2,1024
 8002430:	103fef1e 	bne	r2,zero,80023f0 <__alt_data_end+0xfc0023f0>
		usleep(100000);
		Leds_Base = 0x00;
		usleep(100000);
	}

	for(;i<1024;i++) {
 8002434:	00000906 	br	800245c <Leds_Celebrate+0x88>
		Leds_Base = i;
 8002438:	00880404 	movi	r2,8208
 800243c:	e0ffff17 	ldw	r3,-4(fp)
 8002440:	10c00005 	stb	r3,0(r2)
		usleep(100000);
 8002444:	010000b4 	movhi	r4,2
 8002448:	2121a804 	addi	r4,r4,-31072
 800244c:	80165880 	call	8016588 <usleep>
		usleep(100000);
		Leds_Base = 0x00;
		usleep(100000);
	}

	for(;i<1024;i++) {
 8002450:	e0bfff17 	ldw	r2,-4(fp)
 8002454:	10800044 	addi	r2,r2,1
 8002458:	e0bfff15 	stw	r2,-4(fp)
 800245c:	e0bfff17 	ldw	r2,-4(fp)
 8002460:	10810010 	cmplti	r2,r2,1024
 8002464:	103ff41e 	bne	r2,zero,8002438 <__alt_data_end+0xfc002438>
		Leds_Base = i;
		usleep(100000);
	}
}
 8002468:	e037883a 	mov	sp,fp
 800246c:	dfc00117 	ldw	ra,4(sp)
 8002470:	df000017 	ldw	fp,0(sp)
 8002474:	dec00204 	addi	sp,sp,8
 8002478:	f800283a 	ret

0800247c <main>:
//#define STATE_DRAW_UNLOCK_SCREEN	12
//#define STATE_UNLOCK_SCREEN			13
//#define STATE_IDLE					14
//#define STATE_USER_PHONENUM			15

int main() {
 800247c:	deffef04 	addi	sp,sp,-68
 8002480:	dfc01015 	stw	ra,64(sp)
 8002484:	df000f15 	stw	fp,60(sp)
 8002488:	df000f04 	addi	fp,sp,60
	printf("Starting Program\n");
 800248c:	010200b4 	movhi	r4,2050
 8002490:	210bbf04 	addi	r4,r4,12028
 8002494:	80073900 	call	8007390 <puts>

	// Initialize Hardware
	Wifi_Init();
 8002498:	80040580 	call	8004058 <Wifi_Init>
	TS_Init();
 800249c:	80039f00 	call	80039f0 <TS_Init>
	Graphics_Initialize();
 80024a0:	80006500 	call	8000650 <Graphics_Initialize>

	int State = STATE_DRAW_INIT_SCREEN;
 80024a4:	00800044 	movi	r2,1
 80024a8:	e0bff815 	stw	r2,-32(fp)
	int isInitialized = 0;
 80024ac:	e03ff915 	stw	zero,-28(fp)
	int button;
	int isConfirmed = 0;
 80024b0:	e03ffa15 	stw	zero,-24(fp)
	int approved;

	/**
	 * Send the wifi command
	 */
	Wifi_SendCommand("dofile(\"system.lua\")\r\n");
 80024b4:	010200b4 	movhi	r4,2050
 80024b8:	210bc404 	addi	r4,r4,12048
 80024bc:	800444c0 	call	800444c <Wifi_SendCommand>
	Wifi_ReadResponse();
 80024c0:	80040f00 	call	80040f0 <Wifi_ReadResponse>

	printf("File Loaded\n");
 80024c4:	010200b4 	movhi	r4,2050
 80024c8:	210bca04 	addi	r4,r4,12072
 80024cc:	80073900 	call	8007390 <puts>
	usleep(500000);
 80024d0:	01000234 	movhi	r4,8
 80024d4:	21284804 	addi	r4,r4,-24288
 80024d8:	80165880 	call	8016588 <usleep>

	// Ensure we are connected to wifi
	Wifi_EnsureConnection();
 80024dc:	800428c0 	call	800428c <Wifi_EnsureConnection>

	printf("Wifi Connected!\n");
 80024e0:	010200b4 	movhi	r4,2050
 80024e4:	210bcd04 	addi	r4,r4,12084
 80024e8:	80073900 	call	8007390 <puts>
	usleep(500000);
 80024ec:	01000234 	movhi	r4,8
 80024f0:	21284804 	addi	r4,r4,-24288
 80024f4:	80165880 	call	8016588 <usleep>

	// Check if the box has been initialized already
	isInitialized = Security_CheckIsRegistered();
 80024f8:	80039800 	call	8003980 <Security_CheckIsRegistered>
 80024fc:	e0bff915 	stw	r2,-28(fp)
	usleep(20000);
 8002500:	01138804 	movi	r4,20000
 8002504:	80165880 	call	8016588 <usleep>

	if (isInitialized)
 8002508:	e0bff917 	ldw	r2,-28(fp)
 800250c:	10000426 	beq	r2,zero,8002520 <main+0xa4>
		printf("Box Already Initialized!\n");
 8002510:	010200b4 	movhi	r4,2050
 8002514:	210bd104 	addi	r4,r4,12100
 8002518:	80073900 	call	8007390 <puts>
 800251c:	00000306 	br	800252c <main+0xb0>
	else
		printf("Box Not Initialized!\n");
 8002520:	010200b4 	movhi	r4,2050
 8002524:	210bd804 	addi	r4,r4,12128
 8002528:	80073900 	call	8007390 <puts>

	Point p;
	while (1) {
		switch (State) {
 800252c:	e0bff817 	ldw	r2,-32(fp)
 8002530:	10800468 	cmpgeui	r2,r2,17
 8002534:	1002661e 	bne	r2,zero,8002ed0 <main+0xa54>
 8002538:	e0bff817 	ldw	r2,-32(fp)
 800253c:	100690ba 	slli	r3,r2,2
 8002540:	00820034 	movhi	r2,2048
 8002544:	10895504 	addi	r2,r2,9556
 8002548:	1885883a 	add	r2,r3,r2
 800254c:	10800017 	ldw	r2,0(r2)
 8002550:	1000683a 	jmp	r2
 8002554:	08002ed0 	cmplti	zero,at,187
 8002558:	08002598 	cmpnei	zero,at,150
 800255c:	080025c0 	call	80025c <__alt_mem_sdram-0x77ffda4>
 8002560:	08002674 	orhi	zero,at,153
 8002564:	080029ac 	andhi	zero,at,166
 8002568:	08002aec 	andhi	zero,at,171
 800256c:	08002b04 	addi	zero,at,172
 8002570:	08002ba4 	muli	zero,at,174
 8002574:	08002b90 	cmplti	zero,at,174
 8002578:	08002cf8 	rdprs	zero,at,179
 800257c:	08002e08 	cmpgei	zero,at,184
 8002580:	08002e18 	cmpnei	zero,at,184
 8002584:	08002e64 	muli	zero,at,185
 8002588:	08002e74 	orhi	zero,at,185
 800258c:	08002ec0 	call	8002ec <__alt_mem_sdram-0x77ffd14>
 8002590:	08002808 	cmpgei	zero,at,160
 8002594:	08002614 	ori	zero,at,152
		case STATE_DRAW_INIT_SCREEN:
			if (isInitialized) {
 8002598:	e0bff917 	ldw	r2,-28(fp)
 800259c:	10000426 	beq	r2,zero,80025b0 <main+0x134>
				Graphics_DrawWelcomeScreen();
 80025a0:	80011300 	call	8001130 <Graphics_DrawWelcomeScreen>
				State = STATE_SIGN_IN;
 80025a4:	00800184 	movi	r2,6
 80025a8:	e0bff815 	stw	r2,-32(fp)
			} else {
				Graphics_DrawInitializationScreen();
				State = STATE_SIGN_UP;
			}
			break;
 80025ac:	00025206 	br	8002ef8 <main+0xa7c>
		case STATE_DRAW_INIT_SCREEN:
			if (isInitialized) {
				Graphics_DrawWelcomeScreen();
				State = STATE_SIGN_IN;
			} else {
				Graphics_DrawInitializationScreen();
 80025b0:	8000fa00 	call	8000fa0 <Graphics_DrawInitializationScreen>
				State = STATE_SIGN_UP;
 80025b4:	00800084 	movi	r2,2
 80025b8:	e0bff815 	stw	r2,-32(fp)
			}
			break;
 80025bc:	00024e06 	br	8002ef8 <main+0xa7c>
			/**
			 * This state draws the sign up screen
			 */
		case STATE_SIGN_UP:
			TS_WaitForRelease();
 80025c0:	8003b000 	call	8003b00 <TS_WaitForRelease>
			p = TS_GetRelease();
 80025c4:	8003d8c0 	call	8003d8c <TS_GetRelease>
 80025c8:	1009883a 	mov	r4,r2
 80025cc:	180b883a 	mov	r5,r3
 80025d0:	e13ffe15 	stw	r4,-8(fp)
 80025d4:	e17fff15 	stw	r5,-4(fp)
			if (Graphics_RectangleTouched(p.x, p.y, sign_up_rect)) {
 80025d8:	e13ffe17 	ldw	r4,-8(fp)
 80025dc:	e0ffff17 	ldw	r3,-4(fp)
 80025e0:	d0a6da17 	ldw	r2,-25752(gp)
 80025e4:	180b883a 	mov	r5,r3
 80025e8:	100d883a 	mov	r6,r2
 80025ec:	80020300 	call	8002030 <Graphics_RectangleTouched>
 80025f0:	10000526 	beq	r2,zero,8002608 <main+0x18c>
				Graphics_DrawPhoneNumberMenu();
 80025f4:	80013400 	call	8001340 <Graphics_DrawPhoneNumberMenu>
				graphics_field_cursor = 0;
 80025f8:	d026dc15 	stw	zero,-25744(gp)
				State = STATE_OWNER_PHONENUM;
 80025fc:	008000c4 	movi	r2,3
 8002600:	e0bff815 	stw	r2,-32(fp)
			} else {
				State = STATE_SIGN_UP;
			}
			break;
 8002604:	00023c06 	br	8002ef8 <main+0xa7c>
			if (Graphics_RectangleTouched(p.x, p.y, sign_up_rect)) {
				Graphics_DrawPhoneNumberMenu();
				graphics_field_cursor = 0;
				State = STATE_OWNER_PHONENUM;
			} else {
				State = STATE_SIGN_UP;
 8002608:	00800084 	movi	r2,2
 800260c:	e0bff815 	stw	r2,-32(fp)
			}
			break;
 8002610:	00023906 	br	8002ef8 <main+0xa7c>
			// In this state we wait to get approved once we do we get sent the text message with the temporary code
		case STATE_WAIT_APPROVED:
			approved = Security_WaitApproved();
 8002614:	80037d80 	call	80037d8 <Security_WaitApproved>
 8002618:	e0bffb15 	stw	r2,-20(fp)
			// We loop inside this state
			if (approved) {
 800261c:	e0bffb17 	ldw	r2,-20(fp)
 8002620:	10000626 	beq	r2,zero,800263c <main+0x1c0>
				graphics_field_cursor = 0;
 8002624:	d026dc15 	stw	zero,-25744(gp)
				Graphics_DrawMenu();
 8002628:	800162c0 	call	800162c <Graphics_DrawMenu>
				// Get the values for this device
				//while (Security_ObtainValues() != 0);
				// Send sms to the user with the temporary code
				Security_SendConfirmedSMS();
 800262c:	80036040 	call	8003604 <Security_SendConfirmedSMS>
				// Approved so we go to the num pad
				State = STATE_ENTER_CODE;
 8002630:	00800244 	movi	r2,9
 8002634:	e0bff815 	stw	r2,-32(fp)
				}
				printf("Waiting for approval\n");
				State = STATE_WAIT_APPROVED;
				//waitCounter++;
			}
			break;
 8002638:	00022f06 	br	8002ef8 <main+0xa7c>
				// Send sms to the user with the temporary code
				Security_SendConfirmedSMS();
				// Approved so we go to the num pad
				State = STATE_ENTER_CODE;
			} else {
				if (isConfirmed > 30) {
 800263c:	e0bffa17 	ldw	r2,-24(fp)
 8002640:	108007d0 	cmplti	r2,r2,31
 8002644:	1000031e 	bne	r2,zero,8002654 <main+0x1d8>
					State = STATE_DRAW_INIT_SCREEN;
 8002648:	00800044 	movi	r2,1
 800264c:	e0bff815 	stw	r2,-32(fp)
					break;
 8002650:	00022906 	br	8002ef8 <main+0xa7c>
				} else {
					State = STATE_WAIT_APPROVED;
 8002654:	00800404 	movi	r2,16
 8002658:	e0bff815 	stw	r2,-32(fp)
				}
				printf("Waiting for approval\n");
 800265c:	010200b4 	movhi	r4,2050
 8002660:	210bde04 	addi	r4,r4,12152
 8002664:	80073900 	call	8007390 <puts>
				State = STATE_WAIT_APPROVED;
 8002668:	00800404 	movi	r2,16
 800266c:	e0bff815 	stw	r2,-32(fp)
				//waitCounter++;
			}
			break;
 8002670:	00022106 	br	8002ef8 <main+0xa7c>
			// This state handles the owner registering their phone number
		case STATE_OWNER_PHONENUM:
			TS_WaitForRelease();
 8002674:	8003b000 	call	8003b00 <TS_WaitForRelease>
			p = TS_GetRelease();
 8002678:	8003d8c0 	call	8003d8c <TS_GetRelease>
 800267c:	1009883a 	mov	r4,r2
 8002680:	180b883a 	mov	r5,r3
 8002684:	e13ffe15 	stw	r4,-8(fp)
 8002688:	e17fff15 	stw	r5,-4(fp)
			button = Graphics_GetNumberPressed(p.x, p.y, PHONENUMLENGTH,
 800268c:	e13ffe17 	ldw	r4,-8(fp)
 8002690:	e0ffff17 	ldw	r3,-4(fp)
 8002694:	00800a44 	movi	r2,41
 8002698:	d8800015 	stw	r2,0(sp)
 800269c:	180b883a 	mov	r5,r3
 80026a0:	01800284 	movi	r6,10
 80026a4:	01c200b4 	movhi	r7,2050
 80026a8:	39dbe104 	addi	r7,r7,28548
 80026ac:	8001d340 	call	8001d34 <Graphics_GetNumberPressed>
 80026b0:	e0bffc15 	stw	r2,-16(fp)
					Master_Phone_Number, PHONEINDEXLEN);
			if (button == NUMPAD_ENTER
 80026b4:	e0bffc17 	ldw	r2,-16(fp)
 80026b8:	10800258 	cmpnei	r2,r2,9
 80026bc:	1000081e 	bne	r2,zero,80026e0 <main+0x264>
					&& graphics_field_cursor == PHONENUMLENGTH) {
 80026c0:	d0a6dc17 	ldw	r2,-25744(gp)
 80026c4:	10800298 	cmpnei	r2,r2,10
 80026c8:	1000051e 	bne	r2,zero,80026e0 <main+0x264>
				Graphics_DrawMasterCodeMenu();
 80026cc:	80014100 	call	8001410 <Graphics_DrawMasterCodeMenu>
				graphics_field_cursor = 0;
 80026d0:	d026dc15 	stw	zero,-25744(gp)
				State = STATE_OWNER_MASTERCODE;
 80026d4:	00800104 	movi	r2,4
 80026d8:	e0bff815 	stw	r2,-32(fp)
 80026dc:	00000c06 	br	8002710 <main+0x294>
			}
			else if (Graphics_RectangleTouched(p.x, p.y, home_button_rect)) {
 80026e0:	e13ffe17 	ldw	r4,-8(fp)
 80026e4:	e0ffff17 	ldw	r3,-4(fp)
 80026e8:	d0a6d817 	ldw	r2,-25760(gp)
 80026ec:	180b883a 	mov	r5,r3
 80026f0:	100d883a 	mov	r6,r2
 80026f4:	80020300 	call	8002030 <Graphics_RectangleTouched>
 80026f8:	10000326 	beq	r2,zero,8002708 <main+0x28c>
				State = STATE_DRAW_INIT_SCREEN;
 80026fc:	00800044 	movi	r2,1
 8002700:	e0bff815 	stw	r2,-32(fp)
 8002704:	00000206 	br	8002710 <main+0x294>
			}
			else {
				State = STATE_OWNER_PHONENUM;
 8002708:	008000c4 	movi	r2,3
 800270c:	e0bff815 	stw	r2,-32(fp)
			}
			printf("Coords: %d, %d\n", p.x, p.y);
 8002710:	e0fffe17 	ldw	r3,-8(fp)
 8002714:	e0bfff17 	ldw	r2,-4(fp)
 8002718:	010200b4 	movhi	r4,2050
 800271c:	210be404 	addi	r4,r4,12176
 8002720:	180b883a 	mov	r5,r3
 8002724:	100d883a 	mov	r6,r2
 8002728:	800729c0 	call	800729c <printf>
			printf("Button num: %d\n", Graphics_ButtonNumToNum(button));
 800272c:	e13ffc17 	ldw	r4,-16(fp)
 8002730:	8001f780 	call	8001f78 <Graphics_ButtonNumToNum>
 8002734:	010200b4 	movhi	r4,2050
 8002738:	210be804 	addi	r4,r4,12192
 800273c:	100b883a 	mov	r5,r2
 8002740:	800729c0 	call	800729c <printf>
			printf("Phone Number: %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8002744:	008200b4 	movhi	r2,2050
 8002748:	109be104 	addi	r2,r2,28548
 800274c:	12c00017 	ldw	r11,0(r2)
 8002750:	008200b4 	movhi	r2,2050
 8002754:	109be104 	addi	r2,r2,28548
 8002758:	12800117 	ldw	r10,4(r2)
 800275c:	008200b4 	movhi	r2,2050
 8002760:	109be104 	addi	r2,r2,28548
 8002764:	12400217 	ldw	r9,8(r2)
 8002768:	008200b4 	movhi	r2,2050
 800276c:	109be104 	addi	r2,r2,28548
 8002770:	12000317 	ldw	r8,12(r2)
 8002774:	008200b4 	movhi	r2,2050
 8002778:	109be104 	addi	r2,r2,28548
 800277c:	11c00417 	ldw	r7,16(r2)
 8002780:	008200b4 	movhi	r2,2050
 8002784:	109be104 	addi	r2,r2,28548
 8002788:	11800517 	ldw	r6,20(r2)
 800278c:	008200b4 	movhi	r2,2050
 8002790:	109be104 	addi	r2,r2,28548
 8002794:	11400617 	ldw	r5,24(r2)
 8002798:	008200b4 	movhi	r2,2050
 800279c:	109be104 	addi	r2,r2,28548
 80027a0:	11000717 	ldw	r4,28(r2)
 80027a4:	008200b4 	movhi	r2,2050
 80027a8:	109be104 	addi	r2,r2,28548
 80027ac:	10c00817 	ldw	r3,32(r2)
 80027b0:	008200b4 	movhi	r2,2050
 80027b4:	109be104 	addi	r2,r2,28548
 80027b8:	10800917 	ldw	r2,36(r2)
 80027bc:	da000015 	stw	r8,0(sp)
 80027c0:	d9c00115 	stw	r7,4(sp)
 80027c4:	d9800215 	stw	r6,8(sp)
 80027c8:	d9400315 	stw	r5,12(sp)
 80027cc:	d9000415 	stw	r4,16(sp)
 80027d0:	d8c00515 	stw	r3,20(sp)
 80027d4:	d8800615 	stw	r2,24(sp)
 80027d8:	010200b4 	movhi	r4,2050
 80027dc:	210bec04 	addi	r4,r4,12208
 80027e0:	580b883a 	mov	r5,r11
 80027e4:	500d883a 	mov	r6,r10
 80027e8:	480f883a 	mov	r7,r9
 80027ec:	800729c0 	call	800729c <printf>
					Master_Phone_Number[0], Master_Phone_Number[1],
					Master_Phone_Number[2], Master_Phone_Number[3],
					Master_Phone_Number[4], Master_Phone_Number[5],
					Master_Phone_Number[6], Master_Phone_Number[7],
					Master_Phone_Number[8], Master_Phone_Number[9]);
			printf("Cursor length: %d\n", graphics_field_cursor);
 80027f0:	d0a6dc17 	ldw	r2,-25744(gp)
 80027f4:	010200b4 	movhi	r4,2050
 80027f8:	210bf804 	addi	r4,r4,12256
 80027fc:	100b883a 	mov	r5,r2
 8002800:	800729c0 	call	800729c <printf>
			break;
 8002804:	0001bc06 	br	8002ef8 <main+0xa7c>
			/**
			 * This state handles the user registering their phone number
			 */
		case STATE_USER_PHONENUM:
			TS_WaitForRelease();
 8002808:	8003b000 	call	8003b00 <TS_WaitForRelease>
			p = TS_GetRelease();
 800280c:	8003d8c0 	call	8003d8c <TS_GetRelease>
 8002810:	1009883a 	mov	r4,r2
 8002814:	180b883a 	mov	r5,r3
 8002818:	e13ffe15 	stw	r4,-8(fp)
 800281c:	e17fff15 	stw	r5,-4(fp)
			button = Graphics_GetNumberPressed(p.x, p.y, PHONENUMLENGTH,
 8002820:	e13ffe17 	ldw	r4,-8(fp)
 8002824:	e0ffff17 	ldw	r3,-4(fp)
 8002828:	00800a44 	movi	r2,41
 800282c:	d8800015 	stw	r2,0(sp)
 8002830:	180b883a 	mov	r5,r3
 8002834:	01800284 	movi	r6,10
 8002838:	01c200b4 	movhi	r7,2050
 800283c:	39dbeb04 	addi	r7,r7,28588
 8002840:	8001d340 	call	8001d34 <Graphics_GetNumberPressed>
 8002844:	e0bffc15 	stw	r2,-16(fp)
					User_Phone_Number, PHONEINDEXLEN);
			if (button == NUMPAD_ENTER
 8002848:	e0bffc17 	ldw	r2,-16(fp)
 800284c:	10800258 	cmpnei	r2,r2,9
 8002850:	10000c1e 	bne	r2,zero,8002884 <main+0x408>
					&& graphics_field_cursor == PHONENUMLENGTH) {
 8002854:	d0a6dc17 	ldw	r2,-25744(gp)
 8002858:	10800298 	cmpnei	r2,r2,10
 800285c:	1000091e 	bne	r2,zero,8002884 <main+0x408>
				graphics_field_cursor = 0;
 8002860:	d026dc15 	stw	zero,-25744(gp)
				Graphics_DrawMenu();
 8002864:	800162c0 	call	800162c <Graphics_DrawMenu>
				// Get the values for this device
				while (Security_ObtainValues() != 0)
 8002868:	0001883a 	nop
 800286c:	800318c0 	call	800318c <Security_ObtainValues>
 8002870:	103ffe1e 	bne	r2,zero,800286c <__alt_data_end+0xfc00286c>
					;
				// Send sms
				Security_SendSMS();
 8002874:	80034440 	call	8003444 <Security_SendSMS>
				// Go to wait to be approved
				State = STATE_WAIT_APPROVED;
 8002878:	00800404 	movi	r2,16
 800287c:	e0bff815 	stw	r2,-32(fp)
			TS_WaitForRelease();
			p = TS_GetRelease();
			button = Graphics_GetNumberPressed(p.x, p.y, PHONENUMLENGTH,
					User_Phone_Number, PHONEINDEXLEN);
			if (button == NUMPAD_ENTER
					&& graphics_field_cursor == PHONENUMLENGTH) {
 8002880:	00000c06 	br	80028b4 <main+0x438>
				// Send sms
				Security_SendSMS();
				// Go to wait to be approved
				State = STATE_WAIT_APPROVED;
			}
			else if (Graphics_RectangleTouched(p.x, p.y, home_button_rect)) {
 8002884:	e13ffe17 	ldw	r4,-8(fp)
 8002888:	e0ffff17 	ldw	r3,-4(fp)
 800288c:	d0a6d817 	ldw	r2,-25760(gp)
 8002890:	180b883a 	mov	r5,r3
 8002894:	100d883a 	mov	r6,r2
 8002898:	80020300 	call	8002030 <Graphics_RectangleTouched>
 800289c:	10000326 	beq	r2,zero,80028ac <main+0x430>
				State = STATE_DRAW_INIT_SCREEN;
 80028a0:	00800044 	movi	r2,1
 80028a4:	e0bff815 	stw	r2,-32(fp)
 80028a8:	00000206 	br	80028b4 <main+0x438>
			}
			else {
				State = STATE_USER_PHONENUM;
 80028ac:	008003c4 	movi	r2,15
 80028b0:	e0bff815 	stw	r2,-32(fp)
			}
			printf("Coords: %d, %d\n", p.x, p.y);
 80028b4:	e0fffe17 	ldw	r3,-8(fp)
 80028b8:	e0bfff17 	ldw	r2,-4(fp)
 80028bc:	010200b4 	movhi	r4,2050
 80028c0:	210be404 	addi	r4,r4,12176
 80028c4:	180b883a 	mov	r5,r3
 80028c8:	100d883a 	mov	r6,r2
 80028cc:	800729c0 	call	800729c <printf>
			printf("Button num: %d\n", Graphics_ButtonNumToNum(button));
 80028d0:	e13ffc17 	ldw	r4,-16(fp)
 80028d4:	8001f780 	call	8001f78 <Graphics_ButtonNumToNum>
 80028d8:	010200b4 	movhi	r4,2050
 80028dc:	210be804 	addi	r4,r4,12192
 80028e0:	100b883a 	mov	r5,r2
 80028e4:	800729c0 	call	800729c <printf>
			printf("Phone Number: %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 80028e8:	008200b4 	movhi	r2,2050
 80028ec:	109beb04 	addi	r2,r2,28588
 80028f0:	12c00017 	ldw	r11,0(r2)
 80028f4:	008200b4 	movhi	r2,2050
 80028f8:	109beb04 	addi	r2,r2,28588
 80028fc:	12800117 	ldw	r10,4(r2)
 8002900:	008200b4 	movhi	r2,2050
 8002904:	109beb04 	addi	r2,r2,28588
 8002908:	12400217 	ldw	r9,8(r2)
 800290c:	008200b4 	movhi	r2,2050
 8002910:	109beb04 	addi	r2,r2,28588
 8002914:	12000317 	ldw	r8,12(r2)
 8002918:	008200b4 	movhi	r2,2050
 800291c:	109beb04 	addi	r2,r2,28588
 8002920:	11c00417 	ldw	r7,16(r2)
 8002924:	008200b4 	movhi	r2,2050
 8002928:	109beb04 	addi	r2,r2,28588
 800292c:	11800517 	ldw	r6,20(r2)
 8002930:	008200b4 	movhi	r2,2050
 8002934:	109beb04 	addi	r2,r2,28588
 8002938:	11400617 	ldw	r5,24(r2)
 800293c:	008200b4 	movhi	r2,2050
 8002940:	109beb04 	addi	r2,r2,28588
 8002944:	11000717 	ldw	r4,28(r2)
 8002948:	008200b4 	movhi	r2,2050
 800294c:	109beb04 	addi	r2,r2,28588
 8002950:	10c00817 	ldw	r3,32(r2)
 8002954:	008200b4 	movhi	r2,2050
 8002958:	109beb04 	addi	r2,r2,28588
 800295c:	10800917 	ldw	r2,36(r2)
 8002960:	da000015 	stw	r8,0(sp)
 8002964:	d9c00115 	stw	r7,4(sp)
 8002968:	d9800215 	stw	r6,8(sp)
 800296c:	d9400315 	stw	r5,12(sp)
 8002970:	d9000415 	stw	r4,16(sp)
 8002974:	d8c00515 	stw	r3,20(sp)
 8002978:	d8800615 	stw	r2,24(sp)
 800297c:	010200b4 	movhi	r4,2050
 8002980:	210bec04 	addi	r4,r4,12208
 8002984:	580b883a 	mov	r5,r11
 8002988:	500d883a 	mov	r6,r10
 800298c:	480f883a 	mov	r7,r9
 8002990:	800729c0 	call	800729c <printf>
					User_Phone_Number[0], User_Phone_Number[1],
					User_Phone_Number[2], User_Phone_Number[3],
					User_Phone_Number[4], User_Phone_Number[5],
					User_Phone_Number[6], User_Phone_Number[7],
					User_Phone_Number[8], User_Phone_Number[9]);
			printf("Cursor length: %d\n", graphics_field_cursor);
 8002994:	d0a6dc17 	ldw	r2,-25744(gp)
 8002998:	010200b4 	movhi	r4,2050
 800299c:	210bf804 	addi	r4,r4,12256
 80029a0:	100b883a 	mov	r5,r2
 80029a4:	800729c0 	call	800729c <printf>
			break;
 80029a8:	00015306 	br	8002ef8 <main+0xa7c>
			//This state handles the owner typing in their master code
		case STATE_OWNER_MASTERCODE:
			TS_WaitForRelease();
 80029ac:	8003b000 	call	8003b00 <TS_WaitForRelease>
			p = TS_GetRelease();
 80029b0:	8003d8c0 	call	8003d8c <TS_GetRelease>
 80029b4:	1009883a 	mov	r4,r2
 80029b8:	180b883a 	mov	r5,r3
 80029bc:	e13ffe15 	stw	r4,-8(fp)
 80029c0:	e17fff15 	stw	r5,-4(fp)
			button = Graphics_GetNumberPressed(p.x, p.y, MASTERCODELENGTH,
 80029c4:	e13ffe17 	ldw	r4,-8(fp)
 80029c8:	e0ffff17 	ldw	r3,-4(fp)
 80029cc:	00801284 	movi	r2,74
 80029d0:	d8800015 	stw	r2,0(sp)
 80029d4:	180b883a 	mov	r5,r3
 80029d8:	01800184 	movi	r6,6
 80029dc:	01c200b4 	movhi	r7,2050
 80029e0:	39dbfb04 	addi	r7,r7,28652
 80029e4:	8001d340 	call	8001d34 <Graphics_GetNumberPressed>
 80029e8:	e0bffc15 	stw	r2,-16(fp)
					Master_Code_Input, MASTERINDEXLEN);
			if (button == NUMPAD_ENTER
 80029ec:	e0bffc17 	ldw	r2,-16(fp)
 80029f0:	10800258 	cmpnei	r2,r2,9
 80029f4:	1000061e 	bne	r2,zero,8002a10 <main+0x594>
					&& graphics_field_cursor == MASTERCODELENGTH) {
 80029f8:	d0a6dc17 	ldw	r2,-25744(gp)
 80029fc:	10800198 	cmpnei	r2,r2,6
 8002a00:	1000031e 	bne	r2,zero,8002a10 <main+0x594>
				State = STATE_SEND_MASTERCODE;
 8002a04:	00800144 	movi	r2,5
 8002a08:	e0bff815 	stw	r2,-32(fp)
 8002a0c:	00000c06 	br	8002a40 <main+0x5c4>
			}
			else if (Graphics_RectangleTouched(p.x, p.y, home_button_rect)) {
 8002a10:	e13ffe17 	ldw	r4,-8(fp)
 8002a14:	e0ffff17 	ldw	r3,-4(fp)
 8002a18:	d0a6d817 	ldw	r2,-25760(gp)
 8002a1c:	180b883a 	mov	r5,r3
 8002a20:	100d883a 	mov	r6,r2
 8002a24:	80020300 	call	8002030 <Graphics_RectangleTouched>
 8002a28:	10000326 	beq	r2,zero,8002a38 <main+0x5bc>
				State = STATE_DRAW_INIT_SCREEN;
 8002a2c:	00800044 	movi	r2,1
 8002a30:	e0bff815 	stw	r2,-32(fp)
 8002a34:	00000206 	br	8002a40 <main+0x5c4>
			}
			else {
				State = STATE_OWNER_MASTERCODE;
 8002a38:	00800104 	movi	r2,4
 8002a3c:	e0bff815 	stw	r2,-32(fp)
			}
			printf("Coords: %d, %d\n", p.x, p.y);
 8002a40:	e0fffe17 	ldw	r3,-8(fp)
 8002a44:	e0bfff17 	ldw	r2,-4(fp)
 8002a48:	010200b4 	movhi	r4,2050
 8002a4c:	210be404 	addi	r4,r4,12176
 8002a50:	180b883a 	mov	r5,r3
 8002a54:	100d883a 	mov	r6,r2
 8002a58:	800729c0 	call	800729c <printf>
			printf("Button num: %d\n", Graphics_ButtonNumToNum(button));
 8002a5c:	e13ffc17 	ldw	r4,-16(fp)
 8002a60:	8001f780 	call	8001f78 <Graphics_ButtonNumToNum>
 8002a64:	010200b4 	movhi	r4,2050
 8002a68:	210be804 	addi	r4,r4,12192
 8002a6c:	100b883a 	mov	r5,r2
 8002a70:	800729c0 	call	800729c <printf>
			printf("Master Code: %d,%d,%d,%d,%d,%d\n", Master_Code_Input[0],
 8002a74:	008200b4 	movhi	r2,2050
 8002a78:	109bfb04 	addi	r2,r2,28652
 8002a7c:	11400017 	ldw	r5,0(r2)
 8002a80:	008200b4 	movhi	r2,2050
 8002a84:	109bfb04 	addi	r2,r2,28652
 8002a88:	11800117 	ldw	r6,4(r2)
 8002a8c:	008200b4 	movhi	r2,2050
 8002a90:	109bfb04 	addi	r2,r2,28652
 8002a94:	11c00217 	ldw	r7,8(r2)
 8002a98:	008200b4 	movhi	r2,2050
 8002a9c:	109bfb04 	addi	r2,r2,28652
 8002aa0:	11000317 	ldw	r4,12(r2)
 8002aa4:	008200b4 	movhi	r2,2050
 8002aa8:	109bfb04 	addi	r2,r2,28652
 8002aac:	10c00417 	ldw	r3,16(r2)
 8002ab0:	008200b4 	movhi	r2,2050
 8002ab4:	109bfb04 	addi	r2,r2,28652
 8002ab8:	10800517 	ldw	r2,20(r2)
 8002abc:	d9000015 	stw	r4,0(sp)
 8002ac0:	d8c00115 	stw	r3,4(sp)
 8002ac4:	d8800215 	stw	r2,8(sp)
 8002ac8:	010200b4 	movhi	r4,2050
 8002acc:	210bfd04 	addi	r4,r4,12276
 8002ad0:	800729c0 	call	800729c <printf>
					Master_Code_Input[1], Master_Code_Input[2],
					Master_Code_Input[3], Master_Code_Input[4],
					Master_Code_Input[5]);
			printf("Cursor length: %d\n", graphics_field_cursor);
 8002ad4:	d0a6dc17 	ldw	r2,-25744(gp)
 8002ad8:	010200b4 	movhi	r4,2050
 8002adc:	210bf804 	addi	r4,r4,12256
 8002ae0:	100b883a 	mov	r5,r2
 8002ae4:	800729c0 	call	800729c <printf>
			break;
 8002ae8:	00010306 	br	8002ef8 <main+0xa7c>
			//This state sends the put request for the new user
		case STATE_SEND_MASTERCODE:
			// Send put request to register the owner
			Security_RegisterOwner();
 8002aec:	80030280 	call	8003028 <Security_RegisterOwner>
			isInitialized = 1;
 8002af0:	00800044 	movi	r2,1
 8002af4:	e0bff915 	stw	r2,-28(fp)
			State = STATE_DRAW_INIT_SCREEN;
 8002af8:	00800044 	movi	r2,1
 8002afc:	e0bff815 	stw	r2,-32(fp)
			break;
 8002b00:	0000fd06 	br	8002ef8 <main+0xa7c>
			// This state draws the sign in screen and obtains the value for logging in
		case STATE_SIGN_IN:
			TS_WaitForRelease();
 8002b04:	8003b000 	call	8003b00 <TS_WaitForRelease>
			p = TS_GetRelease();
 8002b08:	8003d8c0 	call	8003d8c <TS_GetRelease>
 8002b0c:	1009883a 	mov	r4,r2
 8002b10:	180b883a 	mov	r5,r3
 8002b14:	e13ffe15 	stw	r4,-8(fp)
 8002b18:	e17fff15 	stw	r5,-4(fp)
			if (Graphics_RectangleTouched(p.x, p.y, log_in_rect)) {
 8002b1c:	e13ffe17 	ldw	r4,-8(fp)
 8002b20:	e0ffff17 	ldw	r3,-4(fp)
 8002b24:	d0a6db17 	ldw	r2,-25748(gp)
 8002b28:	180b883a 	mov	r5,r3
 8002b2c:	100d883a 	mov	r6,r2
 8002b30:	80020300 	call	8002030 <Graphics_RectangleTouched>
 8002b34:	10000826 	beq	r2,zero,8002b58 <main+0x6dc>
				//Log In Button was pressed
				Graphics_DrawMasterCodeMenu();
 8002b38:	80014100 	call	8001410 <Graphics_DrawMasterCodeMenu>
				graphics_field_cursor = 0;
 8002b3c:	d026dc15 	stw	zero,-25744(gp)
				// Get the values for this device
				while (Security_ObtainValues() != 0)
 8002b40:	0001883a 	nop
 8002b44:	800318c0 	call	800318c <Security_ObtainValues>
 8002b48:	103ffe1e 	bne	r2,zero,8002b44 <__alt_data_end+0xfc002b44>
					;
				State = STATE_ENTER_MASTER_CODE;
 8002b4c:	008001c4 	movi	r2,7
 8002b50:	e0bff815 	stw	r2,-32(fp)
 8002b54:	00000d06 	br	8002b8c <main+0x710>
			}

			else if (Graphics_RectangleTouched(p.x, p.y, request_code_rect)) {
 8002b58:	e13ffe17 	ldw	r4,-8(fp)
 8002b5c:	e0ffff17 	ldw	r3,-4(fp)
 8002b60:	d0a6d917 	ldw	r2,-25756(gp)
 8002b64:	180b883a 	mov	r5,r3
 8002b68:	100d883a 	mov	r6,r2
 8002b6c:	80020300 	call	8002030 <Graphics_RectangleTouched>
 8002b70:	10000326 	beq	r2,zero,8002b80 <main+0x704>
				//Request Code Button was pressed
				State = STATE_REQUESTED_CODE;
 8002b74:	00800204 	movi	r2,8
 8002b78:	e0bff815 	stw	r2,-32(fp)
 8002b7c:	00000306 	br	8002b8c <main+0x710>
			}
			else {
				State = STATE_SEND_MASTERCODE;
 8002b80:	00800144 	movi	r2,5
 8002b84:	e0bff815 	stw	r2,-32(fp)
			}
			break;
 8002b88:	0000db06 	br	8002ef8 <main+0xa7c>
 8002b8c:	0000da06 	br	8002ef8 <main+0xa7c>
			/**
			 * User has requested to recieve the code
			 */
		case STATE_REQUESTED_CODE:
			Graphics_DrawPhoneNumberMenu();
 8002b90:	80013400 	call	8001340 <Graphics_DrawPhoneNumberMenu>
			graphics_field_cursor = 0;
 8002b94:	d026dc15 	stw	zero,-25744(gp)
			State = STATE_USER_PHONENUM;
 8002b98:	008003c4 	movi	r2,15
 8002b9c:	e0bff815 	stw	r2,-32(fp)
			break;
 8002ba0:	0000d506 	br	8002ef8 <main+0xa7c>
			/**
			 * For the owner as they enter the master code to open the box directly
			 */
		case STATE_ENTER_MASTER_CODE:
			TS_WaitForRelease();
 8002ba4:	8003b000 	call	8003b00 <TS_WaitForRelease>
			p = TS_GetRelease();
 8002ba8:	8003d8c0 	call	8003d8c <TS_GetRelease>
 8002bac:	1009883a 	mov	r4,r2
 8002bb0:	180b883a 	mov	r5,r3
 8002bb4:	e13ffe15 	stw	r4,-8(fp)
 8002bb8:	e17fff15 	stw	r5,-4(fp)
			button = Graphics_GetNumberPressed(p.x, p.y, MASTERCODELENGTH,
 8002bbc:	e13ffe17 	ldw	r4,-8(fp)
 8002bc0:	e0ffff17 	ldw	r3,-4(fp)
 8002bc4:	00801284 	movi	r2,74
 8002bc8:	d8800015 	stw	r2,0(sp)
 8002bcc:	180b883a 	mov	r5,r3
 8002bd0:	01800184 	movi	r6,6
 8002bd4:	01c200b4 	movhi	r7,2050
 8002bd8:	39dbfb04 	addi	r7,r7,28652
 8002bdc:	8001d340 	call	8001d34 <Graphics_GetNumberPressed>
 8002be0:	e0bffc15 	stw	r2,-16(fp)
					Master_Code_Input, MASTERINDEXLEN);
			if (button == NUMPAD_ENTER
 8002be4:	e0bffc17 	ldw	r2,-16(fp)
 8002be8:	10800258 	cmpnei	r2,r2,9
 8002bec:	10000b1e 	bne	r2,zero,8002c1c <main+0x7a0>
					&& graphics_field_cursor == MASTERCODELENGTH) {
 8002bf0:	d0a6dc17 	ldw	r2,-25744(gp)
 8002bf4:	10800198 	cmpnei	r2,r2,6
 8002bf8:	1000081e 	bne	r2,zero,8002c1c <main+0x7a0>
				//Check Against Master Code here.
				if (Security_CheckMasterCode()) {
 8002bfc:	80038340 	call	8003834 <Security_CheckMasterCode>
 8002c00:	10000326 	beq	r2,zero,8002c10 <main+0x794>
					State = STATE_DRAW_UNLOCK_SCREEN;
 8002c04:	00800304 	movi	r2,12
 8002c08:	e0bff815 	stw	r2,-32(fp)
			TS_WaitForRelease();
			p = TS_GetRelease();
			button = Graphics_GetNumberPressed(p.x, p.y, MASTERCODELENGTH,
					Master_Code_Input, MASTERINDEXLEN);
			if (button == NUMPAD_ENTER
					&& graphics_field_cursor == MASTERCODELENGTH) {
 8002c0c:	00000f06 	br	8002c4c <main+0x7d0>
				//Check Against Master Code here.
				if (Security_CheckMasterCode()) {
					State = STATE_DRAW_UNLOCK_SCREEN;
				} else {
					State = STATE_DRAW_INIT_SCREEN;
 8002c10:	00800044 	movi	r2,1
 8002c14:	e0bff815 	stw	r2,-32(fp)
			TS_WaitForRelease();
			p = TS_GetRelease();
			button = Graphics_GetNumberPressed(p.x, p.y, MASTERCODELENGTH,
					Master_Code_Input, MASTERINDEXLEN);
			if (button == NUMPAD_ENTER
					&& graphics_field_cursor == MASTERCODELENGTH) {
 8002c18:	00000c06 	br	8002c4c <main+0x7d0>
					State = STATE_DRAW_UNLOCK_SCREEN;
				} else {
					State = STATE_DRAW_INIT_SCREEN;
				}
			}
			else if (Graphics_RectangleTouched(p.x, p.y, home_button_rect)) {
 8002c1c:	e13ffe17 	ldw	r4,-8(fp)
 8002c20:	e0ffff17 	ldw	r3,-4(fp)
 8002c24:	d0a6d817 	ldw	r2,-25760(gp)
 8002c28:	180b883a 	mov	r5,r3
 8002c2c:	100d883a 	mov	r6,r2
 8002c30:	80020300 	call	8002030 <Graphics_RectangleTouched>
 8002c34:	10000326 	beq	r2,zero,8002c44 <main+0x7c8>
				State = STATE_DRAW_INIT_SCREEN;
 8002c38:	00800044 	movi	r2,1
 8002c3c:	e0bff815 	stw	r2,-32(fp)
 8002c40:	00000206 	br	8002c4c <main+0x7d0>
			}
			else {
				State = STATE_ENTER_MASTER_CODE;
 8002c44:	008001c4 	movi	r2,7
 8002c48:	e0bff815 	stw	r2,-32(fp)
			}

			printf("Coords: %d, %d\n", p.x, p.y);
 8002c4c:	e0fffe17 	ldw	r3,-8(fp)
 8002c50:	e0bfff17 	ldw	r2,-4(fp)
 8002c54:	010200b4 	movhi	r4,2050
 8002c58:	210be404 	addi	r4,r4,12176
 8002c5c:	180b883a 	mov	r5,r3
 8002c60:	100d883a 	mov	r6,r2
 8002c64:	800729c0 	call	800729c <printf>
			printf("Button num: %d\n", Graphics_ButtonNumToNum(button));
 8002c68:	e13ffc17 	ldw	r4,-16(fp)
 8002c6c:	8001f780 	call	8001f78 <Graphics_ButtonNumToNum>
 8002c70:	010200b4 	movhi	r4,2050
 8002c74:	210be804 	addi	r4,r4,12192
 8002c78:	100b883a 	mov	r5,r2
 8002c7c:	800729c0 	call	800729c <printf>
			printf("Master Code: %d,%d,%d,%d,%d,%d\n", Master_Code_Input[0],
 8002c80:	008200b4 	movhi	r2,2050
 8002c84:	109bfb04 	addi	r2,r2,28652
 8002c88:	11400017 	ldw	r5,0(r2)
 8002c8c:	008200b4 	movhi	r2,2050
 8002c90:	109bfb04 	addi	r2,r2,28652
 8002c94:	11800117 	ldw	r6,4(r2)
 8002c98:	008200b4 	movhi	r2,2050
 8002c9c:	109bfb04 	addi	r2,r2,28652
 8002ca0:	11c00217 	ldw	r7,8(r2)
 8002ca4:	008200b4 	movhi	r2,2050
 8002ca8:	109bfb04 	addi	r2,r2,28652
 8002cac:	11000317 	ldw	r4,12(r2)
 8002cb0:	008200b4 	movhi	r2,2050
 8002cb4:	109bfb04 	addi	r2,r2,28652
 8002cb8:	10c00417 	ldw	r3,16(r2)
 8002cbc:	008200b4 	movhi	r2,2050
 8002cc0:	109bfb04 	addi	r2,r2,28652
 8002cc4:	10800517 	ldw	r2,20(r2)
 8002cc8:	d9000015 	stw	r4,0(sp)
 8002ccc:	d8c00115 	stw	r3,4(sp)
 8002cd0:	d8800215 	stw	r2,8(sp)
 8002cd4:	010200b4 	movhi	r4,2050
 8002cd8:	210bfd04 	addi	r4,r4,12276
 8002cdc:	800729c0 	call	800729c <printf>
					Master_Code_Input[1], Master_Code_Input[2],
					Master_Code_Input[3], Master_Code_Input[4],
					Master_Code_Input[5]);
			printf("Cursor length: %d\n", graphics_field_cursor);
 8002ce0:	d0a6dc17 	ldw	r2,-25744(gp)
 8002ce4:	010200b4 	movhi	r4,2050
 8002ce8:	210bf804 	addi	r4,r4,12256
 8002cec:	100b883a 	mov	r5,r2
 8002cf0:	800729c0 	call	800729c <printf>
			break;
 8002cf4:	00008006 	br	8002ef8 <main+0xa7c>
			/**
			 * State to enter the code
			 */
		case STATE_ENTER_CODE:
			TS_WaitForRelease();
 8002cf8:	8003b000 	call	8003b00 <TS_WaitForRelease>
			p = TS_GetRelease();
 8002cfc:	8003d8c0 	call	8003d8c <TS_GetRelease>
 8002d00:	1009883a 	mov	r4,r2
 8002d04:	180b883a 	mov	r5,r3
 8002d08:	e13ffe15 	stw	r4,-8(fp)
 8002d0c:	e17fff15 	stw	r5,-4(fp)
			int button = Graphics_GetNumberPressed(p.x, p.y, CODELENGTH,
 8002d10:	e13ffe17 	ldw	r4,-8(fp)
 8002d14:	e0ffff17 	ldw	r3,-4(fp)
 8002d18:	00801cc4 	movi	r2,115
 8002d1c:	d8800015 	stw	r2,0(sp)
 8002d20:	180b883a 	mov	r5,r3
 8002d24:	01800104 	movi	r6,4
 8002d28:	01c200b4 	movhi	r7,2050
 8002d2c:	39dc0504 	addi	r7,r7,28692
 8002d30:	8001d340 	call	8001d34 <Graphics_GetNumberPressed>
 8002d34:	e0bffd15 	stw	r2,-12(fp)
					Security_Code_Input, CODEINDEXLEN);

			if (button == NUMPAD_ENTER && graphics_field_cursor == CODELENGTH) {
 8002d38:	e0bffd17 	ldw	r2,-12(fp)
 8002d3c:	10800258 	cmpnei	r2,r2,9
 8002d40:	10000b1e 	bne	r2,zero,8002d70 <main+0x8f4>
 8002d44:	d0a6dc17 	ldw	r2,-25744(gp)
 8002d48:	10800118 	cmpnei	r2,r2,4
 8002d4c:	1000081e 	bne	r2,zero,8002d70 <main+0x8f4>
				if (Security_CheckCode()) {
 8002d50:	8002fa40 	call	8002fa4 <Security_CheckCode>
 8002d54:	10000326 	beq	r2,zero,8002d64 <main+0x8e8>
					State = STATE_DRAW_UNLOCK_SCREEN;
 8002d58:	00800304 	movi	r2,12
 8002d5c:	e0bff815 	stw	r2,-32(fp)
			p = TS_GetRelease();
			int button = Graphics_GetNumberPressed(p.x, p.y, CODELENGTH,
					Security_Code_Input, CODEINDEXLEN);

			if (button == NUMPAD_ENTER && graphics_field_cursor == CODELENGTH) {
				if (Security_CheckCode()) {
 8002d60:	00000506 	br	8002d78 <main+0x8fc>
					State = STATE_DRAW_UNLOCK_SCREEN;
				} else {
					State = STATE_DRAW_LOCK_SCREEN;
 8002d64:	00800284 	movi	r2,10
 8002d68:	e0bff815 	stw	r2,-32(fp)
			p = TS_GetRelease();
			int button = Graphics_GetNumberPressed(p.x, p.y, CODELENGTH,
					Security_Code_Input, CODEINDEXLEN);

			if (button == NUMPAD_ENTER && graphics_field_cursor == CODELENGTH) {
				if (Security_CheckCode()) {
 8002d6c:	00000206 	br	8002d78 <main+0x8fc>
				} else {
					State = STATE_DRAW_LOCK_SCREEN;
				}
			}
			else {
				State = STATE_ENTER_CODE;
 8002d70:	00800244 	movi	r2,9
 8002d74:	e0bff815 	stw	r2,-32(fp)
			}

			printf("Coords: %d, %d\n", p.x, p.y);
 8002d78:	e0fffe17 	ldw	r3,-8(fp)
 8002d7c:	e0bfff17 	ldw	r2,-4(fp)
 8002d80:	010200b4 	movhi	r4,2050
 8002d84:	210be404 	addi	r4,r4,12176
 8002d88:	180b883a 	mov	r5,r3
 8002d8c:	100d883a 	mov	r6,r2
 8002d90:	800729c0 	call	800729c <printf>
			printf("Button num: %d\n", Graphics_ButtonNumToNum(button));
 8002d94:	e13ffd17 	ldw	r4,-12(fp)
 8002d98:	8001f780 	call	8001f78 <Graphics_ButtonNumToNum>
 8002d9c:	010200b4 	movhi	r4,2050
 8002da0:	210be804 	addi	r4,r4,12192
 8002da4:	100b883a 	mov	r5,r2
 8002da8:	800729c0 	call	800729c <printf>
			printf("User Code: %d,%d,%d,%d\n", Security_Code_Input[0],
 8002dac:	008200b4 	movhi	r2,2050
 8002db0:	109c0504 	addi	r2,r2,28692
 8002db4:	11400017 	ldw	r5,0(r2)
 8002db8:	008200b4 	movhi	r2,2050
 8002dbc:	109c0504 	addi	r2,r2,28692
 8002dc0:	11800117 	ldw	r6,4(r2)
 8002dc4:	008200b4 	movhi	r2,2050
 8002dc8:	109c0504 	addi	r2,r2,28692
 8002dcc:	10c00217 	ldw	r3,8(r2)
 8002dd0:	008200b4 	movhi	r2,2050
 8002dd4:	109c0504 	addi	r2,r2,28692
 8002dd8:	10800317 	ldw	r2,12(r2)
 8002ddc:	d8800015 	stw	r2,0(sp)
 8002de0:	010200b4 	movhi	r4,2050
 8002de4:	210c0504 	addi	r4,r4,12308
 8002de8:	180f883a 	mov	r7,r3
 8002dec:	800729c0 	call	800729c <printf>
					Security_Code_Input[1], Security_Code_Input[2],
					Security_Code_Input[3]);
			printf("Cursor length: %d\n", graphics_field_cursor);
 8002df0:	d0a6dc17 	ldw	r2,-25744(gp)
 8002df4:	010200b4 	movhi	r4,2050
 8002df8:	210bf804 	addi	r4,r4,12256
 8002dfc:	100b883a 	mov	r5,r2
 8002e00:	800729c0 	call	800729c <printf>
			break;
 8002e04:	00003c06 	br	8002ef8 <main+0xa7c>

		case STATE_DRAW_LOCK_SCREEN:
			Graphics_DrawLockScreen();
 8002e08:	80015a00 	call	80015a0 <Graphics_DrawLockScreen>
			State = STATE_LOCK_SCREEN;
 8002e0c:	008002c4 	movi	r2,11
 8002e10:	e0bff815 	stw	r2,-32(fp)
			break;
 8002e14:	00003806 	br	8002ef8 <main+0xa7c>
		case STATE_LOCK_SCREEN:
			TS_WaitForRelease();
 8002e18:	8003b000 	call	8003b00 <TS_WaitForRelease>
			p = TS_GetRelease();
 8002e1c:	8003d8c0 	call	8003d8c <TS_GetRelease>
 8002e20:	1009883a 	mov	r4,r2
 8002e24:	180b883a 	mov	r5,r3
 8002e28:	e13ffe15 	stw	r4,-8(fp)
 8002e2c:	e17fff15 	stw	r5,-4(fp)
			if (Graphics_InRectangle(p.x, p.y, home_button_rect)) {
 8002e30:	e13ffe17 	ldw	r4,-8(fp)
 8002e34:	e0ffff17 	ldw	r3,-4(fp)
 8002e38:	d0a6d817 	ldw	r2,-25760(gp)
 8002e3c:	180b883a 	mov	r5,r3
 8002e40:	100d883a 	mov	r6,r2
 8002e44:	8001fbc0 	call	8001fbc <Graphics_InRectangle>
 8002e48:	10000326 	beq	r2,zero,8002e58 <main+0x9dc>
				State = STATE_DRAW_INIT_SCREEN;
 8002e4c:	00800044 	movi	r2,1
 8002e50:	e0bff815 	stw	r2,-32(fp)
			}
			else {
				State = STATE_LOCK_SCREEN;
			}
			break;
 8002e54:	00002806 	br	8002ef8 <main+0xa7c>
			p = TS_GetRelease();
			if (Graphics_InRectangle(p.x, p.y, home_button_rect)) {
				State = STATE_DRAW_INIT_SCREEN;
			}
			else {
				State = STATE_LOCK_SCREEN;
 8002e58:	008002c4 	movi	r2,11
 8002e5c:	e0bff815 	stw	r2,-32(fp)
			}
			break;
 8002e60:	00002506 	br	8002ef8 <main+0xa7c>
		case STATE_DRAW_UNLOCK_SCREEN:
			Graphics_DrawUnlockScreen();
 8002e64:	80014f80 	call	80014f8 <Graphics_DrawUnlockScreen>
			State = STATE_UNLOCK_SCREEN;
 8002e68:	00800344 	movi	r2,13
 8002e6c:	e0bff815 	stw	r2,-32(fp)
			break;
 8002e70:	00002106 	br	8002ef8 <main+0xa7c>
		case STATE_UNLOCK_SCREEN:
			TS_WaitForRelease();
 8002e74:	8003b000 	call	8003b00 <TS_WaitForRelease>
			p = TS_GetRelease();
 8002e78:	8003d8c0 	call	8003d8c <TS_GetRelease>
 8002e7c:	1009883a 	mov	r4,r2
 8002e80:	180b883a 	mov	r5,r3
 8002e84:	e13ffe15 	stw	r4,-8(fp)
 8002e88:	e17fff15 	stw	r5,-4(fp)
			if (Graphics_InRectangle(p.x, p.y, home_button_rect)) {
 8002e8c:	e13ffe17 	ldw	r4,-8(fp)
 8002e90:	e0ffff17 	ldw	r3,-4(fp)
 8002e94:	d0a6d817 	ldw	r2,-25760(gp)
 8002e98:	180b883a 	mov	r5,r3
 8002e9c:	100d883a 	mov	r6,r2
 8002ea0:	8001fbc0 	call	8001fbc <Graphics_InRectangle>
 8002ea4:	10000326 	beq	r2,zero,8002eb4 <main+0xa38>
				State = STATE_DRAW_INIT_SCREEN;
 8002ea8:	00800044 	movi	r2,1
 8002eac:	e0bff815 	stw	r2,-32(fp)
			}
			else {
				State = STATE_UNLOCK_SCREEN;
			}
			break;
 8002eb0:	00001106 	br	8002ef8 <main+0xa7c>
			p = TS_GetRelease();
			if (Graphics_InRectangle(p.x, p.y, home_button_rect)) {
				State = STATE_DRAW_INIT_SCREEN;
			}
			else {
				State = STATE_UNLOCK_SCREEN;
 8002eb4:	00800344 	movi	r2,13
 8002eb8:	e0bff815 	stw	r2,-32(fp)
			}
			break;
 8002ebc:	00000e06 	br	8002ef8 <main+0xa7c>
		case STATE_IDLE:
			printf("I'm in state idle...\n");
 8002ec0:	010200b4 	movhi	r4,2050
 8002ec4:	210c0b04 	addi	r4,r4,12332
 8002ec8:	80073900 	call	8007390 <puts>
			break;
 8002ecc:	00000a06 	br	8002ef8 <main+0xa7c>
		default:
			State = STATE_DRAW_INIT_SCREEN;
 8002ed0:	00800044 	movi	r2,1
 8002ed4:	e0bff815 	stw	r2,-32(fp)
			printf("%d", State);
 8002ed8:	010200b4 	movhi	r4,2050
 8002edc:	210c1104 	addi	r4,r4,12356
 8002ee0:	e17ff817 	ldw	r5,-32(fp)
 8002ee4:	800729c0 	call	800729c <printf>
			printf("SHOUDLN'T BE HERE");
 8002ee8:	010200b4 	movhi	r4,2050
 8002eec:	210c1204 	addi	r4,r4,12360
 8002ef0:	800729c0 	call	800729c <printf>
			break;
 8002ef4:	0001883a 	nop
		}
	}
 8002ef8:	003d8c06 	br	800252c <__alt_data_end+0xfc00252c>

08002efc <Security_GenerateCode>:
#include "graphics.h"
#include "serial.h"
#include "security.h"
#include <ctype.h>

void Security_GenerateCode() {
 8002efc:	defffd04 	addi	sp,sp,-12
 8002f00:	dfc00215 	stw	ra,8(sp)
 8002f04:	df000115 	stw	fp,4(sp)
 8002f08:	df000104 	addi	fp,sp,4
	// Generates a random code
	srand(time(NULL));
 8002f0c:	0009883a 	mov	r4,zero
 8002f10:	8009b240 	call	8009b24 <time>
 8002f14:	1009883a 	mov	r4,r2
 8002f18:	80073a40 	call	80073a4 <srand>

	rand() % 10;
 8002f1c:	80073bc0 	call	80073bc <rand>

	int i;
	for (i = 0; i < CODE_LENGTH; i++) {
 8002f20:	e03fff15 	stw	zero,-4(fp)
 8002f24:	00001706 	br	8002f84 <Security_GenerateCode+0x88>
		// Security code is randomized
		Security_Code[i] = rand() % 10;
 8002f28:	80073bc0 	call	80073bc <rand>
 8002f2c:	1009883a 	mov	r4,r2
 8002f30:	01400284 	movi	r5,10
 8002f34:	8004ba40 	call	8004ba4 <__modsi3>
 8002f38:	1009883a 	mov	r4,r2
 8002f3c:	008200b4 	movhi	r2,2050
 8002f40:	109c0104 	addi	r2,r2,28676
 8002f44:	e0ffff17 	ldw	r3,-4(fp)
 8002f48:	18c7883a 	add	r3,r3,r3
 8002f4c:	18c7883a 	add	r3,r3,r3
 8002f50:	10c5883a 	add	r2,r2,r3
 8002f54:	11000015 	stw	r4,0(r2)
		// Input code all set to -1
		Security_Code_Input[i] = -1;
 8002f58:	008200b4 	movhi	r2,2050
 8002f5c:	109c0504 	addi	r2,r2,28692
 8002f60:	e0ffff17 	ldw	r3,-4(fp)
 8002f64:	18c7883a 	add	r3,r3,r3
 8002f68:	18c7883a 	add	r3,r3,r3
 8002f6c:	10c5883a 	add	r2,r2,r3
 8002f70:	00ffffc4 	movi	r3,-1
 8002f74:	10c00015 	stw	r3,0(r2)
	srand(time(NULL));

	rand() % 10;

	int i;
	for (i = 0; i < CODE_LENGTH; i++) {
 8002f78:	e0bfff17 	ldw	r2,-4(fp)
 8002f7c:	10800044 	addi	r2,r2,1
 8002f80:	e0bfff15 	stw	r2,-4(fp)
 8002f84:	e0bfff17 	ldw	r2,-4(fp)
 8002f88:	10800110 	cmplti	r2,r2,4
 8002f8c:	103fe61e 	bne	r2,zero,8002f28 <__alt_data_end+0xfc002f28>
		// Security code is randomized
		Security_Code[i] = rand() % 10;
		// Input code all set to -1
		Security_Code_Input[i] = -1;
	}
}
 8002f90:	e037883a 	mov	sp,fp
 8002f94:	dfc00117 	ldw	ra,4(sp)
 8002f98:	df000017 	ldw	fp,0(sp)
 8002f9c:	dec00204 	addi	sp,sp,8
 8002fa0:	f800283a 	ret

08002fa4 <Security_CheckCode>:

/*******************************************************************************************
 ** Check the inputed security code
 *******************************************************************************************/
int Security_CheckCode() {
 8002fa4:	defffe04 	addi	sp,sp,-8
 8002fa8:	df000115 	stw	fp,4(sp)
 8002fac:	df000104 	addi	fp,sp,4
	int i;

	for (i = 0; i < CODE_LENGTH; i++) {
 8002fb0:	e03fff15 	stw	zero,-4(fp)
 8002fb4:	00001406 	br	8003008 <Security_CheckCode+0x64>
		if (Security_Code_Input[i] != Security_Code[i]) {
 8002fb8:	008200b4 	movhi	r2,2050
 8002fbc:	109c0504 	addi	r2,r2,28692
 8002fc0:	e0ffff17 	ldw	r3,-4(fp)
 8002fc4:	18c7883a 	add	r3,r3,r3
 8002fc8:	18c7883a 	add	r3,r3,r3
 8002fcc:	10c5883a 	add	r2,r2,r3
 8002fd0:	11000017 	ldw	r4,0(r2)
 8002fd4:	008200b4 	movhi	r2,2050
 8002fd8:	109c0104 	addi	r2,r2,28676
 8002fdc:	e0ffff17 	ldw	r3,-4(fp)
 8002fe0:	18c7883a 	add	r3,r3,r3
 8002fe4:	18c7883a 	add	r3,r3,r3
 8002fe8:	10c5883a 	add	r2,r2,r3
 8002fec:	10800017 	ldw	r2,0(r2)
 8002ff0:	20800226 	beq	r4,r2,8002ffc <Security_CheckCode+0x58>
			// Codes do not match
			return 0;
 8002ff4:	0005883a 	mov	r2,zero
 8002ff8:	00000706 	br	8003018 <Security_CheckCode+0x74>
 ** Check the inputed security code
 *******************************************************************************************/
int Security_CheckCode() {
	int i;

	for (i = 0; i < CODE_LENGTH; i++) {
 8002ffc:	e0bfff17 	ldw	r2,-4(fp)
 8003000:	10800044 	addi	r2,r2,1
 8003004:	e0bfff15 	stw	r2,-4(fp)
 8003008:	e0bfff17 	ldw	r2,-4(fp)
 800300c:	10800110 	cmplti	r2,r2,4
 8003010:	103fe91e 	bne	r2,zero,8002fb8 <__alt_data_end+0xfc002fb8>
		if (Security_Code_Input[i] != Security_Code[i]) {
			// Codes do not match
			return 0;
		}
	}
	return 1;
 8003014:	00800044 	movi	r2,1
}
 8003018:	e037883a 	mov	sp,fp
 800301c:	df000017 	ldw	fp,0(sp)
 8003020:	dec00104 	addi	sp,sp,4
 8003024:	f800283a 	ret

08003028 <Security_RegisterOwner>:

/*******************************************************************************************
 ** Register the user to id 1
 *******************************************************************************************/
void Security_RegisterOwner() {
 8003028:	defff304 	addi	sp,sp,-52
 800302c:	dfc00c15 	stw	ra,48(sp)
 8003030:	df000b15 	stw	fp,44(sp)
 8003034:	df000b04 	addi	fp,sp,44
	printf("Sending Put Request\n");
 8003038:	010200b4 	movhi	r4,2050
 800303c:	210c1704 	addi	r4,r4,12380
 8003040:	80073900 	call	8007390 <puts>

	char master_code[16];
	int i = 0;
 8003044:	e03ff615 	stw	zero,-40(fp)
	int index = 0;
 8003048:	e03ff715 	stw	zero,-36(fp)
	for (i = 0; i < 6; i++)
 800304c:	e03ff615 	stw	zero,-40(fp)
 8003050:	00001906 	br	80030b8 <Security_RegisterOwner+0x90>
		index += snprintf(&master_code[index], 16 - index, "%d",
 8003054:	e0fff804 	addi	r3,fp,-32
 8003058:	e0bff717 	ldw	r2,-36(fp)
 800305c:	1889883a 	add	r4,r3,r2
 8003060:	00c00404 	movi	r3,16
 8003064:	e0bff717 	ldw	r2,-36(fp)
 8003068:	1885c83a 	sub	r2,r3,r2
 800306c:	100b883a 	mov	r5,r2
 8003070:	008200b4 	movhi	r2,2050
 8003074:	109bfb04 	addi	r2,r2,28652
 8003078:	e0fff617 	ldw	r3,-40(fp)
 800307c:	18c7883a 	add	r3,r3,r3
 8003080:	18c7883a 	add	r3,r3,r3
 8003084:	10c5883a 	add	r2,r2,r3
 8003088:	10800017 	ldw	r2,0(r2)
 800308c:	018200b4 	movhi	r6,2050
 8003090:	318c1c04 	addi	r6,r6,12400
 8003094:	100f883a 	mov	r7,r2
 8003098:	800754c0 	call	800754c <snprintf>
 800309c:	1007883a 	mov	r3,r2
 80030a0:	e0bff717 	ldw	r2,-36(fp)
 80030a4:	10c5883a 	add	r2,r2,r3
 80030a8:	e0bff715 	stw	r2,-36(fp)
	printf("Sending Put Request\n");

	char master_code[16];
	int i = 0;
	int index = 0;
	for (i = 0; i < 6; i++)
 80030ac:	e0bff617 	ldw	r2,-40(fp)
 80030b0:	10800044 	addi	r2,r2,1
 80030b4:	e0bff615 	stw	r2,-40(fp)
 80030b8:	e0bff617 	ldw	r2,-40(fp)
 80030bc:	10800190 	cmplti	r2,r2,6
 80030c0:	103fe41e 	bne	r2,zero,8003054 <__alt_data_end+0xfc003054>
		index += snprintf(&master_code[index], 16 - index, "%d",
				Master_Code_Input[i]);

	char phone_num[16];
	i = 0;
 80030c4:	e03ff615 	stw	zero,-40(fp)
	index = 0;
 80030c8:	e03ff715 	stw	zero,-36(fp)
	for (i = 0; i < 10; i++)
 80030cc:	e03ff615 	stw	zero,-40(fp)
 80030d0:	00001906 	br	8003138 <Security_RegisterOwner+0x110>
		index += snprintf(&phone_num[index], 16 - index, "%d",
 80030d4:	e0fffc04 	addi	r3,fp,-16
 80030d8:	e0bff717 	ldw	r2,-36(fp)
 80030dc:	1889883a 	add	r4,r3,r2
 80030e0:	00c00404 	movi	r3,16
 80030e4:	e0bff717 	ldw	r2,-36(fp)
 80030e8:	1885c83a 	sub	r2,r3,r2
 80030ec:	100b883a 	mov	r5,r2
 80030f0:	008200b4 	movhi	r2,2050
 80030f4:	109be104 	addi	r2,r2,28548
 80030f8:	e0fff617 	ldw	r3,-40(fp)
 80030fc:	18c7883a 	add	r3,r3,r3
 8003100:	18c7883a 	add	r3,r3,r3
 8003104:	10c5883a 	add	r2,r2,r3
 8003108:	10800017 	ldw	r2,0(r2)
 800310c:	018200b4 	movhi	r6,2050
 8003110:	318c1c04 	addi	r6,r6,12400
 8003114:	100f883a 	mov	r7,r2
 8003118:	800754c0 	call	800754c <snprintf>
 800311c:	1007883a 	mov	r3,r2
 8003120:	e0bff717 	ldw	r2,-36(fp)
 8003124:	10c5883a 	add	r2,r2,r3
 8003128:	e0bff715 	stw	r2,-36(fp)
				Master_Code_Input[i]);

	char phone_num[16];
	i = 0;
	index = 0;
	for (i = 0; i < 10; i++)
 800312c:	e0bff617 	ldw	r2,-40(fp)
 8003130:	10800044 	addi	r2,r2,1
 8003134:	e0bff615 	stw	r2,-40(fp)
 8003138:	e0bff617 	ldw	r2,-40(fp)
 800313c:	10800290 	cmplti	r2,r2,10
 8003140:	103fe41e 	bne	r2,zero,80030d4 <__alt_data_end+0xfc0030d4>
		index += snprintf(&phone_num[index], 16 - index, "%d",
				Master_Phone_Number[i]);

	// Send out the new code for this box
	Wifi_EnsurePut(1, master_code, "0000", "false", phone_num);
 8003144:	e0fff804 	addi	r3,fp,-32
 8003148:	e0bffc04 	addi	r2,fp,-16
 800314c:	d8800015 	stw	r2,0(sp)
 8003150:	01000044 	movi	r4,1
 8003154:	180b883a 	mov	r5,r3
 8003158:	018200b4 	movhi	r6,2050
 800315c:	318c1d04 	addi	r6,r6,12404
 8003160:	01c200b4 	movhi	r7,2050
 8003164:	39cc1f04 	addi	r7,r7,12412
 8003168:	800438c0 	call	800438c <Wifi_EnsurePut>
	printf("Master Code Sent\n");
 800316c:	010200b4 	movhi	r4,2050
 8003170:	210c2104 	addi	r4,r4,12420
 8003174:	80073900 	call	8007390 <puts>
}
 8003178:	e037883a 	mov	sp,fp
 800317c:	dfc00117 	ldw	ra,4(sp)
 8003180:	df000017 	ldw	fp,0(sp)
 8003184:	dec00204 	addi	sp,sp,8
 8003188:	f800283a 	ret

0800318c <Security_ObtainValues>:

/*******************************************************************************************
 ** Obtain the passwords and phone number for this box, hard coded to id 1
 *******************************************************************************************/
int Security_ObtainValues() {
 800318c:	defff504 	addi	sp,sp,-44
 8003190:	dfc00a15 	stw	ra,40(sp)
 8003194:	df000915 	stw	fp,36(sp)
 8003198:	df000904 	addi	fp,sp,36
	printf("Sending Get Request\n");
 800319c:	010200b4 	movhi	r4,2050
 80031a0:	210c2604 	addi	r4,r4,12440
 80031a4:	80073900 	call	8007390 <puts>
	// Send out the new code for this box
	Wifi_EnsureGet(1);
 80031a8:	01000044 	movi	r4,1
 80031ac:	80043000 	call	8004300 <Wifi_EnsureGet>

	// Json buf should now be valid

	// Parse the master pw
	unsigned char masterPw[MASTERCODELENGTH];
	Wifi_ParseMasterPw(jsonbuf, masterPw);
 80031b0:	e0bffb04 	addi	r2,fp,-20
 80031b4:	010200b4 	movhi	r4,2050
 80031b8:	211c0904 	addi	r4,r4,28708
 80031bc:	100b883a 	mov	r5,r2
 80031c0:	80048980 	call	8004898 <Wifi_ParseMasterPw>
	if (!isdigit(masterPw[MASTERCODELENGTH-1])) {
 80031c4:	008200b4 	movhi	r2,2050
 80031c8:	1094dd04 	addi	r2,r2,21364
 80031cc:	10c00017 	ldw	r3,0(r2)
 80031d0:	e0bffc43 	ldbu	r2,-15(fp)
 80031d4:	10803fcc 	andi	r2,r2,255
 80031d8:	10800044 	addi	r2,r2,1
 80031dc:	1885883a 	add	r2,r3,r2
 80031e0:	10800003 	ldbu	r2,0(r2)
 80031e4:	10803fcc 	andi	r2,r2,255
 80031e8:	1080010c 	andi	r2,r2,4
 80031ec:	1000021e 	bne	r2,zero,80031f8 <Security_ObtainValues+0x6c>
		return EPWMAS; // master password not found
 80031f0:	00800104 	movi	r2,4
 80031f4:	00008e06 	br	8003430 <Security_ObtainValues+0x2a4>
	}
	printf("Master pw: %s\n", masterPw);
 80031f8:	e0bffb04 	addi	r2,fp,-20
 80031fc:	010200b4 	movhi	r4,2050
 8003200:	210c2b04 	addi	r4,r4,12460
 8003204:	100b883a 	mov	r5,r2
 8003208:	800729c0 	call	800729c <printf>

	// Parse the pw
	unsigned char tempPw[CODELENGTH];
	Wifi_ParsePw(jsonbuf, tempPw);
 800320c:	e0bffc84 	addi	r2,fp,-14
 8003210:	010200b4 	movhi	r4,2050
 8003214:	211c0904 	addi	r4,r4,28708
 8003218:	100b883a 	mov	r5,r2
 800321c:	80047800 	call	8004780 <Wifi_ParsePw>
	if (!isdigit(tempPw[CODELENGTH-1])) {
 8003220:	008200b4 	movhi	r2,2050
 8003224:	1094dd04 	addi	r2,r2,21364
 8003228:	10c00017 	ldw	r3,0(r2)
 800322c:	e0bffd43 	ldbu	r2,-11(fp)
 8003230:	10803fcc 	andi	r2,r2,255
 8003234:	10800044 	addi	r2,r2,1
 8003238:	1885883a 	add	r2,r3,r2
 800323c:	10800003 	ldbu	r2,0(r2)
 8003240:	10803fcc 	andi	r2,r2,255
 8003244:	1080010c 	andi	r2,r2,4
 8003248:	1000021e 	bne	r2,zero,8003254 <Security_ObtainValues+0xc8>
		return EPW; // password not found
 800324c:	008000c4 	movi	r2,3
 8003250:	00007706 	br	8003430 <Security_ObtainValues+0x2a4>
	}
	printf("Temp pw: %s\n", tempPw);
 8003254:	e0bffc84 	addi	r2,fp,-14
 8003258:	010200b4 	movhi	r4,2050
 800325c:	210c2f04 	addi	r4,r4,12476
 8003260:	100b883a 	mov	r5,r2
 8003264:	800729c0 	call	800729c <printf>

	// Parse the phone number
	unsigned char phoneNum[PHONENUMLENGTH];
	Wifi_ParsePhoneNumber(jsonbuf, phoneNum);
 8003268:	e0bffd84 	addi	r2,fp,-10
 800326c:	010200b4 	movhi	r4,2050
 8003270:	211c0904 	addi	r4,r4,28708
 8003274:	100b883a 	mov	r5,r2
 8003278:	80046680 	call	8004668 <Wifi_ParsePhoneNumber>
	if (!isdigit(phoneNum[PHONENUMLENGTH-1])) {
 800327c:	008200b4 	movhi	r2,2050
 8003280:	1094dd04 	addi	r2,r2,21364
 8003284:	10c00017 	ldw	r3,0(r2)
 8003288:	e0bfffc3 	ldbu	r2,-1(fp)
 800328c:	10803fcc 	andi	r2,r2,255
 8003290:	10800044 	addi	r2,r2,1
 8003294:	1885883a 	add	r2,r3,r2
 8003298:	10800003 	ldbu	r2,0(r2)
 800329c:	10803fcc 	andi	r2,r2,255
 80032a0:	1080010c 	andi	r2,r2,4
 80032a4:	1000021e 	bne	r2,zero,80032b0 <Security_ObtainValues+0x124>
		return EPHN; // phone number not found
 80032a8:	00800084 	movi	r2,2
 80032ac:	00006006 	br	8003430 <Security_ObtainValues+0x2a4>
	}
	printf("Phone Number: %s\n", phoneNum);
 80032b0:	e0bffd84 	addi	r2,fp,-10
 80032b4:	010200b4 	movhi	r4,2050
 80032b8:	210c3304 	addi	r4,r4,12492
 80032bc:	100b883a 	mov	r5,r2
 80032c0:	800729c0 	call	800729c <printf>

	// Assign the values to the variables
	int i;
	// Store the temporary password
	for (i = 0; i < CODELENGTH; i++) {
 80032c4:	e03ffa15 	stw	zero,-24(fp)
 80032c8:	00001006 	br	800330c <Security_ObtainValues+0x180>
		Security_Code[i] = tempPw[i]  - '0';
 80032cc:	e0fffc84 	addi	r3,fp,-14
 80032d0:	e0bffa17 	ldw	r2,-24(fp)
 80032d4:	1885883a 	add	r2,r3,r2
 80032d8:	10800003 	ldbu	r2,0(r2)
 80032dc:	10803fcc 	andi	r2,r2,255
 80032e0:	113ff404 	addi	r4,r2,-48
 80032e4:	008200b4 	movhi	r2,2050
 80032e8:	109c0104 	addi	r2,r2,28676
 80032ec:	e0fffa17 	ldw	r3,-24(fp)
 80032f0:	18c7883a 	add	r3,r3,r3
 80032f4:	18c7883a 	add	r3,r3,r3
 80032f8:	10c5883a 	add	r2,r2,r3
 80032fc:	11000015 	stw	r4,0(r2)
	printf("Phone Number: %s\n", phoneNum);

	// Assign the values to the variables
	int i;
	// Store the temporary password
	for (i = 0; i < CODELENGTH; i++) {
 8003300:	e0bffa17 	ldw	r2,-24(fp)
 8003304:	10800044 	addi	r2,r2,1
 8003308:	e0bffa15 	stw	r2,-24(fp)
 800330c:	e0bffa17 	ldw	r2,-24(fp)
 8003310:	10800110 	cmplti	r2,r2,4
 8003314:	103fed1e 	bne	r2,zero,80032cc <__alt_data_end+0xfc0032cc>
		Security_Code[i] = tempPw[i]  - '0';
	}
	// Store the master password
	for (i = 0; i < MASTERCODELENGTH; i++) {
 8003318:	e03ffa15 	stw	zero,-24(fp)
 800331c:	00001006 	br	8003360 <Security_ObtainValues+0x1d4>
		Master_Code[i] = masterPw[i] - '0';
 8003320:	e0fffb04 	addi	r3,fp,-20
 8003324:	e0bffa17 	ldw	r2,-24(fp)
 8003328:	1885883a 	add	r2,r3,r2
 800332c:	10800003 	ldbu	r2,0(r2)
 8003330:	10803fcc 	andi	r2,r2,255
 8003334:	113ff404 	addi	r4,r2,-48
 8003338:	008200b4 	movhi	r2,2050
 800333c:	109bf504 	addi	r2,r2,28628
 8003340:	e0fffa17 	ldw	r3,-24(fp)
 8003344:	18c7883a 	add	r3,r3,r3
 8003348:	18c7883a 	add	r3,r3,r3
 800334c:	10c5883a 	add	r2,r2,r3
 8003350:	11000015 	stw	r4,0(r2)
	// Store the temporary password
	for (i = 0; i < CODELENGTH; i++) {
		Security_Code[i] = tempPw[i]  - '0';
	}
	// Store the master password
	for (i = 0; i < MASTERCODELENGTH; i++) {
 8003354:	e0bffa17 	ldw	r2,-24(fp)
 8003358:	10800044 	addi	r2,r2,1
 800335c:	e0bffa15 	stw	r2,-24(fp)
 8003360:	e0bffa17 	ldw	r2,-24(fp)
 8003364:	10800190 	cmplti	r2,r2,6
 8003368:	103fed1e 	bne	r2,zero,8003320 <__alt_data_end+0xfc003320>
		Master_Code[i] = masterPw[i] - '0';
	}
	printf("Master After Obtaining values Code: %d,%d,%d,%d,%d,%d\n", Master_Code[0],
 800336c:	008200b4 	movhi	r2,2050
 8003370:	109bf504 	addi	r2,r2,28628
 8003374:	11400017 	ldw	r5,0(r2)
 8003378:	008200b4 	movhi	r2,2050
 800337c:	109bf504 	addi	r2,r2,28628
 8003380:	11800117 	ldw	r6,4(r2)
 8003384:	008200b4 	movhi	r2,2050
 8003388:	109bf504 	addi	r2,r2,28628
 800338c:	11c00217 	ldw	r7,8(r2)
 8003390:	008200b4 	movhi	r2,2050
 8003394:	109bf504 	addi	r2,r2,28628
 8003398:	11000317 	ldw	r4,12(r2)
 800339c:	008200b4 	movhi	r2,2050
 80033a0:	109bf504 	addi	r2,r2,28628
 80033a4:	10c00417 	ldw	r3,16(r2)
 80033a8:	008200b4 	movhi	r2,2050
 80033ac:	109bf504 	addi	r2,r2,28628
 80033b0:	10800517 	ldw	r2,20(r2)
 80033b4:	d9000015 	stw	r4,0(sp)
 80033b8:	d8c00115 	stw	r3,4(sp)
 80033bc:	d8800215 	stw	r2,8(sp)
 80033c0:	010200b4 	movhi	r4,2050
 80033c4:	210c3804 	addi	r4,r4,12512
 80033c8:	800729c0 	call	800729c <printf>
				Master_Code[1], Master_Code[2], Master_Code[3],
				Master_Code[4], Master_Code[5]);
	// Store the master phone number
	for (i = 0; i < PHONENUMLENGTH; i++) {
 80033cc:	e03ffa15 	stw	zero,-24(fp)
 80033d0:	00001006 	br	8003414 <Security_ObtainValues+0x288>
		Master_Phone_Number[i] = phoneNum[i] - '0';
 80033d4:	e0fffd84 	addi	r3,fp,-10
 80033d8:	e0bffa17 	ldw	r2,-24(fp)
 80033dc:	1885883a 	add	r2,r3,r2
 80033e0:	10800003 	ldbu	r2,0(r2)
 80033e4:	10803fcc 	andi	r2,r2,255
 80033e8:	113ff404 	addi	r4,r2,-48
 80033ec:	008200b4 	movhi	r2,2050
 80033f0:	109be104 	addi	r2,r2,28548
 80033f4:	e0fffa17 	ldw	r3,-24(fp)
 80033f8:	18c7883a 	add	r3,r3,r3
 80033fc:	18c7883a 	add	r3,r3,r3
 8003400:	10c5883a 	add	r2,r2,r3
 8003404:	11000015 	stw	r4,0(r2)
	}
	printf("Master After Obtaining values Code: %d,%d,%d,%d,%d,%d\n", Master_Code[0],
				Master_Code[1], Master_Code[2], Master_Code[3],
				Master_Code[4], Master_Code[5]);
	// Store the master phone number
	for (i = 0; i < PHONENUMLENGTH; i++) {
 8003408:	e0bffa17 	ldw	r2,-24(fp)
 800340c:	10800044 	addi	r2,r2,1
 8003410:	e0bffa15 	stw	r2,-24(fp)
 8003414:	e0bffa17 	ldw	r2,-24(fp)
 8003418:	10800290 	cmplti	r2,r2,10
 800341c:	103fed1e 	bne	r2,zero,80033d4 <__alt_data_end+0xfc0033d4>
		Master_Phone_Number[i] = phoneNum[i] - '0';
	}

	printf("Obtained Get Request\n");
 8003420:	010200b4 	movhi	r4,2050
 8003424:	210c4604 	addi	r4,r4,12568
 8003428:	80073900 	call	8007390 <puts>
	return 0;
 800342c:	0005883a 	mov	r2,zero
}
 8003430:	e037883a 	mov	sp,fp
 8003434:	dfc00117 	ldw	ra,4(sp)
 8003438:	df000017 	ldw	fp,0(sp)
 800343c:	dec00204 	addi	sp,sp,8
 8003440:	f800283a 	ret

08003444 <Security_SendSMS>:

/*****************************************************************************
* Sends an sms to the owner of the box
*****************************************************************************/
int Security_SendSMS() {
 8003444:	deffd004 	addi	sp,sp,-192
 8003448:	dfc02f15 	stw	ra,188(sp)
 800344c:	df002e15 	stw	fp,184(sp)
 8003450:	df002e04 	addi	fp,sp,184
	char buf[128];
	volatile char phoneNum[11];
	volatile char userPhoneNum[11];
	int i;

	printf("Phone Number: %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003454:	008200b4 	movhi	r2,2050
 8003458:	109beb04 	addi	r2,r2,28588
 800345c:	12c00017 	ldw	r11,0(r2)
 8003460:	008200b4 	movhi	r2,2050
 8003464:	109beb04 	addi	r2,r2,28588
 8003468:	12800117 	ldw	r10,4(r2)
 800346c:	008200b4 	movhi	r2,2050
 8003470:	109beb04 	addi	r2,r2,28588
 8003474:	12400217 	ldw	r9,8(r2)
 8003478:	008200b4 	movhi	r2,2050
 800347c:	109beb04 	addi	r2,r2,28588
 8003480:	12000317 	ldw	r8,12(r2)
 8003484:	008200b4 	movhi	r2,2050
 8003488:	109beb04 	addi	r2,r2,28588
 800348c:	11c00417 	ldw	r7,16(r2)
 8003490:	008200b4 	movhi	r2,2050
 8003494:	109beb04 	addi	r2,r2,28588
 8003498:	11800517 	ldw	r6,20(r2)
 800349c:	008200b4 	movhi	r2,2050
 80034a0:	109beb04 	addi	r2,r2,28588
 80034a4:	11400617 	ldw	r5,24(r2)
 80034a8:	008200b4 	movhi	r2,2050
 80034ac:	109beb04 	addi	r2,r2,28588
 80034b0:	11000717 	ldw	r4,28(r2)
 80034b4:	008200b4 	movhi	r2,2050
 80034b8:	109beb04 	addi	r2,r2,28588
 80034bc:	10c00817 	ldw	r3,32(r2)
 80034c0:	008200b4 	movhi	r2,2050
 80034c4:	109beb04 	addi	r2,r2,28588
 80034c8:	10800917 	ldw	r2,36(r2)
 80034cc:	da000015 	stw	r8,0(sp)
 80034d0:	d9c00115 	stw	r7,4(sp)
 80034d4:	d9800215 	stw	r6,8(sp)
 80034d8:	d9400315 	stw	r5,12(sp)
 80034dc:	d9000415 	stw	r4,16(sp)
 80034e0:	d8c00515 	stw	r3,20(sp)
 80034e4:	d8800615 	stw	r2,24(sp)
 80034e8:	010200b4 	movhi	r4,2050
 80034ec:	210c4c04 	addi	r4,r4,12592
 80034f0:	580b883a 	mov	r5,r11
 80034f4:	500d883a 	mov	r6,r10
 80034f8:	480f883a 	mov	r7,r9
 80034fc:	800729c0 	call	800729c <printf>
			User_Phone_Number[2], User_Phone_Number[3],
			User_Phone_Number[4], User_Phone_Number[5],
			User_Phone_Number[6], User_Phone_Number[7],
			User_Phone_Number[8], User_Phone_Number[9]);

	for(i=0;i<10;i++) {
 8003500:	e03fd915 	stw	zero,-156(fp)
 8003504:	00001d06 	br	800357c <Security_SendSMS+0x138>
		phoneNum[i] = Master_Phone_Number[i] + '0';
 8003508:	008200b4 	movhi	r2,2050
 800350c:	109be104 	addi	r2,r2,28548
 8003510:	e0ffd917 	ldw	r3,-156(fp)
 8003514:	18c7883a 	add	r3,r3,r3
 8003518:	18c7883a 	add	r3,r3,r3
 800351c:	10c5883a 	add	r2,r2,r3
 8003520:	10800017 	ldw	r2,0(r2)
 8003524:	10800c04 	addi	r2,r2,48
 8003528:	1009883a 	mov	r4,r2
 800352c:	e0fffa04 	addi	r3,fp,-24
 8003530:	e0bfd917 	ldw	r2,-156(fp)
 8003534:	1885883a 	add	r2,r3,r2
 8003538:	11000005 	stb	r4,0(r2)
		userPhoneNum[i] = User_Phone_Number[i] + '0';
 800353c:	008200b4 	movhi	r2,2050
 8003540:	109beb04 	addi	r2,r2,28588
 8003544:	e0ffd917 	ldw	r3,-156(fp)
 8003548:	18c7883a 	add	r3,r3,r3
 800354c:	18c7883a 	add	r3,r3,r3
 8003550:	10c5883a 	add	r2,r2,r3
 8003554:	10800017 	ldw	r2,0(r2)
 8003558:	10800c04 	addi	r2,r2,48
 800355c:	1009883a 	mov	r4,r2
 8003560:	e0fffcc4 	addi	r3,fp,-13
 8003564:	e0bfd917 	ldw	r2,-156(fp)
 8003568:	1885883a 	add	r2,r3,r2
 800356c:	11000005 	stb	r4,0(r2)
			User_Phone_Number[2], User_Phone_Number[3],
			User_Phone_Number[4], User_Phone_Number[5],
			User_Phone_Number[6], User_Phone_Number[7],
			User_Phone_Number[8], User_Phone_Number[9]);

	for(i=0;i<10;i++) {
 8003570:	e0bfd917 	ldw	r2,-156(fp)
 8003574:	10800044 	addi	r2,r2,1
 8003578:	e0bfd915 	stw	r2,-156(fp)
 800357c:	e0bfd917 	ldw	r2,-156(fp)
 8003580:	10800290 	cmplti	r2,r2,10
 8003584:	103fe01e 	bne	r2,zero,8003508 <__alt_data_end+0xfc003508>
		phoneNum[i] = Master_Phone_Number[i] + '0';
		userPhoneNum[i] = User_Phone_Number[i] + '0';
	}
	phoneNum[10] = '\0';
 8003588:	e03ffc85 	stb	zero,-14(fp)
	userPhoneNum[10] = '\0';
 800358c:	e03fff45 	stb	zero,-3(fp)
	printf("%s\n",phoneNum);
 8003590:	e0bffa04 	addi	r2,fp,-24
 8003594:	1009883a 	mov	r4,r2
 8003598:	80073900 	call	8007390 <puts>
	printf("%s\n",userPhoneNum);
 800359c:	e0bffcc4 	addi	r2,fp,-13
 80035a0:	1009883a 	mov	r4,r2
 80035a4:	80073900 	call	8007390 <puts>
	snprintf(buf, sizeof buf, "send_sms(\"+14387000752\",\"+1%s\",\"Hi a user with phone number %s is requesting to open the box!\")\r\n",phoneNum, userPhoneNum);
 80035a8:	e13fda04 	addi	r4,fp,-152
 80035ac:	e0fffa04 	addi	r3,fp,-24
 80035b0:	e0bffcc4 	addi	r2,fp,-13
 80035b4:	d8800015 	stw	r2,0(sp)
 80035b8:	01402004 	movi	r5,128
 80035bc:	018200b4 	movhi	r6,2050
 80035c0:	318c5804 	addi	r6,r6,12640
 80035c4:	180f883a 	mov	r7,r3
 80035c8:	800754c0 	call	800754c <snprintf>
	printf("%s",buf);
 80035cc:	e0bfda04 	addi	r2,fp,-152
 80035d0:	010200b4 	movhi	r4,2050
 80035d4:	210c7104 	addi	r4,r4,12740
 80035d8:	100b883a 	mov	r5,r2
 80035dc:	800729c0 	call	800729c <printf>
	Wifi_SendCommand(buf);
 80035e0:	e0bfda04 	addi	r2,fp,-152
 80035e4:	1009883a 	mov	r4,r2
 80035e8:	800444c0 	call	800444c <Wifi_SendCommand>
	Wifi_ReadResponse();
 80035ec:	80040f00 	call	80040f0 <Wifi_ReadResponse>
}
 80035f0:	e037883a 	mov	sp,fp
 80035f4:	dfc00117 	ldw	ra,4(sp)
 80035f8:	df000017 	ldw	fp,0(sp)
 80035fc:	dec00204 	addi	sp,sp,8
 8003600:	f800283a 	ret

08003604 <Security_SendConfirmedSMS>:

void Security_SendConfirmedSMS() {
 8003604:	deffd204 	addi	sp,sp,-184
 8003608:	dfc02d15 	stw	ra,180(sp)
 800360c:	df002c15 	stw	fp,176(sp)
 8003610:	df002c04 	addi	fp,sp,176
	char buf[128];
	volatile char userPhoneNum[11];
	volatile char tempPw[5];
	int i;

	printf("Phone Number: %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8003614:	008200b4 	movhi	r2,2050
 8003618:	109beb04 	addi	r2,r2,28588
 800361c:	12c00017 	ldw	r11,0(r2)
 8003620:	008200b4 	movhi	r2,2050
 8003624:	109beb04 	addi	r2,r2,28588
 8003628:	12800117 	ldw	r10,4(r2)
 800362c:	008200b4 	movhi	r2,2050
 8003630:	109beb04 	addi	r2,r2,28588
 8003634:	12400217 	ldw	r9,8(r2)
 8003638:	008200b4 	movhi	r2,2050
 800363c:	109beb04 	addi	r2,r2,28588
 8003640:	12000317 	ldw	r8,12(r2)
 8003644:	008200b4 	movhi	r2,2050
 8003648:	109beb04 	addi	r2,r2,28588
 800364c:	11c00417 	ldw	r7,16(r2)
 8003650:	008200b4 	movhi	r2,2050
 8003654:	109beb04 	addi	r2,r2,28588
 8003658:	11800517 	ldw	r6,20(r2)
 800365c:	008200b4 	movhi	r2,2050
 8003660:	109beb04 	addi	r2,r2,28588
 8003664:	11400617 	ldw	r5,24(r2)
 8003668:	008200b4 	movhi	r2,2050
 800366c:	109beb04 	addi	r2,r2,28588
 8003670:	11000717 	ldw	r4,28(r2)
 8003674:	008200b4 	movhi	r2,2050
 8003678:	109beb04 	addi	r2,r2,28588
 800367c:	10c00817 	ldw	r3,32(r2)
 8003680:	008200b4 	movhi	r2,2050
 8003684:	109beb04 	addi	r2,r2,28588
 8003688:	10800917 	ldw	r2,36(r2)
 800368c:	da000015 	stw	r8,0(sp)
 8003690:	d9c00115 	stw	r7,4(sp)
 8003694:	d9800215 	stw	r6,8(sp)
 8003698:	d9400315 	stw	r5,12(sp)
 800369c:	d9000415 	stw	r4,16(sp)
 80036a0:	d8c00515 	stw	r3,20(sp)
 80036a4:	d8800615 	stw	r2,24(sp)
 80036a8:	010200b4 	movhi	r4,2050
 80036ac:	210c4c04 	addi	r4,r4,12592
 80036b0:	580b883a 	mov	r5,r11
 80036b4:	500d883a 	mov	r6,r10
 80036b8:	480f883a 	mov	r7,r9
 80036bc:	800729c0 	call	800729c <printf>
			User_Phone_Number[2], User_Phone_Number[3],
			User_Phone_Number[4], User_Phone_Number[5],
			User_Phone_Number[6], User_Phone_Number[7],
			User_Phone_Number[8], User_Phone_Number[9]);

	for(i=0;i<10;i++) {
 80036c0:	e03fdb15 	stw	zero,-148(fp)
 80036c4:	00001006 	br	8003708 <Security_SendConfirmedSMS+0x104>
		userPhoneNum[i] = User_Phone_Number[i] + '0';
 80036c8:	008200b4 	movhi	r2,2050
 80036cc:	109beb04 	addi	r2,r2,28588
 80036d0:	e0ffdb17 	ldw	r3,-148(fp)
 80036d4:	18c7883a 	add	r3,r3,r3
 80036d8:	18c7883a 	add	r3,r3,r3
 80036dc:	10c5883a 	add	r2,r2,r3
 80036e0:	10800017 	ldw	r2,0(r2)
 80036e4:	10800c04 	addi	r2,r2,48
 80036e8:	1009883a 	mov	r4,r2
 80036ec:	e0fffc04 	addi	r3,fp,-16
 80036f0:	e0bfdb17 	ldw	r2,-148(fp)
 80036f4:	1885883a 	add	r2,r3,r2
 80036f8:	11000005 	stb	r4,0(r2)
			User_Phone_Number[2], User_Phone_Number[3],
			User_Phone_Number[4], User_Phone_Number[5],
			User_Phone_Number[6], User_Phone_Number[7],
			User_Phone_Number[8], User_Phone_Number[9]);

	for(i=0;i<10;i++) {
 80036fc:	e0bfdb17 	ldw	r2,-148(fp)
 8003700:	10800044 	addi	r2,r2,1
 8003704:	e0bfdb15 	stw	r2,-148(fp)
 8003708:	e0bfdb17 	ldw	r2,-148(fp)
 800370c:	10800290 	cmplti	r2,r2,10
 8003710:	103fed1e 	bne	r2,zero,80036c8 <__alt_data_end+0xfc0036c8>
		userPhoneNum[i] = User_Phone_Number[i] + '0';
	}

	for(i=0;i<4;i++) {
 8003714:	e03fdb15 	stw	zero,-148(fp)
 8003718:	00001006 	br	800375c <Security_SendConfirmedSMS+0x158>
		tempPw[i] = Security_Code[i] + '0';
 800371c:	008200b4 	movhi	r2,2050
 8003720:	109c0104 	addi	r2,r2,28676
 8003724:	e0ffdb17 	ldw	r3,-148(fp)
 8003728:	18c7883a 	add	r3,r3,r3
 800372c:	18c7883a 	add	r3,r3,r3
 8003730:	10c5883a 	add	r2,r2,r3
 8003734:	10800017 	ldw	r2,0(r2)
 8003738:	10800c04 	addi	r2,r2,48
 800373c:	1009883a 	mov	r4,r2
 8003740:	e0fffec4 	addi	r3,fp,-5
 8003744:	e0bfdb17 	ldw	r2,-148(fp)
 8003748:	1885883a 	add	r2,r3,r2
 800374c:	11000005 	stb	r4,0(r2)

	for(i=0;i<10;i++) {
		userPhoneNum[i] = User_Phone_Number[i] + '0';
	}

	for(i=0;i<4;i++) {
 8003750:	e0bfdb17 	ldw	r2,-148(fp)
 8003754:	10800044 	addi	r2,r2,1
 8003758:	e0bfdb15 	stw	r2,-148(fp)
 800375c:	e0bfdb17 	ldw	r2,-148(fp)
 8003760:	10800110 	cmplti	r2,r2,4
 8003764:	103fed1e 	bne	r2,zero,800371c <__alt_data_end+0xfc00371c>
		tempPw[i] = Security_Code[i] + '0';
	}
	userPhoneNum[10] = '\0';
 8003768:	e03ffe85 	stb	zero,-6(fp)
	tempPw[4] = '\0';
 800376c:	e03fffc5 	stb	zero,-1(fp)
	printf("%s\n",userPhoneNum);
 8003770:	e0bffc04 	addi	r2,fp,-16
 8003774:	1009883a 	mov	r4,r2
 8003778:	80073900 	call	8007390 <puts>
	snprintf(buf, sizeof buf, "send_sms(\"+14387000752\",\"+1%s\",\"You have been approved the code is %s!\")\r\n", userPhoneNum, tempPw);
 800377c:	e13fdc04 	addi	r4,fp,-144
 8003780:	e0fffc04 	addi	r3,fp,-16
 8003784:	e0bffec4 	addi	r2,fp,-5
 8003788:	d8800015 	stw	r2,0(sp)
 800378c:	01402004 	movi	r5,128
 8003790:	018200b4 	movhi	r6,2050
 8003794:	318c7204 	addi	r6,r6,12744
 8003798:	180f883a 	mov	r7,r3
 800379c:	800754c0 	call	800754c <snprintf>
	printf("%s",buf);
 80037a0:	e0bfdc04 	addi	r2,fp,-144
 80037a4:	010200b4 	movhi	r4,2050
 80037a8:	210c7104 	addi	r4,r4,12740
 80037ac:	100b883a 	mov	r5,r2
 80037b0:	800729c0 	call	800729c <printf>
	Wifi_SendCommand(buf);
 80037b4:	e0bfdc04 	addi	r2,fp,-144
 80037b8:	1009883a 	mov	r4,r2
 80037bc:	800444c0 	call	800444c <Wifi_SendCommand>
	Wifi_ReadResponse();
 80037c0:	80040f00 	call	80040f0 <Wifi_ReadResponse>
}
 80037c4:	e037883a 	mov	sp,fp
 80037c8:	dfc00117 	ldw	ra,4(sp)
 80037cc:	df000017 	ldw	fp,0(sp)
 80037d0:	dec00204 	addi	sp,sp,8
 80037d4:	f800283a 	ret

080037d8 <Security_WaitApproved>:

/*******************************************************************************************
 ** Make sure the user has been confirmed to enter the code, they should recieve a text
 ** message of the code to unlock the box
 *******************************************************************************************/
int Security_WaitApproved() {
 80037d8:	defffc04 	addi	sp,sp,-16
 80037dc:	dfc00315 	stw	ra,12(sp)
 80037e0:	df000215 	stw	fp,8(sp)
 80037e4:	df000204 	addi	fp,sp,8
	// Wait until we get approved
	// Send out the code for this box
	Wifi_EnsureGet(1);
 80037e8:	01000044 	movi	r4,1
 80037ec:	80043000 	call	8004300 <Wifi_EnsureGet>
	// Json buf should now be valid
	char isConfirmed[MASTERCODELENGTH];
	Wifi_ParseConfirmed(jsonbuf, isConfirmed);
 80037f0:	010200b4 	movhi	r4,2050
 80037f4:	211c0904 	addi	r4,r4,28708
 80037f8:	e17ffe04 	addi	r5,fp,-8
 80037fc:	80049b00 	call	80049b0 <Wifi_ParseConfirmed>

	printf("%s\n",isConfirmed);
 8003800:	e13ffe04 	addi	r4,fp,-8
 8003804:	80073900 	call	8007390 <puts>
	// Check if value is true
	return isConfirmed[0] == 't';
 8003808:	e0bffe03 	ldbu	r2,-8(fp)
 800380c:	10803fcc 	andi	r2,r2,255
 8003810:	1080201c 	xori	r2,r2,128
 8003814:	10bfe004 	addi	r2,r2,-128
 8003818:	10801d20 	cmpeqi	r2,r2,116
 800381c:	10803fcc 	andi	r2,r2,255
}
 8003820:	e037883a 	mov	sp,fp
 8003824:	dfc00117 	ldw	ra,4(sp)
 8003828:	df000017 	ldw	fp,0(sp)
 800382c:	dec00204 	addi	sp,sp,8
 8003830:	f800283a 	ret

08003834 <Security_CheckMasterCode>:

/*******************************************************************************************
 ** Checks to see if the master code matches
 ** Returns 0 if it doesn't match 1 otherwise
 *******************************************************************************************/
int Security_CheckMasterCode() {
 8003834:	defffa04 	addi	sp,sp,-24
 8003838:	dfc00515 	stw	ra,20(sp)
 800383c:	df000415 	stw	fp,16(sp)
 8003840:	df000404 	addi	fp,sp,16
	int i;
	printf("Master Code Input: %d,%d,%d,%d,%d,%d\n", Master_Code_Input[0],
 8003844:	008200b4 	movhi	r2,2050
 8003848:	109bfb04 	addi	r2,r2,28652
 800384c:	11400017 	ldw	r5,0(r2)
 8003850:	008200b4 	movhi	r2,2050
 8003854:	109bfb04 	addi	r2,r2,28652
 8003858:	11800117 	ldw	r6,4(r2)
 800385c:	008200b4 	movhi	r2,2050
 8003860:	109bfb04 	addi	r2,r2,28652
 8003864:	11c00217 	ldw	r7,8(r2)
 8003868:	008200b4 	movhi	r2,2050
 800386c:	109bfb04 	addi	r2,r2,28652
 8003870:	11000317 	ldw	r4,12(r2)
 8003874:	008200b4 	movhi	r2,2050
 8003878:	109bfb04 	addi	r2,r2,28652
 800387c:	10c00417 	ldw	r3,16(r2)
 8003880:	008200b4 	movhi	r2,2050
 8003884:	109bfb04 	addi	r2,r2,28652
 8003888:	10800517 	ldw	r2,20(r2)
 800388c:	d9000015 	stw	r4,0(sp)
 8003890:	d8c00115 	stw	r3,4(sp)
 8003894:	d8800215 	stw	r2,8(sp)
 8003898:	010200b4 	movhi	r4,2050
 800389c:	210c8504 	addi	r4,r4,12820
 80038a0:	800729c0 	call	800729c <printf>
						Master_Code_Input[1], Master_Code_Input[2], Master_Code_Input[3],
						Master_Code_Input[4], Master_Code_Input[5]);
	printf("Master Code: %d,%d,%d,%d,%d,%d\n", Master_Code[0],
 80038a4:	008200b4 	movhi	r2,2050
 80038a8:	109bf504 	addi	r2,r2,28628
 80038ac:	11400017 	ldw	r5,0(r2)
 80038b0:	008200b4 	movhi	r2,2050
 80038b4:	109bf504 	addi	r2,r2,28628
 80038b8:	11800117 	ldw	r6,4(r2)
 80038bc:	008200b4 	movhi	r2,2050
 80038c0:	109bf504 	addi	r2,r2,28628
 80038c4:	11c00217 	ldw	r7,8(r2)
 80038c8:	008200b4 	movhi	r2,2050
 80038cc:	109bf504 	addi	r2,r2,28628
 80038d0:	11000317 	ldw	r4,12(r2)
 80038d4:	008200b4 	movhi	r2,2050
 80038d8:	109bf504 	addi	r2,r2,28628
 80038dc:	10c00417 	ldw	r3,16(r2)
 80038e0:	008200b4 	movhi	r2,2050
 80038e4:	109bf504 	addi	r2,r2,28628
 80038e8:	10800517 	ldw	r2,20(r2)
 80038ec:	d9000015 	stw	r4,0(sp)
 80038f0:	d8c00115 	stw	r3,4(sp)
 80038f4:	d8800215 	stw	r2,8(sp)
 80038f8:	010200b4 	movhi	r4,2050
 80038fc:	210c8f04 	addi	r4,r4,12860
 8003900:	800729c0 	call	800729c <printf>
			Master_Code[1], Master_Code[2], Master_Code[3],
			Master_Code[4], Master_Code[5]);
	for (i = 0; i < MASTERCODELENGTH; i++) {
 8003904:	e03fff15 	stw	zero,-4(fp)
 8003908:	00001406 	br	800395c <Security_CheckMasterCode+0x128>
		if (Master_Code[i] != Master_Code_Input[i]) {
 800390c:	008200b4 	movhi	r2,2050
 8003910:	109bf504 	addi	r2,r2,28628
 8003914:	e0ffff17 	ldw	r3,-4(fp)
 8003918:	18c7883a 	add	r3,r3,r3
 800391c:	18c7883a 	add	r3,r3,r3
 8003920:	10c5883a 	add	r2,r2,r3
 8003924:	11000017 	ldw	r4,0(r2)
 8003928:	008200b4 	movhi	r2,2050
 800392c:	109bfb04 	addi	r2,r2,28652
 8003930:	e0ffff17 	ldw	r3,-4(fp)
 8003934:	18c7883a 	add	r3,r3,r3
 8003938:	18c7883a 	add	r3,r3,r3
 800393c:	10c5883a 	add	r2,r2,r3
 8003940:	10800017 	ldw	r2,0(r2)
 8003944:	20800226 	beq	r4,r2,8003950 <Security_CheckMasterCode+0x11c>
			// Codes do not match
			return 0;
 8003948:	0005883a 	mov	r2,zero
 800394c:	00000706 	br	800396c <Security_CheckMasterCode+0x138>
						Master_Code_Input[1], Master_Code_Input[2], Master_Code_Input[3],
						Master_Code_Input[4], Master_Code_Input[5]);
	printf("Master Code: %d,%d,%d,%d,%d,%d\n", Master_Code[0],
			Master_Code[1], Master_Code[2], Master_Code[3],
			Master_Code[4], Master_Code[5]);
	for (i = 0; i < MASTERCODELENGTH; i++) {
 8003950:	e0bfff17 	ldw	r2,-4(fp)
 8003954:	10800044 	addi	r2,r2,1
 8003958:	e0bfff15 	stw	r2,-4(fp)
 800395c:	e0bfff17 	ldw	r2,-4(fp)
 8003960:	10800190 	cmplti	r2,r2,6
 8003964:	103fe91e 	bne	r2,zero,800390c <__alt_data_end+0xfc00390c>
		if (Master_Code[i] != Master_Code_Input[i]) {
			// Codes do not match
			return 0;
		}
	}
	return 1;
 8003968:	00800044 	movi	r2,1
}
 800396c:	e037883a 	mov	sp,fp
 8003970:	dfc00117 	ldw	ra,4(sp)
 8003974:	df000017 	ldw	fp,0(sp)
 8003978:	dec00204 	addi	sp,sp,8
 800397c:	f800283a 	ret

08003980 <Security_CheckIsRegistered>:
 ** Make sure the user has been confirmed to enter the code, they should receive a text
 ** message of the code to unlock the box
 **
 ** Returns 1 if already registered, 0 otherwise
 *******************************************************************************************/
int Security_CheckIsRegistered() {
 8003980:	defffc04 	addi	sp,sp,-16
 8003984:	dfc00315 	stw	ra,12(sp)
 8003988:	df000215 	stw	fp,8(sp)
 800398c:	df000204 	addi	fp,sp,8
	// Send out the code for this box
	Wifi_EnsureGet(1);
 8003990:	01000044 	movi	r4,1
 8003994:	80043000 	call	8004300 <Wifi_EnsureGet>
	// Json buf should now be valid
	char masterPw[MASTERCODELENGTH];
	Wifi_ParseMasterPw(jsonbuf, masterPw);
 8003998:	010200b4 	movhi	r4,2050
 800399c:	211c0904 	addi	r4,r4,28708
 80039a0:	e17ffe04 	addi	r5,fp,-8
 80039a4:	80048980 	call	8004898 <Wifi_ParseMasterPw>

	return masterPw[0] != 'a';
 80039a8:	e0bffe03 	ldbu	r2,-8(fp)
 80039ac:	10803fcc 	andi	r2,r2,255
 80039b0:	1080201c 	xori	r2,r2,128
 80039b4:	10bfe004 	addi	r2,r2,-128
 80039b8:	10801858 	cmpnei	r2,r2,97
 80039bc:	10803fcc 	andi	r2,r2,255
}
 80039c0:	e037883a 	mov	sp,fp
 80039c4:	dfc00117 	ldw	ra,4(sp)
 80039c8:	df000017 	ldw	fp,0(sp)
 80039cc:	dec00204 	addi	sp,sp,8
 80039d0:	f800283a 	ret

080039d4 <Security_SendRequestOpen>:

/*******************************************************************************************
 ** Sends an sms to the owner of this box with credentials of the person attempting to open
 *******************************************************************************************/
void Security_SendRequestOpen() {
 80039d4:	deffff04 	addi	sp,sp,-4
 80039d8:	df000015 	stw	fp,0(sp)
 80039dc:	d839883a 	mov	fp,sp
	// Send user's phone number and request to open to the owner phone number
	// Store the user's phone number to text to it later
}
 80039e0:	e037883a 	mov	sp,fp
 80039e4:	df000017 	ldw	fp,0(sp)
 80039e8:	dec00104 	addi	sp,sp,4
 80039ec:	f800283a 	ret

080039f0 <TS_Init>:

/*****************************************************************************
**  START OF TOUCHSCREEN
*****************************************************************************/
void TS_Init(void)
{
 80039f0:	defffe04 	addi	sp,sp,-8
 80039f4:	dfc00115 	stw	ra,4(sp)
 80039f8:	df000015 	stw	fp,0(sp)
 80039fc:	d839883a 	mov	fp,sp
	// Reset
	TouchScreen_Control = 0x03;
 8003a00:	00a10034 	movhi	r2,33792
 8003a04:	10808c04 	addi	r2,r2,560
 8003a08:	00c000c4 	movi	r3,3
 8003a0c:	10c00005 	stb	r3,0(r2)

	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// transmitter interrupt disabled
	TouchScreen_Control = 0x15;
 8003a10:	00a10034 	movhi	r2,33792
 8003a14:	10808c04 	addi	r2,r2,560
 8003a18:	00c00544 	movi	r3,21
 8003a1c:	10c00005 	stb	r3,0(r2)

	// set 9600 Baud
	TouchScreen_Baud = 0x07;
 8003a20:	00a10034 	movhi	r2,33792
 8003a24:	10808d04 	addi	r2,r2,564
 8003a28:	00c001c4 	movi	r3,7
 8003a2c:	10c00005 	stb	r3,0(r2)

	// send touchscreen controller an "enable touch" command
	TS_EnableTouch();
 8003a30:	8003a840 	call	8003a84 <TS_EnableTouch>
}
 8003a34:	e037883a 	mov	sp,fp
 8003a38:	dfc00117 	ldw	ra,4(sp)
 8003a3c:	df000017 	ldw	fp,0(sp)
 8003a40:	dec00204 	addi	sp,sp,8
 8003a44:	f800283a 	ret

08003a48 <TS_DisableTouch>:

void TS_DisableTouch( void )
{
 8003a48:	defffe04 	addi	sp,sp,-8
 8003a4c:	dfc00115 	stw	ra,4(sp)
 8003a50:	df000015 	stw	fp,0(sp)
 8003a54:	d839883a 	mov	fp,sp
	// send touchscreen controller a "disable touch" command
	TS_WriteTx(0x55);
 8003a58:	01001544 	movi	r4,85
 8003a5c:	8003d3c0 	call	8003d3c <TS_WriteTx>
	TS_WriteTx(0x01);
 8003a60:	01000044 	movi	r4,1
 8003a64:	8003d3c0 	call	8003d3c <TS_WriteTx>
	TS_WriteTx(0x13);
 8003a68:	010004c4 	movi	r4,19
 8003a6c:	8003d3c0 	call	8003d3c <TS_WriteTx>
}
 8003a70:	e037883a 	mov	sp,fp
 8003a74:	dfc00117 	ldw	ra,4(sp)
 8003a78:	df000017 	ldw	fp,0(sp)
 8003a7c:	dec00204 	addi	sp,sp,8
 8003a80:	f800283a 	ret

08003a84 <TS_EnableTouch>:

void TS_EnableTouch( void )
{
 8003a84:	defffe04 	addi	sp,sp,-8
 8003a88:	dfc00115 	stw	ra,4(sp)
 8003a8c:	df000015 	stw	fp,0(sp)
 8003a90:	d839883a 	mov	fp,sp
	// send touchscreen controller an "enable touch" command
	TS_WriteTx(0x55);
 8003a94:	01001544 	movi	r4,85
 8003a98:	8003d3c0 	call	8003d3c <TS_WriteTx>
	TS_WriteTx(0x01);
 8003a9c:	01000044 	movi	r4,1
 8003aa0:	8003d3c0 	call	8003d3c <TS_WriteTx>
	TS_WriteTx(0x12);
 8003aa4:	01000484 	movi	r4,18
 8003aa8:	8003d3c0 	call	8003d3c <TS_WriteTx>
}
 8003aac:	e037883a 	mov	sp,fp
 8003ab0:	dfc00117 	ldw	ra,4(sp)
 8003ab4:	df000017 	ldw	fp,0(sp)
 8003ab8:	dec00204 	addi	sp,sp,8
 8003abc:	f800283a 	ret

08003ac0 <TS_WaitForTouch>:


void TS_WaitForTouch()
{
 8003ac0:	defffe04 	addi	sp,sp,-8
 8003ac4:	dfc00115 	stw	ra,4(sp)
 8003ac8:	df000015 	stw	fp,0(sp)
 8003acc:	d839883a 	mov	fp,sp
	while(TS_ReadRx() != (char)0x81);
 8003ad0:	0001883a 	nop
 8003ad4:	8003cf00 	call	8003cf0 <TS_ReadRx>
 8003ad8:	10803fcc 	andi	r2,r2,255
 8003adc:	1080201c 	xori	r2,r2,128
 8003ae0:	10bfe004 	addi	r2,r2,-128
 8003ae4:	10bfe058 	cmpnei	r2,r2,-127
 8003ae8:	103ffa1e 	bne	r2,zero,8003ad4 <__alt_data_end+0xfc003ad4>
}
 8003aec:	e037883a 	mov	sp,fp
 8003af0:	dfc00117 	ldw	ra,4(sp)
 8003af4:	df000017 	ldw	fp,0(sp)
 8003af8:	dec00204 	addi	sp,sp,8
 8003afc:	f800283a 	ret

08003b00 <TS_WaitForRelease>:

void TS_WaitForRelease()
{
 8003b00:	defffe04 	addi	sp,sp,-8
 8003b04:	dfc00115 	stw	ra,4(sp)
 8003b08:	df000015 	stw	fp,0(sp)
 8003b0c:	d839883a 	mov	fp,sp
	while(TS_ReadRx() != (char)0x80);
 8003b10:	0001883a 	nop
 8003b14:	8003cf00 	call	8003cf0 <TS_ReadRx>
 8003b18:	10803fcc 	andi	r2,r2,255
 8003b1c:	1080201c 	xori	r2,r2,128
 8003b20:	10bfe004 	addi	r2,r2,-128
 8003b24:	10bfe018 	cmpnei	r2,r2,-128
 8003b28:	103ffa1e 	bne	r2,zero,8003b14 <__alt_data_end+0xfc003b14>
}
 8003b2c:	e037883a 	mov	sp,fp
 8003b30:	dfc00117 	ldw	ra,4(sp)
 8003b34:	df000017 	ldw	fp,0(sp)
 8003b38:	dec00204 	addi	sp,sp,8
 8003b3c:	f800283a 	ret

08003b40 <TS_GetPress>:


Point TS_GetPress(void)
{
 8003b40:	defff804 	addi	sp,sp,-32
 8003b44:	dfc00715 	stw	ra,28(sp)
 8003b48:	df000615 	stw	fp,24(sp)
 8003b4c:	df000604 	addi	fp,sp,24
	u_int x_cord_upper;

	u_int y_cord_lower;
	u_int y_cord_upper;

	x_cord_lower = TS_ReadRx();
 8003b50:	8003cf00 	call	8003cf0 <TS_ReadRx>
 8003b54:	10803fcc 	andi	r2,r2,255
 8003b58:	1080201c 	xori	r2,r2,128
 8003b5c:	10bfe004 	addi	r2,r2,-128
 8003b60:	e0bffa15 	stw	r2,-24(fp)
	x_cord_upper = TS_ReadRx();
 8003b64:	8003cf00 	call	8003cf0 <TS_ReadRx>
 8003b68:	10803fcc 	andi	r2,r2,255
 8003b6c:	1080201c 	xori	r2,r2,128
 8003b70:	10bfe004 	addi	r2,r2,-128
 8003b74:	e0bffb15 	stw	r2,-20(fp)
	y_cord_lower = TS_ReadRx();
 8003b78:	8003cf00 	call	8003cf0 <TS_ReadRx>
 8003b7c:	10803fcc 	andi	r2,r2,255
 8003b80:	1080201c 	xori	r2,r2,128
 8003b84:	10bfe004 	addi	r2,r2,-128
 8003b88:	e0bffc15 	stw	r2,-16(fp)
	y_cord_upper = TS_ReadRx();
 8003b8c:	8003cf00 	call	8003cf0 <TS_ReadRx>
 8003b90:	10803fcc 	andi	r2,r2,255
 8003b94:	1080201c 	xori	r2,r2,128
 8003b98:	10bfe004 	addi	r2,r2,-128
 8003b9c:	e0bffd15 	stw	r2,-12(fp)

	p1.x = (double)((x_cord_upper << 7) | x_cord_lower)/4095.0 * 800;
 8003ba0:	e0bffb17 	ldw	r2,-20(fp)
 8003ba4:	100691fa 	slli	r3,r2,7
 8003ba8:	e0bffa17 	ldw	r2,-24(fp)
 8003bac:	1884b03a 	or	r2,r3,r2
 8003bb0:	1009883a 	mov	r4,r2
 8003bb4:	80065b80 	call	80065b8 <__floatunsidf>
 8003bb8:	100b883a 	mov	r5,r2
 8003bbc:	180d883a 	mov	r6,r3
 8003bc0:	2809883a 	mov	r4,r5
 8003bc4:	300b883a 	mov	r5,r6
 8003bc8:	000d883a 	mov	r6,zero
 8003bcc:	01d02c34 	movhi	r7,16560
 8003bd0:	39ff8004 	addi	r7,r7,-512
 8003bd4:	80052740 	call	8005274 <__divdf3>
 8003bd8:	1009883a 	mov	r4,r2
 8003bdc:	180b883a 	mov	r5,r3
 8003be0:	2005883a 	mov	r2,r4
 8003be4:	2807883a 	mov	r3,r5
 8003be8:	1009883a 	mov	r4,r2
 8003bec:	180b883a 	mov	r5,r3
 8003bf0:	000d883a 	mov	r6,zero
 8003bf4:	01d02274 	movhi	r7,16521
 8003bf8:	8005bf40 	call	8005bf4 <__muldf3>
 8003bfc:	1009883a 	mov	r4,r2
 8003c00:	180b883a 	mov	r5,r3
 8003c04:	2005883a 	mov	r2,r4
 8003c08:	2807883a 	mov	r3,r5
 8003c0c:	1009883a 	mov	r4,r2
 8003c10:	180b883a 	mov	r5,r3
 8003c14:	80064600 	call	8006460 <__fixdfsi>
 8003c18:	e0bffe15 	stw	r2,-8(fp)
	p1.y = (double)((y_cord_upper << 7) | y_cord_lower)/4095.0 * 450;
 8003c1c:	e0bffd17 	ldw	r2,-12(fp)
 8003c20:	100691fa 	slli	r3,r2,7
 8003c24:	e0bffc17 	ldw	r2,-16(fp)
 8003c28:	1884b03a 	or	r2,r3,r2
 8003c2c:	1009883a 	mov	r4,r2
 8003c30:	80065b80 	call	80065b8 <__floatunsidf>
 8003c34:	100b883a 	mov	r5,r2
 8003c38:	180d883a 	mov	r6,r3
 8003c3c:	2809883a 	mov	r4,r5
 8003c40:	300b883a 	mov	r5,r6
 8003c44:	000d883a 	mov	r6,zero
 8003c48:	01d02c34 	movhi	r7,16560
 8003c4c:	39ff8004 	addi	r7,r7,-512
 8003c50:	80052740 	call	8005274 <__divdf3>
 8003c54:	1009883a 	mov	r4,r2
 8003c58:	180b883a 	mov	r5,r3
 8003c5c:	2005883a 	mov	r2,r4
 8003c60:	2807883a 	mov	r3,r5
 8003c64:	1009883a 	mov	r4,r2
 8003c68:	180b883a 	mov	r5,r3
 8003c6c:	000d883a 	mov	r6,zero
 8003c70:	01d01f34 	movhi	r7,16508
 8003c74:	39c80004 	addi	r7,r7,8192
 8003c78:	8005bf40 	call	8005bf4 <__muldf3>
 8003c7c:	1009883a 	mov	r4,r2
 8003c80:	180b883a 	mov	r5,r3
 8003c84:	2005883a 	mov	r2,r4
 8003c88:	2807883a 	mov	r3,r5
 8003c8c:	1009883a 	mov	r4,r2
 8003c90:	180b883a 	mov	r5,r3
 8003c94:	80064600 	call	8006460 <__fixdfsi>
 8003c98:	e0bfff15 	stw	r2,-4(fp)

	/*
	 * Change it to -1 so that we can check later if the touch values are valid
	 */
	if(p1.x > 800 || p1.y > 450) {
 8003c9c:	e0bffe17 	ldw	r2,-8(fp)
 8003ca0:	1080c848 	cmpgei	r2,r2,801
 8003ca4:	1000031e 	bne	r2,zero,8003cb4 <TS_GetPress+0x174>
 8003ca8:	e0bfff17 	ldw	r2,-4(fp)
 8003cac:	108070d0 	cmplti	r2,r2,451
 8003cb0:	1000041e 	bne	r2,zero,8003cc4 <TS_GetPress+0x184>
		p1.x = -1;
 8003cb4:	00bfffc4 	movi	r2,-1
 8003cb8:	e0bffe15 	stw	r2,-8(fp)
		p1.y = -1;
 8003cbc:	00bfffc4 	movi	r2,-1
 8003cc0:	e0bfff15 	stw	r2,-4(fp)
	}

	return p1;
 8003cc4:	e0bffe17 	ldw	r2,-8(fp)
 8003cc8:	e0ffff17 	ldw	r3,-4(fp)
 8003ccc:	1009883a 	mov	r4,r2
 8003cd0:	180b883a 	mov	r5,r3
}
 8003cd4:	2005883a 	mov	r2,r4
 8003cd8:	2807883a 	mov	r3,r5
 8003cdc:	e037883a 	mov	sp,fp
 8003ce0:	dfc00117 	ldw	ra,4(sp)
 8003ce4:	df000017 	ldw	fp,0(sp)
 8003ce8:	dec00204 	addi	sp,sp,8
 8003cec:	f800283a 	ret

08003cf0 <TS_ReadRx>:


char TS_ReadRx(void) {
 8003cf0:	defffe04 	addi	sp,sp,-8
 8003cf4:	df000115 	stw	fp,4(sp)
 8003cf8:	df000104 	addi	fp,sp,4
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	while((TouchScreen_Status & 0x01) != 0x01) {}
 8003cfc:	0001883a 	nop
 8003d00:	00a10034 	movhi	r2,33792
 8003d04:	10808c04 	addi	r2,r2,560
 8003d08:	10800003 	ldbu	r2,0(r2)
 8003d0c:	10803fcc 	andi	r2,r2,255
 8003d10:	1080004c 	andi	r2,r2,1
 8003d14:	103ffa26 	beq	r2,zero,8003d00 <__alt_data_end+0xfc003d00>
	char val = TouchScreen_RxData;
 8003d18:	00a10034 	movhi	r2,33792
 8003d1c:	10808c84 	addi	r2,r2,562
 8003d20:	10800003 	ldbu	r2,0(r2)
 8003d24:	e0bfff05 	stb	r2,-4(fp)
	return val;
 8003d28:	e0bfff03 	ldbu	r2,-4(fp)
}
 8003d2c:	e037883a 	mov	sp,fp
 8003d30:	df000017 	ldw	fp,0(sp)
 8003d34:	dec00104 	addi	sp,sp,4
 8003d38:	f800283a 	ret

08003d3c <TS_WriteTx>:

void TS_WriteTx(char val) {
 8003d3c:	defffe04 	addi	sp,sp,-8
 8003d40:	df000115 	stw	fp,4(sp)
 8003d44:	df000104 	addi	fp,sp,4
 8003d48:	2005883a 	mov	r2,r4
 8003d4c:	e0bfff05 	stb	r2,-4(fp)
	// poll tx bit in 6850 status register. Wait for it to become '2'
	while((TouchScreen_Status & 0x02) != 0x02) {}
 8003d50:	0001883a 	nop
 8003d54:	00a10034 	movhi	r2,33792
 8003d58:	10808c04 	addi	r2,r2,560
 8003d5c:	10800003 	ldbu	r2,0(r2)
 8003d60:	10803fcc 	andi	r2,r2,255
 8003d64:	1080008c 	andi	r2,r2,2
 8003d68:	103ffa26 	beq	r2,zero,8003d54 <__alt_data_end+0xfc003d54>
	TouchScreen_TxData = val;
 8003d6c:	00a10034 	movhi	r2,33792
 8003d70:	10808c84 	addi	r2,r2,562
 8003d74:	e0ffff03 	ldbu	r3,-4(fp)
 8003d78:	10c00005 	stb	r3,0(r2)
}
 8003d7c:	e037883a 	mov	sp,fp
 8003d80:	df000017 	ldw	fp,0(sp)
 8003d84:	dec00104 	addi	sp,sp,4
 8003d88:	f800283a 	ret

08003d8c <TS_GetRelease>:


Point TS_GetRelease(void)
{
 8003d8c:	defff804 	addi	sp,sp,-32
 8003d90:	dfc00715 	stw	ra,28(sp)
 8003d94:	df000615 	stw	fp,24(sp)
 8003d98:	df000604 	addi	fp,sp,24
	u_int x_cord_upper;

	u_int y_cord_lower;
	u_int y_cord_upper;

	x_cord_lower = TS_ReadRx();
 8003d9c:	8003cf00 	call	8003cf0 <TS_ReadRx>
 8003da0:	10803fcc 	andi	r2,r2,255
 8003da4:	1080201c 	xori	r2,r2,128
 8003da8:	10bfe004 	addi	r2,r2,-128
 8003dac:	e0bffa15 	stw	r2,-24(fp)
	x_cord_upper = TS_ReadRx();
 8003db0:	8003cf00 	call	8003cf0 <TS_ReadRx>
 8003db4:	10803fcc 	andi	r2,r2,255
 8003db8:	1080201c 	xori	r2,r2,128
 8003dbc:	10bfe004 	addi	r2,r2,-128
 8003dc0:	e0bffb15 	stw	r2,-20(fp)
	y_cord_lower = TS_ReadRx();
 8003dc4:	8003cf00 	call	8003cf0 <TS_ReadRx>
 8003dc8:	10803fcc 	andi	r2,r2,255
 8003dcc:	1080201c 	xori	r2,r2,128
 8003dd0:	10bfe004 	addi	r2,r2,-128
 8003dd4:	e0bffc15 	stw	r2,-16(fp)
	y_cord_upper = TS_ReadRx();
 8003dd8:	8003cf00 	call	8003cf0 <TS_ReadRx>
 8003ddc:	10803fcc 	andi	r2,r2,255
 8003de0:	1080201c 	xori	r2,r2,128
 8003de4:	10bfe004 	addi	r2,r2,-128
 8003de8:	e0bffd15 	stw	r2,-12(fp)

	p1.x = (double)((x_cord_upper << 7) | x_cord_lower)/4095.0 * 800;
 8003dec:	e0bffb17 	ldw	r2,-20(fp)
 8003df0:	100691fa 	slli	r3,r2,7
 8003df4:	e0bffa17 	ldw	r2,-24(fp)
 8003df8:	1884b03a 	or	r2,r3,r2
 8003dfc:	1009883a 	mov	r4,r2
 8003e00:	80065b80 	call	80065b8 <__floatunsidf>
 8003e04:	100b883a 	mov	r5,r2
 8003e08:	180d883a 	mov	r6,r3
 8003e0c:	2809883a 	mov	r4,r5
 8003e10:	300b883a 	mov	r5,r6
 8003e14:	000d883a 	mov	r6,zero
 8003e18:	01d02c34 	movhi	r7,16560
 8003e1c:	39ff8004 	addi	r7,r7,-512
 8003e20:	80052740 	call	8005274 <__divdf3>
 8003e24:	1009883a 	mov	r4,r2
 8003e28:	180b883a 	mov	r5,r3
 8003e2c:	2005883a 	mov	r2,r4
 8003e30:	2807883a 	mov	r3,r5
 8003e34:	1009883a 	mov	r4,r2
 8003e38:	180b883a 	mov	r5,r3
 8003e3c:	000d883a 	mov	r6,zero
 8003e40:	01d02274 	movhi	r7,16521
 8003e44:	8005bf40 	call	8005bf4 <__muldf3>
 8003e48:	1009883a 	mov	r4,r2
 8003e4c:	180b883a 	mov	r5,r3
 8003e50:	2005883a 	mov	r2,r4
 8003e54:	2807883a 	mov	r3,r5
 8003e58:	1009883a 	mov	r4,r2
 8003e5c:	180b883a 	mov	r5,r3
 8003e60:	80064600 	call	8006460 <__fixdfsi>
 8003e64:	e0bffe15 	stw	r2,-8(fp)
	p1.y = (double)((y_cord_upper << 7) | y_cord_lower)/4095.0 * 450;
 8003e68:	e0bffd17 	ldw	r2,-12(fp)
 8003e6c:	100691fa 	slli	r3,r2,7
 8003e70:	e0bffc17 	ldw	r2,-16(fp)
 8003e74:	1884b03a 	or	r2,r3,r2
 8003e78:	1009883a 	mov	r4,r2
 8003e7c:	80065b80 	call	80065b8 <__floatunsidf>
 8003e80:	100b883a 	mov	r5,r2
 8003e84:	180d883a 	mov	r6,r3
 8003e88:	2809883a 	mov	r4,r5
 8003e8c:	300b883a 	mov	r5,r6
 8003e90:	000d883a 	mov	r6,zero
 8003e94:	01d02c34 	movhi	r7,16560
 8003e98:	39ff8004 	addi	r7,r7,-512
 8003e9c:	80052740 	call	8005274 <__divdf3>
 8003ea0:	1009883a 	mov	r4,r2
 8003ea4:	180b883a 	mov	r5,r3
 8003ea8:	2005883a 	mov	r2,r4
 8003eac:	2807883a 	mov	r3,r5
 8003eb0:	1009883a 	mov	r4,r2
 8003eb4:	180b883a 	mov	r5,r3
 8003eb8:	000d883a 	mov	r6,zero
 8003ebc:	01d01f34 	movhi	r7,16508
 8003ec0:	39c80004 	addi	r7,r7,8192
 8003ec4:	8005bf40 	call	8005bf4 <__muldf3>
 8003ec8:	1009883a 	mov	r4,r2
 8003ecc:	180b883a 	mov	r5,r3
 8003ed0:	2005883a 	mov	r2,r4
 8003ed4:	2807883a 	mov	r3,r5
 8003ed8:	1009883a 	mov	r4,r2
 8003edc:	180b883a 	mov	r5,r3
 8003ee0:	80064600 	call	8006460 <__fixdfsi>
 8003ee4:	e0bfff15 	stw	r2,-4(fp)

	/*
	 * Change it to -1 so that we can check later if the touch values are valid
	 */
	if(p1.x > 800 || p1.y > 450) {
 8003ee8:	e0bffe17 	ldw	r2,-8(fp)
 8003eec:	1080c848 	cmpgei	r2,r2,801
 8003ef0:	1000031e 	bne	r2,zero,8003f00 <TS_GetRelease+0x174>
 8003ef4:	e0bfff17 	ldw	r2,-4(fp)
 8003ef8:	108070d0 	cmplti	r2,r2,451
 8003efc:	1000041e 	bne	r2,zero,8003f10 <TS_GetRelease+0x184>
		p1.x = -1;
 8003f00:	00bfffc4 	movi	r2,-1
 8003f04:	e0bffe15 	stw	r2,-8(fp)
		p1.y = -1;
 8003f08:	00bfffc4 	movi	r2,-1
 8003f0c:	e0bfff15 	stw	r2,-4(fp)
	}
	// calibrated correctly so that it maps to a pixel on screen
	return p1;
 8003f10:	e0bffe17 	ldw	r2,-8(fp)
 8003f14:	e0ffff17 	ldw	r3,-4(fp)
 8003f18:	1009883a 	mov	r4,r2
 8003f1c:	180b883a 	mov	r5,r3
}
 8003f20:	2005883a 	mov	r2,r4
 8003f24:	2807883a 	mov	r3,r5
 8003f28:	e037883a 	mov	sp,fp
 8003f2c:	dfc00117 	ldw	ra,4(sp)
 8003f30:	df000017 	ldw	fp,0(sp)
 8003f34:	dec00204 	addi	sp,sp,8
 8003f38:	f800283a 	ret

08003f3c <Init_RS232>:


/*****************************************************************************
**  START OF RS232
*****************************************************************************/
void Init_RS232(void) {
 8003f3c:	deffff04 	addi	sp,sp,-4
 8003f40:	df000015 	stw	fp,0(sp)
 8003f44:	d839883a 	mov	fp,sp
	// Reset
	RS232_Control = 0x03;
 8003f48:	00a10034 	movhi	r2,33792
 8003f4c:	10808004 	addi	r2,r2,512
 8003f50:	00c000c4 	movi	r3,3
 8003f54:	10c00005 	stb	r3,0(r2)

	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// transmitter interrupt disabled
	RS232_Control = 0x15;
 8003f58:	00a10034 	movhi	r2,33792
 8003f5c:	10808004 	addi	r2,r2,512
 8003f60:	00c00544 	movi	r3,21
 8003f64:	10c00005 	stb	r3,0(r2)

	// program baud rate generator to use 115k baud
	RS232_Baud = BAUD_115;
 8003f68:	00a10034 	movhi	r2,33792
 8003f6c:	10808104 	addi	r2,r2,516
 8003f70:	00c00044 	movi	r3,1
 8003f74:	10c00005 	stb	r3,0(r2)

}
 8003f78:	e037883a 	mov	sp,fp
 8003f7c:	df000017 	ldw	fp,0(sp)
 8003f80:	dec00104 	addi	sp,sp,4
 8003f84:	f800283a 	ret

08003f88 <putcharRS232>:

int putcharRS232(int c) {
 8003f88:	defffe04 	addi	sp,sp,-8
 8003f8c:	df000115 	stw	fp,4(sp)
 8003f90:	df000104 	addi	fp,sp,4
 8003f94:	e13fff15 	stw	r4,-4(fp)
	// poll Tx bit in 6850 status register. Wait for it to become '1'
	while((RS232_Status & 0x02) != 0x02) {}
 8003f98:	0001883a 	nop
 8003f9c:	00a10034 	movhi	r2,33792
 8003fa0:	10808004 	addi	r2,r2,512
 8003fa4:	10800003 	ldbu	r2,0(r2)
 8003fa8:	10803fcc 	andi	r2,r2,255
 8003fac:	1080008c 	andi	r2,r2,2
 8003fb0:	103ffa26 	beq	r2,zero,8003f9c <__alt_data_end+0xfc003f9c>
	// write 'c' to the 6850 TxData register to output the character

	RS232_TxData = c;
 8003fb4:	00a10034 	movhi	r2,33792
 8003fb8:	10808084 	addi	r2,r2,514
 8003fbc:	e0ffff17 	ldw	r3,-4(fp)
 8003fc0:	10c00005 	stb	r3,0(r2)

	return c;
 8003fc4:	e0bfff17 	ldw	r2,-4(fp)
}
 8003fc8:	e037883a 	mov	sp,fp
 8003fcc:	df000017 	ldw	fp,0(sp)
 8003fd0:	dec00104 	addi	sp,sp,4
 8003fd4:	f800283a 	ret

08003fd8 <getcharRS232>:

int getcharRS232( void ) {
 8003fd8:	deffff04 	addi	sp,sp,-4
 8003fdc:	df000015 	stw	fp,0(sp)
 8003fe0:	d839883a 	mov	fp,sp
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	while((RS232_Status & 0x01) != 0x01) {}
 8003fe4:	0001883a 	nop
 8003fe8:	00a10034 	movhi	r2,33792
 8003fec:	10808004 	addi	r2,r2,512
 8003ff0:	10800003 	ldbu	r2,0(r2)
 8003ff4:	10803fcc 	andi	r2,r2,255
 8003ff8:	1080004c 	andi	r2,r2,1
 8003ffc:	103ffa26 	beq	r2,zero,8003fe8 <__alt_data_end+0xfc003fe8>
	// read received character from 6850 RxData register
	return RS232_RxData;
 8004000:	00a10034 	movhi	r2,33792
 8004004:	10808084 	addi	r2,r2,514
 8004008:	10800003 	ldbu	r2,0(r2)
 800400c:	10803fcc 	andi	r2,r2,255
}
 8004010:	e037883a 	mov	sp,fp
 8004014:	df000017 	ldw	fp,0(sp)
 8004018:	dec00104 	addi	sp,sp,4
 800401c:	f800283a 	ret

08004020 <RS232TestForReceivedData>:

int RS232TestForReceivedData(void) {
 8004020:	deffff04 	addi	sp,sp,-4
 8004024:	df000015 	stw	fp,0(sp)
 8004028:	d839883a 	mov	fp,sp
	// Test Rx bit in 6850 serial comms chip status register
	// if RX bit is set, return TRUE, otherwise return FALSE
	return ((RS232_Status & 0x1) == 0x01);
 800402c:	00a10034 	movhi	r2,33792
 8004030:	10808004 	addi	r2,r2,512
 8004034:	10800003 	ldbu	r2,0(r2)
 8004038:	10803fcc 	andi	r2,r2,255
 800403c:	1080004c 	andi	r2,r2,1
 8004040:	1004c03a 	cmpne	r2,r2,zero
 8004044:	10803fcc 	andi	r2,r2,255
}
 8004048:	e037883a 	mov	sp,fp
 800404c:	df000017 	ldw	fp,0(sp)
 8004050:	dec00104 	addi	sp,sp,4
 8004054:	f800283a 	ret

08004058 <Wifi_Init>:
*****************************************************************************/

/*****************************************************************************
** Initialise wifi controller
*****************************************************************************/
void Wifi_Init(void) {
 8004058:	defffd04 	addi	sp,sp,-12
 800405c:	dfc00215 	stw	ra,8(sp)
 8004060:	df000115 	stw	fp,4(sp)
 8004064:	df000104 	addi	fp,sp,4
	// Reset
	Wifi_Control = 0x03;
 8004068:	00a10034 	movhi	r2,33792
 800406c:	10809004 	addi	r2,r2,576
 8004070:	00c000c4 	movi	r3,3
 8004074:	10c00005 	stb	r3,0(r2)

	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// transmitter interrupt disabled
	Wifi_Control = 0x55;
 8004078:	00a10034 	movhi	r2,33792
 800407c:	10809004 	addi	r2,r2,576
 8004080:	00c01544 	movi	r3,85
 8004084:	10c00005 	stb	r3,0(r2)

	// set 115200 Baud
	Wifi_Baud = 0x1;
 8004088:	00a10034 	movhi	r2,33792
 800408c:	10809104 	addi	r2,r2,580
 8004090:	00c00044 	movi	r3,1
 8004094:	10c00005 	stb	r3,0(r2)

	usleep(100000);
 8004098:	010000b4 	movhi	r4,2
 800409c:	2121a804 	addi	r4,r4,-31072
 80040a0:	80165880 	call	8016588 <usleep>

	int i;
	for(i=0;i<10;i++) {
 80040a4:	e03fff15 	stw	zero,-4(fp)
 80040a8:	00000606 	br	80040c4 <Wifi_Init+0x6c>
		Wifi_SendCommand(" \r\n");
 80040ac:	010200b4 	movhi	r4,2050
 80040b0:	210c9704 	addi	r4,r4,12892
 80040b4:	800444c0 	call	800444c <Wifi_SendCommand>
	Wifi_Baud = 0x1;

	usleep(100000);

	int i;
	for(i=0;i<10;i++) {
 80040b8:	e0bfff17 	ldw	r2,-4(fp)
 80040bc:	10800044 	addi	r2,r2,1
 80040c0:	e0bfff15 	stw	r2,-4(fp)
 80040c4:	e0bfff17 	ldw	r2,-4(fp)
 80040c8:	10800290 	cmplti	r2,r2,10
 80040cc:	103ff71e 	bne	r2,zero,80040ac <__alt_data_end+0xfc0040ac>
		Wifi_SendCommand(" \r\n");
	}

	printf("Wifi inititalised\n");
 80040d0:	010200b4 	movhi	r4,2050
 80040d4:	210c9804 	addi	r4,r4,12896
 80040d8:	80073900 	call	8007390 <puts>
}
 80040dc:	e037883a 	mov	sp,fp
 80040e0:	dfc00117 	ldw	ra,4(sp)
 80040e4:	df000017 	ldw	fp,0(sp)
 80040e8:	dec00204 	addi	sp,sp,8
 80040ec:	f800283a 	ret

080040f0 <Wifi_ReadResponse>:


/*****************************************************************************
* Read wifi response into buf for n bytes
*****************************************************************************/
int Wifi_ReadResponse() {
 80040f0:	defffc04 	addi	sp,sp,-16
 80040f4:	dfc00315 	stw	ra,12(sp)
 80040f8:	df000215 	stw	fp,8(sp)
 80040fc:	df000204 	addi	fp,sp,8
	int i;
	char data;
	for(i=0;i<BUF_SIZE;i++) {
 8004100:	e03ffe15 	stw	zero,-8(fp)
 8004104:	00001106 	br	800414c <Wifi_ReadResponse+0x5c>
		data = Wifi_ReadRx();
 8004108:	80045000 	call	8004500 <Wifi_ReadRx>
 800410c:	e0bfff05 	stb	r2,-4(fp)
		if(isascii(data)) {
 8004110:	e0bfff07 	ldb	r2,-4(fp)
 8004114:	10000a16 	blt	r2,zero,8004140 <Wifi_ReadResponse+0x50>
			rbuf[i] = data;
 8004118:	e0ffff03 	ldbu	r3,-4(fp)
 800411c:	008200b4 	movhi	r2,2050
 8004120:	109c2904 	addi	r2,r2,28836
 8004124:	e13ffe17 	ldw	r4,-8(fp)
 8004128:	1105883a 	add	r2,r2,r4
 800412c:	10c00005 	stb	r3,0(r2)
			if(data == '>')
 8004130:	e0bfff07 	ldb	r2,-4(fp)
 8004134:	10800f98 	cmpnei	r2,r2,62
 8004138:	1000011e 	bne	r2,zero,8004140 <Wifi_ReadResponse+0x50>
				break;
 800413c:	00000606 	br	8004158 <Wifi_ReadResponse+0x68>
* Read wifi response into buf for n bytes
*****************************************************************************/
int Wifi_ReadResponse() {
	int i;
	char data;
	for(i=0;i<BUF_SIZE;i++) {
 8004140:	e0bffe17 	ldw	r2,-8(fp)
 8004144:	10800044 	addi	r2,r2,1
 8004148:	e0bffe15 	stw	r2,-8(fp)
 800414c:	e0bffe17 	ldw	r2,-8(fp)
 8004150:	10808010 	cmplti	r2,r2,512
 8004154:	103fec1e 	bne	r2,zero,8004108 <__alt_data_end+0xfc004108>
			rbuf[i] = data;
			if(data == '>')
				break;
		}
	}
	rbuf[i]='\0';
 8004158:	008200b4 	movhi	r2,2050
 800415c:	109c2904 	addi	r2,r2,28836
 8004160:	e0fffe17 	ldw	r3,-8(fp)
 8004164:	10c5883a 	add	r2,r2,r3
 8004168:	10000005 	stb	zero,0(r2)
	//printf("%s\n",rbuf);
	return i;
 800416c:	e0bffe17 	ldw	r2,-8(fp)
}
 8004170:	e037883a 	mov	sp,fp
 8004174:	dfc00117 	ldw	ra,4(sp)
 8004178:	df000017 	ldw	fp,0(sp)
 800417c:	dec00204 	addi	sp,sp,8
 8004180:	f800283a 	ret

08004184 <Wifi_PrintResponse>:

/*****************************************************************************
* Wifi print response
*****************************************************************************/
int Wifi_PrintResponse() {
 8004184:	defffe04 	addi	sp,sp,-8
 8004188:	dfc00115 	stw	ra,4(sp)
 800418c:	df000015 	stw	fp,0(sp)
 8004190:	d839883a 	mov	fp,sp
	printf("%s",rbuf);
 8004194:	010200b4 	movhi	r4,2050
 8004198:	210c9d04 	addi	r4,r4,12916
 800419c:	014200b4 	movhi	r5,2050
 80041a0:	295c2904 	addi	r5,r5,28836
 80041a4:	800729c0 	call	800729c <printf>
	return 0;
 80041a8:	0005883a 	mov	r2,zero
}
 80041ac:	e037883a 	mov	sp,fp
 80041b0:	dfc00117 	ldw	ra,4(sp)
 80041b4:	df000017 	ldw	fp,0(sp)
 80041b8:	dec00204 	addi	sp,sp,8
 80041bc:	f800283a 	ret

080041c0 <Wifi_CopyBuffer>:

/*****************************************************************************
* Copy over nbytes from rbuf to to cbuf
* *****************************************************************************/
void Wifi_CopyBuffer(int nbytes) {
 80041c0:	defffc04 	addi	sp,sp,-16
 80041c4:	dfc00315 	stw	ra,12(sp)
 80041c8:	df000215 	stw	fp,8(sp)
 80041cc:	df000204 	addi	fp,sp,8
 80041d0:	e13fff15 	stw	r4,-4(fp)
	// Clear the original dest
	Wifi_ClearBuffer(cbuf);
 80041d4:	010200b4 	movhi	r4,2050
 80041d8:	211ca904 	addi	r4,r4,29348
 80041dc:	800423c0 	call	800423c <Wifi_ClearBuffer>
	int i;
	for(i=0;i<nbytes;i++) {
 80041e0:	e03ffe15 	stw	zero,-8(fp)
 80041e4:	00000d06 	br	800421c <Wifi_CopyBuffer+0x5c>
		cbuf[i] = rbuf[i];
 80041e8:	008200b4 	movhi	r2,2050
 80041ec:	109c2904 	addi	r2,r2,28836
 80041f0:	e0fffe17 	ldw	r3,-8(fp)
 80041f4:	10c5883a 	add	r2,r2,r3
 80041f8:	10c00003 	ldbu	r3,0(r2)
 80041fc:	008200b4 	movhi	r2,2050
 8004200:	109ca904 	addi	r2,r2,29348
 8004204:	e13ffe17 	ldw	r4,-8(fp)
 8004208:	1105883a 	add	r2,r2,r4
 800420c:	10c00005 	stb	r3,0(r2)
* *****************************************************************************/
void Wifi_CopyBuffer(int nbytes) {
	// Clear the original dest
	Wifi_ClearBuffer(cbuf);
	int i;
	for(i=0;i<nbytes;i++) {
 8004210:	e0bffe17 	ldw	r2,-8(fp)
 8004214:	10800044 	addi	r2,r2,1
 8004218:	e0bffe15 	stw	r2,-8(fp)
 800421c:	e0fffe17 	ldw	r3,-8(fp)
 8004220:	e0bfff17 	ldw	r2,-4(fp)
 8004224:	18bff016 	blt	r3,r2,80041e8 <__alt_data_end+0xfc0041e8>
		cbuf[i] = rbuf[i];
	}
}
 8004228:	e037883a 	mov	sp,fp
 800422c:	dfc00117 	ldw	ra,4(sp)
 8004230:	df000017 	ldw	fp,0(sp)
 8004234:	dec00204 	addi	sp,sp,8
 8004238:	f800283a 	ret

0800423c <Wifi_ClearBuffer>:

/*****************************************************************************
* Clear buffers BUF_SIZE
******************************************************************************/
void Wifi_ClearBuffer(unsigned char* buf) {
 800423c:	defffd04 	addi	sp,sp,-12
 8004240:	df000215 	stw	fp,8(sp)
 8004244:	df000204 	addi	fp,sp,8
 8004248:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=0;i<BUF_SIZE;i++) {
 800424c:	e03ffe15 	stw	zero,-8(fp)
 8004250:	00000706 	br	8004270 <Wifi_ClearBuffer+0x34>
		buf[i] = '\0';
 8004254:	e0bffe17 	ldw	r2,-8(fp)
 8004258:	e0ffff17 	ldw	r3,-4(fp)
 800425c:	1885883a 	add	r2,r3,r2
 8004260:	10000005 	stb	zero,0(r2)
/*****************************************************************************
* Clear buffers BUF_SIZE
******************************************************************************/
void Wifi_ClearBuffer(unsigned char* buf) {
	int i;
	for(i=0;i<BUF_SIZE;i++) {
 8004264:	e0bffe17 	ldw	r2,-8(fp)
 8004268:	10800044 	addi	r2,r2,1
 800426c:	e0bffe15 	stw	r2,-8(fp)
 8004270:	e0bffe17 	ldw	r2,-8(fp)
 8004274:	10808010 	cmplti	r2,r2,512
 8004278:	103ff61e 	bne	r2,zero,8004254 <__alt_data_end+0xfc004254>
		buf[i] = '\0';
	}
}
 800427c:	e037883a 	mov	sp,fp
 8004280:	df000017 	ldw	fp,0(sp)
 8004284:	dec00104 	addi	sp,sp,4
 8004288:	f800283a 	ret

0800428c <Wifi_EnsureConnection>:

/*****************************************************************************
* Keeps sending check wifi until we have connected
******************************************************************************/
void Wifi_EnsureConnection() {
 800428c:	defffe04 	addi	sp,sp,-8
 8004290:	dfc00115 	stw	ra,4(sp)
 8004294:	df000015 	stw	fp,0(sp)
 8004298:	d839883a 	mov	fp,sp
	Wifi_SendCommand("check_wifi()\r\n");
 800429c:	010200b4 	movhi	r4,2050
 80042a0:	210c9e04 	addi	r4,r4,12920
 80042a4:	800444c0 	call	800444c <Wifi_SendCommand>
	Wifi_ReadResponse();
 80042a8:	80040f00 	call	80040f0 <Wifi_ReadResponse>
	while(strchr(rbuf,'!') == NULL) {
 80042ac:	00000706 	br	80042cc <Wifi_EnsureConnection+0x40>
		// Go to sleep and try again in a bit
		usleep(500000);
 80042b0:	01000234 	movhi	r4,8
 80042b4:	21284804 	addi	r4,r4,-24288
 80042b8:	80165880 	call	8016588 <usleep>
		Wifi_SendCommand("check_wifi()\r\n");
 80042bc:	010200b4 	movhi	r4,2050
 80042c0:	210c9e04 	addi	r4,r4,12920
 80042c4:	800444c0 	call	800444c <Wifi_SendCommand>
		Wifi_ReadResponse();
 80042c8:	80040f00 	call	80040f0 <Wifi_ReadResponse>
* Keeps sending check wifi until we have connected
******************************************************************************/
void Wifi_EnsureConnection() {
	Wifi_SendCommand("check_wifi()\r\n");
	Wifi_ReadResponse();
	while(strchr(rbuf,'!') == NULL) {
 80042cc:	010200b4 	movhi	r4,2050
 80042d0:	211c2904 	addi	r4,r4,28836
 80042d4:	01400844 	movi	r5,33
 80042d8:	80076f40 	call	80076f4 <strchr>
 80042dc:	103ff426 	beq	r2,zero,80042b0 <__alt_data_end+0xfc0042b0>
		// Go to sleep and try again in a bit
		usleep(500000);
		Wifi_SendCommand("check_wifi()\r\n");
		Wifi_ReadResponse();
	}
	printf("%s\n",rbuf);
 80042e0:	010200b4 	movhi	r4,2050
 80042e4:	211c2904 	addi	r4,r4,28836
 80042e8:	80073900 	call	8007390 <puts>
}
 80042ec:	e037883a 	mov	sp,fp
 80042f0:	dfc00117 	ldw	ra,4(sp)
 80042f4:	df000017 	ldw	fp,0(sp)
 80042f8:	dec00204 	addi	sp,sp,8
 80042fc:	f800283a 	ret

08004300 <Wifi_EnsureGet>:

/*****************************************************************************
* Keep sending get requests until we get a response
******************************************************************************/
void Wifi_EnsureGet(int pk) {
 8004300:	defff904 	addi	sp,sp,-28
 8004304:	dfc00615 	stw	ra,24(sp)
 8004308:	df000515 	stw	fp,20(sp)
 800430c:	df000504 	addi	fp,sp,20
 8004310:	e13fff15 	stw	r4,-4(fp)
	char buf[16];
	snprintf(buf, sizeof buf, "send_get(%d)\r\n", pk);
 8004314:	e13ffb04 	addi	r4,fp,-20
 8004318:	01400404 	movi	r5,16
 800431c:	018200b4 	movhi	r6,2050
 8004320:	318ca204 	addi	r6,r6,12936
 8004324:	e1ffff17 	ldw	r7,-4(fp)
 8004328:	800754c0 	call	800754c <snprintf>
	Wifi_SendCommand(buf);
 800432c:	e13ffb04 	addi	r4,fp,-20
 8004330:	800444c0 	call	800444c <Wifi_SendCommand>
	Wifi_ReadResponse();
 8004334:	80040f00 	call	80040f0 <Wifi_ReadResponse>
	while(Wifi_ExtractJson(rbuf, jsonbuf) == EJSON && strlen(jsonbuf) < 78) {
 8004338:	00000306 	br	8004348 <Wifi_EnsureGet+0x48>
		Wifi_SendCommand(buf);
 800433c:	e13ffb04 	addi	r4,fp,-20
 8004340:	800444c0 	call	800444c <Wifi_SendCommand>
		Wifi_ReadResponse();
 8004344:	80040f00 	call	80040f0 <Wifi_ReadResponse>
void Wifi_EnsureGet(int pk) {
	char buf[16];
	snprintf(buf, sizeof buf, "send_get(%d)\r\n", pk);
	Wifi_SendCommand(buf);
	Wifi_ReadResponse();
	while(Wifi_ExtractJson(rbuf, jsonbuf) == EJSON && strlen(jsonbuf) < 78) {
 8004348:	010200b4 	movhi	r4,2050
 800434c:	211c2904 	addi	r4,r4,28836
 8004350:	014200b4 	movhi	r5,2050
 8004354:	295c0904 	addi	r5,r5,28708
 8004358:	80045980 	call	8004598 <Wifi_ExtractJson>
 800435c:	10800058 	cmpnei	r2,r2,1
 8004360:	1000051e 	bne	r2,zero,8004378 <Wifi_EnsureGet+0x78>
 8004364:	010200b4 	movhi	r4,2050
 8004368:	211c0904 	addi	r4,r4,28708
 800436c:	80079640 	call	8007964 <strlen>
 8004370:	108013b0 	cmpltui	r2,r2,78
 8004374:	103ff11e 	bne	r2,zero,800433c <__alt_data_end+0xfc00433c>
		Wifi_SendCommand(buf);
		Wifi_ReadResponse();
	}
}
 8004378:	e037883a 	mov	sp,fp
 800437c:	dfc00117 	ldw	ra,4(sp)
 8004380:	df000017 	ldw	fp,0(sp)
 8004384:	dec00204 	addi	sp,sp,8
 8004388:	f800283a 	ret

0800438c <Wifi_EnsurePut>:

/*****************************************************************************
* Keep sending post requests until we get a response
* Should only be used when registering
******************************************************************************/
void Wifi_EnsurePut(int pk, const char *masterpw, const char *pw, const char *isconfirmed, const char *phonenum) {
 800438c:	deffe604 	addi	sp,sp,-104
 8004390:	dfc01915 	stw	ra,100(sp)
 8004394:	df001815 	stw	fp,96(sp)
 8004398:	df001804 	addi	fp,sp,96
 800439c:	e13ffc15 	stw	r4,-16(fp)
 80043a0:	e17ffd15 	stw	r5,-12(fp)
 80043a4:	e1bffe15 	stw	r6,-8(fp)
 80043a8:	e1ffff15 	stw	r7,-4(fp)
	char buf[64];
	snprintf(buf, sizeof buf, "send_put(%d,\"%s\",\"%s\",\"%s\",\"%s\")\r\n", pk, masterpw, pw, isconfirmed, phonenum);
 80043ac:	e0bffd17 	ldw	r2,-12(fp)
 80043b0:	d8800015 	stw	r2,0(sp)
 80043b4:	e0bffe17 	ldw	r2,-8(fp)
 80043b8:	d8800115 	stw	r2,4(sp)
 80043bc:	e0bfff17 	ldw	r2,-4(fp)
 80043c0:	d8800215 	stw	r2,8(sp)
 80043c4:	e0800217 	ldw	r2,8(fp)
 80043c8:	d8800315 	stw	r2,12(sp)
 80043cc:	e13fec04 	addi	r4,fp,-80
 80043d0:	01401004 	movi	r5,64
 80043d4:	018200b4 	movhi	r6,2050
 80043d8:	318ca604 	addi	r6,r6,12952
 80043dc:	e1fffc17 	ldw	r7,-16(fp)
 80043e0:	800754c0 	call	800754c <snprintf>
	Wifi_SendCommand(buf);
 80043e4:	e13fec04 	addi	r4,fp,-80
 80043e8:	800444c0 	call	800444c <Wifi_SendCommand>
	Wifi_ReadResponse();
 80043ec:	80040f00 	call	80040f0 <Wifi_ReadResponse>
	while(Wifi_ExtractJson(rbuf, jsonbuf) == EJSON) {
 80043f0:	00000306 	br	8004400 <Wifi_EnsurePut+0x74>
		Wifi_SendCommand(buf);
 80043f4:	e13fec04 	addi	r4,fp,-80
 80043f8:	800444c0 	call	800444c <Wifi_SendCommand>
		Wifi_ReadResponse();
 80043fc:	80040f00 	call	80040f0 <Wifi_ReadResponse>
void Wifi_EnsurePut(int pk, const char *masterpw, const char *pw, const char *isconfirmed, const char *phonenum) {
	char buf[64];
	snprintf(buf, sizeof buf, "send_put(%d,\"%s\",\"%s\",\"%s\",\"%s\")\r\n", pk, masterpw, pw, isconfirmed, phonenum);
	Wifi_SendCommand(buf);
	Wifi_ReadResponse();
	while(Wifi_ExtractJson(rbuf, jsonbuf) == EJSON) {
 8004400:	010200b4 	movhi	r4,2050
 8004404:	211c2904 	addi	r4,r4,28836
 8004408:	014200b4 	movhi	r5,2050
 800440c:	295c0904 	addi	r5,r5,28708
 8004410:	80045980 	call	8004598 <Wifi_ExtractJson>
 8004414:	10800060 	cmpeqi	r2,r2,1
 8004418:	103ff61e 	bne	r2,zero,80043f4 <__alt_data_end+0xfc0043f4>
		Wifi_SendCommand(buf);
		Wifi_ReadResponse();
	}
}
 800441c:	e037883a 	mov	sp,fp
 8004420:	dfc00117 	ldw	ra,4(sp)
 8004424:	df000017 	ldw	fp,0(sp)
 8004428:	dec00204 	addi	sp,sp,8
 800442c:	f800283a 	ret

08004430 <Wifi_WaitUntilReady>:

/*****************************************************************************
* Wait Until The User has approved the request
*****************************************************************************/
int Wifi_WaitUntilReady() {
 8004430:	deffff04 	addi	sp,sp,-4
 8004434:	df000015 	stw	fp,0(sp)
 8004438:	d839883a 	mov	fp,sp

}
 800443c:	e037883a 	mov	sp,fp
 8004440:	df000017 	ldw	fp,0(sp)
 8004444:	dec00104 	addi	sp,sp,4
 8004448:	f800283a 	ret

0800444c <Wifi_SendCommand>:


/*****************************************************************************
* Send a command should end in \r\n
*****************************************************************************/
void Wifi_SendCommand(const char * command) {
 800444c:	defffc04 	addi	sp,sp,-16
 8004450:	dfc00315 	stw	ra,12(sp)
 8004454:	df000215 	stw	fp,8(sp)
 8004458:	df000204 	addi	fp,sp,8
 800445c:	e13fff15 	stw	r4,-4(fp)
	// Clear the response buffer before each command
	Wifi_ClearBuffer(rbuf);
 8004460:	010200b4 	movhi	r4,2050
 8004464:	211c2904 	addi	r4,r4,28836
 8004468:	800423c0 	call	800423c <Wifi_ClearBuffer>
	int cur_1=0;
 800446c:	e03ffe15 	stw	zero,-8(fp)
	while(command[cur_1] != '\n') {
 8004470:	00000c06 	br	80044a4 <Wifi_SendCommand+0x58>
		Wifi_WriteTx(command[cur_1]);
 8004474:	e0bffe17 	ldw	r2,-8(fp)
 8004478:	e0ffff17 	ldw	r3,-4(fp)
 800447c:	1885883a 	add	r2,r3,r2
 8004480:	10800003 	ldbu	r2,0(r2)
 8004484:	10803fcc 	andi	r2,r2,255
 8004488:	1080201c 	xori	r2,r2,128
 800448c:	10bfe004 	addi	r2,r2,-128
 8004490:	1009883a 	mov	r4,r2
 8004494:	80045480 	call	8004548 <Wifi_WriteTx>
		cur_1++;
 8004498:	e0bffe17 	ldw	r2,-8(fp)
 800449c:	10800044 	addi	r2,r2,1
 80044a0:	e0bffe15 	stw	r2,-8(fp)
*****************************************************************************/
void Wifi_SendCommand(const char * command) {
	// Clear the response buffer before each command
	Wifi_ClearBuffer(rbuf);
	int cur_1=0;
	while(command[cur_1] != '\n') {
 80044a4:	e0bffe17 	ldw	r2,-8(fp)
 80044a8:	e0ffff17 	ldw	r3,-4(fp)
 80044ac:	1885883a 	add	r2,r3,r2
 80044b0:	10800003 	ldbu	r2,0(r2)
 80044b4:	10803fcc 	andi	r2,r2,255
 80044b8:	1080201c 	xori	r2,r2,128
 80044bc:	10bfe004 	addi	r2,r2,-128
 80044c0:	10800298 	cmpnei	r2,r2,10
 80044c4:	103feb1e 	bne	r2,zero,8004474 <__alt_data_end+0xfc004474>
		Wifi_WriteTx(command[cur_1]);
		cur_1++;
	}
	Wifi_WriteTx(command[cur_1]);
 80044c8:	e0bffe17 	ldw	r2,-8(fp)
 80044cc:	e0ffff17 	ldw	r3,-4(fp)
 80044d0:	1885883a 	add	r2,r3,r2
 80044d4:	10800003 	ldbu	r2,0(r2)
 80044d8:	10803fcc 	andi	r2,r2,255
 80044dc:	1080201c 	xori	r2,r2,128
 80044e0:	10bfe004 	addi	r2,r2,-128
 80044e4:	1009883a 	mov	r4,r2
 80044e8:	80045480 	call	8004548 <Wifi_WriteTx>
}
 80044ec:	e037883a 	mov	sp,fp
 80044f0:	dfc00117 	ldw	ra,4(sp)
 80044f4:	df000017 	ldw	fp,0(sp)
 80044f8:	dec00204 	addi	sp,sp,8
 80044fc:	f800283a 	ret

08004500 <Wifi_ReadRx>:


/*****************************************************************************
* Read Rx
*****************************************************************************/
int Wifi_ReadRx(void) {
 8004500:	deffff04 	addi	sp,sp,-4
 8004504:	df000015 	stw	fp,0(sp)
 8004508:	d839883a 	mov	fp,sp
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	while((Wifi_Status & 0x01) != 0x01) {}
 800450c:	0001883a 	nop
 8004510:	00a10034 	movhi	r2,33792
 8004514:	10809004 	addi	r2,r2,576
 8004518:	10800003 	ldbu	r2,0(r2)
 800451c:	10803fcc 	andi	r2,r2,255
 8004520:	1080004c 	andi	r2,r2,1
 8004524:	103ffa26 	beq	r2,zero,8004510 <__alt_data_end+0xfc004510>
	return Wifi_RxData;
 8004528:	00a10034 	movhi	r2,33792
 800452c:	10809084 	addi	r2,r2,578
 8004530:	10800003 	ldbu	r2,0(r2)
 8004534:	10803fcc 	andi	r2,r2,255
}
 8004538:	e037883a 	mov	sp,fp
 800453c:	df000017 	ldw	fp,0(sp)
 8004540:	dec00104 	addi	sp,sp,4
 8004544:	f800283a 	ret

08004548 <Wifi_WriteTx>:


/*****************************************************************************
* Write Tx
*****************************************************************************/
void Wifi_WriteTx(char val) {
 8004548:	defffe04 	addi	sp,sp,-8
 800454c:	df000115 	stw	fp,4(sp)
 8004550:	df000104 	addi	fp,sp,4
 8004554:	2005883a 	mov	r2,r4
 8004558:	e0bfff05 	stb	r2,-4(fp)
	// poll tx bit in 6850 status register. Wait for it to become '2'
	while((Wifi_Status & 0x02) != 0x02) {}
 800455c:	0001883a 	nop
 8004560:	00a10034 	movhi	r2,33792
 8004564:	10809004 	addi	r2,r2,576
 8004568:	10800003 	ldbu	r2,0(r2)
 800456c:	10803fcc 	andi	r2,r2,255
 8004570:	1080008c 	andi	r2,r2,2
 8004574:	103ffa26 	beq	r2,zero,8004560 <__alt_data_end+0xfc004560>
	Wifi_TxData = val;
 8004578:	00a10034 	movhi	r2,33792
 800457c:	10809084 	addi	r2,r2,578
 8004580:	e0ffff03 	ldbu	r3,-4(fp)
 8004584:	10c00005 	stb	r3,0(r2)
}
 8004588:	e037883a 	mov	sp,fp
 800458c:	df000017 	ldw	fp,0(sp)
 8004590:	dec00104 	addi	sp,sp,4
 8004594:	f800283a 	ret

08004598 <Wifi_ExtractJson>:

/*****************************************************************************
* Parse out the json from response
*****************************************************************************/
int Wifi_ExtractJson(char *src, char *dst) {
 8004598:	defff704 	addi	sp,sp,-36
 800459c:	dfc00815 	stw	ra,32(sp)
 80045a0:	df000715 	stw	fp,28(sp)
 80045a4:	df000704 	addi	fp,sp,28
 80045a8:	e13ffe15 	stw	r4,-8(fp)
 80045ac:	e17fff15 	stw	r5,-4(fp)
	// Figure out the the left and right indices of the
	char *leftbracket = strchr(src, '{');
 80045b0:	e13ffe17 	ldw	r4,-8(fp)
 80045b4:	01401ec4 	movi	r5,123
 80045b8:	80076f40 	call	80076f4 <strchr>
 80045bc:	e0bff915 	stw	r2,-28(fp)
	char *rightbracket = strchr(src, '}');
 80045c0:	e13ffe17 	ldw	r4,-8(fp)
 80045c4:	01401f44 	movi	r5,125
 80045c8:	80076f40 	call	80076f4 <strchr>
 80045cc:	e0bffa15 	stw	r2,-24(fp)

	if(leftbracket == NULL || rightbracket == NULL) {
 80045d0:	e0bff917 	ldw	r2,-28(fp)
 80045d4:	10000226 	beq	r2,zero,80045e0 <Wifi_ExtractJson+0x48>
 80045d8:	e0bffa17 	ldw	r2,-24(fp)
 80045dc:	1000021e 	bne	r2,zero,80045e8 <Wifi_ExtractJson+0x50>
		return EJSON;
 80045e0:	00800044 	movi	r2,1
 80045e4:	00001b06 	br	8004654 <Wifi_ExtractJson+0xbc>
	}
	int leftindex = (int)(leftbracket - src);
 80045e8:	e0fff917 	ldw	r3,-28(fp)
 80045ec:	e0bffe17 	ldw	r2,-8(fp)
 80045f0:	1885c83a 	sub	r2,r3,r2
 80045f4:	e0bffb15 	stw	r2,-20(fp)
	int rightindex = (int)(rightbracket - src);
 80045f8:	e0fffa17 	ldw	r3,-24(fp)
 80045fc:	e0bffe17 	ldw	r2,-8(fp)
 8004600:	1885c83a 	sub	r2,r3,r2
 8004604:	e0bffc15 	stw	r2,-16(fp)

	int diff = rightindex - leftindex;
 8004608:	e0fffc17 	ldw	r3,-16(fp)
 800460c:	e0bffb17 	ldw	r2,-20(fp)
 8004610:	1885c83a 	sub	r2,r3,r2
 8004614:	e0bffd15 	stw	r2,-12(fp)

	// copy the substring
	memcpy(dst, &src[leftindex+1], diff-1);
 8004618:	e0bffb17 	ldw	r2,-20(fp)
 800461c:	10800044 	addi	r2,r2,1
 8004620:	e0fffe17 	ldw	r3,-8(fp)
 8004624:	1887883a 	add	r3,r3,r2
 8004628:	e0bffd17 	ldw	r2,-12(fp)
 800462c:	10bfffc4 	addi	r2,r2,-1
 8004630:	e13fff17 	ldw	r4,-4(fp)
 8004634:	180b883a 	mov	r5,r3
 8004638:	100d883a 	mov	r6,r2
 800463c:	80071380 	call	8007138 <memcpy>
	dst[diff] = '\0';
 8004640:	e0bffd17 	ldw	r2,-12(fp)
 8004644:	e0ffff17 	ldw	r3,-4(fp)
 8004648:	1885883a 	add	r2,r3,r2
 800464c:	10000005 	stb	zero,0(r2)
	return 0;
 8004650:	0005883a 	mov	r2,zero
}
 8004654:	e037883a 	mov	sp,fp
 8004658:	dfc00117 	ldw	ra,4(sp)
 800465c:	df000017 	ldw	fp,0(sp)
 8004660:	dec00204 	addi	sp,sp,8
 8004664:	f800283a 	ret

08004668 <Wifi_ParsePhoneNumber>:

/*****************************************************************************
* Parse out the phone number from response
*****************************************************************************/
int Wifi_ParsePhoneNumber(char *src, char *dst) {
 8004668:	defff204 	addi	sp,sp,-56
 800466c:	dfc00d15 	stw	ra,52(sp)
 8004670:	df000c15 	stw	fp,48(sp)
 8004674:	df000c04 	addi	fp,sp,48
 8004678:	e13ffe15 	stw	r4,-8(fp)
 800467c:	e17fff15 	stw	r5,-4(fp)
	char *copy = (char *)malloc(16);
 8004680:	01000404 	movi	r4,16
 8004684:	80069680 	call	8006968 <malloc>
 8004688:	e0bff615 	stw	r2,-40(fp)
	strcpy(copy, src);
 800468c:	e13ff617 	ldw	r4,-40(fp)
 8004690:	e17ffe17 	ldw	r5,-8(fp)
 8004694:	80078580 	call	8007858 <strcpy>

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
 8004698:	e13ff617 	ldw	r4,-40(fp)
 800469c:	014200b4 	movhi	r5,2050
 80046a0:	294caf04 	addi	r5,r5,12988
 80046a4:	80079fc0 	call	80079fc <strtok>
 80046a8:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 80046ac:	e03ff515 	stw	zero,-44(fp)

	while(p != NULL) {
 80046b0:	00000f06 	br	80046f0 <Wifi_ParsePhoneNumber+0x88>
  	res[i++] = p;
 80046b4:	e0bff517 	ldw	r2,-44(fp)
 80046b8:	10c00044 	addi	r3,r2,1
 80046bc:	e0fff515 	stw	r3,-44(fp)
 80046c0:	1085883a 	add	r2,r2,r2
 80046c4:	1085883a 	add	r2,r2,r2
 80046c8:	e0fff404 	addi	r3,fp,-48
 80046cc:	1885883a 	add	r2,r3,r2
 80046d0:	10800504 	addi	r2,r2,20
 80046d4:	e0fff417 	ldw	r3,-48(fp)
 80046d8:	10c00015 	stw	r3,0(r2)
  	p = strtok(NULL,",");
 80046dc:	0009883a 	mov	r4,zero
 80046e0:	014200b4 	movhi	r5,2050
 80046e4:	294caf04 	addi	r5,r5,12988
 80046e8:	80079fc0 	call	80079fc <strtok>
 80046ec:	e0bff415 	stw	r2,-48(fp)

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
	int i = 0;

	while(p != NULL) {
 80046f0:	e0bff417 	ldw	r2,-48(fp)
 80046f4:	103fef1e 	bne	r2,zero,80046b4 <__alt_data_end+0xfc0046b4>
  	res[i++] = p;
  	p = strtok(NULL,",");
	}

	char *colon = strchr(res[PHONENUM_INDEX],':');
 80046f8:	e0bffc17 	ldw	r2,-16(fp)
 80046fc:	1009883a 	mov	r4,r2
 8004700:	01400e84 	movi	r5,58
 8004704:	80076f40 	call	80076f4 <strchr>
 8004708:	e0bff715 	stw	r2,-36(fp)
	if(colon == NULL) {
 800470c:	e0bff717 	ldw	r2,-36(fp)
 8004710:	1000041e 	bne	r2,zero,8004724 <Wifi_ParsePhoneNumber+0xbc>
		free(copy);
 8004714:	e13ff617 	ldw	r4,-40(fp)
 8004718:	800697c0 	call	800697c <free>
		return EPHN;
 800471c:	00800084 	movi	r2,2
 8004720:	00001206 	br	800476c <Wifi_ParsePhoneNumber+0x104>
	}

	int colonIndex = (int)(colon - res[PHONENUM_INDEX]);
 8004724:	e0bff717 	ldw	r2,-36(fp)
 8004728:	e0fffc17 	ldw	r3,-16(fp)
 800472c:	10c5c83a 	sub	r2,r2,r3
 8004730:	e0bff815 	stw	r2,-32(fp)
	memcpy(dst, res[PHONENUM_INDEX] + colonIndex + 2, 10);
 8004734:	e0fffc17 	ldw	r3,-16(fp)
 8004738:	e0bff817 	ldw	r2,-32(fp)
 800473c:	10800084 	addi	r2,r2,2
 8004740:	1885883a 	add	r2,r3,r2
 8004744:	e13fff17 	ldw	r4,-4(fp)
 8004748:	100b883a 	mov	r5,r2
 800474c:	01800284 	movi	r6,10
 8004750:	80071380 	call	8007138 <memcpy>
	dst[10]='\0';
 8004754:	e0bfff17 	ldw	r2,-4(fp)
 8004758:	10800284 	addi	r2,r2,10
 800475c:	10000005 	stb	zero,0(r2)
	free(copy);
 8004760:	e13ff617 	ldw	r4,-40(fp)
 8004764:	800697c0 	call	800697c <free>
	return 0;
 8004768:	0005883a 	mov	r2,zero
}
 800476c:	e037883a 	mov	sp,fp
 8004770:	dfc00117 	ldw	ra,4(sp)
 8004774:	df000017 	ldw	fp,0(sp)
 8004778:	dec00204 	addi	sp,sp,8
 800477c:	f800283a 	ret

08004780 <Wifi_ParsePw>:

/*****************************************************************************
* Parse out the password from response
*****************************************************************************/
int Wifi_ParsePw(char *src, char *dst) {
 8004780:	defff204 	addi	sp,sp,-56
 8004784:	dfc00d15 	stw	ra,52(sp)
 8004788:	df000c15 	stw	fp,48(sp)
 800478c:	df000c04 	addi	fp,sp,48
 8004790:	e13ffe15 	stw	r4,-8(fp)
 8004794:	e17fff15 	stw	r5,-4(fp)
	char *copy = malloc(sizeof(char)*4);
 8004798:	01000104 	movi	r4,4
 800479c:	80069680 	call	8006968 <malloc>
 80047a0:	e0bff615 	stw	r2,-40(fp)
	strcpy(copy, src);
 80047a4:	e13ff617 	ldw	r4,-40(fp)
 80047a8:	e17ffe17 	ldw	r5,-8(fp)
 80047ac:	80078580 	call	8007858 <strcpy>

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
 80047b0:	e13ff617 	ldw	r4,-40(fp)
 80047b4:	014200b4 	movhi	r5,2050
 80047b8:	294caf04 	addi	r5,r5,12988
 80047bc:	80079fc0 	call	80079fc <strtok>
 80047c0:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 80047c4:	e03ff515 	stw	zero,-44(fp)

	while(p != NULL) {
 80047c8:	00000f06 	br	8004808 <Wifi_ParsePw+0x88>
   	res[i++] = p;
 80047cc:	e0bff517 	ldw	r2,-44(fp)
 80047d0:	10c00044 	addi	r3,r2,1
 80047d4:	e0fff515 	stw	r3,-44(fp)
 80047d8:	1085883a 	add	r2,r2,r2
 80047dc:	1085883a 	add	r2,r2,r2
 80047e0:	e0fff404 	addi	r3,fp,-48
 80047e4:	1885883a 	add	r2,r3,r2
 80047e8:	10800504 	addi	r2,r2,20
 80047ec:	e0fff417 	ldw	r3,-48(fp)
 80047f0:	10c00015 	stw	r3,0(r2)
   	p = strtok(NULL,",");
 80047f4:	0009883a 	mov	r4,zero
 80047f8:	014200b4 	movhi	r5,2050
 80047fc:	294caf04 	addi	r5,r5,12988
 8004800:	80079fc0 	call	80079fc <strtok>
 8004804:	e0bff415 	stw	r2,-48(fp)

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
	int i = 0;

	while(p != NULL) {
 8004808:	e0bff417 	ldw	r2,-48(fp)
 800480c:	103fef1e 	bne	r2,zero,80047cc <__alt_data_end+0xfc0047cc>
   	res[i++] = p;
   	p = strtok(NULL,",");
	}

	char *colon = strchr(res[PW_INDEX],':');
 8004810:	e0bffa17 	ldw	r2,-24(fp)
 8004814:	1009883a 	mov	r4,r2
 8004818:	01400e84 	movi	r5,58
 800481c:	80076f40 	call	80076f4 <strchr>
 8004820:	e0bff715 	stw	r2,-36(fp)
	if(colon == NULL) {
 8004824:	e0bff717 	ldw	r2,-36(fp)
 8004828:	1000041e 	bne	r2,zero,800483c <Wifi_ParsePw+0xbc>
		free(copy);
 800482c:	e13ff617 	ldw	r4,-40(fp)
 8004830:	800697c0 	call	800697c <free>
		return EPW;
 8004834:	008000c4 	movi	r2,3
 8004838:	00001206 	br	8004884 <Wifi_ParsePw+0x104>
	}

	int colonIndex = (int)(colon - res[PW_INDEX]);
 800483c:	e0bff717 	ldw	r2,-36(fp)
 8004840:	e0fffa17 	ldw	r3,-24(fp)
 8004844:	10c5c83a 	sub	r2,r2,r3
 8004848:	e0bff815 	stw	r2,-32(fp)
	memcpy(dst, res[PW_INDEX] + colonIndex + 2, 4);
 800484c:	e0fffa17 	ldw	r3,-24(fp)
 8004850:	e0bff817 	ldw	r2,-32(fp)
 8004854:	10800084 	addi	r2,r2,2
 8004858:	1885883a 	add	r2,r3,r2
 800485c:	e13fff17 	ldw	r4,-4(fp)
 8004860:	100b883a 	mov	r5,r2
 8004864:	01800104 	movi	r6,4
 8004868:	80071380 	call	8007138 <memcpy>
	dst[4]='\0';
 800486c:	e0bfff17 	ldw	r2,-4(fp)
 8004870:	10800104 	addi	r2,r2,4
 8004874:	10000005 	stb	zero,0(r2)
	free(copy);
 8004878:	e13ff617 	ldw	r4,-40(fp)
 800487c:	800697c0 	call	800697c <free>
	return 0;
 8004880:	0005883a 	mov	r2,zero
}
 8004884:	e037883a 	mov	sp,fp
 8004888:	dfc00117 	ldw	ra,4(sp)
 800488c:	df000017 	ldw	fp,0(sp)
 8004890:	dec00204 	addi	sp,sp,8
 8004894:	f800283a 	ret

08004898 <Wifi_ParseMasterPw>:

/*****************************************************************************
* Parse out the master password from response
*****************************************************************************/
int Wifi_ParseMasterPw(char *src, char *dst) {
 8004898:	defff204 	addi	sp,sp,-56
 800489c:	dfc00d15 	stw	ra,52(sp)
 80048a0:	df000c15 	stw	fp,48(sp)
 80048a4:	df000c04 	addi	fp,sp,48
 80048a8:	e13ffe15 	stw	r4,-8(fp)
 80048ac:	e17fff15 	stw	r5,-4(fp)
	char *copy = (char*)malloc(sizeof(char)*6);
 80048b0:	01000184 	movi	r4,6
 80048b4:	80069680 	call	8006968 <malloc>
 80048b8:	e0bff615 	stw	r2,-40(fp)
	strcpy(copy, src);
 80048bc:	e13ff617 	ldw	r4,-40(fp)
 80048c0:	e17ffe17 	ldw	r5,-8(fp)
 80048c4:	80078580 	call	8007858 <strcpy>

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
 80048c8:	e13ff617 	ldw	r4,-40(fp)
 80048cc:	014200b4 	movhi	r5,2050
 80048d0:	294caf04 	addi	r5,r5,12988
 80048d4:	80079fc0 	call	80079fc <strtok>
 80048d8:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 80048dc:	e03ff515 	stw	zero,-44(fp)

	while(p != NULL) {
 80048e0:	00000f06 	br	8004920 <Wifi_ParseMasterPw+0x88>
		res[i++] = p;
 80048e4:	e0bff517 	ldw	r2,-44(fp)
 80048e8:	10c00044 	addi	r3,r2,1
 80048ec:	e0fff515 	stw	r3,-44(fp)
 80048f0:	1085883a 	add	r2,r2,r2
 80048f4:	1085883a 	add	r2,r2,r2
 80048f8:	e0fff404 	addi	r3,fp,-48
 80048fc:	1885883a 	add	r2,r3,r2
 8004900:	10800504 	addi	r2,r2,20
 8004904:	e0fff417 	ldw	r3,-48(fp)
 8004908:	10c00015 	stw	r3,0(r2)
		p = strtok(NULL,",");
 800490c:	0009883a 	mov	r4,zero
 8004910:	014200b4 	movhi	r5,2050
 8004914:	294caf04 	addi	r5,r5,12988
 8004918:	80079fc0 	call	80079fc <strtok>
 800491c:	e0bff415 	stw	r2,-48(fp)

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
	int i = 0;

	while(p != NULL) {
 8004920:	e0bff417 	ldw	r2,-48(fp)
 8004924:	103fef1e 	bne	r2,zero,80048e4 <__alt_data_end+0xfc0048e4>
		res[i++] = p;
		p = strtok(NULL,",");
	}

	char *colon = strchr(res[PWMASTER_INDEX],':');
 8004928:	e0bffb17 	ldw	r2,-20(fp)
 800492c:	1009883a 	mov	r4,r2
 8004930:	01400e84 	movi	r5,58
 8004934:	80076f40 	call	80076f4 <strchr>
 8004938:	e0bff715 	stw	r2,-36(fp)
	if(colon == NULL) {
 800493c:	e0bff717 	ldw	r2,-36(fp)
 8004940:	1000041e 	bne	r2,zero,8004954 <Wifi_ParseMasterPw+0xbc>
		free(copy);
 8004944:	e13ff617 	ldw	r4,-40(fp)
 8004948:	800697c0 	call	800697c <free>
		return EPWMAS;
 800494c:	00800104 	movi	r2,4
 8004950:	00001206 	br	800499c <Wifi_ParseMasterPw+0x104>
	}
	int colonIndex = (int)(colon - res[PWMASTER_INDEX]);
 8004954:	e0bff717 	ldw	r2,-36(fp)
 8004958:	e0fffb17 	ldw	r3,-20(fp)
 800495c:	10c5c83a 	sub	r2,r2,r3
 8004960:	e0bff815 	stw	r2,-32(fp)
	memcpy(dst, res[PWMASTER_INDEX] + colonIndex + 2, 6);
 8004964:	e0fffb17 	ldw	r3,-20(fp)
 8004968:	e0bff817 	ldw	r2,-32(fp)
 800496c:	10800084 	addi	r2,r2,2
 8004970:	1885883a 	add	r2,r3,r2
 8004974:	e13fff17 	ldw	r4,-4(fp)
 8004978:	100b883a 	mov	r5,r2
 800497c:	01800184 	movi	r6,6
 8004980:	80071380 	call	8007138 <memcpy>
	dst[6]='\0';
 8004984:	e0bfff17 	ldw	r2,-4(fp)
 8004988:	10800184 	addi	r2,r2,6
 800498c:	10000005 	stb	zero,0(r2)
	free(copy);
 8004990:	e13ff617 	ldw	r4,-40(fp)
 8004994:	800697c0 	call	800697c <free>
	return 0;
 8004998:	0005883a 	mov	r2,zero
}
 800499c:	e037883a 	mov	sp,fp
 80049a0:	dfc00117 	ldw	ra,4(sp)
 80049a4:	df000017 	ldw	fp,0(sp)
 80049a8:	dec00204 	addi	sp,sp,8
 80049ac:	f800283a 	ret

080049b0 <Wifi_ParseConfirmed>:

/*****************************************************************************
* Parse out confirmed from response
*****************************************************************************/
int Wifi_ParseConfirmed(char *src, char *dst) {
 80049b0:	defff204 	addi	sp,sp,-56
 80049b4:	dfc00d15 	stw	ra,52(sp)
 80049b8:	df000c15 	stw	fp,48(sp)
 80049bc:	df000c04 	addi	fp,sp,48
 80049c0:	e13ffe15 	stw	r4,-8(fp)
 80049c4:	e17fff15 	stw	r5,-4(fp)
	char *copy = (char*)malloc(sizeof(char)*5);
 80049c8:	01000144 	movi	r4,5
 80049cc:	80069680 	call	8006968 <malloc>
 80049d0:	e0bff615 	stw	r2,-40(fp)
	strcpy(copy, src);
 80049d4:	e13ff617 	ldw	r4,-40(fp)
 80049d8:	e17ffe17 	ldw	r5,-8(fp)
 80049dc:	80078580 	call	8007858 <strcpy>

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
 80049e0:	e13ff617 	ldw	r4,-40(fp)
 80049e4:	014200b4 	movhi	r5,2050
 80049e8:	294caf04 	addi	r5,r5,12988
 80049ec:	80079fc0 	call	80079fc <strtok>
 80049f0:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 80049f4:	e03ff515 	stw	zero,-44(fp)

	while(p != NULL) {
 80049f8:	00000f06 	br	8004a38 <Wifi_ParseConfirmed+0x88>
  	res[i++] = p;
 80049fc:	e0bff517 	ldw	r2,-44(fp)
 8004a00:	10c00044 	addi	r3,r2,1
 8004a04:	e0fff515 	stw	r3,-44(fp)
 8004a08:	1085883a 	add	r2,r2,r2
 8004a0c:	1085883a 	add	r2,r2,r2
 8004a10:	e0fff404 	addi	r3,fp,-48
 8004a14:	1885883a 	add	r2,r3,r2
 8004a18:	10800504 	addi	r2,r2,20
 8004a1c:	e0fff417 	ldw	r3,-48(fp)
 8004a20:	10c00015 	stw	r3,0(r2)
  	p = strtok(NULL,",");
 8004a24:	0009883a 	mov	r4,zero
 8004a28:	014200b4 	movhi	r5,2050
 8004a2c:	294caf04 	addi	r5,r5,12988
 8004a30:	80079fc0 	call	80079fc <strtok>
 8004a34:	e0bff415 	stw	r2,-48(fp)

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
	int i = 0;

	while(p != NULL) {
 8004a38:	e0bff417 	ldw	r2,-48(fp)
 8004a3c:	103fef1e 	bne	r2,zero,80049fc <__alt_data_end+0xfc0049fc>
  	res[i++] = p;
  	p = strtok(NULL,",");
	}

	char *colon = strchr(res[CONFIRM_INDEX],':');
 8004a40:	e0bffd17 	ldw	r2,-12(fp)
 8004a44:	1009883a 	mov	r4,r2
 8004a48:	01400e84 	movi	r5,58
 8004a4c:	80076f40 	call	80076f4 <strchr>
 8004a50:	e0bff715 	stw	r2,-36(fp)
	if(colon == NULL)
 8004a54:	e0bff717 	ldw	r2,-36(fp)
 8004a58:	1000021e 	bne	r2,zero,8004a64 <Wifi_ParseConfirmed+0xb4>
  	return EPCNF;
 8004a5c:	00800144 	movi	r2,5
 8004a60:	00001206 	br	8004aac <Wifi_ParseConfirmed+0xfc>

	int colonIndex = (int)(colon - res[CONFIRM_INDEX]);
 8004a64:	e0bff717 	ldw	r2,-36(fp)
 8004a68:	e0fffd17 	ldw	r3,-12(fp)
 8004a6c:	10c5c83a 	sub	r2,r2,r3
 8004a70:	e0bff815 	stw	r2,-32(fp)
	memcpy(dst, res[CONFIRM_INDEX] + colonIndex + 1, 5);
 8004a74:	e0fffd17 	ldw	r3,-12(fp)
 8004a78:	e0bff817 	ldw	r2,-32(fp)
 8004a7c:	10800044 	addi	r2,r2,1
 8004a80:	1885883a 	add	r2,r3,r2
 8004a84:	e13fff17 	ldw	r4,-4(fp)
 8004a88:	100b883a 	mov	r5,r2
 8004a8c:	01800144 	movi	r6,5
 8004a90:	80071380 	call	8007138 <memcpy>
	dst[5]='\0';
 8004a94:	e0bfff17 	ldw	r2,-4(fp)
 8004a98:	10800144 	addi	r2,r2,5
 8004a9c:	10000005 	stb	zero,0(r2)
	free(copy);
 8004aa0:	e13ff617 	ldw	r4,-40(fp)
 8004aa4:	800697c0 	call	800697c <free>
	return 0;
 8004aa8:	0005883a 	mov	r2,zero
}
 8004aac:	e037883a 	mov	sp,fp
 8004ab0:	dfc00117 	ldw	ra,4(sp)
 8004ab4:	df000017 	ldw	fp,0(sp)
 8004ab8:	dec00204 	addi	sp,sp,8
 8004abc:	f800283a 	ret

08004ac0 <Switches_GetValue>:
 *      Author: David
 */
#include "switches.h"
#include <stdint.h>

uint8_t Switches_GetValue() {
 8004ac0:	deffff04 	addi	sp,sp,-4
 8004ac4:	df000015 	stw	fp,0(sp)
 8004ac8:	d839883a 	mov	fp,sp
	return Switches_Base;
 8004acc:	00880004 	movi	r2,8192
 8004ad0:	10800003 	ldbu	r2,0(r2)
}
 8004ad4:	e037883a 	mov	sp,fp
 8004ad8:	df000017 	ldw	fp,0(sp)
 8004adc:	dec00104 	addi	sp,sp,4
 8004ae0:	f800283a 	ret

08004ae4 <udivmodsi4>:
 8004ae4:	2900182e 	bgeu	r5,r4,8004b48 <udivmodsi4+0x64>
 8004ae8:	28001716 	blt	r5,zero,8004b48 <udivmodsi4+0x64>
 8004aec:	00800804 	movi	r2,32
 8004af0:	00c00044 	movi	r3,1
 8004af4:	00000206 	br	8004b00 <udivmodsi4+0x1c>
 8004af8:	10001126 	beq	r2,zero,8004b40 <udivmodsi4+0x5c>
 8004afc:	28000516 	blt	r5,zero,8004b14 <udivmodsi4+0x30>
 8004b00:	294b883a 	add	r5,r5,r5
 8004b04:	10bfffc4 	addi	r2,r2,-1
 8004b08:	18c7883a 	add	r3,r3,r3
 8004b0c:	293ffa36 	bltu	r5,r4,8004af8 <__alt_data_end+0xfc004af8>
 8004b10:	18000b26 	beq	r3,zero,8004b40 <udivmodsi4+0x5c>
 8004b14:	0005883a 	mov	r2,zero
 8004b18:	21400236 	bltu	r4,r5,8004b24 <udivmodsi4+0x40>
 8004b1c:	2149c83a 	sub	r4,r4,r5
 8004b20:	10c4b03a 	or	r2,r2,r3
 8004b24:	1806d07a 	srli	r3,r3,1
 8004b28:	280ad07a 	srli	r5,r5,1
 8004b2c:	183ffa1e 	bne	r3,zero,8004b18 <__alt_data_end+0xfc004b18>
 8004b30:	3000011e 	bne	r6,zero,8004b38 <udivmodsi4+0x54>
 8004b34:	f800283a 	ret
 8004b38:	2005883a 	mov	r2,r4
 8004b3c:	f800283a 	ret
 8004b40:	0005883a 	mov	r2,zero
 8004b44:	003ffa06 	br	8004b30 <__alt_data_end+0xfc004b30>
 8004b48:	00c00044 	movi	r3,1
 8004b4c:	003ff106 	br	8004b14 <__alt_data_end+0xfc004b14>

08004b50 <__divsi3>:
 8004b50:	defffe04 	addi	sp,sp,-8
 8004b54:	dfc00115 	stw	ra,4(sp)
 8004b58:	dc000015 	stw	r16,0(sp)
 8004b5c:	20000b16 	blt	r4,zero,8004b8c <__divsi3+0x3c>
 8004b60:	0021883a 	mov	r16,zero
 8004b64:	28000c16 	blt	r5,zero,8004b98 <__divsi3+0x48>
 8004b68:	000d883a 	mov	r6,zero
 8004b6c:	8004ae40 	call	8004ae4 <udivmodsi4>
 8004b70:	0407c83a 	sub	r3,zero,r16
 8004b74:	1884f03a 	xor	r2,r3,r2
 8004b78:	1405883a 	add	r2,r2,r16
 8004b7c:	dfc00117 	ldw	ra,4(sp)
 8004b80:	dc000017 	ldw	r16,0(sp)
 8004b84:	dec00204 	addi	sp,sp,8
 8004b88:	f800283a 	ret
 8004b8c:	0109c83a 	sub	r4,zero,r4
 8004b90:	04000044 	movi	r16,1
 8004b94:	283ff40e 	bge	r5,zero,8004b68 <__alt_data_end+0xfc004b68>
 8004b98:	014bc83a 	sub	r5,zero,r5
 8004b9c:	8400005c 	xori	r16,r16,1
 8004ba0:	003ff106 	br	8004b68 <__alt_data_end+0xfc004b68>

08004ba4 <__modsi3>:
 8004ba4:	defffd04 	addi	sp,sp,-12
 8004ba8:	dfc00215 	stw	ra,8(sp)
 8004bac:	dc400115 	stw	r17,4(sp)
 8004bb0:	dc000015 	stw	r16,0(sp)
 8004bb4:	20000c16 	blt	r4,zero,8004be8 <__modsi3+0x44>
 8004bb8:	0023883a 	mov	r17,zero
 8004bbc:	0021883a 	mov	r16,zero
 8004bc0:	28000d16 	blt	r5,zero,8004bf8 <__modsi3+0x54>
 8004bc4:	01800044 	movi	r6,1
 8004bc8:	8004ae40 	call	8004ae4 <udivmodsi4>
 8004bcc:	1404f03a 	xor	r2,r2,r16
 8004bd0:	8885883a 	add	r2,r17,r2
 8004bd4:	dfc00217 	ldw	ra,8(sp)
 8004bd8:	dc400117 	ldw	r17,4(sp)
 8004bdc:	dc000017 	ldw	r16,0(sp)
 8004be0:	dec00304 	addi	sp,sp,12
 8004be4:	f800283a 	ret
 8004be8:	0109c83a 	sub	r4,zero,r4
 8004bec:	04400044 	movi	r17,1
 8004bf0:	043fffc4 	movi	r16,-1
 8004bf4:	283ff30e 	bge	r5,zero,8004bc4 <__alt_data_end+0xfc004bc4>
 8004bf8:	014bc83a 	sub	r5,zero,r5
 8004bfc:	003ff106 	br	8004bc4 <__alt_data_end+0xfc004bc4>

08004c00 <__udivsi3>:
 8004c00:	000d883a 	mov	r6,zero
 8004c04:	8004ae41 	jmpi	8004ae4 <udivmodsi4>

08004c08 <__umodsi3>:
 8004c08:	01800044 	movi	r6,1
 8004c0c:	8004ae41 	jmpi	8004ae4 <udivmodsi4>

08004c10 <__mulsi3>:
 8004c10:	0005883a 	mov	r2,zero
 8004c14:	20000726 	beq	r4,zero,8004c34 <__mulsi3+0x24>
 8004c18:	20c0004c 	andi	r3,r4,1
 8004c1c:	2008d07a 	srli	r4,r4,1
 8004c20:	18000126 	beq	r3,zero,8004c28 <__mulsi3+0x18>
 8004c24:	1145883a 	add	r2,r2,r5
 8004c28:	294b883a 	add	r5,r5,r5
 8004c2c:	203ffa1e 	bne	r4,zero,8004c18 <__alt_data_end+0xfc004c18>
 8004c30:	f800283a 	ret
 8004c34:	f800283a 	ret

08004c38 <__lesf2>:
 8004c38:	2004d5fa 	srli	r2,r4,23
 8004c3c:	280cd5fa 	srli	r6,r5,23
 8004c40:	00c02034 	movhi	r3,128
 8004c44:	18ffffc4 	addi	r3,r3,-1
 8004c48:	10803fcc 	andi	r2,r2,255
 8004c4c:	01c03fc4 	movi	r7,255
 8004c50:	1910703a 	and	r8,r3,r4
 8004c54:	31803fcc 	andi	r6,r6,255
 8004c58:	1946703a 	and	r3,r3,r5
 8004c5c:	2008d7fa 	srli	r4,r4,31
 8004c60:	280ad7fa 	srli	r5,r5,31
 8004c64:	11c00a26 	beq	r2,r7,8004c90 <__lesf2+0x58>
 8004c68:	31c01526 	beq	r6,r7,8004cc0 <__lesf2+0x88>
 8004c6c:	10000a1e 	bne	r2,zero,8004c98 <__lesf2+0x60>
 8004c70:	4013003a 	cmpeq	r9,r8,zero
 8004c74:	480f883a 	mov	r7,r9
 8004c78:	30000d26 	beq	r6,zero,8004cb0 <__lesf2+0x78>
 8004c7c:	29403fcc 	andi	r5,r5,255
 8004c80:	38001426 	beq	r7,zero,8004cd4 <__lesf2+0x9c>
 8004c84:	2800081e 	bne	r5,zero,8004ca8 <__lesf2+0x70>
 8004c88:	00bfffc4 	movi	r2,-1
 8004c8c:	f800283a 	ret
 8004c90:	40000c1e 	bne	r8,zero,8004cc4 <__lesf2+0x8c>
 8004c94:	30800a26 	beq	r6,r2,8004cc0 <__lesf2+0x88>
 8004c98:	30000d1e 	bne	r6,zero,8004cd0 <__lesf2+0x98>
 8004c9c:	000f883a 	mov	r7,zero
 8004ca0:	183ff61e 	bne	r3,zero,8004c7c <__alt_data_end+0xfc004c7c>
 8004ca4:	203ff81e 	bne	r4,zero,8004c88 <__alt_data_end+0xfc004c88>
 8004ca8:	00800044 	movi	r2,1
 8004cac:	f800283a 	ret
 8004cb0:	183ff21e 	bne	r3,zero,8004c7c <__alt_data_end+0xfc004c7c>
 8004cb4:	483ffb26 	beq	r9,zero,8004ca4 <__alt_data_end+0xfc004ca4>
 8004cb8:	0005883a 	mov	r2,zero
 8004cbc:	f800283a 	ret
 8004cc0:	18000226 	beq	r3,zero,8004ccc <__lesf2+0x94>
 8004cc4:	00800084 	movi	r2,2
 8004cc8:	f800283a 	ret
 8004ccc:	103fe826 	beq	r2,zero,8004c70 <__alt_data_end+0xfc004c70>
 8004cd0:	29403fcc 	andi	r5,r5,255
 8004cd4:	217ff31e 	bne	r4,r5,8004ca4 <__alt_data_end+0xfc004ca4>
 8004cd8:	30bff216 	blt	r6,r2,8004ca4 <__alt_data_end+0xfc004ca4>
 8004cdc:	11800216 	blt	r2,r6,8004ce8 <__lesf2+0xb0>
 8004ce0:	1a3ff036 	bltu	r3,r8,8004ca4 <__alt_data_end+0xfc004ca4>
 8004ce4:	40fff42e 	bgeu	r8,r3,8004cb8 <__alt_data_end+0xfc004cb8>
 8004ce8:	203fe726 	beq	r4,zero,8004c88 <__alt_data_end+0xfc004c88>
 8004cec:	003fee06 	br	8004ca8 <__alt_data_end+0xfc004ca8>

08004cf0 <__mulsf3>:
 8004cf0:	defff504 	addi	sp,sp,-44
 8004cf4:	dc400215 	stw	r17,8(sp)
 8004cf8:	2022d5fa 	srli	r17,r4,23
 8004cfc:	dd400615 	stw	r21,24(sp)
 8004d00:	202ad7fa 	srli	r21,r4,31
 8004d04:	dc000115 	stw	r16,4(sp)
 8004d08:	04002034 	movhi	r16,128
 8004d0c:	df000915 	stw	fp,36(sp)
 8004d10:	dd000515 	stw	r20,20(sp)
 8004d14:	843fffc4 	addi	r16,r16,-1
 8004d18:	dfc00a15 	stw	ra,40(sp)
 8004d1c:	ddc00815 	stw	r23,32(sp)
 8004d20:	dd800715 	stw	r22,28(sp)
 8004d24:	dcc00415 	stw	r19,16(sp)
 8004d28:	dc800315 	stw	r18,12(sp)
 8004d2c:	8c403fcc 	andi	r17,r17,255
 8004d30:	8120703a 	and	r16,r16,r4
 8004d34:	a829883a 	mov	r20,r21
 8004d38:	af003fcc 	andi	fp,r21,255
 8004d3c:	88005026 	beq	r17,zero,8004e80 <__mulsf3+0x190>
 8004d40:	00803fc4 	movi	r2,255
 8004d44:	88802f26 	beq	r17,r2,8004e04 <__mulsf3+0x114>
 8004d48:	84002034 	orhi	r16,r16,128
 8004d4c:	802090fa 	slli	r16,r16,3
 8004d50:	8c7fe044 	addi	r17,r17,-127
 8004d54:	0025883a 	mov	r18,zero
 8004d58:	002f883a 	mov	r23,zero
 8004d5c:	2804d5fa 	srli	r2,r5,23
 8004d60:	282cd7fa 	srli	r22,r5,31
 8004d64:	01002034 	movhi	r4,128
 8004d68:	213fffc4 	addi	r4,r4,-1
 8004d6c:	10803fcc 	andi	r2,r2,255
 8004d70:	2166703a 	and	r19,r4,r5
 8004d74:	b1803fcc 	andi	r6,r22,255
 8004d78:	10004926 	beq	r2,zero,8004ea0 <__mulsf3+0x1b0>
 8004d7c:	00c03fc4 	movi	r3,255
 8004d80:	10c04326 	beq	r2,r3,8004e90 <__mulsf3+0x1a0>
 8004d84:	99402034 	orhi	r5,r19,128
 8004d88:	282690fa 	slli	r19,r5,3
 8004d8c:	10bfe044 	addi	r2,r2,-127
 8004d90:	000b883a 	mov	r5,zero
 8004d94:	88a3883a 	add	r17,r17,r2
 8004d98:	2c86b03a 	or	r3,r5,r18
 8004d9c:	008003c4 	movi	r2,15
 8004da0:	adaaf03a 	xor	r21,r21,r22
 8004da4:	8c800044 	addi	r18,r17,1
 8004da8:	10c06536 	bltu	r2,r3,8004f40 <__mulsf3+0x250>
 8004dac:	180690ba 	slli	r3,r3,2
 8004db0:	01020034 	movhi	r4,2048
 8004db4:	21137104 	addi	r4,r4,19908
 8004db8:	1907883a 	add	r3,r3,r4
 8004dbc:	18800017 	ldw	r2,0(r3)
 8004dc0:	1000683a 	jmp	r2
 8004dc4:	08004f40 	call	8004f4 <__alt_mem_sdram-0x77ffb0c>
 8004dc8:	08005038 	rdprs	zero,at,320
 8004dcc:	08005038 	rdprs	zero,at,320
 8004dd0:	08005048 	cmpgei	zero,at,321
 8004dd4:	08004e14 	ori	zero,at,312
 8004dd8:	08004e14 	ori	zero,at,312
 8004ddc:	08004f2c 	andhi	zero,at,316
 8004de0:	08005048 	cmpgei	zero,at,321
 8004de4:	08004e14 	ori	zero,at,312
 8004de8:	08004f2c 	andhi	zero,at,316
 8004dec:	08004e14 	ori	zero,at,312
 8004df0:	08005048 	cmpgei	zero,at,321
 8004df4:	08004e18 	cmpnei	zero,at,312
 8004df8:	08004e18 	cmpnei	zero,at,312
 8004dfc:	08004e18 	cmpnei	zero,at,312
 8004e00:	08005058 	cmpnei	zero,at,321
 8004e04:	8000311e 	bne	r16,zero,8004ecc <__mulsf3+0x1dc>
 8004e08:	04800204 	movi	r18,8
 8004e0c:	05c00084 	movi	r23,2
 8004e10:	003fd206 	br	8004d5c <__alt_data_end+0xfc004d5c>
 8004e14:	a839883a 	mov	fp,r21
 8004e18:	00800084 	movi	r2,2
 8004e1c:	b880231e 	bne	r23,r2,8004eac <__mulsf3+0x1bc>
 8004e20:	e500004c 	andi	r20,fp,1
 8004e24:	00ffffc4 	movi	r3,-1
 8004e28:	0009883a 	mov	r4,zero
 8004e2c:	18c03fcc 	andi	r3,r3,255
 8004e30:	180695fa 	slli	r3,r3,23
 8004e34:	a0803fcc 	andi	r2,r20,255
 8004e38:	04002034 	movhi	r16,128
 8004e3c:	100497fa 	slli	r2,r2,31
 8004e40:	843fffc4 	addi	r16,r16,-1
 8004e44:	2420703a 	and	r16,r4,r16
 8004e48:	80e0b03a 	or	r16,r16,r3
 8004e4c:	8084b03a 	or	r2,r16,r2
 8004e50:	dfc00a17 	ldw	ra,40(sp)
 8004e54:	df000917 	ldw	fp,36(sp)
 8004e58:	ddc00817 	ldw	r23,32(sp)
 8004e5c:	dd800717 	ldw	r22,28(sp)
 8004e60:	dd400617 	ldw	r21,24(sp)
 8004e64:	dd000517 	ldw	r20,20(sp)
 8004e68:	dcc00417 	ldw	r19,16(sp)
 8004e6c:	dc800317 	ldw	r18,12(sp)
 8004e70:	dc400217 	ldw	r17,8(sp)
 8004e74:	dc000117 	ldw	r16,4(sp)
 8004e78:	dec00b04 	addi	sp,sp,44
 8004e7c:	f800283a 	ret
 8004e80:	8000151e 	bne	r16,zero,8004ed8 <__mulsf3+0x1e8>
 8004e84:	04800104 	movi	r18,4
 8004e88:	05c00044 	movi	r23,1
 8004e8c:	003fb306 	br	8004d5c <__alt_data_end+0xfc004d5c>
 8004e90:	980b003a 	cmpeq	r5,r19,zero
 8004e94:	00c000c4 	movi	r3,3
 8004e98:	194bc83a 	sub	r5,r3,r5
 8004e9c:	003fbd06 	br	8004d94 <__alt_data_end+0xfc004d94>
 8004ea0:	9800181e 	bne	r19,zero,8004f04 <__mulsf3+0x214>
 8004ea4:	01400044 	movi	r5,1
 8004ea8:	003fba06 	br	8004d94 <__alt_data_end+0xfc004d94>
 8004eac:	008000c4 	movi	r2,3
 8004eb0:	b8809d26 	beq	r23,r2,8005128 <__mulsf3+0x438>
 8004eb4:	00800044 	movi	r2,1
 8004eb8:	b880821e 	bne	r23,r2,80050c4 <__mulsf3+0x3d4>
 8004ebc:	e0a8703a 	and	r20,fp,r2
 8004ec0:	0007883a 	mov	r3,zero
 8004ec4:	0009883a 	mov	r4,zero
 8004ec8:	003fd806 	br	8004e2c <__alt_data_end+0xfc004e2c>
 8004ecc:	04800304 	movi	r18,12
 8004ed0:	05c000c4 	movi	r23,3
 8004ed4:	003fa106 	br	8004d5c <__alt_data_end+0xfc004d5c>
 8004ed8:	8009883a 	mov	r4,r16
 8004edc:	d9400015 	stw	r5,0(sp)
 8004ee0:	80069040 	call	8006904 <__clzsi2>
 8004ee4:	10fffec4 	addi	r3,r2,-5
 8004ee8:	047fe284 	movi	r17,-118
 8004eec:	80e0983a 	sll	r16,r16,r3
 8004ef0:	88a3c83a 	sub	r17,r17,r2
 8004ef4:	0025883a 	mov	r18,zero
 8004ef8:	002f883a 	mov	r23,zero
 8004efc:	d9400017 	ldw	r5,0(sp)
 8004f00:	003f9606 	br	8004d5c <__alt_data_end+0xfc004d5c>
 8004f04:	9809883a 	mov	r4,r19
 8004f08:	d9800015 	stw	r6,0(sp)
 8004f0c:	80069040 	call	8006904 <__clzsi2>
 8004f10:	10fffec4 	addi	r3,r2,-5
 8004f14:	98e6983a 	sll	r19,r19,r3
 8004f18:	00ffe284 	movi	r3,-118
 8004f1c:	1885c83a 	sub	r2,r3,r2
 8004f20:	000b883a 	mov	r5,zero
 8004f24:	d9800017 	ldw	r6,0(sp)
 8004f28:	003f9a06 	br	8004d94 <__alt_data_end+0xfc004d94>
 8004f2c:	01002034 	movhi	r4,128
 8004f30:	0029883a 	mov	r20,zero
 8004f34:	213fffc4 	addi	r4,r4,-1
 8004f38:	00ffffc4 	movi	r3,-1
 8004f3c:	003fbb06 	br	8004e2c <__alt_data_end+0xfc004e2c>
 8004f40:	802ed43a 	srli	r23,r16,16
 8004f44:	982cd43a 	srli	r22,r19,16
 8004f48:	843fffcc 	andi	r16,r16,65535
 8004f4c:	9cffffcc 	andi	r19,r19,65535
 8004f50:	9809883a 	mov	r4,r19
 8004f54:	800b883a 	mov	r5,r16
 8004f58:	8004c100 	call	8004c10 <__mulsi3>
 8004f5c:	9809883a 	mov	r4,r19
 8004f60:	b80b883a 	mov	r5,r23
 8004f64:	1029883a 	mov	r20,r2
 8004f68:	8004c100 	call	8004c10 <__mulsi3>
 8004f6c:	b80b883a 	mov	r5,r23
 8004f70:	b009883a 	mov	r4,r22
 8004f74:	1027883a 	mov	r19,r2
 8004f78:	8004c100 	call	8004c10 <__mulsi3>
 8004f7c:	b009883a 	mov	r4,r22
 8004f80:	800b883a 	mov	r5,r16
 8004f84:	102f883a 	mov	r23,r2
 8004f88:	8004c100 	call	8004c10 <__mulsi3>
 8004f8c:	a008d43a 	srli	r4,r20,16
 8004f90:	9885883a 	add	r2,r19,r2
 8004f94:	1107883a 	add	r3,r2,r4
 8004f98:	1cc0022e 	bgeu	r3,r19,8004fa4 <__mulsf3+0x2b4>
 8004f9c:	00800074 	movhi	r2,1
 8004fa0:	b8af883a 	add	r23,r23,r2
 8004fa4:	1820943a 	slli	r16,r3,16
 8004fa8:	a53fffcc 	andi	r20,r20,65535
 8004fac:	1806d43a 	srli	r3,r3,16
 8004fb0:	8529883a 	add	r20,r16,r20
 8004fb4:	a02091ba 	slli	r16,r20,6
 8004fb8:	b8c7883a 	add	r3,r23,r3
 8004fbc:	a028d6ba 	srli	r20,r20,26
 8004fc0:	180691ba 	slli	r3,r3,6
 8004fc4:	8020c03a 	cmpne	r16,r16,zero
 8004fc8:	8520b03a 	or	r16,r16,r20
 8004fcc:	80e0b03a 	or	r16,r16,r3
 8004fd0:	8082002c 	andhi	r2,r16,2048
 8004fd4:	10000426 	beq	r2,zero,8004fe8 <__mulsf3+0x2f8>
 8004fd8:	8004d07a 	srli	r2,r16,1
 8004fdc:	8400004c 	andi	r16,r16,1
 8004fe0:	9023883a 	mov	r17,r18
 8004fe4:	80a0b03a 	or	r16,r16,r2
 8004fe8:	88c01fc4 	addi	r3,r17,127
 8004fec:	00c02d0e 	bge	zero,r3,80050a4 <__mulsf3+0x3b4>
 8004ff0:	808001cc 	andi	r2,r16,7
 8004ff4:	10000426 	beq	r2,zero,8005008 <__mulsf3+0x318>
 8004ff8:	810003cc 	andi	r4,r16,15
 8004ffc:	00800104 	movi	r2,4
 8005000:	20800126 	beq	r4,r2,8005008 <__mulsf3+0x318>
 8005004:	80a1883a 	add	r16,r16,r2
 8005008:	8082002c 	andhi	r2,r16,2048
 800500c:	10000426 	beq	r2,zero,8005020 <__mulsf3+0x330>
 8005010:	00be0034 	movhi	r2,63488
 8005014:	10bfffc4 	addi	r2,r2,-1
 8005018:	88c02004 	addi	r3,r17,128
 800501c:	80a0703a 	and	r16,r16,r2
 8005020:	00803f84 	movi	r2,254
 8005024:	10c01b0e 	bge	r2,r3,8005094 <__mulsf3+0x3a4>
 8005028:	ad00004c 	andi	r20,r21,1
 800502c:	00ffffc4 	movi	r3,-1
 8005030:	0009883a 	mov	r4,zero
 8005034:	003f7d06 	br	8004e2c <__alt_data_end+0xfc004e2c>
 8005038:	9821883a 	mov	r16,r19
 800503c:	a839883a 	mov	fp,r21
 8005040:	282f883a 	mov	r23,r5
 8005044:	003f7406 	br	8004e18 <__alt_data_end+0xfc004e18>
 8005048:	9821883a 	mov	r16,r19
 800504c:	3039883a 	mov	fp,r6
 8005050:	282f883a 	mov	r23,r5
 8005054:	003f7006 	br	8004e18 <__alt_data_end+0xfc004e18>
 8005058:	8080102c 	andhi	r2,r16,64
 800505c:	10000826 	beq	r2,zero,8005080 <__mulsf3+0x390>
 8005060:	9880102c 	andhi	r2,r19,64
 8005064:	1000061e 	bne	r2,zero,8005080 <__mulsf3+0x390>
 8005068:	00802034 	movhi	r2,128
 800506c:	99001034 	orhi	r4,r19,64
 8005070:	10bfffc4 	addi	r2,r2,-1
 8005074:	b029883a 	mov	r20,r22
 8005078:	2088703a 	and	r4,r4,r2
 800507c:	003fae06 	br	8004f38 <__alt_data_end+0xfc004f38>
 8005080:	00802034 	movhi	r2,128
 8005084:	81001034 	orhi	r4,r16,64
 8005088:	10bfffc4 	addi	r2,r2,-1
 800508c:	2088703a 	and	r4,r4,r2
 8005090:	003fa906 	br	8004f38 <__alt_data_end+0xfc004f38>
 8005094:	802091ba 	slli	r16,r16,6
 8005098:	ad00004c 	andi	r20,r21,1
 800509c:	8008d27a 	srli	r4,r16,9
 80050a0:	003f6206 	br	8004e2c <__alt_data_end+0xfc004e2c>
 80050a4:	00ffe084 	movi	r3,-126
 80050a8:	1c47c83a 	sub	r3,r3,r17
 80050ac:	008006c4 	movi	r2,27
 80050b0:	10c0070e 	bge	r2,r3,80050d0 <__mulsf3+0x3e0>
 80050b4:	ad00004c 	andi	r20,r21,1
 80050b8:	0007883a 	mov	r3,zero
 80050bc:	0009883a 	mov	r4,zero
 80050c0:	003f5a06 	br	8004e2c <__alt_data_end+0xfc004e2c>
 80050c4:	9023883a 	mov	r17,r18
 80050c8:	e02b883a 	mov	r21,fp
 80050cc:	003fc606 	br	8004fe8 <__alt_data_end+0xfc004fe8>
 80050d0:	88802784 	addi	r2,r17,158
 80050d4:	8084983a 	sll	r2,r16,r2
 80050d8:	80e0d83a 	srl	r16,r16,r3
 80050dc:	1004c03a 	cmpne	r2,r2,zero
 80050e0:	1404b03a 	or	r2,r2,r16
 80050e4:	10c001cc 	andi	r3,r2,7
 80050e8:	18000426 	beq	r3,zero,80050fc <__mulsf3+0x40c>
 80050ec:	110003cc 	andi	r4,r2,15
 80050f0:	00c00104 	movi	r3,4
 80050f4:	20c00126 	beq	r4,r3,80050fc <__mulsf3+0x40c>
 80050f8:	10c5883a 	add	r2,r2,r3
 80050fc:	10c1002c 	andhi	r3,r2,1024
 8005100:	18000426 	beq	r3,zero,8005114 <__mulsf3+0x424>
 8005104:	ad00004c 	andi	r20,r21,1
 8005108:	00c00044 	movi	r3,1
 800510c:	0009883a 	mov	r4,zero
 8005110:	003f4606 	br	8004e2c <__alt_data_end+0xfc004e2c>
 8005114:	100491ba 	slli	r2,r2,6
 8005118:	ad00004c 	andi	r20,r21,1
 800511c:	0007883a 	mov	r3,zero
 8005120:	1008d27a 	srli	r4,r2,9
 8005124:	003f4106 	br	8004e2c <__alt_data_end+0xfc004e2c>
 8005128:	00802034 	movhi	r2,128
 800512c:	81001034 	orhi	r4,r16,64
 8005130:	10bfffc4 	addi	r2,r2,-1
 8005134:	e500004c 	andi	r20,fp,1
 8005138:	2088703a 	and	r4,r4,r2
 800513c:	003f7e06 	br	8004f38 <__alt_data_end+0xfc004f38>

08005140 <__floatsisf>:
 8005140:	defffd04 	addi	sp,sp,-12
 8005144:	dc000015 	stw	r16,0(sp)
 8005148:	dfc00215 	stw	ra,8(sp)
 800514c:	dc400115 	stw	r17,4(sp)
 8005150:	2021883a 	mov	r16,r4
 8005154:	20003a26 	beq	r4,zero,8005240 <__floatsisf+0x100>
 8005158:	2022d7fa 	srli	r17,r4,31
 800515c:	88000126 	beq	r17,zero,8005164 <__floatsisf+0x24>
 8005160:	0121c83a 	sub	r16,zero,r4
 8005164:	8009883a 	mov	r4,r16
 8005168:	80069040 	call	8006904 <__clzsi2>
 800516c:	00c02784 	movi	r3,158
 8005170:	1887c83a 	sub	r3,r3,r2
 8005174:	01802584 	movi	r6,150
 8005178:	800b883a 	mov	r5,r16
 800517c:	30c01616 	blt	r6,r3,80051d8 <__floatsisf+0x98>
 8005180:	01000204 	movi	r4,8
 8005184:	2080020e 	bge	r4,r2,8005190 <__floatsisf+0x50>
 8005188:	10bffe04 	addi	r2,r2,-8
 800518c:	80a0983a 	sll	r16,r16,r2
 8005190:	00802034 	movhi	r2,128
 8005194:	10bfffc4 	addi	r2,r2,-1
 8005198:	8809883a 	mov	r4,r17
 800519c:	80a0703a 	and	r16,r16,r2
 80051a0:	18803fcc 	andi	r2,r3,255
 80051a4:	100695fa 	slli	r3,r2,23
 80051a8:	20803fcc 	andi	r2,r4,255
 80051ac:	100897fa 	slli	r4,r2,31
 80051b0:	00802034 	movhi	r2,128
 80051b4:	10bfffc4 	addi	r2,r2,-1
 80051b8:	8084703a 	and	r2,r16,r2
 80051bc:	10c4b03a 	or	r2,r2,r3
 80051c0:	1104b03a 	or	r2,r2,r4
 80051c4:	dfc00217 	ldw	ra,8(sp)
 80051c8:	dc400117 	ldw	r17,4(sp)
 80051cc:	dc000017 	ldw	r16,0(sp)
 80051d0:	dec00304 	addi	sp,sp,12
 80051d4:	f800283a 	ret
 80051d8:	01002644 	movi	r4,153
 80051dc:	20c01c16 	blt	r4,r3,8005250 <__floatsisf+0x110>
 80051e0:	01000144 	movi	r4,5
 80051e4:	2080020e 	bge	r4,r2,80051f0 <__floatsisf+0xb0>
 80051e8:	113ffec4 	addi	r4,r2,-5
 80051ec:	290a983a 	sll	r5,r5,r4
 80051f0:	043f0034 	movhi	r16,64512
 80051f4:	843fffc4 	addi	r16,r16,-1
 80051f8:	298001cc 	andi	r6,r5,7
 80051fc:	2c20703a 	and	r16,r5,r16
 8005200:	30000426 	beq	r6,zero,8005214 <__floatsisf+0xd4>
 8005204:	294003cc 	andi	r5,r5,15
 8005208:	01000104 	movi	r4,4
 800520c:	29000126 	beq	r5,r4,8005214 <__floatsisf+0xd4>
 8005210:	8121883a 	add	r16,r16,r4
 8005214:	8101002c 	andhi	r4,r16,1024
 8005218:	20000526 	beq	r4,zero,8005230 <__floatsisf+0xf0>
 800521c:	00c027c4 	movi	r3,159
 8005220:	1887c83a 	sub	r3,r3,r2
 8005224:	00bf0034 	movhi	r2,64512
 8005228:	10bfffc4 	addi	r2,r2,-1
 800522c:	80a0703a 	and	r16,r16,r2
 8005230:	802091ba 	slli	r16,r16,6
 8005234:	8809883a 	mov	r4,r17
 8005238:	8020d27a 	srli	r16,r16,9
 800523c:	003fd806 	br	80051a0 <__alt_data_end+0xfc0051a0>
 8005240:	0009883a 	mov	r4,zero
 8005244:	0007883a 	mov	r3,zero
 8005248:	0021883a 	mov	r16,zero
 800524c:	003fd406 	br	80051a0 <__alt_data_end+0xfc0051a0>
 8005250:	01800144 	movi	r6,5
 8005254:	110006c4 	addi	r4,r2,27
 8005258:	8108983a 	sll	r4,r16,r4
 800525c:	308fc83a 	sub	r7,r6,r2
 8005260:	81cad83a 	srl	r5,r16,r7
 8005264:	2008c03a 	cmpne	r4,r4,zero
 8005268:	214ab03a 	or	r5,r4,r5
 800526c:	30bfe00e 	bge	r6,r2,80051f0 <__alt_data_end+0xfc0051f0>
 8005270:	003fdd06 	br	80051e8 <__alt_data_end+0xfc0051e8>

08005274 <__divdf3>:
 8005274:	defff004 	addi	sp,sp,-64
 8005278:	dc800815 	stw	r18,32(sp)
 800527c:	2824d53a 	srli	r18,r5,20
 8005280:	dd800c15 	stw	r22,48(sp)
 8005284:	282cd7fa 	srli	r22,r5,31
 8005288:	dc000615 	stw	r16,24(sp)
 800528c:	04000434 	movhi	r16,16
 8005290:	df000e15 	stw	fp,56(sp)
 8005294:	dd000a15 	stw	r20,40(sp)
 8005298:	dcc00915 	stw	r19,36(sp)
 800529c:	dc400715 	stw	r17,28(sp)
 80052a0:	843fffc4 	addi	r16,r16,-1
 80052a4:	dfc00f15 	stw	ra,60(sp)
 80052a8:	ddc00d15 	stw	r23,52(sp)
 80052ac:	dd400b15 	stw	r21,44(sp)
 80052b0:	9481ffcc 	andi	r18,r18,2047
 80052b4:	2029883a 	mov	r20,r4
 80052b8:	2027883a 	mov	r19,r4
 80052bc:	2c22703a 	and	r17,r5,r16
 80052c0:	b7003fcc 	andi	fp,r22,255
 80052c4:	90005e26 	beq	r18,zero,8005440 <__divdf3+0x1cc>
 80052c8:	0081ffc4 	movi	r2,2047
 80052cc:	90803526 	beq	r18,r2,80053a4 <__divdf3+0x130>
 80052d0:	8c000434 	orhi	r16,r17,16
 80052d4:	2004d77a 	srli	r2,r4,29
 80052d8:	802090fa 	slli	r16,r16,3
 80052dc:	202690fa 	slli	r19,r4,3
 80052e0:	94bf0044 	addi	r18,r18,-1023
 80052e4:	80a2b03a 	or	r17,r16,r2
 80052e8:	0029883a 	mov	r20,zero
 80052ec:	0011883a 	mov	r8,zero
 80052f0:	380ad53a 	srli	r5,r7,20
 80052f4:	382ed7fa 	srli	r23,r7,31
 80052f8:	04000434 	movhi	r16,16
 80052fc:	843fffc4 	addi	r16,r16,-1
 8005300:	2941ffcc 	andi	r5,r5,2047
 8005304:	302b883a 	mov	r21,r6
 8005308:	3c20703a 	and	r16,r7,r16
 800530c:	ba403fcc 	andi	r9,r23,255
 8005310:	28006726 	beq	r5,zero,80054b0 <__divdf3+0x23c>
 8005314:	0081ffc4 	movi	r2,2047
 8005318:	28805f26 	beq	r5,r2,8005498 <__divdf3+0x224>
 800531c:	84000434 	orhi	r16,r16,16
 8005320:	3004d77a 	srli	r2,r6,29
 8005324:	802090fa 	slli	r16,r16,3
 8005328:	302a90fa 	slli	r21,r6,3
 800532c:	297f0044 	addi	r5,r5,-1023
 8005330:	80a0b03a 	or	r16,r16,r2
 8005334:	000f883a 	mov	r7,zero
 8005338:	3d06b03a 	or	r3,r7,r20
 800533c:	180690ba 	slli	r3,r3,2
 8005340:	00820034 	movhi	r2,2048
 8005344:	1094d904 	addi	r2,r2,21348
 8005348:	1885883a 	add	r2,r3,r2
 800534c:	10800017 	ldw	r2,0(r2)
 8005350:	b5c8f03a 	xor	r4,r22,r23
 8005354:	200d883a 	mov	r6,r4
 8005358:	25003fcc 	andi	r20,r4,255
 800535c:	9165c83a 	sub	r18,r18,r5
 8005360:	1000683a 	jmp	r2
 8005364:	080055ac 	andhi	zero,at,342
 8005368:	080053dc 	xori	zero,at,335
 800536c:	08005570 	cmpltui	zero,at,341
 8005370:	080053c0 	call	80053c <__alt_mem_sdram-0x77ffac4>
 8005374:	08005570 	cmpltui	zero,at,341
 8005378:	08005544 	addi	zero,at,341
 800537c:	08005570 	cmpltui	zero,at,341
 8005380:	080053c0 	call	80053c <__alt_mem_sdram-0x77ffac4>
 8005384:	080053dc 	xori	zero,at,335
 8005388:	080053dc 	xori	zero,at,335
 800538c:	08005544 	addi	zero,at,341
 8005390:	080053c0 	call	80053c <__alt_mem_sdram-0x77ffac4>
 8005394:	080053d0 	cmplti	zero,at,335
 8005398:	080053d0 	cmplti	zero,at,335
 800539c:	080053d0 	cmplti	zero,at,335
 80053a0:	08005580 	call	800558 <__alt_mem_sdram-0x77ffaa8>
 80053a4:	8904b03a 	or	r2,r17,r4
 80053a8:	1000631e 	bne	r2,zero,8005538 <__divdf3+0x2c4>
 80053ac:	05000204 	movi	r20,8
 80053b0:	0023883a 	mov	r17,zero
 80053b4:	0027883a 	mov	r19,zero
 80053b8:	02000084 	movi	r8,2
 80053bc:	003fcc06 	br	80052f0 <__alt_data_end+0xfc0052f0>
 80053c0:	8023883a 	mov	r17,r16
 80053c4:	a827883a 	mov	r19,r21
 80053c8:	4839883a 	mov	fp,r9
 80053cc:	3811883a 	mov	r8,r7
 80053d0:	00800084 	movi	r2,2
 80053d4:	4081531e 	bne	r8,r2,8005924 <__divdf3+0x6b0>
 80053d8:	e029883a 	mov	r20,fp
 80053dc:	a180004c 	andi	r6,r20,1
 80053e0:	0201ffc4 	movi	r8,2047
 80053e4:	000b883a 	mov	r5,zero
 80053e8:	0027883a 	mov	r19,zero
 80053ec:	4010953a 	slli	r8,r8,20
 80053f0:	30c03fcc 	andi	r3,r6,255
 80053f4:	04000434 	movhi	r16,16
 80053f8:	180697fa 	slli	r3,r3,31
 80053fc:	843fffc4 	addi	r16,r16,-1
 8005400:	2c20703a 	and	r16,r5,r16
 8005404:	8220b03a 	or	r16,r16,r8
 8005408:	80c6b03a 	or	r3,r16,r3
 800540c:	9805883a 	mov	r2,r19
 8005410:	dfc00f17 	ldw	ra,60(sp)
 8005414:	df000e17 	ldw	fp,56(sp)
 8005418:	ddc00d17 	ldw	r23,52(sp)
 800541c:	dd800c17 	ldw	r22,48(sp)
 8005420:	dd400b17 	ldw	r21,44(sp)
 8005424:	dd000a17 	ldw	r20,40(sp)
 8005428:	dcc00917 	ldw	r19,36(sp)
 800542c:	dc800817 	ldw	r18,32(sp)
 8005430:	dc400717 	ldw	r17,28(sp)
 8005434:	dc000617 	ldw	r16,24(sp)
 8005438:	dec01004 	addi	sp,sp,64
 800543c:	f800283a 	ret
 8005440:	8904b03a 	or	r2,r17,r4
 8005444:	10003726 	beq	r2,zero,8005524 <__divdf3+0x2b0>
 8005448:	88014d26 	beq	r17,zero,8005980 <__divdf3+0x70c>
 800544c:	8809883a 	mov	r4,r17
 8005450:	d9800215 	stw	r6,8(sp)
 8005454:	d9c00515 	stw	r7,20(sp)
 8005458:	80069040 	call	8006904 <__clzsi2>
 800545c:	d9800217 	ldw	r6,8(sp)
 8005460:	d9c00517 	ldw	r7,20(sp)
 8005464:	1007883a 	mov	r3,r2
 8005468:	01000a04 	movi	r4,40
 800546c:	1cfffe04 	addi	r19,r3,-8
 8005470:	20c9c83a 	sub	r4,r4,r3
 8005474:	8cca983a 	sll	r5,r17,r19
 8005478:	a108d83a 	srl	r4,r20,r4
 800547c:	a4e6983a 	sll	r19,r20,r19
 8005480:	2162b03a 	or	r17,r4,r5
 8005484:	04bf0344 	movi	r18,-1011
 8005488:	90e5c83a 	sub	r18,r18,r3
 800548c:	0029883a 	mov	r20,zero
 8005490:	0011883a 	mov	r8,zero
 8005494:	003f9606 	br	80052f0 <__alt_data_end+0xfc0052f0>
 8005498:	8184b03a 	or	r2,r16,r6
 800549c:	10001f1e 	bne	r2,zero,800551c <__divdf3+0x2a8>
 80054a0:	0021883a 	mov	r16,zero
 80054a4:	002b883a 	mov	r21,zero
 80054a8:	01c00084 	movi	r7,2
 80054ac:	003fa206 	br	8005338 <__alt_data_end+0xfc005338>
 80054b0:	8184b03a 	or	r2,r16,r6
 80054b4:	10001526 	beq	r2,zero,800550c <__divdf3+0x298>
 80054b8:	80013d26 	beq	r16,zero,80059b0 <__divdf3+0x73c>
 80054bc:	8009883a 	mov	r4,r16
 80054c0:	d9800215 	stw	r6,8(sp)
 80054c4:	da000315 	stw	r8,12(sp)
 80054c8:	da400415 	stw	r9,16(sp)
 80054cc:	80069040 	call	8006904 <__clzsi2>
 80054d0:	d9800217 	ldw	r6,8(sp)
 80054d4:	da000317 	ldw	r8,12(sp)
 80054d8:	da400417 	ldw	r9,16(sp)
 80054dc:	1007883a 	mov	r3,r2
 80054e0:	01000a04 	movi	r4,40
 80054e4:	1d7ffe04 	addi	r21,r3,-8
 80054e8:	20c9c83a 	sub	r4,r4,r3
 80054ec:	8560983a 	sll	r16,r16,r21
 80054f0:	3108d83a 	srl	r4,r6,r4
 80054f4:	356a983a 	sll	r21,r6,r21
 80054f8:	2420b03a 	or	r16,r4,r16
 80054fc:	017f0344 	movi	r5,-1011
 8005500:	28cbc83a 	sub	r5,r5,r3
 8005504:	000f883a 	mov	r7,zero
 8005508:	003f8b06 	br	8005338 <__alt_data_end+0xfc005338>
 800550c:	0021883a 	mov	r16,zero
 8005510:	002b883a 	mov	r21,zero
 8005514:	01c00044 	movi	r7,1
 8005518:	003f8706 	br	8005338 <__alt_data_end+0xfc005338>
 800551c:	01c000c4 	movi	r7,3
 8005520:	003f8506 	br	8005338 <__alt_data_end+0xfc005338>
 8005524:	05000104 	movi	r20,4
 8005528:	0023883a 	mov	r17,zero
 800552c:	0027883a 	mov	r19,zero
 8005530:	02000044 	movi	r8,1
 8005534:	003f6e06 	br	80052f0 <__alt_data_end+0xfc0052f0>
 8005538:	05000304 	movi	r20,12
 800553c:	020000c4 	movi	r8,3
 8005540:	003f6b06 	br	80052f0 <__alt_data_end+0xfc0052f0>
 8005544:	01400434 	movhi	r5,16
 8005548:	000d883a 	mov	r6,zero
 800554c:	297fffc4 	addi	r5,r5,-1
 8005550:	04ffffc4 	movi	r19,-1
 8005554:	0201ffc4 	movi	r8,2047
 8005558:	003fa406 	br	80053ec <__alt_data_end+0xfc0053ec>
 800555c:	043f0084 	movi	r16,-1022
 8005560:	84a1c83a 	sub	r16,r16,r18
 8005564:	00800e04 	movi	r2,56
 8005568:	14014d0e 	bge	r2,r16,8005aa0 <__divdf3+0x82c>
 800556c:	a180004c 	andi	r6,r20,1
 8005570:	0011883a 	mov	r8,zero
 8005574:	000b883a 	mov	r5,zero
 8005578:	0027883a 	mov	r19,zero
 800557c:	003f9b06 	br	80053ec <__alt_data_end+0xfc0053ec>
 8005580:	8880022c 	andhi	r2,r17,8
 8005584:	1000f026 	beq	r2,zero,8005948 <__divdf3+0x6d4>
 8005588:	8080022c 	andhi	r2,r16,8
 800558c:	1000ee1e 	bne	r2,zero,8005948 <__divdf3+0x6d4>
 8005590:	00800434 	movhi	r2,16
 8005594:	81400234 	orhi	r5,r16,8
 8005598:	10bfffc4 	addi	r2,r2,-1
 800559c:	b80d883a 	mov	r6,r23
 80055a0:	288a703a 	and	r5,r5,r2
 80055a4:	a827883a 	mov	r19,r21
 80055a8:	003fea06 	br	8005554 <__alt_data_end+0xfc005554>
 80055ac:	84411c36 	bltu	r16,r17,8005a20 <__divdf3+0x7ac>
 80055b0:	8c011a26 	beq	r17,r16,8005a1c <__divdf3+0x7a8>
 80055b4:	94bfffc4 	addi	r18,r18,-1
 80055b8:	dcc00015 	stw	r19,0(sp)
 80055bc:	8811883a 	mov	r8,r17
 80055c0:	002d883a 	mov	r22,zero
 80055c4:	a80cd63a 	srli	r6,r21,24
 80055c8:	8020923a 	slli	r16,r16,8
 80055cc:	a82a923a 	slli	r21,r21,8
 80055d0:	4009883a 	mov	r4,r8
 80055d4:	342eb03a 	or	r23,r6,r16
 80055d8:	dd400115 	stw	r21,4(sp)
 80055dc:	b82ad43a 	srli	r21,r23,16
 80055e0:	da000315 	stw	r8,12(sp)
 80055e4:	bcffffcc 	andi	r19,r23,65535
 80055e8:	a80b883a 	mov	r5,r21
 80055ec:	8004c000 	call	8004c00 <__udivsi3>
 80055f0:	1009883a 	mov	r4,r2
 80055f4:	980b883a 	mov	r5,r19
 80055f8:	1023883a 	mov	r17,r2
 80055fc:	8004c100 	call	8004c10 <__mulsi3>
 8005600:	da000317 	ldw	r8,12(sp)
 8005604:	a80b883a 	mov	r5,r21
 8005608:	1039883a 	mov	fp,r2
 800560c:	4009883a 	mov	r4,r8
 8005610:	8004c080 	call	8004c08 <__umodsi3>
 8005614:	d8c00017 	ldw	r3,0(sp)
 8005618:	1004943a 	slli	r2,r2,16
 800561c:	1810d43a 	srli	r8,r3,16
 8005620:	120eb03a 	or	r7,r2,r8
 8005624:	3f00062e 	bgeu	r7,fp,8005640 <__divdf3+0x3cc>
 8005628:	3dcf883a 	add	r7,r7,r23
 800562c:	88bfffc4 	addi	r2,r17,-1
 8005630:	3dc10a36 	bltu	r7,r23,8005a5c <__divdf3+0x7e8>
 8005634:	3f01092e 	bgeu	r7,fp,8005a5c <__divdf3+0x7e8>
 8005638:	8c7fff84 	addi	r17,r17,-2
 800563c:	3dcf883a 	add	r7,r7,r23
 8005640:	3f39c83a 	sub	fp,r7,fp
 8005644:	e009883a 	mov	r4,fp
 8005648:	a80b883a 	mov	r5,r21
 800564c:	8004c000 	call	8004c00 <__udivsi3>
 8005650:	1009883a 	mov	r4,r2
 8005654:	980b883a 	mov	r5,r19
 8005658:	1021883a 	mov	r16,r2
 800565c:	8004c100 	call	8004c10 <__mulsi3>
 8005660:	e009883a 	mov	r4,fp
 8005664:	a80b883a 	mov	r5,r21
 8005668:	d8800315 	stw	r2,12(sp)
 800566c:	8004c080 	call	8004c08 <__umodsi3>
 8005670:	d9000017 	ldw	r4,0(sp)
 8005674:	1004943a 	slli	r2,r2,16
 8005678:	da000317 	ldw	r8,12(sp)
 800567c:	20ffffcc 	andi	r3,r4,65535
 8005680:	10ceb03a 	or	r7,r2,r3
 8005684:	3a00062e 	bgeu	r7,r8,80056a0 <__divdf3+0x42c>
 8005688:	3dcf883a 	add	r7,r7,r23
 800568c:	80bfffc4 	addi	r2,r16,-1
 8005690:	3dc0f036 	bltu	r7,r23,8005a54 <__divdf3+0x7e0>
 8005694:	3a00ef2e 	bgeu	r7,r8,8005a54 <__divdf3+0x7e0>
 8005698:	843fff84 	addi	r16,r16,-2
 800569c:	3dcf883a 	add	r7,r7,r23
 80056a0:	d8c00117 	ldw	r3,4(sp)
 80056a4:	8822943a 	slli	r17,r17,16
 80056a8:	3a0fc83a 	sub	r7,r7,r8
 80056ac:	1806d43a 	srli	r3,r3,16
 80056b0:	8462b03a 	or	r17,r16,r17
 80056b4:	8affffcc 	andi	r11,r17,65535
 80056b8:	d8c00015 	stw	r3,0(sp)
 80056bc:	d8c00117 	ldw	r3,4(sp)
 80056c0:	8820d43a 	srli	r16,r17,16
 80056c4:	5809883a 	mov	r4,r11
 80056c8:	1f3fffcc 	andi	fp,r3,65535
 80056cc:	e00b883a 	mov	r5,fp
 80056d0:	d9c00515 	stw	r7,20(sp)
 80056d4:	dac00215 	stw	r11,8(sp)
 80056d8:	8004c100 	call	8004c10 <__mulsi3>
 80056dc:	8009883a 	mov	r4,r16
 80056e0:	e00b883a 	mov	r5,fp
 80056e4:	d8800415 	stw	r2,16(sp)
 80056e8:	8004c100 	call	8004c10 <__mulsi3>
 80056ec:	d9400017 	ldw	r5,0(sp)
 80056f0:	8009883a 	mov	r4,r16
 80056f4:	d8800315 	stw	r2,12(sp)
 80056f8:	8004c100 	call	8004c10 <__mulsi3>
 80056fc:	dac00217 	ldw	r11,8(sp)
 8005700:	d9400017 	ldw	r5,0(sp)
 8005704:	d8800215 	stw	r2,8(sp)
 8005708:	5809883a 	mov	r4,r11
 800570c:	8004c100 	call	8004c10 <__mulsi3>
 8005710:	da400417 	ldw	r9,16(sp)
 8005714:	da800317 	ldw	r10,12(sp)
 8005718:	d9c00517 	ldw	r7,20(sp)
 800571c:	480ad43a 	srli	r5,r9,16
 8005720:	5085883a 	add	r2,r10,r2
 8005724:	db000217 	ldw	r12,8(sp)
 8005728:	1151883a 	add	r8,r2,r5
 800572c:	4280022e 	bgeu	r8,r10,8005738 <__divdf3+0x4c4>
 8005730:	00800074 	movhi	r2,1
 8005734:	6099883a 	add	r12,r12,r2
 8005738:	400ad43a 	srli	r5,r8,16
 800573c:	4010943a 	slli	r8,r8,16
 8005740:	4c3fffcc 	andi	r16,r9,65535
 8005744:	6149883a 	add	r4,r12,r5
 8005748:	4411883a 	add	r8,r8,r16
 800574c:	3900a736 	bltu	r7,r4,80059ec <__divdf3+0x778>
 8005750:	3900c426 	beq	r7,r4,8005a64 <__divdf3+0x7f0>
 8005754:	3909c83a 	sub	r4,r7,r4
 8005758:	b221c83a 	sub	r16,r22,r8
 800575c:	b42d803a 	cmpltu	r22,r22,r16
 8005760:	25adc83a 	sub	r22,r4,r22
 8005764:	b5c0c626 	beq	r22,r23,8005a80 <__divdf3+0x80c>
 8005768:	b009883a 	mov	r4,r22
 800576c:	a80b883a 	mov	r5,r21
 8005770:	8004c000 	call	8004c00 <__udivsi3>
 8005774:	1009883a 	mov	r4,r2
 8005778:	980b883a 	mov	r5,r19
 800577c:	d8800315 	stw	r2,12(sp)
 8005780:	8004c100 	call	8004c10 <__mulsi3>
 8005784:	a80b883a 	mov	r5,r21
 8005788:	b009883a 	mov	r4,r22
 800578c:	d8800415 	stw	r2,16(sp)
 8005790:	8004c080 	call	8004c08 <__umodsi3>
 8005794:	1004943a 	slli	r2,r2,16
 8005798:	800ed43a 	srli	r7,r16,16
 800579c:	da400417 	ldw	r9,16(sp)
 80057a0:	da000317 	ldw	r8,12(sp)
 80057a4:	11cab03a 	or	r5,r2,r7
 80057a8:	2a40062e 	bgeu	r5,r9,80057c4 <__divdf3+0x550>
 80057ac:	2dcb883a 	add	r5,r5,r23
 80057b0:	40bfffc4 	addi	r2,r8,-1
 80057b4:	2dc0b436 	bltu	r5,r23,8005a88 <__divdf3+0x814>
 80057b8:	2a40b32e 	bgeu	r5,r9,8005a88 <__divdf3+0x814>
 80057bc:	423fff84 	addi	r8,r8,-2
 80057c0:	2dcb883a 	add	r5,r5,r23
 80057c4:	2a6dc83a 	sub	r22,r5,r9
 80057c8:	b009883a 	mov	r4,r22
 80057cc:	a80b883a 	mov	r5,r21
 80057d0:	da000315 	stw	r8,12(sp)
 80057d4:	8004c000 	call	8004c00 <__udivsi3>
 80057d8:	980b883a 	mov	r5,r19
 80057dc:	1009883a 	mov	r4,r2
 80057e0:	d8800415 	stw	r2,16(sp)
 80057e4:	8004c100 	call	8004c10 <__mulsi3>
 80057e8:	b009883a 	mov	r4,r22
 80057ec:	a80b883a 	mov	r5,r21
 80057f0:	1027883a 	mov	r19,r2
 80057f4:	8004c080 	call	8004c08 <__umodsi3>
 80057f8:	1004943a 	slli	r2,r2,16
 80057fc:	843fffcc 	andi	r16,r16,65535
 8005800:	da000317 	ldw	r8,12(sp)
 8005804:	140eb03a 	or	r7,r2,r16
 8005808:	da400417 	ldw	r9,16(sp)
 800580c:	3cc0062e 	bgeu	r7,r19,8005828 <__divdf3+0x5b4>
 8005810:	3dcf883a 	add	r7,r7,r23
 8005814:	48bfffc4 	addi	r2,r9,-1
 8005818:	3dc09d36 	bltu	r7,r23,8005a90 <__divdf3+0x81c>
 800581c:	3cc09c2e 	bgeu	r7,r19,8005a90 <__divdf3+0x81c>
 8005820:	4a7fff84 	addi	r9,r9,-2
 8005824:	3dcf883a 	add	r7,r7,r23
 8005828:	4010943a 	slli	r8,r8,16
 800582c:	3cebc83a 	sub	r21,r7,r19
 8005830:	e00b883a 	mov	r5,fp
 8005834:	4a26b03a 	or	r19,r9,r8
 8005838:	99ffffcc 	andi	r7,r19,65535
 800583c:	9820d43a 	srli	r16,r19,16
 8005840:	3809883a 	mov	r4,r7
 8005844:	d9c00515 	stw	r7,20(sp)
 8005848:	8004c100 	call	8004c10 <__mulsi3>
 800584c:	8009883a 	mov	r4,r16
 8005850:	e00b883a 	mov	r5,fp
 8005854:	102d883a 	mov	r22,r2
 8005858:	8004c100 	call	8004c10 <__mulsi3>
 800585c:	d9400017 	ldw	r5,0(sp)
 8005860:	8009883a 	mov	r4,r16
 8005864:	1039883a 	mov	fp,r2
 8005868:	8004c100 	call	8004c10 <__mulsi3>
 800586c:	d9c00517 	ldw	r7,20(sp)
 8005870:	d9400017 	ldw	r5,0(sp)
 8005874:	1021883a 	mov	r16,r2
 8005878:	3809883a 	mov	r4,r7
 800587c:	8004c100 	call	8004c10 <__mulsi3>
 8005880:	b008d43a 	srli	r4,r22,16
 8005884:	e085883a 	add	r2,fp,r2
 8005888:	1109883a 	add	r4,r2,r4
 800588c:	2700022e 	bgeu	r4,fp,8005898 <__divdf3+0x624>
 8005890:	00800074 	movhi	r2,1
 8005894:	80a1883a 	add	r16,r16,r2
 8005898:	200ad43a 	srli	r5,r4,16
 800589c:	2008943a 	slli	r4,r4,16
 80058a0:	b5bfffcc 	andi	r22,r22,65535
 80058a4:	8145883a 	add	r2,r16,r5
 80058a8:	2589883a 	add	r4,r4,r22
 80058ac:	a8802c36 	bltu	r21,r2,8005960 <__divdf3+0x6ec>
 80058b0:	a880a426 	beq	r21,r2,8005b44 <__divdf3+0x8d0>
 80058b4:	9cc00054 	ori	r19,r19,1
 80058b8:	9200ffc4 	addi	r8,r18,1023
 80058bc:	023f270e 	bge	zero,r8,800555c <__alt_data_end+0xfc00555c>
 80058c0:	988001cc 	andi	r2,r19,7
 80058c4:	10000726 	beq	r2,zero,80058e4 <__divdf3+0x670>
 80058c8:	990003cc 	andi	r4,r19,15
 80058cc:	00800104 	movi	r2,4
 80058d0:	20800426 	beq	r4,r2,80058e4 <__divdf3+0x670>
 80058d4:	9885883a 	add	r2,r19,r2
 80058d8:	14e7803a 	cmpltu	r19,r2,r19
 80058dc:	8ce3883a 	add	r17,r17,r19
 80058e0:	1027883a 	mov	r19,r2
 80058e4:	8880402c 	andhi	r2,r17,256
 80058e8:	10000426 	beq	r2,zero,80058fc <__divdf3+0x688>
 80058ec:	00bfc034 	movhi	r2,65280
 80058f0:	10bfffc4 	addi	r2,r2,-1
 80058f4:	92010004 	addi	r8,r18,1024
 80058f8:	88a2703a 	and	r17,r17,r2
 80058fc:	0081ff84 	movi	r2,2046
 8005900:	123eb616 	blt	r2,r8,80053dc <__alt_data_end+0xfc0053dc>
 8005904:	9826d0fa 	srli	r19,r19,3
 8005908:	8804977a 	slli	r2,r17,29
 800590c:	8820927a 	slli	r16,r17,9
 8005910:	4201ffcc 	andi	r8,r8,2047
 8005914:	14e6b03a 	or	r19,r2,r19
 8005918:	800ad33a 	srli	r5,r16,12
 800591c:	a180004c 	andi	r6,r20,1
 8005920:	003eb206 	br	80053ec <__alt_data_end+0xfc0053ec>
 8005924:	008000c4 	movi	r2,3
 8005928:	4080ac26 	beq	r8,r2,8005bdc <__divdf3+0x968>
 800592c:	00800044 	movi	r2,1
 8005930:	4080591e 	bne	r8,r2,8005a98 <__divdf3+0x824>
 8005934:	e00d883a 	mov	r6,fp
 8005938:	0011883a 	mov	r8,zero
 800593c:	000b883a 	mov	r5,zero
 8005940:	0027883a 	mov	r19,zero
 8005944:	003ea906 	br	80053ec <__alt_data_end+0xfc0053ec>
 8005948:	00800434 	movhi	r2,16
 800594c:	89400234 	orhi	r5,r17,8
 8005950:	10bfffc4 	addi	r2,r2,-1
 8005954:	b00d883a 	mov	r6,r22
 8005958:	288a703a 	and	r5,r5,r2
 800595c:	003efd06 	br	8005554 <__alt_data_end+0xfc005554>
 8005960:	adcf883a 	add	r7,r21,r23
 8005964:	997fffc4 	addi	r5,r19,-1
 8005968:	3dc0412e 	bgeu	r7,r23,8005a70 <__divdf3+0x7fc>
 800596c:	2827883a 	mov	r19,r5
 8005970:	38bfd01e 	bne	r7,r2,80058b4 <__alt_data_end+0xfc0058b4>
 8005974:	d8c00117 	ldw	r3,4(sp)
 8005978:	193fce1e 	bne	r3,r4,80058b4 <__alt_data_end+0xfc0058b4>
 800597c:	003fce06 	br	80058b8 <__alt_data_end+0xfc0058b8>
 8005980:	d9800215 	stw	r6,8(sp)
 8005984:	d9c00515 	stw	r7,20(sp)
 8005988:	80069040 	call	8006904 <__clzsi2>
 800598c:	10c00804 	addi	r3,r2,32
 8005990:	010009c4 	movi	r4,39
 8005994:	d9800217 	ldw	r6,8(sp)
 8005998:	d9c00517 	ldw	r7,20(sp)
 800599c:	20feb20e 	bge	r4,r3,8005468 <__alt_data_end+0xfc005468>
 80059a0:	117ffe04 	addi	r5,r2,-8
 80059a4:	a162983a 	sll	r17,r20,r5
 80059a8:	0027883a 	mov	r19,zero
 80059ac:	003eb506 	br	8005484 <__alt_data_end+0xfc005484>
 80059b0:	3009883a 	mov	r4,r6
 80059b4:	d9800215 	stw	r6,8(sp)
 80059b8:	da000315 	stw	r8,12(sp)
 80059bc:	da400415 	stw	r9,16(sp)
 80059c0:	80069040 	call	8006904 <__clzsi2>
 80059c4:	10c00804 	addi	r3,r2,32
 80059c8:	010009c4 	movi	r4,39
 80059cc:	d9800217 	ldw	r6,8(sp)
 80059d0:	da000317 	ldw	r8,12(sp)
 80059d4:	da400417 	ldw	r9,16(sp)
 80059d8:	20fec10e 	bge	r4,r3,80054e0 <__alt_data_end+0xfc0054e0>
 80059dc:	10bffe04 	addi	r2,r2,-8
 80059e0:	a8a0983a 	sll	r16,r21,r2
 80059e4:	002b883a 	mov	r21,zero
 80059e8:	003ec406 	br	80054fc <__alt_data_end+0xfc0054fc>
 80059ec:	d8c00117 	ldw	r3,4(sp)
 80059f0:	b0ed883a 	add	r22,r22,r3
 80059f4:	b0c5803a 	cmpltu	r2,r22,r3
 80059f8:	15c5883a 	add	r2,r2,r23
 80059fc:	11cf883a 	add	r7,r2,r7
 8005a00:	88bfffc4 	addi	r2,r17,-1
 8005a04:	b9c00d2e 	bgeu	r23,r7,8005a3c <__divdf3+0x7c8>
 8005a08:	39003f36 	bltu	r7,r4,8005b08 <__divdf3+0x894>
 8005a0c:	21c06a26 	beq	r4,r7,8005bb8 <__divdf3+0x944>
 8005a10:	3909c83a 	sub	r4,r7,r4
 8005a14:	1023883a 	mov	r17,r2
 8005a18:	003f4f06 	br	8005758 <__alt_data_end+0xfc005758>
 8005a1c:	9d7ee536 	bltu	r19,r21,80055b4 <__alt_data_end+0xfc0055b4>
 8005a20:	982ed07a 	srli	r23,r19,1
 8005a24:	880497fa 	slli	r2,r17,31
 8005a28:	8810d07a 	srli	r8,r17,1
 8005a2c:	982c97fa 	slli	r22,r19,31
 8005a30:	b884b03a 	or	r2,r23,r2
 8005a34:	d8800015 	stw	r2,0(sp)
 8005a38:	003ee206 	br	80055c4 <__alt_data_end+0xfc0055c4>
 8005a3c:	3dfff41e 	bne	r7,r23,8005a10 <__alt_data_end+0xfc005a10>
 8005a40:	d8c00117 	ldw	r3,4(sp)
 8005a44:	b0fff02e 	bgeu	r22,r3,8005a08 <__alt_data_end+0xfc005a08>
 8005a48:	b909c83a 	sub	r4,r23,r4
 8005a4c:	1023883a 	mov	r17,r2
 8005a50:	003f4106 	br	8005758 <__alt_data_end+0xfc005758>
 8005a54:	1021883a 	mov	r16,r2
 8005a58:	003f1106 	br	80056a0 <__alt_data_end+0xfc0056a0>
 8005a5c:	1023883a 	mov	r17,r2
 8005a60:	003ef706 	br	8005640 <__alt_data_end+0xfc005640>
 8005a64:	b23fe136 	bltu	r22,r8,80059ec <__alt_data_end+0xfc0059ec>
 8005a68:	0009883a 	mov	r4,zero
 8005a6c:	003f3a06 	br	8005758 <__alt_data_end+0xfc005758>
 8005a70:	38802c36 	bltu	r7,r2,8005b24 <__divdf3+0x8b0>
 8005a74:	11c05326 	beq	r2,r7,8005bc4 <__divdf3+0x950>
 8005a78:	2827883a 	mov	r19,r5
 8005a7c:	003f8d06 	br	80058b4 <__alt_data_end+0xfc0058b4>
 8005a80:	04ffffc4 	movi	r19,-1
 8005a84:	003f8c06 	br	80058b8 <__alt_data_end+0xfc0058b8>
 8005a88:	1011883a 	mov	r8,r2
 8005a8c:	003f4d06 	br	80057c4 <__alt_data_end+0xfc0057c4>
 8005a90:	1013883a 	mov	r9,r2
 8005a94:	003f6406 	br	8005828 <__alt_data_end+0xfc005828>
 8005a98:	e029883a 	mov	r20,fp
 8005a9c:	003f8606 	br	80058b8 <__alt_data_end+0xfc0058b8>
 8005aa0:	008007c4 	movi	r2,31
 8005aa4:	14002a16 	blt	r2,r16,8005b50 <__divdf3+0x8dc>
 8005aa8:	91410784 	addi	r5,r18,1054
 8005aac:	9c0cd83a 	srl	r6,r19,r16
 8005ab0:	8948983a 	sll	r4,r17,r5
 8005ab4:	9944983a 	sll	r2,r19,r5
 8005ab8:	8c20d83a 	srl	r16,r17,r16
 8005abc:	3108b03a 	or	r4,r6,r4
 8005ac0:	1004c03a 	cmpne	r2,r2,zero
 8005ac4:	2084b03a 	or	r2,r4,r2
 8005ac8:	110001cc 	andi	r4,r2,7
 8005acc:	20000726 	beq	r4,zero,8005aec <__divdf3+0x878>
 8005ad0:	114003cc 	andi	r5,r2,15
 8005ad4:	01000104 	movi	r4,4
 8005ad8:	29000426 	beq	r5,r4,8005aec <__divdf3+0x878>
 8005adc:	11000104 	addi	r4,r2,4
 8005ae0:	2085803a 	cmpltu	r2,r4,r2
 8005ae4:	80a1883a 	add	r16,r16,r2
 8005ae8:	2005883a 	mov	r2,r4
 8005aec:	8100202c 	andhi	r4,r16,128
 8005af0:	20002d26 	beq	r4,zero,8005ba8 <__divdf3+0x934>
 8005af4:	a180004c 	andi	r6,r20,1
 8005af8:	02000044 	movi	r8,1
 8005afc:	000b883a 	mov	r5,zero
 8005b00:	0027883a 	mov	r19,zero
 8005b04:	003e3906 	br	80053ec <__alt_data_end+0xfc0053ec>
 8005b08:	d8c00117 	ldw	r3,4(sp)
 8005b0c:	8c7fff84 	addi	r17,r17,-2
 8005b10:	b0ed883a 	add	r22,r22,r3
 8005b14:	b0c5803a 	cmpltu	r2,r22,r3
 8005b18:	15c5883a 	add	r2,r2,r23
 8005b1c:	11cf883a 	add	r7,r2,r7
 8005b20:	003f0c06 	br	8005754 <__alt_data_end+0xfc005754>
 8005b24:	d8c00117 	ldw	r3,4(sp)
 8005b28:	997fff84 	addi	r5,r19,-2
 8005b2c:	18d1883a 	add	r8,r3,r3
 8005b30:	40c7803a 	cmpltu	r3,r8,r3
 8005b34:	1dcd883a 	add	r6,r3,r23
 8005b38:	398f883a 	add	r7,r7,r6
 8005b3c:	da000115 	stw	r8,4(sp)
 8005b40:	003f8a06 	br	800596c <__alt_data_end+0xfc00596c>
 8005b44:	203f861e 	bne	r4,zero,8005960 <__alt_data_end+0xfc005960>
 8005b48:	d8000115 	stw	zero,4(sp)
 8005b4c:	003f8906 	br	8005974 <__alt_data_end+0xfc005974>
 8005b50:	00bef884 	movi	r2,-1054
 8005b54:	1485c83a 	sub	r2,r2,r18
 8005b58:	01000804 	movi	r4,32
 8005b5c:	8884d83a 	srl	r2,r17,r2
 8005b60:	81001c26 	beq	r16,r4,8005bd4 <__divdf3+0x960>
 8005b64:	91010f84 	addi	r4,r18,1086
 8005b68:	8908983a 	sll	r4,r17,r4
 8005b6c:	24c8b03a 	or	r4,r4,r19
 8005b70:	2008c03a 	cmpne	r4,r4,zero
 8005b74:	2084b03a 	or	r2,r4,r2
 8005b78:	140001cc 	andi	r16,r2,7
 8005b7c:	8000061e 	bne	r16,zero,8005b98 <__divdf3+0x924>
 8005b80:	000b883a 	mov	r5,zero
 8005b84:	1004d0fa 	srli	r2,r2,3
 8005b88:	a180004c 	andi	r6,r20,1
 8005b8c:	0011883a 	mov	r8,zero
 8005b90:	1426b03a 	or	r19,r2,r16
 8005b94:	003e1506 	br	80053ec <__alt_data_end+0xfc0053ec>
 8005b98:	114003cc 	andi	r5,r2,15
 8005b9c:	01000104 	movi	r4,4
 8005ba0:	0021883a 	mov	r16,zero
 8005ba4:	293fcd1e 	bne	r5,r4,8005adc <__alt_data_end+0xfc005adc>
 8005ba8:	800a927a 	slli	r5,r16,9
 8005bac:	8020977a 	slli	r16,r16,29
 8005bb0:	280ad33a 	srli	r5,r5,12
 8005bb4:	003ff306 	br	8005b84 <__alt_data_end+0xfc005b84>
 8005bb8:	b23fd336 	bltu	r22,r8,8005b08 <__alt_data_end+0xfc005b08>
 8005bbc:	1023883a 	mov	r17,r2
 8005bc0:	003fa906 	br	8005a68 <__alt_data_end+0xfc005a68>
 8005bc4:	d8c00117 	ldw	r3,4(sp)
 8005bc8:	193fd636 	bltu	r3,r4,8005b24 <__alt_data_end+0xfc005b24>
 8005bcc:	2827883a 	mov	r19,r5
 8005bd0:	003f6806 	br	8005974 <__alt_data_end+0xfc005974>
 8005bd4:	0009883a 	mov	r4,zero
 8005bd8:	003fe406 	br	8005b6c <__alt_data_end+0xfc005b6c>
 8005bdc:	00800434 	movhi	r2,16
 8005be0:	89400234 	orhi	r5,r17,8
 8005be4:	10bfffc4 	addi	r2,r2,-1
 8005be8:	e00d883a 	mov	r6,fp
 8005bec:	288a703a 	and	r5,r5,r2
 8005bf0:	003e5806 	br	8005554 <__alt_data_end+0xfc005554>

08005bf4 <__muldf3>:
 8005bf4:	deffee04 	addi	sp,sp,-72
 8005bf8:	dd000c15 	stw	r20,48(sp)
 8005bfc:	2828d53a 	srli	r20,r5,20
 8005c00:	dd400d15 	stw	r21,52(sp)
 8005c04:	282ad7fa 	srli	r21,r5,31
 8005c08:	dc000815 	stw	r16,32(sp)
 8005c0c:	04000434 	movhi	r16,16
 8005c10:	ddc00f15 	stw	r23,60(sp)
 8005c14:	dcc00b15 	stw	r19,44(sp)
 8005c18:	dc800a15 	stw	r18,40(sp)
 8005c1c:	843fffc4 	addi	r16,r16,-1
 8005c20:	dfc01115 	stw	ra,68(sp)
 8005c24:	df001015 	stw	fp,64(sp)
 8005c28:	dd800e15 	stw	r22,56(sp)
 8005c2c:	dc400915 	stw	r17,36(sp)
 8005c30:	a501ffcc 	andi	r20,r20,2047
 8005c34:	2025883a 	mov	r18,r4
 8005c38:	202f883a 	mov	r23,r4
 8005c3c:	2c20703a 	and	r16,r5,r16
 8005c40:	a827883a 	mov	r19,r21
 8005c44:	aa403fcc 	andi	r9,r21,255
 8005c48:	a0005926 	beq	r20,zero,8005db0 <__muldf3+0x1bc>
 8005c4c:	0081ffc4 	movi	r2,2047
 8005c50:	a0803426 	beq	r20,r2,8005d24 <__muldf3+0x130>
 8005c54:	84000434 	orhi	r16,r16,16
 8005c58:	2004d77a 	srli	r2,r4,29
 8005c5c:	802090fa 	slli	r16,r16,3
 8005c60:	202e90fa 	slli	r23,r4,3
 8005c64:	a53f0044 	addi	r20,r20,-1023
 8005c68:	80a0b03a 	or	r16,r16,r2
 8005c6c:	000b883a 	mov	r5,zero
 8005c70:	0039883a 	mov	fp,zero
 8005c74:	3806d53a 	srli	r3,r7,20
 8005c78:	382cd7fa 	srli	r22,r7,31
 8005c7c:	00800434 	movhi	r2,16
 8005c80:	10bfffc4 	addi	r2,r2,-1
 8005c84:	18c1ffcc 	andi	r3,r3,2047
 8005c88:	3025883a 	mov	r18,r6
 8005c8c:	38a2703a 	and	r17,r7,r2
 8005c90:	b2803fcc 	andi	r10,r22,255
 8005c94:	18006426 	beq	r3,zero,8005e28 <__muldf3+0x234>
 8005c98:	0081ffc4 	movi	r2,2047
 8005c9c:	18805c26 	beq	r3,r2,8005e10 <__muldf3+0x21c>
 8005ca0:	8c400434 	orhi	r17,r17,16
 8005ca4:	3004d77a 	srli	r2,r6,29
 8005ca8:	882290fa 	slli	r17,r17,3
 8005cac:	302490fa 	slli	r18,r6,3
 8005cb0:	18ff0044 	addi	r3,r3,-1023
 8005cb4:	88a2b03a 	or	r17,r17,r2
 8005cb8:	000f883a 	mov	r7,zero
 8005cbc:	394ab03a 	or	r5,r7,r5
 8005cc0:	280a90ba 	slli	r5,r5,2
 8005cc4:	00820034 	movhi	r2,2048
 8005cc8:	10973904 	addi	r2,r2,23780
 8005ccc:	288b883a 	add	r5,r5,r2
 8005cd0:	28800017 	ldw	r2,0(r5)
 8005cd4:	a0c7883a 	add	r3,r20,r3
 8005cd8:	b54cf03a 	xor	r6,r22,r21
 8005cdc:	1a000044 	addi	r8,r3,1
 8005ce0:	1000683a 	jmp	r2
 8005ce4:	08005f28 	cmpgeui	zero,at,380
 8005ce8:	08005f14 	ori	zero,at,380
 8005cec:	08005f14 	ori	zero,at,380
 8005cf0:	08005f00 	call	8005f0 <__alt_mem_sdram-0x77ffa10>
 8005cf4:	08005d40 	call	8005d4 <__alt_mem_sdram-0x77ffa2c>
 8005cf8:	08005d40 	call	8005d4 <__alt_mem_sdram-0x77ffa2c>
 8005cfc:	08005ee8 	cmpgeui	zero,at,379
 8005d00:	08005f00 	call	8005f0 <__alt_mem_sdram-0x77ffa10>
 8005d04:	08005d40 	call	8005d4 <__alt_mem_sdram-0x77ffa2c>
 8005d08:	08005ee8 	cmpgeui	zero,at,379
 8005d0c:	08005d40 	call	8005d4 <__alt_mem_sdram-0x77ffa2c>
 8005d10:	08005f00 	call	8005f0 <__alt_mem_sdram-0x77ffa10>
 8005d14:	08005d44 	addi	zero,at,373
 8005d18:	08005d44 	addi	zero,at,373
 8005d1c:	08005d44 	addi	zero,at,373
 8005d20:	08006264 	muli	zero,at,393
 8005d24:	8104b03a 	or	r2,r16,r4
 8005d28:	10006c1e 	bne	r2,zero,8005edc <__muldf3+0x2e8>
 8005d2c:	01400204 	movi	r5,8
 8005d30:	0021883a 	mov	r16,zero
 8005d34:	002f883a 	mov	r23,zero
 8005d38:	07000084 	movi	fp,2
 8005d3c:	003fcd06 	br	8005c74 <__alt_data_end+0xfc005c74>
 8005d40:	3013883a 	mov	r9,r6
 8005d44:	00800084 	movi	r2,2
 8005d48:	e080501e 	bne	fp,r2,8005e8c <__muldf3+0x298>
 8005d4c:	4cc0004c 	andi	r19,r9,1
 8005d50:	0101ffc4 	movi	r4,2047
 8005d54:	0021883a 	mov	r16,zero
 8005d58:	002f883a 	mov	r23,zero
 8005d5c:	2008953a 	slli	r4,r4,20
 8005d60:	98c03fcc 	andi	r3,r19,255
 8005d64:	04400434 	movhi	r17,16
 8005d68:	8c7fffc4 	addi	r17,r17,-1
 8005d6c:	180697fa 	slli	r3,r3,31
 8005d70:	8460703a 	and	r16,r16,r17
 8005d74:	8120b03a 	or	r16,r16,r4
 8005d78:	80c6b03a 	or	r3,r16,r3
 8005d7c:	b805883a 	mov	r2,r23
 8005d80:	dfc01117 	ldw	ra,68(sp)
 8005d84:	df001017 	ldw	fp,64(sp)
 8005d88:	ddc00f17 	ldw	r23,60(sp)
 8005d8c:	dd800e17 	ldw	r22,56(sp)
 8005d90:	dd400d17 	ldw	r21,52(sp)
 8005d94:	dd000c17 	ldw	r20,48(sp)
 8005d98:	dcc00b17 	ldw	r19,44(sp)
 8005d9c:	dc800a17 	ldw	r18,40(sp)
 8005da0:	dc400917 	ldw	r17,36(sp)
 8005da4:	dc000817 	ldw	r16,32(sp)
 8005da8:	dec01204 	addi	sp,sp,72
 8005dac:	f800283a 	ret
 8005db0:	8104b03a 	or	r2,r16,r4
 8005db4:	10004426 	beq	r2,zero,8005ec8 <__muldf3+0x2d4>
 8005db8:	80014b26 	beq	r16,zero,80062e8 <__muldf3+0x6f4>
 8005dbc:	8009883a 	mov	r4,r16
 8005dc0:	d9800715 	stw	r6,28(sp)
 8005dc4:	d9c00215 	stw	r7,8(sp)
 8005dc8:	da400415 	stw	r9,16(sp)
 8005dcc:	80069040 	call	8006904 <__clzsi2>
 8005dd0:	d9800717 	ldw	r6,28(sp)
 8005dd4:	d9c00217 	ldw	r7,8(sp)
 8005dd8:	da400417 	ldw	r9,16(sp)
 8005ddc:	1007883a 	mov	r3,r2
 8005de0:	01000a04 	movi	r4,40
 8005de4:	1dfffe04 	addi	r23,r3,-8
 8005de8:	20c9c83a 	sub	r4,r4,r3
 8005dec:	85e0983a 	sll	r16,r16,r23
 8005df0:	9108d83a 	srl	r4,r18,r4
 8005df4:	95ee983a 	sll	r23,r18,r23
 8005df8:	2420b03a 	or	r16,r4,r16
 8005dfc:	053f0344 	movi	r20,-1011
 8005e00:	a0e9c83a 	sub	r20,r20,r3
 8005e04:	000b883a 	mov	r5,zero
 8005e08:	0039883a 	mov	fp,zero
 8005e0c:	003f9906 	br	8005c74 <__alt_data_end+0xfc005c74>
 8005e10:	8984b03a 	or	r2,r17,r6
 8005e14:	10002a1e 	bne	r2,zero,8005ec0 <__muldf3+0x2cc>
 8005e18:	0023883a 	mov	r17,zero
 8005e1c:	0025883a 	mov	r18,zero
 8005e20:	01c00084 	movi	r7,2
 8005e24:	003fa506 	br	8005cbc <__alt_data_end+0xfc005cbc>
 8005e28:	8984b03a 	or	r2,r17,r6
 8005e2c:	10002026 	beq	r2,zero,8005eb0 <__muldf3+0x2bc>
 8005e30:	88011c26 	beq	r17,zero,80062a4 <__muldf3+0x6b0>
 8005e34:	8809883a 	mov	r4,r17
 8005e38:	d9400215 	stw	r5,8(sp)
 8005e3c:	d9800715 	stw	r6,28(sp)
 8005e40:	da400415 	stw	r9,16(sp)
 8005e44:	da800315 	stw	r10,12(sp)
 8005e48:	80069040 	call	8006904 <__clzsi2>
 8005e4c:	d9400217 	ldw	r5,8(sp)
 8005e50:	d9800717 	ldw	r6,28(sp)
 8005e54:	da400417 	ldw	r9,16(sp)
 8005e58:	da800317 	ldw	r10,12(sp)
 8005e5c:	1007883a 	mov	r3,r2
 8005e60:	01000a04 	movi	r4,40
 8005e64:	1cbffe04 	addi	r18,r3,-8
 8005e68:	20c9c83a 	sub	r4,r4,r3
 8005e6c:	8ca2983a 	sll	r17,r17,r18
 8005e70:	3108d83a 	srl	r4,r6,r4
 8005e74:	34a4983a 	sll	r18,r6,r18
 8005e78:	2462b03a 	or	r17,r4,r17
 8005e7c:	00bf0344 	movi	r2,-1011
 8005e80:	10c7c83a 	sub	r3,r2,r3
 8005e84:	000f883a 	mov	r7,zero
 8005e88:	003f8c06 	br	8005cbc <__alt_data_end+0xfc005cbc>
 8005e8c:	008000c4 	movi	r2,3
 8005e90:	e0816d26 	beq	fp,r2,8006448 <__muldf3+0x854>
 8005e94:	00800044 	movi	r2,1
 8005e98:	e081321e 	bne	fp,r2,8006364 <__muldf3+0x770>
 8005e9c:	48a6703a 	and	r19,r9,r2
 8005ea0:	0009883a 	mov	r4,zero
 8005ea4:	0021883a 	mov	r16,zero
 8005ea8:	002f883a 	mov	r23,zero
 8005eac:	003fab06 	br	8005d5c <__alt_data_end+0xfc005d5c>
 8005eb0:	0023883a 	mov	r17,zero
 8005eb4:	0025883a 	mov	r18,zero
 8005eb8:	01c00044 	movi	r7,1
 8005ebc:	003f7f06 	br	8005cbc <__alt_data_end+0xfc005cbc>
 8005ec0:	01c000c4 	movi	r7,3
 8005ec4:	003f7d06 	br	8005cbc <__alt_data_end+0xfc005cbc>
 8005ec8:	01400104 	movi	r5,4
 8005ecc:	0021883a 	mov	r16,zero
 8005ed0:	002f883a 	mov	r23,zero
 8005ed4:	07000044 	movi	fp,1
 8005ed8:	003f6606 	br	8005c74 <__alt_data_end+0xfc005c74>
 8005edc:	01400304 	movi	r5,12
 8005ee0:	070000c4 	movi	fp,3
 8005ee4:	003f6306 	br	8005c74 <__alt_data_end+0xfc005c74>
 8005ee8:	04000434 	movhi	r16,16
 8005eec:	0027883a 	mov	r19,zero
 8005ef0:	843fffc4 	addi	r16,r16,-1
 8005ef4:	05ffffc4 	movi	r23,-1
 8005ef8:	0101ffc4 	movi	r4,2047
 8005efc:	003f9706 	br	8005d5c <__alt_data_end+0xfc005d5c>
 8005f00:	8821883a 	mov	r16,r17
 8005f04:	902f883a 	mov	r23,r18
 8005f08:	5013883a 	mov	r9,r10
 8005f0c:	3839883a 	mov	fp,r7
 8005f10:	003f8c06 	br	8005d44 <__alt_data_end+0xfc005d44>
 8005f14:	8821883a 	mov	r16,r17
 8005f18:	902f883a 	mov	r23,r18
 8005f1c:	3013883a 	mov	r9,r6
 8005f20:	3839883a 	mov	fp,r7
 8005f24:	003f8706 	br	8005d44 <__alt_data_end+0xfc005d44>
 8005f28:	b82ad43a 	srli	r21,r23,16
 8005f2c:	9038d43a 	srli	fp,r18,16
 8005f30:	bdffffcc 	andi	r23,r23,65535
 8005f34:	94bfffcc 	andi	r18,r18,65535
 8005f38:	9009883a 	mov	r4,r18
 8005f3c:	b80b883a 	mov	r5,r23
 8005f40:	d8c00515 	stw	r3,20(sp)
 8005f44:	d9800715 	stw	r6,28(sp)
 8005f48:	da000615 	stw	r8,24(sp)
 8005f4c:	8004c100 	call	8004c10 <__mulsi3>
 8005f50:	9009883a 	mov	r4,r18
 8005f54:	a80b883a 	mov	r5,r21
 8005f58:	1029883a 	mov	r20,r2
 8005f5c:	8004c100 	call	8004c10 <__mulsi3>
 8005f60:	e009883a 	mov	r4,fp
 8005f64:	a80b883a 	mov	r5,r21
 8005f68:	102d883a 	mov	r22,r2
 8005f6c:	8004c100 	call	8004c10 <__mulsi3>
 8005f70:	e009883a 	mov	r4,fp
 8005f74:	b80b883a 	mov	r5,r23
 8005f78:	1027883a 	mov	r19,r2
 8005f7c:	8004c100 	call	8004c10 <__mulsi3>
 8005f80:	a008d43a 	srli	r4,r20,16
 8005f84:	b085883a 	add	r2,r22,r2
 8005f88:	d8c00517 	ldw	r3,20(sp)
 8005f8c:	110f883a 	add	r7,r2,r4
 8005f90:	d9800717 	ldw	r6,28(sp)
 8005f94:	da000617 	ldw	r8,24(sp)
 8005f98:	3d80022e 	bgeu	r7,r22,8005fa4 <__muldf3+0x3b0>
 8005f9c:	00800074 	movhi	r2,1
 8005fa0:	98a7883a 	add	r19,r19,r2
 8005fa4:	3804943a 	slli	r2,r7,16
 8005fa8:	380ed43a 	srli	r7,r7,16
 8005fac:	882cd43a 	srli	r22,r17,16
 8005fb0:	a53fffcc 	andi	r20,r20,65535
 8005fb4:	8c7fffcc 	andi	r17,r17,65535
 8005fb8:	1529883a 	add	r20,r2,r20
 8005fbc:	8809883a 	mov	r4,r17
 8005fc0:	b80b883a 	mov	r5,r23
 8005fc4:	d8c00515 	stw	r3,20(sp)
 8005fc8:	d9800715 	stw	r6,28(sp)
 8005fcc:	da000615 	stw	r8,24(sp)
 8005fd0:	d9c00015 	stw	r7,0(sp)
 8005fd4:	dd000115 	stw	r20,4(sp)
 8005fd8:	8004c100 	call	8004c10 <__mulsi3>
 8005fdc:	a80b883a 	mov	r5,r21
 8005fe0:	8809883a 	mov	r4,r17
 8005fe4:	d8800415 	stw	r2,16(sp)
 8005fe8:	8004c100 	call	8004c10 <__mulsi3>
 8005fec:	a80b883a 	mov	r5,r21
 8005ff0:	b009883a 	mov	r4,r22
 8005ff4:	1029883a 	mov	r20,r2
 8005ff8:	8004c100 	call	8004c10 <__mulsi3>
 8005ffc:	b009883a 	mov	r4,r22
 8006000:	b80b883a 	mov	r5,r23
 8006004:	102b883a 	mov	r21,r2
 8006008:	8004c100 	call	8004c10 <__mulsi3>
 800600c:	da400417 	ldw	r9,16(sp)
 8006010:	a085883a 	add	r2,r20,r2
 8006014:	d8c00517 	ldw	r3,20(sp)
 8006018:	4808d43a 	srli	r4,r9,16
 800601c:	d9800717 	ldw	r6,28(sp)
 8006020:	da000617 	ldw	r8,24(sp)
 8006024:	1109883a 	add	r4,r2,r4
 8006028:	2500022e 	bgeu	r4,r20,8006034 <__muldf3+0x440>
 800602c:	00800074 	movhi	r2,1
 8006030:	a8ab883a 	add	r21,r21,r2
 8006034:	200e943a 	slli	r7,r4,16
 8006038:	2004d43a 	srli	r2,r4,16
 800603c:	802ed43a 	srli	r23,r16,16
 8006040:	843fffcc 	andi	r16,r16,65535
 8006044:	4d3fffcc 	andi	r20,r9,65535
 8006048:	9009883a 	mov	r4,r18
 800604c:	800b883a 	mov	r5,r16
 8006050:	3d29883a 	add	r20,r7,r20
 8006054:	d8c00515 	stw	r3,20(sp)
 8006058:	d9800715 	stw	r6,28(sp)
 800605c:	da000615 	stw	r8,24(sp)
 8006060:	a8ab883a 	add	r21,r21,r2
 8006064:	8004c100 	call	8004c10 <__mulsi3>
 8006068:	9009883a 	mov	r4,r18
 800606c:	b80b883a 	mov	r5,r23
 8006070:	d8800315 	stw	r2,12(sp)
 8006074:	8004c100 	call	8004c10 <__mulsi3>
 8006078:	e009883a 	mov	r4,fp
 800607c:	b80b883a 	mov	r5,r23
 8006080:	1025883a 	mov	r18,r2
 8006084:	8004c100 	call	8004c10 <__mulsi3>
 8006088:	e009883a 	mov	r4,fp
 800608c:	800b883a 	mov	r5,r16
 8006090:	d8800215 	stw	r2,8(sp)
 8006094:	8004c100 	call	8004c10 <__mulsi3>
 8006098:	da800317 	ldw	r10,12(sp)
 800609c:	d9400017 	ldw	r5,0(sp)
 80060a0:	9085883a 	add	r2,r18,r2
 80060a4:	5008d43a 	srli	r4,r10,16
 80060a8:	a153883a 	add	r9,r20,r5
 80060ac:	d8c00517 	ldw	r3,20(sp)
 80060b0:	1109883a 	add	r4,r2,r4
 80060b4:	d9800717 	ldw	r6,28(sp)
 80060b8:	da000617 	ldw	r8,24(sp)
 80060bc:	dac00217 	ldw	r11,8(sp)
 80060c0:	2480022e 	bgeu	r4,r18,80060cc <__muldf3+0x4d8>
 80060c4:	00800074 	movhi	r2,1
 80060c8:	5897883a 	add	r11,r11,r2
 80060cc:	200e943a 	slli	r7,r4,16
 80060d0:	2038d43a 	srli	fp,r4,16
 80060d4:	52bfffcc 	andi	r10,r10,65535
 80060d8:	3a8f883a 	add	r7,r7,r10
 80060dc:	8809883a 	mov	r4,r17
 80060e0:	800b883a 	mov	r5,r16
 80060e4:	d8c00515 	stw	r3,20(sp)
 80060e8:	d9800715 	stw	r6,28(sp)
 80060ec:	d9c00215 	stw	r7,8(sp)
 80060f0:	da000615 	stw	r8,24(sp)
 80060f4:	da400415 	stw	r9,16(sp)
 80060f8:	5f39883a 	add	fp,r11,fp
 80060fc:	8004c100 	call	8004c10 <__mulsi3>
 8006100:	8809883a 	mov	r4,r17
 8006104:	b80b883a 	mov	r5,r23
 8006108:	1025883a 	mov	r18,r2
 800610c:	8004c100 	call	8004c10 <__mulsi3>
 8006110:	b009883a 	mov	r4,r22
 8006114:	b80b883a 	mov	r5,r23
 8006118:	d8800315 	stw	r2,12(sp)
 800611c:	8004c100 	call	8004c10 <__mulsi3>
 8006120:	b009883a 	mov	r4,r22
 8006124:	800b883a 	mov	r5,r16
 8006128:	1023883a 	mov	r17,r2
 800612c:	8004c100 	call	8004c10 <__mulsi3>
 8006130:	da800317 	ldw	r10,12(sp)
 8006134:	9008d43a 	srli	r4,r18,16
 8006138:	d8c00517 	ldw	r3,20(sp)
 800613c:	5085883a 	add	r2,r10,r2
 8006140:	1109883a 	add	r4,r2,r4
 8006144:	d9800717 	ldw	r6,28(sp)
 8006148:	d9c00217 	ldw	r7,8(sp)
 800614c:	da000617 	ldw	r8,24(sp)
 8006150:	da400417 	ldw	r9,16(sp)
 8006154:	2280022e 	bgeu	r4,r10,8006160 <__muldf3+0x56c>
 8006158:	00800074 	movhi	r2,1
 800615c:	88a3883a 	add	r17,r17,r2
 8006160:	2004943a 	slli	r2,r4,16
 8006164:	94bfffcc 	andi	r18,r18,65535
 8006168:	4ce7883a 	add	r19,r9,r19
 800616c:	14a5883a 	add	r18,r2,r18
 8006170:	9d29803a 	cmpltu	r20,r19,r20
 8006174:	9565883a 	add	r18,r18,r21
 8006178:	9505883a 	add	r2,r18,r20
 800617c:	99e7883a 	add	r19,r19,r7
 8006180:	99cf803a 	cmpltu	r7,r19,r7
 8006184:	e08b883a 	add	r5,fp,r2
 8006188:	2008d43a 	srli	r4,r4,16
 800618c:	29ef883a 	add	r23,r5,r7
 8006190:	1529803a 	cmpltu	r20,r2,r20
 8006194:	956b803a 	cmpltu	r21,r18,r21
 8006198:	b9cf803a 	cmpltu	r7,r23,r7
 800619c:	a564b03a 	or	r18,r20,r21
 80061a0:	2f39803a 	cmpltu	fp,r5,fp
 80061a4:	9125883a 	add	r18,r18,r4
 80061a8:	3f38b03a 	or	fp,r7,fp
 80061ac:	9725883a 	add	r18,r18,fp
 80061b0:	9804927a 	slli	r2,r19,9
 80061b4:	9463883a 	add	r17,r18,r17
 80061b8:	d9000117 	ldw	r4,4(sp)
 80061bc:	b820d5fa 	srli	r16,r23,23
 80061c0:	8822927a 	slli	r17,r17,9
 80061c4:	9826d5fa 	srli	r19,r19,23
 80061c8:	1104b03a 	or	r2,r2,r4
 80061cc:	b82e927a 	slli	r23,r23,9
 80061d0:	1004c03a 	cmpne	r2,r2,zero
 80061d4:	8c20b03a 	or	r16,r17,r16
 80061d8:	14e6b03a 	or	r19,r2,r19
 80061dc:	8080402c 	andhi	r2,r16,256
 80061e0:	9deeb03a 	or	r23,r19,r23
 80061e4:	10000726 	beq	r2,zero,8006204 <__muldf3+0x610>
 80061e8:	b804d07a 	srli	r2,r23,1
 80061ec:	800697fa 	slli	r3,r16,31
 80061f0:	bdc0004c 	andi	r23,r23,1
 80061f4:	8020d07a 	srli	r16,r16,1
 80061f8:	b8aeb03a 	or	r23,r23,r2
 80061fc:	b8eeb03a 	or	r23,r23,r3
 8006200:	4007883a 	mov	r3,r8
 8006204:	1900ffc4 	addi	r4,r3,1023
 8006208:	01004d0e 	bge	zero,r4,8006340 <__muldf3+0x74c>
 800620c:	b88001cc 	andi	r2,r23,7
 8006210:	10000726 	beq	r2,zero,8006230 <__muldf3+0x63c>
 8006214:	b94003cc 	andi	r5,r23,15
 8006218:	00800104 	movi	r2,4
 800621c:	28800426 	beq	r5,r2,8006230 <__muldf3+0x63c>
 8006220:	b885883a 	add	r2,r23,r2
 8006224:	15ef803a 	cmpltu	r23,r2,r23
 8006228:	85e1883a 	add	r16,r16,r23
 800622c:	102f883a 	mov	r23,r2
 8006230:	8080402c 	andhi	r2,r16,256
 8006234:	10000426 	beq	r2,zero,8006248 <__muldf3+0x654>
 8006238:	00bfc034 	movhi	r2,65280
 800623c:	10bfffc4 	addi	r2,r2,-1
 8006240:	19010004 	addi	r4,r3,1024
 8006244:	80a0703a 	and	r16,r16,r2
 8006248:	0081ff84 	movi	r2,2046
 800624c:	1100340e 	bge	r2,r4,8006320 <__muldf3+0x72c>
 8006250:	34c0004c 	andi	r19,r6,1
 8006254:	0101ffc4 	movi	r4,2047
 8006258:	0021883a 	mov	r16,zero
 800625c:	002f883a 	mov	r23,zero
 8006260:	003ebe06 	br	8005d5c <__alt_data_end+0xfc005d5c>
 8006264:	8080022c 	andhi	r2,r16,8
 8006268:	10000926 	beq	r2,zero,8006290 <__muldf3+0x69c>
 800626c:	8880022c 	andhi	r2,r17,8
 8006270:	1000071e 	bne	r2,zero,8006290 <__muldf3+0x69c>
 8006274:	00800434 	movhi	r2,16
 8006278:	8c000234 	orhi	r16,r17,8
 800627c:	10bfffc4 	addi	r2,r2,-1
 8006280:	b027883a 	mov	r19,r22
 8006284:	80a0703a 	and	r16,r16,r2
 8006288:	902f883a 	mov	r23,r18
 800628c:	003f1a06 	br	8005ef8 <__alt_data_end+0xfc005ef8>
 8006290:	00800434 	movhi	r2,16
 8006294:	84000234 	orhi	r16,r16,8
 8006298:	10bfffc4 	addi	r2,r2,-1
 800629c:	80a0703a 	and	r16,r16,r2
 80062a0:	003f1506 	br	8005ef8 <__alt_data_end+0xfc005ef8>
 80062a4:	3009883a 	mov	r4,r6
 80062a8:	d9400215 	stw	r5,8(sp)
 80062ac:	d9800715 	stw	r6,28(sp)
 80062b0:	da400415 	stw	r9,16(sp)
 80062b4:	da800315 	stw	r10,12(sp)
 80062b8:	80069040 	call	8006904 <__clzsi2>
 80062bc:	10c00804 	addi	r3,r2,32
 80062c0:	010009c4 	movi	r4,39
 80062c4:	d9400217 	ldw	r5,8(sp)
 80062c8:	d9800717 	ldw	r6,28(sp)
 80062cc:	da400417 	ldw	r9,16(sp)
 80062d0:	da800317 	ldw	r10,12(sp)
 80062d4:	20fee20e 	bge	r4,r3,8005e60 <__alt_data_end+0xfc005e60>
 80062d8:	147ffe04 	addi	r17,r2,-8
 80062dc:	9462983a 	sll	r17,r18,r17
 80062e0:	0025883a 	mov	r18,zero
 80062e4:	003ee506 	br	8005e7c <__alt_data_end+0xfc005e7c>
 80062e8:	d9800715 	stw	r6,28(sp)
 80062ec:	d9c00215 	stw	r7,8(sp)
 80062f0:	da400415 	stw	r9,16(sp)
 80062f4:	80069040 	call	8006904 <__clzsi2>
 80062f8:	10c00804 	addi	r3,r2,32
 80062fc:	010009c4 	movi	r4,39
 8006300:	d9800717 	ldw	r6,28(sp)
 8006304:	d9c00217 	ldw	r7,8(sp)
 8006308:	da400417 	ldw	r9,16(sp)
 800630c:	20feb40e 	bge	r4,r3,8005de0 <__alt_data_end+0xfc005de0>
 8006310:	143ffe04 	addi	r16,r2,-8
 8006314:	9420983a 	sll	r16,r18,r16
 8006318:	002f883a 	mov	r23,zero
 800631c:	003eb706 	br	8005dfc <__alt_data_end+0xfc005dfc>
 8006320:	8004977a 	slli	r2,r16,29
 8006324:	b82ed0fa 	srli	r23,r23,3
 8006328:	8020927a 	slli	r16,r16,9
 800632c:	2101ffcc 	andi	r4,r4,2047
 8006330:	15eeb03a 	or	r23,r2,r23
 8006334:	8020d33a 	srli	r16,r16,12
 8006338:	34c0004c 	andi	r19,r6,1
 800633c:	003e8706 	br	8005d5c <__alt_data_end+0xfc005d5c>
 8006340:	00bf0084 	movi	r2,-1022
 8006344:	10c5c83a 	sub	r2,r2,r3
 8006348:	01000e04 	movi	r4,56
 800634c:	2080080e 	bge	r4,r2,8006370 <__muldf3+0x77c>
 8006350:	34c0004c 	andi	r19,r6,1
 8006354:	0009883a 	mov	r4,zero
 8006358:	0021883a 	mov	r16,zero
 800635c:	002f883a 	mov	r23,zero
 8006360:	003e7e06 	br	8005d5c <__alt_data_end+0xfc005d5c>
 8006364:	4007883a 	mov	r3,r8
 8006368:	480d883a 	mov	r6,r9
 800636c:	003fa506 	br	8006204 <__alt_data_end+0xfc006204>
 8006370:	010007c4 	movi	r4,31
 8006374:	20801816 	blt	r4,r2,80063d8 <__muldf3+0x7e4>
 8006378:	18c10784 	addi	r3,r3,1054
 800637c:	80c8983a 	sll	r4,r16,r3
 8006380:	b88ad83a 	srl	r5,r23,r2
 8006384:	b8c6983a 	sll	r3,r23,r3
 8006388:	80a0d83a 	srl	r16,r16,r2
 800638c:	2908b03a 	or	r4,r5,r4
 8006390:	1804c03a 	cmpne	r2,r3,zero
 8006394:	2088b03a 	or	r4,r4,r2
 8006398:	208001cc 	andi	r2,r4,7
 800639c:	10000726 	beq	r2,zero,80063bc <__muldf3+0x7c8>
 80063a0:	20c003cc 	andi	r3,r4,15
 80063a4:	00800104 	movi	r2,4
 80063a8:	18800426 	beq	r3,r2,80063bc <__muldf3+0x7c8>
 80063ac:	20c00104 	addi	r3,r4,4
 80063b0:	1905803a 	cmpltu	r2,r3,r4
 80063b4:	80a1883a 	add	r16,r16,r2
 80063b8:	1809883a 	mov	r4,r3
 80063bc:	8080202c 	andhi	r2,r16,128
 80063c0:	10001b26 	beq	r2,zero,8006430 <__muldf3+0x83c>
 80063c4:	34c0004c 	andi	r19,r6,1
 80063c8:	01000044 	movi	r4,1
 80063cc:	0021883a 	mov	r16,zero
 80063d0:	002f883a 	mov	r23,zero
 80063d4:	003e6106 	br	8005d5c <__alt_data_end+0xfc005d5c>
 80063d8:	013ef884 	movi	r4,-1054
 80063dc:	20c9c83a 	sub	r4,r4,r3
 80063e0:	01400804 	movi	r5,32
 80063e4:	8108d83a 	srl	r4,r16,r4
 80063e8:	11401526 	beq	r2,r5,8006440 <__muldf3+0x84c>
 80063ec:	18c10f84 	addi	r3,r3,1086
 80063f0:	80e0983a 	sll	r16,r16,r3
 80063f4:	85eeb03a 	or	r23,r16,r23
 80063f8:	b804c03a 	cmpne	r2,r23,zero
 80063fc:	1108b03a 	or	r4,r2,r4
 8006400:	20c001cc 	andi	r3,r4,7
 8006404:	1800061e 	bne	r3,zero,8006420 <__muldf3+0x82c>
 8006408:	0021883a 	mov	r16,zero
 800640c:	202ed0fa 	srli	r23,r4,3
 8006410:	34c0004c 	andi	r19,r6,1
 8006414:	0009883a 	mov	r4,zero
 8006418:	b8eeb03a 	or	r23,r23,r3
 800641c:	003e4f06 	br	8005d5c <__alt_data_end+0xfc005d5c>
 8006420:	20c003cc 	andi	r3,r4,15
 8006424:	00800104 	movi	r2,4
 8006428:	0021883a 	mov	r16,zero
 800642c:	18bfdf1e 	bne	r3,r2,80063ac <__alt_data_end+0xfc0063ac>
 8006430:	8004927a 	slli	r2,r16,9
 8006434:	8006977a 	slli	r3,r16,29
 8006438:	1020d33a 	srli	r16,r2,12
 800643c:	003ff306 	br	800640c <__alt_data_end+0xfc00640c>
 8006440:	0021883a 	mov	r16,zero
 8006444:	003feb06 	br	80063f4 <__alt_data_end+0xfc0063f4>
 8006448:	00800434 	movhi	r2,16
 800644c:	84000234 	orhi	r16,r16,8
 8006450:	10bfffc4 	addi	r2,r2,-1
 8006454:	4cc0004c 	andi	r19,r9,1
 8006458:	80a0703a 	and	r16,r16,r2
 800645c:	003ea606 	br	8005ef8 <__alt_data_end+0xfc005ef8>

08006460 <__fixdfsi>:
 8006460:	2806d53a 	srli	r3,r5,20
 8006464:	00800434 	movhi	r2,16
 8006468:	10bfffc4 	addi	r2,r2,-1
 800646c:	18c1ffcc 	andi	r3,r3,2047
 8006470:	0180ff84 	movi	r6,1022
 8006474:	2884703a 	and	r2,r5,r2
 8006478:	280ad7fa 	srli	r5,r5,31
 800647c:	30c0130e 	bge	r6,r3,80064cc <__fixdfsi+0x6c>
 8006480:	01810744 	movi	r6,1053
 8006484:	30c00d16 	blt	r6,r3,80064bc <__fixdfsi+0x5c>
 8006488:	01810cc4 	movi	r6,1075
 800648c:	30cdc83a 	sub	r6,r6,r3
 8006490:	01c007c4 	movi	r7,31
 8006494:	10800434 	orhi	r2,r2,16
 8006498:	39800e0e 	bge	r7,r6,80064d4 <__fixdfsi+0x74>
 800649c:	010104c4 	movi	r4,1043
 80064a0:	20c7c83a 	sub	r3,r4,r3
 80064a4:	10c6d83a 	srl	r3,r2,r3
 80064a8:	29403fcc 	andi	r5,r5,255
 80064ac:	0145c83a 	sub	r2,zero,r5
 80064b0:	1884f03a 	xor	r2,r3,r2
 80064b4:	1145883a 	add	r2,r2,r5
 80064b8:	f800283a 	ret
 80064bc:	00a00034 	movhi	r2,32768
 80064c0:	10bfffc4 	addi	r2,r2,-1
 80064c4:	2885883a 	add	r2,r5,r2
 80064c8:	f800283a 	ret
 80064cc:	0005883a 	mov	r2,zero
 80064d0:	f800283a 	ret
 80064d4:	18fefb44 	addi	r3,r3,-1043
 80064d8:	2188d83a 	srl	r4,r4,r6
 80064dc:	10c6983a 	sll	r3,r2,r3
 80064e0:	20c6b03a 	or	r3,r4,r3
 80064e4:	003ff006 	br	80064a8 <__alt_data_end+0xfc0064a8>

080064e8 <__floatsidf>:
 80064e8:	defffd04 	addi	sp,sp,-12
 80064ec:	dc400115 	stw	r17,4(sp)
 80064f0:	dfc00215 	stw	ra,8(sp)
 80064f4:	dc000015 	stw	r16,0(sp)
 80064f8:	2023883a 	mov	r17,r4
 80064fc:	20001426 	beq	r4,zero,8006550 <__floatsidf+0x68>
 8006500:	2020d7fa 	srli	r16,r4,31
 8006504:	80000126 	beq	r16,zero,800650c <__floatsidf+0x24>
 8006508:	0123c83a 	sub	r17,zero,r4
 800650c:	8809883a 	mov	r4,r17
 8006510:	80069040 	call	8006904 <__clzsi2>
 8006514:	01410784 	movi	r5,1054
 8006518:	00c00284 	movi	r3,10
 800651c:	288bc83a 	sub	r5,r5,r2
 8006520:	18801c16 	blt	r3,r2,8006594 <__floatsidf+0xac>
 8006524:	00c002c4 	movi	r3,11
 8006528:	1887c83a 	sub	r3,r3,r2
 800652c:	88c8d83a 	srl	r4,r17,r3
 8006530:	00c00434 	movhi	r3,16
 8006534:	18ffffc4 	addi	r3,r3,-1
 8006538:	10800544 	addi	r2,r2,21
 800653c:	20c8703a 	and	r4,r4,r3
 8006540:	8884983a 	sll	r2,r17,r2
 8006544:	28c1ffcc 	andi	r3,r5,2047
 8006548:	800d883a 	mov	r6,r16
 800654c:	00000406 	br	8006560 <__floatsidf+0x78>
 8006550:	000d883a 	mov	r6,zero
 8006554:	0007883a 	mov	r3,zero
 8006558:	0009883a 	mov	r4,zero
 800655c:	0005883a 	mov	r2,zero
 8006560:	180a953a 	slli	r5,r3,20
 8006564:	31803fcc 	andi	r6,r6,255
 8006568:	00c00434 	movhi	r3,16
 800656c:	300c97fa 	slli	r6,r6,31
 8006570:	18ffffc4 	addi	r3,r3,-1
 8006574:	20c6703a 	and	r3,r4,r3
 8006578:	1946b03a 	or	r3,r3,r5
 800657c:	1986b03a 	or	r3,r3,r6
 8006580:	dfc00217 	ldw	ra,8(sp)
 8006584:	dc400117 	ldw	r17,4(sp)
 8006588:	dc000017 	ldw	r16,0(sp)
 800658c:	dec00304 	addi	sp,sp,12
 8006590:	f800283a 	ret
 8006594:	10fffd44 	addi	r3,r2,-11
 8006598:	88c8983a 	sll	r4,r17,r3
 800659c:	00800434 	movhi	r2,16
 80065a0:	10bfffc4 	addi	r2,r2,-1
 80065a4:	2088703a 	and	r4,r4,r2
 80065a8:	28c1ffcc 	andi	r3,r5,2047
 80065ac:	800d883a 	mov	r6,r16
 80065b0:	0005883a 	mov	r2,zero
 80065b4:	003fea06 	br	8006560 <__alt_data_end+0xfc006560>

080065b8 <__floatunsidf>:
 80065b8:	defffe04 	addi	sp,sp,-8
 80065bc:	dc000015 	stw	r16,0(sp)
 80065c0:	dfc00115 	stw	ra,4(sp)
 80065c4:	2021883a 	mov	r16,r4
 80065c8:	20001026 	beq	r4,zero,800660c <__floatunsidf+0x54>
 80065cc:	80069040 	call	8006904 <__clzsi2>
 80065d0:	01410784 	movi	r5,1054
 80065d4:	100d883a 	mov	r6,r2
 80065d8:	288bc83a 	sub	r5,r5,r2
 80065dc:	00800284 	movi	r2,10
 80065e0:	11801616 	blt	r2,r6,800663c <__floatunsidf+0x84>
 80065e4:	008002c4 	movi	r2,11
 80065e8:	1185c83a 	sub	r2,r2,r6
 80065ec:	8084d83a 	srl	r2,r16,r2
 80065f0:	00c00434 	movhi	r3,16
 80065f4:	31c00544 	addi	r7,r6,21
 80065f8:	18ffffc4 	addi	r3,r3,-1
 80065fc:	81e0983a 	sll	r16,r16,r7
 8006600:	10cc703a 	and	r6,r2,r3
 8006604:	2941ffcc 	andi	r5,r5,2047
 8006608:	00000206 	br	8006614 <__floatunsidf+0x5c>
 800660c:	000b883a 	mov	r5,zero
 8006610:	000d883a 	mov	r6,zero
 8006614:	280a953a 	slli	r5,r5,20
 8006618:	00c00434 	movhi	r3,16
 800661c:	18ffffc4 	addi	r3,r3,-1
 8006620:	30c6703a 	and	r3,r6,r3
 8006624:	8005883a 	mov	r2,r16
 8006628:	1946b03a 	or	r3,r3,r5
 800662c:	dfc00117 	ldw	ra,4(sp)
 8006630:	dc000017 	ldw	r16,0(sp)
 8006634:	dec00204 	addi	sp,sp,8
 8006638:	f800283a 	ret
 800663c:	31bffd44 	addi	r6,r6,-11
 8006640:	818c983a 	sll	r6,r16,r6
 8006644:	00800434 	movhi	r2,16
 8006648:	10bfffc4 	addi	r2,r2,-1
 800664c:	2941ffcc 	andi	r5,r5,2047
 8006650:	0021883a 	mov	r16,zero
 8006654:	308c703a 	and	r6,r6,r2
 8006658:	003fee06 	br	8006614 <__alt_data_end+0xfc006614>

0800665c <__extendsfdf2>:
 800665c:	200ad5fa 	srli	r5,r4,23
 8006660:	defffd04 	addi	sp,sp,-12
 8006664:	dc400115 	stw	r17,4(sp)
 8006668:	29403fcc 	andi	r5,r5,255
 800666c:	29800044 	addi	r6,r5,1
 8006670:	04402034 	movhi	r17,128
 8006674:	dc000015 	stw	r16,0(sp)
 8006678:	8c7fffc4 	addi	r17,r17,-1
 800667c:	dfc00215 	stw	ra,8(sp)
 8006680:	31803fcc 	andi	r6,r6,255
 8006684:	00800044 	movi	r2,1
 8006688:	8922703a 	and	r17,r17,r4
 800668c:	2020d7fa 	srli	r16,r4,31
 8006690:	1180110e 	bge	r2,r6,80066d8 <__extendsfdf2+0x7c>
 8006694:	880ed0fa 	srli	r7,r17,3
 8006698:	8822977a 	slli	r17,r17,29
 800669c:	2940e004 	addi	r5,r5,896
 80066a0:	2941ffcc 	andi	r5,r5,2047
 80066a4:	280c953a 	slli	r6,r5,20
 80066a8:	01400434 	movhi	r5,16
 80066ac:	800697fa 	slli	r3,r16,31
 80066b0:	297fffc4 	addi	r5,r5,-1
 80066b4:	394a703a 	and	r5,r7,r5
 80066b8:	298ab03a 	or	r5,r5,r6
 80066bc:	8805883a 	mov	r2,r17
 80066c0:	28c6b03a 	or	r3,r5,r3
 80066c4:	dfc00217 	ldw	ra,8(sp)
 80066c8:	dc400117 	ldw	r17,4(sp)
 80066cc:	dc000017 	ldw	r16,0(sp)
 80066d0:	dec00304 	addi	sp,sp,12
 80066d4:	f800283a 	ret
 80066d8:	2800111e 	bne	r5,zero,8006720 <__extendsfdf2+0xc4>
 80066dc:	88001c26 	beq	r17,zero,8006750 <__extendsfdf2+0xf4>
 80066e0:	8809883a 	mov	r4,r17
 80066e4:	80069040 	call	8006904 <__clzsi2>
 80066e8:	00c00284 	movi	r3,10
 80066ec:	18801b16 	blt	r3,r2,800675c <__extendsfdf2+0x100>
 80066f0:	01c002c4 	movi	r7,11
 80066f4:	388fc83a 	sub	r7,r7,r2
 80066f8:	10c00544 	addi	r3,r2,21
 80066fc:	89ced83a 	srl	r7,r17,r7
 8006700:	88e2983a 	sll	r17,r17,r3
 8006704:	0180e244 	movi	r6,905
 8006708:	308bc83a 	sub	r5,r6,r2
 800670c:	01800434 	movhi	r6,16
 8006710:	31bfffc4 	addi	r6,r6,-1
 8006714:	398e703a 	and	r7,r7,r6
 8006718:	2941ffcc 	andi	r5,r5,2047
 800671c:	003fe006 	br	80066a0 <__alt_data_end+0xfc0066a0>
 8006720:	88000826 	beq	r17,zero,8006744 <__extendsfdf2+0xe8>
 8006724:	880ed0fa 	srli	r7,r17,3
 8006728:	00800434 	movhi	r2,16
 800672c:	10bfffc4 	addi	r2,r2,-1
 8006730:	39c00234 	orhi	r7,r7,8
 8006734:	8822977a 	slli	r17,r17,29
 8006738:	388e703a 	and	r7,r7,r2
 800673c:	0141ffc4 	movi	r5,2047
 8006740:	003fd706 	br	80066a0 <__alt_data_end+0xfc0066a0>
 8006744:	0141ffc4 	movi	r5,2047
 8006748:	000f883a 	mov	r7,zero
 800674c:	003fd406 	br	80066a0 <__alt_data_end+0xfc0066a0>
 8006750:	000b883a 	mov	r5,zero
 8006754:	000f883a 	mov	r7,zero
 8006758:	003fd106 	br	80066a0 <__alt_data_end+0xfc0066a0>
 800675c:	11fffd44 	addi	r7,r2,-11
 8006760:	89ce983a 	sll	r7,r17,r7
 8006764:	0023883a 	mov	r17,zero
 8006768:	003fe606 	br	8006704 <__alt_data_end+0xfc006704>

0800676c <__truncdfsf2>:
 800676c:	2810d53a 	srli	r8,r5,20
 8006770:	01c00434 	movhi	r7,16
 8006774:	39ffffc4 	addi	r7,r7,-1
 8006778:	29ce703a 	and	r7,r5,r7
 800677c:	380e90fa 	slli	r7,r7,3
 8006780:	4201ffcc 	andi	r8,r8,2047
 8006784:	200cd77a 	srli	r6,r4,29
 8006788:	42400044 	addi	r9,r8,1
 800678c:	4a41ffcc 	andi	r9,r9,2047
 8006790:	00800044 	movi	r2,1
 8006794:	398cb03a 	or	r6,r7,r6
 8006798:	280ad7fa 	srli	r5,r5,31
 800679c:	200e90fa 	slli	r7,r4,3
 80067a0:	1240230e 	bge	r2,r9,8006830 <__truncdfsf2+0xc4>
 80067a4:	40ff2004 	addi	r3,r8,-896
 80067a8:	00803f84 	movi	r2,254
 80067ac:	10c01516 	blt	r2,r3,8006804 <__truncdfsf2+0x98>
 80067b0:	00c02d0e 	bge	zero,r3,8006868 <__truncdfsf2+0xfc>
 80067b4:	200891ba 	slli	r4,r4,6
 80067b8:	300c90fa 	slli	r6,r6,3
 80067bc:	380ed77a 	srli	r7,r7,29
 80067c0:	2008c03a 	cmpne	r4,r4,zero
 80067c4:	310cb03a 	or	r6,r6,r4
 80067c8:	31ccb03a 	or	r6,r6,r7
 80067cc:	308001cc 	andi	r2,r6,7
 80067d0:	10000426 	beq	r2,zero,80067e4 <__truncdfsf2+0x78>
 80067d4:	310003cc 	andi	r4,r6,15
 80067d8:	00800104 	movi	r2,4
 80067dc:	20800126 	beq	r4,r2,80067e4 <__truncdfsf2+0x78>
 80067e0:	31800104 	addi	r6,r6,4
 80067e4:	3081002c 	andhi	r2,r6,1024
 80067e8:	10002326 	beq	r2,zero,8006878 <__truncdfsf2+0x10c>
 80067ec:	18c00044 	addi	r3,r3,1
 80067f0:	00803fc4 	movi	r2,255
 80067f4:	18800326 	beq	r3,r2,8006804 <__truncdfsf2+0x98>
 80067f8:	300c91ba 	slli	r6,r6,6
 80067fc:	300cd27a 	srli	r6,r6,9
 8006800:	00000206 	br	800680c <__truncdfsf2+0xa0>
 8006804:	00ffffc4 	movi	r3,-1
 8006808:	000d883a 	mov	r6,zero
 800680c:	18c03fcc 	andi	r3,r3,255
 8006810:	180895fa 	slli	r4,r3,23
 8006814:	00c02034 	movhi	r3,128
 8006818:	280a97fa 	slli	r5,r5,31
 800681c:	18ffffc4 	addi	r3,r3,-1
 8006820:	30c6703a 	and	r3,r6,r3
 8006824:	1906b03a 	or	r3,r3,r4
 8006828:	1944b03a 	or	r2,r3,r5
 800682c:	f800283a 	ret
 8006830:	4000071e 	bne	r8,zero,8006850 <__truncdfsf2+0xe4>
 8006834:	31ccb03a 	or	r6,r6,r7
 8006838:	30000d1e 	bne	r6,zero,8006870 <__truncdfsf2+0x104>
 800683c:	0007883a 	mov	r3,zero
 8006840:	00802034 	movhi	r2,128
 8006844:	10bfffc4 	addi	r2,r2,-1
 8006848:	308c703a 	and	r6,r6,r2
 800684c:	003fef06 	br	800680c <__alt_data_end+0xfc00680c>
 8006850:	31c8b03a 	or	r4,r6,r7
 8006854:	203feb26 	beq	r4,zero,8006804 <__alt_data_end+0xfc006804>
 8006858:	300c90fa 	slli	r6,r6,3
 800685c:	00c03fc4 	movi	r3,255
 8006860:	31808034 	orhi	r6,r6,512
 8006864:	003fd906 	br	80067cc <__alt_data_end+0xfc0067cc>
 8006868:	00bffa44 	movi	r2,-23
 800686c:	1880090e 	bge	r3,r2,8006894 <__truncdfsf2+0x128>
 8006870:	01800144 	movi	r6,5
 8006874:	0007883a 	mov	r3,zero
 8006878:	00803fc4 	movi	r2,255
 800687c:	300cd0fa 	srli	r6,r6,3
 8006880:	18bfef1e 	bne	r3,r2,8006840 <__alt_data_end+0xfc006840>
 8006884:	303fdf26 	beq	r6,zero,8006804 <__alt_data_end+0xfc006804>
 8006888:	31801034 	orhi	r6,r6,64
 800688c:	00ffffc4 	movi	r3,-1
 8006890:	003feb06 	br	8006840 <__alt_data_end+0xfc006840>
 8006894:	0080e784 	movi	r2,926
 8006898:	1205c83a 	sub	r2,r2,r8
 800689c:	00c007c4 	movi	r3,31
 80068a0:	31802034 	orhi	r6,r6,128
 80068a4:	18800916 	blt	r3,r2,80068cc <__truncdfsf2+0x160>
 80068a8:	423f2084 	addi	r8,r8,-894
 80068ac:	3a06983a 	sll	r3,r7,r8
 80068b0:	3210983a 	sll	r8,r6,r8
 80068b4:	388ed83a 	srl	r7,r7,r2
 80068b8:	180cc03a 	cmpne	r6,r3,zero
 80068bc:	418cb03a 	or	r6,r8,r6
 80068c0:	31ccb03a 	or	r6,r6,r7
 80068c4:	0007883a 	mov	r3,zero
 80068c8:	003fc006 	br	80067cc <__alt_data_end+0xfc0067cc>
 80068cc:	00c0df84 	movi	r3,894
 80068d0:	1a07c83a 	sub	r3,r3,r8
 80068d4:	01000804 	movi	r4,32
 80068d8:	30c6d83a 	srl	r3,r6,r3
 80068dc:	11000726 	beq	r2,r4,80068fc <__truncdfsf2+0x190>
 80068e0:	423f2884 	addi	r8,r8,-862
 80068e4:	3210983a 	sll	r8,r6,r8
 80068e8:	41ceb03a 	or	r7,r8,r7
 80068ec:	380ec03a 	cmpne	r7,r7,zero
 80068f0:	38ccb03a 	or	r6,r7,r3
 80068f4:	0007883a 	mov	r3,zero
 80068f8:	003fb406 	br	80067cc <__alt_data_end+0xfc0067cc>
 80068fc:	0011883a 	mov	r8,zero
 8006900:	003ff906 	br	80068e8 <__alt_data_end+0xfc0068e8>

08006904 <__clzsi2>:
 8006904:	00bfffd4 	movui	r2,65535
 8006908:	11000b36 	bltu	r2,r4,8006938 <__clzsi2+0x34>
 800690c:	00803fc4 	movi	r2,255
 8006910:	1100122e 	bgeu	r2,r4,800695c <__clzsi2+0x58>
 8006914:	00c00204 	movi	r3,8
 8006918:	01400604 	movi	r5,24
 800691c:	20c8d83a 	srl	r4,r4,r3
 8006920:	008200b4 	movhi	r2,2050
 8006924:	108cb004 	addi	r2,r2,12992
 8006928:	1109883a 	add	r4,r2,r4
 800692c:	20800003 	ldbu	r2,0(r4)
 8006930:	2885c83a 	sub	r2,r5,r2
 8006934:	f800283a 	ret
 8006938:	00804034 	movhi	r2,256
 800693c:	10bfffc4 	addi	r2,r2,-1
 8006940:	11000336 	bltu	r2,r4,8006950 <__clzsi2+0x4c>
 8006944:	00c00404 	movi	r3,16
 8006948:	180b883a 	mov	r5,r3
 800694c:	003ff306 	br	800691c <__alt_data_end+0xfc00691c>
 8006950:	00c00604 	movi	r3,24
 8006954:	01400204 	movi	r5,8
 8006958:	003ff006 	br	800691c <__alt_data_end+0xfc00691c>
 800695c:	0007883a 	mov	r3,zero
 8006960:	01400804 	movi	r5,32
 8006964:	003fed06 	br	800691c <__alt_data_end+0xfc00691c>

08006968 <malloc>:
 8006968:	008200b4 	movhi	r2,2050
 800696c:	1094e104 	addi	r2,r2,21380
 8006970:	200b883a 	mov	r5,r4
 8006974:	11000017 	ldw	r4,0(r2)
 8006978:	80069901 	jmpi	8006990 <_malloc_r>

0800697c <free>:
 800697c:	008200b4 	movhi	r2,2050
 8006980:	1094e104 	addi	r2,r2,21380
 8006984:	200b883a 	mov	r5,r4
 8006988:	11000017 	ldw	r4,0(r2)
 800698c:	800de441 	jmpi	800de44 <_free_r>

08006990 <_malloc_r>:
 8006990:	defff504 	addi	sp,sp,-44
 8006994:	dc800315 	stw	r18,12(sp)
 8006998:	dfc00a15 	stw	ra,40(sp)
 800699c:	df000915 	stw	fp,36(sp)
 80069a0:	ddc00815 	stw	r23,32(sp)
 80069a4:	dd800715 	stw	r22,28(sp)
 80069a8:	dd400615 	stw	r21,24(sp)
 80069ac:	dd000515 	stw	r20,20(sp)
 80069b0:	dcc00415 	stw	r19,16(sp)
 80069b4:	dc400215 	stw	r17,8(sp)
 80069b8:	dc000115 	stw	r16,4(sp)
 80069bc:	288002c4 	addi	r2,r5,11
 80069c0:	00c00584 	movi	r3,22
 80069c4:	2025883a 	mov	r18,r4
 80069c8:	18802a2e 	bgeu	r3,r2,8006a74 <_malloc_r+0xe4>
 80069cc:	047ffe04 	movi	r17,-8
 80069d0:	1462703a 	and	r17,r2,r17
 80069d4:	88009e16 	blt	r17,zero,8006c50 <_malloc_r+0x2c0>
 80069d8:	89409d36 	bltu	r17,r5,8006c50 <_malloc_r+0x2c0>
 80069dc:	80161280 	call	8016128 <__malloc_lock>
 80069e0:	00807dc4 	movi	r2,503
 80069e4:	14402736 	bltu	r2,r17,8006a84 <_malloc_r+0xf4>
 80069e8:	8806d0fa 	srli	r3,r17,3
 80069ec:	04c200b4 	movhi	r19,2050
 80069f0:	9cce2704 	addi	r19,r19,14492
 80069f4:	18c5883a 	add	r2,r3,r3
 80069f8:	1085883a 	add	r2,r2,r2
 80069fc:	1085883a 	add	r2,r2,r2
 8006a00:	9885883a 	add	r2,r19,r2
 8006a04:	14000317 	ldw	r16,12(r2)
 8006a08:	80814a26 	beq	r16,r2,8006f34 <_malloc_r+0x5a4>
 8006a0c:	80c00117 	ldw	r3,4(r16)
 8006a10:	81000317 	ldw	r4,12(r16)
 8006a14:	00bfff04 	movi	r2,-4
 8006a18:	1884703a 	and	r2,r3,r2
 8006a1c:	81400217 	ldw	r5,8(r16)
 8006a20:	8085883a 	add	r2,r16,r2
 8006a24:	10c00117 	ldw	r3,4(r2)
 8006a28:	29000315 	stw	r4,12(r5)
 8006a2c:	21400215 	stw	r5,8(r4)
 8006a30:	18c00054 	ori	r3,r3,1
 8006a34:	10c00115 	stw	r3,4(r2)
 8006a38:	9009883a 	mov	r4,r18
 8006a3c:	80161480 	call	8016148 <__malloc_unlock>
 8006a40:	80800204 	addi	r2,r16,8
 8006a44:	dfc00a17 	ldw	ra,40(sp)
 8006a48:	df000917 	ldw	fp,36(sp)
 8006a4c:	ddc00817 	ldw	r23,32(sp)
 8006a50:	dd800717 	ldw	r22,28(sp)
 8006a54:	dd400617 	ldw	r21,24(sp)
 8006a58:	dd000517 	ldw	r20,20(sp)
 8006a5c:	dcc00417 	ldw	r19,16(sp)
 8006a60:	dc800317 	ldw	r18,12(sp)
 8006a64:	dc400217 	ldw	r17,8(sp)
 8006a68:	dc000117 	ldw	r16,4(sp)
 8006a6c:	dec00b04 	addi	sp,sp,44
 8006a70:	f800283a 	ret
 8006a74:	04400404 	movi	r17,16
 8006a78:	89407536 	bltu	r17,r5,8006c50 <_malloc_r+0x2c0>
 8006a7c:	80161280 	call	8016128 <__malloc_lock>
 8006a80:	003fd906 	br	80069e8 <__alt_data_end+0xfc0069e8>
 8006a84:	8806d27a 	srli	r3,r17,9
 8006a88:	18007526 	beq	r3,zero,8006c60 <_malloc_r+0x2d0>
 8006a8c:	00800104 	movi	r2,4
 8006a90:	10c0ef36 	bltu	r2,r3,8006e50 <_malloc_r+0x4c0>
 8006a94:	8806d1ba 	srli	r3,r17,6
 8006a98:	19c00e04 	addi	r7,r3,56
 8006a9c:	39cb883a 	add	r5,r7,r7
 8006aa0:	04c200b4 	movhi	r19,2050
 8006aa4:	294b883a 	add	r5,r5,r5
 8006aa8:	9cce2704 	addi	r19,r19,14492
 8006aac:	294b883a 	add	r5,r5,r5
 8006ab0:	994b883a 	add	r5,r19,r5
 8006ab4:	2c000317 	ldw	r16,12(r5)
 8006ab8:	2c000e26 	beq	r5,r16,8006af4 <_malloc_r+0x164>
 8006abc:	80800117 	ldw	r2,4(r16)
 8006ac0:	01bfff04 	movi	r6,-4
 8006ac4:	010003c4 	movi	r4,15
 8006ac8:	1184703a 	and	r2,r2,r6
 8006acc:	1447c83a 	sub	r3,r2,r17
 8006ad0:	20c00716 	blt	r4,r3,8006af0 <_malloc_r+0x160>
 8006ad4:	1800650e 	bge	r3,zero,8006c6c <_malloc_r+0x2dc>
 8006ad8:	84000317 	ldw	r16,12(r16)
 8006adc:	2c000526 	beq	r5,r16,8006af4 <_malloc_r+0x164>
 8006ae0:	80800117 	ldw	r2,4(r16)
 8006ae4:	1184703a 	and	r2,r2,r6
 8006ae8:	1447c83a 	sub	r3,r2,r17
 8006aec:	20fff90e 	bge	r4,r3,8006ad4 <__alt_data_end+0xfc006ad4>
 8006af0:	39ffffc4 	addi	r7,r7,-1
 8006af4:	38c00044 	addi	r3,r7,1
 8006af8:	018200b4 	movhi	r6,2050
 8006afc:	9c000417 	ldw	r16,16(r19)
 8006b00:	318e2704 	addi	r6,r6,14492
 8006b04:	32400204 	addi	r9,r6,8
 8006b08:	82410326 	beq	r16,r9,8006f18 <_malloc_r+0x588>
 8006b0c:	81000117 	ldw	r4,4(r16)
 8006b10:	00bfff04 	movi	r2,-4
 8006b14:	208e703a 	and	r7,r4,r2
 8006b18:	3c45c83a 	sub	r2,r7,r17
 8006b1c:	010003c4 	movi	r4,15
 8006b20:	2080ee16 	blt	r4,r2,8006edc <_malloc_r+0x54c>
 8006b24:	32400515 	stw	r9,20(r6)
 8006b28:	32400415 	stw	r9,16(r6)
 8006b2c:	1000510e 	bge	r2,zero,8006c74 <_malloc_r+0x2e4>
 8006b30:	00807fc4 	movi	r2,511
 8006b34:	11c0ce36 	bltu	r2,r7,8006e70 <_malloc_r+0x4e0>
 8006b38:	3808d0fa 	srli	r4,r7,3
 8006b3c:	01c00044 	movi	r7,1
 8006b40:	30800117 	ldw	r2,4(r6)
 8006b44:	210b883a 	add	r5,r4,r4
 8006b48:	294b883a 	add	r5,r5,r5
 8006b4c:	2009d0ba 	srai	r4,r4,2
 8006b50:	294b883a 	add	r5,r5,r5
 8006b54:	298b883a 	add	r5,r5,r6
 8006b58:	2a000217 	ldw	r8,8(r5)
 8006b5c:	3908983a 	sll	r4,r7,r4
 8006b60:	81400315 	stw	r5,12(r16)
 8006b64:	82000215 	stw	r8,8(r16)
 8006b68:	2088b03a 	or	r4,r4,r2
 8006b6c:	2c000215 	stw	r16,8(r5)
 8006b70:	31000115 	stw	r4,4(r6)
 8006b74:	44000315 	stw	r16,12(r8)
 8006b78:	1805d0ba 	srai	r2,r3,2
 8006b7c:	01400044 	movi	r5,1
 8006b80:	288a983a 	sll	r5,r5,r2
 8006b84:	21404336 	bltu	r4,r5,8006c94 <_malloc_r+0x304>
 8006b88:	2144703a 	and	r2,r4,r5
 8006b8c:	10000a1e 	bne	r2,zero,8006bb8 <_malloc_r+0x228>
 8006b90:	00bfff04 	movi	r2,-4
 8006b94:	294b883a 	add	r5,r5,r5
 8006b98:	1886703a 	and	r3,r3,r2
 8006b9c:	2144703a 	and	r2,r4,r5
 8006ba0:	18c00104 	addi	r3,r3,4
 8006ba4:	1000041e 	bne	r2,zero,8006bb8 <_malloc_r+0x228>
 8006ba8:	294b883a 	add	r5,r5,r5
 8006bac:	2144703a 	and	r2,r4,r5
 8006bb0:	18c00104 	addi	r3,r3,4
 8006bb4:	103ffc26 	beq	r2,zero,8006ba8 <__alt_data_end+0xfc006ba8>
 8006bb8:	023fff04 	movi	r8,-4
 8006bbc:	01c003c4 	movi	r7,15
 8006bc0:	18c5883a 	add	r2,r3,r3
 8006bc4:	1085883a 	add	r2,r2,r2
 8006bc8:	1085883a 	add	r2,r2,r2
 8006bcc:	9895883a 	add	r10,r19,r2
 8006bd0:	52c00304 	addi	r11,r10,12
 8006bd4:	1819883a 	mov	r12,r3
 8006bd8:	5c000017 	ldw	r16,0(r11)
 8006bdc:	59bffd04 	addi	r6,r11,-12
 8006be0:	8180041e 	bne	r16,r6,8006bf4 <_malloc_r+0x264>
 8006be4:	0000ce06 	br	8006f20 <_malloc_r+0x590>
 8006be8:	2000d70e 	bge	r4,zero,8006f48 <_malloc_r+0x5b8>
 8006bec:	84000317 	ldw	r16,12(r16)
 8006bf0:	8180cb26 	beq	r16,r6,8006f20 <_malloc_r+0x590>
 8006bf4:	80800117 	ldw	r2,4(r16)
 8006bf8:	1204703a 	and	r2,r2,r8
 8006bfc:	1449c83a 	sub	r4,r2,r17
 8006c00:	393ff90e 	bge	r7,r4,8006be8 <__alt_data_end+0xfc006be8>
 8006c04:	80800317 	ldw	r2,12(r16)
 8006c08:	80c00217 	ldw	r3,8(r16)
 8006c0c:	89400054 	ori	r5,r17,1
 8006c10:	81400115 	stw	r5,4(r16)
 8006c14:	18800315 	stw	r2,12(r3)
 8006c18:	10c00215 	stw	r3,8(r2)
 8006c1c:	8463883a 	add	r17,r16,r17
 8006c20:	9c400515 	stw	r17,20(r19)
 8006c24:	9c400415 	stw	r17,16(r19)
 8006c28:	20800054 	ori	r2,r4,1
 8006c2c:	88800115 	stw	r2,4(r17)
 8006c30:	8a400315 	stw	r9,12(r17)
 8006c34:	8a400215 	stw	r9,8(r17)
 8006c38:	8923883a 	add	r17,r17,r4
 8006c3c:	89000015 	stw	r4,0(r17)
 8006c40:	9009883a 	mov	r4,r18
 8006c44:	80161480 	call	8016148 <__malloc_unlock>
 8006c48:	80800204 	addi	r2,r16,8
 8006c4c:	003f7d06 	br	8006a44 <__alt_data_end+0xfc006a44>
 8006c50:	00800304 	movi	r2,12
 8006c54:	90800015 	stw	r2,0(r18)
 8006c58:	0005883a 	mov	r2,zero
 8006c5c:	003f7906 	br	8006a44 <__alt_data_end+0xfc006a44>
 8006c60:	01401f84 	movi	r5,126
 8006c64:	01c00fc4 	movi	r7,63
 8006c68:	003f8d06 	br	8006aa0 <__alt_data_end+0xfc006aa0>
 8006c6c:	81000317 	ldw	r4,12(r16)
 8006c70:	003f6a06 	br	8006a1c <__alt_data_end+0xfc006a1c>
 8006c74:	81c5883a 	add	r2,r16,r7
 8006c78:	10c00117 	ldw	r3,4(r2)
 8006c7c:	9009883a 	mov	r4,r18
 8006c80:	18c00054 	ori	r3,r3,1
 8006c84:	10c00115 	stw	r3,4(r2)
 8006c88:	80161480 	call	8016148 <__malloc_unlock>
 8006c8c:	80800204 	addi	r2,r16,8
 8006c90:	003f6c06 	br	8006a44 <__alt_data_end+0xfc006a44>
 8006c94:	9c000217 	ldw	r16,8(r19)
 8006c98:	00bfff04 	movi	r2,-4
 8006c9c:	85800117 	ldw	r22,4(r16)
 8006ca0:	b0ac703a 	and	r22,r22,r2
 8006ca4:	b4400336 	bltu	r22,r17,8006cb4 <_malloc_r+0x324>
 8006ca8:	b445c83a 	sub	r2,r22,r17
 8006cac:	00c003c4 	movi	r3,15
 8006cb0:	18805d16 	blt	r3,r2,8006e28 <_malloc_r+0x498>
 8006cb4:	05c200b4 	movhi	r23,2050
 8006cb8:	008200b4 	movhi	r2,2050
 8006cbc:	bdd4de04 	addi	r23,r23,21368
 8006cc0:	109bbc04 	addi	r2,r2,28400
 8006cc4:	15400017 	ldw	r21,0(r2)
 8006cc8:	b9000017 	ldw	r4,0(r23)
 8006ccc:	00ffffc4 	movi	r3,-1
 8006cd0:	858d883a 	add	r6,r16,r22
 8006cd4:	8d6b883a 	add	r21,r17,r21
 8006cd8:	20c0e426 	beq	r4,r3,800706c <_malloc_r+0x6dc>
 8006cdc:	ad4403c4 	addi	r21,r21,4111
 8006ce0:	00fc0004 	movi	r3,-4096
 8006ce4:	a8ea703a 	and	r21,r21,r3
 8006ce8:	9009883a 	mov	r4,r18
 8006cec:	a80b883a 	mov	r5,r21
 8006cf0:	d9800015 	stw	r6,0(sp)
 8006cf4:	80074200 	call	8007420 <_sbrk_r>
 8006cf8:	00ffffc4 	movi	r3,-1
 8006cfc:	1029883a 	mov	r20,r2
 8006d00:	d9800017 	ldw	r6,0(sp)
 8006d04:	10c0a426 	beq	r2,r3,8006f98 <_malloc_r+0x608>
 8006d08:	1180a236 	bltu	r2,r6,8006f94 <_malloc_r+0x604>
 8006d0c:	070200b4 	movhi	fp,2050
 8006d10:	e71bcb04 	addi	fp,fp,28460
 8006d14:	e0c00017 	ldw	r3,0(fp)
 8006d18:	a8c7883a 	add	r3,r21,r3
 8006d1c:	e0c00015 	stw	r3,0(fp)
 8006d20:	3500da26 	beq	r6,r20,800708c <_malloc_r+0x6fc>
 8006d24:	b9000017 	ldw	r4,0(r23)
 8006d28:	00bfffc4 	movi	r2,-1
 8006d2c:	2080e426 	beq	r4,r2,80070c0 <_malloc_r+0x730>
 8006d30:	a185c83a 	sub	r2,r20,r6
 8006d34:	1885883a 	add	r2,r3,r2
 8006d38:	e0800015 	stw	r2,0(fp)
 8006d3c:	a0c001cc 	andi	r3,r20,7
 8006d40:	1800b526 	beq	r3,zero,8007018 <_malloc_r+0x688>
 8006d44:	a0e9c83a 	sub	r20,r20,r3
 8006d48:	00840204 	movi	r2,4104
 8006d4c:	a5000204 	addi	r20,r20,8
 8006d50:	10c7c83a 	sub	r3,r2,r3
 8006d54:	a545883a 	add	r2,r20,r21
 8006d58:	1083ffcc 	andi	r2,r2,4095
 8006d5c:	18abc83a 	sub	r21,r3,r2
 8006d60:	9009883a 	mov	r4,r18
 8006d64:	a80b883a 	mov	r5,r21
 8006d68:	80074200 	call	8007420 <_sbrk_r>
 8006d6c:	00ffffc4 	movi	r3,-1
 8006d70:	10c0d026 	beq	r2,r3,80070b4 <_malloc_r+0x724>
 8006d74:	1507c83a 	sub	r3,r2,r20
 8006d78:	a8c7883a 	add	r3,r21,r3
 8006d7c:	18c00054 	ori	r3,r3,1
 8006d80:	e0800017 	ldw	r2,0(fp)
 8006d84:	9d000215 	stw	r20,8(r19)
 8006d88:	a0c00115 	stw	r3,4(r20)
 8006d8c:	a887883a 	add	r3,r21,r2
 8006d90:	e0c00015 	stw	r3,0(fp)
 8006d94:	84c00e26 	beq	r16,r19,8006dd0 <_malloc_r+0x440>
 8006d98:	018003c4 	movi	r6,15
 8006d9c:	3580a02e 	bgeu	r6,r22,8007020 <_malloc_r+0x690>
 8006da0:	81400117 	ldw	r5,4(r16)
 8006da4:	013ffe04 	movi	r4,-8
 8006da8:	b0bffd04 	addi	r2,r22,-12
 8006dac:	1104703a 	and	r2,r2,r4
 8006db0:	2900004c 	andi	r4,r5,1
 8006db4:	1108b03a 	or	r4,r2,r4
 8006db8:	81000115 	stw	r4,4(r16)
 8006dbc:	01400144 	movi	r5,5
 8006dc0:	8089883a 	add	r4,r16,r2
 8006dc4:	21400115 	stw	r5,4(r4)
 8006dc8:	21400215 	stw	r5,8(r4)
 8006dcc:	3080c036 	bltu	r6,r2,80070d0 <_malloc_r+0x740>
 8006dd0:	008200b4 	movhi	r2,2050
 8006dd4:	109bbb04 	addi	r2,r2,28396
 8006dd8:	11000017 	ldw	r4,0(r2)
 8006ddc:	20c0012e 	bgeu	r4,r3,8006de4 <_malloc_r+0x454>
 8006de0:	10c00015 	stw	r3,0(r2)
 8006de4:	008200b4 	movhi	r2,2050
 8006de8:	109bba04 	addi	r2,r2,28392
 8006dec:	11000017 	ldw	r4,0(r2)
 8006df0:	9c000217 	ldw	r16,8(r19)
 8006df4:	20c0012e 	bgeu	r4,r3,8006dfc <_malloc_r+0x46c>
 8006df8:	10c00015 	stw	r3,0(r2)
 8006dfc:	80c00117 	ldw	r3,4(r16)
 8006e00:	00bfff04 	movi	r2,-4
 8006e04:	1886703a 	and	r3,r3,r2
 8006e08:	1c45c83a 	sub	r2,r3,r17
 8006e0c:	1c400236 	bltu	r3,r17,8006e18 <_malloc_r+0x488>
 8006e10:	00c003c4 	movi	r3,15
 8006e14:	18800416 	blt	r3,r2,8006e28 <_malloc_r+0x498>
 8006e18:	9009883a 	mov	r4,r18
 8006e1c:	80161480 	call	8016148 <__malloc_unlock>
 8006e20:	0005883a 	mov	r2,zero
 8006e24:	003f0706 	br	8006a44 <__alt_data_end+0xfc006a44>
 8006e28:	88c00054 	ori	r3,r17,1
 8006e2c:	80c00115 	stw	r3,4(r16)
 8006e30:	8463883a 	add	r17,r16,r17
 8006e34:	10800054 	ori	r2,r2,1
 8006e38:	9c400215 	stw	r17,8(r19)
 8006e3c:	88800115 	stw	r2,4(r17)
 8006e40:	9009883a 	mov	r4,r18
 8006e44:	80161480 	call	8016148 <__malloc_unlock>
 8006e48:	80800204 	addi	r2,r16,8
 8006e4c:	003efd06 	br	8006a44 <__alt_data_end+0xfc006a44>
 8006e50:	00800504 	movi	r2,20
 8006e54:	10c0482e 	bgeu	r2,r3,8006f78 <_malloc_r+0x5e8>
 8006e58:	00801504 	movi	r2,84
 8006e5c:	10c06836 	bltu	r2,r3,8007000 <_malloc_r+0x670>
 8006e60:	8806d33a 	srli	r3,r17,12
 8006e64:	19c01b84 	addi	r7,r3,110
 8006e68:	39cb883a 	add	r5,r7,r7
 8006e6c:	003f0c06 	br	8006aa0 <__alt_data_end+0xfc006aa0>
 8006e70:	3804d27a 	srli	r2,r7,9
 8006e74:	01000104 	movi	r4,4
 8006e78:	2080422e 	bgeu	r4,r2,8006f84 <_malloc_r+0x5f4>
 8006e7c:	01000504 	movi	r4,20
 8006e80:	20807c36 	bltu	r4,r2,8007074 <_malloc_r+0x6e4>
 8006e84:	110016c4 	addi	r4,r2,91
 8006e88:	210b883a 	add	r5,r4,r4
 8006e8c:	294b883a 	add	r5,r5,r5
 8006e90:	294b883a 	add	r5,r5,r5
 8006e94:	994b883a 	add	r5,r19,r5
 8006e98:	28800217 	ldw	r2,8(r5)
 8006e9c:	020200b4 	movhi	r8,2050
 8006ea0:	420e2704 	addi	r8,r8,14492
 8006ea4:	11406326 	beq	r2,r5,8007034 <_malloc_r+0x6a4>
 8006ea8:	01bfff04 	movi	r6,-4
 8006eac:	11000117 	ldw	r4,4(r2)
 8006eb0:	2188703a 	and	r4,r4,r6
 8006eb4:	3900022e 	bgeu	r7,r4,8006ec0 <_malloc_r+0x530>
 8006eb8:	10800217 	ldw	r2,8(r2)
 8006ebc:	28bffb1e 	bne	r5,r2,8006eac <__alt_data_end+0xfc006eac>
 8006ec0:	11800317 	ldw	r6,12(r2)
 8006ec4:	99000117 	ldw	r4,4(r19)
 8006ec8:	81800315 	stw	r6,12(r16)
 8006ecc:	80800215 	stw	r2,8(r16)
 8006ed0:	34000215 	stw	r16,8(r6)
 8006ed4:	14000315 	stw	r16,12(r2)
 8006ed8:	003f2706 	br	8006b78 <__alt_data_end+0xfc006b78>
 8006edc:	88c00054 	ori	r3,r17,1
 8006ee0:	80c00115 	stw	r3,4(r16)
 8006ee4:	8463883a 	add	r17,r16,r17
 8006ee8:	34400515 	stw	r17,20(r6)
 8006eec:	34400415 	stw	r17,16(r6)
 8006ef0:	10c00054 	ori	r3,r2,1
 8006ef4:	8a400315 	stw	r9,12(r17)
 8006ef8:	8a400215 	stw	r9,8(r17)
 8006efc:	88c00115 	stw	r3,4(r17)
 8006f00:	88a3883a 	add	r17,r17,r2
 8006f04:	88800015 	stw	r2,0(r17)
 8006f08:	9009883a 	mov	r4,r18
 8006f0c:	80161480 	call	8016148 <__malloc_unlock>
 8006f10:	80800204 	addi	r2,r16,8
 8006f14:	003ecb06 	br	8006a44 <__alt_data_end+0xfc006a44>
 8006f18:	31000117 	ldw	r4,4(r6)
 8006f1c:	003f1606 	br	8006b78 <__alt_data_end+0xfc006b78>
 8006f20:	63000044 	addi	r12,r12,1
 8006f24:	608000cc 	andi	r2,r12,3
 8006f28:	5ac00204 	addi	r11,r11,8
 8006f2c:	103f2a1e 	bne	r2,zero,8006bd8 <__alt_data_end+0xfc006bd8>
 8006f30:	00002106 	br	8006fb8 <_malloc_r+0x628>
 8006f34:	80800204 	addi	r2,r16,8
 8006f38:	84000517 	ldw	r16,20(r16)
 8006f3c:	143eb31e 	bne	r2,r16,8006a0c <__alt_data_end+0xfc006a0c>
 8006f40:	18c00084 	addi	r3,r3,2
 8006f44:	003eec06 	br	8006af8 <__alt_data_end+0xfc006af8>
 8006f48:	8085883a 	add	r2,r16,r2
 8006f4c:	10c00117 	ldw	r3,4(r2)
 8006f50:	81000317 	ldw	r4,12(r16)
 8006f54:	81400217 	ldw	r5,8(r16)
 8006f58:	18c00054 	ori	r3,r3,1
 8006f5c:	10c00115 	stw	r3,4(r2)
 8006f60:	29000315 	stw	r4,12(r5)
 8006f64:	21400215 	stw	r5,8(r4)
 8006f68:	9009883a 	mov	r4,r18
 8006f6c:	80161480 	call	8016148 <__malloc_unlock>
 8006f70:	80800204 	addi	r2,r16,8
 8006f74:	003eb306 	br	8006a44 <__alt_data_end+0xfc006a44>
 8006f78:	19c016c4 	addi	r7,r3,91
 8006f7c:	39cb883a 	add	r5,r7,r7
 8006f80:	003ec706 	br	8006aa0 <__alt_data_end+0xfc006aa0>
 8006f84:	3804d1ba 	srli	r2,r7,6
 8006f88:	11000e04 	addi	r4,r2,56
 8006f8c:	210b883a 	add	r5,r4,r4
 8006f90:	003fbe06 	br	8006e8c <__alt_data_end+0xfc006e8c>
 8006f94:	84ff5d26 	beq	r16,r19,8006d0c <__alt_data_end+0xfc006d0c>
 8006f98:	9c000217 	ldw	r16,8(r19)
 8006f9c:	00bfff04 	movi	r2,-4
 8006fa0:	80c00117 	ldw	r3,4(r16)
 8006fa4:	1886703a 	and	r3,r3,r2
 8006fa8:	003f9706 	br	8006e08 <__alt_data_end+0xfc006e08>
 8006fac:	52800017 	ldw	r10,0(r10)
 8006fb0:	18ffffc4 	addi	r3,r3,-1
 8006fb4:	50805c1e 	bne	r10,r2,8007128 <_malloc_r+0x798>
 8006fb8:	190000cc 	andi	r4,r3,3
 8006fbc:	50bffe04 	addi	r2,r10,-8
 8006fc0:	203ffa1e 	bne	r4,zero,8006fac <__alt_data_end+0xfc006fac>
 8006fc4:	98800117 	ldw	r2,4(r19)
 8006fc8:	0146303a 	nor	r3,zero,r5
 8006fcc:	1884703a 	and	r2,r3,r2
 8006fd0:	98800115 	stw	r2,4(r19)
 8006fd4:	294b883a 	add	r5,r5,r5
 8006fd8:	117f2e36 	bltu	r2,r5,8006c94 <__alt_data_end+0xfc006c94>
 8006fdc:	283f2d26 	beq	r5,zero,8006c94 <__alt_data_end+0xfc006c94>
 8006fe0:	1146703a 	and	r3,r2,r5
 8006fe4:	1800521e 	bne	r3,zero,8007130 <_malloc_r+0x7a0>
 8006fe8:	6007883a 	mov	r3,r12
 8006fec:	294b883a 	add	r5,r5,r5
 8006ff0:	1148703a 	and	r4,r2,r5
 8006ff4:	18c00104 	addi	r3,r3,4
 8006ff8:	203ffc26 	beq	r4,zero,8006fec <__alt_data_end+0xfc006fec>
 8006ffc:	003ef006 	br	8006bc0 <__alt_data_end+0xfc006bc0>
 8007000:	00805504 	movi	r2,340
 8007004:	10c01336 	bltu	r2,r3,8007054 <_malloc_r+0x6c4>
 8007008:	8806d3fa 	srli	r3,r17,15
 800700c:	19c01dc4 	addi	r7,r3,119
 8007010:	39cb883a 	add	r5,r7,r7
 8007014:	003ea206 	br	8006aa0 <__alt_data_end+0xfc006aa0>
 8007018:	00c40004 	movi	r3,4096
 800701c:	003f4d06 	br	8006d54 <__alt_data_end+0xfc006d54>
 8007020:	00800044 	movi	r2,1
 8007024:	a0800115 	stw	r2,4(r20)
 8007028:	a021883a 	mov	r16,r20
 800702c:	0007883a 	mov	r3,zero
 8007030:	003f7506 	br	8006e08 <__alt_data_end+0xfc006e08>
 8007034:	200bd0ba 	srai	r5,r4,2
 8007038:	01800044 	movi	r6,1
 800703c:	41000117 	ldw	r4,4(r8)
 8007040:	314a983a 	sll	r5,r6,r5
 8007044:	100d883a 	mov	r6,r2
 8007048:	2908b03a 	or	r4,r5,r4
 800704c:	41000115 	stw	r4,4(r8)
 8007050:	003f9d06 	br	8006ec8 <__alt_data_end+0xfc006ec8>
 8007054:	00815504 	movi	r2,1364
 8007058:	10c01336 	bltu	r2,r3,80070a8 <_malloc_r+0x718>
 800705c:	8806d4ba 	srli	r3,r17,18
 8007060:	19c01f04 	addi	r7,r3,124
 8007064:	39cb883a 	add	r5,r7,r7
 8007068:	003e8d06 	br	8006aa0 <__alt_data_end+0xfc006aa0>
 800706c:	ad400404 	addi	r21,r21,16
 8007070:	003f1d06 	br	8006ce8 <__alt_data_end+0xfc006ce8>
 8007074:	01001504 	movi	r4,84
 8007078:	20801c36 	bltu	r4,r2,80070ec <_malloc_r+0x75c>
 800707c:	3804d33a 	srli	r2,r7,12
 8007080:	11001b84 	addi	r4,r2,110
 8007084:	210b883a 	add	r5,r4,r4
 8007088:	003f8006 	br	8006e8c <__alt_data_end+0xfc006e8c>
 800708c:	3083ffcc 	andi	r2,r6,4095
 8007090:	103f241e 	bne	r2,zero,8006d24 <__alt_data_end+0xfc006d24>
 8007094:	99000217 	ldw	r4,8(r19)
 8007098:	ad85883a 	add	r2,r21,r22
 800709c:	10800054 	ori	r2,r2,1
 80070a0:	20800115 	stw	r2,4(r4)
 80070a4:	003f4a06 	br	8006dd0 <__alt_data_end+0xfc006dd0>
 80070a8:	01403f04 	movi	r5,252
 80070ac:	01c01f84 	movi	r7,126
 80070b0:	003e7b06 	br	8006aa0 <__alt_data_end+0xfc006aa0>
 80070b4:	00c00044 	movi	r3,1
 80070b8:	002b883a 	mov	r21,zero
 80070bc:	003f3006 	br	8006d80 <__alt_data_end+0xfc006d80>
 80070c0:	008200b4 	movhi	r2,2050
 80070c4:	1094de04 	addi	r2,r2,21368
 80070c8:	15000015 	stw	r20,0(r2)
 80070cc:	003f1b06 	br	8006d3c <__alt_data_end+0xfc006d3c>
 80070d0:	9009883a 	mov	r4,r18
 80070d4:	81400204 	addi	r5,r16,8
 80070d8:	800de440 	call	800de44 <_free_r>
 80070dc:	008200b4 	movhi	r2,2050
 80070e0:	109bcb04 	addi	r2,r2,28460
 80070e4:	10c00017 	ldw	r3,0(r2)
 80070e8:	003f3906 	br	8006dd0 <__alt_data_end+0xfc006dd0>
 80070ec:	01005504 	movi	r4,340
 80070f0:	20800436 	bltu	r4,r2,8007104 <_malloc_r+0x774>
 80070f4:	3804d3fa 	srli	r2,r7,15
 80070f8:	11001dc4 	addi	r4,r2,119
 80070fc:	210b883a 	add	r5,r4,r4
 8007100:	003f6206 	br	8006e8c <__alt_data_end+0xfc006e8c>
 8007104:	01015504 	movi	r4,1364
 8007108:	20800436 	bltu	r4,r2,800711c <_malloc_r+0x78c>
 800710c:	3804d4ba 	srli	r2,r7,18
 8007110:	11001f04 	addi	r4,r2,124
 8007114:	210b883a 	add	r5,r4,r4
 8007118:	003f5c06 	br	8006e8c <__alt_data_end+0xfc006e8c>
 800711c:	01403f04 	movi	r5,252
 8007120:	01001f84 	movi	r4,126
 8007124:	003f5906 	br	8006e8c <__alt_data_end+0xfc006e8c>
 8007128:	98800117 	ldw	r2,4(r19)
 800712c:	003fa906 	br	8006fd4 <__alt_data_end+0xfc006fd4>
 8007130:	6007883a 	mov	r3,r12
 8007134:	003ea206 	br	8006bc0 <__alt_data_end+0xfc006bc0>

08007138 <memcpy>:
 8007138:	deffff04 	addi	sp,sp,-4
 800713c:	dc000015 	stw	r16,0(sp)
 8007140:	00c003c4 	movi	r3,15
 8007144:	2005883a 	mov	r2,r4
 8007148:	1980432e 	bgeu	r3,r6,8007258 <memcpy+0x120>
 800714c:	2146b03a 	or	r3,r4,r5
 8007150:	18c000cc 	andi	r3,r3,3
 8007154:	1800421e 	bne	r3,zero,8007260 <memcpy+0x128>
 8007158:	343ffc04 	addi	r16,r6,-16
 800715c:	8020d13a 	srli	r16,r16,4
 8007160:	28c00104 	addi	r3,r5,4
 8007164:	23400104 	addi	r13,r4,4
 8007168:	801e913a 	slli	r15,r16,4
 800716c:	2b000204 	addi	r12,r5,8
 8007170:	22c00204 	addi	r11,r4,8
 8007174:	7bc00504 	addi	r15,r15,20
 8007178:	2a800304 	addi	r10,r5,12
 800717c:	22400304 	addi	r9,r4,12
 8007180:	2bdf883a 	add	r15,r5,r15
 8007184:	2811883a 	mov	r8,r5
 8007188:	200f883a 	mov	r7,r4
 800718c:	41000017 	ldw	r4,0(r8)
 8007190:	39c00404 	addi	r7,r7,16
 8007194:	18c00404 	addi	r3,r3,16
 8007198:	393ffc15 	stw	r4,-16(r7)
 800719c:	1bbffc17 	ldw	r14,-16(r3)
 80071a0:	6b400404 	addi	r13,r13,16
 80071a4:	5ac00404 	addi	r11,r11,16
 80071a8:	6bbffc15 	stw	r14,-16(r13)
 80071ac:	63800017 	ldw	r14,0(r12)
 80071b0:	4a400404 	addi	r9,r9,16
 80071b4:	42000404 	addi	r8,r8,16
 80071b8:	5bbffc15 	stw	r14,-16(r11)
 80071bc:	53800017 	ldw	r14,0(r10)
 80071c0:	63000404 	addi	r12,r12,16
 80071c4:	52800404 	addi	r10,r10,16
 80071c8:	4bbffc15 	stw	r14,-16(r9)
 80071cc:	1bffef1e 	bne	r3,r15,800718c <__alt_data_end+0xfc00718c>
 80071d0:	81c00044 	addi	r7,r16,1
 80071d4:	380e913a 	slli	r7,r7,4
 80071d8:	310003cc 	andi	r4,r6,15
 80071dc:	02c000c4 	movi	r11,3
 80071e0:	11c7883a 	add	r3,r2,r7
 80071e4:	29cb883a 	add	r5,r5,r7
 80071e8:	59001f2e 	bgeu	r11,r4,8007268 <memcpy+0x130>
 80071ec:	1813883a 	mov	r9,r3
 80071f0:	2811883a 	mov	r8,r5
 80071f4:	200f883a 	mov	r7,r4
 80071f8:	42800017 	ldw	r10,0(r8)
 80071fc:	4a400104 	addi	r9,r9,4
 8007200:	39ffff04 	addi	r7,r7,-4
 8007204:	4abfff15 	stw	r10,-4(r9)
 8007208:	42000104 	addi	r8,r8,4
 800720c:	59fffa36 	bltu	r11,r7,80071f8 <__alt_data_end+0xfc0071f8>
 8007210:	213fff04 	addi	r4,r4,-4
 8007214:	2008d0ba 	srli	r4,r4,2
 8007218:	318000cc 	andi	r6,r6,3
 800721c:	21000044 	addi	r4,r4,1
 8007220:	2109883a 	add	r4,r4,r4
 8007224:	2109883a 	add	r4,r4,r4
 8007228:	1907883a 	add	r3,r3,r4
 800722c:	290b883a 	add	r5,r5,r4
 8007230:	30000626 	beq	r6,zero,800724c <memcpy+0x114>
 8007234:	198d883a 	add	r6,r3,r6
 8007238:	29c00003 	ldbu	r7,0(r5)
 800723c:	18c00044 	addi	r3,r3,1
 8007240:	29400044 	addi	r5,r5,1
 8007244:	19ffffc5 	stb	r7,-1(r3)
 8007248:	19bffb1e 	bne	r3,r6,8007238 <__alt_data_end+0xfc007238>
 800724c:	dc000017 	ldw	r16,0(sp)
 8007250:	dec00104 	addi	sp,sp,4
 8007254:	f800283a 	ret
 8007258:	2007883a 	mov	r3,r4
 800725c:	003ff406 	br	8007230 <__alt_data_end+0xfc007230>
 8007260:	2007883a 	mov	r3,r4
 8007264:	003ff306 	br	8007234 <__alt_data_end+0xfc007234>
 8007268:	200d883a 	mov	r6,r4
 800726c:	003ff006 	br	8007230 <__alt_data_end+0xfc007230>

08007270 <_printf_r>:
 8007270:	defffd04 	addi	sp,sp,-12
 8007274:	dfc00015 	stw	ra,0(sp)
 8007278:	d9800115 	stw	r6,4(sp)
 800727c:	d9c00215 	stw	r7,8(sp)
 8007280:	280d883a 	mov	r6,r5
 8007284:	21400217 	ldw	r5,8(r4)
 8007288:	d9c00104 	addi	r7,sp,4
 800728c:	8009b740 	call	8009b74 <___vfprintf_internal_r>
 8007290:	dfc00017 	ldw	ra,0(sp)
 8007294:	dec00304 	addi	sp,sp,12
 8007298:	f800283a 	ret

0800729c <printf>:
 800729c:	defffc04 	addi	sp,sp,-16
 80072a0:	dfc00015 	stw	ra,0(sp)
 80072a4:	d9400115 	stw	r5,4(sp)
 80072a8:	d9800215 	stw	r6,8(sp)
 80072ac:	d9c00315 	stw	r7,12(sp)
 80072b0:	008200b4 	movhi	r2,2050
 80072b4:	1094e104 	addi	r2,r2,21380
 80072b8:	10800017 	ldw	r2,0(r2)
 80072bc:	200b883a 	mov	r5,r4
 80072c0:	d9800104 	addi	r6,sp,4
 80072c4:	11000217 	ldw	r4,8(r2)
 80072c8:	800bc700 	call	800bc70 <__vfprintf_internal>
 80072cc:	dfc00017 	ldw	ra,0(sp)
 80072d0:	dec00404 	addi	sp,sp,16
 80072d4:	f800283a 	ret

080072d8 <_puts_r>:
 80072d8:	defff604 	addi	sp,sp,-40
 80072dc:	dc000715 	stw	r16,28(sp)
 80072e0:	2021883a 	mov	r16,r4
 80072e4:	2809883a 	mov	r4,r5
 80072e8:	dc400815 	stw	r17,32(sp)
 80072ec:	dfc00915 	stw	ra,36(sp)
 80072f0:	2823883a 	mov	r17,r5
 80072f4:	80079640 	call	8007964 <strlen>
 80072f8:	00c200b4 	movhi	r3,2050
 80072fc:	18d4e104 	addi	r3,r3,21380
 8007300:	18c00017 	ldw	r3,0(r3)
 8007304:	11000044 	addi	r4,r2,1
 8007308:	d8800115 	stw	r2,4(sp)
 800730c:	18c00217 	ldw	r3,8(r3)
 8007310:	014200b4 	movhi	r5,2050
 8007314:	294d9104 	addi	r5,r5,13892
 8007318:	1880030b 	ldhu	r2,12(r3)
 800731c:	d9400215 	stw	r5,8(sp)
 8007320:	d9000615 	stw	r4,24(sp)
 8007324:	01400044 	movi	r5,1
 8007328:	01000084 	movi	r4,2
 800732c:	d9000515 	stw	r4,20(sp)
 8007330:	dc400015 	stw	r17,0(sp)
 8007334:	d9400315 	stw	r5,12(sp)
 8007338:	dec00415 	stw	sp,16(sp)
 800733c:	1108000c 	andi	r4,r2,8192
 8007340:	2000061e 	bne	r4,zero,800735c <_puts_r+0x84>
 8007344:	19401917 	ldw	r5,100(r3)
 8007348:	0137ffc4 	movi	r4,-8193
 800734c:	10880014 	ori	r2,r2,8192
 8007350:	2908703a 	and	r4,r5,r4
 8007354:	1880030d 	sth	r2,12(r3)
 8007358:	19001915 	stw	r4,100(r3)
 800735c:	81400217 	ldw	r5,8(r16)
 8007360:	8009883a 	mov	r4,r16
 8007364:	d9800404 	addi	r6,sp,16
 8007368:	800e1340 	call	800e134 <__sfvwrite_r>
 800736c:	1000061e 	bne	r2,zero,8007388 <_puts_r+0xb0>
 8007370:	00800284 	movi	r2,10
 8007374:	dfc00917 	ldw	ra,36(sp)
 8007378:	dc400817 	ldw	r17,32(sp)
 800737c:	dc000717 	ldw	r16,28(sp)
 8007380:	dec00a04 	addi	sp,sp,40
 8007384:	f800283a 	ret
 8007388:	00bfffc4 	movi	r2,-1
 800738c:	003ff906 	br	8007374 <__alt_data_end+0xfc007374>

08007390 <puts>:
 8007390:	008200b4 	movhi	r2,2050
 8007394:	1094e104 	addi	r2,r2,21380
 8007398:	200b883a 	mov	r5,r4
 800739c:	11000017 	ldw	r4,0(r2)
 80073a0:	80072d81 	jmpi	80072d8 <_puts_r>

080073a4 <srand>:
 80073a4:	008200b4 	movhi	r2,2050
 80073a8:	1094e104 	addi	r2,r2,21380
 80073ac:	10800017 	ldw	r2,0(r2)
 80073b0:	11002915 	stw	r4,164(r2)
 80073b4:	10002a15 	stw	zero,168(r2)
 80073b8:	f800283a 	ret

080073bc <rand>:
 80073bc:	008200b4 	movhi	r2,2050
 80073c0:	defffe04 	addi	sp,sp,-8
 80073c4:	1094e104 	addi	r2,r2,21380
 80073c8:	dc000015 	stw	r16,0(sp)
 80073cc:	14000017 	ldw	r16,0(r2)
 80073d0:	dfc00115 	stw	ra,4(sp)
 80073d4:	01932574 	movhi	r6,19605
 80073d8:	81002917 	ldw	r4,164(r16)
 80073dc:	81402a17 	ldw	r5,168(r16)
 80073e0:	01d614b4 	movhi	r7,22610
 80073e4:	319fcb44 	addi	r6,r6,32557
 80073e8:	39fd0b44 	addi	r7,r7,-3027
 80073ec:	801381c0 	call	801381c <__muldi3>
 80073f0:	11000044 	addi	r4,r2,1
 80073f4:	2085803a 	cmpltu	r2,r4,r2
 80073f8:	10c7883a 	add	r3,r2,r3
 80073fc:	00a00034 	movhi	r2,32768
 8007400:	10bfffc4 	addi	r2,r2,-1
 8007404:	1884703a 	and	r2,r3,r2
 8007408:	81002915 	stw	r4,164(r16)
 800740c:	80c02a15 	stw	r3,168(r16)
 8007410:	dfc00117 	ldw	ra,4(sp)
 8007414:	dc000017 	ldw	r16,0(sp)
 8007418:	dec00204 	addi	sp,sp,8
 800741c:	f800283a 	ret

08007420 <_sbrk_r>:
 8007420:	defffd04 	addi	sp,sp,-12
 8007424:	dc000015 	stw	r16,0(sp)
 8007428:	040200b4 	movhi	r16,2050
 800742c:	dc400115 	stw	r17,4(sp)
 8007430:	841bbd04 	addi	r16,r16,28404
 8007434:	2023883a 	mov	r17,r4
 8007438:	2809883a 	mov	r4,r5
 800743c:	dfc00215 	stw	ra,8(sp)
 8007440:	80000015 	stw	zero,0(r16)
 8007444:	801633c0 	call	801633c <sbrk>
 8007448:	00ffffc4 	movi	r3,-1
 800744c:	10c00526 	beq	r2,r3,8007464 <_sbrk_r+0x44>
 8007450:	dfc00217 	ldw	ra,8(sp)
 8007454:	dc400117 	ldw	r17,4(sp)
 8007458:	dc000017 	ldw	r16,0(sp)
 800745c:	dec00304 	addi	sp,sp,12
 8007460:	f800283a 	ret
 8007464:	80c00017 	ldw	r3,0(r16)
 8007468:	183ff926 	beq	r3,zero,8007450 <__alt_data_end+0xfc007450>
 800746c:	88c00015 	stw	r3,0(r17)
 8007470:	003ff706 	br	8007450 <__alt_data_end+0xfc007450>

08007474 <_snprintf_r>:
 8007474:	3005883a 	mov	r2,r6
 8007478:	30003016 	blt	r6,zero,800753c <_snprintf_r+0xc8>
 800747c:	deffe404 	addi	sp,sp,-112
 8007480:	00c08204 	movi	r3,520
 8007484:	dc001a15 	stw	r16,104(sp)
 8007488:	dfc01b15 	stw	ra,108(sp)
 800748c:	d8c0030d 	sth	r3,12(sp)
 8007490:	d9400015 	stw	r5,0(sp)
 8007494:	d9400415 	stw	r5,16(sp)
 8007498:	380d883a 	mov	r6,r7
 800749c:	2021883a 	mov	r16,r4
 80074a0:	10001026 	beq	r2,zero,80074e4 <_snprintf_r+0x70>
 80074a4:	10bfffc4 	addi	r2,r2,-1
 80074a8:	d8800215 	stw	r2,8(sp)
 80074ac:	d8800515 	stw	r2,20(sp)
 80074b0:	d80b883a 	mov	r5,sp
 80074b4:	00bfffc4 	movi	r2,-1
 80074b8:	d9c01c04 	addi	r7,sp,112
 80074bc:	d880038d 	sth	r2,14(sp)
 80074c0:	8007ab40 	call	8007ab4 <___svfprintf_internal_r>
 80074c4:	00ffffc4 	movi	r3,-1
 80074c8:	10c01916 	blt	r2,r3,8007530 <_snprintf_r+0xbc>
 80074cc:	d8c00017 	ldw	r3,0(sp)
 80074d0:	18000005 	stb	zero,0(r3)
 80074d4:	dfc01b17 	ldw	ra,108(sp)
 80074d8:	dc001a17 	ldw	r16,104(sp)
 80074dc:	dec01c04 	addi	sp,sp,112
 80074e0:	f800283a 	ret
 80074e4:	00bfffc4 	movi	r2,-1
 80074e8:	d80b883a 	mov	r5,sp
 80074ec:	d9c01c04 	addi	r7,sp,112
 80074f0:	d8000215 	stw	zero,8(sp)
 80074f4:	d8000515 	stw	zero,20(sp)
 80074f8:	d880038d 	sth	r2,14(sp)
 80074fc:	8007ab40 	call	8007ab4 <___svfprintf_internal_r>
 8007500:	00ffffc4 	movi	r3,-1
 8007504:	10c00416 	blt	r2,r3,8007518 <_snprintf_r+0xa4>
 8007508:	dfc01b17 	ldw	ra,108(sp)
 800750c:	dc001a17 	ldw	r16,104(sp)
 8007510:	dec01c04 	addi	sp,sp,112
 8007514:	f800283a 	ret
 8007518:	00c022c4 	movi	r3,139
 800751c:	80c00015 	stw	r3,0(r16)
 8007520:	dfc01b17 	ldw	ra,108(sp)
 8007524:	dc001a17 	ldw	r16,104(sp)
 8007528:	dec01c04 	addi	sp,sp,112
 800752c:	f800283a 	ret
 8007530:	00c022c4 	movi	r3,139
 8007534:	80c00015 	stw	r3,0(r16)
 8007538:	003fe406 	br	80074cc <__alt_data_end+0xfc0074cc>
 800753c:	008022c4 	movi	r2,139
 8007540:	20800015 	stw	r2,0(r4)
 8007544:	00bfffc4 	movi	r2,-1
 8007548:	f800283a 	ret

0800754c <snprintf>:
 800754c:	deffe304 	addi	sp,sp,-116
 8007550:	dfc01b15 	stw	ra,108(sp)
 8007554:	dc001a15 	stw	r16,104(sp)
 8007558:	d9c01c15 	stw	r7,112(sp)
 800755c:	008200b4 	movhi	r2,2050
 8007560:	1094e104 	addi	r2,r2,21380
 8007564:	14000017 	ldw	r16,0(r2)
 8007568:	28002d16 	blt	r5,zero,8007620 <snprintf+0xd4>
 800756c:	00c08204 	movi	r3,520
 8007570:	d8c0030d 	sth	r3,12(sp)
 8007574:	d9000015 	stw	r4,0(sp)
 8007578:	d9000415 	stw	r4,16(sp)
 800757c:	28001126 	beq	r5,zero,80075c4 <snprintf+0x78>
 8007580:	28bfffc4 	addi	r2,r5,-1
 8007584:	d8800215 	stw	r2,8(sp)
 8007588:	d8800515 	stw	r2,20(sp)
 800758c:	8009883a 	mov	r4,r16
 8007590:	00bfffc4 	movi	r2,-1
 8007594:	d80b883a 	mov	r5,sp
 8007598:	d9c01c04 	addi	r7,sp,112
 800759c:	d880038d 	sth	r2,14(sp)
 80075a0:	8007ab40 	call	8007ab4 <___svfprintf_internal_r>
 80075a4:	00ffffc4 	movi	r3,-1
 80075a8:	10c01a16 	blt	r2,r3,8007614 <snprintf+0xc8>
 80075ac:	d8c00017 	ldw	r3,0(sp)
 80075b0:	18000005 	stb	zero,0(r3)
 80075b4:	dfc01b17 	ldw	ra,108(sp)
 80075b8:	dc001a17 	ldw	r16,104(sp)
 80075bc:	dec01d04 	addi	sp,sp,116
 80075c0:	f800283a 	ret
 80075c4:	00bfffc4 	movi	r2,-1
 80075c8:	8009883a 	mov	r4,r16
 80075cc:	d80b883a 	mov	r5,sp
 80075d0:	d9c01c04 	addi	r7,sp,112
 80075d4:	d8000215 	stw	zero,8(sp)
 80075d8:	d8000515 	stw	zero,20(sp)
 80075dc:	d880038d 	sth	r2,14(sp)
 80075e0:	8007ab40 	call	8007ab4 <___svfprintf_internal_r>
 80075e4:	00ffffc4 	movi	r3,-1
 80075e8:	10c00416 	blt	r2,r3,80075fc <snprintf+0xb0>
 80075ec:	dfc01b17 	ldw	ra,108(sp)
 80075f0:	dc001a17 	ldw	r16,104(sp)
 80075f4:	dec01d04 	addi	sp,sp,116
 80075f8:	f800283a 	ret
 80075fc:	00c022c4 	movi	r3,139
 8007600:	80c00015 	stw	r3,0(r16)
 8007604:	dfc01b17 	ldw	ra,108(sp)
 8007608:	dc001a17 	ldw	r16,104(sp)
 800760c:	dec01d04 	addi	sp,sp,116
 8007610:	f800283a 	ret
 8007614:	00c022c4 	movi	r3,139
 8007618:	80c00015 	stw	r3,0(r16)
 800761c:	003fe306 	br	80075ac <__alt_data_end+0xfc0075ac>
 8007620:	008022c4 	movi	r2,139
 8007624:	80800015 	stw	r2,0(r16)
 8007628:	00bfffc4 	movi	r2,-1
 800762c:	003fef06 	br	80075ec <__alt_data_end+0xfc0075ec>

08007630 <_sprintf_r>:
 8007630:	deffe404 	addi	sp,sp,-112
 8007634:	2807883a 	mov	r3,r5
 8007638:	dfc01a15 	stw	ra,104(sp)
 800763c:	d9c01b15 	stw	r7,108(sp)
 8007640:	00a00034 	movhi	r2,32768
 8007644:	10bfffc4 	addi	r2,r2,-1
 8007648:	02008204 	movi	r8,520
 800764c:	d8800215 	stw	r2,8(sp)
 8007650:	d8800515 	stw	r2,20(sp)
 8007654:	d80b883a 	mov	r5,sp
 8007658:	d9c01b04 	addi	r7,sp,108
 800765c:	00bfffc4 	movi	r2,-1
 8007660:	d8c00015 	stw	r3,0(sp)
 8007664:	d8c00415 	stw	r3,16(sp)
 8007668:	da00030d 	sth	r8,12(sp)
 800766c:	d880038d 	sth	r2,14(sp)
 8007670:	8007ab40 	call	8007ab4 <___svfprintf_internal_r>
 8007674:	d8c00017 	ldw	r3,0(sp)
 8007678:	18000005 	stb	zero,0(r3)
 800767c:	dfc01a17 	ldw	ra,104(sp)
 8007680:	dec01c04 	addi	sp,sp,112
 8007684:	f800283a 	ret

08007688 <sprintf>:
 8007688:	deffe304 	addi	sp,sp,-116
 800768c:	2007883a 	mov	r3,r4
 8007690:	dfc01a15 	stw	ra,104(sp)
 8007694:	d9801b15 	stw	r6,108(sp)
 8007698:	d9c01c15 	stw	r7,112(sp)
 800769c:	010200b4 	movhi	r4,2050
 80076a0:	2114e104 	addi	r4,r4,21380
 80076a4:	21000017 	ldw	r4,0(r4)
 80076a8:	00a00034 	movhi	r2,32768
 80076ac:	10bfffc4 	addi	r2,r2,-1
 80076b0:	280d883a 	mov	r6,r5
 80076b4:	02008204 	movi	r8,520
 80076b8:	d8800215 	stw	r2,8(sp)
 80076bc:	d8800515 	stw	r2,20(sp)
 80076c0:	d80b883a 	mov	r5,sp
 80076c4:	d9c01b04 	addi	r7,sp,108
 80076c8:	00bfffc4 	movi	r2,-1
 80076cc:	d8c00015 	stw	r3,0(sp)
 80076d0:	d8c00415 	stw	r3,16(sp)
 80076d4:	da00030d 	sth	r8,12(sp)
 80076d8:	d880038d 	sth	r2,14(sp)
 80076dc:	8007ab40 	call	8007ab4 <___svfprintf_internal_r>
 80076e0:	d8c00017 	ldw	r3,0(sp)
 80076e4:	18000005 	stb	zero,0(r3)
 80076e8:	dfc01a17 	ldw	ra,104(sp)
 80076ec:	dec01d04 	addi	sp,sp,116
 80076f0:	f800283a 	ret

080076f4 <strchr>:
 80076f4:	2ac03fcc 	andi	r11,r5,255
 80076f8:	2815883a 	mov	r10,r5
 80076fc:	208000cc 	andi	r2,r4,3
 8007700:	58003726 	beq	r11,zero,80077e0 <strchr+0xec>
 8007704:	10000b26 	beq	r2,zero,8007734 <strchr+0x40>
 8007708:	20800003 	ldbu	r2,0(r4)
 800770c:	10003226 	beq	r2,zero,80077d8 <strchr+0xe4>
 8007710:	28c03fcc 	andi	r3,r5,255
 8007714:	5880041e 	bne	r11,r2,8007728 <strchr+0x34>
 8007718:	00004d06 	br	8007850 <strchr+0x15c>
 800771c:	20800003 	ldbu	r2,0(r4)
 8007720:	10002d26 	beq	r2,zero,80077d8 <strchr+0xe4>
 8007724:	18804a26 	beq	r3,r2,8007850 <strchr+0x15c>
 8007728:	21000044 	addi	r4,r4,1
 800772c:	208000cc 	andi	r2,r4,3
 8007730:	103ffa1e 	bne	r2,zero,800771c <__alt_data_end+0xfc00771c>
 8007734:	29403fcc 	andi	r5,r5,255
 8007738:	280e923a 	slli	r7,r5,8
 800773c:	20800017 	ldw	r2,0(r4)
 8007740:	01bfbff4 	movhi	r6,65279
 8007744:	394ab03a 	or	r5,r7,r5
 8007748:	280e943a 	slli	r7,r5,16
 800774c:	31bfbfc4 	addi	r6,r6,-257
 8007750:	0090303a 	nor	r8,zero,r2
 8007754:	394eb03a 	or	r7,r7,r5
 8007758:	1187883a 	add	r3,r2,r6
 800775c:	11c4f03a 	xor	r2,r2,r7
 8007760:	008a303a 	nor	r5,zero,r2
 8007764:	1185883a 	add	r2,r2,r6
 8007768:	03202074 	movhi	r12,32897
 800776c:	2884703a 	and	r2,r5,r2
 8007770:	40c6703a 	and	r3,r8,r3
 8007774:	63202004 	addi	r12,r12,-32640
 8007778:	10c4b03a 	or	r2,r2,r3
 800777c:	1304703a 	and	r2,r2,r12
 8007780:	10000c1e 	bne	r2,zero,80077b4 <strchr+0xc0>
 8007784:	21000104 	addi	r4,r4,4
 8007788:	20800017 	ldw	r2,0(r4)
 800778c:	3886f03a 	xor	r3,r7,r2
 8007790:	00d2303a 	nor	r9,zero,r3
 8007794:	198b883a 	add	r5,r3,r6
 8007798:	0090303a 	nor	r8,zero,r2
 800779c:	1187883a 	add	r3,r2,r6
 80077a0:	494a703a 	and	r5,r9,r5
 80077a4:	40c4703a 	and	r2,r8,r3
 80077a8:	2884b03a 	or	r2,r5,r2
 80077ac:	1304703a 	and	r2,r2,r12
 80077b0:	103ff426 	beq	r2,zero,8007784 <__alt_data_end+0xfc007784>
 80077b4:	20800003 	ldbu	r2,0(r4)
 80077b8:	10000726 	beq	r2,zero,80077d8 <strchr+0xe4>
 80077bc:	58802426 	beq	r11,r2,8007850 <strchr+0x15c>
 80077c0:	50c03fcc 	andi	r3,r10,255
 80077c4:	00000106 	br	80077cc <strchr+0xd8>
 80077c8:	18802126 	beq	r3,r2,8007850 <strchr+0x15c>
 80077cc:	21000044 	addi	r4,r4,1
 80077d0:	20800003 	ldbu	r2,0(r4)
 80077d4:	103ffc1e 	bne	r2,zero,80077c8 <__alt_data_end+0xfc0077c8>
 80077d8:	0005883a 	mov	r2,zero
 80077dc:	f800283a 	ret
 80077e0:	10000526 	beq	r2,zero,80077f8 <strchr+0x104>
 80077e4:	20800003 	ldbu	r2,0(r4)
 80077e8:	10001926 	beq	r2,zero,8007850 <strchr+0x15c>
 80077ec:	21000044 	addi	r4,r4,1
 80077f0:	208000cc 	andi	r2,r4,3
 80077f4:	103ffb1e 	bne	r2,zero,80077e4 <__alt_data_end+0xfc0077e4>
 80077f8:	20800017 	ldw	r2,0(r4)
 80077fc:	01bfbff4 	movhi	r6,65279
 8007800:	31bfbfc4 	addi	r6,r6,-257
 8007804:	0086303a 	nor	r3,zero,r2
 8007808:	01602074 	movhi	r5,32897
 800780c:	1185883a 	add	r2,r2,r6
 8007810:	29602004 	addi	r5,r5,-32640
 8007814:	10c4703a 	and	r2,r2,r3
 8007818:	1144703a 	and	r2,r2,r5
 800781c:	10000a1e 	bne	r2,zero,8007848 <strchr+0x154>
 8007820:	21000104 	addi	r4,r4,4
 8007824:	20800017 	ldw	r2,0(r4)
 8007828:	1187883a 	add	r3,r2,r6
 800782c:	0084303a 	nor	r2,zero,r2
 8007830:	1884703a 	and	r2,r3,r2
 8007834:	1144703a 	and	r2,r2,r5
 8007838:	103ff926 	beq	r2,zero,8007820 <__alt_data_end+0xfc007820>
 800783c:	20800003 	ldbu	r2,0(r4)
 8007840:	10000326 	beq	r2,zero,8007850 <strchr+0x15c>
 8007844:	21000044 	addi	r4,r4,1
 8007848:	20800003 	ldbu	r2,0(r4)
 800784c:	103ffd1e 	bne	r2,zero,8007844 <__alt_data_end+0xfc007844>
 8007850:	2005883a 	mov	r2,r4
 8007854:	f800283a 	ret

08007858 <strcpy>:
 8007858:	2906b03a 	or	r3,r5,r4
 800785c:	18c000cc 	andi	r3,r3,3
 8007860:	2005883a 	mov	r2,r4
 8007864:	1800161e 	bne	r3,zero,80078c0 <strcpy+0x68>
 8007868:	29c00017 	ldw	r7,0(r5)
 800786c:	02ffbff4 	movhi	r11,65279
 8007870:	5affbfc4 	addi	r11,r11,-257
 8007874:	02a02074 	movhi	r10,32897
 8007878:	01c8303a 	nor	r4,zero,r7
 800787c:	3ac7883a 	add	r3,r7,r11
 8007880:	52a02004 	addi	r10,r10,-32640
 8007884:	20c6703a 	and	r3,r4,r3
 8007888:	1a86703a 	and	r3,r3,r10
 800788c:	18000c1e 	bne	r3,zero,80078c0 <strcpy+0x68>
 8007890:	1011883a 	mov	r8,r2
 8007894:	41c00015 	stw	r7,0(r8)
 8007898:	29400104 	addi	r5,r5,4
 800789c:	29c00017 	ldw	r7,0(r5)
 80078a0:	41800104 	addi	r6,r8,4
 80078a4:	3011883a 	mov	r8,r6
 80078a8:	01d2303a 	nor	r9,zero,r7
 80078ac:	3ac7883a 	add	r3,r7,r11
 80078b0:	48c6703a 	and	r3,r9,r3
 80078b4:	1a86703a 	and	r3,r3,r10
 80078b8:	183ff626 	beq	r3,zero,8007894 <__alt_data_end+0xfc007894>
 80078bc:	00000106 	br	80078c4 <strcpy+0x6c>
 80078c0:	100d883a 	mov	r6,r2
 80078c4:	28c00003 	ldbu	r3,0(r5)
 80078c8:	31800044 	addi	r6,r6,1
 80078cc:	29400044 	addi	r5,r5,1
 80078d0:	30ffffc5 	stb	r3,-1(r6)
 80078d4:	18c03fcc 	andi	r3,r3,255
 80078d8:	18c0201c 	xori	r3,r3,128
 80078dc:	18ffe004 	addi	r3,r3,-128
 80078e0:	183ff81e 	bne	r3,zero,80078c4 <__alt_data_end+0xfc0078c4>
 80078e4:	f800283a 	ret

080078e8 <strdup>:
 80078e8:	008200b4 	movhi	r2,2050
 80078ec:	1094e104 	addi	r2,r2,21380
 80078f0:	200b883a 	mov	r5,r4
 80078f4:	11000017 	ldw	r4,0(r2)
 80078f8:	80078fc1 	jmpi	80078fc <_strdup_r>

080078fc <_strdup_r>:
 80078fc:	defffc04 	addi	sp,sp,-16
 8007900:	dc000015 	stw	r16,0(sp)
 8007904:	2021883a 	mov	r16,r4
 8007908:	2809883a 	mov	r4,r5
 800790c:	dfc00315 	stw	ra,12(sp)
 8007910:	dc800215 	stw	r18,8(sp)
 8007914:	dc400115 	stw	r17,4(sp)
 8007918:	2825883a 	mov	r18,r5
 800791c:	80079640 	call	8007964 <strlen>
 8007920:	14400044 	addi	r17,r2,1
 8007924:	8009883a 	mov	r4,r16
 8007928:	880b883a 	mov	r5,r17
 800792c:	80069900 	call	8006990 <_malloc_r>
 8007930:	1021883a 	mov	r16,r2
 8007934:	10000426 	beq	r2,zero,8007948 <_strdup_r+0x4c>
 8007938:	1009883a 	mov	r4,r2
 800793c:	900b883a 	mov	r5,r18
 8007940:	880d883a 	mov	r6,r17
 8007944:	80071380 	call	8007138 <memcpy>
 8007948:	8005883a 	mov	r2,r16
 800794c:	dfc00317 	ldw	ra,12(sp)
 8007950:	dc800217 	ldw	r18,8(sp)
 8007954:	dc400117 	ldw	r17,4(sp)
 8007958:	dc000017 	ldw	r16,0(sp)
 800795c:	dec00404 	addi	sp,sp,16
 8007960:	f800283a 	ret

08007964 <strlen>:
 8007964:	208000cc 	andi	r2,r4,3
 8007968:	10002026 	beq	r2,zero,80079ec <strlen+0x88>
 800796c:	20800007 	ldb	r2,0(r4)
 8007970:	10002026 	beq	r2,zero,80079f4 <strlen+0x90>
 8007974:	2005883a 	mov	r2,r4
 8007978:	00000206 	br	8007984 <strlen+0x20>
 800797c:	10c00007 	ldb	r3,0(r2)
 8007980:	18001826 	beq	r3,zero,80079e4 <strlen+0x80>
 8007984:	10800044 	addi	r2,r2,1
 8007988:	10c000cc 	andi	r3,r2,3
 800798c:	183ffb1e 	bne	r3,zero,800797c <__alt_data_end+0xfc00797c>
 8007990:	10c00017 	ldw	r3,0(r2)
 8007994:	01ffbff4 	movhi	r7,65279
 8007998:	39ffbfc4 	addi	r7,r7,-257
 800799c:	00ca303a 	nor	r5,zero,r3
 80079a0:	01a02074 	movhi	r6,32897
 80079a4:	19c7883a 	add	r3,r3,r7
 80079a8:	31a02004 	addi	r6,r6,-32640
 80079ac:	1946703a 	and	r3,r3,r5
 80079b0:	1986703a 	and	r3,r3,r6
 80079b4:	1800091e 	bne	r3,zero,80079dc <strlen+0x78>
 80079b8:	10800104 	addi	r2,r2,4
 80079bc:	10c00017 	ldw	r3,0(r2)
 80079c0:	19cb883a 	add	r5,r3,r7
 80079c4:	00c6303a 	nor	r3,zero,r3
 80079c8:	28c6703a 	and	r3,r5,r3
 80079cc:	1986703a 	and	r3,r3,r6
 80079d0:	183ff926 	beq	r3,zero,80079b8 <__alt_data_end+0xfc0079b8>
 80079d4:	00000106 	br	80079dc <strlen+0x78>
 80079d8:	10800044 	addi	r2,r2,1
 80079dc:	10c00007 	ldb	r3,0(r2)
 80079e0:	183ffd1e 	bne	r3,zero,80079d8 <__alt_data_end+0xfc0079d8>
 80079e4:	1105c83a 	sub	r2,r2,r4
 80079e8:	f800283a 	ret
 80079ec:	2005883a 	mov	r2,r4
 80079f0:	003fe706 	br	8007990 <__alt_data_end+0xfc007990>
 80079f4:	0005883a 	mov	r2,zero
 80079f8:	f800283a 	ret

080079fc <strtok>:
 80079fc:	008200b4 	movhi	r2,2050
 8007a00:	1094e104 	addi	r2,r2,21380
 8007a04:	11800017 	ldw	r6,0(r2)
 8007a08:	01c00044 	movi	r7,1
 8007a0c:	31801704 	addi	r6,r6,92
 8007a10:	8007a141 	jmpi	8007a14 <__strtok_r>

08007a14 <__strtok_r>:
 8007a14:	20001e26 	beq	r4,zero,8007a90 <__strtok_r+0x7c>
 8007a18:	2005883a 	mov	r2,r4
 8007a1c:	22400007 	ldb	r9,0(r4)
 8007a20:	2807883a 	mov	r3,r5
 8007a24:	21000044 	addi	r4,r4,1
 8007a28:	00000106 	br	8007a30 <__strtok_r+0x1c>
 8007a2c:	4a001126 	beq	r9,r8,8007a74 <__strtok_r+0x60>
 8007a30:	1a000007 	ldb	r8,0(r3)
 8007a34:	18c00044 	addi	r3,r3,1
 8007a38:	403ffc1e 	bne	r8,zero,8007a2c <__alt_data_end+0xfc007a2c>
 8007a3c:	48001826 	beq	r9,zero,8007aa0 <__strtok_r+0x8c>
 8007a40:	2013883a 	mov	r9,r4
 8007a44:	22000007 	ldb	r8,0(r4)
 8007a48:	2807883a 	mov	r3,r5
 8007a4c:	21000044 	addi	r4,r4,1
 8007a50:	00000106 	br	8007a58 <__strtok_r+0x44>
 8007a54:	383ffa26 	beq	r7,zero,8007a40 <__alt_data_end+0xfc007a40>
 8007a58:	19c00007 	ldb	r7,0(r3)
 8007a5c:	18c00044 	addi	r3,r3,1
 8007a60:	3a3ffc1e 	bne	r7,r8,8007a54 <__alt_data_end+0xfc007a54>
 8007a64:	40000726 	beq	r8,zero,8007a84 <__strtok_r+0x70>
 8007a68:	48000005 	stb	zero,0(r9)
 8007a6c:	31000015 	stw	r4,0(r6)
 8007a70:	f800283a 	ret
 8007a74:	383fe81e 	bne	r7,zero,8007a18 <__alt_data_end+0xfc007a18>
 8007a78:	31000015 	stw	r4,0(r6)
 8007a7c:	10000005 	stb	zero,0(r2)
 8007a80:	f800283a 	ret
 8007a84:	0009883a 	mov	r4,zero
 8007a88:	31000015 	stw	r4,0(r6)
 8007a8c:	f800283a 	ret
 8007a90:	31000017 	ldw	r4,0(r6)
 8007a94:	203fe01e 	bne	r4,zero,8007a18 <__alt_data_end+0xfc007a18>
 8007a98:	0005883a 	mov	r2,zero
 8007a9c:	f800283a 	ret
 8007aa0:	30000015 	stw	zero,0(r6)
 8007aa4:	0005883a 	mov	r2,zero
 8007aa8:	f800283a 	ret

08007aac <strtok_r>:
 8007aac:	01c00044 	movi	r7,1
 8007ab0:	8007a141 	jmpi	8007a14 <__strtok_r>

08007ab4 <___svfprintf_internal_r>:
 8007ab4:	deffb504 	addi	sp,sp,-300
 8007ab8:	dfc04a15 	stw	ra,296(sp)
 8007abc:	dd804715 	stw	r22,284(sp)
 8007ac0:	d9002f15 	stw	r4,188(sp)
 8007ac4:	282d883a 	mov	r22,r5
 8007ac8:	d9802915 	stw	r6,164(sp)
 8007acc:	d9c02d15 	stw	r7,180(sp)
 8007ad0:	df004915 	stw	fp,292(sp)
 8007ad4:	ddc04815 	stw	r23,288(sp)
 8007ad8:	dd404615 	stw	r21,280(sp)
 8007adc:	dd004515 	stw	r20,276(sp)
 8007ae0:	dcc04415 	stw	r19,272(sp)
 8007ae4:	dc804315 	stw	r18,268(sp)
 8007ae8:	dc404215 	stw	r17,264(sp)
 8007aec:	dc004115 	stw	r16,260(sp)
 8007af0:	800e84c0 	call	800e84c <_localeconv_r>
 8007af4:	10800017 	ldw	r2,0(r2)
 8007af8:	1009883a 	mov	r4,r2
 8007afc:	d8803515 	stw	r2,212(sp)
 8007b00:	80079640 	call	8007964 <strlen>
 8007b04:	d8803915 	stw	r2,228(sp)
 8007b08:	b080030b 	ldhu	r2,12(r22)
 8007b0c:	1080200c 	andi	r2,r2,128
 8007b10:	10000226 	beq	r2,zero,8007b1c <___svfprintf_internal_r+0x68>
 8007b14:	b0800417 	ldw	r2,16(r22)
 8007b18:	10067426 	beq	r2,zero,80094ec <___svfprintf_internal_r+0x1a38>
 8007b1c:	d9001dc4 	addi	r4,sp,119
 8007b20:	ddc01e04 	addi	r23,sp,120
 8007b24:	d9400404 	addi	r5,sp,16
 8007b28:	050200b4 	movhi	r20,2050
 8007b2c:	b905c83a 	sub	r2,r23,r4
 8007b30:	a50da284 	addi	r20,r20,13962
 8007b34:	d9002815 	stw	r4,160(sp)
 8007b38:	d9401e15 	stw	r5,120(sp)
 8007b3c:	d8002015 	stw	zero,128(sp)
 8007b40:	d8001f15 	stw	zero,124(sp)
 8007b44:	d8003315 	stw	zero,204(sp)
 8007b48:	d8003715 	stw	zero,220(sp)
 8007b4c:	d8003815 	stw	zero,224(sp)
 8007b50:	d8003b15 	stw	zero,236(sp)
 8007b54:	d8003a15 	stw	zero,232(sp)
 8007b58:	d8003015 	stw	zero,192(sp)
 8007b5c:	2811883a 	mov	r8,r5
 8007b60:	d8803d15 	stw	r2,244(sp)
 8007b64:	d8c02917 	ldw	r3,164(sp)
 8007b68:	18800007 	ldb	r2,0(r3)
 8007b6c:	1001fa26 	beq	r2,zero,8008358 <___svfprintf_internal_r+0x8a4>
 8007b70:	00c00944 	movi	r3,37
 8007b74:	dc002917 	ldw	r16,164(sp)
 8007b78:	10c0021e 	bne	r2,r3,8007b84 <___svfprintf_internal_r+0xd0>
 8007b7c:	00001606 	br	8007bd8 <___svfprintf_internal_r+0x124>
 8007b80:	10c08526 	beq	r2,r3,8007d98 <___svfprintf_internal_r+0x2e4>
 8007b84:	84000044 	addi	r16,r16,1
 8007b88:	80800007 	ldb	r2,0(r16)
 8007b8c:	103ffc1e 	bne	r2,zero,8007b80 <__alt_data_end+0xfc007b80>
 8007b90:	d9002917 	ldw	r4,164(sp)
 8007b94:	8123c83a 	sub	r17,r16,r4
 8007b98:	88000f26 	beq	r17,zero,8007bd8 <___svfprintf_internal_r+0x124>
 8007b9c:	d8802917 	ldw	r2,164(sp)
 8007ba0:	d8c02017 	ldw	r3,128(sp)
 8007ba4:	44400115 	stw	r17,4(r8)
 8007ba8:	40800015 	stw	r2,0(r8)
 8007bac:	d8801f17 	ldw	r2,124(sp)
 8007bb0:	1c47883a 	add	r3,r3,r17
 8007bb4:	d8c02015 	stw	r3,128(sp)
 8007bb8:	10800044 	addi	r2,r2,1
 8007bbc:	d8801f15 	stw	r2,124(sp)
 8007bc0:	00c001c4 	movi	r3,7
 8007bc4:	18807716 	blt	r3,r2,8007da4 <___svfprintf_internal_r+0x2f0>
 8007bc8:	42000204 	addi	r8,r8,8
 8007bcc:	d8c03017 	ldw	r3,192(sp)
 8007bd0:	1c47883a 	add	r3,r3,r17
 8007bd4:	d8c03015 	stw	r3,192(sp)
 8007bd8:	80800007 	ldb	r2,0(r16)
 8007bdc:	10007826 	beq	r2,zero,8007dc0 <___svfprintf_internal_r+0x30c>
 8007be0:	80800044 	addi	r2,r16,1
 8007be4:	84000047 	ldb	r16,1(r16)
 8007be8:	0027883a 	mov	r19,zero
 8007bec:	0039883a 	mov	fp,zero
 8007bf0:	dcc02a05 	stb	r19,168(sp)
 8007bf4:	d8002785 	stb	zero,158(sp)
 8007bf8:	027fffc4 	movi	r9,-1
 8007bfc:	d8002e15 	stw	zero,184(sp)
 8007c00:	04401604 	movi	r17,88
 8007c04:	04800244 	movi	r18,9
 8007c08:	da002915 	stw	r8,164(sp)
 8007c0c:	e027883a 	mov	r19,fp
 8007c10:	17000044 	addi	fp,r2,1
 8007c14:	80bff804 	addi	r2,r16,-32
 8007c18:	88830036 	bltu	r17,r2,800881c <___svfprintf_internal_r+0xd68>
 8007c1c:	100490ba 	slli	r2,r2,2
 8007c20:	01020034 	movhi	r4,2048
 8007c24:	211f0d04 	addi	r4,r4,31796
 8007c28:	1105883a 	add	r2,r2,r4
 8007c2c:	10800017 	ldw	r2,0(r2)
 8007c30:	1000683a 	jmp	r2
 8007c34:	08008660 	cmpeqi	zero,at,537
 8007c38:	0800881c 	xori	zero,at,544
 8007c3c:	0800881c 	xori	zero,at,544
 8007c40:	0800867c 	xorhi	zero,at,537
 8007c44:	0800881c 	xori	zero,at,544
 8007c48:	0800881c 	xori	zero,at,544
 8007c4c:	0800881c 	xori	zero,at,544
 8007c50:	0800881c 	xori	zero,at,544
 8007c54:	0800881c 	xori	zero,at,544
 8007c58:	0800881c 	xori	zero,at,544
 8007c5c:	08008768 	cmpgeui	zero,at,541
 8007c60:	08008790 	cmplti	zero,at,542
 8007c64:	0800881c 	xori	zero,at,544
 8007c68:	08007e20 	cmpeqi	zero,at,504
 8007c6c:	08007e30 	cmpltui	zero,at,504
 8007c70:	0800881c 	xori	zero,at,544
 8007c74:	08007e80 	call	8007e8 <__alt_mem_sdram-0x77ff818>
 8007c78:	08007e90 	cmplti	zero,at,506
 8007c7c:	08007e90 	cmplti	zero,at,506
 8007c80:	08007e90 	cmplti	zero,at,506
 8007c84:	08007e90 	cmplti	zero,at,506
 8007c88:	08007e90 	cmplti	zero,at,506
 8007c8c:	08007e90 	cmplti	zero,at,506
 8007c90:	08007e90 	cmplti	zero,at,506
 8007c94:	08007e90 	cmplti	zero,at,506
 8007c98:	08007e90 	cmplti	zero,at,506
 8007c9c:	0800881c 	xori	zero,at,544
 8007ca0:	0800881c 	xori	zero,at,544
 8007ca4:	0800881c 	xori	zero,at,544
 8007ca8:	0800881c 	xori	zero,at,544
 8007cac:	0800881c 	xori	zero,at,544
 8007cb0:	0800881c 	xori	zero,at,544
 8007cb4:	0800881c 	xori	zero,at,544
 8007cb8:	0800881c 	xori	zero,at,544
 8007cbc:	0800881c 	xori	zero,at,544
 8007cc0:	0800881c 	xori	zero,at,544
 8007cc4:	08007ed4 	ori	zero,at,507
 8007cc8:	08008360 	cmpeqi	zero,at,525
 8007ccc:	0800881c 	xori	zero,at,544
 8007cd0:	08008360 	cmpeqi	zero,at,525
 8007cd4:	0800881c 	xori	zero,at,544
 8007cd8:	0800881c 	xori	zero,at,544
 8007cdc:	0800881c 	xori	zero,at,544
 8007ce0:	0800881c 	xori	zero,at,544
 8007ce4:	08008408 	cmpgei	zero,at,528
 8007ce8:	0800881c 	xori	zero,at,544
 8007cec:	0800881c 	xori	zero,at,544
 8007cf0:	08008418 	cmpnei	zero,at,528
 8007cf4:	0800881c 	xori	zero,at,544
 8007cf8:	0800881c 	xori	zero,at,544
 8007cfc:	0800881c 	xori	zero,at,544
 8007d00:	0800881c 	xori	zero,at,544
 8007d04:	0800881c 	xori	zero,at,544
 8007d08:	08008458 	cmpnei	zero,at,529
 8007d0c:	0800881c 	xori	zero,at,544
 8007d10:	0800881c 	xori	zero,at,544
 8007d14:	080085ac 	andhi	zero,at,534
 8007d18:	0800881c 	xori	zero,at,544
 8007d1c:	0800881c 	xori	zero,at,544
 8007d20:	0800881c 	xori	zero,at,544
 8007d24:	0800881c 	xori	zero,at,544
 8007d28:	0800881c 	xori	zero,at,544
 8007d2c:	0800881c 	xori	zero,at,544
 8007d30:	0800881c 	xori	zero,at,544
 8007d34:	0800881c 	xori	zero,at,544
 8007d38:	0800881c 	xori	zero,at,544
 8007d3c:	0800881c 	xori	zero,at,544
 8007d40:	08008614 	ori	zero,at,536
 8007d44:	080084d8 	cmpnei	zero,at,531
 8007d48:	08008360 	cmpeqi	zero,at,525
 8007d4c:	08008360 	cmpeqi	zero,at,525
 8007d50:	08008360 	cmpeqi	zero,at,525
 8007d54:	08008544 	addi	zero,at,533
 8007d58:	080084d8 	cmpnei	zero,at,531
 8007d5c:	0800881c 	xori	zero,at,544
 8007d60:	0800881c 	xori	zero,at,544
 8007d64:	08008554 	ori	zero,at,533
 8007d68:	0800881c 	xori	zero,at,544
 8007d6c:	0800856c 	andhi	zero,at,533
 8007d70:	080087e0 	cmpeqi	zero,at,543
 8007d74:	0800848c 	andi	zero,at,530
 8007d78:	08008758 	cmpnei	zero,at,541
 8007d7c:	0800881c 	xori	zero,at,544
 8007d80:	0800868c 	andi	zero,at,538
 8007d84:	0800881c 	xori	zero,at,544
 8007d88:	080087a4 	muli	zero,at,542
 8007d8c:	0800881c 	xori	zero,at,544
 8007d90:	0800881c 	xori	zero,at,544
 8007d94:	0800870c 	andi	zero,at,540
 8007d98:	d9402917 	ldw	r5,164(sp)
 8007d9c:	8163c83a 	sub	r17,r16,r5
 8007da0:	003f7d06 	br	8007b98 <__alt_data_end+0xfc007b98>
 8007da4:	d9002f17 	ldw	r4,188(sp)
 8007da8:	b00b883a 	mov	r5,r22
 8007dac:	b80d883a 	mov	r6,r23
 8007db0:	80105dc0 	call	80105dc <__ssprint_r>
 8007db4:	1000081e 	bne	r2,zero,8007dd8 <___svfprintf_internal_r+0x324>
 8007db8:	da000404 	addi	r8,sp,16
 8007dbc:	003f8306 	br	8007bcc <__alt_data_end+0xfc007bcc>
 8007dc0:	d8802017 	ldw	r2,128(sp)
 8007dc4:	10000426 	beq	r2,zero,8007dd8 <___svfprintf_internal_r+0x324>
 8007dc8:	d9002f17 	ldw	r4,188(sp)
 8007dcc:	b00b883a 	mov	r5,r22
 8007dd0:	d9801e04 	addi	r6,sp,120
 8007dd4:	80105dc0 	call	80105dc <__ssprint_r>
 8007dd8:	b080030b 	ldhu	r2,12(r22)
 8007ddc:	1080100c 	andi	r2,r2,64
 8007de0:	10000d1e 	bne	r2,zero,8007e18 <___svfprintf_internal_r+0x364>
 8007de4:	d8803017 	ldw	r2,192(sp)
 8007de8:	dfc04a17 	ldw	ra,296(sp)
 8007dec:	df004917 	ldw	fp,292(sp)
 8007df0:	ddc04817 	ldw	r23,288(sp)
 8007df4:	dd804717 	ldw	r22,284(sp)
 8007df8:	dd404617 	ldw	r21,280(sp)
 8007dfc:	dd004517 	ldw	r20,276(sp)
 8007e00:	dcc04417 	ldw	r19,272(sp)
 8007e04:	dc804317 	ldw	r18,268(sp)
 8007e08:	dc404217 	ldw	r17,264(sp)
 8007e0c:	dc004117 	ldw	r16,260(sp)
 8007e10:	dec04b04 	addi	sp,sp,300
 8007e14:	f800283a 	ret
 8007e18:	00bfffc4 	movi	r2,-1
 8007e1c:	003ff206 	br	8007de8 <__alt_data_end+0xfc007de8>
 8007e20:	e005883a 	mov	r2,fp
 8007e24:	9cc00114 	ori	r19,r19,4
 8007e28:	e4000007 	ldb	r16,0(fp)
 8007e2c:	003f7806 	br	8007c10 <__alt_data_end+0xfc007c10>
 8007e30:	e4000007 	ldb	r16,0(fp)
 8007e34:	01000a84 	movi	r4,42
 8007e38:	e0800044 	addi	r2,fp,1
 8007e3c:	81071026 	beq	r16,r4,8009a80 <___svfprintf_internal_r+0x1fcc>
 8007e40:	857ff404 	addi	r21,r16,-48
 8007e44:	1039883a 	mov	fp,r2
 8007e48:	0013883a 	mov	r9,zero
 8007e4c:	957f7136 	bltu	r18,r21,8007c14 <__alt_data_end+0xfc007c14>
 8007e50:	0009883a 	mov	r4,zero
 8007e54:	01400284 	movi	r5,10
 8007e58:	8004c100 	call	8004c10 <__mulsi3>
 8007e5c:	e4000007 	ldb	r16,0(fp)
 8007e60:	a889883a 	add	r4,r21,r2
 8007e64:	e7000044 	addi	fp,fp,1
 8007e68:	857ff404 	addi	r21,r16,-48
 8007e6c:	957ff92e 	bgeu	r18,r21,8007e54 <__alt_data_end+0xfc007e54>
 8007e70:	2013883a 	mov	r9,r4
 8007e74:	203f670e 	bge	r4,zero,8007c14 <__alt_data_end+0xfc007c14>
 8007e78:	027fffc4 	movi	r9,-1
 8007e7c:	003f6506 	br	8007c14 <__alt_data_end+0xfc007c14>
 8007e80:	9cc02014 	ori	r19,r19,128
 8007e84:	e005883a 	mov	r2,fp
 8007e88:	e4000007 	ldb	r16,0(fp)
 8007e8c:	003f6006 	br	8007c10 <__alt_data_end+0xfc007c10>
 8007e90:	857ff404 	addi	r21,r16,-48
 8007e94:	d8002e15 	stw	zero,184(sp)
 8007e98:	e021883a 	mov	r16,fp
 8007e9c:	0009883a 	mov	r4,zero
 8007ea0:	da402b15 	stw	r9,172(sp)
 8007ea4:	01400284 	movi	r5,10
 8007ea8:	8004c100 	call	8004c10 <__mulsi3>
 8007eac:	81400007 	ldb	r5,0(r16)
 8007eb0:	1549883a 	add	r4,r2,r21
 8007eb4:	e7000044 	addi	fp,fp,1
 8007eb8:	2d7ff404 	addi	r21,r5,-48
 8007ebc:	e021883a 	mov	r16,fp
 8007ec0:	957ff82e 	bgeu	r18,r21,8007ea4 <__alt_data_end+0xfc007ea4>
 8007ec4:	2821883a 	mov	r16,r5
 8007ec8:	d9002e15 	stw	r4,184(sp)
 8007ecc:	da402b17 	ldw	r9,172(sp)
 8007ed0:	003f5006 	br	8007c14 <__alt_data_end+0xfc007c14>
 8007ed4:	da002917 	ldw	r8,164(sp)
 8007ed8:	df002915 	stw	fp,164(sp)
 8007edc:	9839883a 	mov	fp,r19
 8007ee0:	dcc02a03 	ldbu	r19,168(sp)
 8007ee4:	e7000414 	ori	fp,fp,16
 8007ee8:	e080080c 	andi	r2,fp,32
 8007eec:	dcc02785 	stb	r19,158(sp)
 8007ef0:	d8c02d17 	ldw	r3,180(sp)
 8007ef4:	10018026 	beq	r2,zero,80084f8 <___svfprintf_internal_r+0xa44>
 8007ef8:	d9002d17 	ldw	r4,180(sp)
 8007efc:	18800117 	ldw	r2,4(r3)
 8007f00:	1c800017 	ldw	r18,0(r3)
 8007f04:	21000204 	addi	r4,r4,8
 8007f08:	d9002d15 	stw	r4,180(sp)
 8007f0c:	102b883a 	mov	r21,r2
 8007f10:	10018216 	blt	r2,zero,800851c <___svfprintf_internal_r+0xa68>
 8007f14:	dcc02783 	ldbu	r19,158(sp)
 8007f18:	da403215 	stw	r9,200(sp)
 8007f1c:	00800044 	movi	r2,1
 8007f20:	9546b03a 	or	r3,r18,r21
 8007f24:	48000216 	blt	r9,zero,8007f30 <___svfprintf_internal_r+0x47c>
 8007f28:	013fdfc4 	movi	r4,-129
 8007f2c:	e138703a 	and	fp,fp,r4
 8007f30:	1802471e 	bne	r3,zero,8008850 <___svfprintf_internal_r+0xd9c>
 8007f34:	48035226 	beq	r9,zero,8008c80 <___svfprintf_internal_r+0x11cc>
 8007f38:	10803fcc 	andi	r2,r2,255
 8007f3c:	00c00044 	movi	r3,1
 8007f40:	10c26626 	beq	r2,r3,80088dc <___svfprintf_internal_r+0xe28>
 8007f44:	00c00084 	movi	r3,2
 8007f48:	10c2e826 	beq	r2,r3,8008aec <___svfprintf_internal_r+0x1038>
 8007f4c:	b807883a 	mov	r3,r23
 8007f50:	9008d0fa 	srli	r4,r18,3
 8007f54:	a80a977a 	slli	r5,r21,29
 8007f58:	a82ad0fa 	srli	r21,r21,3
 8007f5c:	948001cc 	andi	r18,r18,7
 8007f60:	90800c04 	addi	r2,r18,48
 8007f64:	18ffffc4 	addi	r3,r3,-1
 8007f68:	2924b03a 	or	r18,r5,r4
 8007f6c:	18800005 	stb	r2,0(r3)
 8007f70:	9548b03a 	or	r4,r18,r21
 8007f74:	203ff61e 	bne	r4,zero,8007f50 <__alt_data_end+0xfc007f50>
 8007f78:	e100004c 	andi	r4,fp,1
 8007f7c:	d8c03115 	stw	r3,196(sp)
 8007f80:	2002e826 	beq	r4,zero,8008b24 <___svfprintf_internal_r+0x1070>
 8007f84:	10803fcc 	andi	r2,r2,255
 8007f88:	1080201c 	xori	r2,r2,128
 8007f8c:	10bfe004 	addi	r2,r2,-128
 8007f90:	01000c04 	movi	r4,48
 8007f94:	11056d26 	beq	r2,r4,800954c <___svfprintf_internal_r+0x1a98>
 8007f98:	d9403117 	ldw	r5,196(sp)
 8007f9c:	193fffc5 	stb	r4,-1(r3)
 8007fa0:	297fffc4 	addi	r5,r5,-1
 8007fa4:	d9403115 	stw	r5,196(sp)
 8007fa8:	b963c83a 	sub	r17,r23,r5
 8007fac:	8805883a 	mov	r2,r17
 8007fb0:	8a40010e 	bge	r17,r9,8007fb8 <___svfprintf_internal_r+0x504>
 8007fb4:	4805883a 	mov	r2,r9
 8007fb8:	d8802a15 	stw	r2,168(sp)
 8007fbc:	d8003415 	stw	zero,208(sp)
 8007fc0:	98803fcc 	andi	r2,r19,255
 8007fc4:	1080201c 	xori	r2,r2,128
 8007fc8:	10bfe004 	addi	r2,r2,-128
 8007fcc:	10000326 	beq	r2,zero,8007fdc <___svfprintf_internal_r+0x528>
 8007fd0:	d8c02a17 	ldw	r3,168(sp)
 8007fd4:	18c00044 	addi	r3,r3,1
 8007fd8:	d8c02a15 	stw	r3,168(sp)
 8007fdc:	e0c0008c 	andi	r3,fp,2
 8007fe0:	d8c02b15 	stw	r3,172(sp)
 8007fe4:	18000326 	beq	r3,zero,8007ff4 <___svfprintf_internal_r+0x540>
 8007fe8:	d8c02a17 	ldw	r3,168(sp)
 8007fec:	18c00084 	addi	r3,r3,2
 8007ff0:	d8c02a15 	stw	r3,168(sp)
 8007ff4:	e0c0210c 	andi	r3,fp,132
 8007ff8:	d8c02c15 	stw	r3,176(sp)
 8007ffc:	1802121e 	bne	r3,zero,8008848 <___svfprintf_internal_r+0xd94>
 8008000:	d9002e17 	ldw	r4,184(sp)
 8008004:	d8c02a17 	ldw	r3,168(sp)
 8008008:	20ebc83a 	sub	r21,r4,r3
 800800c:	05420e0e 	bge	zero,r21,8008848 <___svfprintf_internal_r+0xd94>
 8008010:	02400404 	movi	r9,16
 8008014:	d8c02017 	ldw	r3,128(sp)
 8008018:	d8801f17 	ldw	r2,124(sp)
 800801c:	4d45aa0e 	bge	r9,r21,80096c8 <___svfprintf_internal_r+0x1c14>
 8008020:	014200b4 	movhi	r5,2050
 8008024:	a809883a 	mov	r4,r21
 8008028:	294da684 	addi	r5,r5,13978
 800802c:	dc003c15 	stw	r16,240(sp)
 8008030:	882b883a 	mov	r21,r17
 8008034:	d9403615 	stw	r5,216(sp)
 8008038:	4827883a 	mov	r19,r9
 800803c:	048001c4 	movi	r18,7
 8008040:	dc002f17 	ldw	r16,188(sp)
 8008044:	2023883a 	mov	r17,r4
 8008048:	00000306 	br	8008058 <___svfprintf_internal_r+0x5a4>
 800804c:	8c7ffc04 	addi	r17,r17,-16
 8008050:	42000204 	addi	r8,r8,8
 8008054:	9c40130e 	bge	r19,r17,80080a4 <___svfprintf_internal_r+0x5f0>
 8008058:	010200b4 	movhi	r4,2050
 800805c:	18c00404 	addi	r3,r3,16
 8008060:	10800044 	addi	r2,r2,1
 8008064:	210da684 	addi	r4,r4,13978
 8008068:	41000015 	stw	r4,0(r8)
 800806c:	44c00115 	stw	r19,4(r8)
 8008070:	d8c02015 	stw	r3,128(sp)
 8008074:	d8801f15 	stw	r2,124(sp)
 8008078:	90bff40e 	bge	r18,r2,800804c <__alt_data_end+0xfc00804c>
 800807c:	8009883a 	mov	r4,r16
 8008080:	b00b883a 	mov	r5,r22
 8008084:	b80d883a 	mov	r6,r23
 8008088:	80105dc0 	call	80105dc <__ssprint_r>
 800808c:	103f521e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008090:	8c7ffc04 	addi	r17,r17,-16
 8008094:	d8c02017 	ldw	r3,128(sp)
 8008098:	d8801f17 	ldw	r2,124(sp)
 800809c:	da000404 	addi	r8,sp,16
 80080a0:	9c7fed16 	blt	r19,r17,8008058 <__alt_data_end+0xfc008058>
 80080a4:	dc003c17 	ldw	r16,240(sp)
 80080a8:	8809883a 	mov	r4,r17
 80080ac:	a823883a 	mov	r17,r21
 80080b0:	202b883a 	mov	r21,r4
 80080b4:	d9403617 	ldw	r5,216(sp)
 80080b8:	a8c7883a 	add	r3,r21,r3
 80080bc:	10800044 	addi	r2,r2,1
 80080c0:	41400015 	stw	r5,0(r8)
 80080c4:	45400115 	stw	r21,4(r8)
 80080c8:	d8c02015 	stw	r3,128(sp)
 80080cc:	d8801f15 	stw	r2,124(sp)
 80080d0:	010001c4 	movi	r4,7
 80080d4:	20834416 	blt	r4,r2,8008de8 <___svfprintf_internal_r+0x1334>
 80080d8:	d8802787 	ldb	r2,158(sp)
 80080dc:	42000204 	addi	r8,r8,8
 80080e0:	10000c26 	beq	r2,zero,8008114 <___svfprintf_internal_r+0x660>
 80080e4:	d8801f17 	ldw	r2,124(sp)
 80080e8:	d9002784 	addi	r4,sp,158
 80080ec:	18c00044 	addi	r3,r3,1
 80080f0:	10800044 	addi	r2,r2,1
 80080f4:	41000015 	stw	r4,0(r8)
 80080f8:	01000044 	movi	r4,1
 80080fc:	41000115 	stw	r4,4(r8)
 8008100:	d8c02015 	stw	r3,128(sp)
 8008104:	d8801f15 	stw	r2,124(sp)
 8008108:	010001c4 	movi	r4,7
 800810c:	2082ee16 	blt	r4,r2,8008cc8 <___svfprintf_internal_r+0x1214>
 8008110:	42000204 	addi	r8,r8,8
 8008114:	d8802b17 	ldw	r2,172(sp)
 8008118:	10000c26 	beq	r2,zero,800814c <___svfprintf_internal_r+0x698>
 800811c:	d8801f17 	ldw	r2,124(sp)
 8008120:	d9002704 	addi	r4,sp,156
 8008124:	18c00084 	addi	r3,r3,2
 8008128:	10800044 	addi	r2,r2,1
 800812c:	41000015 	stw	r4,0(r8)
 8008130:	01000084 	movi	r4,2
 8008134:	41000115 	stw	r4,4(r8)
 8008138:	d8c02015 	stw	r3,128(sp)
 800813c:	d8801f15 	stw	r2,124(sp)
 8008140:	010001c4 	movi	r4,7
 8008144:	2082e816 	blt	r4,r2,8008ce8 <___svfprintf_internal_r+0x1234>
 8008148:	42000204 	addi	r8,r8,8
 800814c:	d9002c17 	ldw	r4,176(sp)
 8008150:	00802004 	movi	r2,128
 8008154:	20823126 	beq	r4,r2,8008a1c <___svfprintf_internal_r+0xf68>
 8008158:	d9403217 	ldw	r5,200(sp)
 800815c:	2c67c83a 	sub	r19,r5,r17
 8008160:	04c02f0e 	bge	zero,r19,8008220 <___svfprintf_internal_r+0x76c>
 8008164:	05400404 	movi	r21,16
 8008168:	d8801f17 	ldw	r2,124(sp)
 800816c:	acc4260e 	bge	r21,r19,8009208 <___svfprintf_internal_r+0x1754>
 8008170:	014200b4 	movhi	r5,2050
 8008174:	9809883a 	mov	r4,r19
 8008178:	294da284 	addi	r5,r5,13962
 800817c:	dc002c15 	stw	r16,176(sp)
 8008180:	8827883a 	mov	r19,r17
 8008184:	d9402b15 	stw	r5,172(sp)
 8008188:	048001c4 	movi	r18,7
 800818c:	dc002f17 	ldw	r16,188(sp)
 8008190:	2023883a 	mov	r17,r4
 8008194:	00000306 	br	80081a4 <___svfprintf_internal_r+0x6f0>
 8008198:	8c7ffc04 	addi	r17,r17,-16
 800819c:	42000204 	addi	r8,r8,8
 80081a0:	ac40110e 	bge	r21,r17,80081e8 <___svfprintf_internal_r+0x734>
 80081a4:	18c00404 	addi	r3,r3,16
 80081a8:	10800044 	addi	r2,r2,1
 80081ac:	45000015 	stw	r20,0(r8)
 80081b0:	45400115 	stw	r21,4(r8)
 80081b4:	d8c02015 	stw	r3,128(sp)
 80081b8:	d8801f15 	stw	r2,124(sp)
 80081bc:	90bff60e 	bge	r18,r2,8008198 <__alt_data_end+0xfc008198>
 80081c0:	8009883a 	mov	r4,r16
 80081c4:	b00b883a 	mov	r5,r22
 80081c8:	b80d883a 	mov	r6,r23
 80081cc:	80105dc0 	call	80105dc <__ssprint_r>
 80081d0:	103f011e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 80081d4:	8c7ffc04 	addi	r17,r17,-16
 80081d8:	d8c02017 	ldw	r3,128(sp)
 80081dc:	d8801f17 	ldw	r2,124(sp)
 80081e0:	da000404 	addi	r8,sp,16
 80081e4:	ac7fef16 	blt	r21,r17,80081a4 <__alt_data_end+0xfc0081a4>
 80081e8:	dc002c17 	ldw	r16,176(sp)
 80081ec:	8809883a 	mov	r4,r17
 80081f0:	9823883a 	mov	r17,r19
 80081f4:	2027883a 	mov	r19,r4
 80081f8:	d9002b17 	ldw	r4,172(sp)
 80081fc:	1cc7883a 	add	r3,r3,r19
 8008200:	10800044 	addi	r2,r2,1
 8008204:	41000015 	stw	r4,0(r8)
 8008208:	44c00115 	stw	r19,4(r8)
 800820c:	d8c02015 	stw	r3,128(sp)
 8008210:	d8801f15 	stw	r2,124(sp)
 8008214:	010001c4 	movi	r4,7
 8008218:	2082a316 	blt	r4,r2,8008ca8 <___svfprintf_internal_r+0x11f4>
 800821c:	42000204 	addi	r8,r8,8
 8008220:	e080400c 	andi	r2,fp,256
 8008224:	1001b31e 	bne	r2,zero,80088f4 <___svfprintf_internal_r+0xe40>
 8008228:	d8801f17 	ldw	r2,124(sp)
 800822c:	d9403117 	ldw	r5,196(sp)
 8008230:	1c47883a 	add	r3,r3,r17
 8008234:	10800044 	addi	r2,r2,1
 8008238:	41400015 	stw	r5,0(r8)
 800823c:	44400115 	stw	r17,4(r8)
 8008240:	d8c02015 	stw	r3,128(sp)
 8008244:	d8801f15 	stw	r2,124(sp)
 8008248:	010001c4 	movi	r4,7
 800824c:	20827e16 	blt	r4,r2,8008c48 <___svfprintf_internal_r+0x1194>
 8008250:	42000204 	addi	r8,r8,8
 8008254:	e080010c 	andi	r2,fp,4
 8008258:	10003226 	beq	r2,zero,8008324 <___svfprintf_internal_r+0x870>
 800825c:	d8802e17 	ldw	r2,184(sp)
 8008260:	d9002a17 	ldw	r4,168(sp)
 8008264:	1121c83a 	sub	r16,r2,r4
 8008268:	04002e0e 	bge	zero,r16,8008324 <___svfprintf_internal_r+0x870>
 800826c:	04400404 	movi	r17,16
 8008270:	d8801f17 	ldw	r2,124(sp)
 8008274:	8c05550e 	bge	r17,r16,80097cc <___svfprintf_internal_r+0x1d18>
 8008278:	010200b4 	movhi	r4,2050
 800827c:	210da684 	addi	r4,r4,13978
 8008280:	d9003615 	stw	r4,216(sp)
 8008284:	048001c4 	movi	r18,7
 8008288:	dcc02f17 	ldw	r19,188(sp)
 800828c:	00000306 	br	800829c <___svfprintf_internal_r+0x7e8>
 8008290:	843ffc04 	addi	r16,r16,-16
 8008294:	42000204 	addi	r8,r8,8
 8008298:	8c00130e 	bge	r17,r16,80082e8 <___svfprintf_internal_r+0x834>
 800829c:	014200b4 	movhi	r5,2050
 80082a0:	18c00404 	addi	r3,r3,16
 80082a4:	10800044 	addi	r2,r2,1
 80082a8:	294da684 	addi	r5,r5,13978
 80082ac:	41400015 	stw	r5,0(r8)
 80082b0:	44400115 	stw	r17,4(r8)
 80082b4:	d8c02015 	stw	r3,128(sp)
 80082b8:	d8801f15 	stw	r2,124(sp)
 80082bc:	90bff40e 	bge	r18,r2,8008290 <__alt_data_end+0xfc008290>
 80082c0:	9809883a 	mov	r4,r19
 80082c4:	b00b883a 	mov	r5,r22
 80082c8:	b80d883a 	mov	r6,r23
 80082cc:	80105dc0 	call	80105dc <__ssprint_r>
 80082d0:	103ec11e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 80082d4:	843ffc04 	addi	r16,r16,-16
 80082d8:	d8c02017 	ldw	r3,128(sp)
 80082dc:	d8801f17 	ldw	r2,124(sp)
 80082e0:	da000404 	addi	r8,sp,16
 80082e4:	8c3fed16 	blt	r17,r16,800829c <__alt_data_end+0xfc00829c>
 80082e8:	d9003617 	ldw	r4,216(sp)
 80082ec:	1c07883a 	add	r3,r3,r16
 80082f0:	10800044 	addi	r2,r2,1
 80082f4:	41000015 	stw	r4,0(r8)
 80082f8:	44000115 	stw	r16,4(r8)
 80082fc:	d8c02015 	stw	r3,128(sp)
 8008300:	d8801f15 	stw	r2,124(sp)
 8008304:	010001c4 	movi	r4,7
 8008308:	2080060e 	bge	r4,r2,8008324 <___svfprintf_internal_r+0x870>
 800830c:	d9002f17 	ldw	r4,188(sp)
 8008310:	b00b883a 	mov	r5,r22
 8008314:	b80d883a 	mov	r6,r23
 8008318:	80105dc0 	call	80105dc <__ssprint_r>
 800831c:	103eae1e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008320:	d8c02017 	ldw	r3,128(sp)
 8008324:	df002a17 	ldw	fp,168(sp)
 8008328:	d9402e17 	ldw	r5,184(sp)
 800832c:	e140010e 	bge	fp,r5,8008334 <___svfprintf_internal_r+0x880>
 8008330:	2839883a 	mov	fp,r5
 8008334:	d8803017 	ldw	r2,192(sp)
 8008338:	1705883a 	add	r2,r2,fp
 800833c:	d8803015 	stw	r2,192(sp)
 8008340:	1802491e 	bne	r3,zero,8008c68 <___svfprintf_internal_r+0x11b4>
 8008344:	d8c02917 	ldw	r3,164(sp)
 8008348:	d8001f15 	stw	zero,124(sp)
 800834c:	da000404 	addi	r8,sp,16
 8008350:	18800007 	ldb	r2,0(r3)
 8008354:	103e061e 	bne	r2,zero,8007b70 <__alt_data_end+0xfc007b70>
 8008358:	dc002917 	ldw	r16,164(sp)
 800835c:	003e1e06 	br	8007bd8 <__alt_data_end+0xfc007bd8>
 8008360:	d9002d17 	ldw	r4,180(sp)
 8008364:	d9402d17 	ldw	r5,180(sp)
 8008368:	da002917 	ldw	r8,164(sp)
 800836c:	21000017 	ldw	r4,0(r4)
 8008370:	29400117 	ldw	r5,4(r5)
 8008374:	df002915 	stw	fp,164(sp)
 8008378:	9839883a 	mov	fp,r19
 800837c:	dcc02a03 	ldbu	r19,168(sp)
 8008380:	d9003715 	stw	r4,220(sp)
 8008384:	d9403815 	stw	r5,224(sp)
 8008388:	da004015 	stw	r8,256(sp)
 800838c:	da403f15 	stw	r9,252(sp)
 8008390:	dcc02785 	stb	r19,158(sp)
 8008394:	80103880 	call	8010388 <__fpclassifyd>
 8008398:	d8c02d17 	ldw	r3,180(sp)
 800839c:	04400044 	movi	r17,1
 80083a0:	da004017 	ldw	r8,256(sp)
 80083a4:	1c800204 	addi	r18,r3,8
 80083a8:	da403f17 	ldw	r9,252(sp)
 80083ac:	d9003717 	ldw	r4,220(sp)
 80083b0:	d9403817 	ldw	r5,224(sp)
 80083b4:	14433e1e 	bne	r2,r17,80090b0 <___svfprintf_internal_r+0x15fc>
 80083b8:	000d883a 	mov	r6,zero
 80083bc:	000f883a 	mov	r7,zero
 80083c0:	8014f840 	call	8014f84 <__ledf2>
 80083c4:	da004017 	ldw	r8,256(sp)
 80083c8:	10050c16 	blt	r2,zero,80097fc <___svfprintf_internal_r+0x1d48>
 80083cc:	dcc02783 	ldbu	r19,158(sp)
 80083d0:	008011c4 	movi	r2,71
 80083d4:	1404410e 	bge	r2,r16,80094dc <___svfprintf_internal_r+0x1a28>
 80083d8:	014200b4 	movhi	r5,2050
 80083dc:	294d9304 	addi	r5,r5,13900
 80083e0:	d9403115 	stw	r5,196(sp)
 80083e4:	00c000c4 	movi	r3,3
 80083e8:	00bfdfc4 	movi	r2,-129
 80083ec:	d8c02a15 	stw	r3,168(sp)
 80083f0:	e0b8703a 	and	fp,fp,r2
 80083f4:	dc802d15 	stw	r18,180(sp)
 80083f8:	1823883a 	mov	r17,r3
 80083fc:	d8003215 	stw	zero,200(sp)
 8008400:	d8003415 	stw	zero,208(sp)
 8008404:	003eee06 	br	8007fc0 <__alt_data_end+0xfc007fc0>
 8008408:	9cc00214 	ori	r19,r19,8
 800840c:	e005883a 	mov	r2,fp
 8008410:	e4000007 	ldb	r16,0(fp)
 8008414:	003dfe06 	br	8007c10 <__alt_data_end+0xfc007c10>
 8008418:	da002917 	ldw	r8,164(sp)
 800841c:	df002915 	stw	fp,164(sp)
 8008420:	9f000414 	ori	fp,r19,16
 8008424:	e080080c 	andi	r2,fp,32
 8008428:	1000f226 	beq	r2,zero,80087f4 <___svfprintf_internal_r+0xd40>
 800842c:	d9402d17 	ldw	r5,180(sp)
 8008430:	0005883a 	mov	r2,zero
 8008434:	2c800017 	ldw	r18,0(r5)
 8008438:	2d400117 	ldw	r21,4(r5)
 800843c:	29400204 	addi	r5,r5,8
 8008440:	d9402d15 	stw	r5,180(sp)
 8008444:	9546b03a 	or	r3,r18,r21
 8008448:	d8002785 	stb	zero,158(sp)
 800844c:	da403215 	stw	r9,200(sp)
 8008450:	0027883a 	mov	r19,zero
 8008454:	003eb306 	br	8007f24 <__alt_data_end+0xfc007f24>
 8008458:	da002917 	ldw	r8,164(sp)
 800845c:	df002915 	stw	fp,164(sp)
 8008460:	9f000414 	ori	fp,r19,16
 8008464:	e080080c 	andi	r2,fp,32
 8008468:	1000d326 	beq	r2,zero,80087b8 <___svfprintf_internal_r+0xd04>
 800846c:	d9002d17 	ldw	r4,180(sp)
 8008470:	00800044 	movi	r2,1
 8008474:	24800017 	ldw	r18,0(r4)
 8008478:	25400117 	ldw	r21,4(r4)
 800847c:	21000204 	addi	r4,r4,8
 8008480:	d9002d15 	stw	r4,180(sp)
 8008484:	9546b03a 	or	r3,r18,r21
 8008488:	003fef06 	br	8008448 <__alt_data_end+0xfc008448>
 800848c:	d9402d17 	ldw	r5,180(sp)
 8008490:	00800c04 	movi	r2,48
 8008494:	d8802705 	stb	r2,156(sp)
 8008498:	2c800017 	ldw	r18,0(r5)
 800849c:	00801e04 	movi	r2,120
 80084a0:	d8802745 	stb	r2,157(sp)
 80084a4:	008200b4 	movhi	r2,2050
 80084a8:	108d9b04 	addi	r2,r2,13932
 80084ac:	29400104 	addi	r5,r5,4
 80084b0:	da002917 	ldw	r8,164(sp)
 80084b4:	d8803b15 	stw	r2,236(sp)
 80084b8:	df002915 	stw	fp,164(sp)
 80084bc:	002b883a 	mov	r21,zero
 80084c0:	9f000094 	ori	fp,r19,2
 80084c4:	d9402d15 	stw	r5,180(sp)
 80084c8:	00800084 	movi	r2,2
 80084cc:	04001e04 	movi	r16,120
 80084d0:	9007883a 	mov	r3,r18
 80084d4:	003fdc06 	br	8008448 <__alt_data_end+0xfc008448>
 80084d8:	da002917 	ldw	r8,164(sp)
 80084dc:	df002915 	stw	fp,164(sp)
 80084e0:	9839883a 	mov	fp,r19
 80084e4:	dcc02a03 	ldbu	r19,168(sp)
 80084e8:	e080080c 	andi	r2,fp,32
 80084ec:	d8c02d17 	ldw	r3,180(sp)
 80084f0:	dcc02785 	stb	r19,158(sp)
 80084f4:	103e801e 	bne	r2,zero,8007ef8 <__alt_data_end+0xfc007ef8>
 80084f8:	e080040c 	andi	r2,fp,16
 80084fc:	10031f26 	beq	r2,zero,800917c <___svfprintf_internal_r+0x16c8>
 8008500:	1c800017 	ldw	r18,0(r3)
 8008504:	d9402d17 	ldw	r5,180(sp)
 8008508:	902bd7fa 	srai	r21,r18,31
 800850c:	29400104 	addi	r5,r5,4
 8008510:	d9402d15 	stw	r5,180(sp)
 8008514:	a805883a 	mov	r2,r21
 8008518:	103e7e0e 	bge	r2,zero,8007f14 <__alt_data_end+0xfc007f14>
 800851c:	04a5c83a 	sub	r18,zero,r18
 8008520:	9004c03a 	cmpne	r2,r18,zero
 8008524:	056bc83a 	sub	r21,zero,r21
 8008528:	a8abc83a 	sub	r21,r21,r2
 800852c:	04c00b44 	movi	r19,45
 8008530:	dcc02785 	stb	r19,158(sp)
 8008534:	da403215 	stw	r9,200(sp)
 8008538:	00800044 	movi	r2,1
 800853c:	9546b03a 	or	r3,r18,r21
 8008540:	003e7806 	br	8007f24 <__alt_data_end+0xfc007f24>
 8008544:	9cc01014 	ori	r19,r19,64
 8008548:	e005883a 	mov	r2,fp
 800854c:	e4000007 	ldb	r16,0(fp)
 8008550:	003daf06 	br	8007c10 <__alt_data_end+0xfc007c10>
 8008554:	e4000007 	ldb	r16,0(fp)
 8008558:	00801b04 	movi	r2,108
 800855c:	80837726 	beq	r16,r2,800933c <___svfprintf_internal_r+0x1888>
 8008560:	9cc00414 	ori	r19,r19,16
 8008564:	e005883a 	mov	r2,fp
 8008568:	003da906 	br	8007c10 <__alt_data_end+0xfc007c10>
 800856c:	da002917 	ldw	r8,164(sp)
 8008570:	df002915 	stw	fp,164(sp)
 8008574:	9839883a 	mov	fp,r19
 8008578:	dcc02a03 	ldbu	r19,168(sp)
 800857c:	e080080c 	andi	r2,fp,32
 8008580:	dcc02785 	stb	r19,158(sp)
 8008584:	1002f126 	beq	r2,zero,800914c <___svfprintf_internal_r+0x1698>
 8008588:	d9402d17 	ldw	r5,180(sp)
 800858c:	d9003017 	ldw	r4,192(sp)
 8008590:	28800017 	ldw	r2,0(r5)
 8008594:	2007d7fa 	srai	r3,r4,31
 8008598:	29400104 	addi	r5,r5,4
 800859c:	d9402d15 	stw	r5,180(sp)
 80085a0:	11000015 	stw	r4,0(r2)
 80085a4:	10c00115 	stw	r3,4(r2)
 80085a8:	003d6e06 	br	8007b64 <__alt_data_end+0xfc007b64>
 80085ac:	da002917 	ldw	r8,164(sp)
 80085b0:	df002915 	stw	fp,164(sp)
 80085b4:	9839883a 	mov	fp,r19
 80085b8:	dcc02a03 	ldbu	r19,168(sp)
 80085bc:	014200b4 	movhi	r5,2050
 80085c0:	294d9604 	addi	r5,r5,13912
 80085c4:	dcc02785 	stb	r19,158(sp)
 80085c8:	d9403b15 	stw	r5,236(sp)
 80085cc:	e0c0080c 	andi	r3,fp,32
 80085d0:	d8802d17 	ldw	r2,180(sp)
 80085d4:	18005826 	beq	r3,zero,8008738 <___svfprintf_internal_r+0xc84>
 80085d8:	d9402d17 	ldw	r5,180(sp)
 80085dc:	14800017 	ldw	r18,0(r2)
 80085e0:	15400117 	ldw	r21,4(r2)
 80085e4:	29400204 	addi	r5,r5,8
 80085e8:	d9402d15 	stw	r5,180(sp)
 80085ec:	e080004c 	andi	r2,fp,1
 80085f0:	10020626 	beq	r2,zero,8008e0c <___svfprintf_internal_r+0x1358>
 80085f4:	9546b03a 	or	r3,r18,r21
 80085f8:	1802f326 	beq	r3,zero,80091c8 <___svfprintf_internal_r+0x1714>
 80085fc:	00800c04 	movi	r2,48
 8008600:	d8802705 	stb	r2,156(sp)
 8008604:	dc002745 	stb	r16,157(sp)
 8008608:	e7000094 	ori	fp,fp,2
 800860c:	00800084 	movi	r2,2
 8008610:	003f8d06 	br	8008448 <__alt_data_end+0xfc008448>
 8008614:	d8c02d17 	ldw	r3,180(sp)
 8008618:	d9002d17 	ldw	r4,180(sp)
 800861c:	da002917 	ldw	r8,164(sp)
 8008620:	18800017 	ldw	r2,0(r3)
 8008624:	21000104 	addi	r4,r4,4
 8008628:	00c00044 	movi	r3,1
 800862c:	df002915 	stw	fp,164(sp)
 8008630:	d8c02a15 	stw	r3,168(sp)
 8008634:	9839883a 	mov	fp,r19
 8008638:	d8002785 	stb	zero,158(sp)
 800863c:	d8801405 	stb	r2,80(sp)
 8008640:	d9002d15 	stw	r4,180(sp)
 8008644:	1823883a 	mov	r17,r3
 8008648:	d8c01404 	addi	r3,sp,80
 800864c:	d8003215 	stw	zero,200(sp)
 8008650:	d8003415 	stw	zero,208(sp)
 8008654:	d8c03115 	stw	r3,196(sp)
 8008658:	0005883a 	mov	r2,zero
 800865c:	003e5f06 	br	8007fdc <__alt_data_end+0xfc007fdc>
 8008660:	d8802a07 	ldb	r2,168(sp)
 8008664:	1002c21e 	bne	r2,zero,8009170 <___svfprintf_internal_r+0x16bc>
 8008668:	00c00804 	movi	r3,32
 800866c:	d8c02a05 	stb	r3,168(sp)
 8008670:	e005883a 	mov	r2,fp
 8008674:	e4000007 	ldb	r16,0(fp)
 8008678:	003d6506 	br	8007c10 <__alt_data_end+0xfc007c10>
 800867c:	9cc00054 	ori	r19,r19,1
 8008680:	e005883a 	mov	r2,fp
 8008684:	e4000007 	ldb	r16,0(fp)
 8008688:	003d6106 	br	8007c10 <__alt_data_end+0xfc007c10>
 800868c:	d8c02d17 	ldw	r3,180(sp)
 8008690:	d9002d17 	ldw	r4,180(sp)
 8008694:	da002917 	ldw	r8,164(sp)
 8008698:	18c00017 	ldw	r3,0(r3)
 800869c:	df002915 	stw	fp,164(sp)
 80086a0:	d8002785 	stb	zero,158(sp)
 80086a4:	d8c03115 	stw	r3,196(sp)
 80086a8:	9839883a 	mov	fp,r19
 80086ac:	24800104 	addi	r18,r4,4
 80086b0:	18043526 	beq	r3,zero,8009788 <___svfprintf_internal_r+0x1cd4>
 80086b4:	d9003117 	ldw	r4,196(sp)
 80086b8:	4803e016 	blt	r9,zero,800963c <___svfprintf_internal_r+0x1b88>
 80086bc:	480d883a 	mov	r6,r9
 80086c0:	000b883a 	mov	r5,zero
 80086c4:	da004015 	stw	r8,256(sp)
 80086c8:	da403f15 	stw	r9,252(sp)
 80086cc:	800ea380 	call	800ea38 <memchr>
 80086d0:	da004017 	ldw	r8,256(sp)
 80086d4:	da403f17 	ldw	r9,252(sp)
 80086d8:	10045f26 	beq	r2,zero,8009858 <___svfprintf_internal_r+0x1da4>
 80086dc:	d8c03117 	ldw	r3,196(sp)
 80086e0:	10e3c83a 	sub	r17,r2,r3
 80086e4:	4c40010e 	bge	r9,r17,80086ec <___svfprintf_internal_r+0xc38>
 80086e8:	4823883a 	mov	r17,r9
 80086ec:	8805883a 	mov	r2,r17
 80086f0:	8803d716 	blt	r17,zero,8009650 <___svfprintf_internal_r+0x1b9c>
 80086f4:	dcc02783 	ldbu	r19,158(sp)
 80086f8:	d8802a15 	stw	r2,168(sp)
 80086fc:	dc802d15 	stw	r18,180(sp)
 8008700:	d8003215 	stw	zero,200(sp)
 8008704:	d8003415 	stw	zero,208(sp)
 8008708:	003e2d06 	br	8007fc0 <__alt_data_end+0xfc007fc0>
 800870c:	da002917 	ldw	r8,164(sp)
 8008710:	df002915 	stw	fp,164(sp)
 8008714:	9839883a 	mov	fp,r19
 8008718:	dcc02a03 	ldbu	r19,168(sp)
 800871c:	010200b4 	movhi	r4,2050
 8008720:	210d9b04 	addi	r4,r4,13932
 8008724:	d9003b15 	stw	r4,236(sp)
 8008728:	dcc02785 	stb	r19,158(sp)
 800872c:	e0c0080c 	andi	r3,fp,32
 8008730:	d8802d17 	ldw	r2,180(sp)
 8008734:	183fa81e 	bne	r3,zero,80085d8 <__alt_data_end+0xfc0085d8>
 8008738:	e0c0040c 	andi	r3,fp,16
 800873c:	18027126 	beq	r3,zero,8009104 <___svfprintf_internal_r+0x1650>
 8008740:	d8c02d17 	ldw	r3,180(sp)
 8008744:	14800017 	ldw	r18,0(r2)
 8008748:	002b883a 	mov	r21,zero
 800874c:	18c00104 	addi	r3,r3,4
 8008750:	d8c02d15 	stw	r3,180(sp)
 8008754:	003fa506 	br	80085ec <__alt_data_end+0xfc0085ec>
 8008758:	9cc00814 	ori	r19,r19,32
 800875c:	e005883a 	mov	r2,fp
 8008760:	e4000007 	ldb	r16,0(fp)
 8008764:	003d2a06 	br	8007c10 <__alt_data_end+0xfc007c10>
 8008768:	d9002d17 	ldw	r4,180(sp)
 800876c:	d9402d17 	ldw	r5,180(sp)
 8008770:	21000017 	ldw	r4,0(r4)
 8008774:	28c00104 	addi	r3,r5,4
 8008778:	d9002e15 	stw	r4,184(sp)
 800877c:	2002e916 	blt	r4,zero,8009324 <___svfprintf_internal_r+0x1870>
 8008780:	d8c02d15 	stw	r3,180(sp)
 8008784:	e005883a 	mov	r2,fp
 8008788:	e4000007 	ldb	r16,0(fp)
 800878c:	003d2006 	br	8007c10 <__alt_data_end+0xfc007c10>
 8008790:	00c00ac4 	movi	r3,43
 8008794:	d8c02a05 	stb	r3,168(sp)
 8008798:	e005883a 	mov	r2,fp
 800879c:	e4000007 	ldb	r16,0(fp)
 80087a0:	003d1b06 	br	8007c10 <__alt_data_end+0xfc007c10>
 80087a4:	da002917 	ldw	r8,164(sp)
 80087a8:	df002915 	stw	fp,164(sp)
 80087ac:	9839883a 	mov	fp,r19
 80087b0:	e080080c 	andi	r2,fp,32
 80087b4:	103f2d1e 	bne	r2,zero,800846c <__alt_data_end+0xfc00846c>
 80087b8:	e080040c 	andi	r2,fp,16
 80087bc:	10027826 	beq	r2,zero,80091a0 <___svfprintf_internal_r+0x16ec>
 80087c0:	d9402d17 	ldw	r5,180(sp)
 80087c4:	002b883a 	mov	r21,zero
 80087c8:	00800044 	movi	r2,1
 80087cc:	2c800017 	ldw	r18,0(r5)
 80087d0:	29400104 	addi	r5,r5,4
 80087d4:	d9402d15 	stw	r5,180(sp)
 80087d8:	9007883a 	mov	r3,r18
 80087dc:	003f1a06 	br	8008448 <__alt_data_end+0xfc008448>
 80087e0:	da002917 	ldw	r8,164(sp)
 80087e4:	df002915 	stw	fp,164(sp)
 80087e8:	9839883a 	mov	fp,r19
 80087ec:	e080080c 	andi	r2,fp,32
 80087f0:	103f0e1e 	bne	r2,zero,800842c <__alt_data_end+0xfc00842c>
 80087f4:	e080040c 	andi	r2,fp,16
 80087f8:	10024a26 	beq	r2,zero,8009124 <___svfprintf_internal_r+0x1670>
 80087fc:	d8802d17 	ldw	r2,180(sp)
 8008800:	002b883a 	mov	r21,zero
 8008804:	14800017 	ldw	r18,0(r2)
 8008808:	10800104 	addi	r2,r2,4
 800880c:	d8802d15 	stw	r2,180(sp)
 8008810:	9007883a 	mov	r3,r18
 8008814:	0005883a 	mov	r2,zero
 8008818:	003f0b06 	br	8008448 <__alt_data_end+0xfc008448>
 800881c:	da002917 	ldw	r8,164(sp)
 8008820:	df002915 	stw	fp,164(sp)
 8008824:	9839883a 	mov	fp,r19
 8008828:	dcc02a03 	ldbu	r19,168(sp)
 800882c:	dcc02785 	stb	r19,158(sp)
 8008830:	803d6326 	beq	r16,zero,8007dc0 <__alt_data_end+0xfc007dc0>
 8008834:	00c00044 	movi	r3,1
 8008838:	d8c02a15 	stw	r3,168(sp)
 800883c:	dc001405 	stb	r16,80(sp)
 8008840:	d8002785 	stb	zero,158(sp)
 8008844:	003f7f06 	br	8008644 <__alt_data_end+0xfc008644>
 8008848:	d8c02017 	ldw	r3,128(sp)
 800884c:	003e2406 	br	80080e0 <__alt_data_end+0xfc0080e0>
 8008850:	10803fcc 	andi	r2,r2,255
 8008854:	00c00044 	movi	r3,1
 8008858:	10fdba1e 	bne	r2,r3,8007f44 <__alt_data_end+0xfc007f44>
 800885c:	a800021e 	bne	r21,zero,8008868 <___svfprintf_internal_r+0xdb4>
 8008860:	00800244 	movi	r2,9
 8008864:	14801d2e 	bgeu	r2,r18,80088dc <___svfprintf_internal_r+0xe28>
 8008868:	dc002a15 	stw	r16,168(sp)
 800886c:	b823883a 	mov	r17,r23
 8008870:	9021883a 	mov	r16,r18
 8008874:	da002b15 	stw	r8,172(sp)
 8008878:	a825883a 	mov	r18,r21
 800887c:	482b883a 	mov	r21,r9
 8008880:	8009883a 	mov	r4,r16
 8008884:	900b883a 	mov	r5,r18
 8008888:	01800284 	movi	r6,10
 800888c:	000f883a 	mov	r7,zero
 8008890:	8013f680 	call	8013f68 <__umoddi3>
 8008894:	10800c04 	addi	r2,r2,48
 8008898:	8c7fffc4 	addi	r17,r17,-1
 800889c:	8009883a 	mov	r4,r16
 80088a0:	900b883a 	mov	r5,r18
 80088a4:	01800284 	movi	r6,10
 80088a8:	000f883a 	mov	r7,zero
 80088ac:	88800005 	stb	r2,0(r17)
 80088b0:	80139280 	call	8013928 <__udivdi3>
 80088b4:	1021883a 	mov	r16,r2
 80088b8:	10c4b03a 	or	r2,r2,r3
 80088bc:	1825883a 	mov	r18,r3
 80088c0:	103fef1e 	bne	r2,zero,8008880 <__alt_data_end+0xfc008880>
 80088c4:	dc403115 	stw	r17,196(sp)
 80088c8:	dc002a17 	ldw	r16,168(sp)
 80088cc:	da002b17 	ldw	r8,172(sp)
 80088d0:	a813883a 	mov	r9,r21
 80088d4:	bc63c83a 	sub	r17,r23,r17
 80088d8:	003db406 	br	8007fac <__alt_data_end+0xfc007fac>
 80088dc:	94800c04 	addi	r18,r18,48
 80088e0:	d8c01dc4 	addi	r3,sp,119
 80088e4:	dc801dc5 	stb	r18,119(sp)
 80088e8:	dc403d17 	ldw	r17,244(sp)
 80088ec:	d8c03115 	stw	r3,196(sp)
 80088f0:	003dae06 	br	8007fac <__alt_data_end+0xfc007fac>
 80088f4:	00801944 	movi	r2,101
 80088f8:	14008c0e 	bge	r2,r16,8008b2c <___svfprintf_internal_r+0x1078>
 80088fc:	d9003717 	ldw	r4,220(sp)
 8008900:	d9403817 	ldw	r5,224(sp)
 8008904:	000d883a 	mov	r6,zero
 8008908:	000f883a 	mov	r7,zero
 800890c:	d8c03e15 	stw	r3,248(sp)
 8008910:	da004015 	stw	r8,256(sp)
 8008914:	8014e200 	call	8014e20 <__eqdf2>
 8008918:	d8c03e17 	ldw	r3,248(sp)
 800891c:	da004017 	ldw	r8,256(sp)
 8008920:	1000fc1e 	bne	r2,zero,8008d14 <___svfprintf_internal_r+0x1260>
 8008924:	d8801f17 	ldw	r2,124(sp)
 8008928:	010200b4 	movhi	r4,2050
 800892c:	210da204 	addi	r4,r4,13960
 8008930:	18c00044 	addi	r3,r3,1
 8008934:	10800044 	addi	r2,r2,1
 8008938:	41000015 	stw	r4,0(r8)
 800893c:	01000044 	movi	r4,1
 8008940:	41000115 	stw	r4,4(r8)
 8008944:	d8c02015 	stw	r3,128(sp)
 8008948:	d8801f15 	stw	r2,124(sp)
 800894c:	010001c4 	movi	r4,7
 8008950:	20823116 	blt	r4,r2,8009218 <___svfprintf_internal_r+0x1764>
 8008954:	42000204 	addi	r8,r8,8
 8008958:	d8802617 	ldw	r2,152(sp)
 800895c:	d9403317 	ldw	r5,204(sp)
 8008960:	11400216 	blt	r2,r5,800896c <___svfprintf_internal_r+0xeb8>
 8008964:	e080004c 	andi	r2,fp,1
 8008968:	103e3a26 	beq	r2,zero,8008254 <__alt_data_end+0xfc008254>
 800896c:	d8803917 	ldw	r2,228(sp)
 8008970:	d9003517 	ldw	r4,212(sp)
 8008974:	d9403917 	ldw	r5,228(sp)
 8008978:	1887883a 	add	r3,r3,r2
 800897c:	d8801f17 	ldw	r2,124(sp)
 8008980:	41000015 	stw	r4,0(r8)
 8008984:	41400115 	stw	r5,4(r8)
 8008988:	10800044 	addi	r2,r2,1
 800898c:	d8c02015 	stw	r3,128(sp)
 8008990:	d8801f15 	stw	r2,124(sp)
 8008994:	010001c4 	movi	r4,7
 8008998:	20826c16 	blt	r4,r2,800934c <___svfprintf_internal_r+0x1898>
 800899c:	42000204 	addi	r8,r8,8
 80089a0:	d8803317 	ldw	r2,204(sp)
 80089a4:	143fffc4 	addi	r16,r2,-1
 80089a8:	043e2a0e 	bge	zero,r16,8008254 <__alt_data_end+0xfc008254>
 80089ac:	04400404 	movi	r17,16
 80089b0:	d8801f17 	ldw	r2,124(sp)
 80089b4:	8c00980e 	bge	r17,r16,8008c18 <___svfprintf_internal_r+0x1164>
 80089b8:	014200b4 	movhi	r5,2050
 80089bc:	294da284 	addi	r5,r5,13962
 80089c0:	d9402b15 	stw	r5,172(sp)
 80089c4:	04c001c4 	movi	r19,7
 80089c8:	dc802f17 	ldw	r18,188(sp)
 80089cc:	00000306 	br	80089dc <___svfprintf_internal_r+0xf28>
 80089d0:	42000204 	addi	r8,r8,8
 80089d4:	843ffc04 	addi	r16,r16,-16
 80089d8:	8c00920e 	bge	r17,r16,8008c24 <___svfprintf_internal_r+0x1170>
 80089dc:	18c00404 	addi	r3,r3,16
 80089e0:	10800044 	addi	r2,r2,1
 80089e4:	45000015 	stw	r20,0(r8)
 80089e8:	44400115 	stw	r17,4(r8)
 80089ec:	d8c02015 	stw	r3,128(sp)
 80089f0:	d8801f15 	stw	r2,124(sp)
 80089f4:	98bff60e 	bge	r19,r2,80089d0 <__alt_data_end+0xfc0089d0>
 80089f8:	9009883a 	mov	r4,r18
 80089fc:	b00b883a 	mov	r5,r22
 8008a00:	b80d883a 	mov	r6,r23
 8008a04:	80105dc0 	call	80105dc <__ssprint_r>
 8008a08:	103cf31e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008a0c:	d8c02017 	ldw	r3,128(sp)
 8008a10:	d8801f17 	ldw	r2,124(sp)
 8008a14:	da000404 	addi	r8,sp,16
 8008a18:	003fee06 	br	80089d4 <__alt_data_end+0xfc0089d4>
 8008a1c:	d9402e17 	ldw	r5,184(sp)
 8008a20:	d8802a17 	ldw	r2,168(sp)
 8008a24:	28a7c83a 	sub	r19,r5,r2
 8008a28:	04fdcb0e 	bge	zero,r19,8008158 <__alt_data_end+0xfc008158>
 8008a2c:	05400404 	movi	r21,16
 8008a30:	d8801f17 	ldw	r2,124(sp)
 8008a34:	acc3840e 	bge	r21,r19,8009848 <___svfprintf_internal_r+0x1d94>
 8008a38:	014200b4 	movhi	r5,2050
 8008a3c:	9809883a 	mov	r4,r19
 8008a40:	294da284 	addi	r5,r5,13962
 8008a44:	dc002c15 	stw	r16,176(sp)
 8008a48:	8827883a 	mov	r19,r17
 8008a4c:	d9402b15 	stw	r5,172(sp)
 8008a50:	048001c4 	movi	r18,7
 8008a54:	dc002f17 	ldw	r16,188(sp)
 8008a58:	2023883a 	mov	r17,r4
 8008a5c:	00000306 	br	8008a6c <___svfprintf_internal_r+0xfb8>
 8008a60:	8c7ffc04 	addi	r17,r17,-16
 8008a64:	42000204 	addi	r8,r8,8
 8008a68:	ac40110e 	bge	r21,r17,8008ab0 <___svfprintf_internal_r+0xffc>
 8008a6c:	18c00404 	addi	r3,r3,16
 8008a70:	10800044 	addi	r2,r2,1
 8008a74:	45000015 	stw	r20,0(r8)
 8008a78:	45400115 	stw	r21,4(r8)
 8008a7c:	d8c02015 	stw	r3,128(sp)
 8008a80:	d8801f15 	stw	r2,124(sp)
 8008a84:	90bff60e 	bge	r18,r2,8008a60 <__alt_data_end+0xfc008a60>
 8008a88:	8009883a 	mov	r4,r16
 8008a8c:	b00b883a 	mov	r5,r22
 8008a90:	b80d883a 	mov	r6,r23
 8008a94:	80105dc0 	call	80105dc <__ssprint_r>
 8008a98:	103ccf1e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008a9c:	8c7ffc04 	addi	r17,r17,-16
 8008aa0:	d8c02017 	ldw	r3,128(sp)
 8008aa4:	d8801f17 	ldw	r2,124(sp)
 8008aa8:	da000404 	addi	r8,sp,16
 8008aac:	ac7fef16 	blt	r21,r17,8008a6c <__alt_data_end+0xfc008a6c>
 8008ab0:	dc002c17 	ldw	r16,176(sp)
 8008ab4:	8809883a 	mov	r4,r17
 8008ab8:	9823883a 	mov	r17,r19
 8008abc:	2027883a 	mov	r19,r4
 8008ac0:	d9002b17 	ldw	r4,172(sp)
 8008ac4:	1cc7883a 	add	r3,r3,r19
 8008ac8:	10800044 	addi	r2,r2,1
 8008acc:	41000015 	stw	r4,0(r8)
 8008ad0:	44c00115 	stw	r19,4(r8)
 8008ad4:	d8c02015 	stw	r3,128(sp)
 8008ad8:	d8801f15 	stw	r2,124(sp)
 8008adc:	010001c4 	movi	r4,7
 8008ae0:	20816b16 	blt	r4,r2,8009090 <___svfprintf_internal_r+0x15dc>
 8008ae4:	42000204 	addi	r8,r8,8
 8008ae8:	003d9b06 	br	8008158 <__alt_data_end+0xfc008158>
 8008aec:	d9403b17 	ldw	r5,236(sp)
 8008af0:	b807883a 	mov	r3,r23
 8008af4:	908003cc 	andi	r2,r18,15
 8008af8:	a808973a 	slli	r4,r21,28
 8008afc:	2885883a 	add	r2,r5,r2
 8008b00:	9024d13a 	srli	r18,r18,4
 8008b04:	10800003 	ldbu	r2,0(r2)
 8008b08:	a82ad13a 	srli	r21,r21,4
 8008b0c:	18ffffc4 	addi	r3,r3,-1
 8008b10:	24a4b03a 	or	r18,r4,r18
 8008b14:	18800005 	stb	r2,0(r3)
 8008b18:	9544b03a 	or	r2,r18,r21
 8008b1c:	103ff51e 	bne	r2,zero,8008af4 <__alt_data_end+0xfc008af4>
 8008b20:	d8c03115 	stw	r3,196(sp)
 8008b24:	b8e3c83a 	sub	r17,r23,r3
 8008b28:	003d2006 	br	8007fac <__alt_data_end+0xfc007fac>
 8008b2c:	d9403317 	ldw	r5,204(sp)
 8008b30:	00800044 	movi	r2,1
 8008b34:	18c00044 	addi	r3,r3,1
 8008b38:	1141360e 	bge	r2,r5,8009014 <___svfprintf_internal_r+0x1560>
 8008b3c:	dc001f17 	ldw	r16,124(sp)
 8008b40:	d8803117 	ldw	r2,196(sp)
 8008b44:	d8c02015 	stw	r3,128(sp)
 8008b48:	84000044 	addi	r16,r16,1
 8008b4c:	40800015 	stw	r2,0(r8)
 8008b50:	00800044 	movi	r2,1
 8008b54:	40800115 	stw	r2,4(r8)
 8008b58:	dc001f15 	stw	r16,124(sp)
 8008b5c:	008001c4 	movi	r2,7
 8008b60:	14013916 	blt	r2,r16,8009048 <___svfprintf_internal_r+0x1594>
 8008b64:	42000204 	addi	r8,r8,8
 8008b68:	d9003917 	ldw	r4,228(sp)
 8008b6c:	d9403517 	ldw	r5,212(sp)
 8008b70:	84000044 	addi	r16,r16,1
 8008b74:	1907883a 	add	r3,r3,r4
 8008b78:	41400015 	stw	r5,0(r8)
 8008b7c:	41000115 	stw	r4,4(r8)
 8008b80:	d8c02015 	stw	r3,128(sp)
 8008b84:	dc001f15 	stw	r16,124(sp)
 8008b88:	008001c4 	movi	r2,7
 8008b8c:	14013716 	blt	r2,r16,800906c <___svfprintf_internal_r+0x15b8>
 8008b90:	44400204 	addi	r17,r8,8
 8008b94:	d9003717 	ldw	r4,220(sp)
 8008b98:	d9403817 	ldw	r5,224(sp)
 8008b9c:	000d883a 	mov	r6,zero
 8008ba0:	000f883a 	mov	r7,zero
 8008ba4:	d8c03e15 	stw	r3,248(sp)
 8008ba8:	8014e200 	call	8014e20 <__eqdf2>
 8008bac:	d8c03e17 	ldw	r3,248(sp)
 8008bb0:	10009926 	beq	r2,zero,8008e18 <___svfprintf_internal_r+0x1364>
 8008bb4:	d9003317 	ldw	r4,204(sp)
 8008bb8:	d9403117 	ldw	r5,196(sp)
 8008bbc:	84000044 	addi	r16,r16,1
 8008bc0:	20bfffc4 	addi	r2,r4,-1
 8008bc4:	1887883a 	add	r3,r3,r2
 8008bc8:	29000044 	addi	r4,r5,1
 8008bcc:	88800115 	stw	r2,4(r17)
 8008bd0:	89000015 	stw	r4,0(r17)
 8008bd4:	d8c02015 	stw	r3,128(sp)
 8008bd8:	dc001f15 	stw	r16,124(sp)
 8008bdc:	008001c4 	movi	r2,7
 8008be0:	1400b716 	blt	r2,r16,8008ec0 <___svfprintf_internal_r+0x140c>
 8008be4:	8c400204 	addi	r17,r17,8
 8008be8:	d9403a17 	ldw	r5,232(sp)
 8008bec:	dcc022c4 	addi	r19,sp,139
 8008bf0:	84000044 	addi	r16,r16,1
 8008bf4:	28c7883a 	add	r3,r5,r3
 8008bf8:	8cc00015 	stw	r19,0(r17)
 8008bfc:	89400115 	stw	r5,4(r17)
 8008c00:	d8c02015 	stw	r3,128(sp)
 8008c04:	dc001f15 	stw	r16,124(sp)
 8008c08:	008001c4 	movi	r2,7
 8008c0c:	14000e16 	blt	r2,r16,8008c48 <___svfprintf_internal_r+0x1194>
 8008c10:	8a000204 	addi	r8,r17,8
 8008c14:	003d8f06 	br	8008254 <__alt_data_end+0xfc008254>
 8008c18:	010200b4 	movhi	r4,2050
 8008c1c:	210da284 	addi	r4,r4,13962
 8008c20:	d9002b15 	stw	r4,172(sp)
 8008c24:	d9002b17 	ldw	r4,172(sp)
 8008c28:	1c07883a 	add	r3,r3,r16
 8008c2c:	44000115 	stw	r16,4(r8)
 8008c30:	41000015 	stw	r4,0(r8)
 8008c34:	10800044 	addi	r2,r2,1
 8008c38:	d8c02015 	stw	r3,128(sp)
 8008c3c:	d8801f15 	stw	r2,124(sp)
 8008c40:	010001c4 	movi	r4,7
 8008c44:	20bd820e 	bge	r4,r2,8008250 <__alt_data_end+0xfc008250>
 8008c48:	d9002f17 	ldw	r4,188(sp)
 8008c4c:	b00b883a 	mov	r5,r22
 8008c50:	b80d883a 	mov	r6,r23
 8008c54:	80105dc0 	call	80105dc <__ssprint_r>
 8008c58:	103c5f1e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008c5c:	d8c02017 	ldw	r3,128(sp)
 8008c60:	da000404 	addi	r8,sp,16
 8008c64:	003d7b06 	br	8008254 <__alt_data_end+0xfc008254>
 8008c68:	d9002f17 	ldw	r4,188(sp)
 8008c6c:	b00b883a 	mov	r5,r22
 8008c70:	b80d883a 	mov	r6,r23
 8008c74:	80105dc0 	call	80105dc <__ssprint_r>
 8008c78:	103db226 	beq	r2,zero,8008344 <__alt_data_end+0xfc008344>
 8008c7c:	003c5606 	br	8007dd8 <__alt_data_end+0xfc007dd8>
 8008c80:	10803fcc 	andi	r2,r2,255
 8008c84:	1000201e 	bne	r2,zero,8008d08 <___svfprintf_internal_r+0x1254>
 8008c88:	e080004c 	andi	r2,fp,1
 8008c8c:	10001e26 	beq	r2,zero,8008d08 <___svfprintf_internal_r+0x1254>
 8008c90:	00800c04 	movi	r2,48
 8008c94:	d8c01dc4 	addi	r3,sp,119
 8008c98:	d8801dc5 	stb	r2,119(sp)
 8008c9c:	dc403d17 	ldw	r17,244(sp)
 8008ca0:	d8c03115 	stw	r3,196(sp)
 8008ca4:	003cc106 	br	8007fac <__alt_data_end+0xfc007fac>
 8008ca8:	d9002f17 	ldw	r4,188(sp)
 8008cac:	b00b883a 	mov	r5,r22
 8008cb0:	b80d883a 	mov	r6,r23
 8008cb4:	80105dc0 	call	80105dc <__ssprint_r>
 8008cb8:	103c471e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008cbc:	d8c02017 	ldw	r3,128(sp)
 8008cc0:	da000404 	addi	r8,sp,16
 8008cc4:	003d5606 	br	8008220 <__alt_data_end+0xfc008220>
 8008cc8:	d9002f17 	ldw	r4,188(sp)
 8008ccc:	b00b883a 	mov	r5,r22
 8008cd0:	b80d883a 	mov	r6,r23
 8008cd4:	80105dc0 	call	80105dc <__ssprint_r>
 8008cd8:	103c3f1e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008cdc:	d8c02017 	ldw	r3,128(sp)
 8008ce0:	da000404 	addi	r8,sp,16
 8008ce4:	003d0b06 	br	8008114 <__alt_data_end+0xfc008114>
 8008ce8:	d9002f17 	ldw	r4,188(sp)
 8008cec:	b00b883a 	mov	r5,r22
 8008cf0:	b80d883a 	mov	r6,r23
 8008cf4:	80105dc0 	call	80105dc <__ssprint_r>
 8008cf8:	103c371e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008cfc:	d8c02017 	ldw	r3,128(sp)
 8008d00:	da000404 	addi	r8,sp,16
 8008d04:	003d1106 	br	800814c <__alt_data_end+0xfc00814c>
 8008d08:	0023883a 	mov	r17,zero
 8008d0c:	ddc03115 	stw	r23,196(sp)
 8008d10:	003ca606 	br	8007fac <__alt_data_end+0xfc007fac>
 8008d14:	dc002617 	ldw	r16,152(sp)
 8008d18:	0401470e 	bge	zero,r16,8009238 <___svfprintf_internal_r+0x1784>
 8008d1c:	d8803317 	ldw	r2,204(sp)
 8008d20:	d9403117 	ldw	r5,196(sp)
 8008d24:	d9003417 	ldw	r4,208(sp)
 8008d28:	1023883a 	mov	r17,r2
 8008d2c:	28a1883a 	add	r16,r5,r2
 8008d30:	2080010e 	bge	r4,r2,8008d38 <___svfprintf_internal_r+0x1284>
 8008d34:	2023883a 	mov	r17,r4
 8008d38:	04400b0e 	bge	zero,r17,8008d68 <___svfprintf_internal_r+0x12b4>
 8008d3c:	d8801f17 	ldw	r2,124(sp)
 8008d40:	d9403117 	ldw	r5,196(sp)
 8008d44:	1c47883a 	add	r3,r3,r17
 8008d48:	10800044 	addi	r2,r2,1
 8008d4c:	41400015 	stw	r5,0(r8)
 8008d50:	44400115 	stw	r17,4(r8)
 8008d54:	d8c02015 	stw	r3,128(sp)
 8008d58:	d8801f15 	stw	r2,124(sp)
 8008d5c:	010001c4 	movi	r4,7
 8008d60:	20825f16 	blt	r4,r2,80096e0 <___svfprintf_internal_r+0x1c2c>
 8008d64:	42000204 	addi	r8,r8,8
 8008d68:	88025b16 	blt	r17,zero,80096d8 <___svfprintf_internal_r+0x1c24>
 8008d6c:	d8803417 	ldw	r2,208(sp)
 8008d70:	1463c83a 	sub	r17,r2,r17
 8008d74:	0440620e 	bge	zero,r17,8008f00 <___svfprintf_internal_r+0x144c>
 8008d78:	04c00404 	movi	r19,16
 8008d7c:	d8801f17 	ldw	r2,124(sp)
 8008d80:	9c41130e 	bge	r19,r17,80091d0 <___svfprintf_internal_r+0x171c>
 8008d84:	014200b4 	movhi	r5,2050
 8008d88:	294da284 	addi	r5,r5,13962
 8008d8c:	d9402b15 	stw	r5,172(sp)
 8008d90:	054001c4 	movi	r21,7
 8008d94:	dc802f17 	ldw	r18,188(sp)
 8008d98:	00000306 	br	8008da8 <___svfprintf_internal_r+0x12f4>
 8008d9c:	42000204 	addi	r8,r8,8
 8008da0:	8c7ffc04 	addi	r17,r17,-16
 8008da4:	9c410d0e 	bge	r19,r17,80091dc <___svfprintf_internal_r+0x1728>
 8008da8:	18c00404 	addi	r3,r3,16
 8008dac:	10800044 	addi	r2,r2,1
 8008db0:	45000015 	stw	r20,0(r8)
 8008db4:	44c00115 	stw	r19,4(r8)
 8008db8:	d8c02015 	stw	r3,128(sp)
 8008dbc:	d8801f15 	stw	r2,124(sp)
 8008dc0:	a8bff60e 	bge	r21,r2,8008d9c <__alt_data_end+0xfc008d9c>
 8008dc4:	9009883a 	mov	r4,r18
 8008dc8:	b00b883a 	mov	r5,r22
 8008dcc:	b80d883a 	mov	r6,r23
 8008dd0:	80105dc0 	call	80105dc <__ssprint_r>
 8008dd4:	103c001e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008dd8:	d8c02017 	ldw	r3,128(sp)
 8008ddc:	d8801f17 	ldw	r2,124(sp)
 8008de0:	da000404 	addi	r8,sp,16
 8008de4:	003fee06 	br	8008da0 <__alt_data_end+0xfc008da0>
 8008de8:	d9002f17 	ldw	r4,188(sp)
 8008dec:	b00b883a 	mov	r5,r22
 8008df0:	b80d883a 	mov	r6,r23
 8008df4:	80105dc0 	call	80105dc <__ssprint_r>
 8008df8:	103bf71e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008dfc:	d8c02017 	ldw	r3,128(sp)
 8008e00:	d8802787 	ldb	r2,158(sp)
 8008e04:	da000404 	addi	r8,sp,16
 8008e08:	003cb506 	br	80080e0 <__alt_data_end+0xfc0080e0>
 8008e0c:	00800084 	movi	r2,2
 8008e10:	9546b03a 	or	r3,r18,r21
 8008e14:	003d8c06 	br	8008448 <__alt_data_end+0xfc008448>
 8008e18:	d8803317 	ldw	r2,204(sp)
 8008e1c:	14ffffc4 	addi	r19,r2,-1
 8008e20:	04ff710e 	bge	zero,r19,8008be8 <__alt_data_end+0xfc008be8>
 8008e24:	05400404 	movi	r21,16
 8008e28:	acc2f80e 	bge	r21,r19,8009a0c <___svfprintf_internal_r+0x1f58>
 8008e2c:	014200b4 	movhi	r5,2050
 8008e30:	294da284 	addi	r5,r5,13962
 8008e34:	d9402b15 	stw	r5,172(sp)
 8008e38:	01c001c4 	movi	r7,7
 8008e3c:	dc802f17 	ldw	r18,188(sp)
 8008e40:	00000306 	br	8008e50 <___svfprintf_internal_r+0x139c>
 8008e44:	9cfffc04 	addi	r19,r19,-16
 8008e48:	8c400204 	addi	r17,r17,8
 8008e4c:	acc0130e 	bge	r21,r19,8008e9c <___svfprintf_internal_r+0x13e8>
 8008e50:	18c00404 	addi	r3,r3,16
 8008e54:	84000044 	addi	r16,r16,1
 8008e58:	8d000015 	stw	r20,0(r17)
 8008e5c:	8d400115 	stw	r21,4(r17)
 8008e60:	d8c02015 	stw	r3,128(sp)
 8008e64:	dc001f15 	stw	r16,124(sp)
 8008e68:	3c3ff60e 	bge	r7,r16,8008e44 <__alt_data_end+0xfc008e44>
 8008e6c:	9009883a 	mov	r4,r18
 8008e70:	b00b883a 	mov	r5,r22
 8008e74:	b80d883a 	mov	r6,r23
 8008e78:	d9c03e15 	stw	r7,248(sp)
 8008e7c:	80105dc0 	call	80105dc <__ssprint_r>
 8008e80:	d9c03e17 	ldw	r7,248(sp)
 8008e84:	103bd41e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008e88:	9cfffc04 	addi	r19,r19,-16
 8008e8c:	d8c02017 	ldw	r3,128(sp)
 8008e90:	dc001f17 	ldw	r16,124(sp)
 8008e94:	dc400404 	addi	r17,sp,16
 8008e98:	acffed16 	blt	r21,r19,8008e50 <__alt_data_end+0xfc008e50>
 8008e9c:	d8802b17 	ldw	r2,172(sp)
 8008ea0:	1cc7883a 	add	r3,r3,r19
 8008ea4:	84000044 	addi	r16,r16,1
 8008ea8:	88800015 	stw	r2,0(r17)
 8008eac:	8cc00115 	stw	r19,4(r17)
 8008eb0:	d8c02015 	stw	r3,128(sp)
 8008eb4:	dc001f15 	stw	r16,124(sp)
 8008eb8:	008001c4 	movi	r2,7
 8008ebc:	143f490e 	bge	r2,r16,8008be4 <__alt_data_end+0xfc008be4>
 8008ec0:	d9002f17 	ldw	r4,188(sp)
 8008ec4:	b00b883a 	mov	r5,r22
 8008ec8:	b80d883a 	mov	r6,r23
 8008ecc:	80105dc0 	call	80105dc <__ssprint_r>
 8008ed0:	103bc11e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008ed4:	d8c02017 	ldw	r3,128(sp)
 8008ed8:	dc001f17 	ldw	r16,124(sp)
 8008edc:	dc400404 	addi	r17,sp,16
 8008ee0:	003f4106 	br	8008be8 <__alt_data_end+0xfc008be8>
 8008ee4:	d9002f17 	ldw	r4,188(sp)
 8008ee8:	b00b883a 	mov	r5,r22
 8008eec:	b80d883a 	mov	r6,r23
 8008ef0:	80105dc0 	call	80105dc <__ssprint_r>
 8008ef4:	103bb81e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8008ef8:	d8c02017 	ldw	r3,128(sp)
 8008efc:	da000404 	addi	r8,sp,16
 8008f00:	d9403117 	ldw	r5,196(sp)
 8008f04:	d9003417 	ldw	r4,208(sp)
 8008f08:	d8802617 	ldw	r2,152(sp)
 8008f0c:	2923883a 	add	r17,r5,r4
 8008f10:	d9403317 	ldw	r5,204(sp)
 8008f14:	11400216 	blt	r2,r5,8008f20 <___svfprintf_internal_r+0x146c>
 8008f18:	e100004c 	andi	r4,fp,1
 8008f1c:	20000d26 	beq	r4,zero,8008f54 <___svfprintf_internal_r+0x14a0>
 8008f20:	d9003917 	ldw	r4,228(sp)
 8008f24:	d9403517 	ldw	r5,212(sp)
 8008f28:	1907883a 	add	r3,r3,r4
 8008f2c:	d9001f17 	ldw	r4,124(sp)
 8008f30:	41400015 	stw	r5,0(r8)
 8008f34:	d9403917 	ldw	r5,228(sp)
 8008f38:	21000044 	addi	r4,r4,1
 8008f3c:	d8c02015 	stw	r3,128(sp)
 8008f40:	41400115 	stw	r5,4(r8)
 8008f44:	d9001f15 	stw	r4,124(sp)
 8008f48:	014001c4 	movi	r5,7
 8008f4c:	2901ec16 	blt	r5,r4,8009700 <___svfprintf_internal_r+0x1c4c>
 8008f50:	42000204 	addi	r8,r8,8
 8008f54:	d9003317 	ldw	r4,204(sp)
 8008f58:	2085c83a 	sub	r2,r4,r2
 8008f5c:	8449c83a 	sub	r4,r16,r17
 8008f60:	1021883a 	mov	r16,r2
 8008f64:	2080010e 	bge	r4,r2,8008f6c <___svfprintf_internal_r+0x14b8>
 8008f68:	2021883a 	mov	r16,r4
 8008f6c:	04000a0e 	bge	zero,r16,8008f98 <___svfprintf_internal_r+0x14e4>
 8008f70:	d9001f17 	ldw	r4,124(sp)
 8008f74:	1c07883a 	add	r3,r3,r16
 8008f78:	44400015 	stw	r17,0(r8)
 8008f7c:	21000044 	addi	r4,r4,1
 8008f80:	44000115 	stw	r16,4(r8)
 8008f84:	d8c02015 	stw	r3,128(sp)
 8008f88:	d9001f15 	stw	r4,124(sp)
 8008f8c:	014001c4 	movi	r5,7
 8008f90:	2901f216 	blt	r5,r4,800975c <___svfprintf_internal_r+0x1ca8>
 8008f94:	42000204 	addi	r8,r8,8
 8008f98:	80020a16 	blt	r16,zero,80097c4 <___svfprintf_internal_r+0x1d10>
 8008f9c:	1421c83a 	sub	r16,r2,r16
 8008fa0:	043cac0e 	bge	zero,r16,8008254 <__alt_data_end+0xfc008254>
 8008fa4:	04400404 	movi	r17,16
 8008fa8:	d8801f17 	ldw	r2,124(sp)
 8008fac:	8c3f1a0e 	bge	r17,r16,8008c18 <__alt_data_end+0xfc008c18>
 8008fb0:	014200b4 	movhi	r5,2050
 8008fb4:	294da284 	addi	r5,r5,13962
 8008fb8:	d9402b15 	stw	r5,172(sp)
 8008fbc:	04c001c4 	movi	r19,7
 8008fc0:	dc802f17 	ldw	r18,188(sp)
 8008fc4:	00000306 	br	8008fd4 <___svfprintf_internal_r+0x1520>
 8008fc8:	42000204 	addi	r8,r8,8
 8008fcc:	843ffc04 	addi	r16,r16,-16
 8008fd0:	8c3f140e 	bge	r17,r16,8008c24 <__alt_data_end+0xfc008c24>
 8008fd4:	18c00404 	addi	r3,r3,16
 8008fd8:	10800044 	addi	r2,r2,1
 8008fdc:	45000015 	stw	r20,0(r8)
 8008fe0:	44400115 	stw	r17,4(r8)
 8008fe4:	d8c02015 	stw	r3,128(sp)
 8008fe8:	d8801f15 	stw	r2,124(sp)
 8008fec:	98bff60e 	bge	r19,r2,8008fc8 <__alt_data_end+0xfc008fc8>
 8008ff0:	9009883a 	mov	r4,r18
 8008ff4:	b00b883a 	mov	r5,r22
 8008ff8:	b80d883a 	mov	r6,r23
 8008ffc:	80105dc0 	call	80105dc <__ssprint_r>
 8009000:	103b751e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8009004:	d8c02017 	ldw	r3,128(sp)
 8009008:	d8801f17 	ldw	r2,124(sp)
 800900c:	da000404 	addi	r8,sp,16
 8009010:	003fee06 	br	8008fcc <__alt_data_end+0xfc008fcc>
 8009014:	e088703a 	and	r4,fp,r2
 8009018:	203ec81e 	bne	r4,zero,8008b3c <__alt_data_end+0xfc008b3c>
 800901c:	dc001f17 	ldw	r16,124(sp)
 8009020:	d9003117 	ldw	r4,196(sp)
 8009024:	40800115 	stw	r2,4(r8)
 8009028:	84000044 	addi	r16,r16,1
 800902c:	41000015 	stw	r4,0(r8)
 8009030:	d8c02015 	stw	r3,128(sp)
 8009034:	dc001f15 	stw	r16,124(sp)
 8009038:	008001c4 	movi	r2,7
 800903c:	143fa016 	blt	r2,r16,8008ec0 <__alt_data_end+0xfc008ec0>
 8009040:	44400204 	addi	r17,r8,8
 8009044:	003ee806 	br	8008be8 <__alt_data_end+0xfc008be8>
 8009048:	d9002f17 	ldw	r4,188(sp)
 800904c:	b00b883a 	mov	r5,r22
 8009050:	b80d883a 	mov	r6,r23
 8009054:	80105dc0 	call	80105dc <__ssprint_r>
 8009058:	103b5f1e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 800905c:	d8c02017 	ldw	r3,128(sp)
 8009060:	dc001f17 	ldw	r16,124(sp)
 8009064:	da000404 	addi	r8,sp,16
 8009068:	003ebf06 	br	8008b68 <__alt_data_end+0xfc008b68>
 800906c:	d9002f17 	ldw	r4,188(sp)
 8009070:	b00b883a 	mov	r5,r22
 8009074:	b80d883a 	mov	r6,r23
 8009078:	80105dc0 	call	80105dc <__ssprint_r>
 800907c:	103b561e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8009080:	d8c02017 	ldw	r3,128(sp)
 8009084:	dc001f17 	ldw	r16,124(sp)
 8009088:	dc400404 	addi	r17,sp,16
 800908c:	003ec106 	br	8008b94 <__alt_data_end+0xfc008b94>
 8009090:	d9002f17 	ldw	r4,188(sp)
 8009094:	b00b883a 	mov	r5,r22
 8009098:	b80d883a 	mov	r6,r23
 800909c:	80105dc0 	call	80105dc <__ssprint_r>
 80090a0:	103b4d1e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 80090a4:	d8c02017 	ldw	r3,128(sp)
 80090a8:	da000404 	addi	r8,sp,16
 80090ac:	003c2a06 	br	8008158 <__alt_data_end+0xfc008158>
 80090b0:	da004015 	stw	r8,256(sp)
 80090b4:	da403f15 	stw	r9,252(sp)
 80090b8:	80103880 	call	8010388 <__fpclassifyd>
 80090bc:	da004017 	ldw	r8,256(sp)
 80090c0:	da403f17 	ldw	r9,252(sp)
 80090c4:	1000a91e 	bne	r2,zero,800936c <___svfprintf_internal_r+0x18b8>
 80090c8:	008011c4 	movi	r2,71
 80090cc:	14011016 	blt	r2,r16,8009510 <___svfprintf_internal_r+0x1a5c>
 80090d0:	010200b4 	movhi	r4,2050
 80090d4:	210d9404 	addi	r4,r4,13904
 80090d8:	d9003115 	stw	r4,196(sp)
 80090dc:	00c000c4 	movi	r3,3
 80090e0:	00bfdfc4 	movi	r2,-129
 80090e4:	d8c02a15 	stw	r3,168(sp)
 80090e8:	e0b8703a 	and	fp,fp,r2
 80090ec:	dcc02783 	ldbu	r19,158(sp)
 80090f0:	dc802d15 	stw	r18,180(sp)
 80090f4:	1823883a 	mov	r17,r3
 80090f8:	d8003215 	stw	zero,200(sp)
 80090fc:	d8003415 	stw	zero,208(sp)
 8009100:	003baf06 	br	8007fc0 <__alt_data_end+0xfc007fc0>
 8009104:	e0c0100c 	andi	r3,fp,64
 8009108:	18012a26 	beq	r3,zero,80095b4 <___svfprintf_internal_r+0x1b00>
 800910c:	d9002d17 	ldw	r4,180(sp)
 8009110:	1480000b 	ldhu	r18,0(r2)
 8009114:	002b883a 	mov	r21,zero
 8009118:	21000104 	addi	r4,r4,4
 800911c:	d9002d15 	stw	r4,180(sp)
 8009120:	003d3206 	br	80085ec <__alt_data_end+0xfc0085ec>
 8009124:	e080100c 	andi	r2,fp,64
 8009128:	10011326 	beq	r2,zero,8009578 <___svfprintf_internal_r+0x1ac4>
 800912c:	d8c02d17 	ldw	r3,180(sp)
 8009130:	002b883a 	mov	r21,zero
 8009134:	0005883a 	mov	r2,zero
 8009138:	1c80000b 	ldhu	r18,0(r3)
 800913c:	18c00104 	addi	r3,r3,4
 8009140:	d8c02d15 	stw	r3,180(sp)
 8009144:	9007883a 	mov	r3,r18
 8009148:	003cbf06 	br	8008448 <__alt_data_end+0xfc008448>
 800914c:	e080040c 	andi	r2,fp,16
 8009150:	10011e26 	beq	r2,zero,80095cc <___svfprintf_internal_r+0x1b18>
 8009154:	d9402d17 	ldw	r5,180(sp)
 8009158:	d8c03017 	ldw	r3,192(sp)
 800915c:	28800017 	ldw	r2,0(r5)
 8009160:	29400104 	addi	r5,r5,4
 8009164:	d9402d15 	stw	r5,180(sp)
 8009168:	10c00015 	stw	r3,0(r2)
 800916c:	003a7d06 	br	8007b64 <__alt_data_end+0xfc007b64>
 8009170:	e4000007 	ldb	r16,0(fp)
 8009174:	e005883a 	mov	r2,fp
 8009178:	003aa506 	br	8007c10 <__alt_data_end+0xfc007c10>
 800917c:	e080100c 	andi	r2,fp,64
 8009180:	10010526 	beq	r2,zero,8009598 <___svfprintf_internal_r+0x1ae4>
 8009184:	1c80000f 	ldh	r18,0(r3)
 8009188:	d8802d17 	ldw	r2,180(sp)
 800918c:	902bd7fa 	srai	r21,r18,31
 8009190:	10800104 	addi	r2,r2,4
 8009194:	d8802d15 	stw	r2,180(sp)
 8009198:	a805883a 	mov	r2,r21
 800919c:	003b5c06 	br	8007f10 <__alt_data_end+0xfc007f10>
 80091a0:	e080100c 	andi	r2,fp,64
 80091a4:	1000ec26 	beq	r2,zero,8009558 <___svfprintf_internal_r+0x1aa4>
 80091a8:	d8802d17 	ldw	r2,180(sp)
 80091ac:	002b883a 	mov	r21,zero
 80091b0:	1480000b 	ldhu	r18,0(r2)
 80091b4:	10800104 	addi	r2,r2,4
 80091b8:	d8802d15 	stw	r2,180(sp)
 80091bc:	9007883a 	mov	r3,r18
 80091c0:	00800044 	movi	r2,1
 80091c4:	003ca006 	br	8008448 <__alt_data_end+0xfc008448>
 80091c8:	00800084 	movi	r2,2
 80091cc:	003c9e06 	br	8008448 <__alt_data_end+0xfc008448>
 80091d0:	010200b4 	movhi	r4,2050
 80091d4:	210da284 	addi	r4,r4,13962
 80091d8:	d9002b15 	stw	r4,172(sp)
 80091dc:	d9002b17 	ldw	r4,172(sp)
 80091e0:	1c47883a 	add	r3,r3,r17
 80091e4:	10800044 	addi	r2,r2,1
 80091e8:	41000015 	stw	r4,0(r8)
 80091ec:	44400115 	stw	r17,4(r8)
 80091f0:	d8c02015 	stw	r3,128(sp)
 80091f4:	d8801f15 	stw	r2,124(sp)
 80091f8:	010001c4 	movi	r4,7
 80091fc:	20bf3916 	blt	r4,r2,8008ee4 <__alt_data_end+0xfc008ee4>
 8009200:	42000204 	addi	r8,r8,8
 8009204:	003f3e06 	br	8008f00 <__alt_data_end+0xfc008f00>
 8009208:	010200b4 	movhi	r4,2050
 800920c:	210da284 	addi	r4,r4,13962
 8009210:	d9002b15 	stw	r4,172(sp)
 8009214:	003bf806 	br	80081f8 <__alt_data_end+0xfc0081f8>
 8009218:	d9002f17 	ldw	r4,188(sp)
 800921c:	b00b883a 	mov	r5,r22
 8009220:	b80d883a 	mov	r6,r23
 8009224:	80105dc0 	call	80105dc <__ssprint_r>
 8009228:	103aeb1e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 800922c:	d8c02017 	ldw	r3,128(sp)
 8009230:	da000404 	addi	r8,sp,16
 8009234:	003dc806 	br	8008958 <__alt_data_end+0xfc008958>
 8009238:	d8801f17 	ldw	r2,124(sp)
 800923c:	014200b4 	movhi	r5,2050
 8009240:	01000044 	movi	r4,1
 8009244:	18c00044 	addi	r3,r3,1
 8009248:	10800044 	addi	r2,r2,1
 800924c:	294da204 	addi	r5,r5,13960
 8009250:	41000115 	stw	r4,4(r8)
 8009254:	41400015 	stw	r5,0(r8)
 8009258:	d8c02015 	stw	r3,128(sp)
 800925c:	d8801f15 	stw	r2,124(sp)
 8009260:	010001c4 	movi	r4,7
 8009264:	2080ae16 	blt	r4,r2,8009520 <___svfprintf_internal_r+0x1a6c>
 8009268:	42000204 	addi	r8,r8,8
 800926c:	8000041e 	bne	r16,zero,8009280 <___svfprintf_internal_r+0x17cc>
 8009270:	d8803317 	ldw	r2,204(sp)
 8009274:	1000021e 	bne	r2,zero,8009280 <___svfprintf_internal_r+0x17cc>
 8009278:	e080004c 	andi	r2,fp,1
 800927c:	103bf526 	beq	r2,zero,8008254 <__alt_data_end+0xfc008254>
 8009280:	d9003917 	ldw	r4,228(sp)
 8009284:	d8801f17 	ldw	r2,124(sp)
 8009288:	d9403517 	ldw	r5,212(sp)
 800928c:	1907883a 	add	r3,r3,r4
 8009290:	10800044 	addi	r2,r2,1
 8009294:	41000115 	stw	r4,4(r8)
 8009298:	41400015 	stw	r5,0(r8)
 800929c:	d8c02015 	stw	r3,128(sp)
 80092a0:	d8801f15 	stw	r2,124(sp)
 80092a4:	010001c4 	movi	r4,7
 80092a8:	2081ac16 	blt	r4,r2,800995c <___svfprintf_internal_r+0x1ea8>
 80092ac:	42000204 	addi	r8,r8,8
 80092b0:	0421c83a 	sub	r16,zero,r16
 80092b4:	0400d60e 	bge	zero,r16,8009610 <___svfprintf_internal_r+0x1b5c>
 80092b8:	04400404 	movi	r17,16
 80092bc:	8c01190e 	bge	r17,r16,8009724 <___svfprintf_internal_r+0x1c70>
 80092c0:	014200b4 	movhi	r5,2050
 80092c4:	294da284 	addi	r5,r5,13962
 80092c8:	d9402b15 	stw	r5,172(sp)
 80092cc:	04c001c4 	movi	r19,7
 80092d0:	dc802f17 	ldw	r18,188(sp)
 80092d4:	00000306 	br	80092e4 <___svfprintf_internal_r+0x1830>
 80092d8:	42000204 	addi	r8,r8,8
 80092dc:	843ffc04 	addi	r16,r16,-16
 80092e0:	8c01130e 	bge	r17,r16,8009730 <___svfprintf_internal_r+0x1c7c>
 80092e4:	18c00404 	addi	r3,r3,16
 80092e8:	10800044 	addi	r2,r2,1
 80092ec:	45000015 	stw	r20,0(r8)
 80092f0:	44400115 	stw	r17,4(r8)
 80092f4:	d8c02015 	stw	r3,128(sp)
 80092f8:	d8801f15 	stw	r2,124(sp)
 80092fc:	98bff60e 	bge	r19,r2,80092d8 <__alt_data_end+0xfc0092d8>
 8009300:	9009883a 	mov	r4,r18
 8009304:	b00b883a 	mov	r5,r22
 8009308:	b80d883a 	mov	r6,r23
 800930c:	80105dc0 	call	80105dc <__ssprint_r>
 8009310:	103ab11e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8009314:	d8c02017 	ldw	r3,128(sp)
 8009318:	d8801f17 	ldw	r2,124(sp)
 800931c:	da000404 	addi	r8,sp,16
 8009320:	003fee06 	br	80092dc <__alt_data_end+0xfc0092dc>
 8009324:	d8802e17 	ldw	r2,184(sp)
 8009328:	d8c02d15 	stw	r3,180(sp)
 800932c:	0085c83a 	sub	r2,zero,r2
 8009330:	d8802e15 	stw	r2,184(sp)
 8009334:	e005883a 	mov	r2,fp
 8009338:	003aba06 	br	8007e24 <__alt_data_end+0xfc007e24>
 800933c:	e0800044 	addi	r2,fp,1
 8009340:	9cc00814 	ori	r19,r19,32
 8009344:	e4000047 	ldb	r16,1(fp)
 8009348:	003a3106 	br	8007c10 <__alt_data_end+0xfc007c10>
 800934c:	d9002f17 	ldw	r4,188(sp)
 8009350:	b00b883a 	mov	r5,r22
 8009354:	b80d883a 	mov	r6,r23
 8009358:	80105dc0 	call	80105dc <__ssprint_r>
 800935c:	103a9e1e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8009360:	d8c02017 	ldw	r3,128(sp)
 8009364:	da000404 	addi	r8,sp,16
 8009368:	003d8d06 	br	80089a0 <__alt_data_end+0xfc0089a0>
 800936c:	04fff7c4 	movi	r19,-33
 8009370:	00bfffc4 	movi	r2,-1
 8009374:	84e6703a 	and	r19,r16,r19
 8009378:	48807226 	beq	r9,r2,8009544 <___svfprintf_internal_r+0x1a90>
 800937c:	008011c4 	movi	r2,71
 8009380:	98818026 	beq	r19,r2,8009984 <___svfprintf_internal_r+0x1ed0>
 8009384:	d9003817 	ldw	r4,224(sp)
 8009388:	e0c04014 	ori	r3,fp,256
 800938c:	d8c02d15 	stw	r3,180(sp)
 8009390:	20017f16 	blt	r4,zero,8009990 <___svfprintf_internal_r+0x1edc>
 8009394:	dc403817 	ldw	r17,224(sp)
 8009398:	d8002a05 	stb	zero,168(sp)
 800939c:	00801984 	movi	r2,102
 80093a0:	8080ad26 	beq	r16,r2,8009658 <___svfprintf_internal_r+0x1ba4>
 80093a4:	00801184 	movi	r2,70
 80093a8:	8080ab26 	beq	r16,r2,8009658 <___svfprintf_internal_r+0x1ba4>
 80093ac:	00801144 	movi	r2,69
 80093b0:	98818426 	beq	r19,r2,80099c4 <___svfprintf_internal_r+0x1f10>
 80093b4:	482b883a 	mov	r21,r9
 80093b8:	d8802604 	addi	r2,sp,152
 80093bc:	d8800115 	stw	r2,4(sp)
 80093c0:	d9002f17 	ldw	r4,188(sp)
 80093c4:	d8802504 	addi	r2,sp,148
 80093c8:	d9403717 	ldw	r5,220(sp)
 80093cc:	d8800215 	stw	r2,8(sp)
 80093d0:	d8802104 	addi	r2,sp,132
 80093d4:	dd400015 	stw	r21,0(sp)
 80093d8:	d8800315 	stw	r2,12(sp)
 80093dc:	880d883a 	mov	r6,r17
 80093e0:	01c00084 	movi	r7,2
 80093e4:	da004015 	stw	r8,256(sp)
 80093e8:	da403f15 	stw	r9,252(sp)
 80093ec:	800bfec0 	call	800bfec <_dtoa_r>
 80093f0:	d8803115 	stw	r2,196(sp)
 80093f4:	008019c4 	movi	r2,103
 80093f8:	da004017 	ldw	r8,256(sp)
 80093fc:	da403f17 	ldw	r9,252(sp)
 8009400:	80800226 	beq	r16,r2,800940c <___svfprintf_internal_r+0x1958>
 8009404:	008011c4 	movi	r2,71
 8009408:	8080a51e 	bne	r16,r2,80096a0 <___svfprintf_internal_r+0x1bec>
 800940c:	e080004c 	andi	r2,fp,1
 8009410:	10017226 	beq	r2,zero,80099dc <___svfprintf_internal_r+0x1f28>
 8009414:	d8c03117 	ldw	r3,196(sp)
 8009418:	1d55883a 	add	r10,r3,r21
 800941c:	d9003717 	ldw	r4,220(sp)
 8009420:	880b883a 	mov	r5,r17
 8009424:	000d883a 	mov	r6,zero
 8009428:	000f883a 	mov	r7,zero
 800942c:	da004015 	stw	r8,256(sp)
 8009430:	da403f15 	stw	r9,252(sp)
 8009434:	da803e15 	stw	r10,248(sp)
 8009438:	8014e200 	call	8014e20 <__eqdf2>
 800943c:	da004017 	ldw	r8,256(sp)
 8009440:	da403f17 	ldw	r9,252(sp)
 8009444:	da803e17 	ldw	r10,248(sp)
 8009448:	1000fd26 	beq	r2,zero,8009840 <___svfprintf_internal_r+0x1d8c>
 800944c:	d8802117 	ldw	r2,132(sp)
 8009450:	1280062e 	bgeu	r2,r10,800946c <___svfprintf_internal_r+0x19b8>
 8009454:	01000c04 	movi	r4,48
 8009458:	10c00044 	addi	r3,r2,1
 800945c:	d8c02115 	stw	r3,132(sp)
 8009460:	11000005 	stb	r4,0(r2)
 8009464:	d8802117 	ldw	r2,132(sp)
 8009468:	12bffb36 	bltu	r2,r10,8009458 <__alt_data_end+0xfc009458>
 800946c:	d8c03117 	ldw	r3,196(sp)
 8009470:	10c5c83a 	sub	r2,r2,r3
 8009474:	d8803315 	stw	r2,204(sp)
 8009478:	008011c4 	movi	r2,71
 800947c:	9880e226 	beq	r19,r2,8009808 <___svfprintf_internal_r+0x1d54>
 8009480:	00801944 	movi	r2,101
 8009484:	1401a30e 	bge	r2,r16,8009b14 <___svfprintf_internal_r+0x2060>
 8009488:	d8c02617 	ldw	r3,152(sp)
 800948c:	00801984 	movi	r2,102
 8009490:	d8c03415 	stw	r3,208(sp)
 8009494:	80815326 	beq	r16,r2,80099e4 <___svfprintf_internal_r+0x1f30>
 8009498:	d8c03417 	ldw	r3,208(sp)
 800949c:	d9003317 	ldw	r4,204(sp)
 80094a0:	19013f16 	blt	r3,r4,80099a0 <___svfprintf_internal_r+0x1eec>
 80094a4:	e080004c 	andi	r2,fp,1
 80094a8:	10014826 	beq	r2,zero,80099cc <___svfprintf_internal_r+0x1f18>
 80094ac:	d8c03417 	ldw	r3,208(sp)
 80094b0:	1c400044 	addi	r17,r3,1
 80094b4:	8839883a 	mov	fp,r17
 80094b8:	88014016 	blt	r17,zero,80099bc <___svfprintf_internal_r+0x1f08>
 80094bc:	dd402a07 	ldb	r21,168(sp)
 80094c0:	a800c61e 	bne	r21,zero,80097dc <___svfprintf_internal_r+0x1d28>
 80094c4:	df002a15 	stw	fp,168(sp)
 80094c8:	dcc02783 	ldbu	r19,158(sp)
 80094cc:	df002d17 	ldw	fp,180(sp)
 80094d0:	d8003215 	stw	zero,200(sp)
 80094d4:	dc802d15 	stw	r18,180(sp)
 80094d8:	003ab906 	br	8007fc0 <__alt_data_end+0xfc007fc0>
 80094dc:	010200b4 	movhi	r4,2050
 80094e0:	210d9204 	addi	r4,r4,13896
 80094e4:	d9003115 	stw	r4,196(sp)
 80094e8:	003bbe06 	br	80083e4 <__alt_data_end+0xfc0083e4>
 80094ec:	d9002f17 	ldw	r4,188(sp)
 80094f0:	04001004 	movi	r16,64
 80094f4:	800b883a 	mov	r5,r16
 80094f8:	80069900 	call	8006990 <_malloc_r>
 80094fc:	b0800015 	stw	r2,0(r22)
 8009500:	b0800415 	stw	r2,16(r22)
 8009504:	10017c26 	beq	r2,zero,8009af8 <___svfprintf_internal_r+0x2044>
 8009508:	b4000515 	stw	r16,20(r22)
 800950c:	00398306 	br	8007b1c <__alt_data_end+0xfc007b1c>
 8009510:	014200b4 	movhi	r5,2050
 8009514:	294d9504 	addi	r5,r5,13908
 8009518:	d9403115 	stw	r5,196(sp)
 800951c:	003eef06 	br	80090dc <__alt_data_end+0xfc0090dc>
 8009520:	d9002f17 	ldw	r4,188(sp)
 8009524:	b00b883a 	mov	r5,r22
 8009528:	b80d883a 	mov	r6,r23
 800952c:	80105dc0 	call	80105dc <__ssprint_r>
 8009530:	103a291e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8009534:	dc002617 	ldw	r16,152(sp)
 8009538:	d8c02017 	ldw	r3,128(sp)
 800953c:	da000404 	addi	r8,sp,16
 8009540:	003f4a06 	br	800926c <__alt_data_end+0xfc00926c>
 8009544:	02400184 	movi	r9,6
 8009548:	003f8e06 	br	8009384 <__alt_data_end+0xfc009384>
 800954c:	d8c03117 	ldw	r3,196(sp)
 8009550:	b8e3c83a 	sub	r17,r23,r3
 8009554:	003a9506 	br	8007fac <__alt_data_end+0xfc007fac>
 8009558:	d8c02d17 	ldw	r3,180(sp)
 800955c:	002b883a 	mov	r21,zero
 8009560:	00800044 	movi	r2,1
 8009564:	1c800017 	ldw	r18,0(r3)
 8009568:	18c00104 	addi	r3,r3,4
 800956c:	d8c02d15 	stw	r3,180(sp)
 8009570:	9007883a 	mov	r3,r18
 8009574:	003bb406 	br	8008448 <__alt_data_end+0xfc008448>
 8009578:	d9002d17 	ldw	r4,180(sp)
 800957c:	002b883a 	mov	r21,zero
 8009580:	0005883a 	mov	r2,zero
 8009584:	24800017 	ldw	r18,0(r4)
 8009588:	21000104 	addi	r4,r4,4
 800958c:	d9002d15 	stw	r4,180(sp)
 8009590:	9007883a 	mov	r3,r18
 8009594:	003bac06 	br	8008448 <__alt_data_end+0xfc008448>
 8009598:	1c800017 	ldw	r18,0(r3)
 800959c:	d8c02d17 	ldw	r3,180(sp)
 80095a0:	902bd7fa 	srai	r21,r18,31
 80095a4:	18c00104 	addi	r3,r3,4
 80095a8:	d8c02d15 	stw	r3,180(sp)
 80095ac:	a805883a 	mov	r2,r21
 80095b0:	003a5706 	br	8007f10 <__alt_data_end+0xfc007f10>
 80095b4:	d9402d17 	ldw	r5,180(sp)
 80095b8:	14800017 	ldw	r18,0(r2)
 80095bc:	002b883a 	mov	r21,zero
 80095c0:	29400104 	addi	r5,r5,4
 80095c4:	d9402d15 	stw	r5,180(sp)
 80095c8:	003c0806 	br	80085ec <__alt_data_end+0xfc0085ec>
 80095cc:	e080100c 	andi	r2,fp,64
 80095d0:	10009426 	beq	r2,zero,8009824 <___svfprintf_internal_r+0x1d70>
 80095d4:	d9002d17 	ldw	r4,180(sp)
 80095d8:	d9403017 	ldw	r5,192(sp)
 80095dc:	20800017 	ldw	r2,0(r4)
 80095e0:	21000104 	addi	r4,r4,4
 80095e4:	d9002d15 	stw	r4,180(sp)
 80095e8:	1140000d 	sth	r5,0(r2)
 80095ec:	00395d06 	br	8007b64 <__alt_data_end+0xfc007b64>
 80095f0:	d9002f17 	ldw	r4,188(sp)
 80095f4:	b00b883a 	mov	r5,r22
 80095f8:	b80d883a 	mov	r6,r23
 80095fc:	80105dc0 	call	80105dc <__ssprint_r>
 8009600:	1039f51e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8009604:	d8c02017 	ldw	r3,128(sp)
 8009608:	d8801f17 	ldw	r2,124(sp)
 800960c:	da000404 	addi	r8,sp,16
 8009610:	d9403317 	ldw	r5,204(sp)
 8009614:	d9003117 	ldw	r4,196(sp)
 8009618:	10800044 	addi	r2,r2,1
 800961c:	28c7883a 	add	r3,r5,r3
 8009620:	41000015 	stw	r4,0(r8)
 8009624:	41400115 	stw	r5,4(r8)
 8009628:	d8c02015 	stw	r3,128(sp)
 800962c:	d8801f15 	stw	r2,124(sp)
 8009630:	010001c4 	movi	r4,7
 8009634:	20bb060e 	bge	r4,r2,8008250 <__alt_data_end+0xfc008250>
 8009638:	003d8306 	br	8008c48 <__alt_data_end+0xfc008c48>
 800963c:	da004015 	stw	r8,256(sp)
 8009640:	80079640 	call	8007964 <strlen>
 8009644:	1023883a 	mov	r17,r2
 8009648:	da004017 	ldw	r8,256(sp)
 800964c:	883c290e 	bge	r17,zero,80086f4 <__alt_data_end+0xfc0086f4>
 8009650:	0005883a 	mov	r2,zero
 8009654:	003c2706 	br	80086f4 <__alt_data_end+0xfc0086f4>
 8009658:	d8802604 	addi	r2,sp,152
 800965c:	d8800115 	stw	r2,4(sp)
 8009660:	d9002f17 	ldw	r4,188(sp)
 8009664:	d8802504 	addi	r2,sp,148
 8009668:	d9403717 	ldw	r5,220(sp)
 800966c:	d8800215 	stw	r2,8(sp)
 8009670:	d8802104 	addi	r2,sp,132
 8009674:	da400015 	stw	r9,0(sp)
 8009678:	d8800315 	stw	r2,12(sp)
 800967c:	880d883a 	mov	r6,r17
 8009680:	01c000c4 	movi	r7,3
 8009684:	da004015 	stw	r8,256(sp)
 8009688:	da403f15 	stw	r9,252(sp)
 800968c:	800bfec0 	call	800bfec <_dtoa_r>
 8009690:	da403f17 	ldw	r9,252(sp)
 8009694:	da004017 	ldw	r8,256(sp)
 8009698:	d8803115 	stw	r2,196(sp)
 800969c:	482b883a 	mov	r21,r9
 80096a0:	d8c03117 	ldw	r3,196(sp)
 80096a4:	00801184 	movi	r2,70
 80096a8:	1d55883a 	add	r10,r3,r21
 80096ac:	98bf5b1e 	bne	r19,r2,800941c <__alt_data_end+0xfc00941c>
 80096b0:	19000007 	ldb	r4,0(r3)
 80096b4:	00800c04 	movi	r2,48
 80096b8:	2080d826 	beq	r4,r2,8009a1c <___svfprintf_internal_r+0x1f68>
 80096bc:	d8c02617 	ldw	r3,152(sp)
 80096c0:	50d5883a 	add	r10,r10,r3
 80096c4:	003f5506 	br	800941c <__alt_data_end+0xfc00941c>
 80096c8:	010200b4 	movhi	r4,2050
 80096cc:	210da684 	addi	r4,r4,13978
 80096d0:	d9003615 	stw	r4,216(sp)
 80096d4:	003a7706 	br	80080b4 <__alt_data_end+0xfc0080b4>
 80096d8:	0023883a 	mov	r17,zero
 80096dc:	003da306 	br	8008d6c <__alt_data_end+0xfc008d6c>
 80096e0:	d9002f17 	ldw	r4,188(sp)
 80096e4:	b00b883a 	mov	r5,r22
 80096e8:	b80d883a 	mov	r6,r23
 80096ec:	80105dc0 	call	80105dc <__ssprint_r>
 80096f0:	1039b91e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 80096f4:	d8c02017 	ldw	r3,128(sp)
 80096f8:	da000404 	addi	r8,sp,16
 80096fc:	003d9a06 	br	8008d68 <__alt_data_end+0xfc008d68>
 8009700:	d9002f17 	ldw	r4,188(sp)
 8009704:	b00b883a 	mov	r5,r22
 8009708:	b80d883a 	mov	r6,r23
 800970c:	80105dc0 	call	80105dc <__ssprint_r>
 8009710:	1039b11e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8009714:	d8802617 	ldw	r2,152(sp)
 8009718:	d8c02017 	ldw	r3,128(sp)
 800971c:	da000404 	addi	r8,sp,16
 8009720:	003e0c06 	br	8008f54 <__alt_data_end+0xfc008f54>
 8009724:	010200b4 	movhi	r4,2050
 8009728:	210da284 	addi	r4,r4,13962
 800972c:	d9002b15 	stw	r4,172(sp)
 8009730:	d9002b17 	ldw	r4,172(sp)
 8009734:	1c07883a 	add	r3,r3,r16
 8009738:	10800044 	addi	r2,r2,1
 800973c:	41000015 	stw	r4,0(r8)
 8009740:	44000115 	stw	r16,4(r8)
 8009744:	d8c02015 	stw	r3,128(sp)
 8009748:	d8801f15 	stw	r2,124(sp)
 800974c:	010001c4 	movi	r4,7
 8009750:	20bfa716 	blt	r4,r2,80095f0 <__alt_data_end+0xfc0095f0>
 8009754:	42000204 	addi	r8,r8,8
 8009758:	003fad06 	br	8009610 <__alt_data_end+0xfc009610>
 800975c:	d9002f17 	ldw	r4,188(sp)
 8009760:	b00b883a 	mov	r5,r22
 8009764:	b80d883a 	mov	r6,r23
 8009768:	80105dc0 	call	80105dc <__ssprint_r>
 800976c:	10399a1e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8009770:	d8802617 	ldw	r2,152(sp)
 8009774:	d9403317 	ldw	r5,204(sp)
 8009778:	d8c02017 	ldw	r3,128(sp)
 800977c:	da000404 	addi	r8,sp,16
 8009780:	2885c83a 	sub	r2,r5,r2
 8009784:	003e0406 	br	8008f98 <__alt_data_end+0xfc008f98>
 8009788:	00800184 	movi	r2,6
 800978c:	1240012e 	bgeu	r2,r9,8009794 <___svfprintf_internal_r+0x1ce0>
 8009790:	1013883a 	mov	r9,r2
 8009794:	4823883a 	mov	r17,r9
 8009798:	4805883a 	mov	r2,r9
 800979c:	4800b616 	blt	r9,zero,8009a78 <___svfprintf_internal_r+0x1fc4>
 80097a0:	014200b4 	movhi	r5,2050
 80097a4:	294da004 	addi	r5,r5,13952
 80097a8:	d8802a15 	stw	r2,168(sp)
 80097ac:	dc802d15 	stw	r18,180(sp)
 80097b0:	d8003215 	stw	zero,200(sp)
 80097b4:	d8003415 	stw	zero,208(sp)
 80097b8:	d9403115 	stw	r5,196(sp)
 80097bc:	0005883a 	mov	r2,zero
 80097c0:	003a0606 	br	8007fdc <__alt_data_end+0xfc007fdc>
 80097c4:	0021883a 	mov	r16,zero
 80097c8:	003df406 	br	8008f9c <__alt_data_end+0xfc008f9c>
 80097cc:	014200b4 	movhi	r5,2050
 80097d0:	294da684 	addi	r5,r5,13978
 80097d4:	d9403615 	stw	r5,216(sp)
 80097d8:	003ac306 	br	80082e8 <__alt_data_end+0xfc0082e8>
 80097dc:	00800b44 	movi	r2,45
 80097e0:	d8802785 	stb	r2,158(sp)
 80097e4:	df002a15 	stw	fp,168(sp)
 80097e8:	d8003215 	stw	zero,200(sp)
 80097ec:	df002d17 	ldw	fp,180(sp)
 80097f0:	00800b44 	movi	r2,45
 80097f4:	dc802d15 	stw	r18,180(sp)
 80097f8:	0039f506 	br	8007fd0 <__alt_data_end+0xfc007fd0>
 80097fc:	04c00b44 	movi	r19,45
 8009800:	dcc02785 	stb	r19,158(sp)
 8009804:	003af206 	br	80083d0 <__alt_data_end+0xfc0083d0>
 8009808:	d8c02617 	ldw	r3,152(sp)
 800980c:	00bfff44 	movi	r2,-3
 8009810:	18801816 	blt	r3,r2,8009874 <___svfprintf_internal_r+0x1dc0>
 8009814:	48c01716 	blt	r9,r3,8009874 <___svfprintf_internal_r+0x1dc0>
 8009818:	d8c03415 	stw	r3,208(sp)
 800981c:	040019c4 	movi	r16,103
 8009820:	003f1d06 	br	8009498 <__alt_data_end+0xfc009498>
 8009824:	d8c02d17 	ldw	r3,180(sp)
 8009828:	d9003017 	ldw	r4,192(sp)
 800982c:	18800017 	ldw	r2,0(r3)
 8009830:	18c00104 	addi	r3,r3,4
 8009834:	d8c02d15 	stw	r3,180(sp)
 8009838:	11000015 	stw	r4,0(r2)
 800983c:	0038c906 	br	8007b64 <__alt_data_end+0xfc007b64>
 8009840:	5005883a 	mov	r2,r10
 8009844:	003f0906 	br	800946c <__alt_data_end+0xfc00946c>
 8009848:	010200b4 	movhi	r4,2050
 800984c:	210da284 	addi	r4,r4,13962
 8009850:	d9002b15 	stw	r4,172(sp)
 8009854:	003c9a06 	br	8008ac0 <__alt_data_end+0xfc008ac0>
 8009858:	da402a15 	stw	r9,168(sp)
 800985c:	dcc02783 	ldbu	r19,158(sp)
 8009860:	4823883a 	mov	r17,r9
 8009864:	dc802d15 	stw	r18,180(sp)
 8009868:	d8003215 	stw	zero,200(sp)
 800986c:	d8003415 	stw	zero,208(sp)
 8009870:	0039d306 	br	8007fc0 <__alt_data_end+0xfc007fc0>
 8009874:	843fff84 	addi	r16,r16,-2
 8009878:	1d7fffc4 	addi	r21,r3,-1
 800987c:	dd402615 	stw	r21,152(sp)
 8009880:	dc0022c5 	stb	r16,139(sp)
 8009884:	a8008f16 	blt	r21,zero,8009ac4 <___svfprintf_internal_r+0x2010>
 8009888:	00800ac4 	movi	r2,43
 800988c:	d8802305 	stb	r2,140(sp)
 8009890:	00800244 	movi	r2,9
 8009894:	1540710e 	bge	r2,r21,8009a5c <___svfprintf_internal_r+0x1fa8>
 8009898:	dcc022c4 	addi	r19,sp,139
 800989c:	dc002b15 	stw	r16,172(sp)
 80098a0:	4023883a 	mov	r17,r8
 80098a4:	9821883a 	mov	r16,r19
 80098a8:	a809883a 	mov	r4,r21
 80098ac:	01400284 	movi	r5,10
 80098b0:	8004ba40 	call	8004ba4 <__modsi3>
 80098b4:	10800c04 	addi	r2,r2,48
 80098b8:	843fffc4 	addi	r16,r16,-1
 80098bc:	a809883a 	mov	r4,r21
 80098c0:	01400284 	movi	r5,10
 80098c4:	80800005 	stb	r2,0(r16)
 80098c8:	8004b500 	call	8004b50 <__divsi3>
 80098cc:	01000244 	movi	r4,9
 80098d0:	102b883a 	mov	r21,r2
 80098d4:	20bff416 	blt	r4,r2,80098a8 <__alt_data_end+0xfc0098a8>
 80098d8:	8811883a 	mov	r8,r17
 80098dc:	10800c04 	addi	r2,r2,48
 80098e0:	8023883a 	mov	r17,r16
 80098e4:	897fffc4 	addi	r5,r17,-1
 80098e8:	88bfffc5 	stb	r2,-1(r17)
 80098ec:	dc002b17 	ldw	r16,172(sp)
 80098f0:	2cc08a2e 	bgeu	r5,r19,8009b1c <___svfprintf_internal_r+0x2068>
 80098f4:	d9802384 	addi	r6,sp,142
 80098f8:	344dc83a 	sub	r6,r6,r17
 80098fc:	d9002344 	addi	r4,sp,141
 8009900:	998d883a 	add	r6,r19,r6
 8009904:	00000106 	br	800990c <___svfprintf_internal_r+0x1e58>
 8009908:	28800003 	ldbu	r2,0(r5)
 800990c:	20800005 	stb	r2,0(r4)
 8009910:	21000044 	addi	r4,r4,1
 8009914:	29400044 	addi	r5,r5,1
 8009918:	21bffb1e 	bne	r4,r6,8009908 <__alt_data_end+0xfc009908>
 800991c:	d8802304 	addi	r2,sp,140
 8009920:	1445c83a 	sub	r2,r2,r17
 8009924:	d9402344 	addi	r5,sp,141
 8009928:	2885883a 	add	r2,r5,r2
 800992c:	14e7c83a 	sub	r19,r2,r19
 8009930:	d8803317 	ldw	r2,204(sp)
 8009934:	d8c03317 	ldw	r3,204(sp)
 8009938:	dcc03a15 	stw	r19,232(sp)
 800993c:	14e3883a 	add	r17,r2,r19
 8009940:	00800044 	movi	r2,1
 8009944:	10c0690e 	bge	r2,r3,8009aec <___svfprintf_internal_r+0x2038>
 8009948:	8c400044 	addi	r17,r17,1
 800994c:	8839883a 	mov	fp,r17
 8009950:	88006416 	blt	r17,zero,8009ae4 <___svfprintf_internal_r+0x2030>
 8009954:	d8003415 	stw	zero,208(sp)
 8009958:	003ed806 	br	80094bc <__alt_data_end+0xfc0094bc>
 800995c:	d9002f17 	ldw	r4,188(sp)
 8009960:	b00b883a 	mov	r5,r22
 8009964:	b80d883a 	mov	r6,r23
 8009968:	80105dc0 	call	80105dc <__ssprint_r>
 800996c:	10391a1e 	bne	r2,zero,8007dd8 <__alt_data_end+0xfc007dd8>
 8009970:	dc002617 	ldw	r16,152(sp)
 8009974:	d8c02017 	ldw	r3,128(sp)
 8009978:	d8801f17 	ldw	r2,124(sp)
 800997c:	da000404 	addi	r8,sp,16
 8009980:	003e4b06 	br	80092b0 <__alt_data_end+0xfc0092b0>
 8009984:	483e7f1e 	bne	r9,zero,8009384 <__alt_data_end+0xfc009384>
 8009988:	8813883a 	mov	r9,r17
 800998c:	003e7d06 	br	8009384 <__alt_data_end+0xfc009384>
 8009990:	00c00b44 	movi	r3,45
 8009994:	2460003c 	xorhi	r17,r4,32768
 8009998:	d8c02a05 	stb	r3,168(sp)
 800999c:	003e7f06 	br	800939c <__alt_data_end+0xfc00939c>
 80099a0:	d8c03417 	ldw	r3,208(sp)
 80099a4:	00c03e0e 	bge	zero,r3,8009aa0 <___svfprintf_internal_r+0x1fec>
 80099a8:	04400044 	movi	r17,1
 80099ac:	d9003317 	ldw	r4,204(sp)
 80099b0:	8923883a 	add	r17,r17,r4
 80099b4:	8839883a 	mov	fp,r17
 80099b8:	883ec00e 	bge	r17,zero,80094bc <__alt_data_end+0xfc0094bc>
 80099bc:	0039883a 	mov	fp,zero
 80099c0:	003ebe06 	br	80094bc <__alt_data_end+0xfc0094bc>
 80099c4:	4d400044 	addi	r21,r9,1
 80099c8:	003e7b06 	br	80093b8 <__alt_data_end+0xfc0093b8>
 80099cc:	1839883a 	mov	fp,r3
 80099d0:	18004e16 	blt	r3,zero,8009b0c <___svfprintf_internal_r+0x2058>
 80099d4:	dc403417 	ldw	r17,208(sp)
 80099d8:	003eb806 	br	80094bc <__alt_data_end+0xfc0094bc>
 80099dc:	d8802117 	ldw	r2,132(sp)
 80099e0:	003ea206 	br	800946c <__alt_data_end+0xfc00946c>
 80099e4:	00c0310e 	bge	zero,r3,8009aac <___svfprintf_internal_r+0x1ff8>
 80099e8:	4800021e 	bne	r9,zero,80099f4 <___svfprintf_internal_r+0x1f40>
 80099ec:	e080004c 	andi	r2,fp,1
 80099f0:	103ff626 	beq	r2,zero,80099cc <__alt_data_end+0xfc0099cc>
 80099f4:	d8c03417 	ldw	r3,208(sp)
 80099f8:	4a400044 	addi	r9,r9,1
 80099fc:	1a63883a 	add	r17,r3,r9
 8009a00:	8839883a 	mov	fp,r17
 8009a04:	883ead0e 	bge	r17,zero,80094bc <__alt_data_end+0xfc0094bc>
 8009a08:	003fec06 	br	80099bc <__alt_data_end+0xfc0099bc>
 8009a0c:	010200b4 	movhi	r4,2050
 8009a10:	210da284 	addi	r4,r4,13962
 8009a14:	d9002b15 	stw	r4,172(sp)
 8009a18:	003d2006 	br	8008e9c <__alt_data_end+0xfc008e9c>
 8009a1c:	d9003717 	ldw	r4,220(sp)
 8009a20:	880b883a 	mov	r5,r17
 8009a24:	000d883a 	mov	r6,zero
 8009a28:	000f883a 	mov	r7,zero
 8009a2c:	da004015 	stw	r8,256(sp)
 8009a30:	da403f15 	stw	r9,252(sp)
 8009a34:	da803e15 	stw	r10,248(sp)
 8009a38:	8014e200 	call	8014e20 <__eqdf2>
 8009a3c:	da004017 	ldw	r8,256(sp)
 8009a40:	da403f17 	ldw	r9,252(sp)
 8009a44:	da803e17 	ldw	r10,248(sp)
 8009a48:	103f1c26 	beq	r2,zero,80096bc <__alt_data_end+0xfc0096bc>
 8009a4c:	00800044 	movi	r2,1
 8009a50:	1547c83a 	sub	r3,r2,r21
 8009a54:	d8c02615 	stw	r3,152(sp)
 8009a58:	003f1906 	br	80096c0 <__alt_data_end+0xfc0096c0>
 8009a5c:	00800c04 	movi	r2,48
 8009a60:	a8c00c04 	addi	r3,r21,48
 8009a64:	d8802345 	stb	r2,141(sp)
 8009a68:	d8c02385 	stb	r3,142(sp)
 8009a6c:	d88023c4 	addi	r2,sp,143
 8009a70:	dcc022c4 	addi	r19,sp,139
 8009a74:	003fad06 	br	800992c <__alt_data_end+0xfc00992c>
 8009a78:	0005883a 	mov	r2,zero
 8009a7c:	003f4806 	br	80097a0 <__alt_data_end+0xfc0097a0>
 8009a80:	d9402d17 	ldw	r5,180(sp)
 8009a84:	2a400017 	ldw	r9,0(r5)
 8009a88:	28c00104 	addi	r3,r5,4
 8009a8c:	d8c02d15 	stw	r3,180(sp)
 8009a90:	483e2c0e 	bge	r9,zero,8009344 <__alt_data_end+0xfc009344>
 8009a94:	027fffc4 	movi	r9,-1
 8009a98:	e4000047 	ldb	r16,1(fp)
 8009a9c:	00385c06 	br	8007c10 <__alt_data_end+0xfc007c10>
 8009aa0:	04400084 	movi	r17,2
 8009aa4:	88e3c83a 	sub	r17,r17,r3
 8009aa8:	003fc006 	br	80099ac <__alt_data_end+0xfc0099ac>
 8009aac:	4800091e 	bne	r9,zero,8009ad4 <___svfprintf_internal_r+0x2020>
 8009ab0:	e080004c 	andi	r2,fp,1
 8009ab4:	1000071e 	bne	r2,zero,8009ad4 <___svfprintf_internal_r+0x2020>
 8009ab8:	07000044 	movi	fp,1
 8009abc:	e023883a 	mov	r17,fp
 8009ac0:	003e7e06 	br	80094bc <__alt_data_end+0xfc0094bc>
 8009ac4:	00800b44 	movi	r2,45
 8009ac8:	056bc83a 	sub	r21,zero,r21
 8009acc:	d8802305 	stb	r2,140(sp)
 8009ad0:	003f6f06 	br	8009890 <__alt_data_end+0xfc009890>
 8009ad4:	4c400084 	addi	r17,r9,2
 8009ad8:	8839883a 	mov	fp,r17
 8009adc:	883e770e 	bge	r17,zero,80094bc <__alt_data_end+0xfc0094bc>
 8009ae0:	003fb606 	br	80099bc <__alt_data_end+0xfc0099bc>
 8009ae4:	0039883a 	mov	fp,zero
 8009ae8:	003f9a06 	br	8009954 <__alt_data_end+0xfc009954>
 8009aec:	e084703a 	and	r2,fp,r2
 8009af0:	103f9626 	beq	r2,zero,800994c <__alt_data_end+0xfc00994c>
 8009af4:	003f9406 	br	8009948 <__alt_data_end+0xfc009948>
 8009af8:	d8c02f17 	ldw	r3,188(sp)
 8009afc:	00800304 	movi	r2,12
 8009b00:	18800015 	stw	r2,0(r3)
 8009b04:	00bfffc4 	movi	r2,-1
 8009b08:	0038b706 	br	8007de8 <__alt_data_end+0xfc007de8>
 8009b0c:	0039883a 	mov	fp,zero
 8009b10:	003fb006 	br	80099d4 <__alt_data_end+0xfc0099d4>
 8009b14:	d8c02617 	ldw	r3,152(sp)
 8009b18:	003f5706 	br	8009878 <__alt_data_end+0xfc009878>
 8009b1c:	d8802344 	addi	r2,sp,141
 8009b20:	003f8206 	br	800992c <__alt_data_end+0xfc00992c>

08009b24 <time>:
 8009b24:	008200b4 	movhi	r2,2050
 8009b28:	defffc04 	addi	sp,sp,-16
 8009b2c:	1094e104 	addi	r2,r2,21380
 8009b30:	dc000215 	stw	r16,8(sp)
 8009b34:	2021883a 	mov	r16,r4
 8009b38:	11000017 	ldw	r4,0(r2)
 8009b3c:	d80b883a 	mov	r5,sp
 8009b40:	000d883a 	mov	r6,zero
 8009b44:	dfc00315 	stw	ra,12(sp)
 8009b48:	800e7480 	call	800e748 <_gettimeofday_r>
 8009b4c:	10000716 	blt	r2,zero,8009b6c <time+0x48>
 8009b50:	d8800017 	ldw	r2,0(sp)
 8009b54:	80000126 	beq	r16,zero,8009b5c <time+0x38>
 8009b58:	80800015 	stw	r2,0(r16)
 8009b5c:	dfc00317 	ldw	ra,12(sp)
 8009b60:	dc000217 	ldw	r16,8(sp)
 8009b64:	dec00404 	addi	sp,sp,16
 8009b68:	f800283a 	ret
 8009b6c:	00bfffc4 	movi	r2,-1
 8009b70:	003ffa06 	br	8009b5c <__alt_data_end+0xfc009b5c>

08009b74 <___vfprintf_internal_r>:
 8009b74:	defeb604 	addi	sp,sp,-1320
 8009b78:	dfc14915 	stw	ra,1316(sp)
 8009b7c:	ddc14715 	stw	r23,1308(sp)
 8009b80:	dd814615 	stw	r22,1304(sp)
 8009b84:	202f883a 	mov	r23,r4
 8009b88:	282d883a 	mov	r22,r5
 8009b8c:	d9812a15 	stw	r6,1192(sp)
 8009b90:	d9c12d15 	stw	r7,1204(sp)
 8009b94:	df014815 	stw	fp,1312(sp)
 8009b98:	dd414515 	stw	r21,1300(sp)
 8009b9c:	dd014415 	stw	r20,1296(sp)
 8009ba0:	dcc14315 	stw	r19,1292(sp)
 8009ba4:	dc814215 	stw	r18,1288(sp)
 8009ba8:	dc414115 	stw	r17,1284(sp)
 8009bac:	dc014015 	stw	r16,1280(sp)
 8009bb0:	800e84c0 	call	800e84c <_localeconv_r>
 8009bb4:	10800017 	ldw	r2,0(r2)
 8009bb8:	1009883a 	mov	r4,r2
 8009bbc:	d8813515 	stw	r2,1236(sp)
 8009bc0:	80079640 	call	8007964 <strlen>
 8009bc4:	d8813815 	stw	r2,1248(sp)
 8009bc8:	b8000226 	beq	r23,zero,8009bd4 <___vfprintf_internal_r+0x60>
 8009bcc:	b8800e17 	ldw	r2,56(r23)
 8009bd0:	10010526 	beq	r2,zero,8009fe8 <___vfprintf_internal_r+0x474>
 8009bd4:	b0c0030b 	ldhu	r3,12(r22)
 8009bd8:	1908000c 	andi	r4,r3,8192
 8009bdc:	1805883a 	mov	r2,r3
 8009be0:	2000071e 	bne	r4,zero,8009c00 <___vfprintf_internal_r+0x8c>
 8009be4:	b1001917 	ldw	r4,100(r22)
 8009be8:	18880014 	ori	r2,r3,8192
 8009bec:	00f7ffc4 	movi	r3,-8193
 8009bf0:	20c8703a 	and	r4,r4,r3
 8009bf4:	b080030d 	sth	r2,12(r22)
 8009bf8:	1007883a 	mov	r3,r2
 8009bfc:	b1001915 	stw	r4,100(r22)
 8009c00:	1100020c 	andi	r4,r2,8
 8009c04:	2000a826 	beq	r4,zero,8009ea8 <___vfprintf_internal_r+0x334>
 8009c08:	b1000417 	ldw	r4,16(r22)
 8009c0c:	2000a626 	beq	r4,zero,8009ea8 <___vfprintf_internal_r+0x334>
 8009c10:	1080068c 	andi	r2,r2,26
 8009c14:	01000284 	movi	r4,10
 8009c18:	1100ac26 	beq	r2,r4,8009ecc <___vfprintf_internal_r+0x358>
 8009c1c:	d8c10e04 	addi	r3,sp,1080
 8009c20:	d9010dc4 	addi	r4,sp,1079
 8009c24:	d9400404 	addi	r5,sp,16
 8009c28:	050200b4 	movhi	r20,2050
 8009c2c:	1905c83a 	sub	r2,r3,r4
 8009c30:	a50daa84 	addi	r20,r20,13994
 8009c34:	d8c12815 	stw	r3,1184(sp)
 8009c38:	d9012915 	stw	r4,1188(sp)
 8009c3c:	d9411e15 	stw	r5,1144(sp)
 8009c40:	d8012015 	stw	zero,1152(sp)
 8009c44:	d8011f15 	stw	zero,1148(sp)
 8009c48:	d8013315 	stw	zero,1228(sp)
 8009c4c:	d8013715 	stw	zero,1244(sp)
 8009c50:	d8013915 	stw	zero,1252(sp)
 8009c54:	d8013b15 	stw	zero,1260(sp)
 8009c58:	d8013a15 	stw	zero,1256(sp)
 8009c5c:	d8012f15 	stw	zero,1212(sp)
 8009c60:	2811883a 	mov	r8,r5
 8009c64:	d8813c15 	stw	r2,1264(sp)
 8009c68:	d8c12a17 	ldw	r3,1192(sp)
 8009c6c:	18800007 	ldb	r2,0(r3)
 8009c70:	10021326 	beq	r2,zero,800a4c0 <___vfprintf_internal_r+0x94c>
 8009c74:	00c00944 	movi	r3,37
 8009c78:	dc012a17 	ldw	r16,1192(sp)
 8009c7c:	10c0021e 	bne	r2,r3,8009c88 <___vfprintf_internal_r+0x114>
 8009c80:	00001606 	br	8009cdc <___vfprintf_internal_r+0x168>
 8009c84:	10c08526 	beq	r2,r3,8009e9c <___vfprintf_internal_r+0x328>
 8009c88:	84000044 	addi	r16,r16,1
 8009c8c:	80800007 	ldb	r2,0(r16)
 8009c90:	103ffc1e 	bne	r2,zero,8009c84 <__alt_data_end+0xfc009c84>
 8009c94:	d9012a17 	ldw	r4,1192(sp)
 8009c98:	8123c83a 	sub	r17,r16,r4
 8009c9c:	88000f26 	beq	r17,zero,8009cdc <___vfprintf_internal_r+0x168>
 8009ca0:	d8812a17 	ldw	r2,1192(sp)
 8009ca4:	d8c12017 	ldw	r3,1152(sp)
 8009ca8:	44400115 	stw	r17,4(r8)
 8009cac:	40800015 	stw	r2,0(r8)
 8009cb0:	d8811f17 	ldw	r2,1148(sp)
 8009cb4:	1c47883a 	add	r3,r3,r17
 8009cb8:	d8c12015 	stw	r3,1152(sp)
 8009cbc:	10800044 	addi	r2,r2,1
 8009cc0:	d8811f15 	stw	r2,1148(sp)
 8009cc4:	00c001c4 	movi	r3,7
 8009cc8:	1880b516 	blt	r3,r2,8009fa0 <___vfprintf_internal_r+0x42c>
 8009ccc:	42000204 	addi	r8,r8,8
 8009cd0:	d8c12f17 	ldw	r3,1212(sp)
 8009cd4:	1c47883a 	add	r3,r3,r17
 8009cd8:	d8c12f15 	stw	r3,1212(sp)
 8009cdc:	80800007 	ldb	r2,0(r16)
 8009ce0:	1000b626 	beq	r2,zero,8009fbc <___vfprintf_internal_r+0x448>
 8009ce4:	80800044 	addi	r2,r16,1
 8009ce8:	84000047 	ldb	r16,1(r16)
 8009cec:	0027883a 	mov	r19,zero
 8009cf0:	0039883a 	mov	fp,zero
 8009cf4:	dcc12b05 	stb	r19,1196(sp)
 8009cf8:	d8012785 	stb	zero,1182(sp)
 8009cfc:	027fffc4 	movi	r9,-1
 8009d00:	d8012e15 	stw	zero,1208(sp)
 8009d04:	04401604 	movi	r17,88
 8009d08:	04800244 	movi	r18,9
 8009d0c:	da012a15 	stw	r8,1192(sp)
 8009d10:	e027883a 	mov	r19,fp
 8009d14:	17000044 	addi	fp,r2,1
 8009d18:	80bff804 	addi	r2,r16,-32
 8009d1c:	88831236 	bltu	r17,r2,800a968 <___vfprintf_internal_r+0xdf4>
 8009d20:	100490ba 	slli	r2,r2,2
 8009d24:	01020074 	movhi	r4,2049
 8009d28:	21274e04 	addi	r4,r4,-25288
 8009d2c:	1105883a 	add	r2,r2,r4
 8009d30:	10800017 	ldw	r2,0(r2)
 8009d34:	1000683a 	jmp	r2
 8009d38:	0800a884 	addi	zero,at,674
 8009d3c:	0800a968 	cmpgeui	zero,at,677
 8009d40:	0800a968 	cmpgeui	zero,at,677
 8009d44:	0800a8a0 	cmpeqi	zero,at,674
 8009d48:	0800a968 	cmpgeui	zero,at,677
 8009d4c:	0800a968 	cmpgeui	zero,at,677
 8009d50:	0800a968 	cmpgeui	zero,at,677
 8009d54:	0800a968 	cmpgeui	zero,at,677
 8009d58:	0800a968 	cmpgeui	zero,at,677
 8009d5c:	0800a968 	cmpgeui	zero,at,677
 8009d60:	0800a8b0 	cmpltui	zero,at,674
 8009d64:	0800a8d8 	cmpnei	zero,at,675
 8009d68:	0800a968 	cmpgeui	zero,at,677
 8009d6c:	08009ff4 	orhi	zero,at,639
 8009d70:	0800a004 	addi	zero,at,640
 8009d74:	0800a968 	cmpgeui	zero,at,677
 8009d78:	0800a054 	ori	zero,at,641
 8009d7c:	0800a064 	muli	zero,at,641
 8009d80:	0800a064 	muli	zero,at,641
 8009d84:	0800a064 	muli	zero,at,641
 8009d88:	0800a064 	muli	zero,at,641
 8009d8c:	0800a064 	muli	zero,at,641
 8009d90:	0800a064 	muli	zero,at,641
 8009d94:	0800a064 	muli	zero,at,641
 8009d98:	0800a064 	muli	zero,at,641
 8009d9c:	0800a064 	muli	zero,at,641
 8009da0:	0800a968 	cmpgeui	zero,at,677
 8009da4:	0800a968 	cmpgeui	zero,at,677
 8009da8:	0800a968 	cmpgeui	zero,at,677
 8009dac:	0800a968 	cmpgeui	zero,at,677
 8009db0:	0800a968 	cmpgeui	zero,at,677
 8009db4:	0800a968 	cmpgeui	zero,at,677
 8009db8:	0800a968 	cmpgeui	zero,at,677
 8009dbc:	0800a968 	cmpgeui	zero,at,677
 8009dc0:	0800a968 	cmpgeui	zero,at,677
 8009dc4:	0800a968 	cmpgeui	zero,at,677
 8009dc8:	0800a0a8 	cmpgeui	zero,at,642
 8009dcc:	0800a4c8 	cmpgei	zero,at,659
 8009dd0:	0800a968 	cmpgeui	zero,at,677
 8009dd4:	0800a4c8 	cmpgei	zero,at,659
 8009dd8:	0800a968 	cmpgeui	zero,at,677
 8009ddc:	0800a968 	cmpgeui	zero,at,677
 8009de0:	0800a968 	cmpgeui	zero,at,677
 8009de4:	0800a968 	cmpgeui	zero,at,677
 8009de8:	0800a570 	cmpltui	zero,at,661
 8009dec:	0800a968 	cmpgeui	zero,at,677
 8009df0:	0800a968 	cmpgeui	zero,at,677
 8009df4:	0800a580 	call	800a58 <__alt_mem_sdram-0x77ff5a8>
 8009df8:	0800a968 	cmpgeui	zero,at,677
 8009dfc:	0800a968 	cmpgeui	zero,at,677
 8009e00:	0800a968 	cmpgeui	zero,at,677
 8009e04:	0800a968 	cmpgeui	zero,at,677
 8009e08:	0800a968 	cmpgeui	zero,at,677
 8009e0c:	0800a5c4 	addi	zero,at,663
 8009e10:	0800a968 	cmpgeui	zero,at,677
 8009e14:	0800a968 	cmpgeui	zero,at,677
 8009e18:	0800a5fc 	xorhi	zero,at,663
 8009e1c:	0800a968 	cmpgeui	zero,at,677
 8009e20:	0800a968 	cmpgeui	zero,at,677
 8009e24:	0800a968 	cmpgeui	zero,at,677
 8009e28:	0800a968 	cmpgeui	zero,at,677
 8009e2c:	0800a968 	cmpgeui	zero,at,677
 8009e30:	0800a968 	cmpgeui	zero,at,677
 8009e34:	0800a968 	cmpgeui	zero,at,677
 8009e38:	0800a968 	cmpgeui	zero,at,677
 8009e3c:	0800a968 	cmpgeui	zero,at,677
 8009e40:	0800a968 	cmpgeui	zero,at,677
 8009e44:	0800a838 	rdprs	zero,at,672
 8009e48:	0800a7e4 	muli	zero,at,671
 8009e4c:	0800a4c8 	cmpgei	zero,at,659
 8009e50:	0800a4c8 	cmpgei	zero,at,659
 8009e54:	0800a4c8 	cmpgei	zero,at,659
 8009e58:	0800a828 	cmpgeui	zero,at,672
 8009e5c:	0800a7e4 	muli	zero,at,671
 8009e60:	0800a968 	cmpgeui	zero,at,677
 8009e64:	0800a968 	cmpgeui	zero,at,677
 8009e68:	0800a700 	call	800a70 <__alt_mem_sdram-0x77ff590>
 8009e6c:	0800a968 	cmpgeui	zero,at,677
 8009e70:	0800a718 	cmpnei	zero,at,668
 8009e74:	0800a758 	cmpnei	zero,at,669
 8009e78:	0800a798 	cmpnei	zero,at,670
 8009e7c:	0800a664 	muli	zero,at,665
 8009e80:	0800a968 	cmpgeui	zero,at,677
 8009e84:	0800a8ec 	andhi	zero,at,675
 8009e88:	0800a968 	cmpgeui	zero,at,677
 8009e8c:	0800a674 	orhi	zero,at,665
 8009e90:	0800a968 	cmpgeui	zero,at,677
 8009e94:	0800a968 	cmpgeui	zero,at,677
 8009e98:	0800a6b4 	orhi	zero,at,666
 8009e9c:	d9412a17 	ldw	r5,1192(sp)
 8009ea0:	8163c83a 	sub	r17,r16,r5
 8009ea4:	003f7d06 	br	8009c9c <__alt_data_end+0xfc009c9c>
 8009ea8:	b809883a 	mov	r4,r23
 8009eac:	b00b883a 	mov	r5,r22
 8009eb0:	800bc940 	call	800bc94 <__swsetup_r>
 8009eb4:	10002d1e 	bne	r2,zero,8009f6c <___vfprintf_internal_r+0x3f8>
 8009eb8:	b0c0030b 	ldhu	r3,12(r22)
 8009ebc:	01000284 	movi	r4,10
 8009ec0:	1805883a 	mov	r2,r3
 8009ec4:	1080068c 	andi	r2,r2,26
 8009ec8:	113f541e 	bne	r2,r4,8009c1c <__alt_data_end+0xfc009c1c>
 8009ecc:	b080038b 	ldhu	r2,14(r22)
 8009ed0:	113fffcc 	andi	r4,r2,65535
 8009ed4:	2120001c 	xori	r4,r4,32768
 8009ed8:	21200004 	addi	r4,r4,-32768
 8009edc:	203f4f16 	blt	r4,zero,8009c1c <__alt_data_end+0xfc009c1c>
 8009ee0:	b2c01917 	ldw	r11,100(r22)
 8009ee4:	b2800717 	ldw	r10,28(r22)
 8009ee8:	b2400917 	ldw	r9,36(r22)
 8009eec:	d9812a17 	ldw	r6,1192(sp)
 8009ef0:	d9c12d17 	ldw	r7,1204(sp)
 8009ef4:	02010004 	movi	r8,1024
 8009ef8:	18ffff4c 	andi	r3,r3,65533
 8009efc:	d881078d 	sth	r2,1054(sp)
 8009f00:	b809883a 	mov	r4,r23
 8009f04:	d8800404 	addi	r2,sp,16
 8009f08:	d9410404 	addi	r5,sp,1040
 8009f0c:	d8c1070d 	sth	r3,1052(sp)
 8009f10:	dac11d15 	stw	r11,1140(sp)
 8009f14:	da810b15 	stw	r10,1068(sp)
 8009f18:	da410d15 	stw	r9,1076(sp)
 8009f1c:	d8810415 	stw	r2,1040(sp)
 8009f20:	d8810815 	stw	r2,1056(sp)
 8009f24:	da010615 	stw	r8,1048(sp)
 8009f28:	da010915 	stw	r8,1060(sp)
 8009f2c:	d8010a15 	stw	zero,1064(sp)
 8009f30:	8009b740 	call	8009b74 <___vfprintf_internal_r>
 8009f34:	1021883a 	mov	r16,r2
 8009f38:	10000416 	blt	r2,zero,8009f4c <___vfprintf_internal_r+0x3d8>
 8009f3c:	b809883a 	mov	r4,r23
 8009f40:	d9410404 	addi	r5,sp,1040
 8009f44:	800d7140 	call	800d714 <_fflush_r>
 8009f48:	1007301e 	bne	r2,zero,800bc0c <___vfprintf_internal_r+0x2098>
 8009f4c:	d881070b 	ldhu	r2,1052(sp)
 8009f50:	1080100c 	andi	r2,r2,64
 8009f54:	10000326 	beq	r2,zero,8009f64 <___vfprintf_internal_r+0x3f0>
 8009f58:	b080030b 	ldhu	r2,12(r22)
 8009f5c:	10801014 	ori	r2,r2,64
 8009f60:	b080030d 	sth	r2,12(r22)
 8009f64:	8005883a 	mov	r2,r16
 8009f68:	00000106 	br	8009f70 <___vfprintf_internal_r+0x3fc>
 8009f6c:	00bfffc4 	movi	r2,-1
 8009f70:	dfc14917 	ldw	ra,1316(sp)
 8009f74:	df014817 	ldw	fp,1312(sp)
 8009f78:	ddc14717 	ldw	r23,1308(sp)
 8009f7c:	dd814617 	ldw	r22,1304(sp)
 8009f80:	dd414517 	ldw	r21,1300(sp)
 8009f84:	dd014417 	ldw	r20,1296(sp)
 8009f88:	dcc14317 	ldw	r19,1292(sp)
 8009f8c:	dc814217 	ldw	r18,1288(sp)
 8009f90:	dc414117 	ldw	r17,1284(sp)
 8009f94:	dc014017 	ldw	r16,1280(sp)
 8009f98:	dec14a04 	addi	sp,sp,1320
 8009f9c:	f800283a 	ret
 8009fa0:	b809883a 	mov	r4,r23
 8009fa4:	b00b883a 	mov	r5,r22
 8009fa8:	d9811e04 	addi	r6,sp,1144
 8009fac:	8011a700 	call	8011a70 <__sprint_r>
 8009fb0:	1000081e 	bne	r2,zero,8009fd4 <___vfprintf_internal_r+0x460>
 8009fb4:	da000404 	addi	r8,sp,16
 8009fb8:	003f4506 	br	8009cd0 <__alt_data_end+0xfc009cd0>
 8009fbc:	d8812017 	ldw	r2,1152(sp)
 8009fc0:	10000426 	beq	r2,zero,8009fd4 <___vfprintf_internal_r+0x460>
 8009fc4:	b809883a 	mov	r4,r23
 8009fc8:	b00b883a 	mov	r5,r22
 8009fcc:	d9811e04 	addi	r6,sp,1144
 8009fd0:	8011a700 	call	8011a70 <__sprint_r>
 8009fd4:	b080030b 	ldhu	r2,12(r22)
 8009fd8:	1080100c 	andi	r2,r2,64
 8009fdc:	103fe31e 	bne	r2,zero,8009f6c <__alt_data_end+0xfc009f6c>
 8009fe0:	d8812f17 	ldw	r2,1212(sp)
 8009fe4:	003fe206 	br	8009f70 <__alt_data_end+0xfc009f70>
 8009fe8:	b809883a 	mov	r4,r23
 8009fec:	800dcd00 	call	800dcd0 <__sinit>
 8009ff0:	003ef806 	br	8009bd4 <__alt_data_end+0xfc009bd4>
 8009ff4:	e005883a 	mov	r2,fp
 8009ff8:	9cc00114 	ori	r19,r19,4
 8009ffc:	e4000007 	ldb	r16,0(fp)
 800a000:	003f4406 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a004:	e4000007 	ldb	r16,0(fp)
 800a008:	01000a84 	movi	r4,42
 800a00c:	e0800044 	addi	r2,fp,1
 800a010:	8106f626 	beq	r16,r4,800bbec <___vfprintf_internal_r+0x2078>
 800a014:	857ff404 	addi	r21,r16,-48
 800a018:	1039883a 	mov	fp,r2
 800a01c:	0013883a 	mov	r9,zero
 800a020:	957f3d36 	bltu	r18,r21,8009d18 <__alt_data_end+0xfc009d18>
 800a024:	0009883a 	mov	r4,zero
 800a028:	01400284 	movi	r5,10
 800a02c:	8004c100 	call	8004c10 <__mulsi3>
 800a030:	e4000007 	ldb	r16,0(fp)
 800a034:	a889883a 	add	r4,r21,r2
 800a038:	e7000044 	addi	fp,fp,1
 800a03c:	857ff404 	addi	r21,r16,-48
 800a040:	957ff92e 	bgeu	r18,r21,800a028 <__alt_data_end+0xfc00a028>
 800a044:	2013883a 	mov	r9,r4
 800a048:	203f330e 	bge	r4,zero,8009d18 <__alt_data_end+0xfc009d18>
 800a04c:	027fffc4 	movi	r9,-1
 800a050:	003f3106 	br	8009d18 <__alt_data_end+0xfc009d18>
 800a054:	9cc02014 	ori	r19,r19,128
 800a058:	e005883a 	mov	r2,fp
 800a05c:	e4000007 	ldb	r16,0(fp)
 800a060:	003f2c06 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a064:	857ff404 	addi	r21,r16,-48
 800a068:	d8012e15 	stw	zero,1208(sp)
 800a06c:	e021883a 	mov	r16,fp
 800a070:	0009883a 	mov	r4,zero
 800a074:	da412c15 	stw	r9,1200(sp)
 800a078:	01400284 	movi	r5,10
 800a07c:	8004c100 	call	8004c10 <__mulsi3>
 800a080:	81400007 	ldb	r5,0(r16)
 800a084:	1549883a 	add	r4,r2,r21
 800a088:	e7000044 	addi	fp,fp,1
 800a08c:	2d7ff404 	addi	r21,r5,-48
 800a090:	e021883a 	mov	r16,fp
 800a094:	957ff82e 	bgeu	r18,r21,800a078 <__alt_data_end+0xfc00a078>
 800a098:	2821883a 	mov	r16,r5
 800a09c:	d9012e15 	stw	r4,1208(sp)
 800a0a0:	da412c17 	ldw	r9,1200(sp)
 800a0a4:	003f1c06 	br	8009d18 <__alt_data_end+0xfc009d18>
 800a0a8:	da012a17 	ldw	r8,1192(sp)
 800a0ac:	df012a15 	stw	fp,1192(sp)
 800a0b0:	9839883a 	mov	fp,r19
 800a0b4:	dcc12b03 	ldbu	r19,1196(sp)
 800a0b8:	e7000414 	ori	fp,fp,16
 800a0bc:	e080080c 	andi	r2,fp,32
 800a0c0:	dcc12785 	stb	r19,1182(sp)
 800a0c4:	d8c12d17 	ldw	r3,1204(sp)
 800a0c8:	1001ce26 	beq	r2,zero,800a804 <___vfprintf_internal_r+0xc90>
 800a0cc:	d9012d17 	ldw	r4,1204(sp)
 800a0d0:	18800117 	ldw	r2,4(r3)
 800a0d4:	1c800017 	ldw	r18,0(r3)
 800a0d8:	21000204 	addi	r4,r4,8
 800a0dc:	d9012d15 	stw	r4,1204(sp)
 800a0e0:	102b883a 	mov	r21,r2
 800a0e4:	10044916 	blt	r2,zero,800b20c <___vfprintf_internal_r+0x1698>
 800a0e8:	dcc12783 	ldbu	r19,1182(sp)
 800a0ec:	da413215 	stw	r9,1224(sp)
 800a0f0:	00800044 	movi	r2,1
 800a0f4:	9546b03a 	or	r3,r18,r21
 800a0f8:	48000216 	blt	r9,zero,800a104 <___vfprintf_internal_r+0x590>
 800a0fc:	013fdfc4 	movi	r4,-129
 800a100:	e138703a 	and	fp,fp,r4
 800a104:	1802251e 	bne	r3,zero,800a99c <___vfprintf_internal_r+0xe28>
 800a108:	48031726 	beq	r9,zero,800ad68 <___vfprintf_internal_r+0x11f4>
 800a10c:	10803fcc 	andi	r2,r2,255
 800a110:	00c00044 	movi	r3,1
 800a114:	10c24526 	beq	r2,r3,800aa2c <___vfprintf_internal_r+0xeb8>
 800a118:	00c00084 	movi	r3,2
 800a11c:	10c33426 	beq	r2,r3,800adf0 <___vfprintf_internal_r+0x127c>
 800a120:	d8c10e04 	addi	r3,sp,1080
 800a124:	9008d0fa 	srli	r4,r18,3
 800a128:	a80a977a 	slli	r5,r21,29
 800a12c:	a82ad0fa 	srli	r21,r21,3
 800a130:	948001cc 	andi	r18,r18,7
 800a134:	90800c04 	addi	r2,r18,48
 800a138:	18ffffc4 	addi	r3,r3,-1
 800a13c:	2924b03a 	or	r18,r5,r4
 800a140:	18800005 	stb	r2,0(r3)
 800a144:	9548b03a 	or	r4,r18,r21
 800a148:	203ff61e 	bne	r4,zero,800a124 <__alt_data_end+0xfc00a124>
 800a14c:	e100004c 	andi	r4,fp,1
 800a150:	d8c13115 	stw	r3,1220(sp)
 800a154:	20039a1e 	bne	r4,zero,800afc0 <___vfprintf_internal_r+0x144c>
 800a158:	d8812817 	ldw	r2,1184(sp)
 800a15c:	10e3c83a 	sub	r17,r2,r3
 800a160:	8805883a 	mov	r2,r17
 800a164:	8a40010e 	bge	r17,r9,800a16c <___vfprintf_internal_r+0x5f8>
 800a168:	4805883a 	mov	r2,r9
 800a16c:	d8812b15 	stw	r2,1196(sp)
 800a170:	d8013415 	stw	zero,1232(sp)
 800a174:	98803fcc 	andi	r2,r19,255
 800a178:	1080201c 	xori	r2,r2,128
 800a17c:	10bfe004 	addi	r2,r2,-128
 800a180:	10000326 	beq	r2,zero,800a190 <___vfprintf_internal_r+0x61c>
 800a184:	d8c12b17 	ldw	r3,1196(sp)
 800a188:	18c00044 	addi	r3,r3,1
 800a18c:	d8c12b15 	stw	r3,1196(sp)
 800a190:	e0c0008c 	andi	r3,fp,2
 800a194:	d8c12c15 	stw	r3,1200(sp)
 800a198:	18000326 	beq	r3,zero,800a1a8 <___vfprintf_internal_r+0x634>
 800a19c:	d8c12b17 	ldw	r3,1196(sp)
 800a1a0:	18c00084 	addi	r3,r3,2
 800a1a4:	d8c12b15 	stw	r3,1196(sp)
 800a1a8:	e0c0210c 	andi	r3,fp,132
 800a1ac:	d8c13015 	stw	r3,1216(sp)
 800a1b0:	1801f81e 	bne	r3,zero,800a994 <___vfprintf_internal_r+0xe20>
 800a1b4:	d9012e17 	ldw	r4,1208(sp)
 800a1b8:	d8c12b17 	ldw	r3,1196(sp)
 800a1bc:	20ebc83a 	sub	r21,r4,r3
 800a1c0:	0541f40e 	bge	zero,r21,800a994 <___vfprintf_internal_r+0xe20>
 800a1c4:	02400404 	movi	r9,16
 800a1c8:	d8c12017 	ldw	r3,1152(sp)
 800a1cc:	d8811f17 	ldw	r2,1148(sp)
 800a1d0:	4d45750e 	bge	r9,r21,800b7a8 <___vfprintf_internal_r+0x1c34>
 800a1d4:	014200b4 	movhi	r5,2050
 800a1d8:	294dae84 	addi	r5,r5,14010
 800a1dc:	d9413615 	stw	r5,1240(sp)
 800a1e0:	4827883a 	mov	r19,r9
 800a1e4:	048001c4 	movi	r18,7
 800a1e8:	00000306 	br	800a1f8 <___vfprintf_internal_r+0x684>
 800a1ec:	ad7ffc04 	addi	r21,r21,-16
 800a1f0:	42000204 	addi	r8,r8,8
 800a1f4:	9d40130e 	bge	r19,r21,800a244 <___vfprintf_internal_r+0x6d0>
 800a1f8:	010200b4 	movhi	r4,2050
 800a1fc:	18c00404 	addi	r3,r3,16
 800a200:	10800044 	addi	r2,r2,1
 800a204:	210dae84 	addi	r4,r4,14010
 800a208:	41000015 	stw	r4,0(r8)
 800a20c:	44c00115 	stw	r19,4(r8)
 800a210:	d8c12015 	stw	r3,1152(sp)
 800a214:	d8811f15 	stw	r2,1148(sp)
 800a218:	90bff40e 	bge	r18,r2,800a1ec <__alt_data_end+0xfc00a1ec>
 800a21c:	b809883a 	mov	r4,r23
 800a220:	b00b883a 	mov	r5,r22
 800a224:	d9811e04 	addi	r6,sp,1144
 800a228:	8011a700 	call	8011a70 <__sprint_r>
 800a22c:	103f691e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a230:	ad7ffc04 	addi	r21,r21,-16
 800a234:	d8c12017 	ldw	r3,1152(sp)
 800a238:	d8811f17 	ldw	r2,1148(sp)
 800a23c:	da000404 	addi	r8,sp,16
 800a240:	9d7fed16 	blt	r19,r21,800a1f8 <__alt_data_end+0xfc00a1f8>
 800a244:	d9413617 	ldw	r5,1240(sp)
 800a248:	a8c7883a 	add	r3,r21,r3
 800a24c:	10800044 	addi	r2,r2,1
 800a250:	41400015 	stw	r5,0(r8)
 800a254:	45400115 	stw	r21,4(r8)
 800a258:	d8c12015 	stw	r3,1152(sp)
 800a25c:	d8811f15 	stw	r2,1148(sp)
 800a260:	010001c4 	movi	r4,7
 800a264:	20832b16 	blt	r4,r2,800af14 <___vfprintf_internal_r+0x13a0>
 800a268:	d8812787 	ldb	r2,1182(sp)
 800a26c:	42000204 	addi	r8,r8,8
 800a270:	10000c26 	beq	r2,zero,800a2a4 <___vfprintf_internal_r+0x730>
 800a274:	d8811f17 	ldw	r2,1148(sp)
 800a278:	d9012784 	addi	r4,sp,1182
 800a27c:	18c00044 	addi	r3,r3,1
 800a280:	10800044 	addi	r2,r2,1
 800a284:	41000015 	stw	r4,0(r8)
 800a288:	01000044 	movi	r4,1
 800a28c:	41000115 	stw	r4,4(r8)
 800a290:	d8c12015 	stw	r3,1152(sp)
 800a294:	d8811f15 	stw	r2,1148(sp)
 800a298:	010001c4 	movi	r4,7
 800a29c:	2082c416 	blt	r4,r2,800adb0 <___vfprintf_internal_r+0x123c>
 800a2a0:	42000204 	addi	r8,r8,8
 800a2a4:	d8812c17 	ldw	r2,1200(sp)
 800a2a8:	10000c26 	beq	r2,zero,800a2dc <___vfprintf_internal_r+0x768>
 800a2ac:	d8811f17 	ldw	r2,1148(sp)
 800a2b0:	d9012704 	addi	r4,sp,1180
 800a2b4:	18c00084 	addi	r3,r3,2
 800a2b8:	10800044 	addi	r2,r2,1
 800a2bc:	41000015 	stw	r4,0(r8)
 800a2c0:	01000084 	movi	r4,2
 800a2c4:	41000115 	stw	r4,4(r8)
 800a2c8:	d8c12015 	stw	r3,1152(sp)
 800a2cc:	d8811f15 	stw	r2,1148(sp)
 800a2d0:	010001c4 	movi	r4,7
 800a2d4:	2082be16 	blt	r4,r2,800add0 <___vfprintf_internal_r+0x125c>
 800a2d8:	42000204 	addi	r8,r8,8
 800a2dc:	d9013017 	ldw	r4,1216(sp)
 800a2e0:	00802004 	movi	r2,128
 800a2e4:	20822026 	beq	r4,r2,800ab68 <___vfprintf_internal_r+0xff4>
 800a2e8:	d9413217 	ldw	r5,1224(sp)
 800a2ec:	2c67c83a 	sub	r19,r5,r17
 800a2f0:	04c0260e 	bge	zero,r19,800a38c <___vfprintf_internal_r+0x818>
 800a2f4:	05400404 	movi	r21,16
 800a2f8:	d8811f17 	ldw	r2,1148(sp)
 800a2fc:	acc4720e 	bge	r21,r19,800b4c8 <___vfprintf_internal_r+0x1954>
 800a300:	014200b4 	movhi	r5,2050
 800a304:	294daa84 	addi	r5,r5,13994
 800a308:	d9412c15 	stw	r5,1200(sp)
 800a30c:	048001c4 	movi	r18,7
 800a310:	00000306 	br	800a320 <___vfprintf_internal_r+0x7ac>
 800a314:	9cfffc04 	addi	r19,r19,-16
 800a318:	42000204 	addi	r8,r8,8
 800a31c:	acc0110e 	bge	r21,r19,800a364 <___vfprintf_internal_r+0x7f0>
 800a320:	18c00404 	addi	r3,r3,16
 800a324:	10800044 	addi	r2,r2,1
 800a328:	45000015 	stw	r20,0(r8)
 800a32c:	45400115 	stw	r21,4(r8)
 800a330:	d8c12015 	stw	r3,1152(sp)
 800a334:	d8811f15 	stw	r2,1148(sp)
 800a338:	90bff60e 	bge	r18,r2,800a314 <__alt_data_end+0xfc00a314>
 800a33c:	b809883a 	mov	r4,r23
 800a340:	b00b883a 	mov	r5,r22
 800a344:	d9811e04 	addi	r6,sp,1144
 800a348:	8011a700 	call	8011a70 <__sprint_r>
 800a34c:	103f211e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a350:	9cfffc04 	addi	r19,r19,-16
 800a354:	d8c12017 	ldw	r3,1152(sp)
 800a358:	d8811f17 	ldw	r2,1148(sp)
 800a35c:	da000404 	addi	r8,sp,16
 800a360:	acffef16 	blt	r21,r19,800a320 <__alt_data_end+0xfc00a320>
 800a364:	d9012c17 	ldw	r4,1200(sp)
 800a368:	1cc7883a 	add	r3,r3,r19
 800a36c:	10800044 	addi	r2,r2,1
 800a370:	41000015 	stw	r4,0(r8)
 800a374:	44c00115 	stw	r19,4(r8)
 800a378:	d8c12015 	stw	r3,1152(sp)
 800a37c:	d8811f15 	stw	r2,1148(sp)
 800a380:	010001c4 	movi	r4,7
 800a384:	20828216 	blt	r4,r2,800ad90 <___vfprintf_internal_r+0x121c>
 800a388:	42000204 	addi	r8,r8,8
 800a38c:	e080400c 	andi	r2,fp,256
 800a390:	1001ac1e 	bne	r2,zero,800aa44 <___vfprintf_internal_r+0xed0>
 800a394:	d8811f17 	ldw	r2,1148(sp)
 800a398:	d9413117 	ldw	r5,1220(sp)
 800a39c:	1c47883a 	add	r3,r3,r17
 800a3a0:	10800044 	addi	r2,r2,1
 800a3a4:	41400015 	stw	r5,0(r8)
 800a3a8:	44400115 	stw	r17,4(r8)
 800a3ac:	d8c12015 	stw	r3,1152(sp)
 800a3b0:	d8811f15 	stw	r2,1148(sp)
 800a3b4:	010001c4 	movi	r4,7
 800a3b8:	20825d16 	blt	r4,r2,800ad30 <___vfprintf_internal_r+0x11bc>
 800a3bc:	42000204 	addi	r8,r8,8
 800a3c0:	e080010c 	andi	r2,fp,4
 800a3c4:	10003126 	beq	r2,zero,800a48c <___vfprintf_internal_r+0x918>
 800a3c8:	d8812e17 	ldw	r2,1208(sp)
 800a3cc:	d9012b17 	ldw	r4,1196(sp)
 800a3d0:	1121c83a 	sub	r16,r2,r4
 800a3d4:	04002d0e 	bge	zero,r16,800a48c <___vfprintf_internal_r+0x918>
 800a3d8:	04400404 	movi	r17,16
 800a3dc:	d8811f17 	ldw	r2,1148(sp)
 800a3e0:	8c05340e 	bge	r17,r16,800b8b4 <___vfprintf_internal_r+0x1d40>
 800a3e4:	010200b4 	movhi	r4,2050
 800a3e8:	210dae84 	addi	r4,r4,14010
 800a3ec:	d9013615 	stw	r4,1240(sp)
 800a3f0:	048001c4 	movi	r18,7
 800a3f4:	00000306 	br	800a404 <___vfprintf_internal_r+0x890>
 800a3f8:	843ffc04 	addi	r16,r16,-16
 800a3fc:	42000204 	addi	r8,r8,8
 800a400:	8c00130e 	bge	r17,r16,800a450 <___vfprintf_internal_r+0x8dc>
 800a404:	014200b4 	movhi	r5,2050
 800a408:	18c00404 	addi	r3,r3,16
 800a40c:	10800044 	addi	r2,r2,1
 800a410:	294dae84 	addi	r5,r5,14010
 800a414:	41400015 	stw	r5,0(r8)
 800a418:	44400115 	stw	r17,4(r8)
 800a41c:	d8c12015 	stw	r3,1152(sp)
 800a420:	d8811f15 	stw	r2,1148(sp)
 800a424:	90bff40e 	bge	r18,r2,800a3f8 <__alt_data_end+0xfc00a3f8>
 800a428:	b809883a 	mov	r4,r23
 800a42c:	b00b883a 	mov	r5,r22
 800a430:	d9811e04 	addi	r6,sp,1144
 800a434:	8011a700 	call	8011a70 <__sprint_r>
 800a438:	103ee61e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a43c:	843ffc04 	addi	r16,r16,-16
 800a440:	d8c12017 	ldw	r3,1152(sp)
 800a444:	d8811f17 	ldw	r2,1148(sp)
 800a448:	da000404 	addi	r8,sp,16
 800a44c:	8c3fed16 	blt	r17,r16,800a404 <__alt_data_end+0xfc00a404>
 800a450:	d9013617 	ldw	r4,1240(sp)
 800a454:	1c07883a 	add	r3,r3,r16
 800a458:	10800044 	addi	r2,r2,1
 800a45c:	41000015 	stw	r4,0(r8)
 800a460:	44000115 	stw	r16,4(r8)
 800a464:	d8c12015 	stw	r3,1152(sp)
 800a468:	d8811f15 	stw	r2,1148(sp)
 800a46c:	010001c4 	movi	r4,7
 800a470:	2080060e 	bge	r4,r2,800a48c <___vfprintf_internal_r+0x918>
 800a474:	b809883a 	mov	r4,r23
 800a478:	b00b883a 	mov	r5,r22
 800a47c:	d9811e04 	addi	r6,sp,1144
 800a480:	8011a700 	call	8011a70 <__sprint_r>
 800a484:	103ed31e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a488:	d8c12017 	ldw	r3,1152(sp)
 800a48c:	df012b17 	ldw	fp,1196(sp)
 800a490:	d9412e17 	ldw	r5,1208(sp)
 800a494:	e140010e 	bge	fp,r5,800a49c <___vfprintf_internal_r+0x928>
 800a498:	2839883a 	mov	fp,r5
 800a49c:	d8812f17 	ldw	r2,1212(sp)
 800a4a0:	1705883a 	add	r2,r2,fp
 800a4a4:	d8812f15 	stw	r2,1212(sp)
 800a4a8:	1802291e 	bne	r3,zero,800ad50 <___vfprintf_internal_r+0x11dc>
 800a4ac:	d8c12a17 	ldw	r3,1192(sp)
 800a4b0:	d8011f15 	stw	zero,1148(sp)
 800a4b4:	da000404 	addi	r8,sp,16
 800a4b8:	18800007 	ldb	r2,0(r3)
 800a4bc:	103ded1e 	bne	r2,zero,8009c74 <__alt_data_end+0xfc009c74>
 800a4c0:	dc012a17 	ldw	r16,1192(sp)
 800a4c4:	003e0506 	br	8009cdc <__alt_data_end+0xfc009cdc>
 800a4c8:	d9012d17 	ldw	r4,1204(sp)
 800a4cc:	d9412d17 	ldw	r5,1204(sp)
 800a4d0:	da012a17 	ldw	r8,1192(sp)
 800a4d4:	21000017 	ldw	r4,0(r4)
 800a4d8:	29400117 	ldw	r5,4(r5)
 800a4dc:	df012a15 	stw	fp,1192(sp)
 800a4e0:	9839883a 	mov	fp,r19
 800a4e4:	dcc12b03 	ldbu	r19,1196(sp)
 800a4e8:	d9013715 	stw	r4,1244(sp)
 800a4ec:	d9413915 	stw	r5,1252(sp)
 800a4f0:	da013f15 	stw	r8,1276(sp)
 800a4f4:	da413e15 	stw	r9,1272(sp)
 800a4f8:	dcc12785 	stb	r19,1182(sp)
 800a4fc:	80103880 	call	8010388 <__fpclassifyd>
 800a500:	d8c12d17 	ldw	r3,1204(sp)
 800a504:	04400044 	movi	r17,1
 800a508:	da013f17 	ldw	r8,1276(sp)
 800a50c:	1c800204 	addi	r18,r3,8
 800a510:	da413e17 	ldw	r9,1272(sp)
 800a514:	d9013717 	ldw	r4,1244(sp)
 800a518:	d9413917 	ldw	r5,1252(sp)
 800a51c:	1443451e 	bne	r2,r17,800b234 <___vfprintf_internal_r+0x16c0>
 800a520:	000d883a 	mov	r6,zero
 800a524:	000f883a 	mov	r7,zero
 800a528:	8014f840 	call	8014f84 <__ledf2>
 800a52c:	da013f17 	ldw	r8,1276(sp)
 800a530:	1004fe16 	blt	r2,zero,800b92c <___vfprintf_internal_r+0x1db8>
 800a534:	dcc12783 	ldbu	r19,1182(sp)
 800a538:	008011c4 	movi	r2,71
 800a53c:	14045d0e 	bge	r2,r16,800b6b4 <___vfprintf_internal_r+0x1b40>
 800a540:	014200b4 	movhi	r5,2050
 800a544:	294d9304 	addi	r5,r5,13900
 800a548:	d9413115 	stw	r5,1220(sp)
 800a54c:	00c000c4 	movi	r3,3
 800a550:	00bfdfc4 	movi	r2,-129
 800a554:	d8c12b15 	stw	r3,1196(sp)
 800a558:	e0b8703a 	and	fp,fp,r2
 800a55c:	dc812d15 	stw	r18,1204(sp)
 800a560:	1823883a 	mov	r17,r3
 800a564:	d8013215 	stw	zero,1224(sp)
 800a568:	d8013415 	stw	zero,1232(sp)
 800a56c:	003f0106 	br	800a174 <__alt_data_end+0xfc00a174>
 800a570:	9cc00214 	ori	r19,r19,8
 800a574:	e005883a 	mov	r2,fp
 800a578:	e4000007 	ldb	r16,0(fp)
 800a57c:	003de506 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a580:	da012a17 	ldw	r8,1192(sp)
 800a584:	df012a15 	stw	fp,1192(sp)
 800a588:	9f000414 	ori	fp,r19,16
 800a58c:	e0c0080c 	andi	r3,fp,32
 800a590:	d8812d17 	ldw	r2,1204(sp)
 800a594:	18007626 	beq	r3,zero,800a770 <___vfprintf_internal_r+0xbfc>
 800a598:	d9412d17 	ldw	r5,1204(sp)
 800a59c:	14800017 	ldw	r18,0(r2)
 800a5a0:	15400117 	ldw	r21,4(r2)
 800a5a4:	29400204 	addi	r5,r5,8
 800a5a8:	d9412d15 	stw	r5,1204(sp)
 800a5ac:	0005883a 	mov	r2,zero
 800a5b0:	9546b03a 	or	r3,r18,r21
 800a5b4:	d8012785 	stb	zero,1182(sp)
 800a5b8:	da413215 	stw	r9,1224(sp)
 800a5bc:	0027883a 	mov	r19,zero
 800a5c0:	003ecd06 	br	800a0f8 <__alt_data_end+0xfc00a0f8>
 800a5c4:	da012a17 	ldw	r8,1192(sp)
 800a5c8:	df012a15 	stw	fp,1192(sp)
 800a5cc:	9f000414 	ori	fp,r19,16
 800a5d0:	e0c0080c 	andi	r3,fp,32
 800a5d4:	d8812d17 	ldw	r2,1204(sp)
 800a5d8:	18002c26 	beq	r3,zero,800a68c <___vfprintf_internal_r+0xb18>
 800a5dc:	d9012d17 	ldw	r4,1204(sp)
 800a5e0:	14800017 	ldw	r18,0(r2)
 800a5e4:	15400117 	ldw	r21,4(r2)
 800a5e8:	21000204 	addi	r4,r4,8
 800a5ec:	d9012d15 	stw	r4,1204(sp)
 800a5f0:	00800044 	movi	r2,1
 800a5f4:	9546b03a 	or	r3,r18,r21
 800a5f8:	003fee06 	br	800a5b4 <__alt_data_end+0xfc00a5b4>
 800a5fc:	da012a17 	ldw	r8,1192(sp)
 800a600:	df012a15 	stw	fp,1192(sp)
 800a604:	9839883a 	mov	fp,r19
 800a608:	dcc12b03 	ldbu	r19,1196(sp)
 800a60c:	014200b4 	movhi	r5,2050
 800a610:	294d9604 	addi	r5,r5,13912
 800a614:	dcc12785 	stb	r19,1182(sp)
 800a618:	d9413b15 	stw	r5,1260(sp)
 800a61c:	e0c0080c 	andi	r3,fp,32
 800a620:	d8812d17 	ldw	r2,1204(sp)
 800a624:	18002e26 	beq	r3,zero,800a6e0 <___vfprintf_internal_r+0xb6c>
 800a628:	d9412d17 	ldw	r5,1204(sp)
 800a62c:	14800017 	ldw	r18,0(r2)
 800a630:	15400117 	ldw	r21,4(r2)
 800a634:	29400204 	addi	r5,r5,8
 800a638:	d9412d15 	stw	r5,1204(sp)
 800a63c:	e080004c 	andi	r2,fp,1
 800a640:	10025c26 	beq	r2,zero,800afb4 <___vfprintf_internal_r+0x1440>
 800a644:	9546b03a 	or	r3,r18,r21
 800a648:	18038f26 	beq	r3,zero,800b488 <___vfprintf_internal_r+0x1914>
 800a64c:	00800c04 	movi	r2,48
 800a650:	d8812705 	stb	r2,1180(sp)
 800a654:	dc012745 	stb	r16,1181(sp)
 800a658:	e7000094 	ori	fp,fp,2
 800a65c:	00800084 	movi	r2,2
 800a660:	003fd406 	br	800a5b4 <__alt_data_end+0xfc00a5b4>
 800a664:	9cc00814 	ori	r19,r19,32
 800a668:	e005883a 	mov	r2,fp
 800a66c:	e4000007 	ldb	r16,0(fp)
 800a670:	003da806 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a674:	da012a17 	ldw	r8,1192(sp)
 800a678:	df012a15 	stw	fp,1192(sp)
 800a67c:	9839883a 	mov	fp,r19
 800a680:	e0c0080c 	andi	r3,fp,32
 800a684:	d8812d17 	ldw	r2,1204(sp)
 800a688:	183fd41e 	bne	r3,zero,800a5dc <__alt_data_end+0xfc00a5dc>
 800a68c:	e0c0040c 	andi	r3,fp,16
 800a690:	18035f26 	beq	r3,zero,800b410 <___vfprintf_internal_r+0x189c>
 800a694:	d9412d17 	ldw	r5,1204(sp)
 800a698:	14800017 	ldw	r18,0(r2)
 800a69c:	002b883a 	mov	r21,zero
 800a6a0:	29400104 	addi	r5,r5,4
 800a6a4:	d9412d15 	stw	r5,1204(sp)
 800a6a8:	00800044 	movi	r2,1
 800a6ac:	9007883a 	mov	r3,r18
 800a6b0:	003fc006 	br	800a5b4 <__alt_data_end+0xfc00a5b4>
 800a6b4:	da012a17 	ldw	r8,1192(sp)
 800a6b8:	df012a15 	stw	fp,1192(sp)
 800a6bc:	9839883a 	mov	fp,r19
 800a6c0:	dcc12b03 	ldbu	r19,1196(sp)
 800a6c4:	010200b4 	movhi	r4,2050
 800a6c8:	210d9b04 	addi	r4,r4,13932
 800a6cc:	d9013b15 	stw	r4,1260(sp)
 800a6d0:	dcc12785 	stb	r19,1182(sp)
 800a6d4:	e0c0080c 	andi	r3,fp,32
 800a6d8:	d8812d17 	ldw	r2,1204(sp)
 800a6dc:	183fd21e 	bne	r3,zero,800a628 <__alt_data_end+0xfc00a628>
 800a6e0:	e0c0040c 	andi	r3,fp,16
 800a6e4:	18035426 	beq	r3,zero,800b438 <___vfprintf_internal_r+0x18c4>
 800a6e8:	d8c12d17 	ldw	r3,1204(sp)
 800a6ec:	14800017 	ldw	r18,0(r2)
 800a6f0:	002b883a 	mov	r21,zero
 800a6f4:	18c00104 	addi	r3,r3,4
 800a6f8:	d8c12d15 	stw	r3,1204(sp)
 800a6fc:	003fcf06 	br	800a63c <__alt_data_end+0xfc00a63c>
 800a700:	e4000007 	ldb	r16,0(fp)
 800a704:	00801b04 	movi	r2,108
 800a708:	8083f726 	beq	r16,r2,800b6e8 <___vfprintf_internal_r+0x1b74>
 800a70c:	9cc00414 	ori	r19,r19,16
 800a710:	e005883a 	mov	r2,fp
 800a714:	003d7f06 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a718:	da012a17 	ldw	r8,1192(sp)
 800a71c:	df012a15 	stw	fp,1192(sp)
 800a720:	9839883a 	mov	fp,r19
 800a724:	dcc12b03 	ldbu	r19,1196(sp)
 800a728:	e080080c 	andi	r2,fp,32
 800a72c:	dcc12785 	stb	r19,1182(sp)
 800a730:	10032226 	beq	r2,zero,800b3bc <___vfprintf_internal_r+0x1848>
 800a734:	d9412d17 	ldw	r5,1204(sp)
 800a738:	d9012f17 	ldw	r4,1212(sp)
 800a73c:	28800017 	ldw	r2,0(r5)
 800a740:	2007d7fa 	srai	r3,r4,31
 800a744:	29400104 	addi	r5,r5,4
 800a748:	d9412d15 	stw	r5,1204(sp)
 800a74c:	11000015 	stw	r4,0(r2)
 800a750:	10c00115 	stw	r3,4(r2)
 800a754:	003d4406 	br	8009c68 <__alt_data_end+0xfc009c68>
 800a758:	da012a17 	ldw	r8,1192(sp)
 800a75c:	df012a15 	stw	fp,1192(sp)
 800a760:	9839883a 	mov	fp,r19
 800a764:	e0c0080c 	andi	r3,fp,32
 800a768:	d8812d17 	ldw	r2,1204(sp)
 800a76c:	183f8a1e 	bne	r3,zero,800a598 <__alt_data_end+0xfc00a598>
 800a770:	e0c0040c 	andi	r3,fp,16
 800a774:	18031c26 	beq	r3,zero,800b3e8 <___vfprintf_internal_r+0x1874>
 800a778:	14800017 	ldw	r18,0(r2)
 800a77c:	d8812d17 	ldw	r2,1204(sp)
 800a780:	002b883a 	mov	r21,zero
 800a784:	9007883a 	mov	r3,r18
 800a788:	10800104 	addi	r2,r2,4
 800a78c:	d8812d15 	stw	r2,1204(sp)
 800a790:	0005883a 	mov	r2,zero
 800a794:	003f8706 	br	800a5b4 <__alt_data_end+0xfc00a5b4>
 800a798:	d9412d17 	ldw	r5,1204(sp)
 800a79c:	00800c04 	movi	r2,48
 800a7a0:	d8812705 	stb	r2,1180(sp)
 800a7a4:	2c800017 	ldw	r18,0(r5)
 800a7a8:	00801e04 	movi	r2,120
 800a7ac:	d8812745 	stb	r2,1181(sp)
 800a7b0:	008200b4 	movhi	r2,2050
 800a7b4:	108d9b04 	addi	r2,r2,13932
 800a7b8:	29400104 	addi	r5,r5,4
 800a7bc:	da012a17 	ldw	r8,1192(sp)
 800a7c0:	d8813b15 	stw	r2,1260(sp)
 800a7c4:	df012a15 	stw	fp,1192(sp)
 800a7c8:	002b883a 	mov	r21,zero
 800a7cc:	9f000094 	ori	fp,r19,2
 800a7d0:	d9412d15 	stw	r5,1204(sp)
 800a7d4:	00800084 	movi	r2,2
 800a7d8:	04001e04 	movi	r16,120
 800a7dc:	9007883a 	mov	r3,r18
 800a7e0:	003f7406 	br	800a5b4 <__alt_data_end+0xfc00a5b4>
 800a7e4:	da012a17 	ldw	r8,1192(sp)
 800a7e8:	df012a15 	stw	fp,1192(sp)
 800a7ec:	9839883a 	mov	fp,r19
 800a7f0:	dcc12b03 	ldbu	r19,1196(sp)
 800a7f4:	e080080c 	andi	r2,fp,32
 800a7f8:	d8c12d17 	ldw	r3,1204(sp)
 800a7fc:	dcc12785 	stb	r19,1182(sp)
 800a800:	103e321e 	bne	r2,zero,800a0cc <__alt_data_end+0xfc00a0cc>
 800a804:	e080040c 	andi	r2,fp,16
 800a808:	10031326 	beq	r2,zero,800b458 <___vfprintf_internal_r+0x18e4>
 800a80c:	1c800017 	ldw	r18,0(r3)
 800a810:	d9412d17 	ldw	r5,1204(sp)
 800a814:	902bd7fa 	srai	r21,r18,31
 800a818:	29400104 	addi	r5,r5,4
 800a81c:	d9412d15 	stw	r5,1204(sp)
 800a820:	a805883a 	mov	r2,r21
 800a824:	003e2f06 	br	800a0e4 <__alt_data_end+0xfc00a0e4>
 800a828:	9cc01014 	ori	r19,r19,64
 800a82c:	e005883a 	mov	r2,fp
 800a830:	e4000007 	ldb	r16,0(fp)
 800a834:	003d3706 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a838:	d8c12d17 	ldw	r3,1204(sp)
 800a83c:	d9012d17 	ldw	r4,1204(sp)
 800a840:	da012a17 	ldw	r8,1192(sp)
 800a844:	18800017 	ldw	r2,0(r3)
 800a848:	21000104 	addi	r4,r4,4
 800a84c:	00c00044 	movi	r3,1
 800a850:	df012a15 	stw	fp,1192(sp)
 800a854:	d8c12b15 	stw	r3,1196(sp)
 800a858:	9839883a 	mov	fp,r19
 800a85c:	d8012785 	stb	zero,1182(sp)
 800a860:	d8810405 	stb	r2,1040(sp)
 800a864:	d9012d15 	stw	r4,1204(sp)
 800a868:	1823883a 	mov	r17,r3
 800a86c:	d8c10404 	addi	r3,sp,1040
 800a870:	d8013215 	stw	zero,1224(sp)
 800a874:	d8013415 	stw	zero,1232(sp)
 800a878:	d8c13115 	stw	r3,1220(sp)
 800a87c:	0005883a 	mov	r2,zero
 800a880:	003e4306 	br	800a190 <__alt_data_end+0xfc00a190>
 800a884:	d8812b07 	ldb	r2,1196(sp)
 800a888:	1002fc1e 	bne	r2,zero,800b47c <___vfprintf_internal_r+0x1908>
 800a88c:	00c00804 	movi	r3,32
 800a890:	d8c12b05 	stb	r3,1196(sp)
 800a894:	e005883a 	mov	r2,fp
 800a898:	e4000007 	ldb	r16,0(fp)
 800a89c:	003d1d06 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a8a0:	9cc00054 	ori	r19,r19,1
 800a8a4:	e005883a 	mov	r2,fp
 800a8a8:	e4000007 	ldb	r16,0(fp)
 800a8ac:	003d1906 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a8b0:	d9012d17 	ldw	r4,1204(sp)
 800a8b4:	d9412d17 	ldw	r5,1204(sp)
 800a8b8:	21000017 	ldw	r4,0(r4)
 800a8bc:	28c00104 	addi	r3,r5,4
 800a8c0:	d9012e15 	stw	r4,1208(sp)
 800a8c4:	20038c16 	blt	r4,zero,800b6f8 <___vfprintf_internal_r+0x1b84>
 800a8c8:	d8c12d15 	stw	r3,1204(sp)
 800a8cc:	e005883a 	mov	r2,fp
 800a8d0:	e4000007 	ldb	r16,0(fp)
 800a8d4:	003d0f06 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a8d8:	00c00ac4 	movi	r3,43
 800a8dc:	d8c12b05 	stb	r3,1196(sp)
 800a8e0:	e005883a 	mov	r2,fp
 800a8e4:	e4000007 	ldb	r16,0(fp)
 800a8e8:	003d0a06 	br	8009d14 <__alt_data_end+0xfc009d14>
 800a8ec:	d8c12d17 	ldw	r3,1204(sp)
 800a8f0:	d9012d17 	ldw	r4,1204(sp)
 800a8f4:	da012a17 	ldw	r8,1192(sp)
 800a8f8:	18c00017 	ldw	r3,0(r3)
 800a8fc:	df012a15 	stw	fp,1192(sp)
 800a900:	d8012785 	stb	zero,1182(sp)
 800a904:	d8c13115 	stw	r3,1220(sp)
 800a908:	9839883a 	mov	fp,r19
 800a90c:	24800104 	addi	r18,r4,4
 800a910:	1803f726 	beq	r3,zero,800b8f0 <___vfprintf_internal_r+0x1d7c>
 800a914:	d9013117 	ldw	r4,1220(sp)
 800a918:	48038916 	blt	r9,zero,800b740 <___vfprintf_internal_r+0x1bcc>
 800a91c:	480d883a 	mov	r6,r9
 800a920:	000b883a 	mov	r5,zero
 800a924:	da013f15 	stw	r8,1276(sp)
 800a928:	da413e15 	stw	r9,1272(sp)
 800a92c:	800ea380 	call	800ea38 <memchr>
 800a930:	da013f17 	ldw	r8,1276(sp)
 800a934:	da413e17 	ldw	r9,1272(sp)
 800a938:	10045926 	beq	r2,zero,800baa0 <___vfprintf_internal_r+0x1f2c>
 800a93c:	d8c13117 	ldw	r3,1220(sp)
 800a940:	10e3c83a 	sub	r17,r2,r3
 800a944:	4c433516 	blt	r9,r17,800b61c <___vfprintf_internal_r+0x1aa8>
 800a948:	8805883a 	mov	r2,r17
 800a94c:	88038116 	blt	r17,zero,800b754 <___vfprintf_internal_r+0x1be0>
 800a950:	dcc12783 	ldbu	r19,1182(sp)
 800a954:	d8812b15 	stw	r2,1196(sp)
 800a958:	dc812d15 	stw	r18,1204(sp)
 800a95c:	d8013215 	stw	zero,1224(sp)
 800a960:	d8013415 	stw	zero,1232(sp)
 800a964:	003e0306 	br	800a174 <__alt_data_end+0xfc00a174>
 800a968:	da012a17 	ldw	r8,1192(sp)
 800a96c:	df012a15 	stw	fp,1192(sp)
 800a970:	9839883a 	mov	fp,r19
 800a974:	dcc12b03 	ldbu	r19,1196(sp)
 800a978:	dcc12785 	stb	r19,1182(sp)
 800a97c:	803d8f26 	beq	r16,zero,8009fbc <__alt_data_end+0xfc009fbc>
 800a980:	00c00044 	movi	r3,1
 800a984:	d8c12b15 	stw	r3,1196(sp)
 800a988:	dc010405 	stb	r16,1040(sp)
 800a98c:	d8012785 	stb	zero,1182(sp)
 800a990:	003fb506 	br	800a868 <__alt_data_end+0xfc00a868>
 800a994:	d8c12017 	ldw	r3,1152(sp)
 800a998:	003e3506 	br	800a270 <__alt_data_end+0xfc00a270>
 800a99c:	10803fcc 	andi	r2,r2,255
 800a9a0:	00c00044 	movi	r3,1
 800a9a4:	10fddc1e 	bne	r2,r3,800a118 <__alt_data_end+0xfc00a118>
 800a9a8:	a800021e 	bne	r21,zero,800a9b4 <___vfprintf_internal_r+0xe40>
 800a9ac:	00800244 	movi	r2,9
 800a9b0:	14801e2e 	bgeu	r2,r18,800aa2c <___vfprintf_internal_r+0xeb8>
 800a9b4:	dc012b15 	stw	r16,1196(sp)
 800a9b8:	dc410e04 	addi	r17,sp,1080
 800a9bc:	9021883a 	mov	r16,r18
 800a9c0:	da012c15 	stw	r8,1200(sp)
 800a9c4:	a825883a 	mov	r18,r21
 800a9c8:	482b883a 	mov	r21,r9
 800a9cc:	8009883a 	mov	r4,r16
 800a9d0:	900b883a 	mov	r5,r18
 800a9d4:	01800284 	movi	r6,10
 800a9d8:	000f883a 	mov	r7,zero
 800a9dc:	8013f680 	call	8013f68 <__umoddi3>
 800a9e0:	10800c04 	addi	r2,r2,48
 800a9e4:	8c7fffc4 	addi	r17,r17,-1
 800a9e8:	8009883a 	mov	r4,r16
 800a9ec:	900b883a 	mov	r5,r18
 800a9f0:	01800284 	movi	r6,10
 800a9f4:	000f883a 	mov	r7,zero
 800a9f8:	88800005 	stb	r2,0(r17)
 800a9fc:	80139280 	call	8013928 <__udivdi3>
 800aa00:	1021883a 	mov	r16,r2
 800aa04:	10c4b03a 	or	r2,r2,r3
 800aa08:	1825883a 	mov	r18,r3
 800aa0c:	103fef1e 	bne	r2,zero,800a9cc <__alt_data_end+0xfc00a9cc>
 800aa10:	d9012817 	ldw	r4,1184(sp)
 800aa14:	dc413115 	stw	r17,1220(sp)
 800aa18:	dc012b17 	ldw	r16,1196(sp)
 800aa1c:	da012c17 	ldw	r8,1200(sp)
 800aa20:	a813883a 	mov	r9,r21
 800aa24:	2463c83a 	sub	r17,r4,r17
 800aa28:	003dcd06 	br	800a160 <__alt_data_end+0xfc00a160>
 800aa2c:	94800c04 	addi	r18,r18,48
 800aa30:	d8c10dc4 	addi	r3,sp,1079
 800aa34:	dc810dc5 	stb	r18,1079(sp)
 800aa38:	dc413c17 	ldw	r17,1264(sp)
 800aa3c:	d8c13115 	stw	r3,1220(sp)
 800aa40:	003dc706 	br	800a160 <__alt_data_end+0xfc00a160>
 800aa44:	00801944 	movi	r2,101
 800aa48:	1400720e 	bge	r2,r16,800ac14 <___vfprintf_internal_r+0x10a0>
 800aa4c:	d9013717 	ldw	r4,1244(sp)
 800aa50:	d9413917 	ldw	r5,1252(sp)
 800aa54:	000d883a 	mov	r6,zero
 800aa58:	000f883a 	mov	r7,zero
 800aa5c:	d8c13d15 	stw	r3,1268(sp)
 800aa60:	da013f15 	stw	r8,1276(sp)
 800aa64:	8014e200 	call	8014e20 <__eqdf2>
 800aa68:	d8c13d17 	ldw	r3,1268(sp)
 800aa6c:	da013f17 	ldw	r8,1276(sp)
 800aa70:	1000f41e 	bne	r2,zero,800ae44 <___vfprintf_internal_r+0x12d0>
 800aa74:	d8811f17 	ldw	r2,1148(sp)
 800aa78:	010200b4 	movhi	r4,2050
 800aa7c:	210da204 	addi	r4,r4,13960
 800aa80:	18c00044 	addi	r3,r3,1
 800aa84:	10800044 	addi	r2,r2,1
 800aa88:	41000015 	stw	r4,0(r8)
 800aa8c:	01000044 	movi	r4,1
 800aa90:	41000115 	stw	r4,4(r8)
 800aa94:	d8c12015 	stw	r3,1152(sp)
 800aa98:	d8811f15 	stw	r2,1148(sp)
 800aa9c:	010001c4 	movi	r4,7
 800aaa0:	20828d16 	blt	r4,r2,800b4d8 <___vfprintf_internal_r+0x1964>
 800aaa4:	42000204 	addi	r8,r8,8
 800aaa8:	d8812617 	ldw	r2,1176(sp)
 800aaac:	d9413317 	ldw	r5,1228(sp)
 800aab0:	11400216 	blt	r2,r5,800aabc <___vfprintf_internal_r+0xf48>
 800aab4:	e080004c 	andi	r2,fp,1
 800aab8:	103e4126 	beq	r2,zero,800a3c0 <__alt_data_end+0xfc00a3c0>
 800aabc:	d8813817 	ldw	r2,1248(sp)
 800aac0:	d9013517 	ldw	r4,1236(sp)
 800aac4:	d9413817 	ldw	r5,1248(sp)
 800aac8:	1887883a 	add	r3,r3,r2
 800aacc:	d8811f17 	ldw	r2,1148(sp)
 800aad0:	41000015 	stw	r4,0(r8)
 800aad4:	41400115 	stw	r5,4(r8)
 800aad8:	10800044 	addi	r2,r2,1
 800aadc:	d8c12015 	stw	r3,1152(sp)
 800aae0:	d8811f15 	stw	r2,1148(sp)
 800aae4:	010001c4 	movi	r4,7
 800aae8:	20830916 	blt	r4,r2,800b710 <___vfprintf_internal_r+0x1b9c>
 800aaec:	42000204 	addi	r8,r8,8
 800aaf0:	d8813317 	ldw	r2,1228(sp)
 800aaf4:	143fffc4 	addi	r16,r2,-1
 800aaf8:	043e310e 	bge	zero,r16,800a3c0 <__alt_data_end+0xfc00a3c0>
 800aafc:	04400404 	movi	r17,16
 800ab00:	d8811f17 	ldw	r2,1148(sp)
 800ab04:	8c007e0e 	bge	r17,r16,800ad00 <___vfprintf_internal_r+0x118c>
 800ab08:	014200b4 	movhi	r5,2050
 800ab0c:	294daa84 	addi	r5,r5,13994
 800ab10:	d9412c15 	stw	r5,1200(sp)
 800ab14:	04c001c4 	movi	r19,7
 800ab18:	00000306 	br	800ab28 <___vfprintf_internal_r+0xfb4>
 800ab1c:	42000204 	addi	r8,r8,8
 800ab20:	843ffc04 	addi	r16,r16,-16
 800ab24:	8c00790e 	bge	r17,r16,800ad0c <___vfprintf_internal_r+0x1198>
 800ab28:	18c00404 	addi	r3,r3,16
 800ab2c:	10800044 	addi	r2,r2,1
 800ab30:	45000015 	stw	r20,0(r8)
 800ab34:	44400115 	stw	r17,4(r8)
 800ab38:	d8c12015 	stw	r3,1152(sp)
 800ab3c:	d8811f15 	stw	r2,1148(sp)
 800ab40:	98bff60e 	bge	r19,r2,800ab1c <__alt_data_end+0xfc00ab1c>
 800ab44:	b809883a 	mov	r4,r23
 800ab48:	b00b883a 	mov	r5,r22
 800ab4c:	d9811e04 	addi	r6,sp,1144
 800ab50:	8011a700 	call	8011a70 <__sprint_r>
 800ab54:	103d1f1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800ab58:	d8c12017 	ldw	r3,1152(sp)
 800ab5c:	d8811f17 	ldw	r2,1148(sp)
 800ab60:	da000404 	addi	r8,sp,16
 800ab64:	003fee06 	br	800ab20 <__alt_data_end+0xfc00ab20>
 800ab68:	d9412e17 	ldw	r5,1208(sp)
 800ab6c:	d8812b17 	ldw	r2,1196(sp)
 800ab70:	28a7c83a 	sub	r19,r5,r2
 800ab74:	04fddc0e 	bge	zero,r19,800a2e8 <__alt_data_end+0xfc00a2e8>
 800ab78:	05400404 	movi	r21,16
 800ab7c:	d8811f17 	ldw	r2,1148(sp)
 800ab80:	acc3870e 	bge	r21,r19,800b9a0 <___vfprintf_internal_r+0x1e2c>
 800ab84:	014200b4 	movhi	r5,2050
 800ab88:	294daa84 	addi	r5,r5,13994
 800ab8c:	d9412c15 	stw	r5,1200(sp)
 800ab90:	048001c4 	movi	r18,7
 800ab94:	00000306 	br	800aba4 <___vfprintf_internal_r+0x1030>
 800ab98:	9cfffc04 	addi	r19,r19,-16
 800ab9c:	42000204 	addi	r8,r8,8
 800aba0:	acc0110e 	bge	r21,r19,800abe8 <___vfprintf_internal_r+0x1074>
 800aba4:	18c00404 	addi	r3,r3,16
 800aba8:	10800044 	addi	r2,r2,1
 800abac:	45000015 	stw	r20,0(r8)
 800abb0:	45400115 	stw	r21,4(r8)
 800abb4:	d8c12015 	stw	r3,1152(sp)
 800abb8:	d8811f15 	stw	r2,1148(sp)
 800abbc:	90bff60e 	bge	r18,r2,800ab98 <__alt_data_end+0xfc00ab98>
 800abc0:	b809883a 	mov	r4,r23
 800abc4:	b00b883a 	mov	r5,r22
 800abc8:	d9811e04 	addi	r6,sp,1144
 800abcc:	8011a700 	call	8011a70 <__sprint_r>
 800abd0:	103d001e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800abd4:	9cfffc04 	addi	r19,r19,-16
 800abd8:	d8c12017 	ldw	r3,1152(sp)
 800abdc:	d8811f17 	ldw	r2,1148(sp)
 800abe0:	da000404 	addi	r8,sp,16
 800abe4:	acffef16 	blt	r21,r19,800aba4 <__alt_data_end+0xfc00aba4>
 800abe8:	d9012c17 	ldw	r4,1200(sp)
 800abec:	1cc7883a 	add	r3,r3,r19
 800abf0:	10800044 	addi	r2,r2,1
 800abf4:	41000015 	stw	r4,0(r8)
 800abf8:	44c00115 	stw	r19,4(r8)
 800abfc:	d8c12015 	stw	r3,1152(sp)
 800ac00:	d8811f15 	stw	r2,1148(sp)
 800ac04:	010001c4 	movi	r4,7
 800ac08:	20817816 	blt	r4,r2,800b1ec <___vfprintf_internal_r+0x1678>
 800ac0c:	42000204 	addi	r8,r8,8
 800ac10:	003db506 	br	800a2e8 <__alt_data_end+0xfc00a2e8>
 800ac14:	d9413317 	ldw	r5,1228(sp)
 800ac18:	00800044 	movi	r2,1
 800ac1c:	18c00044 	addi	r3,r3,1
 800ac20:	11413e0e 	bge	r2,r5,800b11c <___vfprintf_internal_r+0x15a8>
 800ac24:	dc011f17 	ldw	r16,1148(sp)
 800ac28:	d8813117 	ldw	r2,1220(sp)
 800ac2c:	d8c12015 	stw	r3,1152(sp)
 800ac30:	84000044 	addi	r16,r16,1
 800ac34:	40800015 	stw	r2,0(r8)
 800ac38:	00800044 	movi	r2,1
 800ac3c:	40800115 	stw	r2,4(r8)
 800ac40:	dc011f15 	stw	r16,1148(sp)
 800ac44:	008001c4 	movi	r2,7
 800ac48:	14015616 	blt	r2,r16,800b1a4 <___vfprintf_internal_r+0x1630>
 800ac4c:	42000204 	addi	r8,r8,8
 800ac50:	d9013817 	ldw	r4,1248(sp)
 800ac54:	d9413517 	ldw	r5,1236(sp)
 800ac58:	84000044 	addi	r16,r16,1
 800ac5c:	1907883a 	add	r3,r3,r4
 800ac60:	41400015 	stw	r5,0(r8)
 800ac64:	41000115 	stw	r4,4(r8)
 800ac68:	d8c12015 	stw	r3,1152(sp)
 800ac6c:	dc011f15 	stw	r16,1148(sp)
 800ac70:	008001c4 	movi	r2,7
 800ac74:	14015416 	blt	r2,r16,800b1c8 <___vfprintf_internal_r+0x1654>
 800ac78:	44400204 	addi	r17,r8,8
 800ac7c:	d9013717 	ldw	r4,1244(sp)
 800ac80:	d9413917 	ldw	r5,1252(sp)
 800ac84:	000d883a 	mov	r6,zero
 800ac88:	000f883a 	mov	r7,zero
 800ac8c:	d8c13d15 	stw	r3,1268(sp)
 800ac90:	8014e200 	call	8014e20 <__eqdf2>
 800ac94:	d8c13d17 	ldw	r3,1268(sp)
 800ac98:	1000a726 	beq	r2,zero,800af38 <___vfprintf_internal_r+0x13c4>
 800ac9c:	d9013317 	ldw	r4,1228(sp)
 800aca0:	d9413117 	ldw	r5,1220(sp)
 800aca4:	84000044 	addi	r16,r16,1
 800aca8:	20bfffc4 	addi	r2,r4,-1
 800acac:	1887883a 	add	r3,r3,r2
 800acb0:	29000044 	addi	r4,r5,1
 800acb4:	88800115 	stw	r2,4(r17)
 800acb8:	89000015 	stw	r4,0(r17)
 800acbc:	d8c12015 	stw	r3,1152(sp)
 800acc0:	dc011f15 	stw	r16,1148(sp)
 800acc4:	008001c4 	movi	r2,7
 800acc8:	14012d16 	blt	r2,r16,800b180 <___vfprintf_internal_r+0x160c>
 800accc:	8c400204 	addi	r17,r17,8
 800acd0:	d9413a17 	ldw	r5,1256(sp)
 800acd4:	dcc122c4 	addi	r19,sp,1163
 800acd8:	84000044 	addi	r16,r16,1
 800acdc:	28c7883a 	add	r3,r5,r3
 800ace0:	8cc00015 	stw	r19,0(r17)
 800ace4:	89400115 	stw	r5,4(r17)
 800ace8:	d8c12015 	stw	r3,1152(sp)
 800acec:	dc011f15 	stw	r16,1148(sp)
 800acf0:	008001c4 	movi	r2,7
 800acf4:	14000e16 	blt	r2,r16,800ad30 <___vfprintf_internal_r+0x11bc>
 800acf8:	8a000204 	addi	r8,r17,8
 800acfc:	003db006 	br	800a3c0 <__alt_data_end+0xfc00a3c0>
 800ad00:	010200b4 	movhi	r4,2050
 800ad04:	210daa84 	addi	r4,r4,13994
 800ad08:	d9012c15 	stw	r4,1200(sp)
 800ad0c:	d9012c17 	ldw	r4,1200(sp)
 800ad10:	1c07883a 	add	r3,r3,r16
 800ad14:	44000115 	stw	r16,4(r8)
 800ad18:	41000015 	stw	r4,0(r8)
 800ad1c:	10800044 	addi	r2,r2,1
 800ad20:	d8c12015 	stw	r3,1152(sp)
 800ad24:	d8811f15 	stw	r2,1148(sp)
 800ad28:	010001c4 	movi	r4,7
 800ad2c:	20bda30e 	bge	r4,r2,800a3bc <__alt_data_end+0xfc00a3bc>
 800ad30:	b809883a 	mov	r4,r23
 800ad34:	b00b883a 	mov	r5,r22
 800ad38:	d9811e04 	addi	r6,sp,1144
 800ad3c:	8011a700 	call	8011a70 <__sprint_r>
 800ad40:	103ca41e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800ad44:	d8c12017 	ldw	r3,1152(sp)
 800ad48:	da000404 	addi	r8,sp,16
 800ad4c:	003d9c06 	br	800a3c0 <__alt_data_end+0xfc00a3c0>
 800ad50:	b809883a 	mov	r4,r23
 800ad54:	b00b883a 	mov	r5,r22
 800ad58:	d9811e04 	addi	r6,sp,1144
 800ad5c:	8011a700 	call	8011a70 <__sprint_r>
 800ad60:	103dd226 	beq	r2,zero,800a4ac <__alt_data_end+0xfc00a4ac>
 800ad64:	003c9b06 	br	8009fd4 <__alt_data_end+0xfc009fd4>
 800ad68:	10803fcc 	andi	r2,r2,255
 800ad6c:	1000311e 	bne	r2,zero,800ae34 <___vfprintf_internal_r+0x12c0>
 800ad70:	e080004c 	andi	r2,fp,1
 800ad74:	10002f26 	beq	r2,zero,800ae34 <___vfprintf_internal_r+0x12c0>
 800ad78:	00800c04 	movi	r2,48
 800ad7c:	d8c10dc4 	addi	r3,sp,1079
 800ad80:	d8810dc5 	stb	r2,1079(sp)
 800ad84:	dc413c17 	ldw	r17,1264(sp)
 800ad88:	d8c13115 	stw	r3,1220(sp)
 800ad8c:	003cf406 	br	800a160 <__alt_data_end+0xfc00a160>
 800ad90:	b809883a 	mov	r4,r23
 800ad94:	b00b883a 	mov	r5,r22
 800ad98:	d9811e04 	addi	r6,sp,1144
 800ad9c:	8011a700 	call	8011a70 <__sprint_r>
 800ada0:	103c8c1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800ada4:	d8c12017 	ldw	r3,1152(sp)
 800ada8:	da000404 	addi	r8,sp,16
 800adac:	003d7706 	br	800a38c <__alt_data_end+0xfc00a38c>
 800adb0:	b809883a 	mov	r4,r23
 800adb4:	b00b883a 	mov	r5,r22
 800adb8:	d9811e04 	addi	r6,sp,1144
 800adbc:	8011a700 	call	8011a70 <__sprint_r>
 800adc0:	103c841e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800adc4:	d8c12017 	ldw	r3,1152(sp)
 800adc8:	da000404 	addi	r8,sp,16
 800adcc:	003d3506 	br	800a2a4 <__alt_data_end+0xfc00a2a4>
 800add0:	b809883a 	mov	r4,r23
 800add4:	b00b883a 	mov	r5,r22
 800add8:	d9811e04 	addi	r6,sp,1144
 800addc:	8011a700 	call	8011a70 <__sprint_r>
 800ade0:	103c7c1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800ade4:	d8c12017 	ldw	r3,1152(sp)
 800ade8:	da000404 	addi	r8,sp,16
 800adec:	003d3b06 	br	800a2dc <__alt_data_end+0xfc00a2dc>
 800adf0:	d9413b17 	ldw	r5,1260(sp)
 800adf4:	d8c10e04 	addi	r3,sp,1080
 800adf8:	908003cc 	andi	r2,r18,15
 800adfc:	a808973a 	slli	r4,r21,28
 800ae00:	2885883a 	add	r2,r5,r2
 800ae04:	9024d13a 	srli	r18,r18,4
 800ae08:	10800003 	ldbu	r2,0(r2)
 800ae0c:	a82ad13a 	srli	r21,r21,4
 800ae10:	18ffffc4 	addi	r3,r3,-1
 800ae14:	24a4b03a 	or	r18,r4,r18
 800ae18:	18800005 	stb	r2,0(r3)
 800ae1c:	9544b03a 	or	r2,r18,r21
 800ae20:	103ff51e 	bne	r2,zero,800adf8 <__alt_data_end+0xfc00adf8>
 800ae24:	d9412817 	ldw	r5,1184(sp)
 800ae28:	d8c13115 	stw	r3,1220(sp)
 800ae2c:	28e3c83a 	sub	r17,r5,r3
 800ae30:	003ccb06 	br	800a160 <__alt_data_end+0xfc00a160>
 800ae34:	d8c10e04 	addi	r3,sp,1080
 800ae38:	0023883a 	mov	r17,zero
 800ae3c:	d8c13115 	stw	r3,1220(sp)
 800ae40:	003cc706 	br	800a160 <__alt_data_end+0xfc00a160>
 800ae44:	dc012617 	ldw	r16,1176(sp)
 800ae48:	0401ab0e 	bge	zero,r16,800b4f8 <___vfprintf_internal_r+0x1984>
 800ae4c:	d8813317 	ldw	r2,1228(sp)
 800ae50:	d9413117 	ldw	r5,1220(sp)
 800ae54:	d9013417 	ldw	r4,1232(sp)
 800ae58:	1023883a 	mov	r17,r2
 800ae5c:	28a1883a 	add	r16,r5,r2
 800ae60:	2080010e 	bge	r4,r2,800ae68 <___vfprintf_internal_r+0x12f4>
 800ae64:	2023883a 	mov	r17,r4
 800ae68:	04400b0e 	bge	zero,r17,800ae98 <___vfprintf_internal_r+0x1324>
 800ae6c:	d8811f17 	ldw	r2,1148(sp)
 800ae70:	d9413117 	ldw	r5,1220(sp)
 800ae74:	1c47883a 	add	r3,r3,r17
 800ae78:	10800044 	addi	r2,r2,1
 800ae7c:	41400015 	stw	r5,0(r8)
 800ae80:	44400115 	stw	r17,4(r8)
 800ae84:	d8c12015 	stw	r3,1152(sp)
 800ae88:	d8811f15 	stw	r2,1148(sp)
 800ae8c:	010001c4 	movi	r4,7
 800ae90:	20826716 	blt	r4,r2,800b830 <___vfprintf_internal_r+0x1cbc>
 800ae94:	42000204 	addi	r8,r8,8
 800ae98:	88026316 	blt	r17,zero,800b828 <___vfprintf_internal_r+0x1cb4>
 800ae9c:	d8813417 	ldw	r2,1232(sp)
 800aea0:	1463c83a 	sub	r17,r2,r17
 800aea4:	0440590e 	bge	zero,r17,800b00c <___vfprintf_internal_r+0x1498>
 800aea8:	04c00404 	movi	r19,16
 800aeac:	d8811f17 	ldw	r2,1148(sp)
 800aeb0:	9c41770e 	bge	r19,r17,800b490 <___vfprintf_internal_r+0x191c>
 800aeb4:	014200b4 	movhi	r5,2050
 800aeb8:	294daa84 	addi	r5,r5,13994
 800aebc:	d9412c15 	stw	r5,1200(sp)
 800aec0:	054001c4 	movi	r21,7
 800aec4:	00000306 	br	800aed4 <___vfprintf_internal_r+0x1360>
 800aec8:	42000204 	addi	r8,r8,8
 800aecc:	8c7ffc04 	addi	r17,r17,-16
 800aed0:	9c41720e 	bge	r19,r17,800b49c <___vfprintf_internal_r+0x1928>
 800aed4:	18c00404 	addi	r3,r3,16
 800aed8:	10800044 	addi	r2,r2,1
 800aedc:	45000015 	stw	r20,0(r8)
 800aee0:	44c00115 	stw	r19,4(r8)
 800aee4:	d8c12015 	stw	r3,1152(sp)
 800aee8:	d8811f15 	stw	r2,1148(sp)
 800aeec:	a8bff60e 	bge	r21,r2,800aec8 <__alt_data_end+0xfc00aec8>
 800aef0:	b809883a 	mov	r4,r23
 800aef4:	b00b883a 	mov	r5,r22
 800aef8:	d9811e04 	addi	r6,sp,1144
 800aefc:	8011a700 	call	8011a70 <__sprint_r>
 800af00:	103c341e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800af04:	d8c12017 	ldw	r3,1152(sp)
 800af08:	d8811f17 	ldw	r2,1148(sp)
 800af0c:	da000404 	addi	r8,sp,16
 800af10:	003fee06 	br	800aecc <__alt_data_end+0xfc00aecc>
 800af14:	b809883a 	mov	r4,r23
 800af18:	b00b883a 	mov	r5,r22
 800af1c:	d9811e04 	addi	r6,sp,1144
 800af20:	8011a700 	call	8011a70 <__sprint_r>
 800af24:	103c2b1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800af28:	d8c12017 	ldw	r3,1152(sp)
 800af2c:	d8812787 	ldb	r2,1182(sp)
 800af30:	da000404 	addi	r8,sp,16
 800af34:	003cce06 	br	800a270 <__alt_data_end+0xfc00a270>
 800af38:	d8813317 	ldw	r2,1228(sp)
 800af3c:	14ffffc4 	addi	r19,r2,-1
 800af40:	04ff630e 	bge	zero,r19,800acd0 <__alt_data_end+0xfc00acd0>
 800af44:	05400404 	movi	r21,16
 800af48:	acc0810e 	bge	r21,r19,800b150 <___vfprintf_internal_r+0x15dc>
 800af4c:	014200b4 	movhi	r5,2050
 800af50:	294daa84 	addi	r5,r5,13994
 800af54:	d9412c15 	stw	r5,1200(sp)
 800af58:	01c001c4 	movi	r7,7
 800af5c:	00000306 	br	800af6c <___vfprintf_internal_r+0x13f8>
 800af60:	8c400204 	addi	r17,r17,8
 800af64:	9cfffc04 	addi	r19,r19,-16
 800af68:	acc07c0e 	bge	r21,r19,800b15c <___vfprintf_internal_r+0x15e8>
 800af6c:	18c00404 	addi	r3,r3,16
 800af70:	84000044 	addi	r16,r16,1
 800af74:	8d000015 	stw	r20,0(r17)
 800af78:	8d400115 	stw	r21,4(r17)
 800af7c:	d8c12015 	stw	r3,1152(sp)
 800af80:	dc011f15 	stw	r16,1148(sp)
 800af84:	3c3ff60e 	bge	r7,r16,800af60 <__alt_data_end+0xfc00af60>
 800af88:	b809883a 	mov	r4,r23
 800af8c:	b00b883a 	mov	r5,r22
 800af90:	d9811e04 	addi	r6,sp,1144
 800af94:	d9c13d15 	stw	r7,1268(sp)
 800af98:	8011a700 	call	8011a70 <__sprint_r>
 800af9c:	d9c13d17 	ldw	r7,1268(sp)
 800afa0:	103c0c1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800afa4:	d8c12017 	ldw	r3,1152(sp)
 800afa8:	dc011f17 	ldw	r16,1148(sp)
 800afac:	dc400404 	addi	r17,sp,16
 800afb0:	003fec06 	br	800af64 <__alt_data_end+0xfc00af64>
 800afb4:	00800084 	movi	r2,2
 800afb8:	9546b03a 	or	r3,r18,r21
 800afbc:	003d7d06 	br	800a5b4 <__alt_data_end+0xfc00a5b4>
 800afc0:	10803fcc 	andi	r2,r2,255
 800afc4:	1080201c 	xori	r2,r2,128
 800afc8:	10bfe004 	addi	r2,r2,-128
 800afcc:	01000c04 	movi	r4,48
 800afd0:	1101d726 	beq	r2,r4,800b730 <___vfprintf_internal_r+0x1bbc>
 800afd4:	d9413117 	ldw	r5,1220(sp)
 800afd8:	d8812817 	ldw	r2,1184(sp)
 800afdc:	193fffc5 	stb	r4,-1(r3)
 800afe0:	297fffc4 	addi	r5,r5,-1
 800afe4:	d9413115 	stw	r5,1220(sp)
 800afe8:	1163c83a 	sub	r17,r2,r5
 800afec:	003c5c06 	br	800a160 <__alt_data_end+0xfc00a160>
 800aff0:	b809883a 	mov	r4,r23
 800aff4:	b00b883a 	mov	r5,r22
 800aff8:	d9811e04 	addi	r6,sp,1144
 800affc:	8011a700 	call	8011a70 <__sprint_r>
 800b000:	103bf41e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b004:	d8c12017 	ldw	r3,1152(sp)
 800b008:	da000404 	addi	r8,sp,16
 800b00c:	d9413117 	ldw	r5,1220(sp)
 800b010:	d9013417 	ldw	r4,1232(sp)
 800b014:	d8812617 	ldw	r2,1176(sp)
 800b018:	2923883a 	add	r17,r5,r4
 800b01c:	d9413317 	ldw	r5,1228(sp)
 800b020:	11400216 	blt	r2,r5,800b02c <___vfprintf_internal_r+0x14b8>
 800b024:	e100004c 	andi	r4,fp,1
 800b028:	20000d26 	beq	r4,zero,800b060 <___vfprintf_internal_r+0x14ec>
 800b02c:	d9013817 	ldw	r4,1248(sp)
 800b030:	d9413517 	ldw	r5,1236(sp)
 800b034:	1907883a 	add	r3,r3,r4
 800b038:	d9011f17 	ldw	r4,1148(sp)
 800b03c:	41400015 	stw	r5,0(r8)
 800b040:	d9413817 	ldw	r5,1248(sp)
 800b044:	21000044 	addi	r4,r4,1
 800b048:	d8c12015 	stw	r3,1152(sp)
 800b04c:	41400115 	stw	r5,4(r8)
 800b050:	d9011f15 	stw	r4,1148(sp)
 800b054:	014001c4 	movi	r5,7
 800b058:	2901fd16 	blt	r5,r4,800b850 <___vfprintf_internal_r+0x1cdc>
 800b05c:	42000204 	addi	r8,r8,8
 800b060:	d9013317 	ldw	r4,1228(sp)
 800b064:	2085c83a 	sub	r2,r4,r2
 800b068:	8449c83a 	sub	r4,r16,r17
 800b06c:	1021883a 	mov	r16,r2
 800b070:	2080010e 	bge	r4,r2,800b078 <___vfprintf_internal_r+0x1504>
 800b074:	2021883a 	mov	r16,r4
 800b078:	04000a0e 	bge	zero,r16,800b0a4 <___vfprintf_internal_r+0x1530>
 800b07c:	d9011f17 	ldw	r4,1148(sp)
 800b080:	1c07883a 	add	r3,r3,r16
 800b084:	44400015 	stw	r17,0(r8)
 800b088:	21000044 	addi	r4,r4,1
 800b08c:	44000115 	stw	r16,4(r8)
 800b090:	d8c12015 	stw	r3,1152(sp)
 800b094:	d9011f15 	stw	r4,1148(sp)
 800b098:	014001c4 	movi	r5,7
 800b09c:	29020916 	blt	r5,r4,800b8c4 <___vfprintf_internal_r+0x1d50>
 800b0a0:	42000204 	addi	r8,r8,8
 800b0a4:	80020116 	blt	r16,zero,800b8ac <___vfprintf_internal_r+0x1d38>
 800b0a8:	1421c83a 	sub	r16,r2,r16
 800b0ac:	043cc40e 	bge	zero,r16,800a3c0 <__alt_data_end+0xfc00a3c0>
 800b0b0:	04400404 	movi	r17,16
 800b0b4:	d8811f17 	ldw	r2,1148(sp)
 800b0b8:	8c3f110e 	bge	r17,r16,800ad00 <__alt_data_end+0xfc00ad00>
 800b0bc:	014200b4 	movhi	r5,2050
 800b0c0:	294daa84 	addi	r5,r5,13994
 800b0c4:	d9412c15 	stw	r5,1200(sp)
 800b0c8:	04c001c4 	movi	r19,7
 800b0cc:	00000306 	br	800b0dc <___vfprintf_internal_r+0x1568>
 800b0d0:	42000204 	addi	r8,r8,8
 800b0d4:	843ffc04 	addi	r16,r16,-16
 800b0d8:	8c3f0c0e 	bge	r17,r16,800ad0c <__alt_data_end+0xfc00ad0c>
 800b0dc:	18c00404 	addi	r3,r3,16
 800b0e0:	10800044 	addi	r2,r2,1
 800b0e4:	45000015 	stw	r20,0(r8)
 800b0e8:	44400115 	stw	r17,4(r8)
 800b0ec:	d8c12015 	stw	r3,1152(sp)
 800b0f0:	d8811f15 	stw	r2,1148(sp)
 800b0f4:	98bff60e 	bge	r19,r2,800b0d0 <__alt_data_end+0xfc00b0d0>
 800b0f8:	b809883a 	mov	r4,r23
 800b0fc:	b00b883a 	mov	r5,r22
 800b100:	d9811e04 	addi	r6,sp,1144
 800b104:	8011a700 	call	8011a70 <__sprint_r>
 800b108:	103bb21e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b10c:	d8c12017 	ldw	r3,1152(sp)
 800b110:	d8811f17 	ldw	r2,1148(sp)
 800b114:	da000404 	addi	r8,sp,16
 800b118:	003fee06 	br	800b0d4 <__alt_data_end+0xfc00b0d4>
 800b11c:	e088703a 	and	r4,fp,r2
 800b120:	203ec01e 	bne	r4,zero,800ac24 <__alt_data_end+0xfc00ac24>
 800b124:	dc011f17 	ldw	r16,1148(sp)
 800b128:	d9013117 	ldw	r4,1220(sp)
 800b12c:	40800115 	stw	r2,4(r8)
 800b130:	84000044 	addi	r16,r16,1
 800b134:	41000015 	stw	r4,0(r8)
 800b138:	d8c12015 	stw	r3,1152(sp)
 800b13c:	dc011f15 	stw	r16,1148(sp)
 800b140:	008001c4 	movi	r2,7
 800b144:	14000e16 	blt	r2,r16,800b180 <___vfprintf_internal_r+0x160c>
 800b148:	44400204 	addi	r17,r8,8
 800b14c:	003ee006 	br	800acd0 <__alt_data_end+0xfc00acd0>
 800b150:	010200b4 	movhi	r4,2050
 800b154:	210daa84 	addi	r4,r4,13994
 800b158:	d9012c15 	stw	r4,1200(sp)
 800b15c:	d8812c17 	ldw	r2,1200(sp)
 800b160:	1cc7883a 	add	r3,r3,r19
 800b164:	84000044 	addi	r16,r16,1
 800b168:	88800015 	stw	r2,0(r17)
 800b16c:	8cc00115 	stw	r19,4(r17)
 800b170:	d8c12015 	stw	r3,1152(sp)
 800b174:	dc011f15 	stw	r16,1148(sp)
 800b178:	008001c4 	movi	r2,7
 800b17c:	143ed30e 	bge	r2,r16,800accc <__alt_data_end+0xfc00accc>
 800b180:	b809883a 	mov	r4,r23
 800b184:	b00b883a 	mov	r5,r22
 800b188:	d9811e04 	addi	r6,sp,1144
 800b18c:	8011a700 	call	8011a70 <__sprint_r>
 800b190:	103b901e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b194:	d8c12017 	ldw	r3,1152(sp)
 800b198:	dc011f17 	ldw	r16,1148(sp)
 800b19c:	dc400404 	addi	r17,sp,16
 800b1a0:	003ecb06 	br	800acd0 <__alt_data_end+0xfc00acd0>
 800b1a4:	b809883a 	mov	r4,r23
 800b1a8:	b00b883a 	mov	r5,r22
 800b1ac:	d9811e04 	addi	r6,sp,1144
 800b1b0:	8011a700 	call	8011a70 <__sprint_r>
 800b1b4:	103b871e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b1b8:	d8c12017 	ldw	r3,1152(sp)
 800b1bc:	dc011f17 	ldw	r16,1148(sp)
 800b1c0:	da000404 	addi	r8,sp,16
 800b1c4:	003ea206 	br	800ac50 <__alt_data_end+0xfc00ac50>
 800b1c8:	b809883a 	mov	r4,r23
 800b1cc:	b00b883a 	mov	r5,r22
 800b1d0:	d9811e04 	addi	r6,sp,1144
 800b1d4:	8011a700 	call	8011a70 <__sprint_r>
 800b1d8:	103b7e1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b1dc:	d8c12017 	ldw	r3,1152(sp)
 800b1e0:	dc011f17 	ldw	r16,1148(sp)
 800b1e4:	dc400404 	addi	r17,sp,16
 800b1e8:	003ea406 	br	800ac7c <__alt_data_end+0xfc00ac7c>
 800b1ec:	b809883a 	mov	r4,r23
 800b1f0:	b00b883a 	mov	r5,r22
 800b1f4:	d9811e04 	addi	r6,sp,1144
 800b1f8:	8011a700 	call	8011a70 <__sprint_r>
 800b1fc:	103b751e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b200:	d8c12017 	ldw	r3,1152(sp)
 800b204:	da000404 	addi	r8,sp,16
 800b208:	003c3706 	br	800a2e8 <__alt_data_end+0xfc00a2e8>
 800b20c:	04a5c83a 	sub	r18,zero,r18
 800b210:	9004c03a 	cmpne	r2,r18,zero
 800b214:	056bc83a 	sub	r21,zero,r21
 800b218:	a8abc83a 	sub	r21,r21,r2
 800b21c:	04c00b44 	movi	r19,45
 800b220:	dcc12785 	stb	r19,1182(sp)
 800b224:	da413215 	stw	r9,1224(sp)
 800b228:	00800044 	movi	r2,1
 800b22c:	9546b03a 	or	r3,r18,r21
 800b230:	003bb106 	br	800a0f8 <__alt_data_end+0xfc00a0f8>
 800b234:	da013f15 	stw	r8,1276(sp)
 800b238:	da413e15 	stw	r9,1272(sp)
 800b23c:	80103880 	call	8010388 <__fpclassifyd>
 800b240:	da013f17 	ldw	r8,1276(sp)
 800b244:	da413e17 	ldw	r9,1272(sp)
 800b248:	1000e526 	beq	r2,zero,800b5e0 <___vfprintf_internal_r+0x1a6c>
 800b24c:	04fff7c4 	movi	r19,-33
 800b250:	00bfffc4 	movi	r2,-1
 800b254:	84e6703a 	and	r19,r16,r19
 800b258:	48822926 	beq	r9,r2,800bb00 <___vfprintf_internal_r+0x1f8c>
 800b25c:	008011c4 	movi	r2,71
 800b260:	98821626 	beq	r19,r2,800babc <___vfprintf_internal_r+0x1f48>
 800b264:	d9013917 	ldw	r4,1252(sp)
 800b268:	e0c04014 	ori	r3,fp,256
 800b26c:	d8c12d15 	stw	r3,1204(sp)
 800b270:	20021f16 	blt	r4,zero,800baf0 <___vfprintf_internal_r+0x1f7c>
 800b274:	dc413917 	ldw	r17,1252(sp)
 800b278:	d8012b05 	stb	zero,1196(sp)
 800b27c:	00801984 	movi	r2,102
 800b280:	80814d26 	beq	r16,r2,800b7b8 <___vfprintf_internal_r+0x1c44>
 800b284:	00801184 	movi	r2,70
 800b288:	80814b26 	beq	r16,r2,800b7b8 <___vfprintf_internal_r+0x1c44>
 800b28c:	00801144 	movi	r2,69
 800b290:	98821d26 	beq	r19,r2,800bb08 <___vfprintf_internal_r+0x1f94>
 800b294:	482b883a 	mov	r21,r9
 800b298:	d8812604 	addi	r2,sp,1176
 800b29c:	d8800115 	stw	r2,4(sp)
 800b2a0:	d9413717 	ldw	r5,1244(sp)
 800b2a4:	d8812504 	addi	r2,sp,1172
 800b2a8:	d8800215 	stw	r2,8(sp)
 800b2ac:	d8812104 	addi	r2,sp,1156
 800b2b0:	dd400015 	stw	r21,0(sp)
 800b2b4:	d8800315 	stw	r2,12(sp)
 800b2b8:	b809883a 	mov	r4,r23
 800b2bc:	880d883a 	mov	r6,r17
 800b2c0:	01c00084 	movi	r7,2
 800b2c4:	da013f15 	stw	r8,1276(sp)
 800b2c8:	da413e15 	stw	r9,1272(sp)
 800b2cc:	800bfec0 	call	800bfec <_dtoa_r>
 800b2d0:	d8813115 	stw	r2,1220(sp)
 800b2d4:	008019c4 	movi	r2,103
 800b2d8:	da013f17 	ldw	r8,1276(sp)
 800b2dc:	da413e17 	ldw	r9,1272(sp)
 800b2e0:	80800226 	beq	r16,r2,800b2ec <___vfprintf_internal_r+0x1778>
 800b2e4:	008011c4 	movi	r2,71
 800b2e8:	8081451e 	bne	r16,r2,800b800 <___vfprintf_internal_r+0x1c8c>
 800b2ec:	e080004c 	andi	r2,fp,1
 800b2f0:	10021e26 	beq	r2,zero,800bb6c <___vfprintf_internal_r+0x1ff8>
 800b2f4:	d8c13117 	ldw	r3,1220(sp)
 800b2f8:	1d55883a 	add	r10,r3,r21
 800b2fc:	d9013717 	ldw	r4,1244(sp)
 800b300:	880b883a 	mov	r5,r17
 800b304:	000d883a 	mov	r6,zero
 800b308:	000f883a 	mov	r7,zero
 800b30c:	da013f15 	stw	r8,1276(sp)
 800b310:	da413e15 	stw	r9,1272(sp)
 800b314:	da813d15 	stw	r10,1268(sp)
 800b318:	8014e200 	call	8014e20 <__eqdf2>
 800b31c:	da013f17 	ldw	r8,1276(sp)
 800b320:	da413e17 	ldw	r9,1272(sp)
 800b324:	da813d17 	ldw	r10,1268(sp)
 800b328:	1001a126 	beq	r2,zero,800b9b0 <___vfprintf_internal_r+0x1e3c>
 800b32c:	d8812117 	ldw	r2,1156(sp)
 800b330:	1280062e 	bgeu	r2,r10,800b34c <___vfprintf_internal_r+0x17d8>
 800b334:	01000c04 	movi	r4,48
 800b338:	10c00044 	addi	r3,r2,1
 800b33c:	d8c12115 	stw	r3,1156(sp)
 800b340:	11000005 	stb	r4,0(r2)
 800b344:	d8812117 	ldw	r2,1156(sp)
 800b348:	12bffb36 	bltu	r2,r10,800b338 <__alt_data_end+0xfc00b338>
 800b34c:	d8c13117 	ldw	r3,1220(sp)
 800b350:	10c5c83a 	sub	r2,r2,r3
 800b354:	d8813315 	stw	r2,1228(sp)
 800b358:	008011c4 	movi	r2,71
 800b35c:	98818926 	beq	r19,r2,800b984 <___vfprintf_internal_r+0x1e10>
 800b360:	00801944 	movi	r2,101
 800b364:	14023c0e 	bge	r2,r16,800bc58 <___vfprintf_internal_r+0x20e4>
 800b368:	d8c12617 	ldw	r3,1176(sp)
 800b36c:	00801984 	movi	r2,102
 800b370:	d8c13415 	stw	r3,1232(sp)
 800b374:	8081ef26 	beq	r16,r2,800bb34 <___vfprintf_internal_r+0x1fc0>
 800b378:	d8c13417 	ldw	r3,1232(sp)
 800b37c:	d9013317 	ldw	r4,1228(sp)
 800b380:	1901e316 	blt	r3,r4,800bb10 <___vfprintf_internal_r+0x1f9c>
 800b384:	e080004c 	andi	r2,fp,1
 800b388:	1001f426 	beq	r2,zero,800bb5c <___vfprintf_internal_r+0x1fe8>
 800b38c:	d8c13417 	ldw	r3,1232(sp)
 800b390:	1c400044 	addi	r17,r3,1
 800b394:	8839883a 	mov	fp,r17
 800b398:	8801e416 	blt	r17,zero,800bb2c <___vfprintf_internal_r+0x1fb8>
 800b39c:	dd412b07 	ldb	r21,1196(sp)
 800b3a0:	a801701e 	bne	r21,zero,800b964 <___vfprintf_internal_r+0x1df0>
 800b3a4:	df012b15 	stw	fp,1196(sp)
 800b3a8:	dcc12783 	ldbu	r19,1182(sp)
 800b3ac:	df012d17 	ldw	fp,1204(sp)
 800b3b0:	d8013215 	stw	zero,1224(sp)
 800b3b4:	dc812d15 	stw	r18,1204(sp)
 800b3b8:	003b6e06 	br	800a174 <__alt_data_end+0xfc00a174>
 800b3bc:	e080040c 	andi	r2,fp,16
 800b3c0:	1000b51e 	bne	r2,zero,800b698 <___vfprintf_internal_r+0x1b24>
 800b3c4:	e080100c 	andi	r2,fp,64
 800b3c8:	10015b26 	beq	r2,zero,800b938 <___vfprintf_internal_r+0x1dc4>
 800b3cc:	d9012d17 	ldw	r4,1204(sp)
 800b3d0:	d9412f17 	ldw	r5,1212(sp)
 800b3d4:	20800017 	ldw	r2,0(r4)
 800b3d8:	21000104 	addi	r4,r4,4
 800b3dc:	d9012d15 	stw	r4,1204(sp)
 800b3e0:	1140000d 	sth	r5,0(r2)
 800b3e4:	003a2006 	br	8009c68 <__alt_data_end+0xfc009c68>
 800b3e8:	e0c0100c 	andi	r3,fp,64
 800b3ec:	1800a226 	beq	r3,zero,800b678 <___vfprintf_internal_r+0x1b04>
 800b3f0:	d8c12d17 	ldw	r3,1204(sp)
 800b3f4:	1480000b 	ldhu	r18,0(r2)
 800b3f8:	002b883a 	mov	r21,zero
 800b3fc:	18c00104 	addi	r3,r3,4
 800b400:	d8c12d15 	stw	r3,1204(sp)
 800b404:	0005883a 	mov	r2,zero
 800b408:	9007883a 	mov	r3,r18
 800b40c:	003c6906 	br	800a5b4 <__alt_data_end+0xfc00a5b4>
 800b410:	e0c0100c 	andi	r3,fp,64
 800b414:	18009026 	beq	r3,zero,800b658 <___vfprintf_internal_r+0x1ae4>
 800b418:	1480000b 	ldhu	r18,0(r2)
 800b41c:	d8812d17 	ldw	r2,1204(sp)
 800b420:	002b883a 	mov	r21,zero
 800b424:	9007883a 	mov	r3,r18
 800b428:	10800104 	addi	r2,r2,4
 800b42c:	d8812d15 	stw	r2,1204(sp)
 800b430:	00800044 	movi	r2,1
 800b434:	003c5f06 	br	800a5b4 <__alt_data_end+0xfc00a5b4>
 800b438:	e0c0100c 	andi	r3,fp,64
 800b43c:	18008026 	beq	r3,zero,800b640 <___vfprintf_internal_r+0x1acc>
 800b440:	d9012d17 	ldw	r4,1204(sp)
 800b444:	1480000b 	ldhu	r18,0(r2)
 800b448:	002b883a 	mov	r21,zero
 800b44c:	21000104 	addi	r4,r4,4
 800b450:	d9012d15 	stw	r4,1204(sp)
 800b454:	003c7906 	br	800a63c <__alt_data_end+0xfc00a63c>
 800b458:	e080100c 	andi	r2,fp,64
 800b45c:	10007126 	beq	r2,zero,800b624 <___vfprintf_internal_r+0x1ab0>
 800b460:	1c80000f 	ldh	r18,0(r3)
 800b464:	d8812d17 	ldw	r2,1204(sp)
 800b468:	902bd7fa 	srai	r21,r18,31
 800b46c:	10800104 	addi	r2,r2,4
 800b470:	d8812d15 	stw	r2,1204(sp)
 800b474:	a805883a 	mov	r2,r21
 800b478:	003b1a06 	br	800a0e4 <__alt_data_end+0xfc00a0e4>
 800b47c:	e4000007 	ldb	r16,0(fp)
 800b480:	e005883a 	mov	r2,fp
 800b484:	003a2306 	br	8009d14 <__alt_data_end+0xfc009d14>
 800b488:	00800084 	movi	r2,2
 800b48c:	003c4906 	br	800a5b4 <__alt_data_end+0xfc00a5b4>
 800b490:	010200b4 	movhi	r4,2050
 800b494:	210daa84 	addi	r4,r4,13994
 800b498:	d9012c15 	stw	r4,1200(sp)
 800b49c:	d9012c17 	ldw	r4,1200(sp)
 800b4a0:	1c47883a 	add	r3,r3,r17
 800b4a4:	10800044 	addi	r2,r2,1
 800b4a8:	41000015 	stw	r4,0(r8)
 800b4ac:	44400115 	stw	r17,4(r8)
 800b4b0:	d8c12015 	stw	r3,1152(sp)
 800b4b4:	d8811f15 	stw	r2,1148(sp)
 800b4b8:	010001c4 	movi	r4,7
 800b4bc:	20becc16 	blt	r4,r2,800aff0 <__alt_data_end+0xfc00aff0>
 800b4c0:	42000204 	addi	r8,r8,8
 800b4c4:	003ed106 	br	800b00c <__alt_data_end+0xfc00b00c>
 800b4c8:	010200b4 	movhi	r4,2050
 800b4cc:	210daa84 	addi	r4,r4,13994
 800b4d0:	d9012c15 	stw	r4,1200(sp)
 800b4d4:	003ba306 	br	800a364 <__alt_data_end+0xfc00a364>
 800b4d8:	b809883a 	mov	r4,r23
 800b4dc:	b00b883a 	mov	r5,r22
 800b4e0:	d9811e04 	addi	r6,sp,1144
 800b4e4:	8011a700 	call	8011a70 <__sprint_r>
 800b4e8:	103aba1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b4ec:	d8c12017 	ldw	r3,1152(sp)
 800b4f0:	da000404 	addi	r8,sp,16
 800b4f4:	003d6c06 	br	800aaa8 <__alt_data_end+0xfc00aaa8>
 800b4f8:	d8811f17 	ldw	r2,1148(sp)
 800b4fc:	014200b4 	movhi	r5,2050
 800b500:	01000044 	movi	r4,1
 800b504:	18c00044 	addi	r3,r3,1
 800b508:	10800044 	addi	r2,r2,1
 800b50c:	294da204 	addi	r5,r5,13960
 800b510:	41000115 	stw	r4,4(r8)
 800b514:	41400015 	stw	r5,0(r8)
 800b518:	d8c12015 	stw	r3,1152(sp)
 800b51c:	d8811f15 	stw	r2,1148(sp)
 800b520:	010001c4 	movi	r4,7
 800b524:	20806716 	blt	r4,r2,800b6c4 <___vfprintf_internal_r+0x1b50>
 800b528:	42000204 	addi	r8,r8,8
 800b52c:	8000041e 	bne	r16,zero,800b540 <___vfprintf_internal_r+0x19cc>
 800b530:	d8813317 	ldw	r2,1228(sp)
 800b534:	1000021e 	bne	r2,zero,800b540 <___vfprintf_internal_r+0x19cc>
 800b538:	e080004c 	andi	r2,fp,1
 800b53c:	103ba026 	beq	r2,zero,800a3c0 <__alt_data_end+0xfc00a3c0>
 800b540:	d9013817 	ldw	r4,1248(sp)
 800b544:	d8811f17 	ldw	r2,1148(sp)
 800b548:	d9413517 	ldw	r5,1236(sp)
 800b54c:	1907883a 	add	r3,r3,r4
 800b550:	10800044 	addi	r2,r2,1
 800b554:	41000115 	stw	r4,4(r8)
 800b558:	41400015 	stw	r5,0(r8)
 800b55c:	d8c12015 	stw	r3,1152(sp)
 800b560:	d8811f15 	stw	r2,1148(sp)
 800b564:	010001c4 	movi	r4,7
 800b568:	20815716 	blt	r4,r2,800bac8 <___vfprintf_internal_r+0x1f54>
 800b56c:	42000204 	addi	r8,r8,8
 800b570:	0421c83a 	sub	r16,zero,r16
 800b574:	0400810e 	bge	zero,r16,800b77c <___vfprintf_internal_r+0x1c08>
 800b578:	04400404 	movi	r17,16
 800b57c:	8c00bd0e 	bge	r17,r16,800b874 <___vfprintf_internal_r+0x1d00>
 800b580:	014200b4 	movhi	r5,2050
 800b584:	294daa84 	addi	r5,r5,13994
 800b588:	d9412c15 	stw	r5,1200(sp)
 800b58c:	04c001c4 	movi	r19,7
 800b590:	00000306 	br	800b5a0 <___vfprintf_internal_r+0x1a2c>
 800b594:	42000204 	addi	r8,r8,8
 800b598:	843ffc04 	addi	r16,r16,-16
 800b59c:	8c00b80e 	bge	r17,r16,800b880 <___vfprintf_internal_r+0x1d0c>
 800b5a0:	18c00404 	addi	r3,r3,16
 800b5a4:	10800044 	addi	r2,r2,1
 800b5a8:	45000015 	stw	r20,0(r8)
 800b5ac:	44400115 	stw	r17,4(r8)
 800b5b0:	d8c12015 	stw	r3,1152(sp)
 800b5b4:	d8811f15 	stw	r2,1148(sp)
 800b5b8:	98bff60e 	bge	r19,r2,800b594 <__alt_data_end+0xfc00b594>
 800b5bc:	b809883a 	mov	r4,r23
 800b5c0:	b00b883a 	mov	r5,r22
 800b5c4:	d9811e04 	addi	r6,sp,1144
 800b5c8:	8011a700 	call	8011a70 <__sprint_r>
 800b5cc:	103a811e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b5d0:	d8c12017 	ldw	r3,1152(sp)
 800b5d4:	d8811f17 	ldw	r2,1148(sp)
 800b5d8:	da000404 	addi	r8,sp,16
 800b5dc:	003fee06 	br	800b598 <__alt_data_end+0xfc00b598>
 800b5e0:	008011c4 	movi	r2,71
 800b5e4:	1400db16 	blt	r2,r16,800b954 <___vfprintf_internal_r+0x1de0>
 800b5e8:	010200b4 	movhi	r4,2050
 800b5ec:	210d9404 	addi	r4,r4,13904
 800b5f0:	d9013115 	stw	r4,1220(sp)
 800b5f4:	00c000c4 	movi	r3,3
 800b5f8:	00bfdfc4 	movi	r2,-129
 800b5fc:	d8c12b15 	stw	r3,1196(sp)
 800b600:	e0b8703a 	and	fp,fp,r2
 800b604:	dcc12783 	ldbu	r19,1182(sp)
 800b608:	dc812d15 	stw	r18,1204(sp)
 800b60c:	1823883a 	mov	r17,r3
 800b610:	d8013215 	stw	zero,1224(sp)
 800b614:	d8013415 	stw	zero,1232(sp)
 800b618:	003ad606 	br	800a174 <__alt_data_end+0xfc00a174>
 800b61c:	4823883a 	mov	r17,r9
 800b620:	003cc906 	br	800a948 <__alt_data_end+0xfc00a948>
 800b624:	1c800017 	ldw	r18,0(r3)
 800b628:	d8c12d17 	ldw	r3,1204(sp)
 800b62c:	902bd7fa 	srai	r21,r18,31
 800b630:	18c00104 	addi	r3,r3,4
 800b634:	d8c12d15 	stw	r3,1204(sp)
 800b638:	a805883a 	mov	r2,r21
 800b63c:	003aa906 	br	800a0e4 <__alt_data_end+0xfc00a0e4>
 800b640:	d9412d17 	ldw	r5,1204(sp)
 800b644:	14800017 	ldw	r18,0(r2)
 800b648:	002b883a 	mov	r21,zero
 800b64c:	29400104 	addi	r5,r5,4
 800b650:	d9412d15 	stw	r5,1204(sp)
 800b654:	003bf906 	br	800a63c <__alt_data_end+0xfc00a63c>
 800b658:	d8c12d17 	ldw	r3,1204(sp)
 800b65c:	14800017 	ldw	r18,0(r2)
 800b660:	002b883a 	mov	r21,zero
 800b664:	18c00104 	addi	r3,r3,4
 800b668:	d8c12d15 	stw	r3,1204(sp)
 800b66c:	00800044 	movi	r2,1
 800b670:	9007883a 	mov	r3,r18
 800b674:	003bcf06 	br	800a5b4 <__alt_data_end+0xfc00a5b4>
 800b678:	d9012d17 	ldw	r4,1204(sp)
 800b67c:	14800017 	ldw	r18,0(r2)
 800b680:	002b883a 	mov	r21,zero
 800b684:	21000104 	addi	r4,r4,4
 800b688:	d9012d15 	stw	r4,1204(sp)
 800b68c:	0005883a 	mov	r2,zero
 800b690:	9007883a 	mov	r3,r18
 800b694:	003bc706 	br	800a5b4 <__alt_data_end+0xfc00a5b4>
 800b698:	d9412d17 	ldw	r5,1204(sp)
 800b69c:	d8c12f17 	ldw	r3,1212(sp)
 800b6a0:	28800017 	ldw	r2,0(r5)
 800b6a4:	29400104 	addi	r5,r5,4
 800b6a8:	d9412d15 	stw	r5,1204(sp)
 800b6ac:	10c00015 	stw	r3,0(r2)
 800b6b0:	00396d06 	br	8009c68 <__alt_data_end+0xfc009c68>
 800b6b4:	010200b4 	movhi	r4,2050
 800b6b8:	210d9204 	addi	r4,r4,13896
 800b6bc:	d9013115 	stw	r4,1220(sp)
 800b6c0:	003ba206 	br	800a54c <__alt_data_end+0xfc00a54c>
 800b6c4:	b809883a 	mov	r4,r23
 800b6c8:	b00b883a 	mov	r5,r22
 800b6cc:	d9811e04 	addi	r6,sp,1144
 800b6d0:	8011a700 	call	8011a70 <__sprint_r>
 800b6d4:	103a3f1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b6d8:	dc012617 	ldw	r16,1176(sp)
 800b6dc:	d8c12017 	ldw	r3,1152(sp)
 800b6e0:	da000404 	addi	r8,sp,16
 800b6e4:	003f9106 	br	800b52c <__alt_data_end+0xfc00b52c>
 800b6e8:	e0800044 	addi	r2,fp,1
 800b6ec:	9cc00814 	ori	r19,r19,32
 800b6f0:	e4000047 	ldb	r16,1(fp)
 800b6f4:	00398706 	br	8009d14 <__alt_data_end+0xfc009d14>
 800b6f8:	d8812e17 	ldw	r2,1208(sp)
 800b6fc:	d8c12d15 	stw	r3,1204(sp)
 800b700:	0085c83a 	sub	r2,zero,r2
 800b704:	d8812e15 	stw	r2,1208(sp)
 800b708:	e005883a 	mov	r2,fp
 800b70c:	003a3a06 	br	8009ff8 <__alt_data_end+0xfc009ff8>
 800b710:	b809883a 	mov	r4,r23
 800b714:	b00b883a 	mov	r5,r22
 800b718:	d9811e04 	addi	r6,sp,1144
 800b71c:	8011a700 	call	8011a70 <__sprint_r>
 800b720:	103a2c1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b724:	d8c12017 	ldw	r3,1152(sp)
 800b728:	da000404 	addi	r8,sp,16
 800b72c:	003cf006 	br	800aaf0 <__alt_data_end+0xfc00aaf0>
 800b730:	d8c12817 	ldw	r3,1184(sp)
 800b734:	d9013117 	ldw	r4,1220(sp)
 800b738:	1923c83a 	sub	r17,r3,r4
 800b73c:	003a8806 	br	800a160 <__alt_data_end+0xfc00a160>
 800b740:	da013f15 	stw	r8,1276(sp)
 800b744:	80079640 	call	8007964 <strlen>
 800b748:	1023883a 	mov	r17,r2
 800b74c:	da013f17 	ldw	r8,1276(sp)
 800b750:	883c7f0e 	bge	r17,zero,800a950 <__alt_data_end+0xfc00a950>
 800b754:	0005883a 	mov	r2,zero
 800b758:	003c7d06 	br	800a950 <__alt_data_end+0xfc00a950>
 800b75c:	b809883a 	mov	r4,r23
 800b760:	b00b883a 	mov	r5,r22
 800b764:	d9811e04 	addi	r6,sp,1144
 800b768:	8011a700 	call	8011a70 <__sprint_r>
 800b76c:	103a191e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b770:	d8c12017 	ldw	r3,1152(sp)
 800b774:	d8811f17 	ldw	r2,1148(sp)
 800b778:	da000404 	addi	r8,sp,16
 800b77c:	d9413317 	ldw	r5,1228(sp)
 800b780:	d9013117 	ldw	r4,1220(sp)
 800b784:	10800044 	addi	r2,r2,1
 800b788:	28c7883a 	add	r3,r5,r3
 800b78c:	41000015 	stw	r4,0(r8)
 800b790:	41400115 	stw	r5,4(r8)
 800b794:	d8c12015 	stw	r3,1152(sp)
 800b798:	d8811f15 	stw	r2,1148(sp)
 800b79c:	010001c4 	movi	r4,7
 800b7a0:	20bb060e 	bge	r4,r2,800a3bc <__alt_data_end+0xfc00a3bc>
 800b7a4:	003d6206 	br	800ad30 <__alt_data_end+0xfc00ad30>
 800b7a8:	010200b4 	movhi	r4,2050
 800b7ac:	210dae84 	addi	r4,r4,14010
 800b7b0:	d9013615 	stw	r4,1240(sp)
 800b7b4:	003aa306 	br	800a244 <__alt_data_end+0xfc00a244>
 800b7b8:	d8812604 	addi	r2,sp,1176
 800b7bc:	d8800115 	stw	r2,4(sp)
 800b7c0:	d9413717 	ldw	r5,1244(sp)
 800b7c4:	d8812504 	addi	r2,sp,1172
 800b7c8:	d8800215 	stw	r2,8(sp)
 800b7cc:	d8812104 	addi	r2,sp,1156
 800b7d0:	da400015 	stw	r9,0(sp)
 800b7d4:	d8800315 	stw	r2,12(sp)
 800b7d8:	b809883a 	mov	r4,r23
 800b7dc:	880d883a 	mov	r6,r17
 800b7e0:	01c000c4 	movi	r7,3
 800b7e4:	da013f15 	stw	r8,1276(sp)
 800b7e8:	da413e15 	stw	r9,1272(sp)
 800b7ec:	800bfec0 	call	800bfec <_dtoa_r>
 800b7f0:	da413e17 	ldw	r9,1272(sp)
 800b7f4:	da013f17 	ldw	r8,1276(sp)
 800b7f8:	d8813115 	stw	r2,1220(sp)
 800b7fc:	482b883a 	mov	r21,r9
 800b800:	d8c13117 	ldw	r3,1220(sp)
 800b804:	00801184 	movi	r2,70
 800b808:	1d55883a 	add	r10,r3,r21
 800b80c:	98bebb1e 	bne	r19,r2,800b2fc <__alt_data_end+0xfc00b2fc>
 800b810:	19000007 	ldb	r4,0(r3)
 800b814:	00800c04 	movi	r2,48
 800b818:	2080dd26 	beq	r4,r2,800bb90 <___vfprintf_internal_r+0x201c>
 800b81c:	d8c12617 	ldw	r3,1176(sp)
 800b820:	50d5883a 	add	r10,r10,r3
 800b824:	003eb506 	br	800b2fc <__alt_data_end+0xfc00b2fc>
 800b828:	0023883a 	mov	r17,zero
 800b82c:	003d9b06 	br	800ae9c <__alt_data_end+0xfc00ae9c>
 800b830:	b809883a 	mov	r4,r23
 800b834:	b00b883a 	mov	r5,r22
 800b838:	d9811e04 	addi	r6,sp,1144
 800b83c:	8011a700 	call	8011a70 <__sprint_r>
 800b840:	1039e41e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b844:	d8c12017 	ldw	r3,1152(sp)
 800b848:	da000404 	addi	r8,sp,16
 800b84c:	003d9206 	br	800ae98 <__alt_data_end+0xfc00ae98>
 800b850:	b809883a 	mov	r4,r23
 800b854:	b00b883a 	mov	r5,r22
 800b858:	d9811e04 	addi	r6,sp,1144
 800b85c:	8011a700 	call	8011a70 <__sprint_r>
 800b860:	1039dc1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b864:	d8812617 	ldw	r2,1176(sp)
 800b868:	d8c12017 	ldw	r3,1152(sp)
 800b86c:	da000404 	addi	r8,sp,16
 800b870:	003dfb06 	br	800b060 <__alt_data_end+0xfc00b060>
 800b874:	010200b4 	movhi	r4,2050
 800b878:	210daa84 	addi	r4,r4,13994
 800b87c:	d9012c15 	stw	r4,1200(sp)
 800b880:	d9012c17 	ldw	r4,1200(sp)
 800b884:	1c07883a 	add	r3,r3,r16
 800b888:	10800044 	addi	r2,r2,1
 800b88c:	41000015 	stw	r4,0(r8)
 800b890:	44000115 	stw	r16,4(r8)
 800b894:	d8c12015 	stw	r3,1152(sp)
 800b898:	d8811f15 	stw	r2,1148(sp)
 800b89c:	010001c4 	movi	r4,7
 800b8a0:	20bfae16 	blt	r4,r2,800b75c <__alt_data_end+0xfc00b75c>
 800b8a4:	42000204 	addi	r8,r8,8
 800b8a8:	003fb406 	br	800b77c <__alt_data_end+0xfc00b77c>
 800b8ac:	0021883a 	mov	r16,zero
 800b8b0:	003dfd06 	br	800b0a8 <__alt_data_end+0xfc00b0a8>
 800b8b4:	014200b4 	movhi	r5,2050
 800b8b8:	294dae84 	addi	r5,r5,14010
 800b8bc:	d9413615 	stw	r5,1240(sp)
 800b8c0:	003ae306 	br	800a450 <__alt_data_end+0xfc00a450>
 800b8c4:	b809883a 	mov	r4,r23
 800b8c8:	b00b883a 	mov	r5,r22
 800b8cc:	d9811e04 	addi	r6,sp,1144
 800b8d0:	8011a700 	call	8011a70 <__sprint_r>
 800b8d4:	1039bf1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800b8d8:	d8812617 	ldw	r2,1176(sp)
 800b8dc:	d9413317 	ldw	r5,1228(sp)
 800b8e0:	d8c12017 	ldw	r3,1152(sp)
 800b8e4:	da000404 	addi	r8,sp,16
 800b8e8:	2885c83a 	sub	r2,r5,r2
 800b8ec:	003ded06 	br	800b0a4 <__alt_data_end+0xfc00b0a4>
 800b8f0:	00800184 	movi	r2,6
 800b8f4:	1240012e 	bgeu	r2,r9,800b8fc <___vfprintf_internal_r+0x1d88>
 800b8f8:	1013883a 	mov	r9,r2
 800b8fc:	4823883a 	mov	r17,r9
 800b900:	4805883a 	mov	r2,r9
 800b904:	4800b216 	blt	r9,zero,800bbd0 <___vfprintf_internal_r+0x205c>
 800b908:	014200b4 	movhi	r5,2050
 800b90c:	294da004 	addi	r5,r5,13952
 800b910:	d8812b15 	stw	r2,1196(sp)
 800b914:	dc812d15 	stw	r18,1204(sp)
 800b918:	d8013215 	stw	zero,1224(sp)
 800b91c:	d8013415 	stw	zero,1232(sp)
 800b920:	d9413115 	stw	r5,1220(sp)
 800b924:	0005883a 	mov	r2,zero
 800b928:	003a1906 	br	800a190 <__alt_data_end+0xfc00a190>
 800b92c:	04c00b44 	movi	r19,45
 800b930:	dcc12785 	stb	r19,1182(sp)
 800b934:	003b0006 	br	800a538 <__alt_data_end+0xfc00a538>
 800b938:	d8c12d17 	ldw	r3,1204(sp)
 800b93c:	d9012f17 	ldw	r4,1212(sp)
 800b940:	18800017 	ldw	r2,0(r3)
 800b944:	18c00104 	addi	r3,r3,4
 800b948:	d8c12d15 	stw	r3,1204(sp)
 800b94c:	11000015 	stw	r4,0(r2)
 800b950:	0038c506 	br	8009c68 <__alt_data_end+0xfc009c68>
 800b954:	014200b4 	movhi	r5,2050
 800b958:	294d9504 	addi	r5,r5,13908
 800b95c:	d9413115 	stw	r5,1220(sp)
 800b960:	003f2406 	br	800b5f4 <__alt_data_end+0xfc00b5f4>
 800b964:	00800b44 	movi	r2,45
 800b968:	d8812785 	stb	r2,1182(sp)
 800b96c:	df012b15 	stw	fp,1196(sp)
 800b970:	d8013215 	stw	zero,1224(sp)
 800b974:	df012d17 	ldw	fp,1204(sp)
 800b978:	00800b44 	movi	r2,45
 800b97c:	dc812d15 	stw	r18,1204(sp)
 800b980:	003a0006 	br	800a184 <__alt_data_end+0xfc00a184>
 800b984:	d8c12617 	ldw	r3,1176(sp)
 800b988:	00bfff44 	movi	r2,-3
 800b98c:	18800a16 	blt	r3,r2,800b9b8 <___vfprintf_internal_r+0x1e44>
 800b990:	48c00916 	blt	r9,r3,800b9b8 <___vfprintf_internal_r+0x1e44>
 800b994:	d8c13415 	stw	r3,1232(sp)
 800b998:	040019c4 	movi	r16,103
 800b99c:	003e7606 	br	800b378 <__alt_data_end+0xfc00b378>
 800b9a0:	010200b4 	movhi	r4,2050
 800b9a4:	210daa84 	addi	r4,r4,13994
 800b9a8:	d9012c15 	stw	r4,1200(sp)
 800b9ac:	003c8e06 	br	800abe8 <__alt_data_end+0xfc00abe8>
 800b9b0:	5005883a 	mov	r2,r10
 800b9b4:	003e6506 	br	800b34c <__alt_data_end+0xfc00b34c>
 800b9b8:	843fff84 	addi	r16,r16,-2
 800b9bc:	1d7fffc4 	addi	r21,r3,-1
 800b9c0:	dd412615 	stw	r21,1176(sp)
 800b9c4:	dc0122c5 	stb	r16,1163(sp)
 800b9c8:	a8009216 	blt	r21,zero,800bc14 <___vfprintf_internal_r+0x20a0>
 800b9cc:	00800ac4 	movi	r2,43
 800b9d0:	d8812305 	stb	r2,1164(sp)
 800b9d4:	00800244 	movi	r2,9
 800b9d8:	1540660e 	bge	r2,r21,800bb74 <___vfprintf_internal_r+0x2000>
 800b9dc:	dcc122c4 	addi	r19,sp,1163
 800b9e0:	dc012c15 	stw	r16,1200(sp)
 800b9e4:	4023883a 	mov	r17,r8
 800b9e8:	9821883a 	mov	r16,r19
 800b9ec:	a809883a 	mov	r4,r21
 800b9f0:	01400284 	movi	r5,10
 800b9f4:	8004ba40 	call	8004ba4 <__modsi3>
 800b9f8:	10800c04 	addi	r2,r2,48
 800b9fc:	843fffc4 	addi	r16,r16,-1
 800ba00:	a809883a 	mov	r4,r21
 800ba04:	01400284 	movi	r5,10
 800ba08:	80800005 	stb	r2,0(r16)
 800ba0c:	8004b500 	call	8004b50 <__divsi3>
 800ba10:	01000244 	movi	r4,9
 800ba14:	102b883a 	mov	r21,r2
 800ba18:	20bff416 	blt	r4,r2,800b9ec <__alt_data_end+0xfc00b9ec>
 800ba1c:	8811883a 	mov	r8,r17
 800ba20:	10800c04 	addi	r2,r2,48
 800ba24:	8023883a 	mov	r17,r16
 800ba28:	897fffc4 	addi	r5,r17,-1
 800ba2c:	88bfffc5 	stb	r2,-1(r17)
 800ba30:	dc012c17 	ldw	r16,1200(sp)
 800ba34:	2cc08a2e 	bgeu	r5,r19,800bc60 <___vfprintf_internal_r+0x20ec>
 800ba38:	d9812384 	addi	r6,sp,1166
 800ba3c:	344dc83a 	sub	r6,r6,r17
 800ba40:	d9012344 	addi	r4,sp,1165
 800ba44:	998d883a 	add	r6,r19,r6
 800ba48:	00000106 	br	800ba50 <___vfprintf_internal_r+0x1edc>
 800ba4c:	28800003 	ldbu	r2,0(r5)
 800ba50:	20800005 	stb	r2,0(r4)
 800ba54:	21000044 	addi	r4,r4,1
 800ba58:	29400044 	addi	r5,r5,1
 800ba5c:	21bffb1e 	bne	r4,r6,800ba4c <__alt_data_end+0xfc00ba4c>
 800ba60:	d8812304 	addi	r2,sp,1164
 800ba64:	1445c83a 	sub	r2,r2,r17
 800ba68:	d9412344 	addi	r5,sp,1165
 800ba6c:	2885883a 	add	r2,r5,r2
 800ba70:	14e7c83a 	sub	r19,r2,r19
 800ba74:	d8813317 	ldw	r2,1228(sp)
 800ba78:	d8c13317 	ldw	r3,1228(sp)
 800ba7c:	dcc13a15 	stw	r19,1256(sp)
 800ba80:	14e3883a 	add	r17,r2,r19
 800ba84:	00800044 	movi	r2,1
 800ba88:	10c0550e 	bge	r2,r3,800bbe0 <___vfprintf_internal_r+0x206c>
 800ba8c:	8c400044 	addi	r17,r17,1
 800ba90:	8839883a 	mov	fp,r17
 800ba94:	88005016 	blt	r17,zero,800bbd8 <___vfprintf_internal_r+0x2064>
 800ba98:	d8013415 	stw	zero,1232(sp)
 800ba9c:	003e3f06 	br	800b39c <__alt_data_end+0xfc00b39c>
 800baa0:	da412b15 	stw	r9,1196(sp)
 800baa4:	dcc12783 	ldbu	r19,1182(sp)
 800baa8:	4823883a 	mov	r17,r9
 800baac:	dc812d15 	stw	r18,1204(sp)
 800bab0:	d8013215 	stw	zero,1224(sp)
 800bab4:	d8013415 	stw	zero,1232(sp)
 800bab8:	0039ae06 	br	800a174 <__alt_data_end+0xfc00a174>
 800babc:	483de91e 	bne	r9,zero,800b264 <__alt_data_end+0xfc00b264>
 800bac0:	8813883a 	mov	r9,r17
 800bac4:	003de706 	br	800b264 <__alt_data_end+0xfc00b264>
 800bac8:	b809883a 	mov	r4,r23
 800bacc:	b00b883a 	mov	r5,r22
 800bad0:	d9811e04 	addi	r6,sp,1144
 800bad4:	8011a700 	call	8011a70 <__sprint_r>
 800bad8:	10393e1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800badc:	dc012617 	ldw	r16,1176(sp)
 800bae0:	d8c12017 	ldw	r3,1152(sp)
 800bae4:	d8811f17 	ldw	r2,1148(sp)
 800bae8:	da000404 	addi	r8,sp,16
 800baec:	003ea006 	br	800b570 <__alt_data_end+0xfc00b570>
 800baf0:	00c00b44 	movi	r3,45
 800baf4:	2460003c 	xorhi	r17,r4,32768
 800baf8:	d8c12b05 	stb	r3,1196(sp)
 800bafc:	003ddf06 	br	800b27c <__alt_data_end+0xfc00b27c>
 800bb00:	02400184 	movi	r9,6
 800bb04:	003dd706 	br	800b264 <__alt_data_end+0xfc00b264>
 800bb08:	4d400044 	addi	r21,r9,1
 800bb0c:	003de206 	br	800b298 <__alt_data_end+0xfc00b298>
 800bb10:	d8c13417 	ldw	r3,1232(sp)
 800bb14:	00c0490e 	bge	zero,r3,800bc3c <___vfprintf_internal_r+0x20c8>
 800bb18:	04400044 	movi	r17,1
 800bb1c:	d9013317 	ldw	r4,1228(sp)
 800bb20:	8923883a 	add	r17,r17,r4
 800bb24:	8839883a 	mov	fp,r17
 800bb28:	883e1c0e 	bge	r17,zero,800b39c <__alt_data_end+0xfc00b39c>
 800bb2c:	0039883a 	mov	fp,zero
 800bb30:	003e1a06 	br	800b39c <__alt_data_end+0xfc00b39c>
 800bb34:	00c03b0e 	bge	zero,r3,800bc24 <___vfprintf_internal_r+0x20b0>
 800bb38:	4800021e 	bne	r9,zero,800bb44 <___vfprintf_internal_r+0x1fd0>
 800bb3c:	e080004c 	andi	r2,fp,1
 800bb40:	10000626 	beq	r2,zero,800bb5c <___vfprintf_internal_r+0x1fe8>
 800bb44:	d8c13417 	ldw	r3,1232(sp)
 800bb48:	4a400044 	addi	r9,r9,1
 800bb4c:	1a63883a 	add	r17,r3,r9
 800bb50:	8839883a 	mov	fp,r17
 800bb54:	883e110e 	bge	r17,zero,800b39c <__alt_data_end+0xfc00b39c>
 800bb58:	003ff406 	br	800bb2c <__alt_data_end+0xfc00bb2c>
 800bb5c:	1839883a 	mov	fp,r3
 800bb60:	18004116 	blt	r3,zero,800bc68 <___vfprintf_internal_r+0x20f4>
 800bb64:	dc413417 	ldw	r17,1232(sp)
 800bb68:	003e0c06 	br	800b39c <__alt_data_end+0xfc00b39c>
 800bb6c:	d8812117 	ldw	r2,1156(sp)
 800bb70:	003df606 	br	800b34c <__alt_data_end+0xfc00b34c>
 800bb74:	00800c04 	movi	r2,48
 800bb78:	a8c00c04 	addi	r3,r21,48
 800bb7c:	d8812345 	stb	r2,1165(sp)
 800bb80:	d8c12385 	stb	r3,1166(sp)
 800bb84:	d88123c4 	addi	r2,sp,1167
 800bb88:	dcc122c4 	addi	r19,sp,1163
 800bb8c:	003fb806 	br	800ba70 <__alt_data_end+0xfc00ba70>
 800bb90:	d9013717 	ldw	r4,1244(sp)
 800bb94:	880b883a 	mov	r5,r17
 800bb98:	000d883a 	mov	r6,zero
 800bb9c:	000f883a 	mov	r7,zero
 800bba0:	da013f15 	stw	r8,1276(sp)
 800bba4:	da413e15 	stw	r9,1272(sp)
 800bba8:	da813d15 	stw	r10,1268(sp)
 800bbac:	8014e200 	call	8014e20 <__eqdf2>
 800bbb0:	da013f17 	ldw	r8,1276(sp)
 800bbb4:	da413e17 	ldw	r9,1272(sp)
 800bbb8:	da813d17 	ldw	r10,1268(sp)
 800bbbc:	103f1726 	beq	r2,zero,800b81c <__alt_data_end+0xfc00b81c>
 800bbc0:	00800044 	movi	r2,1
 800bbc4:	1547c83a 	sub	r3,r2,r21
 800bbc8:	d8c12615 	stw	r3,1176(sp)
 800bbcc:	003f1406 	br	800b820 <__alt_data_end+0xfc00b820>
 800bbd0:	0005883a 	mov	r2,zero
 800bbd4:	003f4c06 	br	800b908 <__alt_data_end+0xfc00b908>
 800bbd8:	0039883a 	mov	fp,zero
 800bbdc:	003fae06 	br	800ba98 <__alt_data_end+0xfc00ba98>
 800bbe0:	e084703a 	and	r2,fp,r2
 800bbe4:	103faa26 	beq	r2,zero,800ba90 <__alt_data_end+0xfc00ba90>
 800bbe8:	003fa806 	br	800ba8c <__alt_data_end+0xfc00ba8c>
 800bbec:	d9412d17 	ldw	r5,1204(sp)
 800bbf0:	2a400017 	ldw	r9,0(r5)
 800bbf4:	28c00104 	addi	r3,r5,4
 800bbf8:	d8c12d15 	stw	r3,1204(sp)
 800bbfc:	483ebc0e 	bge	r9,zero,800b6f0 <__alt_data_end+0xfc00b6f0>
 800bc00:	027fffc4 	movi	r9,-1
 800bc04:	e4000047 	ldb	r16,1(fp)
 800bc08:	00384206 	br	8009d14 <__alt_data_end+0xfc009d14>
 800bc0c:	043fffc4 	movi	r16,-1
 800bc10:	0038ce06 	br	8009f4c <__alt_data_end+0xfc009f4c>
 800bc14:	00800b44 	movi	r2,45
 800bc18:	056bc83a 	sub	r21,zero,r21
 800bc1c:	d8812305 	stb	r2,1164(sp)
 800bc20:	003f6c06 	br	800b9d4 <__alt_data_end+0xfc00b9d4>
 800bc24:	4800081e 	bne	r9,zero,800bc48 <___vfprintf_internal_r+0x20d4>
 800bc28:	e080004c 	andi	r2,fp,1
 800bc2c:	1000061e 	bne	r2,zero,800bc48 <___vfprintf_internal_r+0x20d4>
 800bc30:	07000044 	movi	fp,1
 800bc34:	e023883a 	mov	r17,fp
 800bc38:	003dd806 	br	800b39c <__alt_data_end+0xfc00b39c>
 800bc3c:	04400084 	movi	r17,2
 800bc40:	88e3c83a 	sub	r17,r17,r3
 800bc44:	003fb506 	br	800bb1c <__alt_data_end+0xfc00bb1c>
 800bc48:	4c400084 	addi	r17,r9,2
 800bc4c:	8839883a 	mov	fp,r17
 800bc50:	883dd20e 	bge	r17,zero,800b39c <__alt_data_end+0xfc00b39c>
 800bc54:	003fb506 	br	800bb2c <__alt_data_end+0xfc00bb2c>
 800bc58:	d8c12617 	ldw	r3,1176(sp)
 800bc5c:	003f5706 	br	800b9bc <__alt_data_end+0xfc00b9bc>
 800bc60:	d8812344 	addi	r2,sp,1165
 800bc64:	003f8206 	br	800ba70 <__alt_data_end+0xfc00ba70>
 800bc68:	0039883a 	mov	fp,zero
 800bc6c:	003fbd06 	br	800bb64 <__alt_data_end+0xfc00bb64>

0800bc70 <__vfprintf_internal>:
 800bc70:	2007883a 	mov	r3,r4
 800bc74:	010200b4 	movhi	r4,2050
 800bc78:	2114e104 	addi	r4,r4,21380
 800bc7c:	21000017 	ldw	r4,0(r4)
 800bc80:	2805883a 	mov	r2,r5
 800bc84:	300f883a 	mov	r7,r6
 800bc88:	180b883a 	mov	r5,r3
 800bc8c:	100d883a 	mov	r6,r2
 800bc90:	8009b741 	jmpi	8009b74 <___vfprintf_internal_r>

0800bc94 <__swsetup_r>:
 800bc94:	008200b4 	movhi	r2,2050
 800bc98:	defffd04 	addi	sp,sp,-12
 800bc9c:	1094e104 	addi	r2,r2,21380
 800bca0:	dc400115 	stw	r17,4(sp)
 800bca4:	2023883a 	mov	r17,r4
 800bca8:	11000017 	ldw	r4,0(r2)
 800bcac:	dc000015 	stw	r16,0(sp)
 800bcb0:	dfc00215 	stw	ra,8(sp)
 800bcb4:	2821883a 	mov	r16,r5
 800bcb8:	20000226 	beq	r4,zero,800bcc4 <__swsetup_r+0x30>
 800bcbc:	20c00e17 	ldw	r3,56(r4)
 800bcc0:	18002e26 	beq	r3,zero,800bd7c <__swsetup_r+0xe8>
 800bcc4:	8080030b 	ldhu	r2,12(r16)
 800bcc8:	10c0020c 	andi	r3,r2,8
 800bccc:	100d883a 	mov	r6,r2
 800bcd0:	18000f26 	beq	r3,zero,800bd10 <__swsetup_r+0x7c>
 800bcd4:	80c00417 	ldw	r3,16(r16)
 800bcd8:	18001526 	beq	r3,zero,800bd30 <__swsetup_r+0x9c>
 800bcdc:	1100004c 	andi	r4,r2,1
 800bce0:	20001c1e 	bne	r4,zero,800bd54 <__swsetup_r+0xc0>
 800bce4:	1080008c 	andi	r2,r2,2
 800bce8:	1000261e 	bne	r2,zero,800bd84 <__swsetup_r+0xf0>
 800bcec:	80800517 	ldw	r2,20(r16)
 800bcf0:	80800215 	stw	r2,8(r16)
 800bcf4:	18001c26 	beq	r3,zero,800bd68 <__swsetup_r+0xd4>
 800bcf8:	0005883a 	mov	r2,zero
 800bcfc:	dfc00217 	ldw	ra,8(sp)
 800bd00:	dc400117 	ldw	r17,4(sp)
 800bd04:	dc000017 	ldw	r16,0(sp)
 800bd08:	dec00304 	addi	sp,sp,12
 800bd0c:	f800283a 	ret
 800bd10:	3080040c 	andi	r2,r6,16
 800bd14:	10001726 	beq	r2,zero,800bd74 <__swsetup_r+0xe0>
 800bd18:	3080010c 	andi	r2,r6,4
 800bd1c:	10001b1e 	bne	r2,zero,800bd8c <__swsetup_r+0xf8>
 800bd20:	80c00417 	ldw	r3,16(r16)
 800bd24:	30800214 	ori	r2,r6,8
 800bd28:	8080030d 	sth	r2,12(r16)
 800bd2c:	183feb1e 	bne	r3,zero,800bcdc <__alt_data_end+0xfc00bcdc>
 800bd30:	1140a00c 	andi	r5,r2,640
 800bd34:	01008004 	movi	r4,512
 800bd38:	293fe826 	beq	r5,r4,800bcdc <__alt_data_end+0xfc00bcdc>
 800bd3c:	8809883a 	mov	r4,r17
 800bd40:	800b883a 	mov	r5,r16
 800bd44:	800e8800 	call	800e880 <__smakebuf_r>
 800bd48:	8080030b 	ldhu	r2,12(r16)
 800bd4c:	80c00417 	ldw	r3,16(r16)
 800bd50:	003fe206 	br	800bcdc <__alt_data_end+0xfc00bcdc>
 800bd54:	80800517 	ldw	r2,20(r16)
 800bd58:	80000215 	stw	zero,8(r16)
 800bd5c:	0085c83a 	sub	r2,zero,r2
 800bd60:	80800615 	stw	r2,24(r16)
 800bd64:	183fe41e 	bne	r3,zero,800bcf8 <__alt_data_end+0xfc00bcf8>
 800bd68:	8080030b 	ldhu	r2,12(r16)
 800bd6c:	1080200c 	andi	r2,r2,128
 800bd70:	103fe226 	beq	r2,zero,800bcfc <__alt_data_end+0xfc00bcfc>
 800bd74:	00bfffc4 	movi	r2,-1
 800bd78:	003fe006 	br	800bcfc <__alt_data_end+0xfc00bcfc>
 800bd7c:	800dcd00 	call	800dcd0 <__sinit>
 800bd80:	003fd006 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800bd84:	0005883a 	mov	r2,zero
 800bd88:	003fd906 	br	800bcf0 <__alt_data_end+0xfc00bcf0>
 800bd8c:	81400c17 	ldw	r5,48(r16)
 800bd90:	28000626 	beq	r5,zero,800bdac <__swsetup_r+0x118>
 800bd94:	80801004 	addi	r2,r16,64
 800bd98:	28800326 	beq	r5,r2,800bda8 <__swsetup_r+0x114>
 800bd9c:	8809883a 	mov	r4,r17
 800bda0:	800de440 	call	800de44 <_free_r>
 800bda4:	8180030b 	ldhu	r6,12(r16)
 800bda8:	80000c15 	stw	zero,48(r16)
 800bdac:	80c00417 	ldw	r3,16(r16)
 800bdb0:	00bff6c4 	movi	r2,-37
 800bdb4:	118c703a 	and	r6,r2,r6
 800bdb8:	80000115 	stw	zero,4(r16)
 800bdbc:	80c00015 	stw	r3,0(r16)
 800bdc0:	003fd806 	br	800bd24 <__alt_data_end+0xfc00bd24>

0800bdc4 <quorem>:
 800bdc4:	defff204 	addi	sp,sp,-56
 800bdc8:	ddc00b15 	stw	r23,44(sp)
 800bdcc:	20800417 	ldw	r2,16(r4)
 800bdd0:	2dc00417 	ldw	r23,16(r5)
 800bdd4:	dfc00d15 	stw	ra,52(sp)
 800bdd8:	df000c15 	stw	fp,48(sp)
 800bddc:	dd800a15 	stw	r22,40(sp)
 800bde0:	dd400915 	stw	r21,36(sp)
 800bde4:	dd000815 	stw	r20,32(sp)
 800bde8:	dcc00715 	stw	r19,28(sp)
 800bdec:	dc800615 	stw	r18,24(sp)
 800bdf0:	dc400515 	stw	r17,20(sp)
 800bdf4:	dc000415 	stw	r16,16(sp)
 800bdf8:	15c07a16 	blt	r2,r23,800bfe4 <quorem+0x220>
 800bdfc:	bdffffc4 	addi	r23,r23,-1
 800be00:	bde9883a 	add	r20,r23,r23
 800be04:	28c00504 	addi	r3,r5,20
 800be08:	a529883a 	add	r20,r20,r20
 800be0c:	1d39883a 	add	fp,r3,r20
 800be10:	24c00504 	addi	r19,r4,20
 800be14:	d9400215 	stw	r5,8(sp)
 800be18:	9d29883a 	add	r20,r19,r20
 800be1c:	e1400017 	ldw	r5,0(fp)
 800be20:	d9000015 	stw	r4,0(sp)
 800be24:	a1000017 	ldw	r4,0(r20)
 800be28:	29400044 	addi	r5,r5,1
 800be2c:	d8c00115 	stw	r3,4(sp)
 800be30:	dd000315 	stw	r20,12(sp)
 800be34:	8004c000 	call	8004c00 <__udivsi3>
 800be38:	1025883a 	mov	r18,r2
 800be3c:	10003026 	beq	r2,zero,800bf00 <quorem+0x13c>
 800be40:	dc400117 	ldw	r17,4(sp)
 800be44:	9829883a 	mov	r20,r19
 800be48:	002d883a 	mov	r22,zero
 800be4c:	0021883a 	mov	r16,zero
 800be50:	8d400017 	ldw	r21,0(r17)
 800be54:	900b883a 	mov	r5,r18
 800be58:	8c400104 	addi	r17,r17,4
 800be5c:	a93fffcc 	andi	r4,r21,65535
 800be60:	8004c100 	call	8004c10 <__mulsi3>
 800be64:	a808d43a 	srli	r4,r21,16
 800be68:	900b883a 	mov	r5,r18
 800be6c:	b0ad883a 	add	r22,r22,r2
 800be70:	8004c100 	call	8004c10 <__mulsi3>
 800be74:	a1000017 	ldw	r4,0(r20)
 800be78:	b00cd43a 	srli	r6,r22,16
 800be7c:	b0ffffcc 	andi	r3,r22,65535
 800be80:	217fffcc 	andi	r5,r4,65535
 800be84:	2c21883a 	add	r16,r5,r16
 800be88:	80c7c83a 	sub	r3,r16,r3
 800be8c:	2008d43a 	srli	r4,r4,16
 800be90:	3085883a 	add	r2,r6,r2
 800be94:	1821d43a 	srai	r16,r3,16
 800be98:	117fffcc 	andi	r5,r2,65535
 800be9c:	2149c83a 	sub	r4,r4,r5
 800bea0:	2421883a 	add	r16,r4,r16
 800bea4:	8008943a 	slli	r4,r16,16
 800bea8:	18ffffcc 	andi	r3,r3,65535
 800beac:	102cd43a 	srli	r22,r2,16
 800beb0:	20c8b03a 	or	r4,r4,r3
 800beb4:	a1000015 	stw	r4,0(r20)
 800beb8:	8021d43a 	srai	r16,r16,16
 800bebc:	a5000104 	addi	r20,r20,4
 800bec0:	e47fe32e 	bgeu	fp,r17,800be50 <__alt_data_end+0xfc00be50>
 800bec4:	d8c00317 	ldw	r3,12(sp)
 800bec8:	18800017 	ldw	r2,0(r3)
 800becc:	10000c1e 	bne	r2,zero,800bf00 <quorem+0x13c>
 800bed0:	18bfff04 	addi	r2,r3,-4
 800bed4:	9880082e 	bgeu	r19,r2,800bef8 <quorem+0x134>
 800bed8:	18ffff17 	ldw	r3,-4(r3)
 800bedc:	18000326 	beq	r3,zero,800beec <quorem+0x128>
 800bee0:	00000506 	br	800bef8 <quorem+0x134>
 800bee4:	10c00017 	ldw	r3,0(r2)
 800bee8:	1800031e 	bne	r3,zero,800bef8 <quorem+0x134>
 800beec:	10bfff04 	addi	r2,r2,-4
 800bef0:	bdffffc4 	addi	r23,r23,-1
 800bef4:	98bffb36 	bltu	r19,r2,800bee4 <__alt_data_end+0xfc00bee4>
 800bef8:	d8c00017 	ldw	r3,0(sp)
 800befc:	1dc00415 	stw	r23,16(r3)
 800bf00:	d9000017 	ldw	r4,0(sp)
 800bf04:	d9400217 	ldw	r5,8(sp)
 800bf08:	800f71c0 	call	800f71c <__mcmp>
 800bf0c:	10002816 	blt	r2,zero,800bfb0 <quorem+0x1ec>
 800bf10:	dc400117 	ldw	r17,4(sp)
 800bf14:	94800044 	addi	r18,r18,1
 800bf18:	980d883a 	mov	r6,r19
 800bf1c:	0007883a 	mov	r3,zero
 800bf20:	31000017 	ldw	r4,0(r6)
 800bf24:	89400017 	ldw	r5,0(r17)
 800bf28:	31800104 	addi	r6,r6,4
 800bf2c:	20bfffcc 	andi	r2,r4,65535
 800bf30:	10c7883a 	add	r3,r2,r3
 800bf34:	28bfffcc 	andi	r2,r5,65535
 800bf38:	1885c83a 	sub	r2,r3,r2
 800bf3c:	280ad43a 	srli	r5,r5,16
 800bf40:	2008d43a 	srli	r4,r4,16
 800bf44:	1007d43a 	srai	r3,r2,16
 800bf48:	10bfffcc 	andi	r2,r2,65535
 800bf4c:	2149c83a 	sub	r4,r4,r5
 800bf50:	20c9883a 	add	r4,r4,r3
 800bf54:	200a943a 	slli	r5,r4,16
 800bf58:	8c400104 	addi	r17,r17,4
 800bf5c:	2007d43a 	srai	r3,r4,16
 800bf60:	2884b03a 	or	r2,r5,r2
 800bf64:	30bfff15 	stw	r2,-4(r6)
 800bf68:	e47fed2e 	bgeu	fp,r17,800bf20 <__alt_data_end+0xfc00bf20>
 800bf6c:	bdc5883a 	add	r2,r23,r23
 800bf70:	1085883a 	add	r2,r2,r2
 800bf74:	9887883a 	add	r3,r19,r2
 800bf78:	18800017 	ldw	r2,0(r3)
 800bf7c:	10000c1e 	bne	r2,zero,800bfb0 <quorem+0x1ec>
 800bf80:	18bfff04 	addi	r2,r3,-4
 800bf84:	9880082e 	bgeu	r19,r2,800bfa8 <quorem+0x1e4>
 800bf88:	18ffff17 	ldw	r3,-4(r3)
 800bf8c:	18000326 	beq	r3,zero,800bf9c <quorem+0x1d8>
 800bf90:	00000506 	br	800bfa8 <quorem+0x1e4>
 800bf94:	10c00017 	ldw	r3,0(r2)
 800bf98:	1800031e 	bne	r3,zero,800bfa8 <quorem+0x1e4>
 800bf9c:	10bfff04 	addi	r2,r2,-4
 800bfa0:	bdffffc4 	addi	r23,r23,-1
 800bfa4:	98bffb36 	bltu	r19,r2,800bf94 <__alt_data_end+0xfc00bf94>
 800bfa8:	d8c00017 	ldw	r3,0(sp)
 800bfac:	1dc00415 	stw	r23,16(r3)
 800bfb0:	9005883a 	mov	r2,r18
 800bfb4:	dfc00d17 	ldw	ra,52(sp)
 800bfb8:	df000c17 	ldw	fp,48(sp)
 800bfbc:	ddc00b17 	ldw	r23,44(sp)
 800bfc0:	dd800a17 	ldw	r22,40(sp)
 800bfc4:	dd400917 	ldw	r21,36(sp)
 800bfc8:	dd000817 	ldw	r20,32(sp)
 800bfcc:	dcc00717 	ldw	r19,28(sp)
 800bfd0:	dc800617 	ldw	r18,24(sp)
 800bfd4:	dc400517 	ldw	r17,20(sp)
 800bfd8:	dc000417 	ldw	r16,16(sp)
 800bfdc:	dec00e04 	addi	sp,sp,56
 800bfe0:	f800283a 	ret
 800bfe4:	0005883a 	mov	r2,zero
 800bfe8:	003ff206 	br	800bfb4 <__alt_data_end+0xfc00bfb4>

0800bfec <_dtoa_r>:
 800bfec:	20801017 	ldw	r2,64(r4)
 800bff0:	deffde04 	addi	sp,sp,-136
 800bff4:	dd401d15 	stw	r21,116(sp)
 800bff8:	dcc01b15 	stw	r19,108(sp)
 800bffc:	dc801a15 	stw	r18,104(sp)
 800c000:	dc401915 	stw	r17,100(sp)
 800c004:	dc001815 	stw	r16,96(sp)
 800c008:	dfc02115 	stw	ra,132(sp)
 800c00c:	df002015 	stw	fp,128(sp)
 800c010:	ddc01f15 	stw	r23,124(sp)
 800c014:	dd801e15 	stw	r22,120(sp)
 800c018:	dd001c15 	stw	r20,112(sp)
 800c01c:	d9c00315 	stw	r7,12(sp)
 800c020:	2021883a 	mov	r16,r4
 800c024:	302b883a 	mov	r21,r6
 800c028:	2825883a 	mov	r18,r5
 800c02c:	dc402417 	ldw	r17,144(sp)
 800c030:	3027883a 	mov	r19,r6
 800c034:	10000826 	beq	r2,zero,800c058 <_dtoa_r+0x6c>
 800c038:	21801117 	ldw	r6,68(r4)
 800c03c:	00c00044 	movi	r3,1
 800c040:	100b883a 	mov	r5,r2
 800c044:	1986983a 	sll	r3,r3,r6
 800c048:	11800115 	stw	r6,4(r2)
 800c04c:	10c00215 	stw	r3,8(r2)
 800c050:	800ee480 	call	800ee48 <_Bfree>
 800c054:	80001015 	stw	zero,64(r16)
 800c058:	a8002d16 	blt	r21,zero,800c110 <_dtoa_r+0x124>
 800c05c:	88000015 	stw	zero,0(r17)
 800c060:	a8dffc2c 	andhi	r3,r21,32752
 800c064:	009ffc34 	movhi	r2,32752
 800c068:	18801b26 	beq	r3,r2,800c0d8 <_dtoa_r+0xec>
 800c06c:	9009883a 	mov	r4,r18
 800c070:	980b883a 	mov	r5,r19
 800c074:	000d883a 	mov	r6,zero
 800c078:	000f883a 	mov	r7,zero
 800c07c:	8014e200 	call	8014e20 <__eqdf2>
 800c080:	10002a1e 	bne	r2,zero,800c12c <_dtoa_r+0x140>
 800c084:	d8c02317 	ldw	r3,140(sp)
 800c088:	d9002517 	ldw	r4,148(sp)
 800c08c:	00800044 	movi	r2,1
 800c090:	18800015 	stw	r2,0(r3)
 800c094:	2001a226 	beq	r4,zero,800c720 <_dtoa_r+0x734>
 800c098:	008200b4 	movhi	r2,2050
 800c09c:	108da244 	addi	r2,r2,13961
 800c0a0:	20800015 	stw	r2,0(r4)
 800c0a4:	10bfffc4 	addi	r2,r2,-1
 800c0a8:	dfc02117 	ldw	ra,132(sp)
 800c0ac:	df002017 	ldw	fp,128(sp)
 800c0b0:	ddc01f17 	ldw	r23,124(sp)
 800c0b4:	dd801e17 	ldw	r22,120(sp)
 800c0b8:	dd401d17 	ldw	r21,116(sp)
 800c0bc:	dd001c17 	ldw	r20,112(sp)
 800c0c0:	dcc01b17 	ldw	r19,108(sp)
 800c0c4:	dc801a17 	ldw	r18,104(sp)
 800c0c8:	dc401917 	ldw	r17,100(sp)
 800c0cc:	dc001817 	ldw	r16,96(sp)
 800c0d0:	dec02204 	addi	sp,sp,136
 800c0d4:	f800283a 	ret
 800c0d8:	d8c02317 	ldw	r3,140(sp)
 800c0dc:	0089c3c4 	movi	r2,9999
 800c0e0:	18800015 	stw	r2,0(r3)
 800c0e4:	90017c26 	beq	r18,zero,800c6d8 <_dtoa_r+0x6ec>
 800c0e8:	008200b4 	movhi	r2,2050
 800c0ec:	108db604 	addi	r2,r2,14040
 800c0f0:	d9002517 	ldw	r4,148(sp)
 800c0f4:	203fec26 	beq	r4,zero,800c0a8 <__alt_data_end+0xfc00c0a8>
 800c0f8:	10c000c7 	ldb	r3,3(r2)
 800c0fc:	18017d1e 	bne	r3,zero,800c6f4 <_dtoa_r+0x708>
 800c100:	10c000c4 	addi	r3,r2,3
 800c104:	d9802517 	ldw	r6,148(sp)
 800c108:	30c00015 	stw	r3,0(r6)
 800c10c:	003fe606 	br	800c0a8 <__alt_data_end+0xfc00c0a8>
 800c110:	04e00034 	movhi	r19,32768
 800c114:	9cffffc4 	addi	r19,r19,-1
 800c118:	00800044 	movi	r2,1
 800c11c:	ace6703a 	and	r19,r21,r19
 800c120:	88800015 	stw	r2,0(r17)
 800c124:	982b883a 	mov	r21,r19
 800c128:	003fcd06 	br	800c060 <__alt_data_end+0xfc00c060>
 800c12c:	d8800204 	addi	r2,sp,8
 800c130:	a822d53a 	srli	r17,r21,20
 800c134:	d8800015 	stw	r2,0(sp)
 800c138:	8009883a 	mov	r4,r16
 800c13c:	900b883a 	mov	r5,r18
 800c140:	980d883a 	mov	r6,r19
 800c144:	d9c00104 	addi	r7,sp,4
 800c148:	800fa900 	call	800fa90 <__d2b>
 800c14c:	1039883a 	mov	fp,r2
 800c150:	88016a1e 	bne	r17,zero,800c6fc <_dtoa_r+0x710>
 800c154:	dd000217 	ldw	r20,8(sp)
 800c158:	dc400117 	ldw	r17,4(sp)
 800c15c:	00befbc4 	movi	r2,-1041
 800c160:	a463883a 	add	r17,r20,r17
 800c164:	8882ea16 	blt	r17,r2,800cd10 <_dtoa_r+0xd24>
 800c168:	00bf0384 	movi	r2,-1010
 800c16c:	1445c83a 	sub	r2,r2,r17
 800c170:	89010484 	addi	r4,r17,1042
 800c174:	a8aa983a 	sll	r21,r21,r2
 800c178:	9108d83a 	srl	r4,r18,r4
 800c17c:	a908b03a 	or	r4,r21,r4
 800c180:	80065b80 	call	80065b8 <__floatunsidf>
 800c184:	017f8434 	movhi	r5,65040
 800c188:	01800044 	movi	r6,1
 800c18c:	1009883a 	mov	r4,r2
 800c190:	194b883a 	add	r5,r3,r5
 800c194:	8c7fffc4 	addi	r17,r17,-1
 800c198:	d9800f15 	stw	r6,60(sp)
 800c19c:	000d883a 	mov	r6,zero
 800c1a0:	01cffe34 	movhi	r7,16376
 800c1a4:	80150640 	call	8015064 <__subdf3>
 800c1a8:	0198dbf4 	movhi	r6,25455
 800c1ac:	01cff4f4 	movhi	r7,16339
 800c1b0:	1009883a 	mov	r4,r2
 800c1b4:	180b883a 	mov	r5,r3
 800c1b8:	3190d844 	addi	r6,r6,17249
 800c1bc:	39e1e9c4 	addi	r7,r7,-30809
 800c1c0:	8005bf40 	call	8005bf4 <__muldf3>
 800c1c4:	01a2d874 	movhi	r6,35681
 800c1c8:	01cff1f4 	movhi	r7,16327
 800c1cc:	180b883a 	mov	r5,r3
 800c1d0:	31b22cc4 	addi	r6,r6,-14157
 800c1d4:	39e28a04 	addi	r7,r7,-30168
 800c1d8:	1009883a 	mov	r4,r2
 800c1dc:	80145840 	call	8014584 <__adddf3>
 800c1e0:	8809883a 	mov	r4,r17
 800c1e4:	102d883a 	mov	r22,r2
 800c1e8:	182b883a 	mov	r21,r3
 800c1ec:	80064e80 	call	80064e8 <__floatsidf>
 800c1f0:	019427f4 	movhi	r6,20639
 800c1f4:	01cff4f4 	movhi	r7,16339
 800c1f8:	1009883a 	mov	r4,r2
 800c1fc:	180b883a 	mov	r5,r3
 800c200:	319e7ec4 	addi	r6,r6,31227
 800c204:	39d104c4 	addi	r7,r7,17427
 800c208:	8005bf40 	call	8005bf4 <__muldf3>
 800c20c:	b009883a 	mov	r4,r22
 800c210:	a80b883a 	mov	r5,r21
 800c214:	100d883a 	mov	r6,r2
 800c218:	180f883a 	mov	r7,r3
 800c21c:	80145840 	call	8014584 <__adddf3>
 800c220:	1009883a 	mov	r4,r2
 800c224:	180b883a 	mov	r5,r3
 800c228:	102d883a 	mov	r22,r2
 800c22c:	182b883a 	mov	r21,r3
 800c230:	80064600 	call	8006460 <__fixdfsi>
 800c234:	b009883a 	mov	r4,r22
 800c238:	a80b883a 	mov	r5,r21
 800c23c:	000d883a 	mov	r6,zero
 800c240:	000f883a 	mov	r7,zero
 800c244:	d8800515 	stw	r2,20(sp)
 800c248:	8014f840 	call	8014f84 <__ledf2>
 800c24c:	10023116 	blt	r2,zero,800cb14 <_dtoa_r+0xb28>
 800c250:	d8c00517 	ldw	r3,20(sp)
 800c254:	00800584 	movi	r2,22
 800c258:	10c21f36 	bltu	r2,r3,800cad8 <_dtoa_r+0xaec>
 800c25c:	180490fa 	slli	r2,r3,3
 800c260:	00c200b4 	movhi	r3,2050
 800c264:	18cdd204 	addi	r3,r3,14152
 800c268:	1885883a 	add	r2,r3,r2
 800c26c:	11000017 	ldw	r4,0(r2)
 800c270:	11400117 	ldw	r5,4(r2)
 800c274:	900d883a 	mov	r6,r18
 800c278:	980f883a 	mov	r7,r19
 800c27c:	8014ea40 	call	8014ea4 <__gedf2>
 800c280:	0082a70e 	bge	zero,r2,800cd20 <_dtoa_r+0xd34>
 800c284:	d9000517 	ldw	r4,20(sp)
 800c288:	d8000c15 	stw	zero,48(sp)
 800c28c:	213fffc4 	addi	r4,r4,-1
 800c290:	d9000515 	stw	r4,20(sp)
 800c294:	a463c83a 	sub	r17,r20,r17
 800c298:	8dbfffc4 	addi	r22,r17,-1
 800c29c:	b0021916 	blt	r22,zero,800cb04 <_dtoa_r+0xb18>
 800c2a0:	d8000815 	stw	zero,32(sp)
 800c2a4:	d8800517 	ldw	r2,20(sp)
 800c2a8:	10020e16 	blt	r2,zero,800cae4 <_dtoa_r+0xaf8>
 800c2ac:	b0ad883a 	add	r22,r22,r2
 800c2b0:	d8800a15 	stw	r2,40(sp)
 800c2b4:	d8000915 	stw	zero,36(sp)
 800c2b8:	d8c00317 	ldw	r3,12(sp)
 800c2bc:	00800244 	movi	r2,9
 800c2c0:	10c11a36 	bltu	r2,r3,800c72c <_dtoa_r+0x740>
 800c2c4:	00800144 	movi	r2,5
 800c2c8:	10c4fc0e 	bge	r2,r3,800d6bc <_dtoa_r+0x16d0>
 800c2cc:	18ffff04 	addi	r3,r3,-4
 800c2d0:	d8c00315 	stw	r3,12(sp)
 800c2d4:	0029883a 	mov	r20,zero
 800c2d8:	d9800317 	ldw	r6,12(sp)
 800c2dc:	008000c4 	movi	r2,3
 800c2e0:	3083bd26 	beq	r6,r2,800d1d8 <_dtoa_r+0x11ec>
 800c2e4:	1183670e 	bge	r2,r6,800d084 <_dtoa_r+0x1098>
 800c2e8:	d8c00317 	ldw	r3,12(sp)
 800c2ec:	00800104 	movi	r2,4
 800c2f0:	1882e726 	beq	r3,r2,800ce90 <_dtoa_r+0xea4>
 800c2f4:	00800144 	movi	r2,5
 800c2f8:	1884f21e 	bne	r3,r2,800d6c4 <_dtoa_r+0x16d8>
 800c2fc:	00800044 	movi	r2,1
 800c300:	d8800b15 	stw	r2,44(sp)
 800c304:	d8c02217 	ldw	r3,136(sp)
 800c308:	d9000517 	ldw	r4,20(sp)
 800c30c:	1907883a 	add	r3,r3,r4
 800c310:	19800044 	addi	r6,r3,1
 800c314:	d8c00d15 	stw	r3,52(sp)
 800c318:	d9800615 	stw	r6,24(sp)
 800c31c:	0183c30e 	bge	zero,r6,800d22c <_dtoa_r+0x1240>
 800c320:	d9800617 	ldw	r6,24(sp)
 800c324:	3023883a 	mov	r17,r6
 800c328:	80001115 	stw	zero,68(r16)
 800c32c:	008005c4 	movi	r2,23
 800c330:	1184f62e 	bgeu	r2,r6,800d70c <_dtoa_r+0x1720>
 800c334:	00c00044 	movi	r3,1
 800c338:	00800104 	movi	r2,4
 800c33c:	1085883a 	add	r2,r2,r2
 800c340:	11000504 	addi	r4,r2,20
 800c344:	180b883a 	mov	r5,r3
 800c348:	18c00044 	addi	r3,r3,1
 800c34c:	313ffb2e 	bgeu	r6,r4,800c33c <__alt_data_end+0xfc00c33c>
 800c350:	81401115 	stw	r5,68(r16)
 800c354:	8009883a 	mov	r4,r16
 800c358:	800eda00 	call	800eda0 <_Balloc>
 800c35c:	d8800715 	stw	r2,28(sp)
 800c360:	80801015 	stw	r2,64(r16)
 800c364:	00800384 	movi	r2,14
 800c368:	1440fd36 	bltu	r2,r17,800c760 <_dtoa_r+0x774>
 800c36c:	a000fc26 	beq	r20,zero,800c760 <_dtoa_r+0x774>
 800c370:	d8800517 	ldw	r2,20(sp)
 800c374:	0083b90e 	bge	zero,r2,800d25c <_dtoa_r+0x1270>
 800c378:	d8c00517 	ldw	r3,20(sp)
 800c37c:	108003cc 	andi	r2,r2,15
 800c380:	100490fa 	slli	r2,r2,3
 800c384:	182fd13a 	srai	r23,r3,4
 800c388:	00c200b4 	movhi	r3,2050
 800c38c:	18cdd204 	addi	r3,r3,14152
 800c390:	1885883a 	add	r2,r3,r2
 800c394:	b8c0040c 	andi	r3,r23,16
 800c398:	12c00017 	ldw	r11,0(r2)
 800c39c:	12800117 	ldw	r10,4(r2)
 800c3a0:	18039726 	beq	r3,zero,800d200 <_dtoa_r+0x1214>
 800c3a4:	008200b4 	movhi	r2,2050
 800c3a8:	108dc804 	addi	r2,r2,14112
 800c3ac:	11800817 	ldw	r6,32(r2)
 800c3b0:	11c00917 	ldw	r7,36(r2)
 800c3b4:	9009883a 	mov	r4,r18
 800c3b8:	980b883a 	mov	r5,r19
 800c3bc:	da801615 	stw	r10,88(sp)
 800c3c0:	dac01515 	stw	r11,84(sp)
 800c3c4:	80052740 	call	8005274 <__divdf3>
 800c3c8:	da801617 	ldw	r10,88(sp)
 800c3cc:	dac01517 	ldw	r11,84(sp)
 800c3d0:	bdc003cc 	andi	r23,r23,15
 800c3d4:	044000c4 	movi	r17,3
 800c3d8:	d8800e15 	stw	r2,56(sp)
 800c3dc:	182b883a 	mov	r21,r3
 800c3e0:	b8001126 	beq	r23,zero,800c428 <_dtoa_r+0x43c>
 800c3e4:	050200b4 	movhi	r20,2050
 800c3e8:	a50dc804 	addi	r20,r20,14112
 800c3ec:	5805883a 	mov	r2,r11
 800c3f0:	5007883a 	mov	r3,r10
 800c3f4:	b980004c 	andi	r6,r23,1
 800c3f8:	1009883a 	mov	r4,r2
 800c3fc:	b82fd07a 	srai	r23,r23,1
 800c400:	180b883a 	mov	r5,r3
 800c404:	30000426 	beq	r6,zero,800c418 <_dtoa_r+0x42c>
 800c408:	a1800017 	ldw	r6,0(r20)
 800c40c:	a1c00117 	ldw	r7,4(r20)
 800c410:	8c400044 	addi	r17,r17,1
 800c414:	8005bf40 	call	8005bf4 <__muldf3>
 800c418:	a5000204 	addi	r20,r20,8
 800c41c:	b83ff51e 	bne	r23,zero,800c3f4 <__alt_data_end+0xfc00c3f4>
 800c420:	1017883a 	mov	r11,r2
 800c424:	1815883a 	mov	r10,r3
 800c428:	d9000e17 	ldw	r4,56(sp)
 800c42c:	a80b883a 	mov	r5,r21
 800c430:	580d883a 	mov	r6,r11
 800c434:	500f883a 	mov	r7,r10
 800c438:	80052740 	call	8005274 <__divdf3>
 800c43c:	1029883a 	mov	r20,r2
 800c440:	182b883a 	mov	r21,r3
 800c444:	d9800c17 	ldw	r6,48(sp)
 800c448:	30000626 	beq	r6,zero,800c464 <_dtoa_r+0x478>
 800c44c:	a009883a 	mov	r4,r20
 800c450:	a80b883a 	mov	r5,r21
 800c454:	000d883a 	mov	r6,zero
 800c458:	01cffc34 	movhi	r7,16368
 800c45c:	8014f840 	call	8014f84 <__ledf2>
 800c460:	10043216 	blt	r2,zero,800d52c <_dtoa_r+0x1540>
 800c464:	8809883a 	mov	r4,r17
 800c468:	80064e80 	call	80064e8 <__floatsidf>
 800c46c:	1009883a 	mov	r4,r2
 800c470:	180b883a 	mov	r5,r3
 800c474:	a00d883a 	mov	r6,r20
 800c478:	a80f883a 	mov	r7,r21
 800c47c:	8005bf40 	call	8005bf4 <__muldf3>
 800c480:	000d883a 	mov	r6,zero
 800c484:	1009883a 	mov	r4,r2
 800c488:	180b883a 	mov	r5,r3
 800c48c:	01d00734 	movhi	r7,16412
 800c490:	80145840 	call	8014584 <__adddf3>
 800c494:	1023883a 	mov	r17,r2
 800c498:	d9800617 	ldw	r6,24(sp)
 800c49c:	00bf3034 	movhi	r2,64704
 800c4a0:	1885883a 	add	r2,r3,r2
 800c4a4:	d8800e15 	stw	r2,56(sp)
 800c4a8:	30032e26 	beq	r6,zero,800d164 <_dtoa_r+0x1178>
 800c4ac:	d8c00517 	ldw	r3,20(sp)
 800c4b0:	da800617 	ldw	r10,24(sp)
 800c4b4:	d8c01215 	stw	r3,72(sp)
 800c4b8:	d9000b17 	ldw	r4,44(sp)
 800c4bc:	2003b026 	beq	r4,zero,800d380 <_dtoa_r+0x1394>
 800c4c0:	50bfffc4 	addi	r2,r10,-1
 800c4c4:	100490fa 	slli	r2,r2,3
 800c4c8:	00c200b4 	movhi	r3,2050
 800c4cc:	18cdd204 	addi	r3,r3,14152
 800c4d0:	1885883a 	add	r2,r3,r2
 800c4d4:	11800017 	ldw	r6,0(r2)
 800c4d8:	11c00117 	ldw	r7,4(r2)
 800c4dc:	d8800717 	ldw	r2,28(sp)
 800c4e0:	0009883a 	mov	r4,zero
 800c4e4:	014ff834 	movhi	r5,16352
 800c4e8:	da801615 	stw	r10,88(sp)
 800c4ec:	15c00044 	addi	r23,r2,1
 800c4f0:	80052740 	call	8005274 <__divdf3>
 800c4f4:	d9c00e17 	ldw	r7,56(sp)
 800c4f8:	880d883a 	mov	r6,r17
 800c4fc:	1009883a 	mov	r4,r2
 800c500:	180b883a 	mov	r5,r3
 800c504:	80150640 	call	8015064 <__subdf3>
 800c508:	a80b883a 	mov	r5,r21
 800c50c:	a009883a 	mov	r4,r20
 800c510:	d8c01015 	stw	r3,64(sp)
 800c514:	d8800e15 	stw	r2,56(sp)
 800c518:	80064600 	call	8006460 <__fixdfsi>
 800c51c:	1009883a 	mov	r4,r2
 800c520:	d8801715 	stw	r2,92(sp)
 800c524:	80064e80 	call	80064e8 <__floatsidf>
 800c528:	a009883a 	mov	r4,r20
 800c52c:	a80b883a 	mov	r5,r21
 800c530:	100d883a 	mov	r6,r2
 800c534:	180f883a 	mov	r7,r3
 800c538:	80150640 	call	8015064 <__subdf3>
 800c53c:	da001717 	ldw	r8,92(sp)
 800c540:	1829883a 	mov	r20,r3
 800c544:	d8c00717 	ldw	r3,28(sp)
 800c548:	d9000e17 	ldw	r4,56(sp)
 800c54c:	d9401017 	ldw	r5,64(sp)
 800c550:	42000c04 	addi	r8,r8,48
 800c554:	1023883a 	mov	r17,r2
 800c558:	1a000005 	stb	r8,0(r3)
 800c55c:	880d883a 	mov	r6,r17
 800c560:	a00f883a 	mov	r7,r20
 800c564:	402b883a 	mov	r21,r8
 800c568:	8014ea40 	call	8014ea4 <__gedf2>
 800c56c:	00844516 	blt	zero,r2,800d684 <_dtoa_r+0x1698>
 800c570:	0009883a 	mov	r4,zero
 800c574:	014ffc34 	movhi	r5,16368
 800c578:	880d883a 	mov	r6,r17
 800c57c:	a00f883a 	mov	r7,r20
 800c580:	80150640 	call	8015064 <__subdf3>
 800c584:	d9000e17 	ldw	r4,56(sp)
 800c588:	d9401017 	ldw	r5,64(sp)
 800c58c:	100d883a 	mov	r6,r2
 800c590:	180f883a 	mov	r7,r3
 800c594:	8014ea40 	call	8014ea4 <__gedf2>
 800c598:	da801617 	ldw	r10,88(sp)
 800c59c:	00843616 	blt	zero,r2,800d678 <_dtoa_r+0x168c>
 800c5a0:	00800044 	movi	r2,1
 800c5a4:	12806e0e 	bge	r2,r10,800c760 <_dtoa_r+0x774>
 800c5a8:	d9000717 	ldw	r4,28(sp)
 800c5ac:	dd801315 	stw	r22,76(sp)
 800c5b0:	dc001115 	stw	r16,68(sp)
 800c5b4:	2295883a 	add	r10,r4,r10
 800c5b8:	dcc01415 	stw	r19,80(sp)
 800c5bc:	502d883a 	mov	r22,r10
 800c5c0:	dcc01017 	ldw	r19,64(sp)
 800c5c4:	b821883a 	mov	r16,r23
 800c5c8:	dc801015 	stw	r18,64(sp)
 800c5cc:	dc800e17 	ldw	r18,56(sp)
 800c5d0:	00000906 	br	800c5f8 <_dtoa_r+0x60c>
 800c5d4:	80150640 	call	8015064 <__subdf3>
 800c5d8:	1009883a 	mov	r4,r2
 800c5dc:	180b883a 	mov	r5,r3
 800c5e0:	900d883a 	mov	r6,r18
 800c5e4:	980f883a 	mov	r7,r19
 800c5e8:	8014f840 	call	8014f84 <__ledf2>
 800c5ec:	10040e16 	blt	r2,zero,800d628 <_dtoa_r+0x163c>
 800c5f0:	b821883a 	mov	r16,r23
 800c5f4:	bd841026 	beq	r23,r22,800d638 <_dtoa_r+0x164c>
 800c5f8:	9009883a 	mov	r4,r18
 800c5fc:	980b883a 	mov	r5,r19
 800c600:	000d883a 	mov	r6,zero
 800c604:	01d00934 	movhi	r7,16420
 800c608:	8005bf40 	call	8005bf4 <__muldf3>
 800c60c:	000d883a 	mov	r6,zero
 800c610:	01d00934 	movhi	r7,16420
 800c614:	8809883a 	mov	r4,r17
 800c618:	a00b883a 	mov	r5,r20
 800c61c:	1025883a 	mov	r18,r2
 800c620:	1827883a 	mov	r19,r3
 800c624:	8005bf40 	call	8005bf4 <__muldf3>
 800c628:	180b883a 	mov	r5,r3
 800c62c:	1009883a 	mov	r4,r2
 800c630:	1823883a 	mov	r17,r3
 800c634:	1029883a 	mov	r20,r2
 800c638:	80064600 	call	8006460 <__fixdfsi>
 800c63c:	1009883a 	mov	r4,r2
 800c640:	102b883a 	mov	r21,r2
 800c644:	80064e80 	call	80064e8 <__floatsidf>
 800c648:	a009883a 	mov	r4,r20
 800c64c:	880b883a 	mov	r5,r17
 800c650:	100d883a 	mov	r6,r2
 800c654:	180f883a 	mov	r7,r3
 800c658:	80150640 	call	8015064 <__subdf3>
 800c65c:	ad400c04 	addi	r21,r21,48
 800c660:	1009883a 	mov	r4,r2
 800c664:	180b883a 	mov	r5,r3
 800c668:	900d883a 	mov	r6,r18
 800c66c:	980f883a 	mov	r7,r19
 800c670:	85400005 	stb	r21,0(r16)
 800c674:	1023883a 	mov	r17,r2
 800c678:	1829883a 	mov	r20,r3
 800c67c:	8014f840 	call	8014f84 <__ledf2>
 800c680:	bdc00044 	addi	r23,r23,1
 800c684:	0009883a 	mov	r4,zero
 800c688:	014ffc34 	movhi	r5,16368
 800c68c:	880d883a 	mov	r6,r17
 800c690:	a00f883a 	mov	r7,r20
 800c694:	103fcf0e 	bge	r2,zero,800c5d4 <__alt_data_end+0xfc00c5d4>
 800c698:	d9801217 	ldw	r6,72(sp)
 800c69c:	dc001117 	ldw	r16,68(sp)
 800c6a0:	d9800515 	stw	r6,20(sp)
 800c6a4:	8009883a 	mov	r4,r16
 800c6a8:	e00b883a 	mov	r5,fp
 800c6ac:	800ee480 	call	800ee48 <_Bfree>
 800c6b0:	d8c00517 	ldw	r3,20(sp)
 800c6b4:	d9002317 	ldw	r4,140(sp)
 800c6b8:	d9802517 	ldw	r6,148(sp)
 800c6bc:	b8000005 	stb	zero,0(r23)
 800c6c0:	18800044 	addi	r2,r3,1
 800c6c4:	20800015 	stw	r2,0(r4)
 800c6c8:	30027226 	beq	r6,zero,800d094 <_dtoa_r+0x10a8>
 800c6cc:	35c00015 	stw	r23,0(r6)
 800c6d0:	d8800717 	ldw	r2,28(sp)
 800c6d4:	003e7406 	br	800c0a8 <__alt_data_end+0xfc00c0a8>
 800c6d8:	00800434 	movhi	r2,16
 800c6dc:	10bfffc4 	addi	r2,r2,-1
 800c6e0:	a8aa703a 	and	r21,r21,r2
 800c6e4:	a83e801e 	bne	r21,zero,800c0e8 <__alt_data_end+0xfc00c0e8>
 800c6e8:	008200b4 	movhi	r2,2050
 800c6ec:	108db304 	addi	r2,r2,14028
 800c6f0:	003e7f06 	br	800c0f0 <__alt_data_end+0xfc00c0f0>
 800c6f4:	10c00204 	addi	r3,r2,8
 800c6f8:	003e8206 	br	800c104 <__alt_data_end+0xfc00c104>
 800c6fc:	01400434 	movhi	r5,16
 800c700:	297fffc4 	addi	r5,r5,-1
 800c704:	994a703a 	and	r5,r19,r5
 800c708:	9009883a 	mov	r4,r18
 800c70c:	8c7f0044 	addi	r17,r17,-1023
 800c710:	294ffc34 	orhi	r5,r5,16368
 800c714:	dd000217 	ldw	r20,8(sp)
 800c718:	d8000f15 	stw	zero,60(sp)
 800c71c:	003e9f06 	br	800c19c <__alt_data_end+0xfc00c19c>
 800c720:	008200b4 	movhi	r2,2050
 800c724:	108da204 	addi	r2,r2,13960
 800c728:	003e5f06 	br	800c0a8 <__alt_data_end+0xfc00c0a8>
 800c72c:	80001115 	stw	zero,68(r16)
 800c730:	8009883a 	mov	r4,r16
 800c734:	000b883a 	mov	r5,zero
 800c738:	800eda00 	call	800eda0 <_Balloc>
 800c73c:	01bfffc4 	movi	r6,-1
 800c740:	d8800715 	stw	r2,28(sp)
 800c744:	80801015 	stw	r2,64(r16)
 800c748:	00800044 	movi	r2,1
 800c74c:	d9800615 	stw	r6,24(sp)
 800c750:	d8800b15 	stw	r2,44(sp)
 800c754:	d8002215 	stw	zero,136(sp)
 800c758:	d9800d15 	stw	r6,52(sp)
 800c75c:	d8000315 	stw	zero,12(sp)
 800c760:	d8800117 	ldw	r2,4(sp)
 800c764:	10008e16 	blt	r2,zero,800c9a0 <_dtoa_r+0x9b4>
 800c768:	d9000517 	ldw	r4,20(sp)
 800c76c:	00c00384 	movi	r3,14
 800c770:	19008b16 	blt	r3,r4,800c9a0 <_dtoa_r+0x9b4>
 800c774:	200490fa 	slli	r2,r4,3
 800c778:	00c200b4 	movhi	r3,2050
 800c77c:	d9802217 	ldw	r6,136(sp)
 800c780:	18cdd204 	addi	r3,r3,14152
 800c784:	1885883a 	add	r2,r3,r2
 800c788:	14400017 	ldw	r17,0(r2)
 800c78c:	15000117 	ldw	r20,4(r2)
 800c790:	3001c716 	blt	r6,zero,800ceb0 <_dtoa_r+0xec4>
 800c794:	880d883a 	mov	r6,r17
 800c798:	a00f883a 	mov	r7,r20
 800c79c:	9009883a 	mov	r4,r18
 800c7a0:	980b883a 	mov	r5,r19
 800c7a4:	80052740 	call	8005274 <__divdf3>
 800c7a8:	180b883a 	mov	r5,r3
 800c7ac:	1009883a 	mov	r4,r2
 800c7b0:	80064600 	call	8006460 <__fixdfsi>
 800c7b4:	1009883a 	mov	r4,r2
 800c7b8:	102d883a 	mov	r22,r2
 800c7bc:	80064e80 	call	80064e8 <__floatsidf>
 800c7c0:	1009883a 	mov	r4,r2
 800c7c4:	180b883a 	mov	r5,r3
 800c7c8:	880d883a 	mov	r6,r17
 800c7cc:	a00f883a 	mov	r7,r20
 800c7d0:	8005bf40 	call	8005bf4 <__muldf3>
 800c7d4:	9009883a 	mov	r4,r18
 800c7d8:	980b883a 	mov	r5,r19
 800c7dc:	100d883a 	mov	r6,r2
 800c7e0:	180f883a 	mov	r7,r3
 800c7e4:	80150640 	call	8015064 <__subdf3>
 800c7e8:	d9000717 	ldw	r4,28(sp)
 800c7ec:	d9800617 	ldw	r6,24(sp)
 800c7f0:	180b883a 	mov	r5,r3
 800c7f4:	b0c00c04 	addi	r3,r22,48
 800c7f8:	20c00005 	stb	r3,0(r4)
 800c7fc:	25c00044 	addi	r23,r4,1
 800c800:	01000044 	movi	r4,1
 800c804:	1011883a 	mov	r8,r2
 800c808:	2807883a 	mov	r3,r5
 800c80c:	31003d26 	beq	r6,r4,800c904 <_dtoa_r+0x918>
 800c810:	000d883a 	mov	r6,zero
 800c814:	01d00934 	movhi	r7,16420
 800c818:	1009883a 	mov	r4,r2
 800c81c:	8005bf40 	call	8005bf4 <__muldf3>
 800c820:	1009883a 	mov	r4,r2
 800c824:	180b883a 	mov	r5,r3
 800c828:	000d883a 	mov	r6,zero
 800c82c:	000f883a 	mov	r7,zero
 800c830:	1027883a 	mov	r19,r2
 800c834:	182b883a 	mov	r21,r3
 800c838:	8014e200 	call	8014e20 <__eqdf2>
 800c83c:	103f9926 	beq	r2,zero,800c6a4 <__alt_data_end+0xfc00c6a4>
 800c840:	d8c00617 	ldw	r3,24(sp)
 800c844:	d9000717 	ldw	r4,28(sp)
 800c848:	b825883a 	mov	r18,r23
 800c84c:	18bfffc4 	addi	r2,r3,-1
 800c850:	20ad883a 	add	r22,r4,r2
 800c854:	dc000315 	stw	r16,12(sp)
 800c858:	00000a06 	br	800c884 <_dtoa_r+0x898>
 800c85c:	8005bf40 	call	8005bf4 <__muldf3>
 800c860:	1009883a 	mov	r4,r2
 800c864:	180b883a 	mov	r5,r3
 800c868:	000d883a 	mov	r6,zero
 800c86c:	000f883a 	mov	r7,zero
 800c870:	1027883a 	mov	r19,r2
 800c874:	182b883a 	mov	r21,r3
 800c878:	b825883a 	mov	r18,r23
 800c87c:	8014e200 	call	8014e20 <__eqdf2>
 800c880:	10022626 	beq	r2,zero,800d11c <_dtoa_r+0x1130>
 800c884:	880d883a 	mov	r6,r17
 800c888:	a00f883a 	mov	r7,r20
 800c88c:	9809883a 	mov	r4,r19
 800c890:	a80b883a 	mov	r5,r21
 800c894:	80052740 	call	8005274 <__divdf3>
 800c898:	180b883a 	mov	r5,r3
 800c89c:	1009883a 	mov	r4,r2
 800c8a0:	80064600 	call	8006460 <__fixdfsi>
 800c8a4:	1009883a 	mov	r4,r2
 800c8a8:	1021883a 	mov	r16,r2
 800c8ac:	80064e80 	call	80064e8 <__floatsidf>
 800c8b0:	1009883a 	mov	r4,r2
 800c8b4:	180b883a 	mov	r5,r3
 800c8b8:	880d883a 	mov	r6,r17
 800c8bc:	a00f883a 	mov	r7,r20
 800c8c0:	8005bf40 	call	8005bf4 <__muldf3>
 800c8c4:	9809883a 	mov	r4,r19
 800c8c8:	a80b883a 	mov	r5,r21
 800c8cc:	100d883a 	mov	r6,r2
 800c8d0:	180f883a 	mov	r7,r3
 800c8d4:	80150640 	call	8015064 <__subdf3>
 800c8d8:	82000c04 	addi	r8,r16,48
 800c8dc:	92000005 	stb	r8,0(r18)
 800c8e0:	1009883a 	mov	r4,r2
 800c8e4:	180b883a 	mov	r5,r3
 800c8e8:	000d883a 	mov	r6,zero
 800c8ec:	01d00934 	movhi	r7,16420
 800c8f0:	1011883a 	mov	r8,r2
 800c8f4:	bdc00044 	addi	r23,r23,1
 800c8f8:	95bfd81e 	bne	r18,r22,800c85c <__alt_data_end+0xfc00c85c>
 800c8fc:	802d883a 	mov	r22,r16
 800c900:	dc000317 	ldw	r16,12(sp)
 800c904:	4009883a 	mov	r4,r8
 800c908:	180b883a 	mov	r5,r3
 800c90c:	400d883a 	mov	r6,r8
 800c910:	180f883a 	mov	r7,r3
 800c914:	80145840 	call	8014584 <__adddf3>
 800c918:	8809883a 	mov	r4,r17
 800c91c:	a00b883a 	mov	r5,r20
 800c920:	100d883a 	mov	r6,r2
 800c924:	180f883a 	mov	r7,r3
 800c928:	1027883a 	mov	r19,r2
 800c92c:	1825883a 	mov	r18,r3
 800c930:	8014f840 	call	8014f84 <__ledf2>
 800c934:	10000816 	blt	r2,zero,800c958 <_dtoa_r+0x96c>
 800c938:	8809883a 	mov	r4,r17
 800c93c:	a00b883a 	mov	r5,r20
 800c940:	980d883a 	mov	r6,r19
 800c944:	900f883a 	mov	r7,r18
 800c948:	8014e200 	call	8014e20 <__eqdf2>
 800c94c:	103f551e 	bne	r2,zero,800c6a4 <__alt_data_end+0xfc00c6a4>
 800c950:	b580004c 	andi	r22,r22,1
 800c954:	b03f5326 	beq	r22,zero,800c6a4 <__alt_data_end+0xfc00c6a4>
 800c958:	bd7fffc3 	ldbu	r21,-1(r23)
 800c95c:	b8bfffc4 	addi	r2,r23,-1
 800c960:	1007883a 	mov	r3,r2
 800c964:	01400e44 	movi	r5,57
 800c968:	d9800717 	ldw	r6,28(sp)
 800c96c:	00000506 	br	800c984 <_dtoa_r+0x998>
 800c970:	18ffffc4 	addi	r3,r3,-1
 800c974:	30825e26 	beq	r6,r2,800d2f0 <_dtoa_r+0x1304>
 800c978:	1d400003 	ldbu	r21,0(r3)
 800c97c:	102f883a 	mov	r23,r2
 800c980:	10bfffc4 	addi	r2,r2,-1
 800c984:	a9003fcc 	andi	r4,r21,255
 800c988:	2100201c 	xori	r4,r4,128
 800c98c:	213fe004 	addi	r4,r4,-128
 800c990:	217ff726 	beq	r4,r5,800c970 <__alt_data_end+0xfc00c970>
 800c994:	aa000044 	addi	r8,r21,1
 800c998:	12000005 	stb	r8,0(r2)
 800c99c:	003f4106 	br	800c6a4 <__alt_data_end+0xfc00c6a4>
 800c9a0:	d8c00b17 	ldw	r3,44(sp)
 800c9a4:	18006726 	beq	r3,zero,800cb44 <_dtoa_r+0xb58>
 800c9a8:	d9000317 	ldw	r4,12(sp)
 800c9ac:	00c00044 	movi	r3,1
 800c9b0:	19016a0e 	bge	r3,r4,800cf5c <_dtoa_r+0xf70>
 800c9b4:	d8800617 	ldw	r2,24(sp)
 800c9b8:	d8c00917 	ldw	r3,36(sp)
 800c9bc:	157fffc4 	addi	r21,r2,-1
 800c9c0:	1d420716 	blt	r3,r21,800d1e0 <_dtoa_r+0x11f4>
 800c9c4:	1d6bc83a 	sub	r21,r3,r21
 800c9c8:	d8800617 	ldw	r2,24(sp)
 800c9cc:	1002c716 	blt	r2,zero,800d4ec <_dtoa_r+0x1500>
 800c9d0:	dd000817 	ldw	r20,32(sp)
 800c9d4:	d8800617 	ldw	r2,24(sp)
 800c9d8:	d9800817 	ldw	r6,32(sp)
 800c9dc:	8009883a 	mov	r4,r16
 800c9e0:	01400044 	movi	r5,1
 800c9e4:	308d883a 	add	r6,r6,r2
 800c9e8:	d9800815 	stw	r6,32(sp)
 800c9ec:	b0ad883a 	add	r22,r22,r2
 800c9f0:	800f1c80 	call	800f1c8 <__i2b>
 800c9f4:	1023883a 	mov	r17,r2
 800c9f8:	a0000826 	beq	r20,zero,800ca1c <_dtoa_r+0xa30>
 800c9fc:	0580070e 	bge	zero,r22,800ca1c <_dtoa_r+0xa30>
 800ca00:	b005883a 	mov	r2,r22
 800ca04:	a5812016 	blt	r20,r22,800ce88 <_dtoa_r+0xe9c>
 800ca08:	d8c00817 	ldw	r3,32(sp)
 800ca0c:	a0a9c83a 	sub	r20,r20,r2
 800ca10:	b0adc83a 	sub	r22,r22,r2
 800ca14:	1887c83a 	sub	r3,r3,r2
 800ca18:	d8c00815 	stw	r3,32(sp)
 800ca1c:	d9000917 	ldw	r4,36(sp)
 800ca20:	0100140e 	bge	zero,r4,800ca74 <_dtoa_r+0xa88>
 800ca24:	d9800b17 	ldw	r6,44(sp)
 800ca28:	3001e526 	beq	r6,zero,800d1c0 <_dtoa_r+0x11d4>
 800ca2c:	05400e0e 	bge	zero,r21,800ca68 <_dtoa_r+0xa7c>
 800ca30:	880b883a 	mov	r5,r17
 800ca34:	8009883a 	mov	r4,r16
 800ca38:	a80d883a 	mov	r6,r21
 800ca3c:	800f4940 	call	800f494 <__pow5mult>
 800ca40:	e00d883a 	mov	r6,fp
 800ca44:	8009883a 	mov	r4,r16
 800ca48:	100b883a 	mov	r5,r2
 800ca4c:	1023883a 	mov	r17,r2
 800ca50:	800f2040 	call	800f204 <__multiply>
 800ca54:	102f883a 	mov	r23,r2
 800ca58:	e00b883a 	mov	r5,fp
 800ca5c:	8009883a 	mov	r4,r16
 800ca60:	800ee480 	call	800ee48 <_Bfree>
 800ca64:	b839883a 	mov	fp,r23
 800ca68:	d8800917 	ldw	r2,36(sp)
 800ca6c:	154dc83a 	sub	r6,r2,r21
 800ca70:	3001281e 	bne	r6,zero,800cf14 <_dtoa_r+0xf28>
 800ca74:	05c00044 	movi	r23,1
 800ca78:	8009883a 	mov	r4,r16
 800ca7c:	b80b883a 	mov	r5,r23
 800ca80:	800f1c80 	call	800f1c8 <__i2b>
 800ca84:	d8c00a17 	ldw	r3,40(sp)
 800ca88:	102b883a 	mov	r21,r2
 800ca8c:	00c0310e 	bge	zero,r3,800cb54 <_dtoa_r+0xb68>
 800ca90:	8009883a 	mov	r4,r16
 800ca94:	100b883a 	mov	r5,r2
 800ca98:	180d883a 	mov	r6,r3
 800ca9c:	800f4940 	call	800f494 <__pow5mult>
 800caa0:	d9000317 	ldw	r4,12(sp)
 800caa4:	102b883a 	mov	r21,r2
 800caa8:	b9011f0e 	bge	r23,r4,800cf28 <_dtoa_r+0xf3c>
 800caac:	0027883a 	mov	r19,zero
 800cab0:	a8800417 	ldw	r2,16(r21)
 800cab4:	10800104 	addi	r2,r2,4
 800cab8:	1085883a 	add	r2,r2,r2
 800cabc:	1085883a 	add	r2,r2,r2
 800cac0:	a885883a 	add	r2,r21,r2
 800cac4:	11000017 	ldw	r4,0(r2)
 800cac8:	800f0b00 	call	800f0b0 <__hi0bits>
 800cacc:	00c00804 	movi	r3,32
 800cad0:	1885c83a 	sub	r2,r3,r2
 800cad4:	00002506 	br	800cb6c <_dtoa_r+0xb80>
 800cad8:	01800044 	movi	r6,1
 800cadc:	d9800c15 	stw	r6,48(sp)
 800cae0:	003dec06 	br	800c294 <__alt_data_end+0xfc00c294>
 800cae4:	d8c00817 	ldw	r3,32(sp)
 800cae8:	d9000517 	ldw	r4,20(sp)
 800caec:	d8000a15 	stw	zero,40(sp)
 800caf0:	1907c83a 	sub	r3,r3,r4
 800caf4:	010dc83a 	sub	r6,zero,r4
 800caf8:	d8c00815 	stw	r3,32(sp)
 800cafc:	d9800915 	stw	r6,36(sp)
 800cb00:	003ded06 	br	800c2b8 <__alt_data_end+0xfc00c2b8>
 800cb04:	05adc83a 	sub	r22,zero,r22
 800cb08:	dd800815 	stw	r22,32(sp)
 800cb0c:	002d883a 	mov	r22,zero
 800cb10:	003de406 	br	800c2a4 <__alt_data_end+0xfc00c2a4>
 800cb14:	d9000517 	ldw	r4,20(sp)
 800cb18:	80064e80 	call	80064e8 <__floatsidf>
 800cb1c:	1009883a 	mov	r4,r2
 800cb20:	180b883a 	mov	r5,r3
 800cb24:	b00d883a 	mov	r6,r22
 800cb28:	a80f883a 	mov	r7,r21
 800cb2c:	8014e200 	call	8014e20 <__eqdf2>
 800cb30:	103dc726 	beq	r2,zero,800c250 <__alt_data_end+0xfc00c250>
 800cb34:	d8800517 	ldw	r2,20(sp)
 800cb38:	10bfffc4 	addi	r2,r2,-1
 800cb3c:	d8800515 	stw	r2,20(sp)
 800cb40:	003dc306 	br	800c250 <__alt_data_end+0xfc00c250>
 800cb44:	dd400917 	ldw	r21,36(sp)
 800cb48:	dd000817 	ldw	r20,32(sp)
 800cb4c:	0023883a 	mov	r17,zero
 800cb50:	003fa906 	br	800c9f8 <__alt_data_end+0xfc00c9f8>
 800cb54:	d9800317 	ldw	r6,12(sp)
 800cb58:	b981670e 	bge	r23,r6,800d0f8 <_dtoa_r+0x110c>
 800cb5c:	0027883a 	mov	r19,zero
 800cb60:	d8c00a17 	ldw	r3,40(sp)
 800cb64:	183fd21e 	bne	r3,zero,800cab0 <__alt_data_end+0xfc00cab0>
 800cb68:	00800044 	movi	r2,1
 800cb6c:	1585883a 	add	r2,r2,r22
 800cb70:	108007cc 	andi	r2,r2,31
 800cb74:	10005f26 	beq	r2,zero,800ccf4 <_dtoa_r+0xd08>
 800cb78:	00c00804 	movi	r3,32
 800cb7c:	1887c83a 	sub	r3,r3,r2
 800cb80:	01000104 	movi	r4,4
 800cb84:	20c2dd0e 	bge	r4,r3,800d6fc <_dtoa_r+0x1710>
 800cb88:	d9000817 	ldw	r4,32(sp)
 800cb8c:	00c00704 	movi	r3,28
 800cb90:	1885c83a 	sub	r2,r3,r2
 800cb94:	2089883a 	add	r4,r4,r2
 800cb98:	d9000815 	stw	r4,32(sp)
 800cb9c:	a0a9883a 	add	r20,r20,r2
 800cba0:	b0ad883a 	add	r22,r22,r2
 800cba4:	d8800817 	ldw	r2,32(sp)
 800cba8:	0080050e 	bge	zero,r2,800cbc0 <_dtoa_r+0xbd4>
 800cbac:	e00b883a 	mov	r5,fp
 800cbb0:	8009883a 	mov	r4,r16
 800cbb4:	100d883a 	mov	r6,r2
 800cbb8:	800f5d40 	call	800f5d4 <__lshift>
 800cbbc:	1039883a 	mov	fp,r2
 800cbc0:	0580050e 	bge	zero,r22,800cbd8 <_dtoa_r+0xbec>
 800cbc4:	a80b883a 	mov	r5,r21
 800cbc8:	8009883a 	mov	r4,r16
 800cbcc:	b00d883a 	mov	r6,r22
 800cbd0:	800f5d40 	call	800f5d4 <__lshift>
 800cbd4:	102b883a 	mov	r21,r2
 800cbd8:	d8c00c17 	ldw	r3,48(sp)
 800cbdc:	1801161e 	bne	r3,zero,800d038 <_dtoa_r+0x104c>
 800cbe0:	d8c00617 	ldw	r3,24(sp)
 800cbe4:	00c12d0e 	bge	zero,r3,800d09c <_dtoa_r+0x10b0>
 800cbe8:	d8c00b17 	ldw	r3,44(sp)
 800cbec:	1800571e 	bne	r3,zero,800cd4c <_dtoa_r+0xd60>
 800cbf0:	dc800717 	ldw	r18,28(sp)
 800cbf4:	dcc00617 	ldw	r19,24(sp)
 800cbf8:	9029883a 	mov	r20,r18
 800cbfc:	00000206 	br	800cc08 <_dtoa_r+0xc1c>
 800cc00:	800ee700 	call	800ee70 <__multadd>
 800cc04:	1039883a 	mov	fp,r2
 800cc08:	e009883a 	mov	r4,fp
 800cc0c:	a80b883a 	mov	r5,r21
 800cc10:	800bdc40 	call	800bdc4 <quorem>
 800cc14:	10800c04 	addi	r2,r2,48
 800cc18:	90800005 	stb	r2,0(r18)
 800cc1c:	94800044 	addi	r18,r18,1
 800cc20:	9507c83a 	sub	r3,r18,r20
 800cc24:	8009883a 	mov	r4,r16
 800cc28:	e00b883a 	mov	r5,fp
 800cc2c:	01800284 	movi	r6,10
 800cc30:	000f883a 	mov	r7,zero
 800cc34:	1cfff216 	blt	r3,r19,800cc00 <__alt_data_end+0xfc00cc00>
 800cc38:	1011883a 	mov	r8,r2
 800cc3c:	d8800617 	ldw	r2,24(sp)
 800cc40:	00822e0e 	bge	zero,r2,800d4fc <_dtoa_r+0x1510>
 800cc44:	d9000717 	ldw	r4,28(sp)
 800cc48:	0025883a 	mov	r18,zero
 800cc4c:	20af883a 	add	r23,r4,r2
 800cc50:	e00b883a 	mov	r5,fp
 800cc54:	01800044 	movi	r6,1
 800cc58:	8009883a 	mov	r4,r16
 800cc5c:	da001715 	stw	r8,92(sp)
 800cc60:	800f5d40 	call	800f5d4 <__lshift>
 800cc64:	1009883a 	mov	r4,r2
 800cc68:	a80b883a 	mov	r5,r21
 800cc6c:	1039883a 	mov	fp,r2
 800cc70:	800f71c0 	call	800f71c <__mcmp>
 800cc74:	da001717 	ldw	r8,92(sp)
 800cc78:	00816e0e 	bge	zero,r2,800d234 <_dtoa_r+0x1248>
 800cc7c:	b93fffc3 	ldbu	r4,-1(r23)
 800cc80:	b8bfffc4 	addi	r2,r23,-1
 800cc84:	1007883a 	mov	r3,r2
 800cc88:	01800e44 	movi	r6,57
 800cc8c:	d9c00717 	ldw	r7,28(sp)
 800cc90:	00000506 	br	800cca8 <_dtoa_r+0xcbc>
 800cc94:	18ffffc4 	addi	r3,r3,-1
 800cc98:	38811926 	beq	r7,r2,800d100 <_dtoa_r+0x1114>
 800cc9c:	19000003 	ldbu	r4,0(r3)
 800cca0:	102f883a 	mov	r23,r2
 800cca4:	10bfffc4 	addi	r2,r2,-1
 800cca8:	21403fcc 	andi	r5,r4,255
 800ccac:	2940201c 	xori	r5,r5,128
 800ccb0:	297fe004 	addi	r5,r5,-128
 800ccb4:	29bff726 	beq	r5,r6,800cc94 <__alt_data_end+0xfc00cc94>
 800ccb8:	21000044 	addi	r4,r4,1
 800ccbc:	11000005 	stb	r4,0(r2)
 800ccc0:	8009883a 	mov	r4,r16
 800ccc4:	a80b883a 	mov	r5,r21
 800ccc8:	800ee480 	call	800ee48 <_Bfree>
 800cccc:	883e7526 	beq	r17,zero,800c6a4 <__alt_data_end+0xfc00c6a4>
 800ccd0:	90000426 	beq	r18,zero,800cce4 <_dtoa_r+0xcf8>
 800ccd4:	94400326 	beq	r18,r17,800cce4 <_dtoa_r+0xcf8>
 800ccd8:	8009883a 	mov	r4,r16
 800ccdc:	900b883a 	mov	r5,r18
 800cce0:	800ee480 	call	800ee48 <_Bfree>
 800cce4:	8009883a 	mov	r4,r16
 800cce8:	880b883a 	mov	r5,r17
 800ccec:	800ee480 	call	800ee48 <_Bfree>
 800ccf0:	003e6c06 	br	800c6a4 <__alt_data_end+0xfc00c6a4>
 800ccf4:	00800704 	movi	r2,28
 800ccf8:	d9800817 	ldw	r6,32(sp)
 800ccfc:	a0a9883a 	add	r20,r20,r2
 800cd00:	b0ad883a 	add	r22,r22,r2
 800cd04:	308d883a 	add	r6,r6,r2
 800cd08:	d9800815 	stw	r6,32(sp)
 800cd0c:	003fa506 	br	800cba4 <__alt_data_end+0xfc00cba4>
 800cd10:	013efb84 	movi	r4,-1042
 800cd14:	246bc83a 	sub	r21,r4,r17
 800cd18:	9548983a 	sll	r4,r18,r21
 800cd1c:	003d1806 	br	800c180 <__alt_data_end+0xfc00c180>
 800cd20:	d8000c15 	stw	zero,48(sp)
 800cd24:	003d5b06 	br	800c294 <__alt_data_end+0xfc00c294>
 800cd28:	880b883a 	mov	r5,r17
 800cd2c:	8009883a 	mov	r4,r16
 800cd30:	01800284 	movi	r6,10
 800cd34:	000f883a 	mov	r7,zero
 800cd38:	800ee700 	call	800ee70 <__multadd>
 800cd3c:	1023883a 	mov	r17,r2
 800cd40:	d8800d17 	ldw	r2,52(sp)
 800cd44:	0082550e 	bge	zero,r2,800d69c <_dtoa_r+0x16b0>
 800cd48:	d8800615 	stw	r2,24(sp)
 800cd4c:	0500050e 	bge	zero,r20,800cd64 <_dtoa_r+0xd78>
 800cd50:	880b883a 	mov	r5,r17
 800cd54:	8009883a 	mov	r4,r16
 800cd58:	a00d883a 	mov	r6,r20
 800cd5c:	800f5d40 	call	800f5d4 <__lshift>
 800cd60:	1023883a 	mov	r17,r2
 800cd64:	98016a1e 	bne	r19,zero,800d310 <_dtoa_r+0x1324>
 800cd68:	8829883a 	mov	r20,r17
 800cd6c:	d9000617 	ldw	r4,24(sp)
 800cd70:	dcc00717 	ldw	r19,28(sp)
 800cd74:	9480004c 	andi	r18,r18,1
 800cd78:	20bfffc4 	addi	r2,r4,-1
 800cd7c:	9885883a 	add	r2,r19,r2
 800cd80:	d8800415 	stw	r2,16(sp)
 800cd84:	dc800615 	stw	r18,24(sp)
 800cd88:	e009883a 	mov	r4,fp
 800cd8c:	a80b883a 	mov	r5,r21
 800cd90:	800bdc40 	call	800bdc4 <quorem>
 800cd94:	e009883a 	mov	r4,fp
 800cd98:	880b883a 	mov	r5,r17
 800cd9c:	102f883a 	mov	r23,r2
 800cda0:	800f71c0 	call	800f71c <__mcmp>
 800cda4:	8009883a 	mov	r4,r16
 800cda8:	a80b883a 	mov	r5,r21
 800cdac:	a00d883a 	mov	r6,r20
 800cdb0:	102d883a 	mov	r22,r2
 800cdb4:	800f77c0 	call	800f77c <__mdiff>
 800cdb8:	1007883a 	mov	r3,r2
 800cdbc:	10800317 	ldw	r2,12(r2)
 800cdc0:	bc800c04 	addi	r18,r23,48
 800cdc4:	1000971e 	bne	r2,zero,800d024 <_dtoa_r+0x1038>
 800cdc8:	180b883a 	mov	r5,r3
 800cdcc:	e009883a 	mov	r4,fp
 800cdd0:	d8c01515 	stw	r3,84(sp)
 800cdd4:	800f71c0 	call	800f71c <__mcmp>
 800cdd8:	d8c01517 	ldw	r3,84(sp)
 800cddc:	8009883a 	mov	r4,r16
 800cde0:	d8801515 	stw	r2,84(sp)
 800cde4:	180b883a 	mov	r5,r3
 800cde8:	800ee480 	call	800ee48 <_Bfree>
 800cdec:	d8801517 	ldw	r2,84(sp)
 800cdf0:	1000041e 	bne	r2,zero,800ce04 <_dtoa_r+0xe18>
 800cdf4:	d9800317 	ldw	r6,12(sp)
 800cdf8:	3000021e 	bne	r6,zero,800ce04 <_dtoa_r+0xe18>
 800cdfc:	d8c00617 	ldw	r3,24(sp)
 800ce00:	18007626 	beq	r3,zero,800cfdc <_dtoa_r+0xff0>
 800ce04:	b0005b16 	blt	r22,zero,800cf74 <_dtoa_r+0xf88>
 800ce08:	b000041e 	bne	r22,zero,800ce1c <_dtoa_r+0xe30>
 800ce0c:	d9000317 	ldw	r4,12(sp)
 800ce10:	2000021e 	bne	r4,zero,800ce1c <_dtoa_r+0xe30>
 800ce14:	d8c00617 	ldw	r3,24(sp)
 800ce18:	18005626 	beq	r3,zero,800cf74 <_dtoa_r+0xf88>
 800ce1c:	00814d16 	blt	zero,r2,800d354 <_dtoa_r+0x1368>
 800ce20:	d8c00417 	ldw	r3,16(sp)
 800ce24:	9d800044 	addi	r22,r19,1
 800ce28:	9c800005 	stb	r18,0(r19)
 800ce2c:	b02f883a 	mov	r23,r22
 800ce30:	98c14c26 	beq	r19,r3,800d364 <_dtoa_r+0x1378>
 800ce34:	e00b883a 	mov	r5,fp
 800ce38:	8009883a 	mov	r4,r16
 800ce3c:	01800284 	movi	r6,10
 800ce40:	000f883a 	mov	r7,zero
 800ce44:	800ee700 	call	800ee70 <__multadd>
 800ce48:	1039883a 	mov	fp,r2
 800ce4c:	8d006d26 	beq	r17,r20,800d004 <_dtoa_r+0x1018>
 800ce50:	880b883a 	mov	r5,r17
 800ce54:	01800284 	movi	r6,10
 800ce58:	000f883a 	mov	r7,zero
 800ce5c:	8009883a 	mov	r4,r16
 800ce60:	800ee700 	call	800ee70 <__multadd>
 800ce64:	a00b883a 	mov	r5,r20
 800ce68:	8009883a 	mov	r4,r16
 800ce6c:	01800284 	movi	r6,10
 800ce70:	000f883a 	mov	r7,zero
 800ce74:	1023883a 	mov	r17,r2
 800ce78:	800ee700 	call	800ee70 <__multadd>
 800ce7c:	1029883a 	mov	r20,r2
 800ce80:	b027883a 	mov	r19,r22
 800ce84:	003fc006 	br	800cd88 <__alt_data_end+0xfc00cd88>
 800ce88:	a005883a 	mov	r2,r20
 800ce8c:	003ede06 	br	800ca08 <__alt_data_end+0xfc00ca08>
 800ce90:	01000044 	movi	r4,1
 800ce94:	d9000b15 	stw	r4,44(sp)
 800ce98:	d9802217 	ldw	r6,136(sp)
 800ce9c:	0180dc0e 	bge	zero,r6,800d210 <_dtoa_r+0x1224>
 800cea0:	3023883a 	mov	r17,r6
 800cea4:	d9800d15 	stw	r6,52(sp)
 800cea8:	d9800615 	stw	r6,24(sp)
 800ceac:	003d1e06 	br	800c328 <__alt_data_end+0xfc00c328>
 800ceb0:	d8800617 	ldw	r2,24(sp)
 800ceb4:	00be3716 	blt	zero,r2,800c794 <__alt_data_end+0xfc00c794>
 800ceb8:	1000be1e 	bne	r2,zero,800d1b4 <_dtoa_r+0x11c8>
 800cebc:	8809883a 	mov	r4,r17
 800cec0:	a00b883a 	mov	r5,r20
 800cec4:	000d883a 	mov	r6,zero
 800cec8:	01d00534 	movhi	r7,16404
 800cecc:	8005bf40 	call	8005bf4 <__muldf3>
 800ced0:	1009883a 	mov	r4,r2
 800ced4:	180b883a 	mov	r5,r3
 800ced8:	900d883a 	mov	r6,r18
 800cedc:	980f883a 	mov	r7,r19
 800cee0:	8014ea40 	call	8014ea4 <__gedf2>
 800cee4:	002b883a 	mov	r21,zero
 800cee8:	0023883a 	mov	r17,zero
 800ceec:	10007a16 	blt	r2,zero,800d0d8 <_dtoa_r+0x10ec>
 800cef0:	d9002217 	ldw	r4,136(sp)
 800cef4:	ddc00717 	ldw	r23,28(sp)
 800cef8:	0108303a 	nor	r4,zero,r4
 800cefc:	d9000515 	stw	r4,20(sp)
 800cf00:	8009883a 	mov	r4,r16
 800cf04:	a80b883a 	mov	r5,r21
 800cf08:	800ee480 	call	800ee48 <_Bfree>
 800cf0c:	883f751e 	bne	r17,zero,800cce4 <__alt_data_end+0xfc00cce4>
 800cf10:	003de406 	br	800c6a4 <__alt_data_end+0xfc00c6a4>
 800cf14:	e00b883a 	mov	r5,fp
 800cf18:	8009883a 	mov	r4,r16
 800cf1c:	800f4940 	call	800f494 <__pow5mult>
 800cf20:	1039883a 	mov	fp,r2
 800cf24:	003ed306 	br	800ca74 <__alt_data_end+0xfc00ca74>
 800cf28:	903ee01e 	bne	r18,zero,800caac <__alt_data_end+0xfc00caac>
 800cf2c:	00800434 	movhi	r2,16
 800cf30:	10bfffc4 	addi	r2,r2,-1
 800cf34:	9884703a 	and	r2,r19,r2
 800cf38:	103f081e 	bne	r2,zero,800cb5c <__alt_data_end+0xfc00cb5c>
 800cf3c:	9cdffc2c 	andhi	r19,r19,32752
 800cf40:	983f0626 	beq	r19,zero,800cb5c <__alt_data_end+0xfc00cb5c>
 800cf44:	d8800817 	ldw	r2,32(sp)
 800cf48:	b5800044 	addi	r22,r22,1
 800cf4c:	04c00044 	movi	r19,1
 800cf50:	10800044 	addi	r2,r2,1
 800cf54:	d8800815 	stw	r2,32(sp)
 800cf58:	003f0106 	br	800cb60 <__alt_data_end+0xfc00cb60>
 800cf5c:	d9800f17 	ldw	r6,60(sp)
 800cf60:	30016826 	beq	r6,zero,800d504 <_dtoa_r+0x1518>
 800cf64:	10810cc4 	addi	r2,r2,1075
 800cf68:	dd400917 	ldw	r21,36(sp)
 800cf6c:	dd000817 	ldw	r20,32(sp)
 800cf70:	003e9906 	br	800c9d8 <__alt_data_end+0xfc00c9d8>
 800cf74:	9011883a 	mov	r8,r18
 800cf78:	4007883a 	mov	r3,r8
 800cf7c:	e02d883a 	mov	r22,fp
 800cf80:	0080100e 	bge	zero,r2,800cfc4 <_dtoa_r+0xfd8>
 800cf84:	01800044 	movi	r6,1
 800cf88:	8009883a 	mov	r4,r16
 800cf8c:	e00b883a 	mov	r5,fp
 800cf90:	da001515 	stw	r8,84(sp)
 800cf94:	da001715 	stw	r8,92(sp)
 800cf98:	800f5d40 	call	800f5d4 <__lshift>
 800cf9c:	1009883a 	mov	r4,r2
 800cfa0:	a80b883a 	mov	r5,r21
 800cfa4:	102d883a 	mov	r22,r2
 800cfa8:	800f71c0 	call	800f71c <__mcmp>
 800cfac:	d8c01517 	ldw	r3,84(sp)
 800cfb0:	da001717 	ldw	r8,92(sp)
 800cfb4:	0081a50e 	bge	zero,r2,800d64c <_dtoa_r+0x1660>
 800cfb8:	00800e44 	movi	r2,57
 800cfbc:	40817b26 	beq	r8,r2,800d5ac <_dtoa_r+0x15c0>
 800cfc0:	40c00044 	addi	r3,r8,1
 800cfc4:	8825883a 	mov	r18,r17
 800cfc8:	9dc00044 	addi	r23,r19,1
 800cfcc:	98c00005 	stb	r3,0(r19)
 800cfd0:	a023883a 	mov	r17,r20
 800cfd4:	b039883a 	mov	fp,r22
 800cfd8:	003f3906 	br	800ccc0 <__alt_data_end+0xfc00ccc0>
 800cfdc:	00800e44 	movi	r2,57
 800cfe0:	9011883a 	mov	r8,r18
 800cfe4:	90817226 	beq	r18,r2,800d5b0 <_dtoa_r+0x15c4>
 800cfe8:	0580010e 	bge	zero,r22,800cff0 <_dtoa_r+0x1004>
 800cfec:	ba000c44 	addi	r8,r23,49
 800cff0:	8825883a 	mov	r18,r17
 800cff4:	9dc00044 	addi	r23,r19,1
 800cff8:	9a000005 	stb	r8,0(r19)
 800cffc:	a023883a 	mov	r17,r20
 800d000:	003f2f06 	br	800ccc0 <__alt_data_end+0xfc00ccc0>
 800d004:	880b883a 	mov	r5,r17
 800d008:	8009883a 	mov	r4,r16
 800d00c:	01800284 	movi	r6,10
 800d010:	000f883a 	mov	r7,zero
 800d014:	800ee700 	call	800ee70 <__multadd>
 800d018:	1023883a 	mov	r17,r2
 800d01c:	1029883a 	mov	r20,r2
 800d020:	003f9706 	br	800ce80 <__alt_data_end+0xfc00ce80>
 800d024:	8009883a 	mov	r4,r16
 800d028:	180b883a 	mov	r5,r3
 800d02c:	800ee480 	call	800ee48 <_Bfree>
 800d030:	00800044 	movi	r2,1
 800d034:	003f7306 	br	800ce04 <__alt_data_end+0xfc00ce04>
 800d038:	e009883a 	mov	r4,fp
 800d03c:	a80b883a 	mov	r5,r21
 800d040:	800f71c0 	call	800f71c <__mcmp>
 800d044:	103ee60e 	bge	r2,zero,800cbe0 <__alt_data_end+0xfc00cbe0>
 800d048:	8009883a 	mov	r4,r16
 800d04c:	e00b883a 	mov	r5,fp
 800d050:	01800284 	movi	r6,10
 800d054:	000f883a 	mov	r7,zero
 800d058:	800ee700 	call	800ee70 <__multadd>
 800d05c:	d9000517 	ldw	r4,20(sp)
 800d060:	d9800b17 	ldw	r6,44(sp)
 800d064:	1039883a 	mov	fp,r2
 800d068:	213fffc4 	addi	r4,r4,-1
 800d06c:	d9000515 	stw	r4,20(sp)
 800d070:	303f2d1e 	bne	r6,zero,800cd28 <__alt_data_end+0xfc00cd28>
 800d074:	d9000d17 	ldw	r4,52(sp)
 800d078:	0101780e 	bge	zero,r4,800d65c <_dtoa_r+0x1670>
 800d07c:	d9000615 	stw	r4,24(sp)
 800d080:	003edb06 	br	800cbf0 <__alt_data_end+0xfc00cbf0>
 800d084:	00800084 	movi	r2,2
 800d088:	30818e1e 	bne	r6,r2,800d6c4 <_dtoa_r+0x16d8>
 800d08c:	d8000b15 	stw	zero,44(sp)
 800d090:	003f8106 	br	800ce98 <__alt_data_end+0xfc00ce98>
 800d094:	d8800717 	ldw	r2,28(sp)
 800d098:	003c0306 	br	800c0a8 <__alt_data_end+0xfc00c0a8>
 800d09c:	d9000317 	ldw	r4,12(sp)
 800d0a0:	00800084 	movi	r2,2
 800d0a4:	113ed00e 	bge	r2,r4,800cbe8 <__alt_data_end+0xfc00cbe8>
 800d0a8:	d8c00617 	ldw	r3,24(sp)
 800d0ac:	183f901e 	bne	r3,zero,800cef0 <__alt_data_end+0xfc00cef0>
 800d0b0:	a80b883a 	mov	r5,r21
 800d0b4:	8009883a 	mov	r4,r16
 800d0b8:	01800144 	movi	r6,5
 800d0bc:	000f883a 	mov	r7,zero
 800d0c0:	800ee700 	call	800ee70 <__multadd>
 800d0c4:	e009883a 	mov	r4,fp
 800d0c8:	100b883a 	mov	r5,r2
 800d0cc:	102b883a 	mov	r21,r2
 800d0d0:	800f71c0 	call	800f71c <__mcmp>
 800d0d4:	00bf860e 	bge	zero,r2,800cef0 <__alt_data_end+0xfc00cef0>
 800d0d8:	d9800717 	ldw	r6,28(sp)
 800d0dc:	00800c44 	movi	r2,49
 800d0e0:	30800005 	stb	r2,0(r6)
 800d0e4:	d8800517 	ldw	r2,20(sp)
 800d0e8:	35c00044 	addi	r23,r6,1
 800d0ec:	10800044 	addi	r2,r2,1
 800d0f0:	d8800515 	stw	r2,20(sp)
 800d0f4:	003f8206 	br	800cf00 <__alt_data_end+0xfc00cf00>
 800d0f8:	903e981e 	bne	r18,zero,800cb5c <__alt_data_end+0xfc00cb5c>
 800d0fc:	003f8b06 	br	800cf2c <__alt_data_end+0xfc00cf2c>
 800d100:	d9800517 	ldw	r6,20(sp)
 800d104:	d8c00717 	ldw	r3,28(sp)
 800d108:	00800c44 	movi	r2,49
 800d10c:	31800044 	addi	r6,r6,1
 800d110:	d9800515 	stw	r6,20(sp)
 800d114:	18800005 	stb	r2,0(r3)
 800d118:	003ee906 	br	800ccc0 <__alt_data_end+0xfc00ccc0>
 800d11c:	dc000317 	ldw	r16,12(sp)
 800d120:	003d6006 	br	800c6a4 <__alt_data_end+0xfc00c6a4>
 800d124:	8809883a 	mov	r4,r17
 800d128:	80064e80 	call	80064e8 <__floatsidf>
 800d12c:	a009883a 	mov	r4,r20
 800d130:	a80b883a 	mov	r5,r21
 800d134:	100d883a 	mov	r6,r2
 800d138:	180f883a 	mov	r7,r3
 800d13c:	8005bf40 	call	8005bf4 <__muldf3>
 800d140:	1009883a 	mov	r4,r2
 800d144:	180b883a 	mov	r5,r3
 800d148:	000d883a 	mov	r6,zero
 800d14c:	01d00734 	movhi	r7,16412
 800d150:	80145840 	call	8014584 <__adddf3>
 800d154:	1023883a 	mov	r17,r2
 800d158:	00bf3034 	movhi	r2,64704
 800d15c:	1885883a 	add	r2,r3,r2
 800d160:	d8800e15 	stw	r2,56(sp)
 800d164:	a009883a 	mov	r4,r20
 800d168:	a80b883a 	mov	r5,r21
 800d16c:	000d883a 	mov	r6,zero
 800d170:	01d00534 	movhi	r7,16404
 800d174:	80150640 	call	8015064 <__subdf3>
 800d178:	d9c00e17 	ldw	r7,56(sp)
 800d17c:	1009883a 	mov	r4,r2
 800d180:	180b883a 	mov	r5,r3
 800d184:	880d883a 	mov	r6,r17
 800d188:	102b883a 	mov	r21,r2
 800d18c:	1829883a 	mov	r20,r3
 800d190:	8014ea40 	call	8014ea4 <__gedf2>
 800d194:	00807716 	blt	zero,r2,800d374 <_dtoa_r+0x1388>
 800d198:	d8800e17 	ldw	r2,56(sp)
 800d19c:	a809883a 	mov	r4,r21
 800d1a0:	a00b883a 	mov	r5,r20
 800d1a4:	11e0003c 	xorhi	r7,r2,32768
 800d1a8:	880d883a 	mov	r6,r17
 800d1ac:	8014f840 	call	8014f84 <__ledf2>
 800d1b0:	103d6b0e 	bge	r2,zero,800c760 <__alt_data_end+0xfc00c760>
 800d1b4:	002b883a 	mov	r21,zero
 800d1b8:	0023883a 	mov	r17,zero
 800d1bc:	003f4c06 	br	800cef0 <__alt_data_end+0xfc00cef0>
 800d1c0:	d9800917 	ldw	r6,36(sp)
 800d1c4:	e00b883a 	mov	r5,fp
 800d1c8:	8009883a 	mov	r4,r16
 800d1cc:	800f4940 	call	800f494 <__pow5mult>
 800d1d0:	1039883a 	mov	fp,r2
 800d1d4:	003e2706 	br	800ca74 <__alt_data_end+0xfc00ca74>
 800d1d8:	d8000b15 	stw	zero,44(sp)
 800d1dc:	003c4906 	br	800c304 <__alt_data_end+0xfc00c304>
 800d1e0:	d9000917 	ldw	r4,36(sp)
 800d1e4:	d9800a17 	ldw	r6,40(sp)
 800d1e8:	dd400915 	stw	r21,36(sp)
 800d1ec:	a905c83a 	sub	r2,r21,r4
 800d1f0:	308d883a 	add	r6,r6,r2
 800d1f4:	d9800a15 	stw	r6,40(sp)
 800d1f8:	002b883a 	mov	r21,zero
 800d1fc:	003df206 	br	800c9c8 <__alt_data_end+0xfc00c9c8>
 800d200:	dc800e15 	stw	r18,56(sp)
 800d204:	982b883a 	mov	r21,r19
 800d208:	04400084 	movi	r17,2
 800d20c:	003c7406 	br	800c3e0 <__alt_data_end+0xfc00c3e0>
 800d210:	04400044 	movi	r17,1
 800d214:	dc400d15 	stw	r17,52(sp)
 800d218:	dc400615 	stw	r17,24(sp)
 800d21c:	dc402215 	stw	r17,136(sp)
 800d220:	80001115 	stw	zero,68(r16)
 800d224:	000b883a 	mov	r5,zero
 800d228:	003c4a06 	br	800c354 <__alt_data_end+0xfc00c354>
 800d22c:	3023883a 	mov	r17,r6
 800d230:	003ffb06 	br	800d220 <__alt_data_end+0xfc00d220>
 800d234:	1000021e 	bne	r2,zero,800d240 <_dtoa_r+0x1254>
 800d238:	4200004c 	andi	r8,r8,1
 800d23c:	403e8f1e 	bne	r8,zero,800cc7c <__alt_data_end+0xfc00cc7c>
 800d240:	01000c04 	movi	r4,48
 800d244:	00000106 	br	800d24c <_dtoa_r+0x1260>
 800d248:	102f883a 	mov	r23,r2
 800d24c:	b8bfffc4 	addi	r2,r23,-1
 800d250:	10c00007 	ldb	r3,0(r2)
 800d254:	193ffc26 	beq	r3,r4,800d248 <__alt_data_end+0xfc00d248>
 800d258:	003e9906 	br	800ccc0 <__alt_data_end+0xfc00ccc0>
 800d25c:	d9000517 	ldw	r4,20(sp)
 800d260:	012fc83a 	sub	r23,zero,r4
 800d264:	b800ad26 	beq	r23,zero,800d51c <_dtoa_r+0x1530>
 800d268:	b88003cc 	andi	r2,r23,15
 800d26c:	100490fa 	slli	r2,r2,3
 800d270:	00c200b4 	movhi	r3,2050
 800d274:	18cdd204 	addi	r3,r3,14152
 800d278:	1885883a 	add	r2,r3,r2
 800d27c:	11800017 	ldw	r6,0(r2)
 800d280:	11c00117 	ldw	r7,4(r2)
 800d284:	b82fd13a 	srai	r23,r23,4
 800d288:	9009883a 	mov	r4,r18
 800d28c:	980b883a 	mov	r5,r19
 800d290:	8005bf40 	call	8005bf4 <__muldf3>
 800d294:	1029883a 	mov	r20,r2
 800d298:	182b883a 	mov	r21,r3
 800d29c:	b800f426 	beq	r23,zero,800d670 <_dtoa_r+0x1684>
 800d2a0:	020200b4 	movhi	r8,2050
 800d2a4:	420dc804 	addi	r8,r8,14112
 800d2a8:	8029883a 	mov	r20,r16
 800d2ac:	04400084 	movi	r17,2
 800d2b0:	4021883a 	mov	r16,r8
 800d2b4:	b980004c 	andi	r6,r23,1
 800d2b8:	1009883a 	mov	r4,r2
 800d2bc:	b82fd07a 	srai	r23,r23,1
 800d2c0:	180b883a 	mov	r5,r3
 800d2c4:	30000426 	beq	r6,zero,800d2d8 <_dtoa_r+0x12ec>
 800d2c8:	81800017 	ldw	r6,0(r16)
 800d2cc:	81c00117 	ldw	r7,4(r16)
 800d2d0:	8c400044 	addi	r17,r17,1
 800d2d4:	8005bf40 	call	8005bf4 <__muldf3>
 800d2d8:	84000204 	addi	r16,r16,8
 800d2dc:	b83ff51e 	bne	r23,zero,800d2b4 <__alt_data_end+0xfc00d2b4>
 800d2e0:	a021883a 	mov	r16,r20
 800d2e4:	182b883a 	mov	r21,r3
 800d2e8:	1029883a 	mov	r20,r2
 800d2ec:	003c5506 	br	800c444 <__alt_data_end+0xfc00c444>
 800d2f0:	d9800517 	ldw	r6,20(sp)
 800d2f4:	d9000717 	ldw	r4,28(sp)
 800d2f8:	00c00c04 	movi	r3,48
 800d2fc:	31800044 	addi	r6,r6,1
 800d300:	d9800515 	stw	r6,20(sp)
 800d304:	20c00005 	stb	r3,0(r4)
 800d308:	02000c44 	movi	r8,49
 800d30c:	003da206 	br	800c998 <__alt_data_end+0xfc00c998>
 800d310:	89400117 	ldw	r5,4(r17)
 800d314:	8009883a 	mov	r4,r16
 800d318:	800eda00 	call	800eda0 <_Balloc>
 800d31c:	89800417 	ldw	r6,16(r17)
 800d320:	11000304 	addi	r4,r2,12
 800d324:	89400304 	addi	r5,r17,12
 800d328:	31800084 	addi	r6,r6,2
 800d32c:	318d883a 	add	r6,r6,r6
 800d330:	318d883a 	add	r6,r6,r6
 800d334:	1027883a 	mov	r19,r2
 800d338:	80071380 	call	8007138 <memcpy>
 800d33c:	8009883a 	mov	r4,r16
 800d340:	980b883a 	mov	r5,r19
 800d344:	01800044 	movi	r6,1
 800d348:	800f5d40 	call	800f5d4 <__lshift>
 800d34c:	1029883a 	mov	r20,r2
 800d350:	003e8606 	br	800cd6c <__alt_data_end+0xfc00cd6c>
 800d354:	00800e44 	movi	r2,57
 800d358:	90809526 	beq	r18,r2,800d5b0 <_dtoa_r+0x15c4>
 800d35c:	92000044 	addi	r8,r18,1
 800d360:	003f2306 	br	800cff0 <__alt_data_end+0xfc00cff0>
 800d364:	9011883a 	mov	r8,r18
 800d368:	8825883a 	mov	r18,r17
 800d36c:	a023883a 	mov	r17,r20
 800d370:	003e3706 	br	800cc50 <__alt_data_end+0xfc00cc50>
 800d374:	002b883a 	mov	r21,zero
 800d378:	0023883a 	mov	r17,zero
 800d37c:	003f5606 	br	800d0d8 <__alt_data_end+0xfc00d0d8>
 800d380:	51bfffc4 	addi	r6,r10,-1
 800d384:	300490fa 	slli	r2,r6,3
 800d388:	00c200b4 	movhi	r3,2050
 800d38c:	18cdd204 	addi	r3,r3,14152
 800d390:	1885883a 	add	r2,r3,r2
 800d394:	d9c00e17 	ldw	r7,56(sp)
 800d398:	11000017 	ldw	r4,0(r2)
 800d39c:	11400117 	ldw	r5,4(r2)
 800d3a0:	d8800717 	ldw	r2,28(sp)
 800d3a4:	d9801015 	stw	r6,64(sp)
 800d3a8:	880d883a 	mov	r6,r17
 800d3ac:	da801615 	stw	r10,88(sp)
 800d3b0:	15c00044 	addi	r23,r2,1
 800d3b4:	8005bf40 	call	8005bf4 <__muldf3>
 800d3b8:	a80b883a 	mov	r5,r21
 800d3bc:	a009883a 	mov	r4,r20
 800d3c0:	d8c01115 	stw	r3,68(sp)
 800d3c4:	d8800e15 	stw	r2,56(sp)
 800d3c8:	80064600 	call	8006460 <__fixdfsi>
 800d3cc:	1009883a 	mov	r4,r2
 800d3d0:	1023883a 	mov	r17,r2
 800d3d4:	80064e80 	call	80064e8 <__floatsidf>
 800d3d8:	a009883a 	mov	r4,r20
 800d3dc:	a80b883a 	mov	r5,r21
 800d3e0:	100d883a 	mov	r6,r2
 800d3e4:	180f883a 	mov	r7,r3
 800d3e8:	80150640 	call	8015064 <__subdf3>
 800d3ec:	1813883a 	mov	r9,r3
 800d3f0:	d8c00717 	ldw	r3,28(sp)
 800d3f4:	8c400c04 	addi	r17,r17,48
 800d3f8:	1011883a 	mov	r8,r2
 800d3fc:	1c400005 	stb	r17,0(r3)
 800d400:	da801617 	ldw	r10,88(sp)
 800d404:	00800044 	movi	r2,1
 800d408:	50802326 	beq	r10,r2,800d498 <_dtoa_r+0x14ac>
 800d40c:	d8800717 	ldw	r2,28(sp)
 800d410:	b82b883a 	mov	r21,r23
 800d414:	dc001315 	stw	r16,76(sp)
 800d418:	12a9883a 	add	r20,r2,r10
 800d41c:	4807883a 	mov	r3,r9
 800d420:	4005883a 	mov	r2,r8
 800d424:	dc801415 	stw	r18,80(sp)
 800d428:	000d883a 	mov	r6,zero
 800d42c:	01d00934 	movhi	r7,16420
 800d430:	1009883a 	mov	r4,r2
 800d434:	180b883a 	mov	r5,r3
 800d438:	8005bf40 	call	8005bf4 <__muldf3>
 800d43c:	180b883a 	mov	r5,r3
 800d440:	1009883a 	mov	r4,r2
 800d444:	1821883a 	mov	r16,r3
 800d448:	1025883a 	mov	r18,r2
 800d44c:	80064600 	call	8006460 <__fixdfsi>
 800d450:	1009883a 	mov	r4,r2
 800d454:	1023883a 	mov	r17,r2
 800d458:	80064e80 	call	80064e8 <__floatsidf>
 800d45c:	9009883a 	mov	r4,r18
 800d460:	800b883a 	mov	r5,r16
 800d464:	100d883a 	mov	r6,r2
 800d468:	180f883a 	mov	r7,r3
 800d46c:	8c400c04 	addi	r17,r17,48
 800d470:	80150640 	call	8015064 <__subdf3>
 800d474:	ad400044 	addi	r21,r21,1
 800d478:	ac7fffc5 	stb	r17,-1(r21)
 800d47c:	ad3fea1e 	bne	r21,r20,800d428 <__alt_data_end+0xfc00d428>
 800d480:	1813883a 	mov	r9,r3
 800d484:	d8c01017 	ldw	r3,64(sp)
 800d488:	dc001317 	ldw	r16,76(sp)
 800d48c:	dc801417 	ldw	r18,80(sp)
 800d490:	1011883a 	mov	r8,r2
 800d494:	b8ef883a 	add	r23,r23,r3
 800d498:	d9000e17 	ldw	r4,56(sp)
 800d49c:	d9401117 	ldw	r5,68(sp)
 800d4a0:	000d883a 	mov	r6,zero
 800d4a4:	01cff834 	movhi	r7,16352
 800d4a8:	da001715 	stw	r8,92(sp)
 800d4ac:	da401515 	stw	r9,84(sp)
 800d4b0:	80145840 	call	8014584 <__adddf3>
 800d4b4:	da001717 	ldw	r8,92(sp)
 800d4b8:	da401517 	ldw	r9,84(sp)
 800d4bc:	1009883a 	mov	r4,r2
 800d4c0:	400d883a 	mov	r6,r8
 800d4c4:	480f883a 	mov	r7,r9
 800d4c8:	180b883a 	mov	r5,r3
 800d4cc:	8014f840 	call	8014f84 <__ledf2>
 800d4d0:	da001717 	ldw	r8,92(sp)
 800d4d4:	da401517 	ldw	r9,84(sp)
 800d4d8:	10003b0e 	bge	r2,zero,800d5c8 <_dtoa_r+0x15dc>
 800d4dc:	d9001217 	ldw	r4,72(sp)
 800d4e0:	bd7fffc3 	ldbu	r21,-1(r23)
 800d4e4:	d9000515 	stw	r4,20(sp)
 800d4e8:	003d1c06 	br	800c95c <__alt_data_end+0xfc00c95c>
 800d4ec:	d8c00817 	ldw	r3,32(sp)
 800d4f0:	18a9c83a 	sub	r20,r3,r2
 800d4f4:	0005883a 	mov	r2,zero
 800d4f8:	003d3706 	br	800c9d8 <__alt_data_end+0xfc00c9d8>
 800d4fc:	00800044 	movi	r2,1
 800d500:	003dd006 	br	800cc44 <__alt_data_end+0xfc00cc44>
 800d504:	d8c00217 	ldw	r3,8(sp)
 800d508:	00800d84 	movi	r2,54
 800d50c:	dd400917 	ldw	r21,36(sp)
 800d510:	10c5c83a 	sub	r2,r2,r3
 800d514:	dd000817 	ldw	r20,32(sp)
 800d518:	003d2f06 	br	800c9d8 <__alt_data_end+0xfc00c9d8>
 800d51c:	9029883a 	mov	r20,r18
 800d520:	982b883a 	mov	r21,r19
 800d524:	04400084 	movi	r17,2
 800d528:	003bc606 	br	800c444 <__alt_data_end+0xfc00c444>
 800d52c:	d8800617 	ldw	r2,24(sp)
 800d530:	103efc26 	beq	r2,zero,800d124 <__alt_data_end+0xfc00d124>
 800d534:	d8c00d17 	ldw	r3,52(sp)
 800d538:	00fc890e 	bge	zero,r3,800c760 <__alt_data_end+0xfc00c760>
 800d53c:	a80b883a 	mov	r5,r21
 800d540:	a009883a 	mov	r4,r20
 800d544:	000d883a 	mov	r6,zero
 800d548:	01d00934 	movhi	r7,16420
 800d54c:	8005bf40 	call	8005bf4 <__muldf3>
 800d550:	89000044 	addi	r4,r17,1
 800d554:	1029883a 	mov	r20,r2
 800d558:	182b883a 	mov	r21,r3
 800d55c:	80064e80 	call	80064e8 <__floatsidf>
 800d560:	a009883a 	mov	r4,r20
 800d564:	a80b883a 	mov	r5,r21
 800d568:	100d883a 	mov	r6,r2
 800d56c:	180f883a 	mov	r7,r3
 800d570:	8005bf40 	call	8005bf4 <__muldf3>
 800d574:	1009883a 	mov	r4,r2
 800d578:	180b883a 	mov	r5,r3
 800d57c:	000d883a 	mov	r6,zero
 800d580:	01d00734 	movhi	r7,16412
 800d584:	80145840 	call	8014584 <__adddf3>
 800d588:	d9000517 	ldw	r4,20(sp)
 800d58c:	1023883a 	mov	r17,r2
 800d590:	00bf3034 	movhi	r2,64704
 800d594:	213fffc4 	addi	r4,r4,-1
 800d598:	1885883a 	add	r2,r3,r2
 800d59c:	d9001215 	stw	r4,72(sp)
 800d5a0:	d8800e15 	stw	r2,56(sp)
 800d5a4:	da800d17 	ldw	r10,52(sp)
 800d5a8:	003bc306 	br	800c4b8 <__alt_data_end+0xfc00c4b8>
 800d5ac:	b039883a 	mov	fp,r22
 800d5b0:	01000e44 	movi	r4,57
 800d5b4:	8825883a 	mov	r18,r17
 800d5b8:	9dc00044 	addi	r23,r19,1
 800d5bc:	99000005 	stb	r4,0(r19)
 800d5c0:	a023883a 	mov	r17,r20
 800d5c4:	003dae06 	br	800cc80 <__alt_data_end+0xfc00cc80>
 800d5c8:	d9800e17 	ldw	r6,56(sp)
 800d5cc:	d9c01117 	ldw	r7,68(sp)
 800d5d0:	0009883a 	mov	r4,zero
 800d5d4:	014ff834 	movhi	r5,16352
 800d5d8:	da001715 	stw	r8,92(sp)
 800d5dc:	da401515 	stw	r9,84(sp)
 800d5e0:	80150640 	call	8015064 <__subdf3>
 800d5e4:	da001717 	ldw	r8,92(sp)
 800d5e8:	da401517 	ldw	r9,84(sp)
 800d5ec:	1009883a 	mov	r4,r2
 800d5f0:	180b883a 	mov	r5,r3
 800d5f4:	400d883a 	mov	r6,r8
 800d5f8:	480f883a 	mov	r7,r9
 800d5fc:	8014ea40 	call	8014ea4 <__gedf2>
 800d600:	00bc570e 	bge	zero,r2,800c760 <__alt_data_end+0xfc00c760>
 800d604:	01000c04 	movi	r4,48
 800d608:	00000106 	br	800d610 <_dtoa_r+0x1624>
 800d60c:	102f883a 	mov	r23,r2
 800d610:	b8bfffc4 	addi	r2,r23,-1
 800d614:	10c00007 	ldb	r3,0(r2)
 800d618:	193ffc26 	beq	r3,r4,800d60c <__alt_data_end+0xfc00d60c>
 800d61c:	d9801217 	ldw	r6,72(sp)
 800d620:	d9800515 	stw	r6,20(sp)
 800d624:	003c1f06 	br	800c6a4 <__alt_data_end+0xfc00c6a4>
 800d628:	d8801217 	ldw	r2,72(sp)
 800d62c:	dc001117 	ldw	r16,68(sp)
 800d630:	d8800515 	stw	r2,20(sp)
 800d634:	003cc906 	br	800c95c <__alt_data_end+0xfc00c95c>
 800d638:	dd801317 	ldw	r22,76(sp)
 800d63c:	dc001117 	ldw	r16,68(sp)
 800d640:	dcc01417 	ldw	r19,80(sp)
 800d644:	dc801017 	ldw	r18,64(sp)
 800d648:	003c4506 	br	800c760 <__alt_data_end+0xfc00c760>
 800d64c:	103e5d1e 	bne	r2,zero,800cfc4 <__alt_data_end+0xfc00cfc4>
 800d650:	4080004c 	andi	r2,r8,1
 800d654:	103e5b26 	beq	r2,zero,800cfc4 <__alt_data_end+0xfc00cfc4>
 800d658:	003e5706 	br	800cfb8 <__alt_data_end+0xfc00cfb8>
 800d65c:	d8c00317 	ldw	r3,12(sp)
 800d660:	00800084 	movi	r2,2
 800d664:	10c00a16 	blt	r2,r3,800d690 <_dtoa_r+0x16a4>
 800d668:	d9000d17 	ldw	r4,52(sp)
 800d66c:	003e8306 	br	800d07c <__alt_data_end+0xfc00d07c>
 800d670:	04400084 	movi	r17,2
 800d674:	003b7306 	br	800c444 <__alt_data_end+0xfc00c444>
 800d678:	d9801217 	ldw	r6,72(sp)
 800d67c:	d9800515 	stw	r6,20(sp)
 800d680:	003cb606 	br	800c95c <__alt_data_end+0xfc00c95c>
 800d684:	d9001217 	ldw	r4,72(sp)
 800d688:	d9000515 	stw	r4,20(sp)
 800d68c:	003c0506 	br	800c6a4 <__alt_data_end+0xfc00c6a4>
 800d690:	d9800d17 	ldw	r6,52(sp)
 800d694:	d9800615 	stw	r6,24(sp)
 800d698:	003e8306 	br	800d0a8 <__alt_data_end+0xfc00d0a8>
 800d69c:	d9800317 	ldw	r6,12(sp)
 800d6a0:	00800084 	movi	r2,2
 800d6a4:	11800216 	blt	r2,r6,800d6b0 <_dtoa_r+0x16c4>
 800d6a8:	d8800d17 	ldw	r2,52(sp)
 800d6ac:	003da606 	br	800cd48 <__alt_data_end+0xfc00cd48>
 800d6b0:	d8800d17 	ldw	r2,52(sp)
 800d6b4:	d8800615 	stw	r2,24(sp)
 800d6b8:	003e7b06 	br	800d0a8 <__alt_data_end+0xfc00d0a8>
 800d6bc:	05000044 	movi	r20,1
 800d6c0:	003b0506 	br	800c2d8 <__alt_data_end+0xfc00c2d8>
 800d6c4:	8009883a 	mov	r4,r16
 800d6c8:	80001115 	stw	zero,68(r16)
 800d6cc:	000b883a 	mov	r5,zero
 800d6d0:	800eda00 	call	800eda0 <_Balloc>
 800d6d4:	d8800715 	stw	r2,28(sp)
 800d6d8:	d8c00717 	ldw	r3,28(sp)
 800d6dc:	00bfffc4 	movi	r2,-1
 800d6e0:	01000044 	movi	r4,1
 800d6e4:	d8800615 	stw	r2,24(sp)
 800d6e8:	80c01015 	stw	r3,64(r16)
 800d6ec:	d9000b15 	stw	r4,44(sp)
 800d6f0:	d8002215 	stw	zero,136(sp)
 800d6f4:	d8800d15 	stw	r2,52(sp)
 800d6f8:	003c1906 	br	800c760 <__alt_data_end+0xfc00c760>
 800d6fc:	193d2926 	beq	r3,r4,800cba4 <__alt_data_end+0xfc00cba4>
 800d700:	00c00f04 	movi	r3,60
 800d704:	1885c83a 	sub	r2,r3,r2
 800d708:	003d7b06 	br	800ccf8 <__alt_data_end+0xfc00ccf8>
 800d70c:	000b883a 	mov	r5,zero
 800d710:	003b1006 	br	800c354 <__alt_data_end+0xfc00c354>

0800d714 <_fflush_r>:
 800d714:	defffb04 	addi	sp,sp,-20
 800d718:	dcc00315 	stw	r19,12(sp)
 800d71c:	dc000015 	stw	r16,0(sp)
 800d720:	dfc00415 	stw	ra,16(sp)
 800d724:	dc800215 	stw	r18,8(sp)
 800d728:	dc400115 	stw	r17,4(sp)
 800d72c:	2027883a 	mov	r19,r4
 800d730:	2821883a 	mov	r16,r5
 800d734:	20000226 	beq	r4,zero,800d740 <_fflush_r+0x2c>
 800d738:	20800e17 	ldw	r2,56(r4)
 800d73c:	10005326 	beq	r2,zero,800d88c <_fflush_r+0x178>
 800d740:	8080030b 	ldhu	r2,12(r16)
 800d744:	10ffffcc 	andi	r3,r2,65535
 800d748:	18e0001c 	xori	r3,r3,32768
 800d74c:	18e00004 	addi	r3,r3,-32768
 800d750:	18002c26 	beq	r3,zero,800d804 <_fflush_r+0xf0>
 800d754:	10c0020c 	andi	r3,r2,8
 800d758:	1800321e 	bne	r3,zero,800d824 <_fflush_r+0x110>
 800d75c:	80c00117 	ldw	r3,4(r16)
 800d760:	10820014 	ori	r2,r2,2048
 800d764:	8080030d 	sth	r2,12(r16)
 800d768:	00c0570e 	bge	zero,r3,800d8c8 <_fflush_r+0x1b4>
 800d76c:	82000a17 	ldw	r8,40(r16)
 800d770:	40002426 	beq	r8,zero,800d804 <_fflush_r+0xf0>
 800d774:	9c400017 	ldw	r17,0(r19)
 800d778:	10c4000c 	andi	r3,r2,4096
 800d77c:	98000015 	stw	zero,0(r19)
 800d780:	18004626 	beq	r3,zero,800d89c <_fflush_r+0x188>
 800d784:	81801417 	ldw	r6,80(r16)
 800d788:	10c0010c 	andi	r3,r2,4
 800d78c:	18000626 	beq	r3,zero,800d7a8 <_fflush_r+0x94>
 800d790:	80c00117 	ldw	r3,4(r16)
 800d794:	80800c17 	ldw	r2,48(r16)
 800d798:	30cdc83a 	sub	r6,r6,r3
 800d79c:	10000226 	beq	r2,zero,800d7a8 <_fflush_r+0x94>
 800d7a0:	80800f17 	ldw	r2,60(r16)
 800d7a4:	308dc83a 	sub	r6,r6,r2
 800d7a8:	81400717 	ldw	r5,28(r16)
 800d7ac:	9809883a 	mov	r4,r19
 800d7b0:	000f883a 	mov	r7,zero
 800d7b4:	403ee83a 	callr	r8
 800d7b8:	00ffffc4 	movi	r3,-1
 800d7bc:	10c04526 	beq	r2,r3,800d8d4 <_fflush_r+0x1c0>
 800d7c0:	80c0030b 	ldhu	r3,12(r16)
 800d7c4:	81000417 	ldw	r4,16(r16)
 800d7c8:	80000115 	stw	zero,4(r16)
 800d7cc:	197dffcc 	andi	r5,r3,63487
 800d7d0:	8140030d 	sth	r5,12(r16)
 800d7d4:	81000015 	stw	r4,0(r16)
 800d7d8:	18c4000c 	andi	r3,r3,4096
 800d7dc:	18000126 	beq	r3,zero,800d7e4 <_fflush_r+0xd0>
 800d7e0:	80801415 	stw	r2,80(r16)
 800d7e4:	81400c17 	ldw	r5,48(r16)
 800d7e8:	9c400015 	stw	r17,0(r19)
 800d7ec:	28000526 	beq	r5,zero,800d804 <_fflush_r+0xf0>
 800d7f0:	80801004 	addi	r2,r16,64
 800d7f4:	28800226 	beq	r5,r2,800d800 <_fflush_r+0xec>
 800d7f8:	9809883a 	mov	r4,r19
 800d7fc:	800de440 	call	800de44 <_free_r>
 800d800:	80000c15 	stw	zero,48(r16)
 800d804:	0005883a 	mov	r2,zero
 800d808:	dfc00417 	ldw	ra,16(sp)
 800d80c:	dcc00317 	ldw	r19,12(sp)
 800d810:	dc800217 	ldw	r18,8(sp)
 800d814:	dc400117 	ldw	r17,4(sp)
 800d818:	dc000017 	ldw	r16,0(sp)
 800d81c:	dec00504 	addi	sp,sp,20
 800d820:	f800283a 	ret
 800d824:	84800417 	ldw	r18,16(r16)
 800d828:	903ff626 	beq	r18,zero,800d804 <__alt_data_end+0xfc00d804>
 800d82c:	84400017 	ldw	r17,0(r16)
 800d830:	108000cc 	andi	r2,r2,3
 800d834:	84800015 	stw	r18,0(r16)
 800d838:	8ca3c83a 	sub	r17,r17,r18
 800d83c:	10001526 	beq	r2,zero,800d894 <_fflush_r+0x180>
 800d840:	0005883a 	mov	r2,zero
 800d844:	80800215 	stw	r2,8(r16)
 800d848:	04400316 	blt	zero,r17,800d858 <_fflush_r+0x144>
 800d84c:	003fed06 	br	800d804 <__alt_data_end+0xfc00d804>
 800d850:	90a5883a 	add	r18,r18,r2
 800d854:	047feb0e 	bge	zero,r17,800d804 <__alt_data_end+0xfc00d804>
 800d858:	80800917 	ldw	r2,36(r16)
 800d85c:	81400717 	ldw	r5,28(r16)
 800d860:	880f883a 	mov	r7,r17
 800d864:	900d883a 	mov	r6,r18
 800d868:	9809883a 	mov	r4,r19
 800d86c:	103ee83a 	callr	r2
 800d870:	88a3c83a 	sub	r17,r17,r2
 800d874:	00bff616 	blt	zero,r2,800d850 <__alt_data_end+0xfc00d850>
 800d878:	80c0030b 	ldhu	r3,12(r16)
 800d87c:	00bfffc4 	movi	r2,-1
 800d880:	18c01014 	ori	r3,r3,64
 800d884:	80c0030d 	sth	r3,12(r16)
 800d888:	003fdf06 	br	800d808 <__alt_data_end+0xfc00d808>
 800d88c:	800dcd00 	call	800dcd0 <__sinit>
 800d890:	003fab06 	br	800d740 <__alt_data_end+0xfc00d740>
 800d894:	80800517 	ldw	r2,20(r16)
 800d898:	003fea06 	br	800d844 <__alt_data_end+0xfc00d844>
 800d89c:	81400717 	ldw	r5,28(r16)
 800d8a0:	000d883a 	mov	r6,zero
 800d8a4:	9809883a 	mov	r4,r19
 800d8a8:	01c00044 	movi	r7,1
 800d8ac:	403ee83a 	callr	r8
 800d8b0:	100d883a 	mov	r6,r2
 800d8b4:	00bfffc4 	movi	r2,-1
 800d8b8:	30801326 	beq	r6,r2,800d908 <_fflush_r+0x1f4>
 800d8bc:	8080030b 	ldhu	r2,12(r16)
 800d8c0:	82000a17 	ldw	r8,40(r16)
 800d8c4:	003fb006 	br	800d788 <__alt_data_end+0xfc00d788>
 800d8c8:	80c00f17 	ldw	r3,60(r16)
 800d8cc:	00ffa716 	blt	zero,r3,800d76c <__alt_data_end+0xfc00d76c>
 800d8d0:	003fcc06 	br	800d804 <__alt_data_end+0xfc00d804>
 800d8d4:	98c00017 	ldw	r3,0(r19)
 800d8d8:	183fb926 	beq	r3,zero,800d7c0 <__alt_data_end+0xfc00d7c0>
 800d8dc:	01000744 	movi	r4,29
 800d8e0:	19000226 	beq	r3,r4,800d8ec <_fflush_r+0x1d8>
 800d8e4:	01000584 	movi	r4,22
 800d8e8:	1900101e 	bne	r3,r4,800d92c <_fflush_r+0x218>
 800d8ec:	8080030b 	ldhu	r2,12(r16)
 800d8f0:	80c00417 	ldw	r3,16(r16)
 800d8f4:	80000115 	stw	zero,4(r16)
 800d8f8:	10bdffcc 	andi	r2,r2,63487
 800d8fc:	8080030d 	sth	r2,12(r16)
 800d900:	80c00015 	stw	r3,0(r16)
 800d904:	003fb706 	br	800d7e4 <__alt_data_end+0xfc00d7e4>
 800d908:	98800017 	ldw	r2,0(r19)
 800d90c:	103feb26 	beq	r2,zero,800d8bc <__alt_data_end+0xfc00d8bc>
 800d910:	00c00744 	movi	r3,29
 800d914:	10c00226 	beq	r2,r3,800d920 <_fflush_r+0x20c>
 800d918:	00c00584 	movi	r3,22
 800d91c:	10ffd61e 	bne	r2,r3,800d878 <__alt_data_end+0xfc00d878>
 800d920:	9c400015 	stw	r17,0(r19)
 800d924:	0005883a 	mov	r2,zero
 800d928:	003fb706 	br	800d808 <__alt_data_end+0xfc00d808>
 800d92c:	80c0030b 	ldhu	r3,12(r16)
 800d930:	18c01014 	ori	r3,r3,64
 800d934:	80c0030d 	sth	r3,12(r16)
 800d938:	003fb306 	br	800d808 <__alt_data_end+0xfc00d808>

0800d93c <fflush>:
 800d93c:	20000526 	beq	r4,zero,800d954 <fflush+0x18>
 800d940:	008200b4 	movhi	r2,2050
 800d944:	1094e104 	addi	r2,r2,21380
 800d948:	200b883a 	mov	r5,r4
 800d94c:	11000017 	ldw	r4,0(r2)
 800d950:	800d7141 	jmpi	800d714 <_fflush_r>
 800d954:	008200b4 	movhi	r2,2050
 800d958:	1094e004 	addi	r2,r2,21376
 800d95c:	11000017 	ldw	r4,0(r2)
 800d960:	01420074 	movhi	r5,2049
 800d964:	2975c504 	addi	r5,r5,-10476
 800d968:	800e6901 	jmpi	800e690 <_fwalk_reent>

0800d96c <__fp_lock>:
 800d96c:	0005883a 	mov	r2,zero
 800d970:	f800283a 	ret

0800d974 <__fp_unlock>:
 800d974:	0005883a 	mov	r2,zero
 800d978:	f800283a 	ret

0800d97c <_cleanup_r>:
 800d97c:	01420074 	movhi	r5,2049
 800d980:	294c5604 	addi	r5,r5,12632
 800d984:	800e5d81 	jmpi	800e5d8 <_fwalk>

0800d988 <__sinit.part.1>:
 800d988:	defff604 	addi	sp,sp,-40
 800d98c:	00c20074 	movhi	r3,2049
 800d990:	dfc00915 	stw	ra,36(sp)
 800d994:	df000815 	stw	fp,32(sp)
 800d998:	ddc00715 	stw	r23,28(sp)
 800d99c:	dd800615 	stw	r22,24(sp)
 800d9a0:	dd400515 	stw	r21,20(sp)
 800d9a4:	dd000415 	stw	r20,16(sp)
 800d9a8:	dcc00315 	stw	r19,12(sp)
 800d9ac:	dc800215 	stw	r18,8(sp)
 800d9b0:	dc400115 	stw	r17,4(sp)
 800d9b4:	dc000015 	stw	r16,0(sp)
 800d9b8:	18f65f04 	addi	r3,r3,-9860
 800d9bc:	24000117 	ldw	r16,4(r4)
 800d9c0:	20c00f15 	stw	r3,60(r4)
 800d9c4:	07000044 	movi	fp,1
 800d9c8:	00c000c4 	movi	r3,3
 800d9cc:	2080bb04 	addi	r2,r4,748
 800d9d0:	20c0b915 	stw	r3,740(r4)
 800d9d4:	27000e15 	stw	fp,56(r4)
 800d9d8:	2080ba15 	stw	r2,744(r4)
 800d9dc:	2000b815 	stw	zero,736(r4)
 800d9e0:	05c00204 	movi	r23,8
 800d9e4:	00800104 	movi	r2,4
 800d9e8:	2025883a 	mov	r18,r4
 800d9ec:	b80d883a 	mov	r6,r23
 800d9f0:	81001704 	addi	r4,r16,92
 800d9f4:	000b883a 	mov	r5,zero
 800d9f8:	80000015 	stw	zero,0(r16)
 800d9fc:	80000115 	stw	zero,4(r16)
 800da00:	80000215 	stw	zero,8(r16)
 800da04:	8080030d 	sth	r2,12(r16)
 800da08:	80001915 	stw	zero,100(r16)
 800da0c:	8000038d 	sth	zero,14(r16)
 800da10:	80000415 	stw	zero,16(r16)
 800da14:	80000515 	stw	zero,20(r16)
 800da18:	80000615 	stw	zero,24(r16)
 800da1c:	800ec7c0 	call	800ec7c <memset>
 800da20:	05820074 	movhi	r22,2049
 800da24:	94400217 	ldw	r17,8(r18)
 800da28:	05420074 	movhi	r21,2049
 800da2c:	05020074 	movhi	r20,2049
 800da30:	04c20074 	movhi	r19,2049
 800da34:	b580ff04 	addi	r22,r22,1020
 800da38:	ad411604 	addi	r21,r21,1112
 800da3c:	a5013504 	addi	r20,r20,1236
 800da40:	9cc14c04 	addi	r19,r19,1328
 800da44:	85800815 	stw	r22,32(r16)
 800da48:	85400915 	stw	r21,36(r16)
 800da4c:	85000a15 	stw	r20,40(r16)
 800da50:	84c00b15 	stw	r19,44(r16)
 800da54:	84000715 	stw	r16,28(r16)
 800da58:	00800284 	movi	r2,10
 800da5c:	89001704 	addi	r4,r17,92
 800da60:	b80d883a 	mov	r6,r23
 800da64:	000b883a 	mov	r5,zero
 800da68:	88000015 	stw	zero,0(r17)
 800da6c:	88000115 	stw	zero,4(r17)
 800da70:	88000215 	stw	zero,8(r17)
 800da74:	8880030d 	sth	r2,12(r17)
 800da78:	88001915 	stw	zero,100(r17)
 800da7c:	8f00038d 	sth	fp,14(r17)
 800da80:	88000415 	stw	zero,16(r17)
 800da84:	88000515 	stw	zero,20(r17)
 800da88:	88000615 	stw	zero,24(r17)
 800da8c:	800ec7c0 	call	800ec7c <memset>
 800da90:	94000317 	ldw	r16,12(r18)
 800da94:	00800484 	movi	r2,18
 800da98:	8c400715 	stw	r17,28(r17)
 800da9c:	8d800815 	stw	r22,32(r17)
 800daa0:	8d400915 	stw	r21,36(r17)
 800daa4:	8d000a15 	stw	r20,40(r17)
 800daa8:	8cc00b15 	stw	r19,44(r17)
 800daac:	8080030d 	sth	r2,12(r16)
 800dab0:	00800084 	movi	r2,2
 800dab4:	80000015 	stw	zero,0(r16)
 800dab8:	80000115 	stw	zero,4(r16)
 800dabc:	80000215 	stw	zero,8(r16)
 800dac0:	80001915 	stw	zero,100(r16)
 800dac4:	8080038d 	sth	r2,14(r16)
 800dac8:	80000415 	stw	zero,16(r16)
 800dacc:	80000515 	stw	zero,20(r16)
 800dad0:	80000615 	stw	zero,24(r16)
 800dad4:	81001704 	addi	r4,r16,92
 800dad8:	000b883a 	mov	r5,zero
 800dadc:	b80d883a 	mov	r6,r23
 800dae0:	800ec7c0 	call	800ec7c <memset>
 800dae4:	84000715 	stw	r16,28(r16)
 800dae8:	85800815 	stw	r22,32(r16)
 800daec:	85400915 	stw	r21,36(r16)
 800daf0:	85000a15 	stw	r20,40(r16)
 800daf4:	84c00b15 	stw	r19,44(r16)
 800daf8:	dfc00917 	ldw	ra,36(sp)
 800dafc:	df000817 	ldw	fp,32(sp)
 800db00:	ddc00717 	ldw	r23,28(sp)
 800db04:	dd800617 	ldw	r22,24(sp)
 800db08:	dd400517 	ldw	r21,20(sp)
 800db0c:	dd000417 	ldw	r20,16(sp)
 800db10:	dcc00317 	ldw	r19,12(sp)
 800db14:	dc800217 	ldw	r18,8(sp)
 800db18:	dc400117 	ldw	r17,4(sp)
 800db1c:	dc000017 	ldw	r16,0(sp)
 800db20:	dec00a04 	addi	sp,sp,40
 800db24:	f800283a 	ret

0800db28 <__sfmoreglue>:
 800db28:	defffc04 	addi	sp,sp,-16
 800db2c:	dc800215 	stw	r18,8(sp)
 800db30:	2825883a 	mov	r18,r5
 800db34:	dc000015 	stw	r16,0(sp)
 800db38:	01401a04 	movi	r5,104
 800db3c:	2021883a 	mov	r16,r4
 800db40:	9009883a 	mov	r4,r18
 800db44:	dfc00315 	stw	ra,12(sp)
 800db48:	dc400115 	stw	r17,4(sp)
 800db4c:	8004c100 	call	8004c10 <__mulsi3>
 800db50:	8009883a 	mov	r4,r16
 800db54:	11400304 	addi	r5,r2,12
 800db58:	1023883a 	mov	r17,r2
 800db5c:	80069900 	call	8006990 <_malloc_r>
 800db60:	1021883a 	mov	r16,r2
 800db64:	10000726 	beq	r2,zero,800db84 <__sfmoreglue+0x5c>
 800db68:	11000304 	addi	r4,r2,12
 800db6c:	10000015 	stw	zero,0(r2)
 800db70:	14800115 	stw	r18,4(r2)
 800db74:	11000215 	stw	r4,8(r2)
 800db78:	000b883a 	mov	r5,zero
 800db7c:	880d883a 	mov	r6,r17
 800db80:	800ec7c0 	call	800ec7c <memset>
 800db84:	8005883a 	mov	r2,r16
 800db88:	dfc00317 	ldw	ra,12(sp)
 800db8c:	dc800217 	ldw	r18,8(sp)
 800db90:	dc400117 	ldw	r17,4(sp)
 800db94:	dc000017 	ldw	r16,0(sp)
 800db98:	dec00404 	addi	sp,sp,16
 800db9c:	f800283a 	ret

0800dba0 <__sfp>:
 800dba0:	008200b4 	movhi	r2,2050
 800dba4:	defffb04 	addi	sp,sp,-20
 800dba8:	1094e004 	addi	r2,r2,21376
 800dbac:	dc800215 	stw	r18,8(sp)
 800dbb0:	14800017 	ldw	r18,0(r2)
 800dbb4:	dcc00315 	stw	r19,12(sp)
 800dbb8:	dfc00415 	stw	ra,16(sp)
 800dbbc:	90800e17 	ldw	r2,56(r18)
 800dbc0:	dc400115 	stw	r17,4(sp)
 800dbc4:	dc000015 	stw	r16,0(sp)
 800dbc8:	2027883a 	mov	r19,r4
 800dbcc:	1000021e 	bne	r2,zero,800dbd8 <__sfp+0x38>
 800dbd0:	9009883a 	mov	r4,r18
 800dbd4:	800d9880 	call	800d988 <__sinit.part.1>
 800dbd8:	9480b804 	addi	r18,r18,736
 800dbdc:	047fffc4 	movi	r17,-1
 800dbe0:	91400117 	ldw	r5,4(r18)
 800dbe4:	94000217 	ldw	r16,8(r18)
 800dbe8:	297fffc4 	addi	r5,r5,-1
 800dbec:	28000a16 	blt	r5,zero,800dc18 <__sfp+0x78>
 800dbf0:	8080030f 	ldh	r2,12(r16)
 800dbf4:	10000c26 	beq	r2,zero,800dc28 <__sfp+0x88>
 800dbf8:	80c01d04 	addi	r3,r16,116
 800dbfc:	00000206 	br	800dc08 <__sfp+0x68>
 800dc00:	18bfe60f 	ldh	r2,-104(r3)
 800dc04:	10000826 	beq	r2,zero,800dc28 <__sfp+0x88>
 800dc08:	297fffc4 	addi	r5,r5,-1
 800dc0c:	1c3ffd04 	addi	r16,r3,-12
 800dc10:	18c01a04 	addi	r3,r3,104
 800dc14:	2c7ffa1e 	bne	r5,r17,800dc00 <__alt_data_end+0xfc00dc00>
 800dc18:	90800017 	ldw	r2,0(r18)
 800dc1c:	10001d26 	beq	r2,zero,800dc94 <__sfp+0xf4>
 800dc20:	1025883a 	mov	r18,r2
 800dc24:	003fee06 	br	800dbe0 <__alt_data_end+0xfc00dbe0>
 800dc28:	00bfffc4 	movi	r2,-1
 800dc2c:	8080038d 	sth	r2,14(r16)
 800dc30:	00800044 	movi	r2,1
 800dc34:	8080030d 	sth	r2,12(r16)
 800dc38:	80001915 	stw	zero,100(r16)
 800dc3c:	80000015 	stw	zero,0(r16)
 800dc40:	80000215 	stw	zero,8(r16)
 800dc44:	80000115 	stw	zero,4(r16)
 800dc48:	80000415 	stw	zero,16(r16)
 800dc4c:	80000515 	stw	zero,20(r16)
 800dc50:	80000615 	stw	zero,24(r16)
 800dc54:	81001704 	addi	r4,r16,92
 800dc58:	000b883a 	mov	r5,zero
 800dc5c:	01800204 	movi	r6,8
 800dc60:	800ec7c0 	call	800ec7c <memset>
 800dc64:	8005883a 	mov	r2,r16
 800dc68:	80000c15 	stw	zero,48(r16)
 800dc6c:	80000d15 	stw	zero,52(r16)
 800dc70:	80001115 	stw	zero,68(r16)
 800dc74:	80001215 	stw	zero,72(r16)
 800dc78:	dfc00417 	ldw	ra,16(sp)
 800dc7c:	dcc00317 	ldw	r19,12(sp)
 800dc80:	dc800217 	ldw	r18,8(sp)
 800dc84:	dc400117 	ldw	r17,4(sp)
 800dc88:	dc000017 	ldw	r16,0(sp)
 800dc8c:	dec00504 	addi	sp,sp,20
 800dc90:	f800283a 	ret
 800dc94:	9809883a 	mov	r4,r19
 800dc98:	01400104 	movi	r5,4
 800dc9c:	800db280 	call	800db28 <__sfmoreglue>
 800dca0:	90800015 	stw	r2,0(r18)
 800dca4:	103fde1e 	bne	r2,zero,800dc20 <__alt_data_end+0xfc00dc20>
 800dca8:	00800304 	movi	r2,12
 800dcac:	98800015 	stw	r2,0(r19)
 800dcb0:	0005883a 	mov	r2,zero
 800dcb4:	003ff006 	br	800dc78 <__alt_data_end+0xfc00dc78>

0800dcb8 <_cleanup>:
 800dcb8:	008200b4 	movhi	r2,2050
 800dcbc:	1094e004 	addi	r2,r2,21376
 800dcc0:	11000017 	ldw	r4,0(r2)
 800dcc4:	01420074 	movhi	r5,2049
 800dcc8:	294c5604 	addi	r5,r5,12632
 800dccc:	800e5d81 	jmpi	800e5d8 <_fwalk>

0800dcd0 <__sinit>:
 800dcd0:	20800e17 	ldw	r2,56(r4)
 800dcd4:	10000126 	beq	r2,zero,800dcdc <__sinit+0xc>
 800dcd8:	f800283a 	ret
 800dcdc:	800d9881 	jmpi	800d988 <__sinit.part.1>

0800dce0 <__sfp_lock_acquire>:
 800dce0:	f800283a 	ret

0800dce4 <__sfp_lock_release>:
 800dce4:	f800283a 	ret

0800dce8 <__sinit_lock_acquire>:
 800dce8:	f800283a 	ret

0800dcec <__sinit_lock_release>:
 800dcec:	f800283a 	ret

0800dcf0 <__fp_lock_all>:
 800dcf0:	008200b4 	movhi	r2,2050
 800dcf4:	1094e104 	addi	r2,r2,21380
 800dcf8:	11000017 	ldw	r4,0(r2)
 800dcfc:	01420074 	movhi	r5,2049
 800dd00:	29765b04 	addi	r5,r5,-9876
 800dd04:	800e5d81 	jmpi	800e5d8 <_fwalk>

0800dd08 <__fp_unlock_all>:
 800dd08:	008200b4 	movhi	r2,2050
 800dd0c:	1094e104 	addi	r2,r2,21380
 800dd10:	11000017 	ldw	r4,0(r2)
 800dd14:	01420074 	movhi	r5,2049
 800dd18:	29765d04 	addi	r5,r5,-9868
 800dd1c:	800e5d81 	jmpi	800e5d8 <_fwalk>

0800dd20 <_malloc_trim_r>:
 800dd20:	defffb04 	addi	sp,sp,-20
 800dd24:	dcc00315 	stw	r19,12(sp)
 800dd28:	04c200b4 	movhi	r19,2050
 800dd2c:	dc800215 	stw	r18,8(sp)
 800dd30:	dc400115 	stw	r17,4(sp)
 800dd34:	dc000015 	stw	r16,0(sp)
 800dd38:	dfc00415 	stw	ra,16(sp)
 800dd3c:	2821883a 	mov	r16,r5
 800dd40:	9cce2704 	addi	r19,r19,14492
 800dd44:	2025883a 	mov	r18,r4
 800dd48:	80161280 	call	8016128 <__malloc_lock>
 800dd4c:	98800217 	ldw	r2,8(r19)
 800dd50:	14400117 	ldw	r17,4(r2)
 800dd54:	00bfff04 	movi	r2,-4
 800dd58:	88a2703a 	and	r17,r17,r2
 800dd5c:	8c21c83a 	sub	r16,r17,r16
 800dd60:	8403fbc4 	addi	r16,r16,4079
 800dd64:	8020d33a 	srli	r16,r16,12
 800dd68:	0083ffc4 	movi	r2,4095
 800dd6c:	843fffc4 	addi	r16,r16,-1
 800dd70:	8020933a 	slli	r16,r16,12
 800dd74:	1400060e 	bge	r2,r16,800dd90 <_malloc_trim_r+0x70>
 800dd78:	9009883a 	mov	r4,r18
 800dd7c:	000b883a 	mov	r5,zero
 800dd80:	80074200 	call	8007420 <_sbrk_r>
 800dd84:	98c00217 	ldw	r3,8(r19)
 800dd88:	1c47883a 	add	r3,r3,r17
 800dd8c:	10c00a26 	beq	r2,r3,800ddb8 <_malloc_trim_r+0x98>
 800dd90:	9009883a 	mov	r4,r18
 800dd94:	80161480 	call	8016148 <__malloc_unlock>
 800dd98:	0005883a 	mov	r2,zero
 800dd9c:	dfc00417 	ldw	ra,16(sp)
 800dda0:	dcc00317 	ldw	r19,12(sp)
 800dda4:	dc800217 	ldw	r18,8(sp)
 800dda8:	dc400117 	ldw	r17,4(sp)
 800ddac:	dc000017 	ldw	r16,0(sp)
 800ddb0:	dec00504 	addi	sp,sp,20
 800ddb4:	f800283a 	ret
 800ddb8:	9009883a 	mov	r4,r18
 800ddbc:	040bc83a 	sub	r5,zero,r16
 800ddc0:	80074200 	call	8007420 <_sbrk_r>
 800ddc4:	00ffffc4 	movi	r3,-1
 800ddc8:	10c00d26 	beq	r2,r3,800de00 <_malloc_trim_r+0xe0>
 800ddcc:	00c200b4 	movhi	r3,2050
 800ddd0:	18dbcb04 	addi	r3,r3,28460
 800ddd4:	18800017 	ldw	r2,0(r3)
 800ddd8:	99000217 	ldw	r4,8(r19)
 800dddc:	8c23c83a 	sub	r17,r17,r16
 800dde0:	8c400054 	ori	r17,r17,1
 800dde4:	1421c83a 	sub	r16,r2,r16
 800dde8:	24400115 	stw	r17,4(r4)
 800ddec:	9009883a 	mov	r4,r18
 800ddf0:	1c000015 	stw	r16,0(r3)
 800ddf4:	80161480 	call	8016148 <__malloc_unlock>
 800ddf8:	00800044 	movi	r2,1
 800ddfc:	003fe706 	br	800dd9c <__alt_data_end+0xfc00dd9c>
 800de00:	9009883a 	mov	r4,r18
 800de04:	000b883a 	mov	r5,zero
 800de08:	80074200 	call	8007420 <_sbrk_r>
 800de0c:	99000217 	ldw	r4,8(r19)
 800de10:	014003c4 	movi	r5,15
 800de14:	1107c83a 	sub	r3,r2,r4
 800de18:	28ffdd0e 	bge	r5,r3,800dd90 <__alt_data_end+0xfc00dd90>
 800de1c:	014200b4 	movhi	r5,2050
 800de20:	2954de04 	addi	r5,r5,21368
 800de24:	29400017 	ldw	r5,0(r5)
 800de28:	18c00054 	ori	r3,r3,1
 800de2c:	20c00115 	stw	r3,4(r4)
 800de30:	00c200b4 	movhi	r3,2050
 800de34:	1145c83a 	sub	r2,r2,r5
 800de38:	18dbcb04 	addi	r3,r3,28460
 800de3c:	18800015 	stw	r2,0(r3)
 800de40:	003fd306 	br	800dd90 <__alt_data_end+0xfc00dd90>

0800de44 <_free_r>:
 800de44:	28004c26 	beq	r5,zero,800df78 <_free_r+0x134>
 800de48:	defffd04 	addi	sp,sp,-12
 800de4c:	dc400115 	stw	r17,4(sp)
 800de50:	dc000015 	stw	r16,0(sp)
 800de54:	2023883a 	mov	r17,r4
 800de58:	2821883a 	mov	r16,r5
 800de5c:	dfc00215 	stw	ra,8(sp)
 800de60:	80161280 	call	8016128 <__malloc_lock>
 800de64:	813fff17 	ldw	r4,-4(r16)
 800de68:	00bfff84 	movi	r2,-2
 800de6c:	024200b4 	movhi	r9,2050
 800de70:	81bffe04 	addi	r6,r16,-8
 800de74:	2084703a 	and	r2,r4,r2
 800de78:	4a4e2704 	addi	r9,r9,14492
 800de7c:	308b883a 	add	r5,r6,r2
 800de80:	2a000117 	ldw	r8,4(r5)
 800de84:	49c00217 	ldw	r7,8(r9)
 800de88:	00ffff04 	movi	r3,-4
 800de8c:	40c6703a 	and	r3,r8,r3
 800de90:	39405326 	beq	r7,r5,800dfe0 <_free_r+0x19c>
 800de94:	28c00115 	stw	r3,4(r5)
 800de98:	2100004c 	andi	r4,r4,1
 800de9c:	2000091e 	bne	r4,zero,800dec4 <_free_r+0x80>
 800dea0:	81fffe17 	ldw	r7,-8(r16)
 800dea4:	4a000204 	addi	r8,r9,8
 800dea8:	31cdc83a 	sub	r6,r6,r7
 800deac:	31000217 	ldw	r4,8(r6)
 800deb0:	11c5883a 	add	r2,r2,r7
 800deb4:	22006126 	beq	r4,r8,800e03c <_free_r+0x1f8>
 800deb8:	31c00317 	ldw	r7,12(r6)
 800debc:	21c00315 	stw	r7,12(r4)
 800dec0:	39000215 	stw	r4,8(r7)
 800dec4:	28c9883a 	add	r4,r5,r3
 800dec8:	21c00117 	ldw	r7,4(r4)
 800decc:	39c0004c 	andi	r7,r7,1
 800ded0:	38000d1e 	bne	r7,zero,800df08 <_free_r+0xc4>
 800ded4:	29000217 	ldw	r4,8(r5)
 800ded8:	10c5883a 	add	r2,r2,r3
 800dedc:	00c200b4 	movhi	r3,2050
 800dee0:	18ce2904 	addi	r3,r3,14500
 800dee4:	20c07526 	beq	r4,r3,800e0bc <_free_r+0x278>
 800dee8:	29c00317 	ldw	r7,12(r5)
 800deec:	11400054 	ori	r5,r2,1
 800def0:	3087883a 	add	r3,r6,r2
 800def4:	21c00315 	stw	r7,12(r4)
 800def8:	39000215 	stw	r4,8(r7)
 800defc:	31400115 	stw	r5,4(r6)
 800df00:	18800015 	stw	r2,0(r3)
 800df04:	00000406 	br	800df18 <_free_r+0xd4>
 800df08:	10c00054 	ori	r3,r2,1
 800df0c:	30c00115 	stw	r3,4(r6)
 800df10:	3087883a 	add	r3,r6,r2
 800df14:	18800015 	stw	r2,0(r3)
 800df18:	00c07fc4 	movi	r3,511
 800df1c:	18801736 	bltu	r3,r2,800df7c <_free_r+0x138>
 800df20:	1004d0fa 	srli	r2,r2,3
 800df24:	01400044 	movi	r5,1
 800df28:	49000117 	ldw	r4,4(r9)
 800df2c:	1087883a 	add	r3,r2,r2
 800df30:	18c7883a 	add	r3,r3,r3
 800df34:	1005d0ba 	srai	r2,r2,2
 800df38:	18c7883a 	add	r3,r3,r3
 800df3c:	1a47883a 	add	r3,r3,r9
 800df40:	19c00217 	ldw	r7,8(r3)
 800df44:	2884983a 	sll	r2,r5,r2
 800df48:	30c00315 	stw	r3,12(r6)
 800df4c:	31c00215 	stw	r7,8(r6)
 800df50:	1104b03a 	or	r2,r2,r4
 800df54:	19800215 	stw	r6,8(r3)
 800df58:	48800115 	stw	r2,4(r9)
 800df5c:	39800315 	stw	r6,12(r7)
 800df60:	8809883a 	mov	r4,r17
 800df64:	dfc00217 	ldw	ra,8(sp)
 800df68:	dc400117 	ldw	r17,4(sp)
 800df6c:	dc000017 	ldw	r16,0(sp)
 800df70:	dec00304 	addi	sp,sp,12
 800df74:	80161481 	jmpi	8016148 <__malloc_unlock>
 800df78:	f800283a 	ret
 800df7c:	1006d27a 	srli	r3,r2,9
 800df80:	01000104 	movi	r4,4
 800df84:	20c04036 	bltu	r4,r3,800e088 <_free_r+0x244>
 800df88:	1006d1ba 	srli	r3,r2,6
 800df8c:	19400e04 	addi	r5,r3,56
 800df90:	2947883a 	add	r3,r5,r5
 800df94:	18c7883a 	add	r3,r3,r3
 800df98:	18c7883a 	add	r3,r3,r3
 800df9c:	1a49883a 	add	r4,r3,r9
 800dfa0:	20c00217 	ldw	r3,8(r4)
 800dfa4:	01c200b4 	movhi	r7,2050
 800dfa8:	39ce2704 	addi	r7,r7,14492
 800dfac:	19003b26 	beq	r3,r4,800e09c <_free_r+0x258>
 800dfb0:	01ffff04 	movi	r7,-4
 800dfb4:	19400117 	ldw	r5,4(r3)
 800dfb8:	29ca703a 	and	r5,r5,r7
 800dfbc:	1140022e 	bgeu	r2,r5,800dfc8 <_free_r+0x184>
 800dfc0:	18c00217 	ldw	r3,8(r3)
 800dfc4:	20fffb1e 	bne	r4,r3,800dfb4 <__alt_data_end+0xfc00dfb4>
 800dfc8:	18800317 	ldw	r2,12(r3)
 800dfcc:	30800315 	stw	r2,12(r6)
 800dfd0:	30c00215 	stw	r3,8(r6)
 800dfd4:	11800215 	stw	r6,8(r2)
 800dfd8:	19800315 	stw	r6,12(r3)
 800dfdc:	003fe006 	br	800df60 <__alt_data_end+0xfc00df60>
 800dfe0:	2100004c 	andi	r4,r4,1
 800dfe4:	1885883a 	add	r2,r3,r2
 800dfe8:	2000071e 	bne	r4,zero,800e008 <_free_r+0x1c4>
 800dfec:	817ffe17 	ldw	r5,-8(r16)
 800dff0:	314dc83a 	sub	r6,r6,r5
 800dff4:	30c00317 	ldw	r3,12(r6)
 800dff8:	31000217 	ldw	r4,8(r6)
 800dffc:	1145883a 	add	r2,r2,r5
 800e000:	20c00315 	stw	r3,12(r4)
 800e004:	19000215 	stw	r4,8(r3)
 800e008:	10c00054 	ori	r3,r2,1
 800e00c:	30c00115 	stw	r3,4(r6)
 800e010:	00c200b4 	movhi	r3,2050
 800e014:	18d4df04 	addi	r3,r3,21372
 800e018:	18c00017 	ldw	r3,0(r3)
 800e01c:	49800215 	stw	r6,8(r9)
 800e020:	10ffcf36 	bltu	r2,r3,800df60 <__alt_data_end+0xfc00df60>
 800e024:	008200b4 	movhi	r2,2050
 800e028:	109bbc04 	addi	r2,r2,28400
 800e02c:	11400017 	ldw	r5,0(r2)
 800e030:	8809883a 	mov	r4,r17
 800e034:	800dd200 	call	800dd20 <_malloc_trim_r>
 800e038:	003fc906 	br	800df60 <__alt_data_end+0xfc00df60>
 800e03c:	28c9883a 	add	r4,r5,r3
 800e040:	21000117 	ldw	r4,4(r4)
 800e044:	2100004c 	andi	r4,r4,1
 800e048:	20000a1e 	bne	r4,zero,800e074 <_free_r+0x230>
 800e04c:	29000317 	ldw	r4,12(r5)
 800e050:	29400217 	ldw	r5,8(r5)
 800e054:	10c5883a 	add	r2,r2,r3
 800e058:	10c00054 	ori	r3,r2,1
 800e05c:	29000315 	stw	r4,12(r5)
 800e060:	21400215 	stw	r5,8(r4)
 800e064:	30c00115 	stw	r3,4(r6)
 800e068:	308d883a 	add	r6,r6,r2
 800e06c:	30800015 	stw	r2,0(r6)
 800e070:	003fbb06 	br	800df60 <__alt_data_end+0xfc00df60>
 800e074:	10c00054 	ori	r3,r2,1
 800e078:	30c00115 	stw	r3,4(r6)
 800e07c:	308d883a 	add	r6,r6,r2
 800e080:	30800015 	stw	r2,0(r6)
 800e084:	003fb606 	br	800df60 <__alt_data_end+0xfc00df60>
 800e088:	01000504 	movi	r4,20
 800e08c:	20c01436 	bltu	r4,r3,800e0e0 <_free_r+0x29c>
 800e090:	194016c4 	addi	r5,r3,91
 800e094:	2947883a 	add	r3,r5,r5
 800e098:	003fbe06 	br	800df94 <__alt_data_end+0xfc00df94>
 800e09c:	280bd0ba 	srai	r5,r5,2
 800e0a0:	00800044 	movi	r2,1
 800e0a4:	39000117 	ldw	r4,4(r7)
 800e0a8:	114a983a 	sll	r5,r2,r5
 800e0ac:	1805883a 	mov	r2,r3
 800e0b0:	2908b03a 	or	r4,r5,r4
 800e0b4:	39000115 	stw	r4,4(r7)
 800e0b8:	003fc406 	br	800dfcc <__alt_data_end+0xfc00dfcc>
 800e0bc:	49800515 	stw	r6,20(r9)
 800e0c0:	49800415 	stw	r6,16(r9)
 800e0c4:	10c00054 	ori	r3,r2,1
 800e0c8:	31000315 	stw	r4,12(r6)
 800e0cc:	31000215 	stw	r4,8(r6)
 800e0d0:	30c00115 	stw	r3,4(r6)
 800e0d4:	308d883a 	add	r6,r6,r2
 800e0d8:	30800015 	stw	r2,0(r6)
 800e0dc:	003fa006 	br	800df60 <__alt_data_end+0xfc00df60>
 800e0e0:	01001504 	movi	r4,84
 800e0e4:	20c00436 	bltu	r4,r3,800e0f8 <_free_r+0x2b4>
 800e0e8:	1006d33a 	srli	r3,r2,12
 800e0ec:	19401b84 	addi	r5,r3,110
 800e0f0:	2947883a 	add	r3,r5,r5
 800e0f4:	003fa706 	br	800df94 <__alt_data_end+0xfc00df94>
 800e0f8:	01005504 	movi	r4,340
 800e0fc:	20c00436 	bltu	r4,r3,800e110 <_free_r+0x2cc>
 800e100:	1006d3fa 	srli	r3,r2,15
 800e104:	19401dc4 	addi	r5,r3,119
 800e108:	2947883a 	add	r3,r5,r5
 800e10c:	003fa106 	br	800df94 <__alt_data_end+0xfc00df94>
 800e110:	01015504 	movi	r4,1364
 800e114:	20c00436 	bltu	r4,r3,800e128 <_free_r+0x2e4>
 800e118:	1006d4ba 	srli	r3,r2,18
 800e11c:	19401f04 	addi	r5,r3,124
 800e120:	2947883a 	add	r3,r5,r5
 800e124:	003f9b06 	br	800df94 <__alt_data_end+0xfc00df94>
 800e128:	00c03f04 	movi	r3,252
 800e12c:	01401f84 	movi	r5,126
 800e130:	003f9806 	br	800df94 <__alt_data_end+0xfc00df94>

0800e134 <__sfvwrite_r>:
 800e134:	30800217 	ldw	r2,8(r6)
 800e138:	10004526 	beq	r2,zero,800e250 <__sfvwrite_r+0x11c>
 800e13c:	28c0030b 	ldhu	r3,12(r5)
 800e140:	defff404 	addi	sp,sp,-48
 800e144:	dd400715 	stw	r21,28(sp)
 800e148:	dcc00515 	stw	r19,20(sp)
 800e14c:	dc000215 	stw	r16,8(sp)
 800e150:	dfc00b15 	stw	ra,44(sp)
 800e154:	df000a15 	stw	fp,40(sp)
 800e158:	ddc00915 	stw	r23,36(sp)
 800e15c:	dd800815 	stw	r22,32(sp)
 800e160:	dd000615 	stw	r20,24(sp)
 800e164:	dc800415 	stw	r18,16(sp)
 800e168:	dc400315 	stw	r17,12(sp)
 800e16c:	1880020c 	andi	r2,r3,8
 800e170:	2821883a 	mov	r16,r5
 800e174:	202b883a 	mov	r21,r4
 800e178:	3027883a 	mov	r19,r6
 800e17c:	10002526 	beq	r2,zero,800e214 <__sfvwrite_r+0xe0>
 800e180:	28800417 	ldw	r2,16(r5)
 800e184:	10002326 	beq	r2,zero,800e214 <__sfvwrite_r+0xe0>
 800e188:	1880008c 	andi	r2,r3,2
 800e18c:	9c400017 	ldw	r17,0(r19)
 800e190:	10003126 	beq	r2,zero,800e258 <__sfvwrite_r+0x124>
 800e194:	0029883a 	mov	r20,zero
 800e198:	0025883a 	mov	r18,zero
 800e19c:	05810004 	movi	r22,1024
 800e1a0:	a00d883a 	mov	r6,r20
 800e1a4:	a809883a 	mov	r4,r21
 800e1a8:	90002526 	beq	r18,zero,800e240 <__sfvwrite_r+0x10c>
 800e1ac:	900f883a 	mov	r7,r18
 800e1b0:	81400717 	ldw	r5,28(r16)
 800e1b4:	b480012e 	bgeu	r22,r18,800e1bc <__sfvwrite_r+0x88>
 800e1b8:	01c10004 	movi	r7,1024
 800e1bc:	80800917 	ldw	r2,36(r16)
 800e1c0:	103ee83a 	callr	r2
 800e1c4:	0080510e 	bge	zero,r2,800e30c <__sfvwrite_r+0x1d8>
 800e1c8:	98c00217 	ldw	r3,8(r19)
 800e1cc:	a0a9883a 	add	r20,r20,r2
 800e1d0:	90a5c83a 	sub	r18,r18,r2
 800e1d4:	1885c83a 	sub	r2,r3,r2
 800e1d8:	98800215 	stw	r2,8(r19)
 800e1dc:	103ff01e 	bne	r2,zero,800e1a0 <__alt_data_end+0xfc00e1a0>
 800e1e0:	0005883a 	mov	r2,zero
 800e1e4:	dfc00b17 	ldw	ra,44(sp)
 800e1e8:	df000a17 	ldw	fp,40(sp)
 800e1ec:	ddc00917 	ldw	r23,36(sp)
 800e1f0:	dd800817 	ldw	r22,32(sp)
 800e1f4:	dd400717 	ldw	r21,28(sp)
 800e1f8:	dd000617 	ldw	r20,24(sp)
 800e1fc:	dcc00517 	ldw	r19,20(sp)
 800e200:	dc800417 	ldw	r18,16(sp)
 800e204:	dc400317 	ldw	r17,12(sp)
 800e208:	dc000217 	ldw	r16,8(sp)
 800e20c:	dec00c04 	addi	sp,sp,48
 800e210:	f800283a 	ret
 800e214:	a809883a 	mov	r4,r21
 800e218:	800b883a 	mov	r5,r16
 800e21c:	800bc940 	call	800bc94 <__swsetup_r>
 800e220:	80c0030b 	ldhu	r3,12(r16)
 800e224:	103fd826 	beq	r2,zero,800e188 <__alt_data_end+0xfc00e188>
 800e228:	18c01014 	ori	r3,r3,64
 800e22c:	80c0030d 	sth	r3,12(r16)
 800e230:	00c00244 	movi	r3,9
 800e234:	00bfffc4 	movi	r2,-1
 800e238:	a8c00015 	stw	r3,0(r21)
 800e23c:	003fe906 	br	800e1e4 <__alt_data_end+0xfc00e1e4>
 800e240:	8d000017 	ldw	r20,0(r17)
 800e244:	8c800117 	ldw	r18,4(r17)
 800e248:	8c400204 	addi	r17,r17,8
 800e24c:	003fd406 	br	800e1a0 <__alt_data_end+0xfc00e1a0>
 800e250:	0005883a 	mov	r2,zero
 800e254:	f800283a 	ret
 800e258:	1880004c 	andi	r2,r3,1
 800e25c:	1000301e 	bne	r2,zero,800e320 <__sfvwrite_r+0x1ec>
 800e260:	002f883a 	mov	r23,zero
 800e264:	0025883a 	mov	r18,zero
 800e268:	90001c26 	beq	r18,zero,800e2dc <__sfvwrite_r+0x1a8>
 800e26c:	1880800c 	andi	r2,r3,512
 800e270:	85000217 	ldw	r20,8(r16)
 800e274:	10006c26 	beq	r2,zero,800e428 <__sfvwrite_r+0x2f4>
 800e278:	a02d883a 	mov	r22,r20
 800e27c:	95008536 	bltu	r18,r20,800e494 <__sfvwrite_r+0x360>
 800e280:	1881200c 	andi	r2,r3,1152
 800e284:	10009d1e 	bne	r2,zero,800e4fc <__sfvwrite_r+0x3c8>
 800e288:	81000017 	ldw	r4,0(r16)
 800e28c:	a039883a 	mov	fp,r20
 800e290:	9029883a 	mov	r20,r18
 800e294:	b80b883a 	mov	r5,r23
 800e298:	b00d883a 	mov	r6,r22
 800e29c:	800eb200 	call	800eb20 <memmove>
 800e2a0:	80c00217 	ldw	r3,8(r16)
 800e2a4:	81000017 	ldw	r4,0(r16)
 800e2a8:	9005883a 	mov	r2,r18
 800e2ac:	1f39c83a 	sub	fp,r3,fp
 800e2b0:	258f883a 	add	r7,r4,r22
 800e2b4:	87000215 	stw	fp,8(r16)
 800e2b8:	81c00015 	stw	r7,0(r16)
 800e2bc:	98c00217 	ldw	r3,8(r19)
 800e2c0:	b8af883a 	add	r23,r23,r2
 800e2c4:	90a5c83a 	sub	r18,r18,r2
 800e2c8:	1d05c83a 	sub	r2,r3,r20
 800e2cc:	98800215 	stw	r2,8(r19)
 800e2d0:	103fc326 	beq	r2,zero,800e1e0 <__alt_data_end+0xfc00e1e0>
 800e2d4:	80c0030b 	ldhu	r3,12(r16)
 800e2d8:	903fe41e 	bne	r18,zero,800e26c <__alt_data_end+0xfc00e26c>
 800e2dc:	8dc00017 	ldw	r23,0(r17)
 800e2e0:	8c800117 	ldw	r18,4(r17)
 800e2e4:	8c400204 	addi	r17,r17,8
 800e2e8:	003fdf06 	br	800e268 <__alt_data_end+0xfc00e268>
 800e2ec:	800fde80 	call	800fde8 <_realloc_r>
 800e2f0:	102d883a 	mov	r22,r2
 800e2f4:	1000a01e 	bne	r2,zero,800e578 <__sfvwrite_r+0x444>
 800e2f8:	81400417 	ldw	r5,16(r16)
 800e2fc:	a809883a 	mov	r4,r21
 800e300:	800de440 	call	800de44 <_free_r>
 800e304:	00800304 	movi	r2,12
 800e308:	a8800015 	stw	r2,0(r21)
 800e30c:	80c0030b 	ldhu	r3,12(r16)
 800e310:	00bfffc4 	movi	r2,-1
 800e314:	18c01014 	ori	r3,r3,64
 800e318:	80c0030d 	sth	r3,12(r16)
 800e31c:	003fb106 	br	800e1e4 <__alt_data_end+0xfc00e1e4>
 800e320:	0029883a 	mov	r20,zero
 800e324:	0011883a 	mov	r8,zero
 800e328:	0039883a 	mov	fp,zero
 800e32c:	0025883a 	mov	r18,zero
 800e330:	90001f26 	beq	r18,zero,800e3b0 <__sfvwrite_r+0x27c>
 800e334:	40006826 	beq	r8,zero,800e4d8 <__sfvwrite_r+0x3a4>
 800e338:	a02f883a 	mov	r23,r20
 800e33c:	9500012e 	bgeu	r18,r20,800e344 <__sfvwrite_r+0x210>
 800e340:	902f883a 	mov	r23,r18
 800e344:	81000017 	ldw	r4,0(r16)
 800e348:	80800417 	ldw	r2,16(r16)
 800e34c:	b82d883a 	mov	r22,r23
 800e350:	81800217 	ldw	r6,8(r16)
 800e354:	81c00517 	ldw	r7,20(r16)
 800e358:	1100022e 	bgeu	r2,r4,800e364 <__sfvwrite_r+0x230>
 800e35c:	31c7883a 	add	r3,r6,r7
 800e360:	1dc01816 	blt	r3,r23,800e3c4 <__sfvwrite_r+0x290>
 800e364:	b9c03f16 	blt	r23,r7,800e464 <__sfvwrite_r+0x330>
 800e368:	80800917 	ldw	r2,36(r16)
 800e36c:	81400717 	ldw	r5,28(r16)
 800e370:	a809883a 	mov	r4,r21
 800e374:	da000115 	stw	r8,4(sp)
 800e378:	e00d883a 	mov	r6,fp
 800e37c:	103ee83a 	callr	r2
 800e380:	102d883a 	mov	r22,r2
 800e384:	da000117 	ldw	r8,4(sp)
 800e388:	00bfe00e 	bge	zero,r2,800e30c <__alt_data_end+0xfc00e30c>
 800e38c:	a5a9c83a 	sub	r20,r20,r22
 800e390:	a0001f26 	beq	r20,zero,800e410 <__sfvwrite_r+0x2dc>
 800e394:	98800217 	ldw	r2,8(r19)
 800e398:	e5b9883a 	add	fp,fp,r22
 800e39c:	95a5c83a 	sub	r18,r18,r22
 800e3a0:	15adc83a 	sub	r22,r2,r22
 800e3a4:	9d800215 	stw	r22,8(r19)
 800e3a8:	b03f8d26 	beq	r22,zero,800e1e0 <__alt_data_end+0xfc00e1e0>
 800e3ac:	903fe11e 	bne	r18,zero,800e334 <__alt_data_end+0xfc00e334>
 800e3b0:	8f000017 	ldw	fp,0(r17)
 800e3b4:	8c800117 	ldw	r18,4(r17)
 800e3b8:	0011883a 	mov	r8,zero
 800e3bc:	8c400204 	addi	r17,r17,8
 800e3c0:	003fdb06 	br	800e330 <__alt_data_end+0xfc00e330>
 800e3c4:	180d883a 	mov	r6,r3
 800e3c8:	e00b883a 	mov	r5,fp
 800e3cc:	da000115 	stw	r8,4(sp)
 800e3d0:	d8c00015 	stw	r3,0(sp)
 800e3d4:	800eb200 	call	800eb20 <memmove>
 800e3d8:	d8c00017 	ldw	r3,0(sp)
 800e3dc:	80800017 	ldw	r2,0(r16)
 800e3e0:	a809883a 	mov	r4,r21
 800e3e4:	800b883a 	mov	r5,r16
 800e3e8:	10c5883a 	add	r2,r2,r3
 800e3ec:	80800015 	stw	r2,0(r16)
 800e3f0:	d8c00015 	stw	r3,0(sp)
 800e3f4:	800d7140 	call	800d714 <_fflush_r>
 800e3f8:	d8c00017 	ldw	r3,0(sp)
 800e3fc:	da000117 	ldw	r8,4(sp)
 800e400:	103fc21e 	bne	r2,zero,800e30c <__alt_data_end+0xfc00e30c>
 800e404:	182d883a 	mov	r22,r3
 800e408:	a5a9c83a 	sub	r20,r20,r22
 800e40c:	a03fe11e 	bne	r20,zero,800e394 <__alt_data_end+0xfc00e394>
 800e410:	a809883a 	mov	r4,r21
 800e414:	800b883a 	mov	r5,r16
 800e418:	800d7140 	call	800d714 <_fflush_r>
 800e41c:	103fbb1e 	bne	r2,zero,800e30c <__alt_data_end+0xfc00e30c>
 800e420:	0011883a 	mov	r8,zero
 800e424:	003fdb06 	br	800e394 <__alt_data_end+0xfc00e394>
 800e428:	81000017 	ldw	r4,0(r16)
 800e42c:	80800417 	ldw	r2,16(r16)
 800e430:	1100012e 	bgeu	r2,r4,800e438 <__sfvwrite_r+0x304>
 800e434:	a4805a36 	bltu	r20,r18,800e5a0 <__sfvwrite_r+0x46c>
 800e438:	81c00517 	ldw	r7,20(r16)
 800e43c:	91c01a36 	bltu	r18,r7,800e4a8 <__sfvwrite_r+0x374>
 800e440:	80800917 	ldw	r2,36(r16)
 800e444:	81400717 	ldw	r5,28(r16)
 800e448:	a809883a 	mov	r4,r21
 800e44c:	b80d883a 	mov	r6,r23
 800e450:	103ee83a 	callr	r2
 800e454:	1029883a 	mov	r20,r2
 800e458:	00bfac0e 	bge	zero,r2,800e30c <__alt_data_end+0xfc00e30c>
 800e45c:	a005883a 	mov	r2,r20
 800e460:	003f9606 	br	800e2bc <__alt_data_end+0xfc00e2bc>
 800e464:	b80d883a 	mov	r6,r23
 800e468:	e00b883a 	mov	r5,fp
 800e46c:	da000115 	stw	r8,4(sp)
 800e470:	800eb200 	call	800eb20 <memmove>
 800e474:	80800217 	ldw	r2,8(r16)
 800e478:	80c00017 	ldw	r3,0(r16)
 800e47c:	da000117 	ldw	r8,4(sp)
 800e480:	15c5c83a 	sub	r2,r2,r23
 800e484:	1def883a 	add	r23,r3,r23
 800e488:	80800215 	stw	r2,8(r16)
 800e48c:	85c00015 	stw	r23,0(r16)
 800e490:	003fbe06 	br	800e38c <__alt_data_end+0xfc00e38c>
 800e494:	81000017 	ldw	r4,0(r16)
 800e498:	9039883a 	mov	fp,r18
 800e49c:	9029883a 	mov	r20,r18
 800e4a0:	902d883a 	mov	r22,r18
 800e4a4:	003f7b06 	br	800e294 <__alt_data_end+0xfc00e294>
 800e4a8:	b80b883a 	mov	r5,r23
 800e4ac:	900d883a 	mov	r6,r18
 800e4b0:	800eb200 	call	800eb20 <memmove>
 800e4b4:	80c00217 	ldw	r3,8(r16)
 800e4b8:	80800017 	ldw	r2,0(r16)
 800e4bc:	9029883a 	mov	r20,r18
 800e4c0:	1c87c83a 	sub	r3,r3,r18
 800e4c4:	1485883a 	add	r2,r2,r18
 800e4c8:	80800015 	stw	r2,0(r16)
 800e4cc:	80c00215 	stw	r3,8(r16)
 800e4d0:	9005883a 	mov	r2,r18
 800e4d4:	003f7906 	br	800e2bc <__alt_data_end+0xfc00e2bc>
 800e4d8:	e009883a 	mov	r4,fp
 800e4dc:	01400284 	movi	r5,10
 800e4e0:	900d883a 	mov	r6,r18
 800e4e4:	800ea380 	call	800ea38 <memchr>
 800e4e8:	10003826 	beq	r2,zero,800e5cc <__sfvwrite_r+0x498>
 800e4ec:	10800044 	addi	r2,r2,1
 800e4f0:	1729c83a 	sub	r20,r2,fp
 800e4f4:	02000044 	movi	r8,1
 800e4f8:	003f8f06 	br	800e338 <__alt_data_end+0xfc00e338>
 800e4fc:	80800517 	ldw	r2,20(r16)
 800e500:	81400417 	ldw	r5,16(r16)
 800e504:	87000017 	ldw	fp,0(r16)
 800e508:	10a9883a 	add	r20,r2,r2
 800e50c:	a085883a 	add	r2,r20,r2
 800e510:	1028d7fa 	srli	r20,r2,31
 800e514:	e179c83a 	sub	fp,fp,r5
 800e518:	e1000044 	addi	r4,fp,1
 800e51c:	a085883a 	add	r2,r20,r2
 800e520:	1029d07a 	srai	r20,r2,1
 800e524:	2485883a 	add	r2,r4,r18
 800e528:	a00d883a 	mov	r6,r20
 800e52c:	a080022e 	bgeu	r20,r2,800e538 <__sfvwrite_r+0x404>
 800e530:	1029883a 	mov	r20,r2
 800e534:	100d883a 	mov	r6,r2
 800e538:	18c1000c 	andi	r3,r3,1024
 800e53c:	a809883a 	mov	r4,r21
 800e540:	183f6a26 	beq	r3,zero,800e2ec <__alt_data_end+0xfc00e2ec>
 800e544:	300b883a 	mov	r5,r6
 800e548:	80069900 	call	8006990 <_malloc_r>
 800e54c:	102d883a 	mov	r22,r2
 800e550:	103f6c26 	beq	r2,zero,800e304 <__alt_data_end+0xfc00e304>
 800e554:	81400417 	ldw	r5,16(r16)
 800e558:	1009883a 	mov	r4,r2
 800e55c:	e00d883a 	mov	r6,fp
 800e560:	80071380 	call	8007138 <memcpy>
 800e564:	8080030b 	ldhu	r2,12(r16)
 800e568:	00fedfc4 	movi	r3,-1153
 800e56c:	10c4703a 	and	r2,r2,r3
 800e570:	10802014 	ori	r2,r2,128
 800e574:	8080030d 	sth	r2,12(r16)
 800e578:	b709883a 	add	r4,r22,fp
 800e57c:	a707c83a 	sub	r3,r20,fp
 800e580:	85800415 	stw	r22,16(r16)
 800e584:	85000515 	stw	r20,20(r16)
 800e588:	81000015 	stw	r4,0(r16)
 800e58c:	9039883a 	mov	fp,r18
 800e590:	80c00215 	stw	r3,8(r16)
 800e594:	9029883a 	mov	r20,r18
 800e598:	902d883a 	mov	r22,r18
 800e59c:	003f3d06 	br	800e294 <__alt_data_end+0xfc00e294>
 800e5a0:	b80b883a 	mov	r5,r23
 800e5a4:	a00d883a 	mov	r6,r20
 800e5a8:	800eb200 	call	800eb20 <memmove>
 800e5ac:	80800017 	ldw	r2,0(r16)
 800e5b0:	a809883a 	mov	r4,r21
 800e5b4:	800b883a 	mov	r5,r16
 800e5b8:	1505883a 	add	r2,r2,r20
 800e5bc:	80800015 	stw	r2,0(r16)
 800e5c0:	800d7140 	call	800d714 <_fflush_r>
 800e5c4:	103fa526 	beq	r2,zero,800e45c <__alt_data_end+0xfc00e45c>
 800e5c8:	003f5006 	br	800e30c <__alt_data_end+0xfc00e30c>
 800e5cc:	95000044 	addi	r20,r18,1
 800e5d0:	02000044 	movi	r8,1
 800e5d4:	003f5806 	br	800e338 <__alt_data_end+0xfc00e338>

0800e5d8 <_fwalk>:
 800e5d8:	defff804 	addi	sp,sp,-32
 800e5dc:	dd400515 	stw	r21,20(sp)
 800e5e0:	2540b804 	addi	r21,r4,736
 800e5e4:	dd800615 	stw	r22,24(sp)
 800e5e8:	dd000415 	stw	r20,16(sp)
 800e5ec:	dfc00715 	stw	ra,28(sp)
 800e5f0:	dcc00315 	stw	r19,12(sp)
 800e5f4:	dc800215 	stw	r18,8(sp)
 800e5f8:	dc400115 	stw	r17,4(sp)
 800e5fc:	dc000015 	stw	r16,0(sp)
 800e600:	2829883a 	mov	r20,r5
 800e604:	002d883a 	mov	r22,zero
 800e608:	800dce00 	call	800dce0 <__sfp_lock_acquire>
 800e60c:	a8001426 	beq	r21,zero,800e660 <_fwalk+0x88>
 800e610:	04ffffc4 	movi	r19,-1
 800e614:	ac400117 	ldw	r17,4(r21)
 800e618:	ac800217 	ldw	r18,8(r21)
 800e61c:	8c7fffc4 	addi	r17,r17,-1
 800e620:	88000d16 	blt	r17,zero,800e658 <_fwalk+0x80>
 800e624:	94000304 	addi	r16,r18,12
 800e628:	94800384 	addi	r18,r18,14
 800e62c:	80c0000f 	ldh	r3,0(r16)
 800e630:	8c7fffc4 	addi	r17,r17,-1
 800e634:	813ffd04 	addi	r4,r16,-12
 800e638:	18000426 	beq	r3,zero,800e64c <_fwalk+0x74>
 800e63c:	90c0000f 	ldh	r3,0(r18)
 800e640:	1cc00226 	beq	r3,r19,800e64c <_fwalk+0x74>
 800e644:	a03ee83a 	callr	r20
 800e648:	b0acb03a 	or	r22,r22,r2
 800e64c:	84001a04 	addi	r16,r16,104
 800e650:	94801a04 	addi	r18,r18,104
 800e654:	8cfff51e 	bne	r17,r19,800e62c <__alt_data_end+0xfc00e62c>
 800e658:	ad400017 	ldw	r21,0(r21)
 800e65c:	a83fed1e 	bne	r21,zero,800e614 <__alt_data_end+0xfc00e614>
 800e660:	800dce40 	call	800dce4 <__sfp_lock_release>
 800e664:	b005883a 	mov	r2,r22
 800e668:	dfc00717 	ldw	ra,28(sp)
 800e66c:	dd800617 	ldw	r22,24(sp)
 800e670:	dd400517 	ldw	r21,20(sp)
 800e674:	dd000417 	ldw	r20,16(sp)
 800e678:	dcc00317 	ldw	r19,12(sp)
 800e67c:	dc800217 	ldw	r18,8(sp)
 800e680:	dc400117 	ldw	r17,4(sp)
 800e684:	dc000017 	ldw	r16,0(sp)
 800e688:	dec00804 	addi	sp,sp,32
 800e68c:	f800283a 	ret

0800e690 <_fwalk_reent>:
 800e690:	defff804 	addi	sp,sp,-32
 800e694:	dd400515 	stw	r21,20(sp)
 800e698:	2540b804 	addi	r21,r4,736
 800e69c:	dd800615 	stw	r22,24(sp)
 800e6a0:	dd000415 	stw	r20,16(sp)
 800e6a4:	dcc00315 	stw	r19,12(sp)
 800e6a8:	dfc00715 	stw	ra,28(sp)
 800e6ac:	dc800215 	stw	r18,8(sp)
 800e6b0:	dc400115 	stw	r17,4(sp)
 800e6b4:	dc000015 	stw	r16,0(sp)
 800e6b8:	2027883a 	mov	r19,r4
 800e6bc:	2829883a 	mov	r20,r5
 800e6c0:	002d883a 	mov	r22,zero
 800e6c4:	800dce00 	call	800dce0 <__sfp_lock_acquire>
 800e6c8:	a8001326 	beq	r21,zero,800e718 <_fwalk_reent+0x88>
 800e6cc:	04bfffc4 	movi	r18,-1
 800e6d0:	ac400117 	ldw	r17,4(r21)
 800e6d4:	ac000217 	ldw	r16,8(r21)
 800e6d8:	8c7fffc4 	addi	r17,r17,-1
 800e6dc:	88000c16 	blt	r17,zero,800e710 <_fwalk_reent+0x80>
 800e6e0:	84000304 	addi	r16,r16,12
 800e6e4:	80c0000f 	ldh	r3,0(r16)
 800e6e8:	8c7fffc4 	addi	r17,r17,-1
 800e6ec:	817ffd04 	addi	r5,r16,-12
 800e6f0:	18000526 	beq	r3,zero,800e708 <_fwalk_reent+0x78>
 800e6f4:	80c0008f 	ldh	r3,2(r16)
 800e6f8:	9809883a 	mov	r4,r19
 800e6fc:	1c800226 	beq	r3,r18,800e708 <_fwalk_reent+0x78>
 800e700:	a03ee83a 	callr	r20
 800e704:	b0acb03a 	or	r22,r22,r2
 800e708:	84001a04 	addi	r16,r16,104
 800e70c:	8cbff51e 	bne	r17,r18,800e6e4 <__alt_data_end+0xfc00e6e4>
 800e710:	ad400017 	ldw	r21,0(r21)
 800e714:	a83fee1e 	bne	r21,zero,800e6d0 <__alt_data_end+0xfc00e6d0>
 800e718:	800dce40 	call	800dce4 <__sfp_lock_release>
 800e71c:	b005883a 	mov	r2,r22
 800e720:	dfc00717 	ldw	ra,28(sp)
 800e724:	dd800617 	ldw	r22,24(sp)
 800e728:	dd400517 	ldw	r21,20(sp)
 800e72c:	dd000417 	ldw	r20,16(sp)
 800e730:	dcc00317 	ldw	r19,12(sp)
 800e734:	dc800217 	ldw	r18,8(sp)
 800e738:	dc400117 	ldw	r17,4(sp)
 800e73c:	dc000017 	ldw	r16,0(sp)
 800e740:	dec00804 	addi	sp,sp,32
 800e744:	f800283a 	ret

0800e748 <_gettimeofday_r>:
 800e748:	defffd04 	addi	sp,sp,-12
 800e74c:	dc000015 	stw	r16,0(sp)
 800e750:	040200b4 	movhi	r16,2050
 800e754:	dc400115 	stw	r17,4(sp)
 800e758:	841bbd04 	addi	r16,r16,28404
 800e75c:	2023883a 	mov	r17,r4
 800e760:	2809883a 	mov	r4,r5
 800e764:	300b883a 	mov	r5,r6
 800e768:	dfc00215 	stw	ra,8(sp)
 800e76c:	80000015 	stw	zero,0(r16)
 800e770:	8015b900 	call	8015b90 <gettimeofday>
 800e774:	00ffffc4 	movi	r3,-1
 800e778:	10c00526 	beq	r2,r3,800e790 <_gettimeofday_r+0x48>
 800e77c:	dfc00217 	ldw	ra,8(sp)
 800e780:	dc400117 	ldw	r17,4(sp)
 800e784:	dc000017 	ldw	r16,0(sp)
 800e788:	dec00304 	addi	sp,sp,12
 800e78c:	f800283a 	ret
 800e790:	80c00017 	ldw	r3,0(r16)
 800e794:	183ff926 	beq	r3,zero,800e77c <__alt_data_end+0xfc00e77c>
 800e798:	88c00015 	stw	r3,0(r17)
 800e79c:	003ff706 	br	800e77c <__alt_data_end+0xfc00e77c>

0800e7a0 <_setlocale_r>:
 800e7a0:	30001b26 	beq	r6,zero,800e810 <_setlocale_r+0x70>
 800e7a4:	014200b4 	movhi	r5,2050
 800e7a8:	defffe04 	addi	sp,sp,-8
 800e7ac:	294db804 	addi	r5,r5,14048
 800e7b0:	3009883a 	mov	r4,r6
 800e7b4:	dc000015 	stw	r16,0(sp)
 800e7b8:	dfc00115 	stw	ra,4(sp)
 800e7bc:	3021883a 	mov	r16,r6
 800e7c0:	80105380 	call	8010538 <strcmp>
 800e7c4:	1000061e 	bne	r2,zero,800e7e0 <_setlocale_r+0x40>
 800e7c8:	008200b4 	movhi	r2,2050
 800e7cc:	108db704 	addi	r2,r2,14044
 800e7d0:	dfc00117 	ldw	ra,4(sp)
 800e7d4:	dc000017 	ldw	r16,0(sp)
 800e7d8:	dec00204 	addi	sp,sp,8
 800e7dc:	f800283a 	ret
 800e7e0:	014200b4 	movhi	r5,2050
 800e7e4:	294db704 	addi	r5,r5,14044
 800e7e8:	8009883a 	mov	r4,r16
 800e7ec:	80105380 	call	8010538 <strcmp>
 800e7f0:	103ff526 	beq	r2,zero,800e7c8 <__alt_data_end+0xfc00e7c8>
 800e7f4:	014200b4 	movhi	r5,2050
 800e7f8:	294d9a04 	addi	r5,r5,13928
 800e7fc:	8009883a 	mov	r4,r16
 800e800:	80105380 	call	8010538 <strcmp>
 800e804:	103ff026 	beq	r2,zero,800e7c8 <__alt_data_end+0xfc00e7c8>
 800e808:	0005883a 	mov	r2,zero
 800e80c:	003ff006 	br	800e7d0 <__alt_data_end+0xfc00e7d0>
 800e810:	008200b4 	movhi	r2,2050
 800e814:	108db704 	addi	r2,r2,14044
 800e818:	f800283a 	ret

0800e81c <__locale_charset>:
 800e81c:	008200b4 	movhi	r2,2050
 800e820:	10903a04 	addi	r2,r2,16616
 800e824:	f800283a 	ret

0800e828 <__locale_mb_cur_max>:
 800e828:	008200b4 	movhi	r2,2050
 800e82c:	1094e204 	addi	r2,r2,21384
 800e830:	10800017 	ldw	r2,0(r2)
 800e834:	f800283a 	ret

0800e838 <__locale_msgcharset>:
 800e838:	008200b4 	movhi	r2,2050
 800e83c:	10903204 	addi	r2,r2,16584
 800e840:	f800283a 	ret

0800e844 <__locale_cjk_lang>:
 800e844:	0005883a 	mov	r2,zero
 800e848:	f800283a 	ret

0800e84c <_localeconv_r>:
 800e84c:	008200b4 	movhi	r2,2050
 800e850:	10904204 	addi	r2,r2,16648
 800e854:	f800283a 	ret

0800e858 <setlocale>:
 800e858:	00c200b4 	movhi	r3,2050
 800e85c:	18d4e104 	addi	r3,r3,21380
 800e860:	2005883a 	mov	r2,r4
 800e864:	19000017 	ldw	r4,0(r3)
 800e868:	280d883a 	mov	r6,r5
 800e86c:	100b883a 	mov	r5,r2
 800e870:	800e7a01 	jmpi	800e7a0 <_setlocale_r>

0800e874 <localeconv>:
 800e874:	008200b4 	movhi	r2,2050
 800e878:	10904204 	addi	r2,r2,16648
 800e87c:	f800283a 	ret

0800e880 <__smakebuf_r>:
 800e880:	2880030b 	ldhu	r2,12(r5)
 800e884:	10c0008c 	andi	r3,r2,2
 800e888:	1800401e 	bne	r3,zero,800e98c <__smakebuf_r+0x10c>
 800e88c:	deffec04 	addi	sp,sp,-80
 800e890:	dc000f15 	stw	r16,60(sp)
 800e894:	2821883a 	mov	r16,r5
 800e898:	2940038f 	ldh	r5,14(r5)
 800e89c:	dc401015 	stw	r17,64(sp)
 800e8a0:	dfc01315 	stw	ra,76(sp)
 800e8a4:	dcc01215 	stw	r19,72(sp)
 800e8a8:	dc801115 	stw	r18,68(sp)
 800e8ac:	2023883a 	mov	r17,r4
 800e8b0:	28001b16 	blt	r5,zero,800e920 <__smakebuf_r+0xa0>
 800e8b4:	d80d883a 	mov	r6,sp
 800e8b8:	80133480 	call	8013348 <_fstat_r>
 800e8bc:	10001716 	blt	r2,zero,800e91c <__smakebuf_r+0x9c>
 800e8c0:	d8800117 	ldw	r2,4(sp)
 800e8c4:	00e00014 	movui	r3,32768
 800e8c8:	10bc000c 	andi	r2,r2,61440
 800e8cc:	10c03726 	beq	r2,r3,800e9ac <__smakebuf_r+0x12c>
 800e8d0:	80c0030b 	ldhu	r3,12(r16)
 800e8d4:	18c20014 	ori	r3,r3,2048
 800e8d8:	80c0030d 	sth	r3,12(r16)
 800e8dc:	00c80004 	movi	r3,8192
 800e8e0:	10c03c1e 	bne	r2,r3,800e9d4 <__smakebuf_r+0x154>
 800e8e4:	8140038f 	ldh	r5,14(r16)
 800e8e8:	8809883a 	mov	r4,r17
 800e8ec:	80133a00 	call	80133a0 <_isatty_r>
 800e8f0:	10004e26 	beq	r2,zero,800ea2c <__smakebuf_r+0x1ac>
 800e8f4:	8080030b 	ldhu	r2,12(r16)
 800e8f8:	04c00044 	movi	r19,1
 800e8fc:	80c010c4 	addi	r3,r16,67
 800e900:	14c4b03a 	or	r2,r2,r19
 800e904:	8080030d 	sth	r2,12(r16)
 800e908:	80c00015 	stw	r3,0(r16)
 800e90c:	80c00415 	stw	r3,16(r16)
 800e910:	84c00515 	stw	r19,20(r16)
 800e914:	04810004 	movi	r18,1024
 800e918:	00000706 	br	800e938 <__smakebuf_r+0xb8>
 800e91c:	8080030b 	ldhu	r2,12(r16)
 800e920:	10c0200c 	andi	r3,r2,128
 800e924:	18001f1e 	bne	r3,zero,800e9a4 <__smakebuf_r+0x124>
 800e928:	04810004 	movi	r18,1024
 800e92c:	10820014 	ori	r2,r2,2048
 800e930:	8080030d 	sth	r2,12(r16)
 800e934:	0027883a 	mov	r19,zero
 800e938:	8809883a 	mov	r4,r17
 800e93c:	900b883a 	mov	r5,r18
 800e940:	80069900 	call	8006990 <_malloc_r>
 800e944:	10002e26 	beq	r2,zero,800ea00 <__smakebuf_r+0x180>
 800e948:	80c0030b 	ldhu	r3,12(r16)
 800e94c:	01020074 	movhi	r4,2049
 800e950:	21365f04 	addi	r4,r4,-9860
 800e954:	89000f15 	stw	r4,60(r17)
 800e958:	18c02014 	ori	r3,r3,128
 800e95c:	80c0030d 	sth	r3,12(r16)
 800e960:	80800015 	stw	r2,0(r16)
 800e964:	80800415 	stw	r2,16(r16)
 800e968:	84800515 	stw	r18,20(r16)
 800e96c:	98001c1e 	bne	r19,zero,800e9e0 <__smakebuf_r+0x160>
 800e970:	dfc01317 	ldw	ra,76(sp)
 800e974:	dcc01217 	ldw	r19,72(sp)
 800e978:	dc801117 	ldw	r18,68(sp)
 800e97c:	dc401017 	ldw	r17,64(sp)
 800e980:	dc000f17 	ldw	r16,60(sp)
 800e984:	dec01404 	addi	sp,sp,80
 800e988:	f800283a 	ret
 800e98c:	288010c4 	addi	r2,r5,67
 800e990:	28800015 	stw	r2,0(r5)
 800e994:	28800415 	stw	r2,16(r5)
 800e998:	00800044 	movi	r2,1
 800e99c:	28800515 	stw	r2,20(r5)
 800e9a0:	f800283a 	ret
 800e9a4:	04801004 	movi	r18,64
 800e9a8:	003fe006 	br	800e92c <__alt_data_end+0xfc00e92c>
 800e9ac:	81000a17 	ldw	r4,40(r16)
 800e9b0:	00c20074 	movhi	r3,2049
 800e9b4:	18c13504 	addi	r3,r3,1236
 800e9b8:	20ffc51e 	bne	r4,r3,800e8d0 <__alt_data_end+0xfc00e8d0>
 800e9bc:	80c0030b 	ldhu	r3,12(r16)
 800e9c0:	01010004 	movi	r4,1024
 800e9c4:	81001315 	stw	r4,76(r16)
 800e9c8:	1906b03a 	or	r3,r3,r4
 800e9cc:	80c0030d 	sth	r3,12(r16)
 800e9d0:	003fc206 	br	800e8dc <__alt_data_end+0xfc00e8dc>
 800e9d4:	0027883a 	mov	r19,zero
 800e9d8:	04810004 	movi	r18,1024
 800e9dc:	003fd606 	br	800e938 <__alt_data_end+0xfc00e938>
 800e9e0:	8140038f 	ldh	r5,14(r16)
 800e9e4:	8809883a 	mov	r4,r17
 800e9e8:	80133a00 	call	80133a0 <_isatty_r>
 800e9ec:	103fe026 	beq	r2,zero,800e970 <__alt_data_end+0xfc00e970>
 800e9f0:	8080030b 	ldhu	r2,12(r16)
 800e9f4:	10800054 	ori	r2,r2,1
 800e9f8:	8080030d 	sth	r2,12(r16)
 800e9fc:	003fdc06 	br	800e970 <__alt_data_end+0xfc00e970>
 800ea00:	8080030b 	ldhu	r2,12(r16)
 800ea04:	10c0800c 	andi	r3,r2,512
 800ea08:	183fd91e 	bne	r3,zero,800e970 <__alt_data_end+0xfc00e970>
 800ea0c:	10800094 	ori	r2,r2,2
 800ea10:	80c010c4 	addi	r3,r16,67
 800ea14:	8080030d 	sth	r2,12(r16)
 800ea18:	00800044 	movi	r2,1
 800ea1c:	80c00015 	stw	r3,0(r16)
 800ea20:	80c00415 	stw	r3,16(r16)
 800ea24:	80800515 	stw	r2,20(r16)
 800ea28:	003fd106 	br	800e970 <__alt_data_end+0xfc00e970>
 800ea2c:	04c00044 	movi	r19,1
 800ea30:	04810004 	movi	r18,1024
 800ea34:	003fc006 	br	800e938 <__alt_data_end+0xfc00e938>

0800ea38 <memchr>:
 800ea38:	208000cc 	andi	r2,r4,3
 800ea3c:	280f883a 	mov	r7,r5
 800ea40:	10003526 	beq	r2,zero,800eb18 <memchr+0xe0>
 800ea44:	30bfffc4 	addi	r2,r6,-1
 800ea48:	30001b26 	beq	r6,zero,800eab8 <memchr+0x80>
 800ea4c:	21800003 	ldbu	r6,0(r4)
 800ea50:	28c03fcc 	andi	r3,r5,255
 800ea54:	30c01a26 	beq	r6,r3,800eac0 <memchr+0x88>
 800ea58:	180d883a 	mov	r6,r3
 800ea5c:	00000406 	br	800ea70 <memchr+0x38>
 800ea60:	10001526 	beq	r2,zero,800eab8 <memchr+0x80>
 800ea64:	20c00003 	ldbu	r3,0(r4)
 800ea68:	10bfffc4 	addi	r2,r2,-1
 800ea6c:	19801426 	beq	r3,r6,800eac0 <memchr+0x88>
 800ea70:	21000044 	addi	r4,r4,1
 800ea74:	20c000cc 	andi	r3,r4,3
 800ea78:	183ff91e 	bne	r3,zero,800ea60 <__alt_data_end+0xfc00ea60>
 800ea7c:	024000c4 	movi	r9,3
 800ea80:	48801136 	bltu	r9,r2,800eac8 <memchr+0x90>
 800ea84:	10000c26 	beq	r2,zero,800eab8 <memchr+0x80>
 800ea88:	20c00003 	ldbu	r3,0(r4)
 800ea8c:	29403fcc 	andi	r5,r5,255
 800ea90:	19400b26 	beq	r3,r5,800eac0 <memchr+0x88>
 800ea94:	20c00044 	addi	r3,r4,1
 800ea98:	2085883a 	add	r2,r4,r2
 800ea9c:	39803fcc 	andi	r6,r7,255
 800eaa0:	00000306 	br	800eab0 <memchr+0x78>
 800eaa4:	18c00044 	addi	r3,r3,1
 800eaa8:	197fffc3 	ldbu	r5,-1(r3)
 800eaac:	29800426 	beq	r5,r6,800eac0 <memchr+0x88>
 800eab0:	1809883a 	mov	r4,r3
 800eab4:	18bffb1e 	bne	r3,r2,800eaa4 <__alt_data_end+0xfc00eaa4>
 800eab8:	0005883a 	mov	r2,zero
 800eabc:	f800283a 	ret
 800eac0:	2005883a 	mov	r2,r4
 800eac4:	f800283a 	ret
 800eac8:	28c03fcc 	andi	r3,r5,255
 800eacc:	1810923a 	slli	r8,r3,8
 800ead0:	02ffbff4 	movhi	r11,65279
 800ead4:	02a02074 	movhi	r10,32897
 800ead8:	40c6b03a 	or	r3,r8,r3
 800eadc:	1810943a 	slli	r8,r3,16
 800eae0:	5affbfc4 	addi	r11,r11,-257
 800eae4:	52a02004 	addi	r10,r10,-32640
 800eae8:	40d0b03a 	or	r8,r8,r3
 800eaec:	20c00017 	ldw	r3,0(r4)
 800eaf0:	40c6f03a 	xor	r3,r8,r3
 800eaf4:	1acd883a 	add	r6,r3,r11
 800eaf8:	00c6303a 	nor	r3,zero,r3
 800eafc:	30c6703a 	and	r3,r6,r3
 800eb00:	1a86703a 	and	r3,r3,r10
 800eb04:	183fdf1e 	bne	r3,zero,800ea84 <__alt_data_end+0xfc00ea84>
 800eb08:	10bfff04 	addi	r2,r2,-4
 800eb0c:	21000104 	addi	r4,r4,4
 800eb10:	48bff636 	bltu	r9,r2,800eaec <__alt_data_end+0xfc00eaec>
 800eb14:	003fdb06 	br	800ea84 <__alt_data_end+0xfc00ea84>
 800eb18:	3005883a 	mov	r2,r6
 800eb1c:	003fd706 	br	800ea7c <__alt_data_end+0xfc00ea7c>

0800eb20 <memmove>:
 800eb20:	2005883a 	mov	r2,r4
 800eb24:	29000b2e 	bgeu	r5,r4,800eb54 <memmove+0x34>
 800eb28:	298f883a 	add	r7,r5,r6
 800eb2c:	21c0092e 	bgeu	r4,r7,800eb54 <memmove+0x34>
 800eb30:	2187883a 	add	r3,r4,r6
 800eb34:	198bc83a 	sub	r5,r3,r6
 800eb38:	30004b26 	beq	r6,zero,800ec68 <memmove+0x148>
 800eb3c:	39ffffc4 	addi	r7,r7,-1
 800eb40:	39000003 	ldbu	r4,0(r7)
 800eb44:	18ffffc4 	addi	r3,r3,-1
 800eb48:	19000005 	stb	r4,0(r3)
 800eb4c:	197ffb1e 	bne	r3,r5,800eb3c <__alt_data_end+0xfc00eb3c>
 800eb50:	f800283a 	ret
 800eb54:	00c003c4 	movi	r3,15
 800eb58:	1980412e 	bgeu	r3,r6,800ec60 <memmove+0x140>
 800eb5c:	1146b03a 	or	r3,r2,r5
 800eb60:	18c000cc 	andi	r3,r3,3
 800eb64:	1800411e 	bne	r3,zero,800ec6c <memmove+0x14c>
 800eb68:	33fffc04 	addi	r15,r6,-16
 800eb6c:	781ed13a 	srli	r15,r15,4
 800eb70:	28c00104 	addi	r3,r5,4
 800eb74:	13400104 	addi	r13,r2,4
 800eb78:	781c913a 	slli	r14,r15,4
 800eb7c:	2b000204 	addi	r12,r5,8
 800eb80:	12c00204 	addi	r11,r2,8
 800eb84:	73800504 	addi	r14,r14,20
 800eb88:	2a800304 	addi	r10,r5,12
 800eb8c:	12400304 	addi	r9,r2,12
 800eb90:	2b9d883a 	add	r14,r5,r14
 800eb94:	2811883a 	mov	r8,r5
 800eb98:	100f883a 	mov	r7,r2
 800eb9c:	41000017 	ldw	r4,0(r8)
 800eba0:	39c00404 	addi	r7,r7,16
 800eba4:	18c00404 	addi	r3,r3,16
 800eba8:	393ffc15 	stw	r4,-16(r7)
 800ebac:	193ffc17 	ldw	r4,-16(r3)
 800ebb0:	6b400404 	addi	r13,r13,16
 800ebb4:	5ac00404 	addi	r11,r11,16
 800ebb8:	693ffc15 	stw	r4,-16(r13)
 800ebbc:	61000017 	ldw	r4,0(r12)
 800ebc0:	4a400404 	addi	r9,r9,16
 800ebc4:	42000404 	addi	r8,r8,16
 800ebc8:	593ffc15 	stw	r4,-16(r11)
 800ebcc:	51000017 	ldw	r4,0(r10)
 800ebd0:	63000404 	addi	r12,r12,16
 800ebd4:	52800404 	addi	r10,r10,16
 800ebd8:	493ffc15 	stw	r4,-16(r9)
 800ebdc:	1bbfef1e 	bne	r3,r14,800eb9c <__alt_data_end+0xfc00eb9c>
 800ebe0:	79000044 	addi	r4,r15,1
 800ebe4:	2008913a 	slli	r4,r4,4
 800ebe8:	328003cc 	andi	r10,r6,15
 800ebec:	02c000c4 	movi	r11,3
 800ebf0:	1107883a 	add	r3,r2,r4
 800ebf4:	290b883a 	add	r5,r5,r4
 800ebf8:	5a801e2e 	bgeu	r11,r10,800ec74 <memmove+0x154>
 800ebfc:	1813883a 	mov	r9,r3
 800ec00:	2811883a 	mov	r8,r5
 800ec04:	500f883a 	mov	r7,r10
 800ec08:	41000017 	ldw	r4,0(r8)
 800ec0c:	4a400104 	addi	r9,r9,4
 800ec10:	39ffff04 	addi	r7,r7,-4
 800ec14:	493fff15 	stw	r4,-4(r9)
 800ec18:	42000104 	addi	r8,r8,4
 800ec1c:	59fffa36 	bltu	r11,r7,800ec08 <__alt_data_end+0xfc00ec08>
 800ec20:	513fff04 	addi	r4,r10,-4
 800ec24:	2008d0ba 	srli	r4,r4,2
 800ec28:	318000cc 	andi	r6,r6,3
 800ec2c:	21000044 	addi	r4,r4,1
 800ec30:	2109883a 	add	r4,r4,r4
 800ec34:	2109883a 	add	r4,r4,r4
 800ec38:	1907883a 	add	r3,r3,r4
 800ec3c:	290b883a 	add	r5,r5,r4
 800ec40:	30000926 	beq	r6,zero,800ec68 <memmove+0x148>
 800ec44:	198d883a 	add	r6,r3,r6
 800ec48:	29c00003 	ldbu	r7,0(r5)
 800ec4c:	18c00044 	addi	r3,r3,1
 800ec50:	29400044 	addi	r5,r5,1
 800ec54:	19ffffc5 	stb	r7,-1(r3)
 800ec58:	19bffb1e 	bne	r3,r6,800ec48 <__alt_data_end+0xfc00ec48>
 800ec5c:	f800283a 	ret
 800ec60:	1007883a 	mov	r3,r2
 800ec64:	003ff606 	br	800ec40 <__alt_data_end+0xfc00ec40>
 800ec68:	f800283a 	ret
 800ec6c:	1007883a 	mov	r3,r2
 800ec70:	003ff406 	br	800ec44 <__alt_data_end+0xfc00ec44>
 800ec74:	500d883a 	mov	r6,r10
 800ec78:	003ff106 	br	800ec40 <__alt_data_end+0xfc00ec40>

0800ec7c <memset>:
 800ec7c:	20c000cc 	andi	r3,r4,3
 800ec80:	2005883a 	mov	r2,r4
 800ec84:	18004326 	beq	r3,zero,800ed94 <memset+0x118>
 800ec88:	31ffffc4 	addi	r7,r6,-1
 800ec8c:	30004026 	beq	r6,zero,800ed90 <memset+0x114>
 800ec90:	2813883a 	mov	r9,r5
 800ec94:	200d883a 	mov	r6,r4
 800ec98:	2007883a 	mov	r3,r4
 800ec9c:	00000406 	br	800ecb0 <memset+0x34>
 800eca0:	3a3fffc4 	addi	r8,r7,-1
 800eca4:	31800044 	addi	r6,r6,1
 800eca8:	38003926 	beq	r7,zero,800ed90 <memset+0x114>
 800ecac:	400f883a 	mov	r7,r8
 800ecb0:	18c00044 	addi	r3,r3,1
 800ecb4:	32400005 	stb	r9,0(r6)
 800ecb8:	1a0000cc 	andi	r8,r3,3
 800ecbc:	403ff81e 	bne	r8,zero,800eca0 <__alt_data_end+0xfc00eca0>
 800ecc0:	010000c4 	movi	r4,3
 800ecc4:	21c02d2e 	bgeu	r4,r7,800ed7c <memset+0x100>
 800ecc8:	29803fcc 	andi	r6,r5,255
 800eccc:	3008923a 	slli	r4,r6,8
 800ecd0:	218cb03a 	or	r6,r4,r6
 800ecd4:	3008943a 	slli	r4,r6,16
 800ecd8:	218cb03a 	or	r6,r4,r6
 800ecdc:	010003c4 	movi	r4,15
 800ece0:	21c0182e 	bgeu	r4,r7,800ed44 <memset+0xc8>
 800ece4:	3b3ffc04 	addi	r12,r7,-16
 800ece8:	6018d13a 	srli	r12,r12,4
 800ecec:	1a000104 	addi	r8,r3,4
 800ecf0:	1ac00204 	addi	r11,r3,8
 800ecf4:	6008913a 	slli	r4,r12,4
 800ecf8:	1a800304 	addi	r10,r3,12
 800ecfc:	1813883a 	mov	r9,r3
 800ed00:	21000504 	addi	r4,r4,20
 800ed04:	1909883a 	add	r4,r3,r4
 800ed08:	49800015 	stw	r6,0(r9)
 800ed0c:	41800015 	stw	r6,0(r8)
 800ed10:	59800015 	stw	r6,0(r11)
 800ed14:	51800015 	stw	r6,0(r10)
 800ed18:	42000404 	addi	r8,r8,16
 800ed1c:	4a400404 	addi	r9,r9,16
 800ed20:	5ac00404 	addi	r11,r11,16
 800ed24:	52800404 	addi	r10,r10,16
 800ed28:	413ff71e 	bne	r8,r4,800ed08 <__alt_data_end+0xfc00ed08>
 800ed2c:	63000044 	addi	r12,r12,1
 800ed30:	6018913a 	slli	r12,r12,4
 800ed34:	39c003cc 	andi	r7,r7,15
 800ed38:	010000c4 	movi	r4,3
 800ed3c:	1b07883a 	add	r3,r3,r12
 800ed40:	21c00e2e 	bgeu	r4,r7,800ed7c <memset+0x100>
 800ed44:	1813883a 	mov	r9,r3
 800ed48:	3811883a 	mov	r8,r7
 800ed4c:	010000c4 	movi	r4,3
 800ed50:	49800015 	stw	r6,0(r9)
 800ed54:	423fff04 	addi	r8,r8,-4
 800ed58:	4a400104 	addi	r9,r9,4
 800ed5c:	223ffc36 	bltu	r4,r8,800ed50 <__alt_data_end+0xfc00ed50>
 800ed60:	393fff04 	addi	r4,r7,-4
 800ed64:	2008d0ba 	srli	r4,r4,2
 800ed68:	39c000cc 	andi	r7,r7,3
 800ed6c:	21000044 	addi	r4,r4,1
 800ed70:	2109883a 	add	r4,r4,r4
 800ed74:	2109883a 	add	r4,r4,r4
 800ed78:	1907883a 	add	r3,r3,r4
 800ed7c:	38000426 	beq	r7,zero,800ed90 <memset+0x114>
 800ed80:	19cf883a 	add	r7,r3,r7
 800ed84:	19400005 	stb	r5,0(r3)
 800ed88:	18c00044 	addi	r3,r3,1
 800ed8c:	19fffd1e 	bne	r3,r7,800ed84 <__alt_data_end+0xfc00ed84>
 800ed90:	f800283a 	ret
 800ed94:	2007883a 	mov	r3,r4
 800ed98:	300f883a 	mov	r7,r6
 800ed9c:	003fc806 	br	800ecc0 <__alt_data_end+0xfc00ecc0>

0800eda0 <_Balloc>:
 800eda0:	20801317 	ldw	r2,76(r4)
 800eda4:	defffc04 	addi	sp,sp,-16
 800eda8:	dc400115 	stw	r17,4(sp)
 800edac:	dc000015 	stw	r16,0(sp)
 800edb0:	dfc00315 	stw	ra,12(sp)
 800edb4:	dc800215 	stw	r18,8(sp)
 800edb8:	2023883a 	mov	r17,r4
 800edbc:	2821883a 	mov	r16,r5
 800edc0:	10000f26 	beq	r2,zero,800ee00 <_Balloc+0x60>
 800edc4:	8407883a 	add	r3,r16,r16
 800edc8:	18c7883a 	add	r3,r3,r3
 800edcc:	10c7883a 	add	r3,r2,r3
 800edd0:	18800017 	ldw	r2,0(r3)
 800edd4:	10001126 	beq	r2,zero,800ee1c <_Balloc+0x7c>
 800edd8:	11000017 	ldw	r4,0(r2)
 800eddc:	19000015 	stw	r4,0(r3)
 800ede0:	10000415 	stw	zero,16(r2)
 800ede4:	10000315 	stw	zero,12(r2)
 800ede8:	dfc00317 	ldw	ra,12(sp)
 800edec:	dc800217 	ldw	r18,8(sp)
 800edf0:	dc400117 	ldw	r17,4(sp)
 800edf4:	dc000017 	ldw	r16,0(sp)
 800edf8:	dec00404 	addi	sp,sp,16
 800edfc:	f800283a 	ret
 800ee00:	01400104 	movi	r5,4
 800ee04:	01800844 	movi	r6,33
 800ee08:	8012f800 	call	8012f80 <_calloc_r>
 800ee0c:	88801315 	stw	r2,76(r17)
 800ee10:	103fec1e 	bne	r2,zero,800edc4 <__alt_data_end+0xfc00edc4>
 800ee14:	0005883a 	mov	r2,zero
 800ee18:	003ff306 	br	800ede8 <__alt_data_end+0xfc00ede8>
 800ee1c:	01400044 	movi	r5,1
 800ee20:	2c24983a 	sll	r18,r5,r16
 800ee24:	8809883a 	mov	r4,r17
 800ee28:	91800144 	addi	r6,r18,5
 800ee2c:	318d883a 	add	r6,r6,r6
 800ee30:	318d883a 	add	r6,r6,r6
 800ee34:	8012f800 	call	8012f80 <_calloc_r>
 800ee38:	103ff626 	beq	r2,zero,800ee14 <__alt_data_end+0xfc00ee14>
 800ee3c:	14000115 	stw	r16,4(r2)
 800ee40:	14800215 	stw	r18,8(r2)
 800ee44:	003fe606 	br	800ede0 <__alt_data_end+0xfc00ede0>

0800ee48 <_Bfree>:
 800ee48:	28000826 	beq	r5,zero,800ee6c <_Bfree+0x24>
 800ee4c:	28c00117 	ldw	r3,4(r5)
 800ee50:	20801317 	ldw	r2,76(r4)
 800ee54:	18c7883a 	add	r3,r3,r3
 800ee58:	18c7883a 	add	r3,r3,r3
 800ee5c:	10c5883a 	add	r2,r2,r3
 800ee60:	10c00017 	ldw	r3,0(r2)
 800ee64:	28c00015 	stw	r3,0(r5)
 800ee68:	11400015 	stw	r5,0(r2)
 800ee6c:	f800283a 	ret

0800ee70 <__multadd>:
 800ee70:	defff704 	addi	sp,sp,-36
 800ee74:	dc800215 	stw	r18,8(sp)
 800ee78:	2c800417 	ldw	r18,16(r5)
 800ee7c:	ddc00715 	stw	r23,28(sp)
 800ee80:	dd800615 	stw	r22,24(sp)
 800ee84:	dd000415 	stw	r20,16(sp)
 800ee88:	dcc00315 	stw	r19,12(sp)
 800ee8c:	dc400115 	stw	r17,4(sp)
 800ee90:	dc000015 	stw	r16,0(sp)
 800ee94:	dfc00815 	stw	ra,32(sp)
 800ee98:	dd400515 	stw	r21,20(sp)
 800ee9c:	2827883a 	mov	r19,r5
 800eea0:	2029883a 	mov	r20,r4
 800eea4:	3023883a 	mov	r17,r6
 800eea8:	3821883a 	mov	r16,r7
 800eeac:	2d800504 	addi	r22,r5,20
 800eeb0:	002f883a 	mov	r23,zero
 800eeb4:	b5400017 	ldw	r21,0(r22)
 800eeb8:	880b883a 	mov	r5,r17
 800eebc:	bdc00044 	addi	r23,r23,1
 800eec0:	a93fffcc 	andi	r4,r21,65535
 800eec4:	8004c100 	call	8004c10 <__mulsi3>
 800eec8:	1421883a 	add	r16,r2,r16
 800eecc:	a808d43a 	srli	r4,r21,16
 800eed0:	802ad43a 	srli	r21,r16,16
 800eed4:	880b883a 	mov	r5,r17
 800eed8:	8004c100 	call	8004c10 <__mulsi3>
 800eedc:	a88f883a 	add	r7,r21,r2
 800eee0:	3804943a 	slli	r2,r7,16
 800eee4:	80ffffcc 	andi	r3,r16,65535
 800eee8:	b5800104 	addi	r22,r22,4
 800eeec:	10c7883a 	add	r3,r2,r3
 800eef0:	b0ffff15 	stw	r3,-4(r22)
 800eef4:	3820d43a 	srli	r16,r7,16
 800eef8:	bcbfee16 	blt	r23,r18,800eeb4 <__alt_data_end+0xfc00eeb4>
 800eefc:	80000926 	beq	r16,zero,800ef24 <__multadd+0xb4>
 800ef00:	98800217 	ldw	r2,8(r19)
 800ef04:	9080130e 	bge	r18,r2,800ef54 <__multadd+0xe4>
 800ef08:	90800144 	addi	r2,r18,5
 800ef0c:	1085883a 	add	r2,r2,r2
 800ef10:	1085883a 	add	r2,r2,r2
 800ef14:	9885883a 	add	r2,r19,r2
 800ef18:	14000015 	stw	r16,0(r2)
 800ef1c:	94800044 	addi	r18,r18,1
 800ef20:	9c800415 	stw	r18,16(r19)
 800ef24:	9805883a 	mov	r2,r19
 800ef28:	dfc00817 	ldw	ra,32(sp)
 800ef2c:	ddc00717 	ldw	r23,28(sp)
 800ef30:	dd800617 	ldw	r22,24(sp)
 800ef34:	dd400517 	ldw	r21,20(sp)
 800ef38:	dd000417 	ldw	r20,16(sp)
 800ef3c:	dcc00317 	ldw	r19,12(sp)
 800ef40:	dc800217 	ldw	r18,8(sp)
 800ef44:	dc400117 	ldw	r17,4(sp)
 800ef48:	dc000017 	ldw	r16,0(sp)
 800ef4c:	dec00904 	addi	sp,sp,36
 800ef50:	f800283a 	ret
 800ef54:	99400117 	ldw	r5,4(r19)
 800ef58:	a009883a 	mov	r4,r20
 800ef5c:	29400044 	addi	r5,r5,1
 800ef60:	800eda00 	call	800eda0 <_Balloc>
 800ef64:	99800417 	ldw	r6,16(r19)
 800ef68:	99400304 	addi	r5,r19,12
 800ef6c:	11000304 	addi	r4,r2,12
 800ef70:	31800084 	addi	r6,r6,2
 800ef74:	318d883a 	add	r6,r6,r6
 800ef78:	318d883a 	add	r6,r6,r6
 800ef7c:	1023883a 	mov	r17,r2
 800ef80:	80071380 	call	8007138 <memcpy>
 800ef84:	99000117 	ldw	r4,4(r19)
 800ef88:	a0c01317 	ldw	r3,76(r20)
 800ef8c:	2109883a 	add	r4,r4,r4
 800ef90:	2109883a 	add	r4,r4,r4
 800ef94:	1907883a 	add	r3,r3,r4
 800ef98:	18800017 	ldw	r2,0(r3)
 800ef9c:	98800015 	stw	r2,0(r19)
 800efa0:	1cc00015 	stw	r19,0(r3)
 800efa4:	8827883a 	mov	r19,r17
 800efa8:	003fd706 	br	800ef08 <__alt_data_end+0xfc00ef08>

0800efac <__s2b>:
 800efac:	defff904 	addi	sp,sp,-28
 800efb0:	dc400115 	stw	r17,4(sp)
 800efb4:	dc000015 	stw	r16,0(sp)
 800efb8:	2023883a 	mov	r17,r4
 800efbc:	2821883a 	mov	r16,r5
 800efc0:	39000204 	addi	r4,r7,8
 800efc4:	01400244 	movi	r5,9
 800efc8:	dcc00315 	stw	r19,12(sp)
 800efcc:	dc800215 	stw	r18,8(sp)
 800efd0:	dfc00615 	stw	ra,24(sp)
 800efd4:	dd400515 	stw	r21,20(sp)
 800efd8:	dd000415 	stw	r20,16(sp)
 800efdc:	3825883a 	mov	r18,r7
 800efe0:	3027883a 	mov	r19,r6
 800efe4:	8004b500 	call	8004b50 <__divsi3>
 800efe8:	00c00044 	movi	r3,1
 800efec:	000b883a 	mov	r5,zero
 800eff0:	1880030e 	bge	r3,r2,800f000 <__s2b+0x54>
 800eff4:	18c7883a 	add	r3,r3,r3
 800eff8:	29400044 	addi	r5,r5,1
 800effc:	18bffd16 	blt	r3,r2,800eff4 <__alt_data_end+0xfc00eff4>
 800f000:	8809883a 	mov	r4,r17
 800f004:	800eda00 	call	800eda0 <_Balloc>
 800f008:	d8c00717 	ldw	r3,28(sp)
 800f00c:	10c00515 	stw	r3,20(r2)
 800f010:	00c00044 	movi	r3,1
 800f014:	10c00415 	stw	r3,16(r2)
 800f018:	00c00244 	movi	r3,9
 800f01c:	1cc0210e 	bge	r3,r19,800f0a4 <__s2b+0xf8>
 800f020:	80eb883a 	add	r21,r16,r3
 800f024:	a829883a 	mov	r20,r21
 800f028:	84e1883a 	add	r16,r16,r19
 800f02c:	a1c00007 	ldb	r7,0(r20)
 800f030:	8809883a 	mov	r4,r17
 800f034:	a5000044 	addi	r20,r20,1
 800f038:	100b883a 	mov	r5,r2
 800f03c:	01800284 	movi	r6,10
 800f040:	39fff404 	addi	r7,r7,-48
 800f044:	800ee700 	call	800ee70 <__multadd>
 800f048:	a43ff81e 	bne	r20,r16,800f02c <__alt_data_end+0xfc00f02c>
 800f04c:	ace1883a 	add	r16,r21,r19
 800f050:	843ffe04 	addi	r16,r16,-8
 800f054:	9c800a0e 	bge	r19,r18,800f080 <__s2b+0xd4>
 800f058:	94e5c83a 	sub	r18,r18,r19
 800f05c:	84a5883a 	add	r18,r16,r18
 800f060:	81c00007 	ldb	r7,0(r16)
 800f064:	8809883a 	mov	r4,r17
 800f068:	84000044 	addi	r16,r16,1
 800f06c:	100b883a 	mov	r5,r2
 800f070:	01800284 	movi	r6,10
 800f074:	39fff404 	addi	r7,r7,-48
 800f078:	800ee700 	call	800ee70 <__multadd>
 800f07c:	84bff81e 	bne	r16,r18,800f060 <__alt_data_end+0xfc00f060>
 800f080:	dfc00617 	ldw	ra,24(sp)
 800f084:	dd400517 	ldw	r21,20(sp)
 800f088:	dd000417 	ldw	r20,16(sp)
 800f08c:	dcc00317 	ldw	r19,12(sp)
 800f090:	dc800217 	ldw	r18,8(sp)
 800f094:	dc400117 	ldw	r17,4(sp)
 800f098:	dc000017 	ldw	r16,0(sp)
 800f09c:	dec00704 	addi	sp,sp,28
 800f0a0:	f800283a 	ret
 800f0a4:	84000284 	addi	r16,r16,10
 800f0a8:	1827883a 	mov	r19,r3
 800f0ac:	003fe906 	br	800f054 <__alt_data_end+0xfc00f054>

0800f0b0 <__hi0bits>:
 800f0b0:	20bfffec 	andhi	r2,r4,65535
 800f0b4:	1000141e 	bne	r2,zero,800f108 <__hi0bits+0x58>
 800f0b8:	2008943a 	slli	r4,r4,16
 800f0bc:	00800404 	movi	r2,16
 800f0c0:	20ffc02c 	andhi	r3,r4,65280
 800f0c4:	1800021e 	bne	r3,zero,800f0d0 <__hi0bits+0x20>
 800f0c8:	2008923a 	slli	r4,r4,8
 800f0cc:	10800204 	addi	r2,r2,8
 800f0d0:	20fc002c 	andhi	r3,r4,61440
 800f0d4:	1800021e 	bne	r3,zero,800f0e0 <__hi0bits+0x30>
 800f0d8:	2008913a 	slli	r4,r4,4
 800f0dc:	10800104 	addi	r2,r2,4
 800f0e0:	20f0002c 	andhi	r3,r4,49152
 800f0e4:	1800031e 	bne	r3,zero,800f0f4 <__hi0bits+0x44>
 800f0e8:	2109883a 	add	r4,r4,r4
 800f0ec:	10800084 	addi	r2,r2,2
 800f0f0:	2109883a 	add	r4,r4,r4
 800f0f4:	20000316 	blt	r4,zero,800f104 <__hi0bits+0x54>
 800f0f8:	2110002c 	andhi	r4,r4,16384
 800f0fc:	2000041e 	bne	r4,zero,800f110 <__hi0bits+0x60>
 800f100:	00800804 	movi	r2,32
 800f104:	f800283a 	ret
 800f108:	0005883a 	mov	r2,zero
 800f10c:	003fec06 	br	800f0c0 <__alt_data_end+0xfc00f0c0>
 800f110:	10800044 	addi	r2,r2,1
 800f114:	f800283a 	ret

0800f118 <__lo0bits>:
 800f118:	20c00017 	ldw	r3,0(r4)
 800f11c:	188001cc 	andi	r2,r3,7
 800f120:	10000826 	beq	r2,zero,800f144 <__lo0bits+0x2c>
 800f124:	1880004c 	andi	r2,r3,1
 800f128:	1000211e 	bne	r2,zero,800f1b0 <__lo0bits+0x98>
 800f12c:	1880008c 	andi	r2,r3,2
 800f130:	1000211e 	bne	r2,zero,800f1b8 <__lo0bits+0xa0>
 800f134:	1806d0ba 	srli	r3,r3,2
 800f138:	00800084 	movi	r2,2
 800f13c:	20c00015 	stw	r3,0(r4)
 800f140:	f800283a 	ret
 800f144:	18bfffcc 	andi	r2,r3,65535
 800f148:	10001326 	beq	r2,zero,800f198 <__lo0bits+0x80>
 800f14c:	0005883a 	mov	r2,zero
 800f150:	19403fcc 	andi	r5,r3,255
 800f154:	2800021e 	bne	r5,zero,800f160 <__lo0bits+0x48>
 800f158:	1806d23a 	srli	r3,r3,8
 800f15c:	10800204 	addi	r2,r2,8
 800f160:	194003cc 	andi	r5,r3,15
 800f164:	2800021e 	bne	r5,zero,800f170 <__lo0bits+0x58>
 800f168:	1806d13a 	srli	r3,r3,4
 800f16c:	10800104 	addi	r2,r2,4
 800f170:	194000cc 	andi	r5,r3,3
 800f174:	2800021e 	bne	r5,zero,800f180 <__lo0bits+0x68>
 800f178:	1806d0ba 	srli	r3,r3,2
 800f17c:	10800084 	addi	r2,r2,2
 800f180:	1940004c 	andi	r5,r3,1
 800f184:	2800081e 	bne	r5,zero,800f1a8 <__lo0bits+0x90>
 800f188:	1806d07a 	srli	r3,r3,1
 800f18c:	1800051e 	bne	r3,zero,800f1a4 <__lo0bits+0x8c>
 800f190:	00800804 	movi	r2,32
 800f194:	f800283a 	ret
 800f198:	1806d43a 	srli	r3,r3,16
 800f19c:	00800404 	movi	r2,16
 800f1a0:	003feb06 	br	800f150 <__alt_data_end+0xfc00f150>
 800f1a4:	10800044 	addi	r2,r2,1
 800f1a8:	20c00015 	stw	r3,0(r4)
 800f1ac:	f800283a 	ret
 800f1b0:	0005883a 	mov	r2,zero
 800f1b4:	f800283a 	ret
 800f1b8:	1806d07a 	srli	r3,r3,1
 800f1bc:	00800044 	movi	r2,1
 800f1c0:	20c00015 	stw	r3,0(r4)
 800f1c4:	f800283a 	ret

0800f1c8 <__i2b>:
 800f1c8:	defffd04 	addi	sp,sp,-12
 800f1cc:	dc000015 	stw	r16,0(sp)
 800f1d0:	04000044 	movi	r16,1
 800f1d4:	dc400115 	stw	r17,4(sp)
 800f1d8:	2823883a 	mov	r17,r5
 800f1dc:	800b883a 	mov	r5,r16
 800f1e0:	dfc00215 	stw	ra,8(sp)
 800f1e4:	800eda00 	call	800eda0 <_Balloc>
 800f1e8:	14400515 	stw	r17,20(r2)
 800f1ec:	14000415 	stw	r16,16(r2)
 800f1f0:	dfc00217 	ldw	ra,8(sp)
 800f1f4:	dc400117 	ldw	r17,4(sp)
 800f1f8:	dc000017 	ldw	r16,0(sp)
 800f1fc:	dec00304 	addi	sp,sp,12
 800f200:	f800283a 	ret

0800f204 <__multiply>:
 800f204:	deffef04 	addi	sp,sp,-68
 800f208:	dc400815 	stw	r17,32(sp)
 800f20c:	dc000715 	stw	r16,28(sp)
 800f210:	2c400417 	ldw	r17,16(r5)
 800f214:	34000417 	ldw	r16,16(r6)
 800f218:	dd800d15 	stw	r22,52(sp)
 800f21c:	dc800915 	stw	r18,36(sp)
 800f220:	dfc01015 	stw	ra,64(sp)
 800f224:	df000f15 	stw	fp,60(sp)
 800f228:	ddc00e15 	stw	r23,56(sp)
 800f22c:	dd400c15 	stw	r21,48(sp)
 800f230:	dd000b15 	stw	r20,44(sp)
 800f234:	dcc00a15 	stw	r19,40(sp)
 800f238:	2825883a 	mov	r18,r5
 800f23c:	302d883a 	mov	r22,r6
 800f240:	8c009116 	blt	r17,r16,800f488 <__multiply+0x284>
 800f244:	8005883a 	mov	r2,r16
 800f248:	8821883a 	mov	r16,r17
 800f24c:	1023883a 	mov	r17,r2
 800f250:	90800217 	ldw	r2,8(r18)
 800f254:	8447883a 	add	r3,r16,r17
 800f258:	d8c00215 	stw	r3,8(sp)
 800f25c:	91400117 	ldw	r5,4(r18)
 800f260:	10c0010e 	bge	r2,r3,800f268 <__multiply+0x64>
 800f264:	29400044 	addi	r5,r5,1
 800f268:	800eda00 	call	800eda0 <_Balloc>
 800f26c:	d8c00217 	ldw	r3,8(sp)
 800f270:	d8800615 	stw	r2,24(sp)
 800f274:	18eb883a 	add	r21,r3,r3
 800f278:	ad6b883a 	add	r21,r21,r21
 800f27c:	10c00504 	addi	r3,r2,20
 800f280:	1d6b883a 	add	r21,r3,r21
 800f284:	d8c00115 	stw	r3,4(sp)
 800f288:	dd400315 	stw	r21,12(sp)
 800f28c:	1805883a 	mov	r2,r3
 800f290:	1d40042e 	bgeu	r3,r21,800f2a4 <__multiply+0xa0>
 800f294:	d8c00317 	ldw	r3,12(sp)
 800f298:	10000015 	stw	zero,0(r2)
 800f29c:	10800104 	addi	r2,r2,4
 800f2a0:	10fffc36 	bltu	r2,r3,800f294 <__alt_data_end+0xfc00f294>
 800f2a4:	8c63883a 	add	r17,r17,r17
 800f2a8:	b5800504 	addi	r22,r22,20
 800f2ac:	8c63883a 	add	r17,r17,r17
 800f2b0:	94800504 	addi	r18,r18,20
 800f2b4:	8421883a 	add	r16,r16,r16
 800f2b8:	b463883a 	add	r17,r22,r17
 800f2bc:	8421883a 	add	r16,r16,r16
 800f2c0:	dd800015 	stw	r22,0(sp)
 800f2c4:	dc800415 	stw	r18,16(sp)
 800f2c8:	dc400515 	stw	r17,20(sp)
 800f2cc:	9429883a 	add	r20,r18,r16
 800f2d0:	b4404f2e 	bgeu	r22,r17,800f410 <__multiply+0x20c>
 800f2d4:	d8c00017 	ldw	r3,0(sp)
 800f2d8:	1c800017 	ldw	r18,0(r3)
 800f2dc:	943fffcc 	andi	r16,r18,65535
 800f2e0:	80001e26 	beq	r16,zero,800f35c <__multiply+0x158>
 800f2e4:	dd800117 	ldw	r22,4(sp)
 800f2e8:	dd400417 	ldw	r21,16(sp)
 800f2ec:	0025883a 	mov	r18,zero
 800f2f0:	adc00017 	ldw	r23,0(r21)
 800f2f4:	b4c00017 	ldw	r19,0(r22)
 800f2f8:	800b883a 	mov	r5,r16
 800f2fc:	b93fffcc 	andi	r4,r23,65535
 800f300:	8004c100 	call	8004c10 <__mulsi3>
 800f304:	9c7fffcc 	andi	r17,r19,65535
 800f308:	8885883a 	add	r2,r17,r2
 800f30c:	b808d43a 	srli	r4,r23,16
 800f310:	14a3883a 	add	r17,r2,r18
 800f314:	9826d43a 	srli	r19,r19,16
 800f318:	8824d43a 	srli	r18,r17,16
 800f31c:	800b883a 	mov	r5,r16
 800f320:	8004c100 	call	8004c10 <__mulsi3>
 800f324:	9885883a 	add	r2,r19,r2
 800f328:	14a7883a 	add	r19,r2,r18
 800f32c:	88ffffcc 	andi	r3,r17,65535
 800f330:	9822943a 	slli	r17,r19,16
 800f334:	ad400104 	addi	r21,r21,4
 800f338:	b005883a 	mov	r2,r22
 800f33c:	88c6b03a 	or	r3,r17,r3
 800f340:	b0c00015 	stw	r3,0(r22)
 800f344:	9824d43a 	srli	r18,r19,16
 800f348:	b5800104 	addi	r22,r22,4
 800f34c:	ad3fe836 	bltu	r21,r20,800f2f0 <__alt_data_end+0xfc00f2f0>
 800f350:	d8c00017 	ldw	r3,0(sp)
 800f354:	14800115 	stw	r18,4(r2)
 800f358:	1c800017 	ldw	r18,0(r3)
 800f35c:	9024d43a 	srli	r18,r18,16
 800f360:	90002226 	beq	r18,zero,800f3ec <__multiply+0x1e8>
 800f364:	d8c00117 	ldw	r3,4(sp)
 800f368:	dd800417 	ldw	r22,16(sp)
 800f36c:	002f883a 	mov	r23,zero
 800f370:	1f000017 	ldw	fp,0(r3)
 800f374:	1823883a 	mov	r17,r3
 800f378:	182b883a 	mov	r21,r3
 800f37c:	e021883a 	mov	r16,fp
 800f380:	00000106 	br	800f388 <__multiply+0x184>
 800f384:	982b883a 	mov	r21,r19
 800f388:	b100000b 	ldhu	r4,0(r22)
 800f38c:	8020d43a 	srli	r16,r16,16
 800f390:	900b883a 	mov	r5,r18
 800f394:	8004c100 	call	8004c10 <__mulsi3>
 800f398:	1405883a 	add	r2,r2,r16
 800f39c:	15ef883a 	add	r23,r2,r23
 800f3a0:	b804943a 	slli	r2,r23,16
 800f3a4:	e0ffffcc 	andi	r3,fp,65535
 800f3a8:	8c400104 	addi	r17,r17,4
 800f3ac:	10c6b03a 	or	r3,r2,r3
 800f3b0:	88ffff15 	stw	r3,-4(r17)
 800f3b4:	b5800104 	addi	r22,r22,4
 800f3b8:	b13fff17 	ldw	r4,-4(r22)
 800f3bc:	acc00104 	addi	r19,r21,4
 800f3c0:	900b883a 	mov	r5,r18
 800f3c4:	2008d43a 	srli	r4,r4,16
 800f3c8:	9c000017 	ldw	r16,0(r19)
 800f3cc:	8004c100 	call	8004c10 <__mulsi3>
 800f3d0:	b806d43a 	srli	r3,r23,16
 800f3d4:	813fffcc 	andi	r4,r16,65535
 800f3d8:	1105883a 	add	r2,r2,r4
 800f3dc:	10f9883a 	add	fp,r2,r3
 800f3e0:	e02ed43a 	srli	r23,fp,16
 800f3e4:	b53fe736 	bltu	r22,r20,800f384 <__alt_data_end+0xfc00f384>
 800f3e8:	af000115 	stw	fp,4(r21)
 800f3ec:	d8c00017 	ldw	r3,0(sp)
 800f3f0:	d9000517 	ldw	r4,20(sp)
 800f3f4:	18c00104 	addi	r3,r3,4
 800f3f8:	d8c00015 	stw	r3,0(sp)
 800f3fc:	d8c00117 	ldw	r3,4(sp)
 800f400:	18c00104 	addi	r3,r3,4
 800f404:	d8c00115 	stw	r3,4(sp)
 800f408:	d8c00017 	ldw	r3,0(sp)
 800f40c:	193fb136 	bltu	r3,r4,800f2d4 <__alt_data_end+0xfc00f2d4>
 800f410:	d8c00217 	ldw	r3,8(sp)
 800f414:	00c00c0e 	bge	zero,r3,800f448 <__multiply+0x244>
 800f418:	d8c00317 	ldw	r3,12(sp)
 800f41c:	18bfff17 	ldw	r2,-4(r3)
 800f420:	1d7fff04 	addi	r21,r3,-4
 800f424:	10000326 	beq	r2,zero,800f434 <__multiply+0x230>
 800f428:	00000706 	br	800f448 <__multiply+0x244>
 800f42c:	a8800017 	ldw	r2,0(r21)
 800f430:	1000051e 	bne	r2,zero,800f448 <__multiply+0x244>
 800f434:	d8c00217 	ldw	r3,8(sp)
 800f438:	ad7fff04 	addi	r21,r21,-4
 800f43c:	18ffffc4 	addi	r3,r3,-1
 800f440:	d8c00215 	stw	r3,8(sp)
 800f444:	183ff91e 	bne	r3,zero,800f42c <__alt_data_end+0xfc00f42c>
 800f448:	d8c00617 	ldw	r3,24(sp)
 800f44c:	d9000217 	ldw	r4,8(sp)
 800f450:	1805883a 	mov	r2,r3
 800f454:	19000415 	stw	r4,16(r3)
 800f458:	dfc01017 	ldw	ra,64(sp)
 800f45c:	df000f17 	ldw	fp,60(sp)
 800f460:	ddc00e17 	ldw	r23,56(sp)
 800f464:	dd800d17 	ldw	r22,52(sp)
 800f468:	dd400c17 	ldw	r21,48(sp)
 800f46c:	dd000b17 	ldw	r20,44(sp)
 800f470:	dcc00a17 	ldw	r19,40(sp)
 800f474:	dc800917 	ldw	r18,36(sp)
 800f478:	dc400817 	ldw	r17,32(sp)
 800f47c:	dc000717 	ldw	r16,28(sp)
 800f480:	dec01104 	addi	sp,sp,68
 800f484:	f800283a 	ret
 800f488:	3025883a 	mov	r18,r6
 800f48c:	282d883a 	mov	r22,r5
 800f490:	003f6f06 	br	800f250 <__alt_data_end+0xfc00f250>

0800f494 <__pow5mult>:
 800f494:	defffa04 	addi	sp,sp,-24
 800f498:	dcc00315 	stw	r19,12(sp)
 800f49c:	dc800215 	stw	r18,8(sp)
 800f4a0:	dc000015 	stw	r16,0(sp)
 800f4a4:	dfc00515 	stw	ra,20(sp)
 800f4a8:	dd000415 	stw	r20,16(sp)
 800f4ac:	dc400115 	stw	r17,4(sp)
 800f4b0:	308000cc 	andi	r2,r6,3
 800f4b4:	3021883a 	mov	r16,r6
 800f4b8:	2027883a 	mov	r19,r4
 800f4bc:	2825883a 	mov	r18,r5
 800f4c0:	10002e1e 	bne	r2,zero,800f57c <__pow5mult+0xe8>
 800f4c4:	8021d0ba 	srai	r16,r16,2
 800f4c8:	80001a26 	beq	r16,zero,800f534 <__pow5mult+0xa0>
 800f4cc:	9c401217 	ldw	r17,72(r19)
 800f4d0:	8800061e 	bne	r17,zero,800f4ec <__pow5mult+0x58>
 800f4d4:	00003406 	br	800f5a8 <__pow5mult+0x114>
 800f4d8:	8021d07a 	srai	r16,r16,1
 800f4dc:	80001526 	beq	r16,zero,800f534 <__pow5mult+0xa0>
 800f4e0:	88800017 	ldw	r2,0(r17)
 800f4e4:	10001c26 	beq	r2,zero,800f558 <__pow5mult+0xc4>
 800f4e8:	1023883a 	mov	r17,r2
 800f4ec:	80c0004c 	andi	r3,r16,1
 800f4f0:	183ff926 	beq	r3,zero,800f4d8 <__alt_data_end+0xfc00f4d8>
 800f4f4:	900b883a 	mov	r5,r18
 800f4f8:	880d883a 	mov	r6,r17
 800f4fc:	9809883a 	mov	r4,r19
 800f500:	800f2040 	call	800f204 <__multiply>
 800f504:	90001b26 	beq	r18,zero,800f574 <__pow5mult+0xe0>
 800f508:	91c00117 	ldw	r7,4(r18)
 800f50c:	98c01317 	ldw	r3,76(r19)
 800f510:	8021d07a 	srai	r16,r16,1
 800f514:	39cf883a 	add	r7,r7,r7
 800f518:	39cf883a 	add	r7,r7,r7
 800f51c:	19c7883a 	add	r3,r3,r7
 800f520:	19000017 	ldw	r4,0(r3)
 800f524:	91000015 	stw	r4,0(r18)
 800f528:	1c800015 	stw	r18,0(r3)
 800f52c:	1025883a 	mov	r18,r2
 800f530:	803feb1e 	bne	r16,zero,800f4e0 <__alt_data_end+0xfc00f4e0>
 800f534:	9005883a 	mov	r2,r18
 800f538:	dfc00517 	ldw	ra,20(sp)
 800f53c:	dd000417 	ldw	r20,16(sp)
 800f540:	dcc00317 	ldw	r19,12(sp)
 800f544:	dc800217 	ldw	r18,8(sp)
 800f548:	dc400117 	ldw	r17,4(sp)
 800f54c:	dc000017 	ldw	r16,0(sp)
 800f550:	dec00604 	addi	sp,sp,24
 800f554:	f800283a 	ret
 800f558:	9809883a 	mov	r4,r19
 800f55c:	880b883a 	mov	r5,r17
 800f560:	880d883a 	mov	r6,r17
 800f564:	800f2040 	call	800f204 <__multiply>
 800f568:	88800015 	stw	r2,0(r17)
 800f56c:	10000015 	stw	zero,0(r2)
 800f570:	003fdd06 	br	800f4e8 <__alt_data_end+0xfc00f4e8>
 800f574:	1025883a 	mov	r18,r2
 800f578:	003fd706 	br	800f4d8 <__alt_data_end+0xfc00f4d8>
 800f57c:	10bfffc4 	addi	r2,r2,-1
 800f580:	1085883a 	add	r2,r2,r2
 800f584:	00c200b4 	movhi	r3,2050
 800f588:	18cdbb04 	addi	r3,r3,14060
 800f58c:	1085883a 	add	r2,r2,r2
 800f590:	1885883a 	add	r2,r3,r2
 800f594:	11800017 	ldw	r6,0(r2)
 800f598:	000f883a 	mov	r7,zero
 800f59c:	800ee700 	call	800ee70 <__multadd>
 800f5a0:	1025883a 	mov	r18,r2
 800f5a4:	003fc706 	br	800f4c4 <__alt_data_end+0xfc00f4c4>
 800f5a8:	05000044 	movi	r20,1
 800f5ac:	9809883a 	mov	r4,r19
 800f5b0:	a00b883a 	mov	r5,r20
 800f5b4:	800eda00 	call	800eda0 <_Balloc>
 800f5b8:	1023883a 	mov	r17,r2
 800f5bc:	00809c44 	movi	r2,625
 800f5c0:	88800515 	stw	r2,20(r17)
 800f5c4:	8d000415 	stw	r20,16(r17)
 800f5c8:	9c401215 	stw	r17,72(r19)
 800f5cc:	88000015 	stw	zero,0(r17)
 800f5d0:	003fc606 	br	800f4ec <__alt_data_end+0xfc00f4ec>

0800f5d4 <__lshift>:
 800f5d4:	defff904 	addi	sp,sp,-28
 800f5d8:	dd000415 	stw	r20,16(sp)
 800f5dc:	dcc00315 	stw	r19,12(sp)
 800f5e0:	3029d17a 	srai	r20,r6,5
 800f5e4:	2cc00417 	ldw	r19,16(r5)
 800f5e8:	28800217 	ldw	r2,8(r5)
 800f5ec:	dd400515 	stw	r21,20(sp)
 800f5f0:	a4e7883a 	add	r19,r20,r19
 800f5f4:	dc800215 	stw	r18,8(sp)
 800f5f8:	dc400115 	stw	r17,4(sp)
 800f5fc:	dc000015 	stw	r16,0(sp)
 800f600:	dfc00615 	stw	ra,24(sp)
 800f604:	9c000044 	addi	r16,r19,1
 800f608:	2823883a 	mov	r17,r5
 800f60c:	302b883a 	mov	r21,r6
 800f610:	2025883a 	mov	r18,r4
 800f614:	29400117 	ldw	r5,4(r5)
 800f618:	1400030e 	bge	r2,r16,800f628 <__lshift+0x54>
 800f61c:	1085883a 	add	r2,r2,r2
 800f620:	29400044 	addi	r5,r5,1
 800f624:	143ffd16 	blt	r2,r16,800f61c <__alt_data_end+0xfc00f61c>
 800f628:	9009883a 	mov	r4,r18
 800f62c:	800eda00 	call	800eda0 <_Balloc>
 800f630:	11c00504 	addi	r7,r2,20
 800f634:	0500090e 	bge	zero,r20,800f65c <__lshift+0x88>
 800f638:	3811883a 	mov	r8,r7
 800f63c:	0007883a 	mov	r3,zero
 800f640:	40000015 	stw	zero,0(r8)
 800f644:	18c00044 	addi	r3,r3,1
 800f648:	42000104 	addi	r8,r8,4
 800f64c:	1d3ffc1e 	bne	r3,r20,800f640 <__alt_data_end+0xfc00f640>
 800f650:	18c7883a 	add	r3,r3,r3
 800f654:	18c7883a 	add	r3,r3,r3
 800f658:	38cf883a 	add	r7,r7,r3
 800f65c:	89000417 	ldw	r4,16(r17)
 800f660:	88c00504 	addi	r3,r17,20
 800f664:	a98007cc 	andi	r6,r21,31
 800f668:	2109883a 	add	r4,r4,r4
 800f66c:	2109883a 	add	r4,r4,r4
 800f670:	1909883a 	add	r4,r3,r4
 800f674:	30002326 	beq	r6,zero,800f704 <__lshift+0x130>
 800f678:	01400804 	movi	r5,32
 800f67c:	298bc83a 	sub	r5,r5,r6
 800f680:	0013883a 	mov	r9,zero
 800f684:	1a000017 	ldw	r8,0(r3)
 800f688:	3815883a 	mov	r10,r7
 800f68c:	39c00104 	addi	r7,r7,4
 800f690:	4190983a 	sll	r8,r8,r6
 800f694:	18c00104 	addi	r3,r3,4
 800f698:	4a10b03a 	or	r8,r9,r8
 800f69c:	3a3fff15 	stw	r8,-4(r7)
 800f6a0:	1a3fff17 	ldw	r8,-4(r3)
 800f6a4:	4152d83a 	srl	r9,r8,r5
 800f6a8:	193ff636 	bltu	r3,r4,800f684 <__alt_data_end+0xfc00f684>
 800f6ac:	52400115 	stw	r9,4(r10)
 800f6b0:	48000126 	beq	r9,zero,800f6b8 <__lshift+0xe4>
 800f6b4:	9c000084 	addi	r16,r19,2
 800f6b8:	89000117 	ldw	r4,4(r17)
 800f6bc:	90c01317 	ldw	r3,76(r18)
 800f6c0:	843fffc4 	addi	r16,r16,-1
 800f6c4:	2109883a 	add	r4,r4,r4
 800f6c8:	2109883a 	add	r4,r4,r4
 800f6cc:	1907883a 	add	r3,r3,r4
 800f6d0:	19000017 	ldw	r4,0(r3)
 800f6d4:	14000415 	stw	r16,16(r2)
 800f6d8:	89000015 	stw	r4,0(r17)
 800f6dc:	1c400015 	stw	r17,0(r3)
 800f6e0:	dfc00617 	ldw	ra,24(sp)
 800f6e4:	dd400517 	ldw	r21,20(sp)
 800f6e8:	dd000417 	ldw	r20,16(sp)
 800f6ec:	dcc00317 	ldw	r19,12(sp)
 800f6f0:	dc800217 	ldw	r18,8(sp)
 800f6f4:	dc400117 	ldw	r17,4(sp)
 800f6f8:	dc000017 	ldw	r16,0(sp)
 800f6fc:	dec00704 	addi	sp,sp,28
 800f700:	f800283a 	ret
 800f704:	19400017 	ldw	r5,0(r3)
 800f708:	39c00104 	addi	r7,r7,4
 800f70c:	18c00104 	addi	r3,r3,4
 800f710:	397fff15 	stw	r5,-4(r7)
 800f714:	193ffb36 	bltu	r3,r4,800f704 <__alt_data_end+0xfc00f704>
 800f718:	003fe706 	br	800f6b8 <__alt_data_end+0xfc00f6b8>

0800f71c <__mcmp>:
 800f71c:	20800417 	ldw	r2,16(r4)
 800f720:	28c00417 	ldw	r3,16(r5)
 800f724:	10c5c83a 	sub	r2,r2,r3
 800f728:	1000111e 	bne	r2,zero,800f770 <__mcmp+0x54>
 800f72c:	18c7883a 	add	r3,r3,r3
 800f730:	18c7883a 	add	r3,r3,r3
 800f734:	21000504 	addi	r4,r4,20
 800f738:	29400504 	addi	r5,r5,20
 800f73c:	20c5883a 	add	r2,r4,r3
 800f740:	28cb883a 	add	r5,r5,r3
 800f744:	00000106 	br	800f74c <__mcmp+0x30>
 800f748:	20800a2e 	bgeu	r4,r2,800f774 <__mcmp+0x58>
 800f74c:	10bfff04 	addi	r2,r2,-4
 800f750:	297fff04 	addi	r5,r5,-4
 800f754:	11800017 	ldw	r6,0(r2)
 800f758:	28c00017 	ldw	r3,0(r5)
 800f75c:	30fffa26 	beq	r6,r3,800f748 <__alt_data_end+0xfc00f748>
 800f760:	30c00236 	bltu	r6,r3,800f76c <__mcmp+0x50>
 800f764:	00800044 	movi	r2,1
 800f768:	f800283a 	ret
 800f76c:	00bfffc4 	movi	r2,-1
 800f770:	f800283a 	ret
 800f774:	0005883a 	mov	r2,zero
 800f778:	f800283a 	ret

0800f77c <__mdiff>:
 800f77c:	defffb04 	addi	sp,sp,-20
 800f780:	dc000015 	stw	r16,0(sp)
 800f784:	2821883a 	mov	r16,r5
 800f788:	dcc00315 	stw	r19,12(sp)
 800f78c:	300b883a 	mov	r5,r6
 800f790:	2027883a 	mov	r19,r4
 800f794:	8009883a 	mov	r4,r16
 800f798:	dc800215 	stw	r18,8(sp)
 800f79c:	dfc00415 	stw	ra,16(sp)
 800f7a0:	dc400115 	stw	r17,4(sp)
 800f7a4:	3025883a 	mov	r18,r6
 800f7a8:	800f71c0 	call	800f71c <__mcmp>
 800f7ac:	10005226 	beq	r2,zero,800f8f8 <__mdiff+0x17c>
 800f7b0:	10004c16 	blt	r2,zero,800f8e4 <__mdiff+0x168>
 800f7b4:	0023883a 	mov	r17,zero
 800f7b8:	81400117 	ldw	r5,4(r16)
 800f7bc:	9809883a 	mov	r4,r19
 800f7c0:	800eda00 	call	800eda0 <_Balloc>
 800f7c4:	83400417 	ldw	r13,16(r16)
 800f7c8:	93800417 	ldw	r14,16(r18)
 800f7cc:	81000504 	addi	r4,r16,20
 800f7d0:	6b59883a 	add	r12,r13,r13
 800f7d4:	739d883a 	add	r14,r14,r14
 800f7d8:	6319883a 	add	r12,r12,r12
 800f7dc:	91800504 	addi	r6,r18,20
 800f7e0:	739d883a 	add	r14,r14,r14
 800f7e4:	14400315 	stw	r17,12(r2)
 800f7e8:	2319883a 	add	r12,r4,r12
 800f7ec:	339d883a 	add	r14,r6,r14
 800f7f0:	12400504 	addi	r9,r2,20
 800f7f4:	0007883a 	mov	r3,zero
 800f7f8:	22000017 	ldw	r8,0(r4)
 800f7fc:	32800017 	ldw	r10,0(r6)
 800f800:	4ac00104 	addi	r11,r9,4
 800f804:	41ffffcc 	andi	r7,r8,65535
 800f808:	38c7883a 	add	r3,r7,r3
 800f80c:	51ffffcc 	andi	r7,r10,65535
 800f810:	19cfc83a 	sub	r7,r3,r7
 800f814:	4010d43a 	srli	r8,r8,16
 800f818:	5014d43a 	srli	r10,r10,16
 800f81c:	3807d43a 	srai	r3,r7,16
 800f820:	39ffffcc 	andi	r7,r7,65535
 800f824:	4291c83a 	sub	r8,r8,r10
 800f828:	40c7883a 	add	r3,r8,r3
 800f82c:	1810943a 	slli	r8,r3,16
 800f830:	31800104 	addi	r6,r6,4
 800f834:	21000104 	addi	r4,r4,4
 800f838:	41ceb03a 	or	r7,r8,r7
 800f83c:	49c00015 	stw	r7,0(r9)
 800f840:	1807d43a 	srai	r3,r3,16
 800f844:	580b883a 	mov	r5,r11
 800f848:	5813883a 	mov	r9,r11
 800f84c:	33bfea36 	bltu	r6,r14,800f7f8 <__alt_data_end+0xfc00f7f8>
 800f850:	2011883a 	mov	r8,r4
 800f854:	2300152e 	bgeu	r4,r12,800f8ac <__mdiff+0x130>
 800f858:	21400017 	ldw	r5,0(r4)
 800f85c:	4a400104 	addi	r9,r9,4
 800f860:	21000104 	addi	r4,r4,4
 800f864:	29ffffcc 	andi	r7,r5,65535
 800f868:	38c7883a 	add	r3,r7,r3
 800f86c:	280ad43a 	srli	r5,r5,16
 800f870:	180dd43a 	srai	r6,r3,16
 800f874:	19ffffcc 	andi	r7,r3,65535
 800f878:	3147883a 	add	r3,r6,r5
 800f87c:	180a943a 	slli	r5,r3,16
 800f880:	1807d43a 	srai	r3,r3,16
 800f884:	29ceb03a 	or	r7,r5,r7
 800f888:	49ffff15 	stw	r7,-4(r9)
 800f88c:	233ff236 	bltu	r4,r12,800f858 <__alt_data_end+0xfc00f858>
 800f890:	0206303a 	nor	r3,zero,r8
 800f894:	1b07883a 	add	r3,r3,r12
 800f898:	1806d0ba 	srli	r3,r3,2
 800f89c:	18c00044 	addi	r3,r3,1
 800f8a0:	18c7883a 	add	r3,r3,r3
 800f8a4:	18c7883a 	add	r3,r3,r3
 800f8a8:	58cb883a 	add	r5,r11,r3
 800f8ac:	28ffff04 	addi	r3,r5,-4
 800f8b0:	3800041e 	bne	r7,zero,800f8c4 <__mdiff+0x148>
 800f8b4:	18ffff04 	addi	r3,r3,-4
 800f8b8:	19000017 	ldw	r4,0(r3)
 800f8bc:	6b7fffc4 	addi	r13,r13,-1
 800f8c0:	203ffc26 	beq	r4,zero,800f8b4 <__alt_data_end+0xfc00f8b4>
 800f8c4:	13400415 	stw	r13,16(r2)
 800f8c8:	dfc00417 	ldw	ra,16(sp)
 800f8cc:	dcc00317 	ldw	r19,12(sp)
 800f8d0:	dc800217 	ldw	r18,8(sp)
 800f8d4:	dc400117 	ldw	r17,4(sp)
 800f8d8:	dc000017 	ldw	r16,0(sp)
 800f8dc:	dec00504 	addi	sp,sp,20
 800f8e0:	f800283a 	ret
 800f8e4:	8005883a 	mov	r2,r16
 800f8e8:	04400044 	movi	r17,1
 800f8ec:	9021883a 	mov	r16,r18
 800f8f0:	1025883a 	mov	r18,r2
 800f8f4:	003fb006 	br	800f7b8 <__alt_data_end+0xfc00f7b8>
 800f8f8:	9809883a 	mov	r4,r19
 800f8fc:	000b883a 	mov	r5,zero
 800f900:	800eda00 	call	800eda0 <_Balloc>
 800f904:	00c00044 	movi	r3,1
 800f908:	10c00415 	stw	r3,16(r2)
 800f90c:	10000515 	stw	zero,20(r2)
 800f910:	003fed06 	br	800f8c8 <__alt_data_end+0xfc00f8c8>

0800f914 <__ulp>:
 800f914:	295ffc2c 	andhi	r5,r5,32752
 800f918:	00bf3034 	movhi	r2,64704
 800f91c:	2887883a 	add	r3,r5,r2
 800f920:	00c0020e 	bge	zero,r3,800f92c <__ulp+0x18>
 800f924:	0005883a 	mov	r2,zero
 800f928:	f800283a 	ret
 800f92c:	00c7c83a 	sub	r3,zero,r3
 800f930:	180bd53a 	srai	r5,r3,20
 800f934:	008004c4 	movi	r2,19
 800f938:	11400a0e 	bge	r2,r5,800f964 <__ulp+0x50>
 800f93c:	00800c84 	movi	r2,50
 800f940:	0007883a 	mov	r3,zero
 800f944:	11400516 	blt	r2,r5,800f95c <__ulp+0x48>
 800f948:	00800cc4 	movi	r2,51
 800f94c:	114bc83a 	sub	r5,r2,r5
 800f950:	00800044 	movi	r2,1
 800f954:	1144983a 	sll	r2,r2,r5
 800f958:	f800283a 	ret
 800f95c:	00800044 	movi	r2,1
 800f960:	f800283a 	ret
 800f964:	00800234 	movhi	r2,8
 800f968:	1147d83a 	sra	r3,r2,r5
 800f96c:	0005883a 	mov	r2,zero
 800f970:	f800283a 	ret

0800f974 <__b2d>:
 800f974:	defffa04 	addi	sp,sp,-24
 800f978:	dc000015 	stw	r16,0(sp)
 800f97c:	24000417 	ldw	r16,16(r4)
 800f980:	dc400115 	stw	r17,4(sp)
 800f984:	24400504 	addi	r17,r4,20
 800f988:	8421883a 	add	r16,r16,r16
 800f98c:	8421883a 	add	r16,r16,r16
 800f990:	8c21883a 	add	r16,r17,r16
 800f994:	dc800215 	stw	r18,8(sp)
 800f998:	84bfff17 	ldw	r18,-4(r16)
 800f99c:	dd000415 	stw	r20,16(sp)
 800f9a0:	dcc00315 	stw	r19,12(sp)
 800f9a4:	9009883a 	mov	r4,r18
 800f9a8:	2829883a 	mov	r20,r5
 800f9ac:	dfc00515 	stw	ra,20(sp)
 800f9b0:	800f0b00 	call	800f0b0 <__hi0bits>
 800f9b4:	00c00804 	movi	r3,32
 800f9b8:	1887c83a 	sub	r3,r3,r2
 800f9bc:	a0c00015 	stw	r3,0(r20)
 800f9c0:	00c00284 	movi	r3,10
 800f9c4:	84ffff04 	addi	r19,r16,-4
 800f9c8:	18801216 	blt	r3,r2,800fa14 <__b2d+0xa0>
 800f9cc:	014002c4 	movi	r5,11
 800f9d0:	2889c83a 	sub	r4,r5,r2
 800f9d4:	9106d83a 	srl	r3,r18,r4
 800f9d8:	18cffc34 	orhi	r3,r3,16368
 800f9dc:	8cc0282e 	bgeu	r17,r19,800fa80 <__b2d+0x10c>
 800f9e0:	817ffe17 	ldw	r5,-8(r16)
 800f9e4:	290ad83a 	srl	r5,r5,r4
 800f9e8:	10800544 	addi	r2,r2,21
 800f9ec:	9084983a 	sll	r2,r18,r2
 800f9f0:	2884b03a 	or	r2,r5,r2
 800f9f4:	dfc00517 	ldw	ra,20(sp)
 800f9f8:	dd000417 	ldw	r20,16(sp)
 800f9fc:	dcc00317 	ldw	r19,12(sp)
 800fa00:	dc800217 	ldw	r18,8(sp)
 800fa04:	dc400117 	ldw	r17,4(sp)
 800fa08:	dc000017 	ldw	r16,0(sp)
 800fa0c:	dec00604 	addi	sp,sp,24
 800fa10:	f800283a 	ret
 800fa14:	113ffd44 	addi	r4,r2,-11
 800fa18:	8cc00f2e 	bgeu	r17,r19,800fa58 <__b2d+0xe4>
 800fa1c:	81bffe04 	addi	r6,r16,-8
 800fa20:	817ffe17 	ldw	r5,-8(r16)
 800fa24:	20001326 	beq	r4,zero,800fa74 <__b2d+0x100>
 800fa28:	00c00ac4 	movi	r3,43
 800fa2c:	1885c83a 	sub	r2,r3,r2
 800fa30:	2886d83a 	srl	r3,r5,r2
 800fa34:	9124983a 	sll	r18,r18,r4
 800fa38:	90e4b03a 	or	r18,r18,r3
 800fa3c:	90cffc34 	orhi	r3,r18,16368
 800fa40:	8980112e 	bgeu	r17,r6,800fa88 <__b2d+0x114>
 800fa44:	81bffd17 	ldw	r6,-12(r16)
 800fa48:	308cd83a 	srl	r6,r6,r2
 800fa4c:	2904983a 	sll	r2,r5,r4
 800fa50:	1184b03a 	or	r2,r2,r6
 800fa54:	003fe706 	br	800f9f4 <__alt_data_end+0xfc00f9f4>
 800fa58:	20000526 	beq	r4,zero,800fa70 <__b2d+0xfc>
 800fa5c:	9124983a 	sll	r18,r18,r4
 800fa60:	000d883a 	mov	r6,zero
 800fa64:	000b883a 	mov	r5,zero
 800fa68:	90cffc34 	orhi	r3,r18,16368
 800fa6c:	003ff706 	br	800fa4c <__alt_data_end+0xfc00fa4c>
 800fa70:	000b883a 	mov	r5,zero
 800fa74:	90cffc34 	orhi	r3,r18,16368
 800fa78:	2805883a 	mov	r2,r5
 800fa7c:	003fdd06 	br	800f9f4 <__alt_data_end+0xfc00f9f4>
 800fa80:	000b883a 	mov	r5,zero
 800fa84:	003fd806 	br	800f9e8 <__alt_data_end+0xfc00f9e8>
 800fa88:	000d883a 	mov	r6,zero
 800fa8c:	003fef06 	br	800fa4c <__alt_data_end+0xfc00fa4c>

0800fa90 <__d2b>:
 800fa90:	defff704 	addi	sp,sp,-36
 800fa94:	dc000215 	stw	r16,8(sp)
 800fa98:	3021883a 	mov	r16,r6
 800fa9c:	dc400315 	stw	r17,12(sp)
 800faa0:	8022907a 	slli	r17,r16,1
 800faa4:	dd400715 	stw	r21,28(sp)
 800faa8:	282b883a 	mov	r21,r5
 800faac:	01400044 	movi	r5,1
 800fab0:	dd000615 	stw	r20,24(sp)
 800fab4:	dcc00515 	stw	r19,20(sp)
 800fab8:	dc800415 	stw	r18,16(sp)
 800fabc:	dfc00815 	stw	ra,32(sp)
 800fac0:	3829883a 	mov	r20,r7
 800fac4:	dc800917 	ldw	r18,36(sp)
 800fac8:	8822d57a 	srli	r17,r17,21
 800facc:	800eda00 	call	800eda0 <_Balloc>
 800fad0:	1027883a 	mov	r19,r2
 800fad4:	00800434 	movhi	r2,16
 800fad8:	10bfffc4 	addi	r2,r2,-1
 800fadc:	808c703a 	and	r6,r16,r2
 800fae0:	88000126 	beq	r17,zero,800fae8 <__d2b+0x58>
 800fae4:	31800434 	orhi	r6,r6,16
 800fae8:	d9800015 	stw	r6,0(sp)
 800faec:	a8001f26 	beq	r21,zero,800fb6c <__d2b+0xdc>
 800faf0:	d9000104 	addi	r4,sp,4
 800faf4:	dd400115 	stw	r21,4(sp)
 800faf8:	800f1180 	call	800f118 <__lo0bits>
 800fafc:	d8c00017 	ldw	r3,0(sp)
 800fb00:	1000291e 	bne	r2,zero,800fba8 <__d2b+0x118>
 800fb04:	d9000117 	ldw	r4,4(sp)
 800fb08:	99000515 	stw	r4,20(r19)
 800fb0c:	1820c03a 	cmpne	r16,r3,zero
 800fb10:	84000044 	addi	r16,r16,1
 800fb14:	98c00615 	stw	r3,24(r19)
 800fb18:	9c000415 	stw	r16,16(r19)
 800fb1c:	88001b1e 	bne	r17,zero,800fb8c <__d2b+0xfc>
 800fb20:	800690ba 	slli	r3,r16,2
 800fb24:	10bef384 	addi	r2,r2,-1074
 800fb28:	a0800015 	stw	r2,0(r20)
 800fb2c:	98c5883a 	add	r2,r19,r3
 800fb30:	11000417 	ldw	r4,16(r2)
 800fb34:	8020917a 	slli	r16,r16,5
 800fb38:	800f0b00 	call	800f0b0 <__hi0bits>
 800fb3c:	8085c83a 	sub	r2,r16,r2
 800fb40:	90800015 	stw	r2,0(r18)
 800fb44:	9805883a 	mov	r2,r19
 800fb48:	dfc00817 	ldw	ra,32(sp)
 800fb4c:	dd400717 	ldw	r21,28(sp)
 800fb50:	dd000617 	ldw	r20,24(sp)
 800fb54:	dcc00517 	ldw	r19,20(sp)
 800fb58:	dc800417 	ldw	r18,16(sp)
 800fb5c:	dc400317 	ldw	r17,12(sp)
 800fb60:	dc000217 	ldw	r16,8(sp)
 800fb64:	dec00904 	addi	sp,sp,36
 800fb68:	f800283a 	ret
 800fb6c:	d809883a 	mov	r4,sp
 800fb70:	800f1180 	call	800f118 <__lo0bits>
 800fb74:	d8c00017 	ldw	r3,0(sp)
 800fb78:	04000044 	movi	r16,1
 800fb7c:	9c000415 	stw	r16,16(r19)
 800fb80:	98c00515 	stw	r3,20(r19)
 800fb84:	10800804 	addi	r2,r2,32
 800fb88:	883fe526 	beq	r17,zero,800fb20 <__alt_data_end+0xfc00fb20>
 800fb8c:	8c7ef344 	addi	r17,r17,-1075
 800fb90:	88a3883a 	add	r17,r17,r2
 800fb94:	00c00d44 	movi	r3,53
 800fb98:	a4400015 	stw	r17,0(r20)
 800fb9c:	1885c83a 	sub	r2,r3,r2
 800fba0:	90800015 	stw	r2,0(r18)
 800fba4:	003fe706 	br	800fb44 <__alt_data_end+0xfc00fb44>
 800fba8:	01000804 	movi	r4,32
 800fbac:	2089c83a 	sub	r4,r4,r2
 800fbb0:	1908983a 	sll	r4,r3,r4
 800fbb4:	d9400117 	ldw	r5,4(sp)
 800fbb8:	1886d83a 	srl	r3,r3,r2
 800fbbc:	2148b03a 	or	r4,r4,r5
 800fbc0:	99000515 	stw	r4,20(r19)
 800fbc4:	d8c00015 	stw	r3,0(sp)
 800fbc8:	003fd006 	br	800fb0c <__alt_data_end+0xfc00fb0c>

0800fbcc <__ratio>:
 800fbcc:	defff904 	addi	sp,sp,-28
 800fbd0:	dc400315 	stw	r17,12(sp)
 800fbd4:	2823883a 	mov	r17,r5
 800fbd8:	d9400104 	addi	r5,sp,4
 800fbdc:	dfc00615 	stw	ra,24(sp)
 800fbe0:	dcc00515 	stw	r19,20(sp)
 800fbe4:	dc800415 	stw	r18,16(sp)
 800fbe8:	2027883a 	mov	r19,r4
 800fbec:	dc000215 	stw	r16,8(sp)
 800fbf0:	800f9740 	call	800f974 <__b2d>
 800fbf4:	8809883a 	mov	r4,r17
 800fbf8:	d80b883a 	mov	r5,sp
 800fbfc:	1025883a 	mov	r18,r2
 800fc00:	1821883a 	mov	r16,r3
 800fc04:	800f9740 	call	800f974 <__b2d>
 800fc08:	8a400417 	ldw	r9,16(r17)
 800fc0c:	9a000417 	ldw	r8,16(r19)
 800fc10:	100d883a 	mov	r6,r2
 800fc14:	d8800017 	ldw	r2,0(sp)
 800fc18:	4251c83a 	sub	r8,r8,r9
 800fc1c:	4012917a 	slli	r9,r8,5
 800fc20:	da000117 	ldw	r8,4(sp)
 800fc24:	4091c83a 	sub	r8,r8,r2
 800fc28:	4251883a 	add	r8,r8,r9
 800fc2c:	02000d0e 	bge	zero,r8,800fc64 <__ratio+0x98>
 800fc30:	4010953a 	slli	r8,r8,20
 800fc34:	4421883a 	add	r16,r8,r16
 800fc38:	9009883a 	mov	r4,r18
 800fc3c:	800b883a 	mov	r5,r16
 800fc40:	180f883a 	mov	r7,r3
 800fc44:	80052740 	call	8005274 <__divdf3>
 800fc48:	dfc00617 	ldw	ra,24(sp)
 800fc4c:	dcc00517 	ldw	r19,20(sp)
 800fc50:	dc800417 	ldw	r18,16(sp)
 800fc54:	dc400317 	ldw	r17,12(sp)
 800fc58:	dc000217 	ldw	r16,8(sp)
 800fc5c:	dec00704 	addi	sp,sp,28
 800fc60:	f800283a 	ret
 800fc64:	4010953a 	slli	r8,r8,20
 800fc68:	1a07c83a 	sub	r3,r3,r8
 800fc6c:	003ff206 	br	800fc38 <__alt_data_end+0xfc00fc38>

0800fc70 <_mprec_log10>:
 800fc70:	defffe04 	addi	sp,sp,-8
 800fc74:	dc000015 	stw	r16,0(sp)
 800fc78:	dfc00115 	stw	ra,4(sp)
 800fc7c:	008005c4 	movi	r2,23
 800fc80:	2021883a 	mov	r16,r4
 800fc84:	11000d0e 	bge	r2,r4,800fcbc <_mprec_log10+0x4c>
 800fc88:	0005883a 	mov	r2,zero
 800fc8c:	00cffc34 	movhi	r3,16368
 800fc90:	843fffc4 	addi	r16,r16,-1
 800fc94:	1009883a 	mov	r4,r2
 800fc98:	180b883a 	mov	r5,r3
 800fc9c:	000d883a 	mov	r6,zero
 800fca0:	01d00934 	movhi	r7,16420
 800fca4:	8005bf40 	call	8005bf4 <__muldf3>
 800fca8:	803ff91e 	bne	r16,zero,800fc90 <__alt_data_end+0xfc00fc90>
 800fcac:	dfc00117 	ldw	ra,4(sp)
 800fcb0:	dc000017 	ldw	r16,0(sp)
 800fcb4:	dec00204 	addi	sp,sp,8
 800fcb8:	f800283a 	ret
 800fcbc:	202090fa 	slli	r16,r4,3
 800fcc0:	008200b4 	movhi	r2,2050
 800fcc4:	108dd204 	addi	r2,r2,14152
 800fcc8:	1421883a 	add	r16,r2,r16
 800fccc:	80800017 	ldw	r2,0(r16)
 800fcd0:	80c00117 	ldw	r3,4(r16)
 800fcd4:	dfc00117 	ldw	ra,4(sp)
 800fcd8:	dc000017 	ldw	r16,0(sp)
 800fcdc:	dec00204 	addi	sp,sp,8
 800fce0:	f800283a 	ret

0800fce4 <__copybits>:
 800fce4:	297fffc4 	addi	r5,r5,-1
 800fce8:	280fd17a 	srai	r7,r5,5
 800fcec:	30c00417 	ldw	r3,16(r6)
 800fcf0:	30800504 	addi	r2,r6,20
 800fcf4:	39c00044 	addi	r7,r7,1
 800fcf8:	18c7883a 	add	r3,r3,r3
 800fcfc:	39cf883a 	add	r7,r7,r7
 800fd00:	18c7883a 	add	r3,r3,r3
 800fd04:	39cf883a 	add	r7,r7,r7
 800fd08:	10c7883a 	add	r3,r2,r3
 800fd0c:	21cf883a 	add	r7,r4,r7
 800fd10:	10c00d2e 	bgeu	r2,r3,800fd48 <__copybits+0x64>
 800fd14:	200b883a 	mov	r5,r4
 800fd18:	12000017 	ldw	r8,0(r2)
 800fd1c:	29400104 	addi	r5,r5,4
 800fd20:	10800104 	addi	r2,r2,4
 800fd24:	2a3fff15 	stw	r8,-4(r5)
 800fd28:	10fffb36 	bltu	r2,r3,800fd18 <__alt_data_end+0xfc00fd18>
 800fd2c:	1985c83a 	sub	r2,r3,r6
 800fd30:	10bffac4 	addi	r2,r2,-21
 800fd34:	1004d0ba 	srli	r2,r2,2
 800fd38:	10800044 	addi	r2,r2,1
 800fd3c:	1085883a 	add	r2,r2,r2
 800fd40:	1085883a 	add	r2,r2,r2
 800fd44:	2089883a 	add	r4,r4,r2
 800fd48:	21c0032e 	bgeu	r4,r7,800fd58 <__copybits+0x74>
 800fd4c:	20000015 	stw	zero,0(r4)
 800fd50:	21000104 	addi	r4,r4,4
 800fd54:	21fffd36 	bltu	r4,r7,800fd4c <__alt_data_end+0xfc00fd4c>
 800fd58:	f800283a 	ret

0800fd5c <__any_on>:
 800fd5c:	20c00417 	ldw	r3,16(r4)
 800fd60:	2805d17a 	srai	r2,r5,5
 800fd64:	21000504 	addi	r4,r4,20
 800fd68:	18800d0e 	bge	r3,r2,800fda0 <__any_on+0x44>
 800fd6c:	18c7883a 	add	r3,r3,r3
 800fd70:	18c7883a 	add	r3,r3,r3
 800fd74:	20c7883a 	add	r3,r4,r3
 800fd78:	20c0192e 	bgeu	r4,r3,800fde0 <__any_on+0x84>
 800fd7c:	18bfff17 	ldw	r2,-4(r3)
 800fd80:	18ffff04 	addi	r3,r3,-4
 800fd84:	1000041e 	bne	r2,zero,800fd98 <__any_on+0x3c>
 800fd88:	20c0142e 	bgeu	r4,r3,800fddc <__any_on+0x80>
 800fd8c:	18ffff04 	addi	r3,r3,-4
 800fd90:	19400017 	ldw	r5,0(r3)
 800fd94:	283ffc26 	beq	r5,zero,800fd88 <__alt_data_end+0xfc00fd88>
 800fd98:	00800044 	movi	r2,1
 800fd9c:	f800283a 	ret
 800fda0:	10c00a0e 	bge	r2,r3,800fdcc <__any_on+0x70>
 800fda4:	1085883a 	add	r2,r2,r2
 800fda8:	1085883a 	add	r2,r2,r2
 800fdac:	294007cc 	andi	r5,r5,31
 800fdb0:	2087883a 	add	r3,r4,r2
 800fdb4:	283ff026 	beq	r5,zero,800fd78 <__alt_data_end+0xfc00fd78>
 800fdb8:	19800017 	ldw	r6,0(r3)
 800fdbc:	3144d83a 	srl	r2,r6,r5
 800fdc0:	114a983a 	sll	r5,r2,r5
 800fdc4:	29bff41e 	bne	r5,r6,800fd98 <__alt_data_end+0xfc00fd98>
 800fdc8:	003feb06 	br	800fd78 <__alt_data_end+0xfc00fd78>
 800fdcc:	1085883a 	add	r2,r2,r2
 800fdd0:	1085883a 	add	r2,r2,r2
 800fdd4:	2087883a 	add	r3,r4,r2
 800fdd8:	003fe706 	br	800fd78 <__alt_data_end+0xfc00fd78>
 800fddc:	f800283a 	ret
 800fde0:	0005883a 	mov	r2,zero
 800fde4:	f800283a 	ret

0800fde8 <_realloc_r>:
 800fde8:	defff604 	addi	sp,sp,-40
 800fdec:	dcc00315 	stw	r19,12(sp)
 800fdf0:	dc400115 	stw	r17,4(sp)
 800fdf4:	dfc00915 	stw	ra,36(sp)
 800fdf8:	df000815 	stw	fp,32(sp)
 800fdfc:	ddc00715 	stw	r23,28(sp)
 800fe00:	dd800615 	stw	r22,24(sp)
 800fe04:	dd400515 	stw	r21,20(sp)
 800fe08:	dd000415 	stw	r20,16(sp)
 800fe0c:	dc800215 	stw	r18,8(sp)
 800fe10:	dc000015 	stw	r16,0(sp)
 800fe14:	2827883a 	mov	r19,r5
 800fe18:	3023883a 	mov	r17,r6
 800fe1c:	2800bf26 	beq	r5,zero,801011c <_realloc_r+0x334>
 800fe20:	2025883a 	mov	r18,r4
 800fe24:	80161280 	call	8016128 <__malloc_lock>
 800fe28:	98ffff17 	ldw	r3,-4(r19)
 800fe2c:	01bfff04 	movi	r6,-4
 800fe30:	890002c4 	addi	r4,r17,11
 800fe34:	01c00584 	movi	r7,22
 800fe38:	9d7ffe04 	addi	r21,r19,-8
 800fe3c:	19a0703a 	and	r16,r3,r6
 800fe40:	39003f2e 	bgeu	r7,r4,800ff40 <_realloc_r+0x158>
 800fe44:	053ffe04 	movi	r20,-8
 800fe48:	2528703a 	and	r20,r4,r20
 800fe4c:	a00f883a 	mov	r7,r20
 800fe50:	a0008216 	blt	r20,zero,801005c <_realloc_r+0x274>
 800fe54:	a4408136 	bltu	r20,r17,801005c <_realloc_r+0x274>
 800fe58:	81c03c0e 	bge	r16,r7,800ff4c <_realloc_r+0x164>
 800fe5c:	070200b4 	movhi	fp,2050
 800fe60:	e70e2704 	addi	fp,fp,14492
 800fe64:	e1000217 	ldw	r4,8(fp)
 800fe68:	ac05883a 	add	r2,r21,r16
 800fe6c:	2080bf26 	beq	r4,r2,801016c <_realloc_r+0x384>
 800fe70:	11000117 	ldw	r4,4(r2)
 800fe74:	023fff84 	movi	r8,-2
 800fe78:	2210703a 	and	r8,r4,r8
 800fe7c:	1211883a 	add	r8,r2,r8
 800fe80:	41400117 	ldw	r5,4(r8)
 800fe84:	2940004c 	andi	r5,r5,1
 800fe88:	28004a1e 	bne	r5,zero,800ffb4 <_realloc_r+0x1cc>
 800fe8c:	017fff04 	movi	r5,-4
 800fe90:	2148703a 	and	r4,r4,r5
 800fe94:	2409883a 	add	r4,r4,r16
 800fe98:	21c0ad0e 	bge	r4,r7,8010150 <_realloc_r+0x368>
 800fe9c:	18c0004c 	andi	r3,r3,1
 800fea0:	18007f1e 	bne	r3,zero,80100a0 <_realloc_r+0x2b8>
 800fea4:	9dfffe17 	ldw	r23,-8(r19)
 800fea8:	adefc83a 	sub	r23,r21,r23
 800feac:	bd800117 	ldw	r22,4(r23)
 800feb0:	b14a703a 	and	r5,r22,r5
 800feb4:	216d883a 	add	r22,r4,r5
 800feb8:	b1c04516 	blt	r22,r7,800ffd0 <_realloc_r+0x1e8>
 800febc:	10c00317 	ldw	r3,12(r2)
 800fec0:	10800217 	ldw	r2,8(r2)
 800fec4:	81bfff04 	addi	r6,r16,-4
 800fec8:	bc400204 	addi	r17,r23,8
 800fecc:	10c00315 	stw	r3,12(r2)
 800fed0:	18800215 	stw	r2,8(r3)
 800fed4:	b9400217 	ldw	r5,8(r23)
 800fed8:	b8c00317 	ldw	r3,12(r23)
 800fedc:	00800904 	movi	r2,36
 800fee0:	28c00315 	stw	r3,12(r5)
 800fee4:	19400215 	stw	r5,8(r3)
 800fee8:	1180ef36 	bltu	r2,r6,80102a8 <_realloc_r+0x4c0>
 800feec:	008004c4 	movi	r2,19
 800fef0:	1180da2e 	bgeu	r2,r6,801025c <_realloc_r+0x474>
 800fef4:	98800017 	ldw	r2,0(r19)
 800fef8:	b8800215 	stw	r2,8(r23)
 800fefc:	98800117 	ldw	r2,4(r19)
 800ff00:	b8800315 	stw	r2,12(r23)
 800ff04:	008006c4 	movi	r2,27
 800ff08:	1180fc2e 	bgeu	r2,r6,80102fc <_realloc_r+0x514>
 800ff0c:	98800217 	ldw	r2,8(r19)
 800ff10:	b8800415 	stw	r2,16(r23)
 800ff14:	98800317 	ldw	r2,12(r19)
 800ff18:	b8800515 	stw	r2,20(r23)
 800ff1c:	00800904 	movi	r2,36
 800ff20:	3080421e 	bne	r6,r2,801002c <_realloc_r+0x244>
 800ff24:	98800417 	ldw	r2,16(r19)
 800ff28:	9cc00604 	addi	r19,r19,24
 800ff2c:	b8c00804 	addi	r3,r23,32
 800ff30:	b8800615 	stw	r2,24(r23)
 800ff34:	98bfff17 	ldw	r2,-4(r19)
 800ff38:	b8800715 	stw	r2,28(r23)
 800ff3c:	00003d06 	br	8010034 <_realloc_r+0x24c>
 800ff40:	01c00404 	movi	r7,16
 800ff44:	3829883a 	mov	r20,r7
 800ff48:	003fc206 	br	800fe54 <__alt_data_end+0xfc00fe54>
 800ff4c:	9823883a 	mov	r17,r19
 800ff50:	850fc83a 	sub	r7,r16,r20
 800ff54:	008003c4 	movi	r2,15
 800ff58:	18c0004c 	andi	r3,r3,1
 800ff5c:	11c04336 	bltu	r2,r7,801006c <_realloc_r+0x284>
 800ff60:	1c06b03a 	or	r3,r3,r16
 800ff64:	a8c00115 	stw	r3,4(r21)
 800ff68:	ac21883a 	add	r16,r21,r16
 800ff6c:	80c00117 	ldw	r3,4(r16)
 800ff70:	18c00054 	ori	r3,r3,1
 800ff74:	80c00115 	stw	r3,4(r16)
 800ff78:	9009883a 	mov	r4,r18
 800ff7c:	80161480 	call	8016148 <__malloc_unlock>
 800ff80:	8805883a 	mov	r2,r17
 800ff84:	dfc00917 	ldw	ra,36(sp)
 800ff88:	df000817 	ldw	fp,32(sp)
 800ff8c:	ddc00717 	ldw	r23,28(sp)
 800ff90:	dd800617 	ldw	r22,24(sp)
 800ff94:	dd400517 	ldw	r21,20(sp)
 800ff98:	dd000417 	ldw	r20,16(sp)
 800ff9c:	dcc00317 	ldw	r19,12(sp)
 800ffa0:	dc800217 	ldw	r18,8(sp)
 800ffa4:	dc400117 	ldw	r17,4(sp)
 800ffa8:	dc000017 	ldw	r16,0(sp)
 800ffac:	dec00a04 	addi	sp,sp,40
 800ffb0:	f800283a 	ret
 800ffb4:	18c0004c 	andi	r3,r3,1
 800ffb8:	1800391e 	bne	r3,zero,80100a0 <_realloc_r+0x2b8>
 800ffbc:	9dfffe17 	ldw	r23,-8(r19)
 800ffc0:	00bfff04 	movi	r2,-4
 800ffc4:	adefc83a 	sub	r23,r21,r23
 800ffc8:	b9400117 	ldw	r5,4(r23)
 800ffcc:	288a703a 	and	r5,r5,r2
 800ffd0:	2c2d883a 	add	r22,r5,r16
 800ffd4:	b1c03216 	blt	r22,r7,80100a0 <_realloc_r+0x2b8>
 800ffd8:	b8800317 	ldw	r2,12(r23)
 800ffdc:	b8c00217 	ldw	r3,8(r23)
 800ffe0:	81bfff04 	addi	r6,r16,-4
 800ffe4:	01000904 	movi	r4,36
 800ffe8:	18800315 	stw	r2,12(r3)
 800ffec:	10c00215 	stw	r3,8(r2)
 800fff0:	bc400204 	addi	r17,r23,8
 800fff4:	2180ac36 	bltu	r4,r6,80102a8 <_realloc_r+0x4c0>
 800fff8:	008004c4 	movi	r2,19
 800fffc:	1180972e 	bgeu	r2,r6,801025c <_realloc_r+0x474>
 8010000:	98800017 	ldw	r2,0(r19)
 8010004:	b8800215 	stw	r2,8(r23)
 8010008:	98800117 	ldw	r2,4(r19)
 801000c:	b8800315 	stw	r2,12(r23)
 8010010:	008006c4 	movi	r2,27
 8010014:	1180b92e 	bgeu	r2,r6,80102fc <_realloc_r+0x514>
 8010018:	98800217 	ldw	r2,8(r19)
 801001c:	b8800415 	stw	r2,16(r23)
 8010020:	98800317 	ldw	r2,12(r19)
 8010024:	b8800515 	stw	r2,20(r23)
 8010028:	313fbe26 	beq	r6,r4,800ff24 <__alt_data_end+0xfc00ff24>
 801002c:	b8c00604 	addi	r3,r23,24
 8010030:	9cc00404 	addi	r19,r19,16
 8010034:	98800017 	ldw	r2,0(r19)
 8010038:	b021883a 	mov	r16,r22
 801003c:	b82b883a 	mov	r21,r23
 8010040:	18800015 	stw	r2,0(r3)
 8010044:	98800117 	ldw	r2,4(r19)
 8010048:	18800115 	stw	r2,4(r3)
 801004c:	98800217 	ldw	r2,8(r19)
 8010050:	18800215 	stw	r2,8(r3)
 8010054:	b8c00117 	ldw	r3,4(r23)
 8010058:	003fbd06 	br	800ff50 <__alt_data_end+0xfc00ff50>
 801005c:	00800304 	movi	r2,12
 8010060:	90800015 	stw	r2,0(r18)
 8010064:	0005883a 	mov	r2,zero
 8010068:	003fc606 	br	800ff84 <__alt_data_end+0xfc00ff84>
 801006c:	1d06b03a 	or	r3,r3,r20
 8010070:	ad0b883a 	add	r5,r21,r20
 8010074:	a8c00115 	stw	r3,4(r21)
 8010078:	38800054 	ori	r2,r7,1
 801007c:	28800115 	stw	r2,4(r5)
 8010080:	29cf883a 	add	r7,r5,r7
 8010084:	38800117 	ldw	r2,4(r7)
 8010088:	9009883a 	mov	r4,r18
 801008c:	29400204 	addi	r5,r5,8
 8010090:	10800054 	ori	r2,r2,1
 8010094:	38800115 	stw	r2,4(r7)
 8010098:	800de440 	call	800de44 <_free_r>
 801009c:	003fb606 	br	800ff78 <__alt_data_end+0xfc00ff78>
 80100a0:	880b883a 	mov	r5,r17
 80100a4:	9009883a 	mov	r4,r18
 80100a8:	80069900 	call	8006990 <_malloc_r>
 80100ac:	1023883a 	mov	r17,r2
 80100b0:	1000aa26 	beq	r2,zero,801035c <_realloc_r+0x574>
 80100b4:	98ffff17 	ldw	r3,-4(r19)
 80100b8:	113ffe04 	addi	r4,r2,-8
 80100bc:	00bfff84 	movi	r2,-2
 80100c0:	1884703a 	and	r2,r3,r2
 80100c4:	a885883a 	add	r2,r21,r2
 80100c8:	20808626 	beq	r4,r2,80102e4 <_realloc_r+0x4fc>
 80100cc:	81bfff04 	addi	r6,r16,-4
 80100d0:	00800904 	movi	r2,36
 80100d4:	11807036 	bltu	r2,r6,8010298 <_realloc_r+0x4b0>
 80100d8:	00c004c4 	movi	r3,19
 80100dc:	19805636 	bltu	r3,r6,8010238 <_realloc_r+0x450>
 80100e0:	8805883a 	mov	r2,r17
 80100e4:	9807883a 	mov	r3,r19
 80100e8:	19000017 	ldw	r4,0(r3)
 80100ec:	11000015 	stw	r4,0(r2)
 80100f0:	19000117 	ldw	r4,4(r3)
 80100f4:	11000115 	stw	r4,4(r2)
 80100f8:	18c00217 	ldw	r3,8(r3)
 80100fc:	10c00215 	stw	r3,8(r2)
 8010100:	980b883a 	mov	r5,r19
 8010104:	9009883a 	mov	r4,r18
 8010108:	800de440 	call	800de44 <_free_r>
 801010c:	9009883a 	mov	r4,r18
 8010110:	80161480 	call	8016148 <__malloc_unlock>
 8010114:	8805883a 	mov	r2,r17
 8010118:	003f9a06 	br	800ff84 <__alt_data_end+0xfc00ff84>
 801011c:	300b883a 	mov	r5,r6
 8010120:	dfc00917 	ldw	ra,36(sp)
 8010124:	df000817 	ldw	fp,32(sp)
 8010128:	ddc00717 	ldw	r23,28(sp)
 801012c:	dd800617 	ldw	r22,24(sp)
 8010130:	dd400517 	ldw	r21,20(sp)
 8010134:	dd000417 	ldw	r20,16(sp)
 8010138:	dcc00317 	ldw	r19,12(sp)
 801013c:	dc800217 	ldw	r18,8(sp)
 8010140:	dc400117 	ldw	r17,4(sp)
 8010144:	dc000017 	ldw	r16,0(sp)
 8010148:	dec00a04 	addi	sp,sp,40
 801014c:	80069901 	jmpi	8006990 <_malloc_r>
 8010150:	11400317 	ldw	r5,12(r2)
 8010154:	10800217 	ldw	r2,8(r2)
 8010158:	9823883a 	mov	r17,r19
 801015c:	2021883a 	mov	r16,r4
 8010160:	11400315 	stw	r5,12(r2)
 8010164:	28800215 	stw	r2,8(r5)
 8010168:	003f7906 	br	800ff50 <__alt_data_end+0xfc00ff50>
 801016c:	21000117 	ldw	r4,4(r4)
 8010170:	00bfff04 	movi	r2,-4
 8010174:	a1800404 	addi	r6,r20,16
 8010178:	2088703a 	and	r4,r4,r2
 801017c:	2409883a 	add	r4,r4,r16
 8010180:	2180380e 	bge	r4,r6,8010264 <_realloc_r+0x47c>
 8010184:	18c0004c 	andi	r3,r3,1
 8010188:	183fc51e 	bne	r3,zero,80100a0 <__alt_data_end+0xfc0100a0>
 801018c:	9dfffe17 	ldw	r23,-8(r19)
 8010190:	adefc83a 	sub	r23,r21,r23
 8010194:	b9400117 	ldw	r5,4(r23)
 8010198:	288a703a 	and	r5,r5,r2
 801019c:	216d883a 	add	r22,r4,r5
 80101a0:	b1bf8b16 	blt	r22,r6,800ffd0 <__alt_data_end+0xfc00ffd0>
 80101a4:	b8800317 	ldw	r2,12(r23)
 80101a8:	b8c00217 	ldw	r3,8(r23)
 80101ac:	81bfff04 	addi	r6,r16,-4
 80101b0:	01000904 	movi	r4,36
 80101b4:	18800315 	stw	r2,12(r3)
 80101b8:	10c00215 	stw	r3,8(r2)
 80101bc:	bc400204 	addi	r17,r23,8
 80101c0:	21805a36 	bltu	r4,r6,801032c <_realloc_r+0x544>
 80101c4:	008004c4 	movi	r2,19
 80101c8:	1180562e 	bgeu	r2,r6,8010324 <_realloc_r+0x53c>
 80101cc:	98800017 	ldw	r2,0(r19)
 80101d0:	b8800215 	stw	r2,8(r23)
 80101d4:	98800117 	ldw	r2,4(r19)
 80101d8:	b8800315 	stw	r2,12(r23)
 80101dc:	008006c4 	movi	r2,27
 80101e0:	11805636 	bltu	r2,r6,801033c <_realloc_r+0x554>
 80101e4:	b8800404 	addi	r2,r23,16
 80101e8:	9cc00204 	addi	r19,r19,8
 80101ec:	98c00017 	ldw	r3,0(r19)
 80101f0:	10c00015 	stw	r3,0(r2)
 80101f4:	98c00117 	ldw	r3,4(r19)
 80101f8:	10c00115 	stw	r3,4(r2)
 80101fc:	98c00217 	ldw	r3,8(r19)
 8010200:	10c00215 	stw	r3,8(r2)
 8010204:	bd07883a 	add	r3,r23,r20
 8010208:	b505c83a 	sub	r2,r22,r20
 801020c:	e0c00215 	stw	r3,8(fp)
 8010210:	10800054 	ori	r2,r2,1
 8010214:	18800115 	stw	r2,4(r3)
 8010218:	b8800117 	ldw	r2,4(r23)
 801021c:	9009883a 	mov	r4,r18
 8010220:	1080004c 	andi	r2,r2,1
 8010224:	a0a8b03a 	or	r20,r20,r2
 8010228:	bd000115 	stw	r20,4(r23)
 801022c:	80161480 	call	8016148 <__malloc_unlock>
 8010230:	8805883a 	mov	r2,r17
 8010234:	003f5306 	br	800ff84 <__alt_data_end+0xfc00ff84>
 8010238:	98c00017 	ldw	r3,0(r19)
 801023c:	88c00015 	stw	r3,0(r17)
 8010240:	98c00117 	ldw	r3,4(r19)
 8010244:	88c00115 	stw	r3,4(r17)
 8010248:	00c006c4 	movi	r3,27
 801024c:	19801d36 	bltu	r3,r6,80102c4 <_realloc_r+0x4dc>
 8010250:	88800204 	addi	r2,r17,8
 8010254:	98c00204 	addi	r3,r19,8
 8010258:	003fa306 	br	80100e8 <__alt_data_end+0xfc0100e8>
 801025c:	8807883a 	mov	r3,r17
 8010260:	003f7406 	br	8010034 <__alt_data_end+0xfc010034>
 8010264:	ad2b883a 	add	r21,r21,r20
 8010268:	2505c83a 	sub	r2,r4,r20
 801026c:	e5400215 	stw	r21,8(fp)
 8010270:	10800054 	ori	r2,r2,1
 8010274:	a8800115 	stw	r2,4(r21)
 8010278:	98bfff17 	ldw	r2,-4(r19)
 801027c:	9009883a 	mov	r4,r18
 8010280:	1080004c 	andi	r2,r2,1
 8010284:	a0a8b03a 	or	r20,r20,r2
 8010288:	9d3fff15 	stw	r20,-4(r19)
 801028c:	80161480 	call	8016148 <__malloc_unlock>
 8010290:	9805883a 	mov	r2,r19
 8010294:	003f3b06 	br	800ff84 <__alt_data_end+0xfc00ff84>
 8010298:	8809883a 	mov	r4,r17
 801029c:	980b883a 	mov	r5,r19
 80102a0:	800eb200 	call	800eb20 <memmove>
 80102a4:	003f9606 	br	8010100 <__alt_data_end+0xfc010100>
 80102a8:	8809883a 	mov	r4,r17
 80102ac:	980b883a 	mov	r5,r19
 80102b0:	800eb200 	call	800eb20 <memmove>
 80102b4:	b8c00117 	ldw	r3,4(r23)
 80102b8:	b021883a 	mov	r16,r22
 80102bc:	b82b883a 	mov	r21,r23
 80102c0:	003f2306 	br	800ff50 <__alt_data_end+0xfc00ff50>
 80102c4:	98c00217 	ldw	r3,8(r19)
 80102c8:	88c00215 	stw	r3,8(r17)
 80102cc:	98c00317 	ldw	r3,12(r19)
 80102d0:	88c00315 	stw	r3,12(r17)
 80102d4:	30800c26 	beq	r6,r2,8010308 <_realloc_r+0x520>
 80102d8:	88800404 	addi	r2,r17,16
 80102dc:	98c00404 	addi	r3,r19,16
 80102e0:	003f8106 	br	80100e8 <__alt_data_end+0xfc0100e8>
 80102e4:	893fff17 	ldw	r4,-4(r17)
 80102e8:	00bfff04 	movi	r2,-4
 80102ec:	9823883a 	mov	r17,r19
 80102f0:	2084703a 	and	r2,r4,r2
 80102f4:	80a1883a 	add	r16,r16,r2
 80102f8:	003f1506 	br	800ff50 <__alt_data_end+0xfc00ff50>
 80102fc:	b8c00404 	addi	r3,r23,16
 8010300:	9cc00204 	addi	r19,r19,8
 8010304:	003f4b06 	br	8010034 <__alt_data_end+0xfc010034>
 8010308:	99000417 	ldw	r4,16(r19)
 801030c:	88800604 	addi	r2,r17,24
 8010310:	98c00604 	addi	r3,r19,24
 8010314:	89000415 	stw	r4,16(r17)
 8010318:	99000517 	ldw	r4,20(r19)
 801031c:	89000515 	stw	r4,20(r17)
 8010320:	003f7106 	br	80100e8 <__alt_data_end+0xfc0100e8>
 8010324:	8805883a 	mov	r2,r17
 8010328:	003fb006 	br	80101ec <__alt_data_end+0xfc0101ec>
 801032c:	8809883a 	mov	r4,r17
 8010330:	980b883a 	mov	r5,r19
 8010334:	800eb200 	call	800eb20 <memmove>
 8010338:	003fb206 	br	8010204 <__alt_data_end+0xfc010204>
 801033c:	98800217 	ldw	r2,8(r19)
 8010340:	b8800415 	stw	r2,16(r23)
 8010344:	98800317 	ldw	r2,12(r19)
 8010348:	b8800515 	stw	r2,20(r23)
 801034c:	31000726 	beq	r6,r4,801036c <_realloc_r+0x584>
 8010350:	b8800604 	addi	r2,r23,24
 8010354:	9cc00404 	addi	r19,r19,16
 8010358:	003fa406 	br	80101ec <__alt_data_end+0xfc0101ec>
 801035c:	9009883a 	mov	r4,r18
 8010360:	80161480 	call	8016148 <__malloc_unlock>
 8010364:	0005883a 	mov	r2,zero
 8010368:	003f0606 	br	800ff84 <__alt_data_end+0xfc00ff84>
 801036c:	98c00417 	ldw	r3,16(r19)
 8010370:	9cc00604 	addi	r19,r19,24
 8010374:	b8800804 	addi	r2,r23,32
 8010378:	b8c00615 	stw	r3,24(r23)
 801037c:	98ffff17 	ldw	r3,-4(r19)
 8010380:	b8c00715 	stw	r3,28(r23)
 8010384:	003f9906 	br	80101ec <__alt_data_end+0xfc0101ec>

08010388 <__fpclassifyd>:
 8010388:	00a00034 	movhi	r2,32768
 801038c:	10bfffc4 	addi	r2,r2,-1
 8010390:	2884703a 	and	r2,r5,r2
 8010394:	10000726 	beq	r2,zero,80103b4 <__fpclassifyd+0x2c>
 8010398:	00fffc34 	movhi	r3,65520
 801039c:	019ff834 	movhi	r6,32736
 80103a0:	28c7883a 	add	r3,r5,r3
 80103a4:	31bfffc4 	addi	r6,r6,-1
 80103a8:	30c00536 	bltu	r6,r3,80103c0 <__fpclassifyd+0x38>
 80103ac:	00800104 	movi	r2,4
 80103b0:	f800283a 	ret
 80103b4:	2000021e 	bne	r4,zero,80103c0 <__fpclassifyd+0x38>
 80103b8:	00800084 	movi	r2,2
 80103bc:	f800283a 	ret
 80103c0:	00dffc34 	movhi	r3,32752
 80103c4:	019ff834 	movhi	r6,32736
 80103c8:	28cb883a 	add	r5,r5,r3
 80103cc:	31bfffc4 	addi	r6,r6,-1
 80103d0:	317ff62e 	bgeu	r6,r5,80103ac <__alt_data_end+0xfc0103ac>
 80103d4:	01400434 	movhi	r5,16
 80103d8:	297fffc4 	addi	r5,r5,-1
 80103dc:	28800236 	bltu	r5,r2,80103e8 <__fpclassifyd+0x60>
 80103e0:	008000c4 	movi	r2,3
 80103e4:	f800283a 	ret
 80103e8:	10c00226 	beq	r2,r3,80103f4 <__fpclassifyd+0x6c>
 80103ec:	0005883a 	mov	r2,zero
 80103f0:	f800283a 	ret
 80103f4:	2005003a 	cmpeq	r2,r4,zero
 80103f8:	f800283a 	ret

080103fc <__sread>:
 80103fc:	defffe04 	addi	sp,sp,-8
 8010400:	dc000015 	stw	r16,0(sp)
 8010404:	2821883a 	mov	r16,r5
 8010408:	2940038f 	ldh	r5,14(r5)
 801040c:	dfc00115 	stw	ra,4(sp)
 8010410:	80134500 	call	8013450 <_read_r>
 8010414:	10000716 	blt	r2,zero,8010434 <__sread+0x38>
 8010418:	80c01417 	ldw	r3,80(r16)
 801041c:	1887883a 	add	r3,r3,r2
 8010420:	80c01415 	stw	r3,80(r16)
 8010424:	dfc00117 	ldw	ra,4(sp)
 8010428:	dc000017 	ldw	r16,0(sp)
 801042c:	dec00204 	addi	sp,sp,8
 8010430:	f800283a 	ret
 8010434:	80c0030b 	ldhu	r3,12(r16)
 8010438:	18fbffcc 	andi	r3,r3,61439
 801043c:	80c0030d 	sth	r3,12(r16)
 8010440:	dfc00117 	ldw	ra,4(sp)
 8010444:	dc000017 	ldw	r16,0(sp)
 8010448:	dec00204 	addi	sp,sp,8
 801044c:	f800283a 	ret

08010450 <__seofread>:
 8010450:	0005883a 	mov	r2,zero
 8010454:	f800283a 	ret

08010458 <__swrite>:
 8010458:	2880030b 	ldhu	r2,12(r5)
 801045c:	defffb04 	addi	sp,sp,-20
 8010460:	dcc00315 	stw	r19,12(sp)
 8010464:	dc800215 	stw	r18,8(sp)
 8010468:	dc400115 	stw	r17,4(sp)
 801046c:	dc000015 	stw	r16,0(sp)
 8010470:	dfc00415 	stw	ra,16(sp)
 8010474:	10c0400c 	andi	r3,r2,256
 8010478:	2821883a 	mov	r16,r5
 801047c:	2027883a 	mov	r19,r4
 8010480:	3025883a 	mov	r18,r6
 8010484:	3823883a 	mov	r17,r7
 8010488:	18000526 	beq	r3,zero,80104a0 <__swrite+0x48>
 801048c:	2940038f 	ldh	r5,14(r5)
 8010490:	000d883a 	mov	r6,zero
 8010494:	01c00084 	movi	r7,2
 8010498:	80133f40 	call	80133f4 <_lseek_r>
 801049c:	8080030b 	ldhu	r2,12(r16)
 80104a0:	8140038f 	ldh	r5,14(r16)
 80104a4:	10bbffcc 	andi	r2,r2,61439
 80104a8:	9809883a 	mov	r4,r19
 80104ac:	900d883a 	mov	r6,r18
 80104b0:	880f883a 	mov	r7,r17
 80104b4:	8080030d 	sth	r2,12(r16)
 80104b8:	dfc00417 	ldw	ra,16(sp)
 80104bc:	dcc00317 	ldw	r19,12(sp)
 80104c0:	dc800217 	ldw	r18,8(sp)
 80104c4:	dc400117 	ldw	r17,4(sp)
 80104c8:	dc000017 	ldw	r16,0(sp)
 80104cc:	dec00504 	addi	sp,sp,20
 80104d0:	8012ed01 	jmpi	8012ed0 <_write_r>

080104d4 <__sseek>:
 80104d4:	defffe04 	addi	sp,sp,-8
 80104d8:	dc000015 	stw	r16,0(sp)
 80104dc:	2821883a 	mov	r16,r5
 80104e0:	2940038f 	ldh	r5,14(r5)
 80104e4:	dfc00115 	stw	ra,4(sp)
 80104e8:	80133f40 	call	80133f4 <_lseek_r>
 80104ec:	00ffffc4 	movi	r3,-1
 80104f0:	10c00826 	beq	r2,r3,8010514 <__sseek+0x40>
 80104f4:	80c0030b 	ldhu	r3,12(r16)
 80104f8:	80801415 	stw	r2,80(r16)
 80104fc:	18c40014 	ori	r3,r3,4096
 8010500:	80c0030d 	sth	r3,12(r16)
 8010504:	dfc00117 	ldw	ra,4(sp)
 8010508:	dc000017 	ldw	r16,0(sp)
 801050c:	dec00204 	addi	sp,sp,8
 8010510:	f800283a 	ret
 8010514:	80c0030b 	ldhu	r3,12(r16)
 8010518:	18fbffcc 	andi	r3,r3,61439
 801051c:	80c0030d 	sth	r3,12(r16)
 8010520:	dfc00117 	ldw	ra,4(sp)
 8010524:	dc000017 	ldw	r16,0(sp)
 8010528:	dec00204 	addi	sp,sp,8
 801052c:	f800283a 	ret

08010530 <__sclose>:
 8010530:	2940038f 	ldh	r5,14(r5)
 8010534:	8012f2c1 	jmpi	8012f2c <_close_r>

08010538 <strcmp>:
 8010538:	2144b03a 	or	r2,r4,r5
 801053c:	108000cc 	andi	r2,r2,3
 8010540:	1000171e 	bne	r2,zero,80105a0 <strcmp+0x68>
 8010544:	20800017 	ldw	r2,0(r4)
 8010548:	28c00017 	ldw	r3,0(r5)
 801054c:	10c0141e 	bne	r2,r3,80105a0 <strcmp+0x68>
 8010550:	027fbff4 	movhi	r9,65279
 8010554:	4a7fbfc4 	addi	r9,r9,-257
 8010558:	0086303a 	nor	r3,zero,r2
 801055c:	02202074 	movhi	r8,32897
 8010560:	1245883a 	add	r2,r2,r9
 8010564:	42202004 	addi	r8,r8,-32640
 8010568:	10c4703a 	and	r2,r2,r3
 801056c:	1204703a 	and	r2,r2,r8
 8010570:	10000226 	beq	r2,zero,801057c <strcmp+0x44>
 8010574:	00001706 	br	80105d4 <strcmp+0x9c>
 8010578:	1000161e 	bne	r2,zero,80105d4 <strcmp+0x9c>
 801057c:	21000104 	addi	r4,r4,4
 8010580:	20c00017 	ldw	r3,0(r4)
 8010584:	29400104 	addi	r5,r5,4
 8010588:	29800017 	ldw	r6,0(r5)
 801058c:	1a4f883a 	add	r7,r3,r9
 8010590:	00c4303a 	nor	r2,zero,r3
 8010594:	3884703a 	and	r2,r7,r2
 8010598:	1204703a 	and	r2,r2,r8
 801059c:	19bff626 	beq	r3,r6,8010578 <__alt_data_end+0xfc010578>
 80105a0:	20800007 	ldb	r2,0(r4)
 80105a4:	1000051e 	bne	r2,zero,80105bc <strcmp+0x84>
 80105a8:	00000606 	br	80105c4 <strcmp+0x8c>
 80105ac:	21000044 	addi	r4,r4,1
 80105b0:	20800007 	ldb	r2,0(r4)
 80105b4:	29400044 	addi	r5,r5,1
 80105b8:	10000226 	beq	r2,zero,80105c4 <strcmp+0x8c>
 80105bc:	28c00007 	ldb	r3,0(r5)
 80105c0:	10fffa26 	beq	r2,r3,80105ac <__alt_data_end+0xfc0105ac>
 80105c4:	20800003 	ldbu	r2,0(r4)
 80105c8:	28c00003 	ldbu	r3,0(r5)
 80105cc:	10c5c83a 	sub	r2,r2,r3
 80105d0:	f800283a 	ret
 80105d4:	0005883a 	mov	r2,zero
 80105d8:	f800283a 	ret

080105dc <__ssprint_r>:
 80105dc:	30800217 	ldw	r2,8(r6)
 80105e0:	defff604 	addi	sp,sp,-40
 80105e4:	ddc00715 	stw	r23,28(sp)
 80105e8:	dcc00315 	stw	r19,12(sp)
 80105ec:	dfc00915 	stw	ra,36(sp)
 80105f0:	df000815 	stw	fp,32(sp)
 80105f4:	dd800615 	stw	r22,24(sp)
 80105f8:	dd400515 	stw	r21,20(sp)
 80105fc:	dd000415 	stw	r20,16(sp)
 8010600:	dc800215 	stw	r18,8(sp)
 8010604:	dc400115 	stw	r17,4(sp)
 8010608:	dc000015 	stw	r16,0(sp)
 801060c:	3027883a 	mov	r19,r6
 8010610:	35c00017 	ldw	r23,0(r6)
 8010614:	10005526 	beq	r2,zero,801076c <__ssprint_r+0x190>
 8010618:	2029883a 	mov	r20,r4
 801061c:	29000017 	ldw	r4,0(r5)
 8010620:	2821883a 	mov	r16,r5
 8010624:	0039883a 	mov	fp,zero
 8010628:	0023883a 	mov	r17,zero
 801062c:	88003926 	beq	r17,zero,8010714 <__ssprint_r+0x138>
 8010630:	84800217 	ldw	r18,8(r16)
 8010634:	902d883a 	mov	r22,r18
 8010638:	8c803a36 	bltu	r17,r18,8010724 <__ssprint_r+0x148>
 801063c:	80c0030b 	ldhu	r3,12(r16)
 8010640:	1881200c 	andi	r2,r3,1152
 8010644:	10002626 	beq	r2,zero,80106e0 <__ssprint_r+0x104>
 8010648:	80800517 	ldw	r2,20(r16)
 801064c:	81400417 	ldw	r5,16(r16)
 8010650:	89c00044 	addi	r7,r17,1
 8010654:	108d883a 	add	r6,r2,r2
 8010658:	3085883a 	add	r2,r6,r2
 801065c:	100cd7fa 	srli	r6,r2,31
 8010660:	216dc83a 	sub	r22,r4,r5
 8010664:	3d89883a 	add	r4,r7,r22
 8010668:	3085883a 	add	r2,r6,r2
 801066c:	1025d07a 	srai	r18,r2,1
 8010670:	900d883a 	mov	r6,r18
 8010674:	9100022e 	bgeu	r18,r4,8010680 <__ssprint_r+0xa4>
 8010678:	2025883a 	mov	r18,r4
 801067c:	200d883a 	mov	r6,r4
 8010680:	18c1000c 	andi	r3,r3,1024
 8010684:	a009883a 	mov	r4,r20
 8010688:	18002926 	beq	r3,zero,8010730 <__ssprint_r+0x154>
 801068c:	300b883a 	mov	r5,r6
 8010690:	80069900 	call	8006990 <_malloc_r>
 8010694:	102b883a 	mov	r21,r2
 8010698:	10002b26 	beq	r2,zero,8010748 <__ssprint_r+0x16c>
 801069c:	81400417 	ldw	r5,16(r16)
 80106a0:	1009883a 	mov	r4,r2
 80106a4:	b00d883a 	mov	r6,r22
 80106a8:	80071380 	call	8007138 <memcpy>
 80106ac:	8080030b 	ldhu	r2,12(r16)
 80106b0:	00fedfc4 	movi	r3,-1153
 80106b4:	10c4703a 	and	r2,r2,r3
 80106b8:	10802014 	ori	r2,r2,128
 80106bc:	8080030d 	sth	r2,12(r16)
 80106c0:	ad89883a 	add	r4,r21,r22
 80106c4:	95adc83a 	sub	r22,r18,r22
 80106c8:	84800515 	stw	r18,20(r16)
 80106cc:	85800215 	stw	r22,8(r16)
 80106d0:	85400415 	stw	r21,16(r16)
 80106d4:	81000015 	stw	r4,0(r16)
 80106d8:	8825883a 	mov	r18,r17
 80106dc:	882d883a 	mov	r22,r17
 80106e0:	e00b883a 	mov	r5,fp
 80106e4:	b00d883a 	mov	r6,r22
 80106e8:	800eb200 	call	800eb20 <memmove>
 80106ec:	80c00217 	ldw	r3,8(r16)
 80106f0:	81000017 	ldw	r4,0(r16)
 80106f4:	98800217 	ldw	r2,8(r19)
 80106f8:	1ca5c83a 	sub	r18,r3,r18
 80106fc:	2589883a 	add	r4,r4,r22
 8010700:	84800215 	stw	r18,8(r16)
 8010704:	81000015 	stw	r4,0(r16)
 8010708:	1463c83a 	sub	r17,r2,r17
 801070c:	9c400215 	stw	r17,8(r19)
 8010710:	88001626 	beq	r17,zero,801076c <__ssprint_r+0x190>
 8010714:	bf000017 	ldw	fp,0(r23)
 8010718:	bc400117 	ldw	r17,4(r23)
 801071c:	bdc00204 	addi	r23,r23,8
 8010720:	003fc206 	br	801062c <__alt_data_end+0xfc01062c>
 8010724:	8825883a 	mov	r18,r17
 8010728:	882d883a 	mov	r22,r17
 801072c:	003fec06 	br	80106e0 <__alt_data_end+0xfc0106e0>
 8010730:	800fde80 	call	800fde8 <_realloc_r>
 8010734:	102b883a 	mov	r21,r2
 8010738:	103fe11e 	bne	r2,zero,80106c0 <__alt_data_end+0xfc0106c0>
 801073c:	81400417 	ldw	r5,16(r16)
 8010740:	a009883a 	mov	r4,r20
 8010744:	800de440 	call	800de44 <_free_r>
 8010748:	80c0030b 	ldhu	r3,12(r16)
 801074c:	00800304 	movi	r2,12
 8010750:	a0800015 	stw	r2,0(r20)
 8010754:	18c01014 	ori	r3,r3,64
 8010758:	80c0030d 	sth	r3,12(r16)
 801075c:	00bfffc4 	movi	r2,-1
 8010760:	98000215 	stw	zero,8(r19)
 8010764:	98000115 	stw	zero,4(r19)
 8010768:	00000206 	br	8010774 <__ssprint_r+0x198>
 801076c:	98000115 	stw	zero,4(r19)
 8010770:	0005883a 	mov	r2,zero
 8010774:	dfc00917 	ldw	ra,36(sp)
 8010778:	df000817 	ldw	fp,32(sp)
 801077c:	ddc00717 	ldw	r23,28(sp)
 8010780:	dd800617 	ldw	r22,24(sp)
 8010784:	dd400517 	ldw	r21,20(sp)
 8010788:	dd000417 	ldw	r20,16(sp)
 801078c:	dcc00317 	ldw	r19,12(sp)
 8010790:	dc800217 	ldw	r18,8(sp)
 8010794:	dc400117 	ldw	r17,4(sp)
 8010798:	dc000017 	ldw	r16,0(sp)
 801079c:	dec00a04 	addi	sp,sp,40
 80107a0:	f800283a 	ret

080107a4 <___svfiprintf_internal_r>:
 80107a4:	2880030b 	ldhu	r2,12(r5)
 80107a8:	deffc804 	addi	sp,sp,-224
 80107ac:	dd403315 	stw	r21,204(sp)
 80107b0:	dfc03715 	stw	ra,220(sp)
 80107b4:	df003615 	stw	fp,216(sp)
 80107b8:	ddc03515 	stw	r23,212(sp)
 80107bc:	dd803415 	stw	r22,208(sp)
 80107c0:	dd003215 	stw	r20,200(sp)
 80107c4:	dcc03115 	stw	r19,196(sp)
 80107c8:	dc803015 	stw	r18,192(sp)
 80107cc:	dc402f15 	stw	r17,188(sp)
 80107d0:	dc002e15 	stw	r16,184(sp)
 80107d4:	d9402215 	stw	r5,136(sp)
 80107d8:	d9002915 	stw	r4,164(sp)
 80107dc:	1080200c 	andi	r2,r2,128
 80107e0:	d9c02415 	stw	r7,144(sp)
 80107e4:	302b883a 	mov	r21,r6
 80107e8:	10000226 	beq	r2,zero,80107f4 <___svfiprintf_internal_r+0x50>
 80107ec:	28800417 	ldw	r2,16(r5)
 80107f0:	10042526 	beq	r2,zero,8011888 <___svfiprintf_internal_r+0x10e4>
 80107f4:	d8801a04 	addi	r2,sp,104
 80107f8:	d8c019c4 	addi	r3,sp,103
 80107fc:	dc402917 	ldw	r17,164(sp)
 8010800:	04c200b4 	movhi	r19,2050
 8010804:	10c9c83a 	sub	r4,r2,r3
 8010808:	9cce0404 	addi	r19,r19,14352
 801080c:	d8801e15 	stw	r2,120(sp)
 8010810:	d8c01f15 	stw	r3,124(sp)
 8010814:	dec01a15 	stw	sp,104(sp)
 8010818:	d8001c15 	stw	zero,112(sp)
 801081c:	d8001b15 	stw	zero,108(sp)
 8010820:	d8002a15 	stw	zero,168(sp)
 8010824:	d8002615 	stw	zero,152(sp)
 8010828:	d811883a 	mov	r8,sp
 801082c:	d9002c15 	stw	r4,176(sp)
 8010830:	a8800007 	ldb	r2,0(r21)
 8010834:	1002af26 	beq	r2,zero,80112f4 <___svfiprintf_internal_r+0xb50>
 8010838:	01000944 	movi	r4,37
 801083c:	1102ad26 	beq	r2,r4,80112f4 <___svfiprintf_internal_r+0xb50>
 8010840:	a805883a 	mov	r2,r21
 8010844:	00000106 	br	801084c <___svfiprintf_internal_r+0xa8>
 8010848:	19000326 	beq	r3,r4,8010858 <___svfiprintf_internal_r+0xb4>
 801084c:	10800044 	addi	r2,r2,1
 8010850:	10c00007 	ldb	r3,0(r2)
 8010854:	183ffc1e 	bne	r3,zero,8010848 <__alt_data_end+0xfc010848>
 8010858:	1561c83a 	sub	r16,r2,r21
 801085c:	1025883a 	mov	r18,r2
 8010860:	80000e26 	beq	r16,zero,801089c <___svfiprintf_internal_r+0xf8>
 8010864:	d8c01c17 	ldw	r3,112(sp)
 8010868:	d8801b17 	ldw	r2,108(sp)
 801086c:	45400015 	stw	r21,0(r8)
 8010870:	1c07883a 	add	r3,r3,r16
 8010874:	10800044 	addi	r2,r2,1
 8010878:	d8c01c15 	stw	r3,112(sp)
 801087c:	44000115 	stw	r16,4(r8)
 8010880:	d8801b15 	stw	r2,108(sp)
 8010884:	00c001c4 	movi	r3,7
 8010888:	18832616 	blt	r3,r2,8011524 <___svfiprintf_internal_r+0xd80>
 801088c:	42000204 	addi	r8,r8,8
 8010890:	d9402617 	ldw	r5,152(sp)
 8010894:	2c0b883a 	add	r5,r5,r16
 8010898:	d9402615 	stw	r5,152(sp)
 801089c:	90800007 	ldb	r2,0(r18)
 80108a0:	1002b226 	beq	r2,zero,801136c <___svfiprintf_internal_r+0xbc8>
 80108a4:	00bfffc4 	movi	r2,-1
 80108a8:	95400044 	addi	r21,r18,1
 80108ac:	91800047 	ldb	r6,1(r18)
 80108b0:	d8001d85 	stb	zero,118(sp)
 80108b4:	002d883a 	mov	r22,zero
 80108b8:	d8802015 	stw	r2,128(sp)
 80108bc:	d8002315 	stw	zero,140(sp)
 80108c0:	0021883a 	mov	r16,zero
 80108c4:	04801604 	movi	r18,88
 80108c8:	05000244 	movi	r20,9
 80108cc:	402f883a 	mov	r23,r8
 80108d0:	ad400044 	addi	r21,r21,1
 80108d4:	30bff804 	addi	r2,r6,-32
 80108d8:	9081ae36 	bltu	r18,r2,8010f94 <___svfiprintf_internal_r+0x7f0>
 80108dc:	100490ba 	slli	r2,r2,2
 80108e0:	00c20074 	movhi	r3,2049
 80108e4:	18c23d04 	addi	r3,r3,2292
 80108e8:	10c5883a 	add	r2,r2,r3
 80108ec:	10800017 	ldw	r2,0(r2)
 80108f0:	1000683a 	jmp	r2
 80108f4:	08010aa4 	muli	zero,at,1066
 80108f8:	08010f94 	ori	zero,at,1086
 80108fc:	08010f94 	ori	zero,at,1086
 8010900:	08010a98 	cmpnei	zero,at,1066
 8010904:	08010f94 	ori	zero,at,1086
 8010908:	08010f94 	ori	zero,at,1086
 801090c:	08010f94 	ori	zero,at,1086
 8010910:	08010f94 	ori	zero,at,1086
 8010914:	08010f94 	ori	zero,at,1086
 8010918:	08010f94 	ori	zero,at,1086
 801091c:	08010a58 	cmpnei	zero,at,1065
 8010920:	08010a8c 	andi	zero,at,1066
 8010924:	08010f94 	ori	zero,at,1086
 8010928:	08010a80 	call	8010a8 <__alt_mem_sdram-0x77fef58>
 801092c:	08010fc8 	cmpgei	zero,at,1087
 8010930:	08010f94 	ori	zero,at,1086
 8010934:	08010fbc 	xorhi	zero,at,1086
 8010938:	08010f50 	cmplti	zero,at,1085
 801093c:	08010f50 	cmplti	zero,at,1085
 8010940:	08010f50 	cmplti	zero,at,1085
 8010944:	08010f50 	cmplti	zero,at,1085
 8010948:	08010f50 	cmplti	zero,at,1085
 801094c:	08010f50 	cmplti	zero,at,1085
 8010950:	08010f50 	cmplti	zero,at,1085
 8010954:	08010f50 	cmplti	zero,at,1085
 8010958:	08010f50 	cmplti	zero,at,1085
 801095c:	08010f94 	ori	zero,at,1086
 8010960:	08010f94 	ori	zero,at,1086
 8010964:	08010f94 	ori	zero,at,1086
 8010968:	08010f94 	ori	zero,at,1086
 801096c:	08010f94 	ori	zero,at,1086
 8010970:	08010f94 	ori	zero,at,1086
 8010974:	08010f94 	ori	zero,at,1086
 8010978:	08010f94 	ori	zero,at,1086
 801097c:	08010f94 	ori	zero,at,1086
 8010980:	08010f94 	ori	zero,at,1086
 8010984:	08010ee4 	muli	zero,at,1083
 8010988:	08010f94 	ori	zero,at,1086
 801098c:	08010f94 	ori	zero,at,1086
 8010990:	08010f94 	ori	zero,at,1086
 8010994:	08010f94 	ori	zero,at,1086
 8010998:	08010f94 	ori	zero,at,1086
 801099c:	08010f94 	ori	zero,at,1086
 80109a0:	08010f94 	ori	zero,at,1086
 80109a4:	08010f94 	ori	zero,at,1086
 80109a8:	08010f94 	ori	zero,at,1086
 80109ac:	08010f94 	ori	zero,at,1086
 80109b0:	08011054 	ori	zero,at,1089
 80109b4:	08010f94 	ori	zero,at,1086
 80109b8:	08010f94 	ori	zero,at,1086
 80109bc:	08010f94 	ori	zero,at,1086
 80109c0:	08010f94 	ori	zero,at,1086
 80109c4:	08010f94 	ori	zero,at,1086
 80109c8:	08011010 	cmplti	zero,at,1088
 80109cc:	08010f94 	ori	zero,at,1086
 80109d0:	08010f94 	ori	zero,at,1086
 80109d4:	08010e9c 	xori	zero,at,1082
 80109d8:	08010f94 	ori	zero,at,1086
 80109dc:	08010f94 	ori	zero,at,1086
 80109e0:	08010f94 	ori	zero,at,1086
 80109e4:	08010f94 	ori	zero,at,1086
 80109e8:	08010f94 	ori	zero,at,1086
 80109ec:	08010f94 	ori	zero,at,1086
 80109f0:	08010f94 	ori	zero,at,1086
 80109f4:	08010f94 	ori	zero,at,1086
 80109f8:	08010f94 	ori	zero,at,1086
 80109fc:	08010f94 	ori	zero,at,1086
 8010a00:	08010d64 	muli	zero,at,1077
 8010a04:	08010d08 	cmpgei	zero,at,1076
 8010a08:	08010f94 	ori	zero,at,1086
 8010a0c:	08010f94 	ori	zero,at,1086
 8010a10:	08010f94 	ori	zero,at,1086
 8010a14:	08010cfc 	xorhi	zero,at,1075
 8010a18:	08010d08 	cmpgei	zero,at,1076
 8010a1c:	08010f94 	ori	zero,at,1086
 8010a20:	08010f94 	ori	zero,at,1086
 8010a24:	08010d4c 	andi	zero,at,1077
 8010a28:	08010f94 	ori	zero,at,1086
 8010a2c:	08010cc8 	cmpgei	zero,at,1075
 8010a30:	08010c98 	cmpnei	zero,at,1074
 8010a34:	08010c50 	cmplti	zero,at,1073
 8010a38:	08010c44 	addi	zero,at,1073
 8010a3c:	08010f94 	ori	zero,at,1086
 8010a40:	08010bdc 	xori	zero,at,1071
 8010a44:	08010f94 	ori	zero,at,1086
 8010a48:	08010b0c 	andi	zero,at,1068
 8010a4c:	08010f94 	ori	zero,at,1086
 8010a50:	08010f94 	ori	zero,at,1086
 8010a54:	08010ac0 	call	8010ac <__alt_mem_sdram-0x77fef54>
 8010a58:	d9402417 	ldw	r5,144(sp)
 8010a5c:	d8c02417 	ldw	r3,144(sp)
 8010a60:	29400017 	ldw	r5,0(r5)
 8010a64:	18800104 	addi	r2,r3,4
 8010a68:	d9402315 	stw	r5,140(sp)
 8010a6c:	2802f70e 	bge	r5,zero,801164c <___svfiprintf_internal_r+0xea8>
 8010a70:	d9002317 	ldw	r4,140(sp)
 8010a74:	d8802415 	stw	r2,144(sp)
 8010a78:	0109c83a 	sub	r4,zero,r4
 8010a7c:	d9002315 	stw	r4,140(sp)
 8010a80:	84000114 	ori	r16,r16,4
 8010a84:	a9800007 	ldb	r6,0(r21)
 8010a88:	003f9106 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8010a8c:	05800ac4 	movi	r22,43
 8010a90:	a9800007 	ldb	r6,0(r21)
 8010a94:	003f8e06 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8010a98:	84000054 	ori	r16,r16,1
 8010a9c:	a9800007 	ldb	r6,0(r21)
 8010aa0:	003f8b06 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8010aa4:	b0803fcc 	andi	r2,r22,255
 8010aa8:	1080201c 	xori	r2,r2,128
 8010aac:	10bfe004 	addi	r2,r2,-128
 8010ab0:	1003221e 	bne	r2,zero,801173c <___svfiprintf_internal_r+0xf98>
 8010ab4:	05800804 	movi	r22,32
 8010ab8:	a9800007 	ldb	r6,0(r21)
 8010abc:	003f8406 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8010ac0:	014200b4 	movhi	r5,2050
 8010ac4:	294d9b04 	addi	r5,r5,13932
 8010ac8:	d9402a15 	stw	r5,168(sp)
 8010acc:	dd801d85 	stb	r22,118(sp)
 8010ad0:	80c0080c 	andi	r3,r16,32
 8010ad4:	b811883a 	mov	r8,r23
 8010ad8:	d8802417 	ldw	r2,144(sp)
 8010adc:	1800f726 	beq	r3,zero,8010ebc <___svfiprintf_internal_r+0x718>
 8010ae0:	d8c02417 	ldw	r3,144(sp)
 8010ae4:	14800017 	ldw	r18,0(r2)
 8010ae8:	15800117 	ldw	r22,4(r2)
 8010aec:	18c00204 	addi	r3,r3,8
 8010af0:	d8c02415 	stw	r3,144(sp)
 8010af4:	8080004c 	andi	r2,r16,1
 8010af8:	1002bd26 	beq	r2,zero,80115f0 <___svfiprintf_internal_r+0xe4c>
 8010afc:	9586b03a 	or	r3,r18,r22
 8010b00:	1803081e 	bne	r3,zero,8011724 <___svfiprintf_internal_r+0xf80>
 8010b04:	00800084 	movi	r2,2
 8010b08:	00000b06 	br	8010b38 <___svfiprintf_internal_r+0x394>
 8010b0c:	80c0080c 	andi	r3,r16,32
 8010b10:	b811883a 	mov	r8,r23
 8010b14:	d8802417 	ldw	r2,144(sp)
 8010b18:	18014226 	beq	r3,zero,8011024 <___svfiprintf_internal_r+0x880>
 8010b1c:	d9402417 	ldw	r5,144(sp)
 8010b20:	14800017 	ldw	r18,0(r2)
 8010b24:	15800117 	ldw	r22,4(r2)
 8010b28:	29400204 	addi	r5,r5,8
 8010b2c:	d9402415 	stw	r5,144(sp)
 8010b30:	00800044 	movi	r2,1
 8010b34:	9586b03a 	or	r3,r18,r22
 8010b38:	dd002017 	ldw	r20,128(sp)
 8010b3c:	d8001d85 	stb	zero,118(sp)
 8010b40:	002f883a 	mov	r23,zero
 8010b44:	d9002017 	ldw	r4,128(sp)
 8010b48:	20000216 	blt	r4,zero,8010b54 <___svfiprintf_internal_r+0x3b0>
 8010b4c:	013fdfc4 	movi	r4,-129
 8010b50:	8120703a 	and	r16,r16,r4
 8010b54:	1801e91e 	bne	r3,zero,80112fc <___svfiprintf_internal_r+0xb58>
 8010b58:	d9402017 	ldw	r5,128(sp)
 8010b5c:	28025f26 	beq	r5,zero,80114dc <___svfiprintf_internal_r+0xd38>
 8010b60:	10803fcc 	andi	r2,r2,255
 8010b64:	00c00044 	movi	r3,1
 8010b68:	10c2b226 	beq	r2,r3,8011634 <___svfiprintf_internal_r+0xe90>
 8010b6c:	00c00084 	movi	r3,2
 8010b70:	10c27c26 	beq	r2,r3,8011564 <___svfiprintf_internal_r+0xdc0>
 8010b74:	d8c01a04 	addi	r3,sp,104
 8010b78:	9008d0fa 	srli	r4,r18,3
 8010b7c:	b00a977a 	slli	r5,r22,29
 8010b80:	b02cd0fa 	srli	r22,r22,3
 8010b84:	948001cc 	andi	r18,r18,7
 8010b88:	90800c04 	addi	r2,r18,48
 8010b8c:	18ffffc4 	addi	r3,r3,-1
 8010b90:	2924b03a 	or	r18,r5,r4
 8010b94:	18800005 	stb	r2,0(r3)
 8010b98:	9588b03a 	or	r4,r18,r22
 8010b9c:	203ff61e 	bne	r4,zero,8010b78 <__alt_data_end+0xfc010b78>
 8010ba0:	8100004c 	andi	r4,r16,1
 8010ba4:	d8c02715 	stw	r3,156(sp)
 8010ba8:	20029d26 	beq	r4,zero,8011620 <___svfiprintf_internal_r+0xe7c>
 8010bac:	10803fcc 	andi	r2,r2,255
 8010bb0:	1080201c 	xori	r2,r2,128
 8010bb4:	10bfe004 	addi	r2,r2,-128
 8010bb8:	01000c04 	movi	r4,48
 8010bbc:	11031826 	beq	r2,r4,8011820 <___svfiprintf_internal_r+0x107c>
 8010bc0:	d9402717 	ldw	r5,156(sp)
 8010bc4:	d8801e17 	ldw	r2,120(sp)
 8010bc8:	193fffc5 	stb	r4,-1(r3)
 8010bcc:	297fffc4 	addi	r5,r5,-1
 8010bd0:	d9402715 	stw	r5,156(sp)
 8010bd4:	1169c83a 	sub	r20,r2,r5
 8010bd8:	00024606 	br	80114f4 <___svfiprintf_internal_r+0xd50>
 8010bdc:	d9402417 	ldw	r5,144(sp)
 8010be0:	d8802417 	ldw	r2,144(sp)
 8010be4:	d8001d85 	stb	zero,118(sp)
 8010be8:	29400017 	ldw	r5,0(r5)
 8010bec:	b811883a 	mov	r8,r23
 8010bf0:	15800104 	addi	r22,r2,4
 8010bf4:	d9402715 	stw	r5,156(sp)
 8010bf8:	28031826 	beq	r5,zero,801185c <___svfiprintf_internal_r+0x10b8>
 8010bfc:	d9002017 	ldw	r4,128(sp)
 8010c00:	20030b16 	blt	r4,zero,8011830 <___svfiprintf_internal_r+0x108c>
 8010c04:	d9002717 	ldw	r4,156(sp)
 8010c08:	d9802017 	ldw	r6,128(sp)
 8010c0c:	000b883a 	mov	r5,zero
 8010c10:	ddc02d15 	stw	r23,180(sp)
 8010c14:	800ea380 	call	800ea38 <memchr>
 8010c18:	da002d17 	ldw	r8,180(sp)
 8010c1c:	10033926 	beq	r2,zero,8011904 <___svfiprintf_internal_r+0x1160>
 8010c20:	d8c02717 	ldw	r3,156(sp)
 8010c24:	d9002017 	ldw	r4,128(sp)
 8010c28:	10e9c83a 	sub	r20,r2,r3
 8010c2c:	2500010e 	bge	r4,r20,8010c34 <___svfiprintf_internal_r+0x490>
 8010c30:	2029883a 	mov	r20,r4
 8010c34:	ddc01d83 	ldbu	r23,118(sp)
 8010c38:	dd802415 	stw	r22,144(sp)
 8010c3c:	d8002015 	stw	zero,128(sp)
 8010c40:	00022c06 	br	80114f4 <___svfiprintf_internal_r+0xd50>
 8010c44:	84000814 	ori	r16,r16,32
 8010c48:	a9800007 	ldb	r6,0(r21)
 8010c4c:	003f2006 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8010c50:	d8802417 	ldw	r2,144(sp)
 8010c54:	d8c02417 	ldw	r3,144(sp)
 8010c58:	010200b4 	movhi	r4,2050
 8010c5c:	14800017 	ldw	r18,0(r2)
 8010c60:	00800c04 	movi	r2,48
 8010c64:	18c00104 	addi	r3,r3,4
 8010c68:	d8801d05 	stb	r2,116(sp)
 8010c6c:	210d9b04 	addi	r4,r4,13932
 8010c70:	00801e04 	movi	r2,120
 8010c74:	d8801d45 	stb	r2,117(sp)
 8010c78:	d8c02415 	stw	r3,144(sp)
 8010c7c:	b811883a 	mov	r8,r23
 8010c80:	002d883a 	mov	r22,zero
 8010c84:	84000094 	ori	r16,r16,2
 8010c88:	d9002a15 	stw	r4,168(sp)
 8010c8c:	00800084 	movi	r2,2
 8010c90:	9007883a 	mov	r3,r18
 8010c94:	003fa806 	br	8010b38 <__alt_data_end+0xfc010b38>
 8010c98:	80c0080c 	andi	r3,r16,32
 8010c9c:	b811883a 	mov	r8,r23
 8010ca0:	d8802417 	ldw	r2,144(sp)
 8010ca4:	1800f026 	beq	r3,zero,8011068 <___svfiprintf_internal_r+0x8c4>
 8010ca8:	14800017 	ldw	r18,0(r2)
 8010cac:	15800117 	ldw	r22,4(r2)
 8010cb0:	d8802417 	ldw	r2,144(sp)
 8010cb4:	9586b03a 	or	r3,r18,r22
 8010cb8:	10800204 	addi	r2,r2,8
 8010cbc:	d8802415 	stw	r2,144(sp)
 8010cc0:	0005883a 	mov	r2,zero
 8010cc4:	003f9c06 	br	8010b38 <__alt_data_end+0xfc010b38>
 8010cc8:	dd801d85 	stb	r22,118(sp)
 8010ccc:	8080080c 	andi	r2,r16,32
 8010cd0:	b811883a 	mov	r8,r23
 8010cd4:	10028a1e 	bne	r2,zero,8011700 <___svfiprintf_internal_r+0xf5c>
 8010cd8:	8080040c 	andi	r2,r16,16
 8010cdc:	1002c726 	beq	r2,zero,80117fc <___svfiprintf_internal_r+0x1058>
 8010ce0:	d8c02417 	ldw	r3,144(sp)
 8010ce4:	d9002617 	ldw	r4,152(sp)
 8010ce8:	18800017 	ldw	r2,0(r3)
 8010cec:	18c00104 	addi	r3,r3,4
 8010cf0:	d8c02415 	stw	r3,144(sp)
 8010cf4:	11000015 	stw	r4,0(r2)
 8010cf8:	003ecd06 	br	8010830 <__alt_data_end+0xfc010830>
 8010cfc:	84001014 	ori	r16,r16,64
 8010d00:	a9800007 	ldb	r6,0(r21)
 8010d04:	003ef206 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8010d08:	dd801d85 	stb	r22,118(sp)
 8010d0c:	8080080c 	andi	r2,r16,32
 8010d10:	b811883a 	mov	r8,r23
 8010d14:	d8c02417 	ldw	r3,144(sp)
 8010d18:	10007826 	beq	r2,zero,8010efc <___svfiprintf_internal_r+0x758>
 8010d1c:	d9002417 	ldw	r4,144(sp)
 8010d20:	18800117 	ldw	r2,4(r3)
 8010d24:	1c800017 	ldw	r18,0(r3)
 8010d28:	21000204 	addi	r4,r4,8
 8010d2c:	d9002415 	stw	r4,144(sp)
 8010d30:	102d883a 	mov	r22,r2
 8010d34:	10007c16 	blt	r2,zero,8010f28 <___svfiprintf_internal_r+0x784>
 8010d38:	ddc01d83 	ldbu	r23,118(sp)
 8010d3c:	dd002017 	ldw	r20,128(sp)
 8010d40:	00800044 	movi	r2,1
 8010d44:	9586b03a 	or	r3,r18,r22
 8010d48:	003f7e06 	br	8010b44 <__alt_data_end+0xfc010b44>
 8010d4c:	a9800007 	ldb	r6,0(r21)
 8010d50:	01001b04 	movi	r4,108
 8010d54:	a805883a 	mov	r2,r21
 8010d58:	31027a26 	beq	r6,r4,8011744 <___svfiprintf_internal_r+0xfa0>
 8010d5c:	84000414 	ori	r16,r16,16
 8010d60:	003edb06 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8010d64:	d9402417 	ldw	r5,144(sp)
 8010d68:	04800044 	movi	r18,1
 8010d6c:	d8c01004 	addi	r3,sp,64
 8010d70:	28800017 	ldw	r2,0(r5)
 8010d74:	29400104 	addi	r5,r5,4
 8010d78:	b811883a 	mov	r8,r23
 8010d7c:	d8001d85 	stb	zero,118(sp)
 8010d80:	d8801005 	stb	r2,64(sp)
 8010d84:	d9402415 	stw	r5,144(sp)
 8010d88:	9029883a 	mov	r20,r18
 8010d8c:	d8c02715 	stw	r3,156(sp)
 8010d90:	d8002015 	stw	zero,128(sp)
 8010d94:	80c0008c 	andi	r3,r16,2
 8010d98:	d8c02115 	stw	r3,132(sp)
 8010d9c:	18000126 	beq	r3,zero,8010da4 <___svfiprintf_internal_r+0x600>
 8010da0:	94800084 	addi	r18,r18,2
 8010da4:	80c0210c 	andi	r3,r16,132
 8010da8:	d8c02515 	stw	r3,148(sp)
 8010dac:	1800ba1e 	bne	r3,zero,8011098 <___svfiprintf_internal_r+0x8f4>
 8010db0:	d9002317 	ldw	r4,140(sp)
 8010db4:	24b9c83a 	sub	fp,r4,r18
 8010db8:	0700b70e 	bge	zero,fp,8011098 <___svfiprintf_internal_r+0x8f4>
 8010dbc:	02400404 	movi	r9,16
 8010dc0:	d8c01c17 	ldw	r3,112(sp)
 8010dc4:	d8801b17 	ldw	r2,108(sp)
 8010dc8:	4f02c00e 	bge	r9,fp,80118cc <___svfiprintf_internal_r+0x1128>
 8010dcc:	010200b4 	movhi	r4,2050
 8010dd0:	210e0804 	addi	r4,r4,14368
 8010dd4:	d9002815 	stw	r4,160(sp)
 8010dd8:	a809883a 	mov	r4,r21
 8010ddc:	dc002b15 	stw	r16,172(sp)
 8010de0:	a02b883a 	mov	r21,r20
 8010de4:	482f883a 	mov	r23,r9
 8010de8:	9029883a 	mov	r20,r18
 8010dec:	058001c4 	movi	r22,7
 8010df0:	e025883a 	mov	r18,fp
 8010df4:	dc002217 	ldw	r16,136(sp)
 8010df8:	2039883a 	mov	fp,r4
 8010dfc:	00000306 	br	8010e0c <___svfiprintf_internal_r+0x668>
 8010e00:	94bffc04 	addi	r18,r18,-16
 8010e04:	42000204 	addi	r8,r8,8
 8010e08:	bc80130e 	bge	r23,r18,8010e58 <___svfiprintf_internal_r+0x6b4>
 8010e0c:	014200b4 	movhi	r5,2050
 8010e10:	18c00404 	addi	r3,r3,16
 8010e14:	10800044 	addi	r2,r2,1
 8010e18:	294e0804 	addi	r5,r5,14368
 8010e1c:	41400015 	stw	r5,0(r8)
 8010e20:	45c00115 	stw	r23,4(r8)
 8010e24:	d8c01c15 	stw	r3,112(sp)
 8010e28:	d8801b15 	stw	r2,108(sp)
 8010e2c:	b0bff40e 	bge	r22,r2,8010e00 <__alt_data_end+0xfc010e00>
 8010e30:	8809883a 	mov	r4,r17
 8010e34:	800b883a 	mov	r5,r16
 8010e38:	d9801a04 	addi	r6,sp,104
 8010e3c:	80105dc0 	call	80105dc <__ssprint_r>
 8010e40:	1001501e 	bne	r2,zero,8011384 <___svfiprintf_internal_r+0xbe0>
 8010e44:	94bffc04 	addi	r18,r18,-16
 8010e48:	d8c01c17 	ldw	r3,112(sp)
 8010e4c:	d8801b17 	ldw	r2,108(sp)
 8010e50:	d811883a 	mov	r8,sp
 8010e54:	bcbfed16 	blt	r23,r18,8010e0c <__alt_data_end+0xfc010e0c>
 8010e58:	dc002b17 	ldw	r16,172(sp)
 8010e5c:	e009883a 	mov	r4,fp
 8010e60:	9039883a 	mov	fp,r18
 8010e64:	a025883a 	mov	r18,r20
 8010e68:	a829883a 	mov	r20,r21
 8010e6c:	202b883a 	mov	r21,r4
 8010e70:	d9002817 	ldw	r4,160(sp)
 8010e74:	e0c7883a 	add	r3,fp,r3
 8010e78:	10800044 	addi	r2,r2,1
 8010e7c:	41000015 	stw	r4,0(r8)
 8010e80:	47000115 	stw	fp,4(r8)
 8010e84:	d8c01c15 	stw	r3,112(sp)
 8010e88:	d8801b15 	stw	r2,108(sp)
 8010e8c:	010001c4 	movi	r4,7
 8010e90:	2081da16 	blt	r4,r2,80115fc <___svfiprintf_internal_r+0xe58>
 8010e94:	42000204 	addi	r8,r8,8
 8010e98:	00008106 	br	80110a0 <___svfiprintf_internal_r+0x8fc>
 8010e9c:	010200b4 	movhi	r4,2050
 8010ea0:	210d9604 	addi	r4,r4,13912
 8010ea4:	dd801d85 	stb	r22,118(sp)
 8010ea8:	d9002a15 	stw	r4,168(sp)
 8010eac:	80c0080c 	andi	r3,r16,32
 8010eb0:	b811883a 	mov	r8,r23
 8010eb4:	d8802417 	ldw	r2,144(sp)
 8010eb8:	183f091e 	bne	r3,zero,8010ae0 <__alt_data_end+0xfc010ae0>
 8010ebc:	80c0040c 	andi	r3,r16,16
 8010ec0:	1801f21e 	bne	r3,zero,801168c <___svfiprintf_internal_r+0xee8>
 8010ec4:	80c0100c 	andi	r3,r16,64
 8010ec8:	18024626 	beq	r3,zero,80117e4 <___svfiprintf_internal_r+0x1040>
 8010ecc:	d9402417 	ldw	r5,144(sp)
 8010ed0:	1480000b 	ldhu	r18,0(r2)
 8010ed4:	002d883a 	mov	r22,zero
 8010ed8:	29400104 	addi	r5,r5,4
 8010edc:	d9402415 	stw	r5,144(sp)
 8010ee0:	003f0406 	br	8010af4 <__alt_data_end+0xfc010af4>
 8010ee4:	84000414 	ori	r16,r16,16
 8010ee8:	dd801d85 	stb	r22,118(sp)
 8010eec:	8080080c 	andi	r2,r16,32
 8010ef0:	b811883a 	mov	r8,r23
 8010ef4:	d8c02417 	ldw	r3,144(sp)
 8010ef8:	103f881e 	bne	r2,zero,8010d1c <__alt_data_end+0xfc010d1c>
 8010efc:	8080040c 	andi	r2,r16,16
 8010f00:	1001f81e 	bne	r2,zero,80116e4 <___svfiprintf_internal_r+0xf40>
 8010f04:	8080100c 	andi	r2,r16,64
 8010f08:	10021f26 	beq	r2,zero,8011788 <___svfiprintf_internal_r+0xfe4>
 8010f0c:	1c80000f 	ldh	r18,0(r3)
 8010f10:	d8802417 	ldw	r2,144(sp)
 8010f14:	902dd7fa 	srai	r22,r18,31
 8010f18:	10800104 	addi	r2,r2,4
 8010f1c:	d8802415 	stw	r2,144(sp)
 8010f20:	b005883a 	mov	r2,r22
 8010f24:	103f840e 	bge	r2,zero,8010d38 <__alt_data_end+0xfc010d38>
 8010f28:	04a5c83a 	sub	r18,zero,r18
 8010f2c:	9004c03a 	cmpne	r2,r18,zero
 8010f30:	05adc83a 	sub	r22,zero,r22
 8010f34:	b0adc83a 	sub	r22,r22,r2
 8010f38:	05c00b44 	movi	r23,45
 8010f3c:	ddc01d85 	stb	r23,118(sp)
 8010f40:	dd002017 	ldw	r20,128(sp)
 8010f44:	00800044 	movi	r2,1
 8010f48:	9586b03a 	or	r3,r18,r22
 8010f4c:	003efd06 	br	8010b44 <__alt_data_end+0xfc010b44>
 8010f50:	dc002115 	stw	r16,132(sp)
 8010f54:	d8002315 	stw	zero,140(sp)
 8010f58:	373ff404 	addi	fp,r6,-48
 8010f5c:	0009883a 	mov	r4,zero
 8010f60:	a821883a 	mov	r16,r21
 8010f64:	01400284 	movi	r5,10
 8010f68:	8004c100 	call	8004c10 <__mulsi3>
 8010f6c:	81800007 	ldb	r6,0(r16)
 8010f70:	1709883a 	add	r4,r2,fp
 8010f74:	ad400044 	addi	r21,r21,1
 8010f78:	373ff404 	addi	fp,r6,-48
 8010f7c:	a821883a 	mov	r16,r21
 8010f80:	a73ff82e 	bgeu	r20,fp,8010f64 <__alt_data_end+0xfc010f64>
 8010f84:	d9002315 	stw	r4,140(sp)
 8010f88:	30bff804 	addi	r2,r6,-32
 8010f8c:	dc002117 	ldw	r16,132(sp)
 8010f90:	90be522e 	bgeu	r18,r2,80108dc <__alt_data_end+0xfc0108dc>
 8010f94:	dd801d85 	stb	r22,118(sp)
 8010f98:	b811883a 	mov	r8,r23
 8010f9c:	3000f326 	beq	r6,zero,801136c <___svfiprintf_internal_r+0xbc8>
 8010fa0:	04800044 	movi	r18,1
 8010fa4:	d8c01004 	addi	r3,sp,64
 8010fa8:	d9801005 	stb	r6,64(sp)
 8010fac:	d8001d85 	stb	zero,118(sp)
 8010fb0:	9029883a 	mov	r20,r18
 8010fb4:	d8c02715 	stw	r3,156(sp)
 8010fb8:	003f7506 	br	8010d90 <__alt_data_end+0xfc010d90>
 8010fbc:	84002014 	ori	r16,r16,128
 8010fc0:	a9800007 	ldb	r6,0(r21)
 8010fc4:	003e4206 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8010fc8:	a9800007 	ldb	r6,0(r21)
 8010fcc:	01400a84 	movi	r5,42
 8010fd0:	a8800044 	addi	r2,r21,1
 8010fd4:	31425226 	beq	r6,r5,8011920 <___svfiprintf_internal_r+0x117c>
 8010fd8:	373ff404 	addi	fp,r6,-48
 8010fdc:	102b883a 	mov	r21,r2
 8010fe0:	0009883a 	mov	r4,zero
 8010fe4:	a7024536 	bltu	r20,fp,80118fc <___svfiprintf_internal_r+0x1158>
 8010fe8:	01400284 	movi	r5,10
 8010fec:	8004c100 	call	8004c10 <__mulsi3>
 8010ff0:	a9800007 	ldb	r6,0(r21)
 8010ff4:	e089883a 	add	r4,fp,r2
 8010ff8:	ad400044 	addi	r21,r21,1
 8010ffc:	373ff404 	addi	fp,r6,-48
 8011000:	a73ff92e 	bgeu	r20,fp,8010fe8 <__alt_data_end+0xfc010fe8>
 8011004:	20021316 	blt	r4,zero,8011854 <___svfiprintf_internal_r+0x10b0>
 8011008:	d9002015 	stw	r4,128(sp)
 801100c:	003e3106 	br	80108d4 <__alt_data_end+0xfc0108d4>
 8011010:	84000414 	ori	r16,r16,16
 8011014:	80c0080c 	andi	r3,r16,32
 8011018:	b811883a 	mov	r8,r23
 801101c:	d8802417 	ldw	r2,144(sp)
 8011020:	183ebe1e 	bne	r3,zero,8010b1c <__alt_data_end+0xfc010b1c>
 8011024:	80c0040c 	andi	r3,r16,16
 8011028:	18019e1e 	bne	r3,zero,80116a4 <___svfiprintf_internal_r+0xf00>
 801102c:	80c0100c 	andi	r3,r16,64
 8011030:	1801dc26 	beq	r3,zero,80117a4 <___svfiprintf_internal_r+0x1000>
 8011034:	d8c02417 	ldw	r3,144(sp)
 8011038:	1480000b 	ldhu	r18,0(r2)
 801103c:	002d883a 	mov	r22,zero
 8011040:	18c00104 	addi	r3,r3,4
 8011044:	d8c02415 	stw	r3,144(sp)
 8011048:	00800044 	movi	r2,1
 801104c:	9007883a 	mov	r3,r18
 8011050:	003eb906 	br	8010b38 <__alt_data_end+0xfc010b38>
 8011054:	84000414 	ori	r16,r16,16
 8011058:	80c0080c 	andi	r3,r16,32
 801105c:	b811883a 	mov	r8,r23
 8011060:	d8802417 	ldw	r2,144(sp)
 8011064:	183f101e 	bne	r3,zero,8010ca8 <__alt_data_end+0xfc010ca8>
 8011068:	80c0040c 	andi	r3,r16,16
 801106c:	1801951e 	bne	r3,zero,80116c4 <___svfiprintf_internal_r+0xf20>
 8011070:	80c0100c 	andi	r3,r16,64
 8011074:	1801d326 	beq	r3,zero,80117c4 <___svfiprintf_internal_r+0x1020>
 8011078:	d9002417 	ldw	r4,144(sp)
 801107c:	1480000b 	ldhu	r18,0(r2)
 8011080:	002d883a 	mov	r22,zero
 8011084:	21000104 	addi	r4,r4,4
 8011088:	d9002415 	stw	r4,144(sp)
 801108c:	0005883a 	mov	r2,zero
 8011090:	9007883a 	mov	r3,r18
 8011094:	003ea806 	br	8010b38 <__alt_data_end+0xfc010b38>
 8011098:	d8c01c17 	ldw	r3,112(sp)
 801109c:	d8801b17 	ldw	r2,108(sp)
 80110a0:	d9001d87 	ldb	r4,118(sp)
 80110a4:	20000b26 	beq	r4,zero,80110d4 <___svfiprintf_internal_r+0x930>
 80110a8:	d9001d84 	addi	r4,sp,118
 80110ac:	18c00044 	addi	r3,r3,1
 80110b0:	10800044 	addi	r2,r2,1
 80110b4:	41000015 	stw	r4,0(r8)
 80110b8:	01000044 	movi	r4,1
 80110bc:	41000115 	stw	r4,4(r8)
 80110c0:	d8c01c15 	stw	r3,112(sp)
 80110c4:	d8801b15 	stw	r2,108(sp)
 80110c8:	010001c4 	movi	r4,7
 80110cc:	20813616 	blt	r4,r2,80115a8 <___svfiprintf_internal_r+0xe04>
 80110d0:	42000204 	addi	r8,r8,8
 80110d4:	d9402117 	ldw	r5,132(sp)
 80110d8:	28000b26 	beq	r5,zero,8011108 <___svfiprintf_internal_r+0x964>
 80110dc:	d9001d04 	addi	r4,sp,116
 80110e0:	18c00084 	addi	r3,r3,2
 80110e4:	10800044 	addi	r2,r2,1
 80110e8:	41000015 	stw	r4,0(r8)
 80110ec:	01000084 	movi	r4,2
 80110f0:	41000115 	stw	r4,4(r8)
 80110f4:	d8c01c15 	stw	r3,112(sp)
 80110f8:	d8801b15 	stw	r2,108(sp)
 80110fc:	010001c4 	movi	r4,7
 8011100:	20813216 	blt	r4,r2,80115cc <___svfiprintf_internal_r+0xe28>
 8011104:	42000204 	addi	r8,r8,8
 8011108:	d9402517 	ldw	r5,148(sp)
 801110c:	01002004 	movi	r4,128
 8011110:	2900ad26 	beq	r5,r4,80113c8 <___svfiprintf_internal_r+0xc24>
 8011114:	d9002017 	ldw	r4,128(sp)
 8011118:	252fc83a 	sub	r23,r4,r20
 801111c:	05c0330e 	bge	zero,r23,80111ec <___svfiprintf_internal_r+0xa48>
 8011120:	01c00404 	movi	r7,16
 8011124:	3dc1940e 	bge	r7,r23,8011778 <___svfiprintf_internal_r+0xfd4>
 8011128:	010200b4 	movhi	r4,2050
 801112c:	210e0404 	addi	r4,r4,14352
 8011130:	d9002115 	stw	r4,132(sp)
 8011134:	a809883a 	mov	r4,r21
 8011138:	dc002015 	stw	r16,128(sp)
 801113c:	a02b883a 	mov	r21,r20
 8011140:	3839883a 	mov	fp,r7
 8011144:	9029883a 	mov	r20,r18
 8011148:	058001c4 	movi	r22,7
 801114c:	b825883a 	mov	r18,r23
 8011150:	dc002217 	ldw	r16,136(sp)
 8011154:	202f883a 	mov	r23,r4
 8011158:	00000306 	br	8011168 <___svfiprintf_internal_r+0x9c4>
 801115c:	94bffc04 	addi	r18,r18,-16
 8011160:	42000204 	addi	r8,r8,8
 8011164:	e480110e 	bge	fp,r18,80111ac <___svfiprintf_internal_r+0xa08>
 8011168:	18c00404 	addi	r3,r3,16
 801116c:	10800044 	addi	r2,r2,1
 8011170:	44c00015 	stw	r19,0(r8)
 8011174:	47000115 	stw	fp,4(r8)
 8011178:	d8c01c15 	stw	r3,112(sp)
 801117c:	d8801b15 	stw	r2,108(sp)
 8011180:	b0bff60e 	bge	r22,r2,801115c <__alt_data_end+0xfc01115c>
 8011184:	8809883a 	mov	r4,r17
 8011188:	800b883a 	mov	r5,r16
 801118c:	d9801a04 	addi	r6,sp,104
 8011190:	80105dc0 	call	80105dc <__ssprint_r>
 8011194:	10007b1e 	bne	r2,zero,8011384 <___svfiprintf_internal_r+0xbe0>
 8011198:	94bffc04 	addi	r18,r18,-16
 801119c:	d8c01c17 	ldw	r3,112(sp)
 80111a0:	d8801b17 	ldw	r2,108(sp)
 80111a4:	d811883a 	mov	r8,sp
 80111a8:	e4bfef16 	blt	fp,r18,8011168 <__alt_data_end+0xfc011168>
 80111ac:	dc002017 	ldw	r16,128(sp)
 80111b0:	b809883a 	mov	r4,r23
 80111b4:	902f883a 	mov	r23,r18
 80111b8:	a025883a 	mov	r18,r20
 80111bc:	a829883a 	mov	r20,r21
 80111c0:	202b883a 	mov	r21,r4
 80111c4:	d9402117 	ldw	r5,132(sp)
 80111c8:	1dc7883a 	add	r3,r3,r23
 80111cc:	10800044 	addi	r2,r2,1
 80111d0:	41400015 	stw	r5,0(r8)
 80111d4:	45c00115 	stw	r23,4(r8)
 80111d8:	d8c01c15 	stw	r3,112(sp)
 80111dc:	d8801b15 	stw	r2,108(sp)
 80111e0:	010001c4 	movi	r4,7
 80111e4:	2080d616 	blt	r4,r2,8011540 <___svfiprintf_internal_r+0xd9c>
 80111e8:	42000204 	addi	r8,r8,8
 80111ec:	d9002717 	ldw	r4,156(sp)
 80111f0:	a0c7883a 	add	r3,r20,r3
 80111f4:	10800044 	addi	r2,r2,1
 80111f8:	41000015 	stw	r4,0(r8)
 80111fc:	45000115 	stw	r20,4(r8)
 8011200:	d8c01c15 	stw	r3,112(sp)
 8011204:	d8801b15 	stw	r2,108(sp)
 8011208:	010001c4 	movi	r4,7
 801120c:	2080a516 	blt	r4,r2,80114a4 <___svfiprintf_internal_r+0xd00>
 8011210:	42000204 	addi	r8,r8,8
 8011214:	8400010c 	andi	r16,r16,4
 8011218:	80002b26 	beq	r16,zero,80112c8 <___svfiprintf_internal_r+0xb24>
 801121c:	d9402317 	ldw	r5,140(sp)
 8011220:	2ca1c83a 	sub	r16,r5,r18
 8011224:	0400280e 	bge	zero,r16,80112c8 <___svfiprintf_internal_r+0xb24>
 8011228:	05000404 	movi	r20,16
 801122c:	d8801b17 	ldw	r2,108(sp)
 8011230:	a401aa0e 	bge	r20,r16,80118dc <___svfiprintf_internal_r+0x1138>
 8011234:	014200b4 	movhi	r5,2050
 8011238:	294e0804 	addi	r5,r5,14368
 801123c:	d9402815 	stw	r5,160(sp)
 8011240:	058001c4 	movi	r22,7
 8011244:	ddc02217 	ldw	r23,136(sp)
 8011248:	00000306 	br	8011258 <___svfiprintf_internal_r+0xab4>
 801124c:	843ffc04 	addi	r16,r16,-16
 8011250:	42000204 	addi	r8,r8,8
 8011254:	a400130e 	bge	r20,r16,80112a4 <___svfiprintf_internal_r+0xb00>
 8011258:	010200b4 	movhi	r4,2050
 801125c:	18c00404 	addi	r3,r3,16
 8011260:	10800044 	addi	r2,r2,1
 8011264:	210e0804 	addi	r4,r4,14368
 8011268:	41000015 	stw	r4,0(r8)
 801126c:	45000115 	stw	r20,4(r8)
 8011270:	d8c01c15 	stw	r3,112(sp)
 8011274:	d8801b15 	stw	r2,108(sp)
 8011278:	b0bff40e 	bge	r22,r2,801124c <__alt_data_end+0xfc01124c>
 801127c:	8809883a 	mov	r4,r17
 8011280:	b80b883a 	mov	r5,r23
 8011284:	d9801a04 	addi	r6,sp,104
 8011288:	80105dc0 	call	80105dc <__ssprint_r>
 801128c:	10003d1e 	bne	r2,zero,8011384 <___svfiprintf_internal_r+0xbe0>
 8011290:	843ffc04 	addi	r16,r16,-16
 8011294:	d8c01c17 	ldw	r3,112(sp)
 8011298:	d8801b17 	ldw	r2,108(sp)
 801129c:	d811883a 	mov	r8,sp
 80112a0:	a43fed16 	blt	r20,r16,8011258 <__alt_data_end+0xfc011258>
 80112a4:	d9402817 	ldw	r5,160(sp)
 80112a8:	1c07883a 	add	r3,r3,r16
 80112ac:	10800044 	addi	r2,r2,1
 80112b0:	41400015 	stw	r5,0(r8)
 80112b4:	44000115 	stw	r16,4(r8)
 80112b8:	d8c01c15 	stw	r3,112(sp)
 80112bc:	d8801b15 	stw	r2,108(sp)
 80112c0:	010001c4 	movi	r4,7
 80112c4:	2080e416 	blt	r4,r2,8011658 <___svfiprintf_internal_r+0xeb4>
 80112c8:	d8802317 	ldw	r2,140(sp)
 80112cc:	9080010e 	bge	r18,r2,80112d4 <___svfiprintf_internal_r+0xb30>
 80112d0:	1025883a 	mov	r18,r2
 80112d4:	d9002617 	ldw	r4,152(sp)
 80112d8:	2489883a 	add	r4,r4,r18
 80112dc:	d9002615 	stw	r4,152(sp)
 80112e0:	1800781e 	bne	r3,zero,80114c4 <___svfiprintf_internal_r+0xd20>
 80112e4:	a8800007 	ldb	r2,0(r21)
 80112e8:	d8001b15 	stw	zero,108(sp)
 80112ec:	d811883a 	mov	r8,sp
 80112f0:	103d511e 	bne	r2,zero,8010838 <__alt_data_end+0xfc010838>
 80112f4:	a825883a 	mov	r18,r21
 80112f8:	003d6806 	br	801089c <__alt_data_end+0xfc01089c>
 80112fc:	10803fcc 	andi	r2,r2,255
 8011300:	00c00044 	movi	r3,1
 8011304:	10fe191e 	bne	r2,r3,8010b6c <__alt_data_end+0xfc010b6c>
 8011308:	b000c826 	beq	r22,zero,801162c <___svfiprintf_internal_r+0xe88>
 801130c:	df001a04 	addi	fp,sp,104
 8011310:	4029883a 	mov	r20,r8
 8011314:	9009883a 	mov	r4,r18
 8011318:	b00b883a 	mov	r5,r22
 801131c:	01800284 	movi	r6,10
 8011320:	000f883a 	mov	r7,zero
 8011324:	8013f680 	call	8013f68 <__umoddi3>
 8011328:	10800c04 	addi	r2,r2,48
 801132c:	e73fffc4 	addi	fp,fp,-1
 8011330:	9009883a 	mov	r4,r18
 8011334:	b00b883a 	mov	r5,r22
 8011338:	01800284 	movi	r6,10
 801133c:	000f883a 	mov	r7,zero
 8011340:	e0800005 	stb	r2,0(fp)
 8011344:	80139280 	call	8013928 <__udivdi3>
 8011348:	1025883a 	mov	r18,r2
 801134c:	10c4b03a 	or	r2,r2,r3
 8011350:	182d883a 	mov	r22,r3
 8011354:	103fef1e 	bne	r2,zero,8011314 <__alt_data_end+0xfc011314>
 8011358:	d9001e17 	ldw	r4,120(sp)
 801135c:	a011883a 	mov	r8,r20
 8011360:	df002715 	stw	fp,156(sp)
 8011364:	2729c83a 	sub	r20,r4,fp
 8011368:	00006206 	br	80114f4 <___svfiprintf_internal_r+0xd50>
 801136c:	d8801c17 	ldw	r2,112(sp)
 8011370:	10000426 	beq	r2,zero,8011384 <___svfiprintf_internal_r+0xbe0>
 8011374:	d9002917 	ldw	r4,164(sp)
 8011378:	d9402217 	ldw	r5,136(sp)
 801137c:	d9801a04 	addi	r6,sp,104
 8011380:	80105dc0 	call	80105dc <__ssprint_r>
 8011384:	d9402217 	ldw	r5,136(sp)
 8011388:	2880030b 	ldhu	r2,12(r5)
 801138c:	1080100c 	andi	r2,r2,64
 8011390:	1000621e 	bne	r2,zero,801151c <___svfiprintf_internal_r+0xd78>
 8011394:	d8802617 	ldw	r2,152(sp)
 8011398:	dfc03717 	ldw	ra,220(sp)
 801139c:	df003617 	ldw	fp,216(sp)
 80113a0:	ddc03517 	ldw	r23,212(sp)
 80113a4:	dd803417 	ldw	r22,208(sp)
 80113a8:	dd403317 	ldw	r21,204(sp)
 80113ac:	dd003217 	ldw	r20,200(sp)
 80113b0:	dcc03117 	ldw	r19,196(sp)
 80113b4:	dc803017 	ldw	r18,192(sp)
 80113b8:	dc402f17 	ldw	r17,188(sp)
 80113bc:	dc002e17 	ldw	r16,184(sp)
 80113c0:	dec03804 	addi	sp,sp,224
 80113c4:	f800283a 	ret
 80113c8:	d9002317 	ldw	r4,140(sp)
 80113cc:	24afc83a 	sub	r23,r4,r18
 80113d0:	05ff500e 	bge	zero,r23,8011114 <__alt_data_end+0xfc011114>
 80113d4:	01c00404 	movi	r7,16
 80113d8:	3dc1440e 	bge	r7,r23,80118ec <___svfiprintf_internal_r+0x1148>
 80113dc:	010200b4 	movhi	r4,2050
 80113e0:	210e0404 	addi	r4,r4,14352
 80113e4:	d9002115 	stw	r4,132(sp)
 80113e8:	a809883a 	mov	r4,r21
 80113ec:	dc002515 	stw	r16,148(sp)
 80113f0:	a02b883a 	mov	r21,r20
 80113f4:	3839883a 	mov	fp,r7
 80113f8:	9029883a 	mov	r20,r18
 80113fc:	058001c4 	movi	r22,7
 8011400:	b825883a 	mov	r18,r23
 8011404:	dc002217 	ldw	r16,136(sp)
 8011408:	202f883a 	mov	r23,r4
 801140c:	00000306 	br	801141c <___svfiprintf_internal_r+0xc78>
 8011410:	94bffc04 	addi	r18,r18,-16
 8011414:	42000204 	addi	r8,r8,8
 8011418:	e480110e 	bge	fp,r18,8011460 <___svfiprintf_internal_r+0xcbc>
 801141c:	18c00404 	addi	r3,r3,16
 8011420:	10800044 	addi	r2,r2,1
 8011424:	44c00015 	stw	r19,0(r8)
 8011428:	47000115 	stw	fp,4(r8)
 801142c:	d8c01c15 	stw	r3,112(sp)
 8011430:	d8801b15 	stw	r2,108(sp)
 8011434:	b0bff60e 	bge	r22,r2,8011410 <__alt_data_end+0xfc011410>
 8011438:	8809883a 	mov	r4,r17
 801143c:	800b883a 	mov	r5,r16
 8011440:	d9801a04 	addi	r6,sp,104
 8011444:	80105dc0 	call	80105dc <__ssprint_r>
 8011448:	103fce1e 	bne	r2,zero,8011384 <__alt_data_end+0xfc011384>
 801144c:	94bffc04 	addi	r18,r18,-16
 8011450:	d8c01c17 	ldw	r3,112(sp)
 8011454:	d8801b17 	ldw	r2,108(sp)
 8011458:	d811883a 	mov	r8,sp
 801145c:	e4bfef16 	blt	fp,r18,801141c <__alt_data_end+0xfc01141c>
 8011460:	dc002517 	ldw	r16,148(sp)
 8011464:	b809883a 	mov	r4,r23
 8011468:	902f883a 	mov	r23,r18
 801146c:	a025883a 	mov	r18,r20
 8011470:	a829883a 	mov	r20,r21
 8011474:	202b883a 	mov	r21,r4
 8011478:	d9402117 	ldw	r5,132(sp)
 801147c:	1dc7883a 	add	r3,r3,r23
 8011480:	10800044 	addi	r2,r2,1
 8011484:	41400015 	stw	r5,0(r8)
 8011488:	45c00115 	stw	r23,4(r8)
 801148c:	d8c01c15 	stw	r3,112(sp)
 8011490:	d8801b15 	stw	r2,108(sp)
 8011494:	010001c4 	movi	r4,7
 8011498:	2080ae16 	blt	r4,r2,8011754 <___svfiprintf_internal_r+0xfb0>
 801149c:	42000204 	addi	r8,r8,8
 80114a0:	003f1c06 	br	8011114 <__alt_data_end+0xfc011114>
 80114a4:	d9402217 	ldw	r5,136(sp)
 80114a8:	8809883a 	mov	r4,r17
 80114ac:	d9801a04 	addi	r6,sp,104
 80114b0:	80105dc0 	call	80105dc <__ssprint_r>
 80114b4:	103fb31e 	bne	r2,zero,8011384 <__alt_data_end+0xfc011384>
 80114b8:	d8c01c17 	ldw	r3,112(sp)
 80114bc:	d811883a 	mov	r8,sp
 80114c0:	003f5406 	br	8011214 <__alt_data_end+0xfc011214>
 80114c4:	d9402217 	ldw	r5,136(sp)
 80114c8:	8809883a 	mov	r4,r17
 80114cc:	d9801a04 	addi	r6,sp,104
 80114d0:	80105dc0 	call	80105dc <__ssprint_r>
 80114d4:	103f8326 	beq	r2,zero,80112e4 <__alt_data_end+0xfc0112e4>
 80114d8:	003faa06 	br	8011384 <__alt_data_end+0xfc011384>
 80114dc:	10803fcc 	andi	r2,r2,255
 80114e0:	1000021e 	bne	r2,zero,80114ec <___svfiprintf_internal_r+0xd48>
 80114e4:	8080004c 	andi	r2,r16,1
 80114e8:	1000621e 	bne	r2,zero,8011674 <___svfiprintf_internal_r+0xed0>
 80114ec:	d8c01a04 	addi	r3,sp,104
 80114f0:	d8c02715 	stw	r3,156(sp)
 80114f4:	d9002017 	ldw	r4,128(sp)
 80114f8:	a025883a 	mov	r18,r20
 80114fc:	a100010e 	bge	r20,r4,8011504 <___svfiprintf_internal_r+0xd60>
 8011500:	2025883a 	mov	r18,r4
 8011504:	bdc03fcc 	andi	r23,r23,255
 8011508:	bdc0201c 	xori	r23,r23,128
 801150c:	bdffe004 	addi	r23,r23,-128
 8011510:	b83e2026 	beq	r23,zero,8010d94 <__alt_data_end+0xfc010d94>
 8011514:	94800044 	addi	r18,r18,1
 8011518:	003e1e06 	br	8010d94 <__alt_data_end+0xfc010d94>
 801151c:	00bfffc4 	movi	r2,-1
 8011520:	003f9d06 	br	8011398 <__alt_data_end+0xfc011398>
 8011524:	d9402217 	ldw	r5,136(sp)
 8011528:	8809883a 	mov	r4,r17
 801152c:	d9801a04 	addi	r6,sp,104
 8011530:	80105dc0 	call	80105dc <__ssprint_r>
 8011534:	103f931e 	bne	r2,zero,8011384 <__alt_data_end+0xfc011384>
 8011538:	d811883a 	mov	r8,sp
 801153c:	003cd406 	br	8010890 <__alt_data_end+0xfc010890>
 8011540:	d9402217 	ldw	r5,136(sp)
 8011544:	8809883a 	mov	r4,r17
 8011548:	d9801a04 	addi	r6,sp,104
 801154c:	80105dc0 	call	80105dc <__ssprint_r>
 8011550:	103f8c1e 	bne	r2,zero,8011384 <__alt_data_end+0xfc011384>
 8011554:	d8c01c17 	ldw	r3,112(sp)
 8011558:	d8801b17 	ldw	r2,108(sp)
 801155c:	d811883a 	mov	r8,sp
 8011560:	003f2206 	br	80111ec <__alt_data_end+0xfc0111ec>
 8011564:	d9002a17 	ldw	r4,168(sp)
 8011568:	df001a04 	addi	fp,sp,104
 801156c:	908003cc 	andi	r2,r18,15
 8011570:	b006973a 	slli	r3,r22,28
 8011574:	2085883a 	add	r2,r4,r2
 8011578:	9024d13a 	srli	r18,r18,4
 801157c:	10800003 	ldbu	r2,0(r2)
 8011580:	b02cd13a 	srli	r22,r22,4
 8011584:	e73fffc4 	addi	fp,fp,-1
 8011588:	1ca4b03a 	or	r18,r3,r18
 801158c:	e0800005 	stb	r2,0(fp)
 8011590:	9584b03a 	or	r2,r18,r22
 8011594:	103ff51e 	bne	r2,zero,801156c <__alt_data_end+0xfc01156c>
 8011598:	d9401e17 	ldw	r5,120(sp)
 801159c:	df002715 	stw	fp,156(sp)
 80115a0:	2f29c83a 	sub	r20,r5,fp
 80115a4:	003fd306 	br	80114f4 <__alt_data_end+0xfc0114f4>
 80115a8:	d9402217 	ldw	r5,136(sp)
 80115ac:	8809883a 	mov	r4,r17
 80115b0:	d9801a04 	addi	r6,sp,104
 80115b4:	80105dc0 	call	80105dc <__ssprint_r>
 80115b8:	103f721e 	bne	r2,zero,8011384 <__alt_data_end+0xfc011384>
 80115bc:	d8c01c17 	ldw	r3,112(sp)
 80115c0:	d8801b17 	ldw	r2,108(sp)
 80115c4:	d811883a 	mov	r8,sp
 80115c8:	003ec206 	br	80110d4 <__alt_data_end+0xfc0110d4>
 80115cc:	d9402217 	ldw	r5,136(sp)
 80115d0:	8809883a 	mov	r4,r17
 80115d4:	d9801a04 	addi	r6,sp,104
 80115d8:	80105dc0 	call	80105dc <__ssprint_r>
 80115dc:	103f691e 	bne	r2,zero,8011384 <__alt_data_end+0xfc011384>
 80115e0:	d8c01c17 	ldw	r3,112(sp)
 80115e4:	d8801b17 	ldw	r2,108(sp)
 80115e8:	d811883a 	mov	r8,sp
 80115ec:	003ec606 	br	8011108 <__alt_data_end+0xfc011108>
 80115f0:	00800084 	movi	r2,2
 80115f4:	9586b03a 	or	r3,r18,r22
 80115f8:	003d4f06 	br	8010b38 <__alt_data_end+0xfc010b38>
 80115fc:	d9402217 	ldw	r5,136(sp)
 8011600:	8809883a 	mov	r4,r17
 8011604:	d9801a04 	addi	r6,sp,104
 8011608:	80105dc0 	call	80105dc <__ssprint_r>
 801160c:	103f5d1e 	bne	r2,zero,8011384 <__alt_data_end+0xfc011384>
 8011610:	d8c01c17 	ldw	r3,112(sp)
 8011614:	d8801b17 	ldw	r2,108(sp)
 8011618:	d811883a 	mov	r8,sp
 801161c:	003ea006 	br	80110a0 <__alt_data_end+0xfc0110a0>
 8011620:	d8801e17 	ldw	r2,120(sp)
 8011624:	10e9c83a 	sub	r20,r2,r3
 8011628:	003fb206 	br	80114f4 <__alt_data_end+0xfc0114f4>
 801162c:	00800244 	movi	r2,9
 8011630:	14bf3636 	bltu	r2,r18,801130c <__alt_data_end+0xfc01130c>
 8011634:	94800c04 	addi	r18,r18,48
 8011638:	d8c019c4 	addi	r3,sp,103
 801163c:	dc8019c5 	stb	r18,103(sp)
 8011640:	dd002c17 	ldw	r20,176(sp)
 8011644:	d8c02715 	stw	r3,156(sp)
 8011648:	003faa06 	br	80114f4 <__alt_data_end+0xfc0114f4>
 801164c:	d8802415 	stw	r2,144(sp)
 8011650:	a9800007 	ldb	r6,0(r21)
 8011654:	003c9e06 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8011658:	d9402217 	ldw	r5,136(sp)
 801165c:	8809883a 	mov	r4,r17
 8011660:	d9801a04 	addi	r6,sp,104
 8011664:	80105dc0 	call	80105dc <__ssprint_r>
 8011668:	103f461e 	bne	r2,zero,8011384 <__alt_data_end+0xfc011384>
 801166c:	d8c01c17 	ldw	r3,112(sp)
 8011670:	003f1506 	br	80112c8 <__alt_data_end+0xfc0112c8>
 8011674:	00800c04 	movi	r2,48
 8011678:	d8c019c4 	addi	r3,sp,103
 801167c:	d88019c5 	stb	r2,103(sp)
 8011680:	dd002c17 	ldw	r20,176(sp)
 8011684:	d8c02715 	stw	r3,156(sp)
 8011688:	003f9a06 	br	80114f4 <__alt_data_end+0xfc0114f4>
 801168c:	d9002417 	ldw	r4,144(sp)
 8011690:	14800017 	ldw	r18,0(r2)
 8011694:	002d883a 	mov	r22,zero
 8011698:	21000104 	addi	r4,r4,4
 801169c:	d9002415 	stw	r4,144(sp)
 80116a0:	003d1406 	br	8010af4 <__alt_data_end+0xfc010af4>
 80116a4:	14800017 	ldw	r18,0(r2)
 80116a8:	d8802417 	ldw	r2,144(sp)
 80116ac:	002d883a 	mov	r22,zero
 80116b0:	9007883a 	mov	r3,r18
 80116b4:	10800104 	addi	r2,r2,4
 80116b8:	d8802415 	stw	r2,144(sp)
 80116bc:	00800044 	movi	r2,1
 80116c0:	003d1d06 	br	8010b38 <__alt_data_end+0xfc010b38>
 80116c4:	d8c02417 	ldw	r3,144(sp)
 80116c8:	14800017 	ldw	r18,0(r2)
 80116cc:	002d883a 	mov	r22,zero
 80116d0:	18c00104 	addi	r3,r3,4
 80116d4:	d8c02415 	stw	r3,144(sp)
 80116d8:	0005883a 	mov	r2,zero
 80116dc:	9007883a 	mov	r3,r18
 80116e0:	003d1506 	br	8010b38 <__alt_data_end+0xfc010b38>
 80116e4:	1c800017 	ldw	r18,0(r3)
 80116e8:	d9402417 	ldw	r5,144(sp)
 80116ec:	902dd7fa 	srai	r22,r18,31
 80116f0:	29400104 	addi	r5,r5,4
 80116f4:	d9402415 	stw	r5,144(sp)
 80116f8:	b005883a 	mov	r2,r22
 80116fc:	003d8d06 	br	8010d34 <__alt_data_end+0xfc010d34>
 8011700:	d9002417 	ldw	r4,144(sp)
 8011704:	d9402617 	ldw	r5,152(sp)
 8011708:	20800017 	ldw	r2,0(r4)
 801170c:	2807d7fa 	srai	r3,r5,31
 8011710:	21000104 	addi	r4,r4,4
 8011714:	d9002415 	stw	r4,144(sp)
 8011718:	11400015 	stw	r5,0(r2)
 801171c:	10c00115 	stw	r3,4(r2)
 8011720:	003c4306 	br	8010830 <__alt_data_end+0xfc010830>
 8011724:	00800c04 	movi	r2,48
 8011728:	d8801d05 	stb	r2,116(sp)
 801172c:	d9801d45 	stb	r6,117(sp)
 8011730:	84000094 	ori	r16,r16,2
 8011734:	00800084 	movi	r2,2
 8011738:	003cff06 	br	8010b38 <__alt_data_end+0xfc010b38>
 801173c:	a9800007 	ldb	r6,0(r21)
 8011740:	003c6306 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8011744:	ad400044 	addi	r21,r21,1
 8011748:	84000814 	ori	r16,r16,32
 801174c:	11800047 	ldb	r6,1(r2)
 8011750:	003c5f06 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8011754:	d9402217 	ldw	r5,136(sp)
 8011758:	8809883a 	mov	r4,r17
 801175c:	d9801a04 	addi	r6,sp,104
 8011760:	80105dc0 	call	80105dc <__ssprint_r>
 8011764:	103f071e 	bne	r2,zero,8011384 <__alt_data_end+0xfc011384>
 8011768:	d8c01c17 	ldw	r3,112(sp)
 801176c:	d8801b17 	ldw	r2,108(sp)
 8011770:	d811883a 	mov	r8,sp
 8011774:	003e6706 	br	8011114 <__alt_data_end+0xfc011114>
 8011778:	014200b4 	movhi	r5,2050
 801177c:	294e0404 	addi	r5,r5,14352
 8011780:	d9402115 	stw	r5,132(sp)
 8011784:	003e8f06 	br	80111c4 <__alt_data_end+0xfc0111c4>
 8011788:	1c800017 	ldw	r18,0(r3)
 801178c:	d8c02417 	ldw	r3,144(sp)
 8011790:	902dd7fa 	srai	r22,r18,31
 8011794:	18c00104 	addi	r3,r3,4
 8011798:	d8c02415 	stw	r3,144(sp)
 801179c:	b005883a 	mov	r2,r22
 80117a0:	003d6406 	br	8010d34 <__alt_data_end+0xfc010d34>
 80117a4:	d9002417 	ldw	r4,144(sp)
 80117a8:	14800017 	ldw	r18,0(r2)
 80117ac:	002d883a 	mov	r22,zero
 80117b0:	21000104 	addi	r4,r4,4
 80117b4:	d9002415 	stw	r4,144(sp)
 80117b8:	00800044 	movi	r2,1
 80117bc:	9007883a 	mov	r3,r18
 80117c0:	003cdd06 	br	8010b38 <__alt_data_end+0xfc010b38>
 80117c4:	d9402417 	ldw	r5,144(sp)
 80117c8:	14800017 	ldw	r18,0(r2)
 80117cc:	002d883a 	mov	r22,zero
 80117d0:	29400104 	addi	r5,r5,4
 80117d4:	d9402415 	stw	r5,144(sp)
 80117d8:	0005883a 	mov	r2,zero
 80117dc:	9007883a 	mov	r3,r18
 80117e0:	003cd506 	br	8010b38 <__alt_data_end+0xfc010b38>
 80117e4:	14800017 	ldw	r18,0(r2)
 80117e8:	d8802417 	ldw	r2,144(sp)
 80117ec:	002d883a 	mov	r22,zero
 80117f0:	10800104 	addi	r2,r2,4
 80117f4:	d8802415 	stw	r2,144(sp)
 80117f8:	003cbe06 	br	8010af4 <__alt_data_end+0xfc010af4>
 80117fc:	8400100c 	andi	r16,r16,64
 8011800:	80002b26 	beq	r16,zero,80118b0 <___svfiprintf_internal_r+0x110c>
 8011804:	d9402417 	ldw	r5,144(sp)
 8011808:	d8c02617 	ldw	r3,152(sp)
 801180c:	28800017 	ldw	r2,0(r5)
 8011810:	29400104 	addi	r5,r5,4
 8011814:	d9402415 	stw	r5,144(sp)
 8011818:	10c0000d 	sth	r3,0(r2)
 801181c:	003c0406 	br	8010830 <__alt_data_end+0xfc010830>
 8011820:	d8c01e17 	ldw	r3,120(sp)
 8011824:	d9002717 	ldw	r4,156(sp)
 8011828:	1929c83a 	sub	r20,r3,r4
 801182c:	003f3106 	br	80114f4 <__alt_data_end+0xfc0114f4>
 8011830:	d9002717 	ldw	r4,156(sp)
 8011834:	ddc02d15 	stw	r23,180(sp)
 8011838:	80079640 	call	8007964 <strlen>
 801183c:	1029883a 	mov	r20,r2
 8011840:	ddc01d83 	ldbu	r23,118(sp)
 8011844:	dd802415 	stw	r22,144(sp)
 8011848:	d8002015 	stw	zero,128(sp)
 801184c:	da002d17 	ldw	r8,180(sp)
 8011850:	003f2806 	br	80114f4 <__alt_data_end+0xfc0114f4>
 8011854:	013fffc4 	movi	r4,-1
 8011858:	003deb06 	br	8011008 <__alt_data_end+0xfc011008>
 801185c:	dd002017 	ldw	r20,128(sp)
 8011860:	00800184 	movi	r2,6
 8011864:	1500012e 	bgeu	r2,r20,801186c <___svfiprintf_internal_r+0x10c8>
 8011868:	1029883a 	mov	r20,r2
 801186c:	a025883a 	mov	r18,r20
 8011870:	a0002916 	blt	r20,zero,8011918 <___svfiprintf_internal_r+0x1174>
 8011874:	00c200b4 	movhi	r3,2050
 8011878:	18cda004 	addi	r3,r3,13952
 801187c:	dd802415 	stw	r22,144(sp)
 8011880:	d8c02715 	stw	r3,156(sp)
 8011884:	003d4206 	br	8010d90 <__alt_data_end+0xfc010d90>
 8011888:	04001004 	movi	r16,64
 801188c:	800b883a 	mov	r5,r16
 8011890:	80069900 	call	8006990 <_malloc_r>
 8011894:	d8c02217 	ldw	r3,136(sp)
 8011898:	18800015 	stw	r2,0(r3)
 801189c:	18800415 	stw	r2,16(r3)
 80118a0:	10002b26 	beq	r2,zero,8011950 <___svfiprintf_internal_r+0x11ac>
 80118a4:	d9402217 	ldw	r5,136(sp)
 80118a8:	2c000515 	stw	r16,20(r5)
 80118ac:	003bd106 	br	80107f4 <__alt_data_end+0xfc0107f4>
 80118b0:	d9002417 	ldw	r4,144(sp)
 80118b4:	d9402617 	ldw	r5,152(sp)
 80118b8:	20800017 	ldw	r2,0(r4)
 80118bc:	21000104 	addi	r4,r4,4
 80118c0:	d9002415 	stw	r4,144(sp)
 80118c4:	11400015 	stw	r5,0(r2)
 80118c8:	003bd906 	br	8010830 <__alt_data_end+0xfc010830>
 80118cc:	014200b4 	movhi	r5,2050
 80118d0:	294e0804 	addi	r5,r5,14368
 80118d4:	d9402815 	stw	r5,160(sp)
 80118d8:	003d6506 	br	8010e70 <__alt_data_end+0xfc010e70>
 80118dc:	010200b4 	movhi	r4,2050
 80118e0:	210e0804 	addi	r4,r4,14368
 80118e4:	d9002815 	stw	r4,160(sp)
 80118e8:	003e6e06 	br	80112a4 <__alt_data_end+0xfc0112a4>
 80118ec:	014200b4 	movhi	r5,2050
 80118f0:	294e0404 	addi	r5,r5,14352
 80118f4:	d9402115 	stw	r5,132(sp)
 80118f8:	003edf06 	br	8011478 <__alt_data_end+0xfc011478>
 80118fc:	d8002015 	stw	zero,128(sp)
 8011900:	003bf406 	br	80108d4 <__alt_data_end+0xfc0108d4>
 8011904:	dd002017 	ldw	r20,128(sp)
 8011908:	ddc01d83 	ldbu	r23,118(sp)
 801190c:	dd802415 	stw	r22,144(sp)
 8011910:	d8002015 	stw	zero,128(sp)
 8011914:	003ef706 	br	80114f4 <__alt_data_end+0xfc0114f4>
 8011918:	0025883a 	mov	r18,zero
 801191c:	003fd506 	br	8011874 <__alt_data_end+0xfc011874>
 8011920:	d8c02417 	ldw	r3,144(sp)
 8011924:	a809883a 	mov	r4,r21
 8011928:	102b883a 	mov	r21,r2
 801192c:	18c00017 	ldw	r3,0(r3)
 8011930:	d8c02015 	stw	r3,128(sp)
 8011934:	d8c02417 	ldw	r3,144(sp)
 8011938:	d8802017 	ldw	r2,128(sp)
 801193c:	19400104 	addi	r5,r3,4
 8011940:	d9402415 	stw	r5,144(sp)
 8011944:	10000716 	blt	r2,zero,8011964 <___svfiprintf_internal_r+0x11c0>
 8011948:	21800047 	ldb	r6,1(r4)
 801194c:	003be006 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8011950:	d9002917 	ldw	r4,164(sp)
 8011954:	00800304 	movi	r2,12
 8011958:	20800015 	stw	r2,0(r4)
 801195c:	00bfffc4 	movi	r2,-1
 8011960:	003e8d06 	br	8011398 <__alt_data_end+0xfc011398>
 8011964:	00ffffc4 	movi	r3,-1
 8011968:	d8c02015 	stw	r3,128(sp)
 801196c:	21800047 	ldb	r6,1(r4)
 8011970:	003bd706 	br	80108d0 <__alt_data_end+0xfc0108d0>

08011974 <__sprint_r.part.0>:
 8011974:	28801917 	ldw	r2,100(r5)
 8011978:	defff604 	addi	sp,sp,-40
 801197c:	dd400515 	stw	r21,20(sp)
 8011980:	dcc00315 	stw	r19,12(sp)
 8011984:	dfc00915 	stw	ra,36(sp)
 8011988:	df000815 	stw	fp,32(sp)
 801198c:	ddc00715 	stw	r23,28(sp)
 8011990:	dd800615 	stw	r22,24(sp)
 8011994:	dd000415 	stw	r20,16(sp)
 8011998:	dc800215 	stw	r18,8(sp)
 801199c:	dc400115 	stw	r17,4(sp)
 80119a0:	dc000015 	stw	r16,0(sp)
 80119a4:	1088000c 	andi	r2,r2,8192
 80119a8:	2827883a 	mov	r19,r5
 80119ac:	302b883a 	mov	r21,r6
 80119b0:	10002d26 	beq	r2,zero,8011a68 <__sprint_r.part.0+0xf4>
 80119b4:	30800217 	ldw	r2,8(r6)
 80119b8:	35800017 	ldw	r22,0(r6)
 80119bc:	10002826 	beq	r2,zero,8011a60 <__sprint_r.part.0+0xec>
 80119c0:	2029883a 	mov	r20,r4
 80119c4:	b5c00104 	addi	r23,r22,4
 80119c8:	04bfffc4 	movi	r18,-1
 80119cc:	bc400017 	ldw	r17,0(r23)
 80119d0:	b4000017 	ldw	r16,0(r22)
 80119d4:	0039883a 	mov	fp,zero
 80119d8:	8822d0ba 	srli	r17,r17,2
 80119dc:	04400316 	blt	zero,r17,80119ec <__sprint_r.part.0+0x78>
 80119e0:	00001706 	br	8011a40 <__sprint_r.part.0+0xcc>
 80119e4:	84000104 	addi	r16,r16,4
 80119e8:	8f001526 	beq	r17,fp,8011a40 <__sprint_r.part.0+0xcc>
 80119ec:	81400017 	ldw	r5,0(r16)
 80119f0:	a009883a 	mov	r4,r20
 80119f4:	980d883a 	mov	r6,r19
 80119f8:	801316c0 	call	801316c <_fputwc_r>
 80119fc:	e7000044 	addi	fp,fp,1
 8011a00:	14bff81e 	bne	r2,r18,80119e4 <__alt_data_end+0xfc0119e4>
 8011a04:	9005883a 	mov	r2,r18
 8011a08:	a8000215 	stw	zero,8(r21)
 8011a0c:	a8000115 	stw	zero,4(r21)
 8011a10:	dfc00917 	ldw	ra,36(sp)
 8011a14:	df000817 	ldw	fp,32(sp)
 8011a18:	ddc00717 	ldw	r23,28(sp)
 8011a1c:	dd800617 	ldw	r22,24(sp)
 8011a20:	dd400517 	ldw	r21,20(sp)
 8011a24:	dd000417 	ldw	r20,16(sp)
 8011a28:	dcc00317 	ldw	r19,12(sp)
 8011a2c:	dc800217 	ldw	r18,8(sp)
 8011a30:	dc400117 	ldw	r17,4(sp)
 8011a34:	dc000017 	ldw	r16,0(sp)
 8011a38:	dec00a04 	addi	sp,sp,40
 8011a3c:	f800283a 	ret
 8011a40:	a8c00217 	ldw	r3,8(r21)
 8011a44:	8c63883a 	add	r17,r17,r17
 8011a48:	8c63883a 	add	r17,r17,r17
 8011a4c:	1c45c83a 	sub	r2,r3,r17
 8011a50:	a8800215 	stw	r2,8(r21)
 8011a54:	b5800204 	addi	r22,r22,8
 8011a58:	bdc00204 	addi	r23,r23,8
 8011a5c:	103fdb1e 	bne	r2,zero,80119cc <__alt_data_end+0xfc0119cc>
 8011a60:	0005883a 	mov	r2,zero
 8011a64:	003fe806 	br	8011a08 <__alt_data_end+0xfc011a08>
 8011a68:	800e1340 	call	800e134 <__sfvwrite_r>
 8011a6c:	003fe606 	br	8011a08 <__alt_data_end+0xfc011a08>

08011a70 <__sprint_r>:
 8011a70:	30c00217 	ldw	r3,8(r6)
 8011a74:	18000126 	beq	r3,zero,8011a7c <__sprint_r+0xc>
 8011a78:	80119741 	jmpi	8011974 <__sprint_r.part.0>
 8011a7c:	30000115 	stw	zero,4(r6)
 8011a80:	0005883a 	mov	r2,zero
 8011a84:	f800283a 	ret

08011a88 <___vfiprintf_internal_r>:
 8011a88:	defeca04 	addi	sp,sp,-1240
 8011a8c:	dcc12f15 	stw	r19,1212(sp)
 8011a90:	dfc13515 	stw	ra,1236(sp)
 8011a94:	df013415 	stw	fp,1232(sp)
 8011a98:	ddc13315 	stw	r23,1228(sp)
 8011a9c:	dd813215 	stw	r22,1224(sp)
 8011aa0:	dd413115 	stw	r21,1220(sp)
 8011aa4:	dd013015 	stw	r20,1216(sp)
 8011aa8:	dc812e15 	stw	r18,1208(sp)
 8011aac:	dc412d15 	stw	r17,1204(sp)
 8011ab0:	dc012c15 	stw	r16,1200(sp)
 8011ab4:	d9012115 	stw	r4,1156(sp)
 8011ab8:	d9412015 	stw	r5,1152(sp)
 8011abc:	d9c12315 	stw	r7,1164(sp)
 8011ac0:	3027883a 	mov	r19,r6
 8011ac4:	20000226 	beq	r4,zero,8011ad0 <___vfiprintf_internal_r+0x48>
 8011ac8:	20800e17 	ldw	r2,56(r4)
 8011acc:	1000f726 	beq	r2,zero,8011eac <___vfiprintf_internal_r+0x424>
 8011ad0:	d8812017 	ldw	r2,1152(sp)
 8011ad4:	10c0030b 	ldhu	r3,12(r2)
 8011ad8:	1908000c 	andi	r4,r3,8192
 8011adc:	1805883a 	mov	r2,r3
 8011ae0:	2000081e 	bne	r4,zero,8011b04 <___vfiprintf_internal_r+0x7c>
 8011ae4:	d9412017 	ldw	r5,1152(sp)
 8011ae8:	18880014 	ori	r2,r3,8192
 8011aec:	00f7ffc4 	movi	r3,-8193
 8011af0:	29001917 	ldw	r4,100(r5)
 8011af4:	2880030d 	sth	r2,12(r5)
 8011af8:	20c8703a 	and	r4,r4,r3
 8011afc:	29001915 	stw	r4,100(r5)
 8011b00:	1007883a 	mov	r3,r2
 8011b04:	1100020c 	andi	r4,r2,8
 8011b08:	2000a726 	beq	r4,zero,8011da8 <___vfiprintf_internal_r+0x320>
 8011b0c:	d9412017 	ldw	r5,1152(sp)
 8011b10:	29000417 	ldw	r4,16(r5)
 8011b14:	2000a426 	beq	r4,zero,8011da8 <___vfiprintf_internal_r+0x320>
 8011b18:	1080068c 	andi	r2,r2,26
 8011b1c:	01000284 	movi	r4,10
 8011b20:	1100ab26 	beq	r2,r4,8011dd0 <___vfiprintf_internal_r+0x348>
 8011b24:	d9010a04 	addi	r4,sp,1064
 8011b28:	d94109c4 	addi	r5,sp,1063
 8011b2c:	070200b4 	movhi	fp,2050
 8011b30:	044200b4 	movhi	r17,2050
 8011b34:	2145c83a 	sub	r2,r4,r5
 8011b38:	e70e1004 	addi	fp,fp,14400
 8011b3c:	8c4e0c04 	addi	r17,r17,14384
 8011b40:	d9011e15 	stw	r4,1144(sp)
 8011b44:	d9411f15 	stw	r5,1148(sp)
 8011b48:	dec11a15 	stw	sp,1128(sp)
 8011b4c:	d8011c15 	stw	zero,1136(sp)
 8011b50:	d8011b15 	stw	zero,1132(sp)
 8011b54:	d8012715 	stw	zero,1180(sp)
 8011b58:	d8012515 	stw	zero,1172(sp)
 8011b5c:	d811883a 	mov	r8,sp
 8011b60:	d8812815 	stw	r2,1184(sp)
 8011b64:	982f883a 	mov	r23,r19
 8011b68:	b8800007 	ldb	r2,0(r23)
 8011b6c:	1003b026 	beq	r2,zero,8012a30 <___vfiprintf_internal_r+0xfa8>
 8011b70:	01000944 	movi	r4,37
 8011b74:	1103ae26 	beq	r2,r4,8012a30 <___vfiprintf_internal_r+0xfa8>
 8011b78:	b805883a 	mov	r2,r23
 8011b7c:	00000106 	br	8011b84 <___vfiprintf_internal_r+0xfc>
 8011b80:	19000326 	beq	r3,r4,8011b90 <___vfiprintf_internal_r+0x108>
 8011b84:	10800044 	addi	r2,r2,1
 8011b88:	10c00007 	ldb	r3,0(r2)
 8011b8c:	183ffc1e 	bne	r3,zero,8011b80 <__alt_data_end+0xfc011b80>
 8011b90:	15e1c83a 	sub	r16,r2,r23
 8011b94:	1029883a 	mov	r20,r2
 8011b98:	80001026 	beq	r16,zero,8011bdc <___vfiprintf_internal_r+0x154>
 8011b9c:	d8c11c17 	ldw	r3,1136(sp)
 8011ba0:	d8811b17 	ldw	r2,1132(sp)
 8011ba4:	45c00015 	stw	r23,0(r8)
 8011ba8:	80c7883a 	add	r3,r16,r3
 8011bac:	10800044 	addi	r2,r2,1
 8011bb0:	44000115 	stw	r16,4(r8)
 8011bb4:	d8c11c15 	stw	r3,1136(sp)
 8011bb8:	d8811b15 	stw	r2,1132(sp)
 8011bbc:	010001c4 	movi	r4,7
 8011bc0:	2080740e 	bge	r4,r2,8011d94 <___vfiprintf_internal_r+0x30c>
 8011bc4:	1803a71e 	bne	r3,zero,8012a64 <___vfiprintf_internal_r+0xfdc>
 8011bc8:	d8c12517 	ldw	r3,1172(sp)
 8011bcc:	d8011b15 	stw	zero,1132(sp)
 8011bd0:	d811883a 	mov	r8,sp
 8011bd4:	1c07883a 	add	r3,r3,r16
 8011bd8:	d8c12515 	stw	r3,1172(sp)
 8011bdc:	a0800007 	ldb	r2,0(r20)
 8011be0:	1002bf26 	beq	r2,zero,80126e0 <___vfiprintf_internal_r+0xc58>
 8011be4:	a5c00044 	addi	r23,r20,1
 8011be8:	a1800047 	ldb	r6,1(r20)
 8011bec:	d8011d85 	stb	zero,1142(sp)
 8011bf0:	d8012205 	stb	zero,1160(sp)
 8011bf4:	043fffc4 	movi	r16,-1
 8011bf8:	d8012415 	stw	zero,1168(sp)
 8011bfc:	0025883a 	mov	r18,zero
 8011c00:	05001604 	movi	r20,88
 8011c04:	05400244 	movi	r21,9
 8011c08:	4027883a 	mov	r19,r8
 8011c0c:	bdc00044 	addi	r23,r23,1
 8011c10:	30bff804 	addi	r2,r6,-32
 8011c14:	a0825636 	bltu	r20,r2,8012570 <___vfiprintf_internal_r+0xae8>
 8011c18:	100490ba 	slli	r2,r2,2
 8011c1c:	01020074 	movhi	r4,2049
 8011c20:	21070c04 	addi	r4,r4,7216
 8011c24:	1105883a 	add	r2,r2,r4
 8011c28:	10800017 	ldw	r2,0(r2)
 8011c2c:	1000683a 	jmp	r2
 8011c30:	08012500 	call	801250 <__alt_mem_sdram-0x77fedb0>
 8011c34:	08012570 	cmpltui	zero,at,1173
 8011c38:	08012570 	cmpltui	zero,at,1173
 8011c3c:	08012564 	muli	zero,at,1173
 8011c40:	08012570 	cmpltui	zero,at,1173
 8011c44:	08012570 	cmpltui	zero,at,1173
 8011c48:	08012570 	cmpltui	zero,at,1173
 8011c4c:	08012570 	cmpltui	zero,at,1173
 8011c50:	08012570 	cmpltui	zero,at,1173
 8011c54:	08012570 	cmpltui	zero,at,1173
 8011c58:	080122f0 	cmpltui	zero,at,1163
 8011c5c:	08012518 	cmpnei	zero,at,1172
 8011c60:	08012570 	cmpltui	zero,at,1173
 8011c64:	08011ec4 	addi	zero,at,1147
 8011c68:	08012314 	ori	zero,at,1164
 8011c6c:	08012570 	cmpltui	zero,at,1173
 8011c70:	08011ed0 	cmplti	zero,at,1147
 8011c74:	08011edc 	xori	zero,at,1147
 8011c78:	08011edc 	xori	zero,at,1147
 8011c7c:	08011edc 	xori	zero,at,1147
 8011c80:	08011edc 	xori	zero,at,1147
 8011c84:	08011edc 	xori	zero,at,1147
 8011c88:	08011edc 	xori	zero,at,1147
 8011c8c:	08011edc 	xori	zero,at,1147
 8011c90:	08011edc 	xori	zero,at,1147
 8011c94:	08011edc 	xori	zero,at,1147
 8011c98:	08012570 	cmpltui	zero,at,1173
 8011c9c:	08012570 	cmpltui	zero,at,1173
 8011ca0:	08012570 	cmpltui	zero,at,1173
 8011ca4:	08012570 	cmpltui	zero,at,1173
 8011ca8:	08012570 	cmpltui	zero,at,1173
 8011cac:	08012570 	cmpltui	zero,at,1173
 8011cb0:	08012570 	cmpltui	zero,at,1173
 8011cb4:	08012570 	cmpltui	zero,at,1173
 8011cb8:	08012570 	cmpltui	zero,at,1173
 8011cbc:	08012570 	cmpltui	zero,at,1173
 8011cc0:	08011f1c 	xori	zero,at,1148
 8011cc4:	08012570 	cmpltui	zero,at,1173
 8011cc8:	08012570 	cmpltui	zero,at,1173
 8011ccc:	08012570 	cmpltui	zero,at,1173
 8011cd0:	08012570 	cmpltui	zero,at,1173
 8011cd4:	08012570 	cmpltui	zero,at,1173
 8011cd8:	08012570 	cmpltui	zero,at,1173
 8011cdc:	08012570 	cmpltui	zero,at,1173
 8011ce0:	08012570 	cmpltui	zero,at,1173
 8011ce4:	08012570 	cmpltui	zero,at,1173
 8011ce8:	08012570 	cmpltui	zero,at,1173
 8011cec:	0801220c 	andi	zero,at,1160
 8011cf0:	08012570 	cmpltui	zero,at,1173
 8011cf4:	08012570 	cmpltui	zero,at,1173
 8011cf8:	08012570 	cmpltui	zero,at,1173
 8011cfc:	08012570 	cmpltui	zero,at,1173
 8011d00:	08012570 	cmpltui	zero,at,1173
 8011d04:	0801224c 	andi	zero,at,1161
 8011d08:	08012570 	cmpltui	zero,at,1173
 8011d0c:	08012570 	cmpltui	zero,at,1173
 8011d10:	08012290 	cmplti	zero,at,1162
 8011d14:	08012570 	cmpltui	zero,at,1173
 8011d18:	08012570 	cmpltui	zero,at,1173
 8011d1c:	08012570 	cmpltui	zero,at,1173
 8011d20:	08012570 	cmpltui	zero,at,1173
 8011d24:	08012570 	cmpltui	zero,at,1173
 8011d28:	08012570 	cmpltui	zero,at,1173
 8011d2c:	08012570 	cmpltui	zero,at,1173
 8011d30:	08012570 	cmpltui	zero,at,1173
 8011d34:	08012570 	cmpltui	zero,at,1173
 8011d38:	08012570 	cmpltui	zero,at,1173
 8011d3c:	080121d8 	cmpnei	zero,at,1159
 8011d40:	08012528 	cmpgeui	zero,at,1172
 8011d44:	08012570 	cmpltui	zero,at,1173
 8011d48:	08012570 	cmpltui	zero,at,1173
 8011d4c:	08012570 	cmpltui	zero,at,1173
 8011d50:	08012364 	muli	zero,at,1165
 8011d54:	08012528 	cmpgeui	zero,at,1172
 8011d58:	08012570 	cmpltui	zero,at,1173
 8011d5c:	08012570 	cmpltui	zero,at,1173
 8011d60:	0801227c 	xorhi	zero,at,1161
 8011d64:	08012570 	cmpltui	zero,at,1173
 8011d68:	080124c8 	cmpgei	zero,at,1171
 8011d6c:	08012450 	cmplti	zero,at,1169
 8011d70:	08012484 	addi	zero,at,1170
 8011d74:	08012370 	cmpltui	zero,at,1165
 8011d78:	08012570 	cmpltui	zero,at,1173
 8011d7c:	0801237c 	xorhi	zero,at,1165
 8011d80:	08012570 	cmpltui	zero,at,1173
 8011d84:	080123d8 	cmpnei	zero,at,1167
 8011d88:	08012570 	cmpltui	zero,at,1173
 8011d8c:	08012570 	cmpltui	zero,at,1173
 8011d90:	0801240c 	andi	zero,at,1168
 8011d94:	42000204 	addi	r8,r8,8
 8011d98:	d8c12517 	ldw	r3,1172(sp)
 8011d9c:	1c07883a 	add	r3,r3,r16
 8011da0:	d8c12515 	stw	r3,1172(sp)
 8011da4:	003f8d06 	br	8011bdc <__alt_data_end+0xfc011bdc>
 8011da8:	d9012117 	ldw	r4,1156(sp)
 8011dac:	d9412017 	ldw	r5,1152(sp)
 8011db0:	800bc940 	call	800bc94 <__swsetup_r>
 8011db4:	1000301e 	bne	r2,zero,8011e78 <___vfiprintf_internal_r+0x3f0>
 8011db8:	d8812017 	ldw	r2,1152(sp)
 8011dbc:	01000284 	movi	r4,10
 8011dc0:	10c0030b 	ldhu	r3,12(r2)
 8011dc4:	1805883a 	mov	r2,r3
 8011dc8:	1080068c 	andi	r2,r2,26
 8011dcc:	113f551e 	bne	r2,r4,8011b24 <__alt_data_end+0xfc011b24>
 8011dd0:	d9012017 	ldw	r4,1152(sp)
 8011dd4:	2080038b 	ldhu	r2,14(r4)
 8011dd8:	113fffcc 	andi	r4,r2,65535
 8011ddc:	2120001c 	xori	r4,r4,32768
 8011de0:	21200004 	addi	r4,r4,-32768
 8011de4:	203f4f16 	blt	r4,zero,8011b24 <__alt_data_end+0xfc011b24>
 8011de8:	d9412017 	ldw	r5,1152(sp)
 8011dec:	d9012117 	ldw	r4,1156(sp)
 8011df0:	d9c12317 	ldw	r7,1164(sp)
 8011df4:	2b001917 	ldw	r12,100(r5)
 8011df8:	2ac00717 	ldw	r11,28(r5)
 8011dfc:	2a800917 	ldw	r10,36(r5)
 8011e00:	02010004 	movi	r8,1024
 8011e04:	18ffff4c 	andi	r3,r3,65533
 8011e08:	da0b883a 	add	r5,sp,r8
 8011e0c:	980d883a 	mov	r6,r19
 8011e10:	d8c1030d 	sth	r3,1036(sp)
 8011e14:	db011915 	stw	r12,1124(sp)
 8011e18:	d881038d 	sth	r2,1038(sp)
 8011e1c:	dac10715 	stw	r11,1052(sp)
 8011e20:	da810915 	stw	r10,1060(sp)
 8011e24:	dec10015 	stw	sp,1024(sp)
 8011e28:	dec10415 	stw	sp,1040(sp)
 8011e2c:	da010215 	stw	r8,1032(sp)
 8011e30:	da010515 	stw	r8,1044(sp)
 8011e34:	d8010615 	stw	zero,1048(sp)
 8011e38:	8011a880 	call	8011a88 <___vfiprintf_internal_r>
 8011e3c:	1021883a 	mov	r16,r2
 8011e40:	10000416 	blt	r2,zero,8011e54 <___vfiprintf_internal_r+0x3cc>
 8011e44:	d9012117 	ldw	r4,1156(sp)
 8011e48:	d9410004 	addi	r5,sp,1024
 8011e4c:	800d7140 	call	800d714 <_fflush_r>
 8011e50:	10040f1e 	bne	r2,zero,8012e90 <___vfiprintf_internal_r+0x1408>
 8011e54:	d881030b 	ldhu	r2,1036(sp)
 8011e58:	1080100c 	andi	r2,r2,64
 8011e5c:	10000426 	beq	r2,zero,8011e70 <___vfiprintf_internal_r+0x3e8>
 8011e60:	d8c12017 	ldw	r3,1152(sp)
 8011e64:	1880030b 	ldhu	r2,12(r3)
 8011e68:	10801014 	ori	r2,r2,64
 8011e6c:	1880030d 	sth	r2,12(r3)
 8011e70:	8005883a 	mov	r2,r16
 8011e74:	00000106 	br	8011e7c <___vfiprintf_internal_r+0x3f4>
 8011e78:	00bfffc4 	movi	r2,-1
 8011e7c:	dfc13517 	ldw	ra,1236(sp)
 8011e80:	df013417 	ldw	fp,1232(sp)
 8011e84:	ddc13317 	ldw	r23,1228(sp)
 8011e88:	dd813217 	ldw	r22,1224(sp)
 8011e8c:	dd413117 	ldw	r21,1220(sp)
 8011e90:	dd013017 	ldw	r20,1216(sp)
 8011e94:	dcc12f17 	ldw	r19,1212(sp)
 8011e98:	dc812e17 	ldw	r18,1208(sp)
 8011e9c:	dc412d17 	ldw	r17,1204(sp)
 8011ea0:	dc012c17 	ldw	r16,1200(sp)
 8011ea4:	dec13604 	addi	sp,sp,1240
 8011ea8:	f800283a 	ret
 8011eac:	800dcd00 	call	800dcd0 <__sinit>
 8011eb0:	003f0706 	br	8011ad0 <__alt_data_end+0xfc011ad0>
 8011eb4:	d8c12417 	ldw	r3,1168(sp)
 8011eb8:	d8812315 	stw	r2,1164(sp)
 8011ebc:	00c7c83a 	sub	r3,zero,r3
 8011ec0:	d8c12415 	stw	r3,1168(sp)
 8011ec4:	94800114 	ori	r18,r18,4
 8011ec8:	b9800007 	ldb	r6,0(r23)
 8011ecc:	003f4f06 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8011ed0:	94802014 	ori	r18,r18,128
 8011ed4:	b9800007 	ldb	r6,0(r23)
 8011ed8:	003f4c06 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8011edc:	dc012615 	stw	r16,1176(sp)
 8011ee0:	d8012415 	stw	zero,1168(sp)
 8011ee4:	35bff404 	addi	r22,r6,-48
 8011ee8:	0009883a 	mov	r4,zero
 8011eec:	b821883a 	mov	r16,r23
 8011ef0:	01400284 	movi	r5,10
 8011ef4:	8004c100 	call	8004c10 <__mulsi3>
 8011ef8:	81800007 	ldb	r6,0(r16)
 8011efc:	1589883a 	add	r4,r2,r22
 8011f00:	bdc00044 	addi	r23,r23,1
 8011f04:	35bff404 	addi	r22,r6,-48
 8011f08:	b821883a 	mov	r16,r23
 8011f0c:	adbff82e 	bgeu	r21,r22,8011ef0 <__alt_data_end+0xfc011ef0>
 8011f10:	d9012415 	stw	r4,1168(sp)
 8011f14:	dc012617 	ldw	r16,1176(sp)
 8011f18:	003f3d06 	br	8011c10 <__alt_data_end+0xfc011c10>
 8011f1c:	d8c12203 	ldbu	r3,1160(sp)
 8011f20:	94800414 	ori	r18,r18,16
 8011f24:	9080080c 	andi	r2,r18,32
 8011f28:	d8c11d85 	stb	r3,1142(sp)
 8011f2c:	9811883a 	mov	r8,r19
 8011f30:	d8c12317 	ldw	r3,1164(sp)
 8011f34:	10018226 	beq	r2,zero,8012540 <___vfiprintf_internal_r+0xab8>
 8011f38:	d9012317 	ldw	r4,1164(sp)
 8011f3c:	18800117 	ldw	r2,4(r3)
 8011f40:	1cc00017 	ldw	r19,0(r3)
 8011f44:	21000204 	addi	r4,r4,8
 8011f48:	d9012315 	stw	r4,1164(sp)
 8011f4c:	102b883a 	mov	r21,r2
 8011f50:	10030016 	blt	r2,zero,8012b54 <___vfiprintf_internal_r+0x10cc>
 8011f54:	dd811d83 	ldbu	r22,1142(sp)
 8011f58:	8029883a 	mov	r20,r16
 8011f5c:	00800044 	movi	r2,1
 8011f60:	9d46b03a 	or	r3,r19,r21
 8011f64:	80000216 	blt	r16,zero,8011f70 <___vfiprintf_internal_r+0x4e8>
 8011f68:	013fdfc4 	movi	r4,-129
 8011f6c:	9124703a 	and	r18,r18,r4
 8011f70:	1801b41e 	bne	r3,zero,8012644 <___vfiprintf_internal_r+0xbbc>
 8011f74:	80028126 	beq	r16,zero,801297c <___vfiprintf_internal_r+0xef4>
 8011f78:	10803fcc 	andi	r2,r2,255
 8011f7c:	00c00044 	movi	r3,1
 8011f80:	10c1d126 	beq	r2,r3,80126c8 <___vfiprintf_internal_r+0xc40>
 8011f84:	00c00084 	movi	r3,2
 8011f88:	10c28626 	beq	r2,r3,80129a4 <___vfiprintf_internal_r+0xf1c>
 8011f8c:	d8c10a04 	addi	r3,sp,1064
 8011f90:	9808d0fa 	srli	r4,r19,3
 8011f94:	a80a977a 	slli	r5,r21,29
 8011f98:	a82ad0fa 	srli	r21,r21,3
 8011f9c:	9cc001cc 	andi	r19,r19,7
 8011fa0:	98800c04 	addi	r2,r19,48
 8011fa4:	18ffffc4 	addi	r3,r3,-1
 8011fa8:	2926b03a 	or	r19,r5,r4
 8011fac:	18800005 	stb	r2,0(r3)
 8011fb0:	9d48b03a 	or	r4,r19,r21
 8011fb4:	203ff61e 	bne	r4,zero,8011f90 <__alt_data_end+0xfc011f90>
 8011fb8:	9100004c 	andi	r4,r18,1
 8011fbc:	d8c12215 	stw	r3,1160(sp)
 8011fc0:	2002b31e 	bne	r4,zero,8012a90 <___vfiprintf_internal_r+0x1008>
 8011fc4:	d9411e17 	ldw	r5,1144(sp)
 8011fc8:	28e9c83a 	sub	r20,r5,r3
 8011fcc:	a02b883a 	mov	r21,r20
 8011fd0:	a400010e 	bge	r20,r16,8011fd8 <___vfiprintf_internal_r+0x550>
 8011fd4:	802b883a 	mov	r21,r16
 8011fd8:	b5803fcc 	andi	r22,r22,255
 8011fdc:	b580201c 	xori	r22,r22,128
 8011fe0:	b5bfe004 	addi	r22,r22,-128
 8011fe4:	b0000126 	beq	r22,zero,8011fec <___vfiprintf_internal_r+0x564>
 8011fe8:	ad400044 	addi	r21,r21,1
 8011fec:	9280008c 	andi	r10,r18,2
 8011ff0:	50000126 	beq	r10,zero,8011ff8 <___vfiprintf_internal_r+0x570>
 8011ff4:	ad400084 	addi	r21,r21,2
 8011ff8:	9580210c 	andi	r22,r18,132
 8011ffc:	b001751e 	bne	r22,zero,80125d4 <___vfiprintf_internal_r+0xb4c>
 8012000:	d9012417 	ldw	r4,1168(sp)
 8012004:	2567c83a 	sub	r19,r4,r21
 8012008:	04c1720e 	bge	zero,r19,80125d4 <___vfiprintf_internal_r+0xb4c>
 801200c:	01c00404 	movi	r7,16
 8012010:	d8c11c17 	ldw	r3,1136(sp)
 8012014:	3cc36b0e 	bge	r7,r19,8012dc4 <___vfiprintf_internal_r+0x133c>
 8012018:	008200b4 	movhi	r2,2050
 801201c:	108e1004 	addi	r2,r2,14400
 8012020:	dc012915 	stw	r16,1188(sp)
 8012024:	d9011b17 	ldw	r4,1132(sp)
 8012028:	9821883a 	mov	r16,r19
 801202c:	d8812615 	stw	r2,1176(sp)
 8012030:	030001c4 	movi	r12,7
 8012034:	5027883a 	mov	r19,r10
 8012038:	00000506 	br	8012050 <___vfiprintf_internal_r+0x5c8>
 801203c:	21400084 	addi	r5,r4,2
 8012040:	42000204 	addi	r8,r8,8
 8012044:	1009883a 	mov	r4,r2
 8012048:	843ffc04 	addi	r16,r16,-16
 801204c:	3c000d0e 	bge	r7,r16,8012084 <___vfiprintf_internal_r+0x5fc>
 8012050:	18c00404 	addi	r3,r3,16
 8012054:	20800044 	addi	r2,r4,1
 8012058:	47000015 	stw	fp,0(r8)
 801205c:	41c00115 	stw	r7,4(r8)
 8012060:	d8c11c15 	stw	r3,1136(sp)
 8012064:	d8811b15 	stw	r2,1132(sp)
 8012068:	60bff40e 	bge	r12,r2,801203c <__alt_data_end+0xfc01203c>
 801206c:	18014b1e 	bne	r3,zero,801259c <___vfiprintf_internal_r+0xb14>
 8012070:	843ffc04 	addi	r16,r16,-16
 8012074:	0009883a 	mov	r4,zero
 8012078:	01400044 	movi	r5,1
 801207c:	d811883a 	mov	r8,sp
 8012080:	3c3ff316 	blt	r7,r16,8012050 <__alt_data_end+0xfc012050>
 8012084:	9815883a 	mov	r10,r19
 8012088:	8027883a 	mov	r19,r16
 801208c:	dc012917 	ldw	r16,1188(sp)
 8012090:	d9012617 	ldw	r4,1176(sp)
 8012094:	98c7883a 	add	r3,r19,r3
 8012098:	44c00115 	stw	r19,4(r8)
 801209c:	41000015 	stw	r4,0(r8)
 80120a0:	d8c11c15 	stw	r3,1136(sp)
 80120a4:	d9411b15 	stw	r5,1132(sp)
 80120a8:	008001c4 	movi	r2,7
 80120ac:	11425116 	blt	r2,r5,80129f4 <___vfiprintf_internal_r+0xf6c>
 80120b0:	d9011d87 	ldb	r4,1142(sp)
 80120b4:	42000204 	addi	r8,r8,8
 80120b8:	28800044 	addi	r2,r5,1
 80120bc:	20014a1e 	bne	r4,zero,80125e8 <___vfiprintf_internal_r+0xb60>
 80120c0:	50000c26 	beq	r10,zero,80120f4 <___vfiprintf_internal_r+0x66c>
 80120c4:	d9011d04 	addi	r4,sp,1140
 80120c8:	18c00084 	addi	r3,r3,2
 80120cc:	41000015 	stw	r4,0(r8)
 80120d0:	01000084 	movi	r4,2
 80120d4:	41000115 	stw	r4,4(r8)
 80120d8:	d8c11c15 	stw	r3,1136(sp)
 80120dc:	d8811b15 	stw	r2,1132(sp)
 80120e0:	010001c4 	movi	r4,7
 80120e4:	20822016 	blt	r4,r2,8012968 <___vfiprintf_internal_r+0xee0>
 80120e8:	100b883a 	mov	r5,r2
 80120ec:	42000204 	addi	r8,r8,8
 80120f0:	10800044 	addi	r2,r2,1
 80120f4:	01002004 	movi	r4,128
 80120f8:	b101de26 	beq	r22,r4,8012874 <___vfiprintf_internal_r+0xdec>
 80120fc:	8521c83a 	sub	r16,r16,r20
 8012100:	0400230e 	bge	zero,r16,8012190 <___vfiprintf_internal_r+0x708>
 8012104:	04c00404 	movi	r19,16
 8012108:	9c030d0e 	bge	r19,r16,8012d40 <___vfiprintf_internal_r+0x12b8>
 801210c:	008200b4 	movhi	r2,2050
 8012110:	108e0c04 	addi	r2,r2,14384
 8012114:	d8812615 	stw	r2,1176(sp)
 8012118:	058001c4 	movi	r22,7
 801211c:	00000506 	br	8012134 <___vfiprintf_internal_r+0x6ac>
 8012120:	28800084 	addi	r2,r5,2
 8012124:	42000204 	addi	r8,r8,8
 8012128:	200b883a 	mov	r5,r4
 801212c:	843ffc04 	addi	r16,r16,-16
 8012130:	9c000d0e 	bge	r19,r16,8012168 <___vfiprintf_internal_r+0x6e0>
 8012134:	18c00404 	addi	r3,r3,16
 8012138:	29000044 	addi	r4,r5,1
 801213c:	44400015 	stw	r17,0(r8)
 8012140:	44c00115 	stw	r19,4(r8)
 8012144:	d8c11c15 	stw	r3,1136(sp)
 8012148:	d9011b15 	stw	r4,1132(sp)
 801214c:	b13ff40e 	bge	r22,r4,8012120 <__alt_data_end+0xfc012120>
 8012150:	1801321e 	bne	r3,zero,801261c <___vfiprintf_internal_r+0xb94>
 8012154:	843ffc04 	addi	r16,r16,-16
 8012158:	000b883a 	mov	r5,zero
 801215c:	00800044 	movi	r2,1
 8012160:	d811883a 	mov	r8,sp
 8012164:	9c3ff316 	blt	r19,r16,8012134 <__alt_data_end+0xfc012134>
 8012168:	d9012617 	ldw	r4,1176(sp)
 801216c:	1c07883a 	add	r3,r3,r16
 8012170:	44000115 	stw	r16,4(r8)
 8012174:	41000015 	stw	r4,0(r8)
 8012178:	d8c11c15 	stw	r3,1136(sp)
 801217c:	d8811b15 	stw	r2,1132(sp)
 8012180:	010001c4 	movi	r4,7
 8012184:	20816216 	blt	r4,r2,8012710 <___vfiprintf_internal_r+0xc88>
 8012188:	42000204 	addi	r8,r8,8
 801218c:	10800044 	addi	r2,r2,1
 8012190:	d9012217 	ldw	r4,1160(sp)
 8012194:	1d07883a 	add	r3,r3,r20
 8012198:	45000115 	stw	r20,4(r8)
 801219c:	41000015 	stw	r4,0(r8)
 80121a0:	d8c11c15 	stw	r3,1136(sp)
 80121a4:	d8811b15 	stw	r2,1132(sp)
 80121a8:	010001c4 	movi	r4,7
 80121ac:	2081610e 	bge	r4,r2,8012734 <___vfiprintf_internal_r+0xcac>
 80121b0:	1802211e 	bne	r3,zero,8012a38 <___vfiprintf_internal_r+0xfb0>
 80121b4:	d8011b15 	stw	zero,1132(sp)
 80121b8:	9480010c 	andi	r18,r18,4
 80121bc:	9002171e 	bne	r18,zero,8012a1c <___vfiprintf_internal_r+0xf94>
 80121c0:	d9412417 	ldw	r5,1168(sp)
 80121c4:	a9433716 	blt	r21,r5,8012ea4 <___vfiprintf_internal_r+0x141c>
 80121c8:	d8812517 	ldw	r2,1172(sp)
 80121cc:	1545883a 	add	r2,r2,r21
 80121d0:	d8812515 	stw	r2,1172(sp)
 80121d4:	00019a06 	br	8012840 <___vfiprintf_internal_r+0xdb8>
 80121d8:	d8c12317 	ldw	r3,1164(sp)
 80121dc:	05400044 	movi	r21,1
 80121e0:	9811883a 	mov	r8,r19
 80121e4:	18800017 	ldw	r2,0(r3)
 80121e8:	18c00104 	addi	r3,r3,4
 80121ec:	d8c12315 	stw	r3,1164(sp)
 80121f0:	d8c10004 	addi	r3,sp,1024
 80121f4:	d8011d85 	stb	zero,1142(sp)
 80121f8:	d8810005 	stb	r2,1024(sp)
 80121fc:	a829883a 	mov	r20,r21
 8012200:	d8c12215 	stw	r3,1160(sp)
 8012204:	0021883a 	mov	r16,zero
 8012208:	003f7806 	br	8011fec <__alt_data_end+0xfc011fec>
 801220c:	94800414 	ori	r18,r18,16
 8012210:	9080080c 	andi	r2,r18,32
 8012214:	9811883a 	mov	r8,r19
 8012218:	10009026 	beq	r2,zero,801245c <___vfiprintf_internal_r+0x9d4>
 801221c:	d8812317 	ldw	r2,1164(sp)
 8012220:	d8c12317 	ldw	r3,1164(sp)
 8012224:	14c00017 	ldw	r19,0(r2)
 8012228:	15400117 	ldw	r21,4(r2)
 801222c:	18c00204 	addi	r3,r3,8
 8012230:	d8c12315 	stw	r3,1164(sp)
 8012234:	0005883a 	mov	r2,zero
 8012238:	9d46b03a 	or	r3,r19,r21
 801223c:	d8011d85 	stb	zero,1142(sp)
 8012240:	8029883a 	mov	r20,r16
 8012244:	002d883a 	mov	r22,zero
 8012248:	003f4606 	br	8011f64 <__alt_data_end+0xfc011f64>
 801224c:	94800414 	ori	r18,r18,16
 8012250:	9080080c 	andi	r2,r18,32
 8012254:	9811883a 	mov	r8,r19
 8012258:	10006226 	beq	r2,zero,80123e4 <___vfiprintf_internal_r+0x95c>
 801225c:	d9012317 	ldw	r4,1164(sp)
 8012260:	00800044 	movi	r2,1
 8012264:	24c00017 	ldw	r19,0(r4)
 8012268:	25400117 	ldw	r21,4(r4)
 801226c:	21000204 	addi	r4,r4,8
 8012270:	d9012315 	stw	r4,1164(sp)
 8012274:	9d46b03a 	or	r3,r19,r21
 8012278:	003ff006 	br	801223c <__alt_data_end+0xfc01223c>
 801227c:	b9800007 	ldb	r6,0(r23)
 8012280:	00801b04 	movi	r2,108
 8012284:	3082b226 	beq	r6,r2,8012d50 <___vfiprintf_internal_r+0x12c8>
 8012288:	94800414 	ori	r18,r18,16
 801228c:	003e5f06 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8012290:	d8c12203 	ldbu	r3,1160(sp)
 8012294:	010200b4 	movhi	r4,2050
 8012298:	210d9604 	addi	r4,r4,13912
 801229c:	d8c11d85 	stb	r3,1142(sp)
 80122a0:	d9012715 	stw	r4,1180(sp)
 80122a4:	90c0080c 	andi	r3,r18,32
 80122a8:	9811883a 	mov	r8,r19
 80122ac:	d8812317 	ldw	r2,1164(sp)
 80122b0:	18005f26 	beq	r3,zero,8012430 <___vfiprintf_internal_r+0x9a8>
 80122b4:	d9012317 	ldw	r4,1164(sp)
 80122b8:	14c00017 	ldw	r19,0(r2)
 80122bc:	15400117 	ldw	r21,4(r2)
 80122c0:	21000204 	addi	r4,r4,8
 80122c4:	d9012315 	stw	r4,1164(sp)
 80122c8:	9080004c 	andi	r2,r18,1
 80122cc:	1001e226 	beq	r2,zero,8012a58 <___vfiprintf_internal_r+0xfd0>
 80122d0:	9d46b03a 	or	r3,r19,r21
 80122d4:	18024e26 	beq	r3,zero,8012c10 <___vfiprintf_internal_r+0x1188>
 80122d8:	00800c04 	movi	r2,48
 80122dc:	d8811d05 	stb	r2,1140(sp)
 80122e0:	d9811d45 	stb	r6,1141(sp)
 80122e4:	94800094 	ori	r18,r18,2
 80122e8:	00800084 	movi	r2,2
 80122ec:	003fd306 	br	801223c <__alt_data_end+0xfc01223c>
 80122f0:	d9012317 	ldw	r4,1164(sp)
 80122f4:	d9412317 	ldw	r5,1164(sp)
 80122f8:	21000017 	ldw	r4,0(r4)
 80122fc:	28800104 	addi	r2,r5,4
 8012300:	d9012415 	stw	r4,1168(sp)
 8012304:	203eeb16 	blt	r4,zero,8011eb4 <__alt_data_end+0xfc011eb4>
 8012308:	d8812315 	stw	r2,1164(sp)
 801230c:	b9800007 	ldb	r6,0(r23)
 8012310:	003e3e06 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8012314:	b9800007 	ldb	r6,0(r23)
 8012318:	01000a84 	movi	r4,42
 801231c:	b8800044 	addi	r2,r23,1
 8012320:	3102d226 	beq	r6,r4,8012e6c <___vfiprintf_internal_r+0x13e4>
 8012324:	35bff404 	addi	r22,r6,-48
 8012328:	102f883a 	mov	r23,r2
 801232c:	0021883a 	mov	r16,zero
 8012330:	adbe3736 	bltu	r21,r22,8011c10 <__alt_data_end+0xfc011c10>
 8012334:	0009883a 	mov	r4,zero
 8012338:	01400284 	movi	r5,10
 801233c:	8004c100 	call	8004c10 <__mulsi3>
 8012340:	b9800007 	ldb	r6,0(r23)
 8012344:	b089883a 	add	r4,r22,r2
 8012348:	bdc00044 	addi	r23,r23,1
 801234c:	35bff404 	addi	r22,r6,-48
 8012350:	adbff92e 	bgeu	r21,r22,8012338 <__alt_data_end+0xfc012338>
 8012354:	2021883a 	mov	r16,r4
 8012358:	203e2d0e 	bge	r4,zero,8011c10 <__alt_data_end+0xfc011c10>
 801235c:	043fffc4 	movi	r16,-1
 8012360:	003e2b06 	br	8011c10 <__alt_data_end+0xfc011c10>
 8012364:	94801014 	ori	r18,r18,64
 8012368:	b9800007 	ldb	r6,0(r23)
 801236c:	003e2706 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8012370:	94800814 	ori	r18,r18,32
 8012374:	b9800007 	ldb	r6,0(r23)
 8012378:	003e2406 	br	8011c0c <__alt_data_end+0xfc011c0c>
 801237c:	d9412317 	ldw	r5,1164(sp)
 8012380:	d8812317 	ldw	r2,1164(sp)
 8012384:	d8011d85 	stb	zero,1142(sp)
 8012388:	29400017 	ldw	r5,0(r5)
 801238c:	9811883a 	mov	r8,r19
 8012390:	14c00104 	addi	r19,r2,4
 8012394:	d9412215 	stw	r5,1160(sp)
 8012398:	28029026 	beq	r5,zero,8012ddc <___vfiprintf_internal_r+0x1354>
 801239c:	d9012217 	ldw	r4,1160(sp)
 80123a0:	80027616 	blt	r16,zero,8012d7c <___vfiprintf_internal_r+0x12f4>
 80123a4:	000b883a 	mov	r5,zero
 80123a8:	800d883a 	mov	r6,r16
 80123ac:	da012a15 	stw	r8,1192(sp)
 80123b0:	800ea380 	call	800ea38 <memchr>
 80123b4:	da012a17 	ldw	r8,1192(sp)
 80123b8:	1002a026 	beq	r2,zero,8012e3c <___vfiprintf_internal_r+0x13b4>
 80123bc:	d8c12217 	ldw	r3,1160(sp)
 80123c0:	10e9c83a 	sub	r20,r2,r3
 80123c4:	85023816 	blt	r16,r20,8012ca8 <___vfiprintf_internal_r+0x1220>
 80123c8:	dd811d83 	ldbu	r22,1142(sp)
 80123cc:	dcc12315 	stw	r19,1164(sp)
 80123d0:	0021883a 	mov	r16,zero
 80123d4:	003efd06 	br	8011fcc <__alt_data_end+0xfc011fcc>
 80123d8:	9080080c 	andi	r2,r18,32
 80123dc:	9811883a 	mov	r8,r19
 80123e0:	103f9e1e 	bne	r2,zero,801225c <__alt_data_end+0xfc01225c>
 80123e4:	9080040c 	andi	r2,r18,16
 80123e8:	10021726 	beq	r2,zero,8012c48 <___vfiprintf_internal_r+0x11c0>
 80123ec:	d9412317 	ldw	r5,1164(sp)
 80123f0:	002b883a 	mov	r21,zero
 80123f4:	00800044 	movi	r2,1
 80123f8:	2cc00017 	ldw	r19,0(r5)
 80123fc:	29400104 	addi	r5,r5,4
 8012400:	d9412315 	stw	r5,1164(sp)
 8012404:	9807883a 	mov	r3,r19
 8012408:	003f8c06 	br	801223c <__alt_data_end+0xfc01223c>
 801240c:	d8c12203 	ldbu	r3,1160(sp)
 8012410:	010200b4 	movhi	r4,2050
 8012414:	210d9b04 	addi	r4,r4,13932
 8012418:	d8c11d85 	stb	r3,1142(sp)
 801241c:	d9012715 	stw	r4,1180(sp)
 8012420:	90c0080c 	andi	r3,r18,32
 8012424:	9811883a 	mov	r8,r19
 8012428:	d8812317 	ldw	r2,1164(sp)
 801242c:	183fa11e 	bne	r3,zero,80122b4 <__alt_data_end+0xfc0122b4>
 8012430:	90c0040c 	andi	r3,r18,16
 8012434:	1801e526 	beq	r3,zero,8012bcc <___vfiprintf_internal_r+0x1144>
 8012438:	d9412317 	ldw	r5,1164(sp)
 801243c:	14c00017 	ldw	r19,0(r2)
 8012440:	002b883a 	mov	r21,zero
 8012444:	29400104 	addi	r5,r5,4
 8012448:	d9412315 	stw	r5,1164(sp)
 801244c:	003f9e06 	br	80122c8 <__alt_data_end+0xfc0122c8>
 8012450:	9080080c 	andi	r2,r18,32
 8012454:	9811883a 	mov	r8,r19
 8012458:	103f701e 	bne	r2,zero,801221c <__alt_data_end+0xfc01221c>
 801245c:	9080040c 	andi	r2,r18,16
 8012460:	1001ef26 	beq	r2,zero,8012c20 <___vfiprintf_internal_r+0x1198>
 8012464:	d9012317 	ldw	r4,1164(sp)
 8012468:	002b883a 	mov	r21,zero
 801246c:	0005883a 	mov	r2,zero
 8012470:	24c00017 	ldw	r19,0(r4)
 8012474:	21000104 	addi	r4,r4,4
 8012478:	d9012315 	stw	r4,1164(sp)
 801247c:	9807883a 	mov	r3,r19
 8012480:	003f6e06 	br	801223c <__alt_data_end+0xfc01223c>
 8012484:	d8c12317 	ldw	r3,1164(sp)
 8012488:	9811883a 	mov	r8,r19
 801248c:	00800c04 	movi	r2,48
 8012490:	1cc00017 	ldw	r19,0(r3)
 8012494:	010200b4 	movhi	r4,2050
 8012498:	18c00104 	addi	r3,r3,4
 801249c:	d8811d05 	stb	r2,1140(sp)
 80124a0:	210d9b04 	addi	r4,r4,13932
 80124a4:	00801e04 	movi	r2,120
 80124a8:	d8811d45 	stb	r2,1141(sp)
 80124ac:	d8c12315 	stw	r3,1164(sp)
 80124b0:	002b883a 	mov	r21,zero
 80124b4:	94800094 	ori	r18,r18,2
 80124b8:	d9012715 	stw	r4,1180(sp)
 80124bc:	00800084 	movi	r2,2
 80124c0:	9807883a 	mov	r3,r19
 80124c4:	003f5d06 	br	801223c <__alt_data_end+0xfc01223c>
 80124c8:	d8c12203 	ldbu	r3,1160(sp)
 80124cc:	9080080c 	andi	r2,r18,32
 80124d0:	9811883a 	mov	r8,r19
 80124d4:	d8c11d85 	stb	r3,1142(sp)
 80124d8:	1001b126 	beq	r2,zero,8012ba0 <___vfiprintf_internal_r+0x1118>
 80124dc:	d9012317 	ldw	r4,1164(sp)
 80124e0:	d9412517 	ldw	r5,1172(sp)
 80124e4:	20800017 	ldw	r2,0(r4)
 80124e8:	2807d7fa 	srai	r3,r5,31
 80124ec:	21000104 	addi	r4,r4,4
 80124f0:	d9012315 	stw	r4,1164(sp)
 80124f4:	11400015 	stw	r5,0(r2)
 80124f8:	10c00115 	stw	r3,4(r2)
 80124fc:	003d9a06 	br	8011b68 <__alt_data_end+0xfc011b68>
 8012500:	d8812207 	ldb	r2,1160(sp)
 8012504:	1001c41e 	bne	r2,zero,8012c18 <___vfiprintf_internal_r+0x1190>
 8012508:	00c00804 	movi	r3,32
 801250c:	d8c12205 	stb	r3,1160(sp)
 8012510:	b9800007 	ldb	r6,0(r23)
 8012514:	003dbd06 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8012518:	00c00ac4 	movi	r3,43
 801251c:	d8c12205 	stb	r3,1160(sp)
 8012520:	b9800007 	ldb	r6,0(r23)
 8012524:	003db906 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8012528:	d8c12203 	ldbu	r3,1160(sp)
 801252c:	9080080c 	andi	r2,r18,32
 8012530:	9811883a 	mov	r8,r19
 8012534:	d8c11d85 	stb	r3,1142(sp)
 8012538:	d8c12317 	ldw	r3,1164(sp)
 801253c:	103e7e1e 	bne	r2,zero,8011f38 <__alt_data_end+0xfc011f38>
 8012540:	9080040c 	andi	r2,r18,16
 8012544:	1001a926 	beq	r2,zero,8012bec <___vfiprintf_internal_r+0x1164>
 8012548:	1cc00017 	ldw	r19,0(r3)
 801254c:	d9412317 	ldw	r5,1164(sp)
 8012550:	982bd7fa 	srai	r21,r19,31
 8012554:	29400104 	addi	r5,r5,4
 8012558:	d9412315 	stw	r5,1164(sp)
 801255c:	a805883a 	mov	r2,r21
 8012560:	003e7b06 	br	8011f50 <__alt_data_end+0xfc011f50>
 8012564:	94800054 	ori	r18,r18,1
 8012568:	b9800007 	ldb	r6,0(r23)
 801256c:	003da706 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8012570:	d8c12203 	ldbu	r3,1160(sp)
 8012574:	9811883a 	mov	r8,r19
 8012578:	d8c11d85 	stb	r3,1142(sp)
 801257c:	30005826 	beq	r6,zero,80126e0 <___vfiprintf_internal_r+0xc58>
 8012580:	05400044 	movi	r21,1
 8012584:	d8c10004 	addi	r3,sp,1024
 8012588:	d9810005 	stb	r6,1024(sp)
 801258c:	d8011d85 	stb	zero,1142(sp)
 8012590:	a829883a 	mov	r20,r21
 8012594:	d8c12215 	stw	r3,1160(sp)
 8012598:	003f1a06 	br	8012204 <__alt_data_end+0xfc012204>
 801259c:	d9012117 	ldw	r4,1156(sp)
 80125a0:	d9412017 	ldw	r5,1152(sp)
 80125a4:	d9811a04 	addi	r6,sp,1128
 80125a8:	d9c12a15 	stw	r7,1192(sp)
 80125ac:	db012b15 	stw	r12,1196(sp)
 80125b0:	80119740 	call	8011974 <__sprint_r.part.0>
 80125b4:	d9c12a17 	ldw	r7,1192(sp)
 80125b8:	db012b17 	ldw	r12,1196(sp)
 80125bc:	10004e1e 	bne	r2,zero,80126f8 <___vfiprintf_internal_r+0xc70>
 80125c0:	d9011b17 	ldw	r4,1132(sp)
 80125c4:	d8c11c17 	ldw	r3,1136(sp)
 80125c8:	d811883a 	mov	r8,sp
 80125cc:	21400044 	addi	r5,r4,1
 80125d0:	003e9d06 	br	8012048 <__alt_data_end+0xfc012048>
 80125d4:	d9411b17 	ldw	r5,1132(sp)
 80125d8:	d8c11c17 	ldw	r3,1136(sp)
 80125dc:	28800044 	addi	r2,r5,1
 80125e0:	d9011d87 	ldb	r4,1142(sp)
 80125e4:	203eb626 	beq	r4,zero,80120c0 <__alt_data_end+0xfc0120c0>
 80125e8:	01000044 	movi	r4,1
 80125ec:	d9411d84 	addi	r5,sp,1142
 80125f0:	1907883a 	add	r3,r3,r4
 80125f4:	41400015 	stw	r5,0(r8)
 80125f8:	41000115 	stw	r4,4(r8)
 80125fc:	d8c11c15 	stw	r3,1136(sp)
 8012600:	d8811b15 	stw	r2,1132(sp)
 8012604:	014001c4 	movi	r5,7
 8012608:	2880ce16 	blt	r5,r2,8012944 <___vfiprintf_internal_r+0xebc>
 801260c:	100b883a 	mov	r5,r2
 8012610:	42000204 	addi	r8,r8,8
 8012614:	10800044 	addi	r2,r2,1
 8012618:	003ea906 	br	80120c0 <__alt_data_end+0xfc0120c0>
 801261c:	d9012117 	ldw	r4,1156(sp)
 8012620:	d9412017 	ldw	r5,1152(sp)
 8012624:	d9811a04 	addi	r6,sp,1128
 8012628:	80119740 	call	8011974 <__sprint_r.part.0>
 801262c:	1000321e 	bne	r2,zero,80126f8 <___vfiprintf_internal_r+0xc70>
 8012630:	d9411b17 	ldw	r5,1132(sp)
 8012634:	d8c11c17 	ldw	r3,1136(sp)
 8012638:	d811883a 	mov	r8,sp
 801263c:	28800044 	addi	r2,r5,1
 8012640:	003eba06 	br	801212c <__alt_data_end+0xfc01212c>
 8012644:	10803fcc 	andi	r2,r2,255
 8012648:	00c00044 	movi	r3,1
 801264c:	10fe4d1e 	bne	r2,r3,8011f84 <__alt_data_end+0xfc011f84>
 8012650:	a800021e 	bne	r21,zero,801265c <___vfiprintf_internal_r+0xbd4>
 8012654:	00800244 	movi	r2,9
 8012658:	14c01b2e 	bgeu	r2,r19,80126c8 <___vfiprintf_internal_r+0xc40>
 801265c:	dc012215 	stw	r16,1160(sp)
 8012660:	dd010a04 	addi	r20,sp,1064
 8012664:	a821883a 	mov	r16,r21
 8012668:	402b883a 	mov	r21,r8
 801266c:	9809883a 	mov	r4,r19
 8012670:	800b883a 	mov	r5,r16
 8012674:	01800284 	movi	r6,10
 8012678:	000f883a 	mov	r7,zero
 801267c:	8013f680 	call	8013f68 <__umoddi3>
 8012680:	10800c04 	addi	r2,r2,48
 8012684:	a53fffc4 	addi	r20,r20,-1
 8012688:	9809883a 	mov	r4,r19
 801268c:	800b883a 	mov	r5,r16
 8012690:	01800284 	movi	r6,10
 8012694:	000f883a 	mov	r7,zero
 8012698:	a0800005 	stb	r2,0(r20)
 801269c:	80139280 	call	8013928 <__udivdi3>
 80126a0:	1027883a 	mov	r19,r2
 80126a4:	10c4b03a 	or	r2,r2,r3
 80126a8:	1821883a 	mov	r16,r3
 80126ac:	103fef1e 	bne	r2,zero,801266c <__alt_data_end+0xfc01266c>
 80126b0:	d9011e17 	ldw	r4,1144(sp)
 80126b4:	dc012217 	ldw	r16,1160(sp)
 80126b8:	a811883a 	mov	r8,r21
 80126bc:	dd012215 	stw	r20,1160(sp)
 80126c0:	2529c83a 	sub	r20,r4,r20
 80126c4:	003e4106 	br	8011fcc <__alt_data_end+0xfc011fcc>
 80126c8:	9cc00c04 	addi	r19,r19,48
 80126cc:	d8c109c4 	addi	r3,sp,1063
 80126d0:	dcc109c5 	stb	r19,1063(sp)
 80126d4:	dd012817 	ldw	r20,1184(sp)
 80126d8:	d8c12215 	stw	r3,1160(sp)
 80126dc:	003e3b06 	br	8011fcc <__alt_data_end+0xfc011fcc>
 80126e0:	d8811c17 	ldw	r2,1136(sp)
 80126e4:	10000426 	beq	r2,zero,80126f8 <___vfiprintf_internal_r+0xc70>
 80126e8:	d9012117 	ldw	r4,1156(sp)
 80126ec:	d9412017 	ldw	r5,1152(sp)
 80126f0:	d9811a04 	addi	r6,sp,1128
 80126f4:	80119740 	call	8011974 <__sprint_r.part.0>
 80126f8:	d9412017 	ldw	r5,1152(sp)
 80126fc:	2880030b 	ldhu	r2,12(r5)
 8012700:	1080100c 	andi	r2,r2,64
 8012704:	103ddc1e 	bne	r2,zero,8011e78 <__alt_data_end+0xfc011e78>
 8012708:	d8812517 	ldw	r2,1172(sp)
 801270c:	003ddb06 	br	8011e7c <__alt_data_end+0xfc011e7c>
 8012710:	1801061e 	bne	r3,zero,8012b2c <___vfiprintf_internal_r+0x10a4>
 8012714:	d8c12217 	ldw	r3,1160(sp)
 8012718:	00800044 	movi	r2,1
 801271c:	dd000115 	stw	r20,4(sp)
 8012720:	d8c00015 	stw	r3,0(sp)
 8012724:	dd011c15 	stw	r20,1136(sp)
 8012728:	d8811b15 	stw	r2,1132(sp)
 801272c:	a007883a 	mov	r3,r20
 8012730:	d811883a 	mov	r8,sp
 8012734:	42000204 	addi	r8,r8,8
 8012738:	9480010c 	andi	r18,r18,4
 801273c:	90003426 	beq	r18,zero,8012810 <___vfiprintf_internal_r+0xd88>
 8012740:	d9412417 	ldw	r5,1168(sp)
 8012744:	2d65c83a 	sub	r18,r5,r21
 8012748:	0480310e 	bge	zero,r18,8012810 <___vfiprintf_internal_r+0xd88>
 801274c:	04000404 	movi	r16,16
 8012750:	8481ad0e 	bge	r16,r18,8012e08 <___vfiprintf_internal_r+0x1380>
 8012754:	014200b4 	movhi	r5,2050
 8012758:	294e1004 	addi	r5,r5,14400
 801275c:	d9011b17 	ldw	r4,1132(sp)
 8012760:	d9412615 	stw	r5,1176(sp)
 8012764:	04c001c4 	movi	r19,7
 8012768:	dd012117 	ldw	r20,1156(sp)
 801276c:	dd812017 	ldw	r22,1152(sp)
 8012770:	00000506 	br	8012788 <___vfiprintf_internal_r+0xd00>
 8012774:	21400084 	addi	r5,r4,2
 8012778:	42000204 	addi	r8,r8,8
 801277c:	1009883a 	mov	r4,r2
 8012780:	94bffc04 	addi	r18,r18,-16
 8012784:	84800d0e 	bge	r16,r18,80127bc <___vfiprintf_internal_r+0xd34>
 8012788:	18c00404 	addi	r3,r3,16
 801278c:	20800044 	addi	r2,r4,1
 8012790:	47000015 	stw	fp,0(r8)
 8012794:	44000115 	stw	r16,4(r8)
 8012798:	d8c11c15 	stw	r3,1136(sp)
 801279c:	d8811b15 	stw	r2,1132(sp)
 80127a0:	98bff40e 	bge	r19,r2,8012774 <__alt_data_end+0xfc012774>
 80127a4:	1800291e 	bne	r3,zero,801284c <___vfiprintf_internal_r+0xdc4>
 80127a8:	94bffc04 	addi	r18,r18,-16
 80127ac:	0009883a 	mov	r4,zero
 80127b0:	01400044 	movi	r5,1
 80127b4:	d811883a 	mov	r8,sp
 80127b8:	84bff316 	blt	r16,r18,8012788 <__alt_data_end+0xfc012788>
 80127bc:	d8812617 	ldw	r2,1176(sp)
 80127c0:	1c87883a 	add	r3,r3,r18
 80127c4:	44800115 	stw	r18,4(r8)
 80127c8:	40800015 	stw	r2,0(r8)
 80127cc:	d8c11c15 	stw	r3,1136(sp)
 80127d0:	d9411b15 	stw	r5,1132(sp)
 80127d4:	008001c4 	movi	r2,7
 80127d8:	11400d0e 	bge	r2,r5,8012810 <___vfiprintf_internal_r+0xd88>
 80127dc:	1800061e 	bne	r3,zero,80127f8 <___vfiprintf_internal_r+0xd70>
 80127e0:	d8c12417 	ldw	r3,1168(sp)
 80127e4:	a8c12e16 	blt	r21,r3,8012ca0 <___vfiprintf_internal_r+0x1218>
 80127e8:	d9012517 	ldw	r4,1172(sp)
 80127ec:	2549883a 	add	r4,r4,r21
 80127f0:	d9012515 	stw	r4,1172(sp)
 80127f4:	00001206 	br	8012840 <___vfiprintf_internal_r+0xdb8>
 80127f8:	d9012117 	ldw	r4,1156(sp)
 80127fc:	d9412017 	ldw	r5,1152(sp)
 8012800:	d9811a04 	addi	r6,sp,1128
 8012804:	80119740 	call	8011974 <__sprint_r.part.0>
 8012808:	103fbb1e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 801280c:	d8c11c17 	ldw	r3,1136(sp)
 8012810:	d8812417 	ldw	r2,1168(sp)
 8012814:	a880010e 	bge	r21,r2,801281c <___vfiprintf_internal_r+0xd94>
 8012818:	102b883a 	mov	r21,r2
 801281c:	d9012517 	ldw	r4,1172(sp)
 8012820:	2549883a 	add	r4,r4,r21
 8012824:	d9012515 	stw	r4,1172(sp)
 8012828:	18000526 	beq	r3,zero,8012840 <___vfiprintf_internal_r+0xdb8>
 801282c:	d9012117 	ldw	r4,1156(sp)
 8012830:	d9412017 	ldw	r5,1152(sp)
 8012834:	d9811a04 	addi	r6,sp,1128
 8012838:	80119740 	call	8011974 <__sprint_r.part.0>
 801283c:	103fae1e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 8012840:	d8011b15 	stw	zero,1132(sp)
 8012844:	d811883a 	mov	r8,sp
 8012848:	003cc706 	br	8011b68 <__alt_data_end+0xfc011b68>
 801284c:	a009883a 	mov	r4,r20
 8012850:	b00b883a 	mov	r5,r22
 8012854:	d9811a04 	addi	r6,sp,1128
 8012858:	80119740 	call	8011974 <__sprint_r.part.0>
 801285c:	103fa61e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 8012860:	d9011b17 	ldw	r4,1132(sp)
 8012864:	d8c11c17 	ldw	r3,1136(sp)
 8012868:	d811883a 	mov	r8,sp
 801286c:	21400044 	addi	r5,r4,1
 8012870:	003fc306 	br	8012780 <__alt_data_end+0xfc012780>
 8012874:	d9012417 	ldw	r4,1168(sp)
 8012878:	256dc83a 	sub	r22,r4,r21
 801287c:	05be1f0e 	bge	zero,r22,80120fc <__alt_data_end+0xfc0120fc>
 8012880:	04c00404 	movi	r19,16
 8012884:	9d81720e 	bge	r19,r22,8012e50 <___vfiprintf_internal_r+0x13c8>
 8012888:	008200b4 	movhi	r2,2050
 801288c:	108e0c04 	addi	r2,r2,14384
 8012890:	d8812615 	stw	r2,1176(sp)
 8012894:	028001c4 	movi	r10,7
 8012898:	00000506 	br	80128b0 <___vfiprintf_internal_r+0xe28>
 801289c:	29000084 	addi	r4,r5,2
 80128a0:	42000204 	addi	r8,r8,8
 80128a4:	100b883a 	mov	r5,r2
 80128a8:	b5bffc04 	addi	r22,r22,-16
 80128ac:	9d800d0e 	bge	r19,r22,80128e4 <___vfiprintf_internal_r+0xe5c>
 80128b0:	18c00404 	addi	r3,r3,16
 80128b4:	28800044 	addi	r2,r5,1
 80128b8:	44400015 	stw	r17,0(r8)
 80128bc:	44c00115 	stw	r19,4(r8)
 80128c0:	d8c11c15 	stw	r3,1136(sp)
 80128c4:	d8811b15 	stw	r2,1132(sp)
 80128c8:	50bff40e 	bge	r10,r2,801289c <__alt_data_end+0xfc01289c>
 80128cc:	1800111e 	bne	r3,zero,8012914 <___vfiprintf_internal_r+0xe8c>
 80128d0:	b5bffc04 	addi	r22,r22,-16
 80128d4:	000b883a 	mov	r5,zero
 80128d8:	01000044 	movi	r4,1
 80128dc:	d811883a 	mov	r8,sp
 80128e0:	9dbff316 	blt	r19,r22,80128b0 <__alt_data_end+0xfc0128b0>
 80128e4:	d9412617 	ldw	r5,1176(sp)
 80128e8:	1d87883a 	add	r3,r3,r22
 80128ec:	45800115 	stw	r22,4(r8)
 80128f0:	41400015 	stw	r5,0(r8)
 80128f4:	d8c11c15 	stw	r3,1136(sp)
 80128f8:	d9011b15 	stw	r4,1132(sp)
 80128fc:	008001c4 	movi	r2,7
 8012900:	11008516 	blt	r2,r4,8012b18 <___vfiprintf_internal_r+0x1090>
 8012904:	42000204 	addi	r8,r8,8
 8012908:	20800044 	addi	r2,r4,1
 801290c:	200b883a 	mov	r5,r4
 8012910:	003dfa06 	br	80120fc <__alt_data_end+0xfc0120fc>
 8012914:	d9012117 	ldw	r4,1156(sp)
 8012918:	d9412017 	ldw	r5,1152(sp)
 801291c:	d9811a04 	addi	r6,sp,1128
 8012920:	da812a15 	stw	r10,1192(sp)
 8012924:	80119740 	call	8011974 <__sprint_r.part.0>
 8012928:	da812a17 	ldw	r10,1192(sp)
 801292c:	103f721e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 8012930:	d9411b17 	ldw	r5,1132(sp)
 8012934:	d8c11c17 	ldw	r3,1136(sp)
 8012938:	d811883a 	mov	r8,sp
 801293c:	29000044 	addi	r4,r5,1
 8012940:	003fd906 	br	80128a8 <__alt_data_end+0xfc0128a8>
 8012944:	1800681e 	bne	r3,zero,8012ae8 <___vfiprintf_internal_r+0x1060>
 8012948:	50004d26 	beq	r10,zero,8012a80 <___vfiprintf_internal_r+0xff8>
 801294c:	d8811d04 	addi	r2,sp,1140
 8012950:	00c00084 	movi	r3,2
 8012954:	d8800015 	stw	r2,0(sp)
 8012958:	d8c00115 	stw	r3,4(sp)
 801295c:	2005883a 	mov	r2,r4
 8012960:	d811883a 	mov	r8,sp
 8012964:	003de006 	br	80120e8 <__alt_data_end+0xfc0120e8>
 8012968:	1800551e 	bne	r3,zero,8012ac0 <___vfiprintf_internal_r+0x1038>
 801296c:	000b883a 	mov	r5,zero
 8012970:	00800044 	movi	r2,1
 8012974:	d811883a 	mov	r8,sp
 8012978:	003dde06 	br	80120f4 <__alt_data_end+0xfc0120f4>
 801297c:	10803fcc 	andi	r2,r2,255
 8012980:	1000191e 	bne	r2,zero,80129e8 <___vfiprintf_internal_r+0xf60>
 8012984:	9080004c 	andi	r2,r18,1
 8012988:	10001726 	beq	r2,zero,80129e8 <___vfiprintf_internal_r+0xf60>
 801298c:	00800c04 	movi	r2,48
 8012990:	d8c109c4 	addi	r3,sp,1063
 8012994:	d88109c5 	stb	r2,1063(sp)
 8012998:	dd012817 	ldw	r20,1184(sp)
 801299c:	d8c12215 	stw	r3,1160(sp)
 80129a0:	003d8a06 	br	8011fcc <__alt_data_end+0xfc011fcc>
 80129a4:	d9012717 	ldw	r4,1180(sp)
 80129a8:	dd010a04 	addi	r20,sp,1064
 80129ac:	988003cc 	andi	r2,r19,15
 80129b0:	a806973a 	slli	r3,r21,28
 80129b4:	2085883a 	add	r2,r4,r2
 80129b8:	9826d13a 	srli	r19,r19,4
 80129bc:	10800003 	ldbu	r2,0(r2)
 80129c0:	a82ad13a 	srli	r21,r21,4
 80129c4:	a53fffc4 	addi	r20,r20,-1
 80129c8:	1ce6b03a 	or	r19,r3,r19
 80129cc:	a0800005 	stb	r2,0(r20)
 80129d0:	9d44b03a 	or	r2,r19,r21
 80129d4:	103ff51e 	bne	r2,zero,80129ac <__alt_data_end+0xfc0129ac>
 80129d8:	d9411e17 	ldw	r5,1144(sp)
 80129dc:	dd012215 	stw	r20,1160(sp)
 80129e0:	2d29c83a 	sub	r20,r5,r20
 80129e4:	003d7906 	br	8011fcc <__alt_data_end+0xfc011fcc>
 80129e8:	d8c10a04 	addi	r3,sp,1064
 80129ec:	d8c12215 	stw	r3,1160(sp)
 80129f0:	003d7606 	br	8011fcc <__alt_data_end+0xfc011fcc>
 80129f4:	18009e1e 	bne	r3,zero,8012c70 <___vfiprintf_internal_r+0x11e8>
 80129f8:	d8811d87 	ldb	r2,1142(sp)
 80129fc:	10005f26 	beq	r2,zero,8012b7c <___vfiprintf_internal_r+0x10f4>
 8012a00:	00c00044 	movi	r3,1
 8012a04:	d9011d84 	addi	r4,sp,1142
 8012a08:	1805883a 	mov	r2,r3
 8012a0c:	d9000015 	stw	r4,0(sp)
 8012a10:	d8c00115 	stw	r3,4(sp)
 8012a14:	d811883a 	mov	r8,sp
 8012a18:	003efc06 	br	801260c <__alt_data_end+0xfc01260c>
 8012a1c:	d9412417 	ldw	r5,1168(sp)
 8012a20:	d811883a 	mov	r8,sp
 8012a24:	2d65c83a 	sub	r18,r5,r21
 8012a28:	04bf4816 	blt	zero,r18,801274c <__alt_data_end+0xfc01274c>
 8012a2c:	003f6c06 	br	80127e0 <__alt_data_end+0xfc0127e0>
 8012a30:	b829883a 	mov	r20,r23
 8012a34:	003c6906 	br	8011bdc <__alt_data_end+0xfc011bdc>
 8012a38:	d9012117 	ldw	r4,1156(sp)
 8012a3c:	d9412017 	ldw	r5,1152(sp)
 8012a40:	d9811a04 	addi	r6,sp,1128
 8012a44:	80119740 	call	8011974 <__sprint_r.part.0>
 8012a48:	103f2b1e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 8012a4c:	d8c11c17 	ldw	r3,1136(sp)
 8012a50:	d811883a 	mov	r8,sp
 8012a54:	003f3806 	br	8012738 <__alt_data_end+0xfc012738>
 8012a58:	00800084 	movi	r2,2
 8012a5c:	9d46b03a 	or	r3,r19,r21
 8012a60:	003df606 	br	801223c <__alt_data_end+0xfc01223c>
 8012a64:	d9012117 	ldw	r4,1156(sp)
 8012a68:	d9412017 	ldw	r5,1152(sp)
 8012a6c:	d9811a04 	addi	r6,sp,1128
 8012a70:	80119740 	call	8011974 <__sprint_r.part.0>
 8012a74:	103f201e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 8012a78:	d811883a 	mov	r8,sp
 8012a7c:	003cc606 	br	8011d98 <__alt_data_end+0xfc011d98>
 8012a80:	000b883a 	mov	r5,zero
 8012a84:	2005883a 	mov	r2,r4
 8012a88:	d811883a 	mov	r8,sp
 8012a8c:	003d9906 	br	80120f4 <__alt_data_end+0xfc0120f4>
 8012a90:	10803fcc 	andi	r2,r2,255
 8012a94:	1080201c 	xori	r2,r2,128
 8012a98:	10bfe004 	addi	r2,r2,-128
 8012a9c:	01000c04 	movi	r4,48
 8012aa0:	1100b226 	beq	r2,r4,8012d6c <___vfiprintf_internal_r+0x12e4>
 8012aa4:	d9412217 	ldw	r5,1160(sp)
 8012aa8:	d8811e17 	ldw	r2,1144(sp)
 8012aac:	193fffc5 	stb	r4,-1(r3)
 8012ab0:	297fffc4 	addi	r5,r5,-1
 8012ab4:	d9412215 	stw	r5,1160(sp)
 8012ab8:	1169c83a 	sub	r20,r2,r5
 8012abc:	003d4306 	br	8011fcc <__alt_data_end+0xfc011fcc>
 8012ac0:	d9012117 	ldw	r4,1156(sp)
 8012ac4:	d9412017 	ldw	r5,1152(sp)
 8012ac8:	d9811a04 	addi	r6,sp,1128
 8012acc:	80119740 	call	8011974 <__sprint_r.part.0>
 8012ad0:	103f091e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 8012ad4:	d9411b17 	ldw	r5,1132(sp)
 8012ad8:	d8c11c17 	ldw	r3,1136(sp)
 8012adc:	d811883a 	mov	r8,sp
 8012ae0:	28800044 	addi	r2,r5,1
 8012ae4:	003d8306 	br	80120f4 <__alt_data_end+0xfc0120f4>
 8012ae8:	d9012117 	ldw	r4,1156(sp)
 8012aec:	d9412017 	ldw	r5,1152(sp)
 8012af0:	d9811a04 	addi	r6,sp,1128
 8012af4:	da812a15 	stw	r10,1192(sp)
 8012af8:	80119740 	call	8011974 <__sprint_r.part.0>
 8012afc:	da812a17 	ldw	r10,1192(sp)
 8012b00:	103efd1e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 8012b04:	d9411b17 	ldw	r5,1132(sp)
 8012b08:	d8c11c17 	ldw	r3,1136(sp)
 8012b0c:	d811883a 	mov	r8,sp
 8012b10:	28800044 	addi	r2,r5,1
 8012b14:	003d6a06 	br	80120c0 <__alt_data_end+0xfc0120c0>
 8012b18:	1800a01e 	bne	r3,zero,8012d9c <___vfiprintf_internal_r+0x1314>
 8012b1c:	000b883a 	mov	r5,zero
 8012b20:	00800044 	movi	r2,1
 8012b24:	d811883a 	mov	r8,sp
 8012b28:	003d7406 	br	80120fc <__alt_data_end+0xfc0120fc>
 8012b2c:	d9012117 	ldw	r4,1156(sp)
 8012b30:	d9412017 	ldw	r5,1152(sp)
 8012b34:	d9811a04 	addi	r6,sp,1128
 8012b38:	80119740 	call	8011974 <__sprint_r.part.0>
 8012b3c:	103eee1e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 8012b40:	d8811b17 	ldw	r2,1132(sp)
 8012b44:	d8c11c17 	ldw	r3,1136(sp)
 8012b48:	d811883a 	mov	r8,sp
 8012b4c:	10800044 	addi	r2,r2,1
 8012b50:	003d8f06 	br	8012190 <__alt_data_end+0xfc012190>
 8012b54:	04e7c83a 	sub	r19,zero,r19
 8012b58:	9804c03a 	cmpne	r2,r19,zero
 8012b5c:	056bc83a 	sub	r21,zero,r21
 8012b60:	a8abc83a 	sub	r21,r21,r2
 8012b64:	05800b44 	movi	r22,45
 8012b68:	dd811d85 	stb	r22,1142(sp)
 8012b6c:	8029883a 	mov	r20,r16
 8012b70:	00800044 	movi	r2,1
 8012b74:	9d46b03a 	or	r3,r19,r21
 8012b78:	003cfa06 	br	8011f64 <__alt_data_end+0xfc011f64>
 8012b7c:	000b883a 	mov	r5,zero
 8012b80:	00800044 	movi	r2,1
 8012b84:	d811883a 	mov	r8,sp
 8012b88:	503d5a26 	beq	r10,zero,80120f4 <__alt_data_end+0xfc0120f4>
 8012b8c:	00c00084 	movi	r3,2
 8012b90:	d9011d04 	addi	r4,sp,1140
 8012b94:	d9000015 	stw	r4,0(sp)
 8012b98:	d8c00115 	stw	r3,4(sp)
 8012b9c:	003d5206 	br	80120e8 <__alt_data_end+0xfc0120e8>
 8012ba0:	9080040c 	andi	r2,r18,16
 8012ba4:	1000421e 	bne	r2,zero,8012cb0 <___vfiprintf_internal_r+0x1228>
 8012ba8:	9480100c 	andi	r18,r18,64
 8012bac:	90009c26 	beq	r18,zero,8012e20 <___vfiprintf_internal_r+0x1398>
 8012bb0:	d9412317 	ldw	r5,1164(sp)
 8012bb4:	d8c12517 	ldw	r3,1172(sp)
 8012bb8:	28800017 	ldw	r2,0(r5)
 8012bbc:	29400104 	addi	r5,r5,4
 8012bc0:	d9412315 	stw	r5,1164(sp)
 8012bc4:	10c0000d 	sth	r3,0(r2)
 8012bc8:	003be706 	br	8011b68 <__alt_data_end+0xfc011b68>
 8012bcc:	90c0100c 	andi	r3,r18,64
 8012bd0:	18003e26 	beq	r3,zero,8012ccc <___vfiprintf_internal_r+0x1244>
 8012bd4:	d8c12317 	ldw	r3,1164(sp)
 8012bd8:	14c0000b 	ldhu	r19,0(r2)
 8012bdc:	002b883a 	mov	r21,zero
 8012be0:	18c00104 	addi	r3,r3,4
 8012be4:	d8c12315 	stw	r3,1164(sp)
 8012be8:	003db706 	br	80122c8 <__alt_data_end+0xfc0122c8>
 8012bec:	9080100c 	andi	r2,r18,64
 8012bf0:	10004c26 	beq	r2,zero,8012d24 <___vfiprintf_internal_r+0x129c>
 8012bf4:	1cc0000f 	ldh	r19,0(r3)
 8012bf8:	d8812317 	ldw	r2,1164(sp)
 8012bfc:	982bd7fa 	srai	r21,r19,31
 8012c00:	10800104 	addi	r2,r2,4
 8012c04:	d8812315 	stw	r2,1164(sp)
 8012c08:	a805883a 	mov	r2,r21
 8012c0c:	003cd006 	br	8011f50 <__alt_data_end+0xfc011f50>
 8012c10:	00800084 	movi	r2,2
 8012c14:	003d8906 	br	801223c <__alt_data_end+0xfc01223c>
 8012c18:	b9800007 	ldb	r6,0(r23)
 8012c1c:	003bfb06 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8012c20:	9080100c 	andi	r2,r18,64
 8012c24:	10003726 	beq	r2,zero,8012d04 <___vfiprintf_internal_r+0x127c>
 8012c28:	d9412317 	ldw	r5,1164(sp)
 8012c2c:	002b883a 	mov	r21,zero
 8012c30:	0005883a 	mov	r2,zero
 8012c34:	2cc0000b 	ldhu	r19,0(r5)
 8012c38:	29400104 	addi	r5,r5,4
 8012c3c:	d9412315 	stw	r5,1164(sp)
 8012c40:	9807883a 	mov	r3,r19
 8012c44:	003d7d06 	br	801223c <__alt_data_end+0xfc01223c>
 8012c48:	9080100c 	andi	r2,r18,64
 8012c4c:	10002526 	beq	r2,zero,8012ce4 <___vfiprintf_internal_r+0x125c>
 8012c50:	d8812317 	ldw	r2,1164(sp)
 8012c54:	002b883a 	mov	r21,zero
 8012c58:	14c0000b 	ldhu	r19,0(r2)
 8012c5c:	10800104 	addi	r2,r2,4
 8012c60:	d8812315 	stw	r2,1164(sp)
 8012c64:	9807883a 	mov	r3,r19
 8012c68:	00800044 	movi	r2,1
 8012c6c:	003d7306 	br	801223c <__alt_data_end+0xfc01223c>
 8012c70:	d9012117 	ldw	r4,1156(sp)
 8012c74:	d9412017 	ldw	r5,1152(sp)
 8012c78:	d9811a04 	addi	r6,sp,1128
 8012c7c:	da812a15 	stw	r10,1192(sp)
 8012c80:	80119740 	call	8011974 <__sprint_r.part.0>
 8012c84:	da812a17 	ldw	r10,1192(sp)
 8012c88:	103e9b1e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 8012c8c:	d9411b17 	ldw	r5,1132(sp)
 8012c90:	d8c11c17 	ldw	r3,1136(sp)
 8012c94:	d811883a 	mov	r8,sp
 8012c98:	28800044 	addi	r2,r5,1
 8012c9c:	003e5006 	br	80125e0 <__alt_data_end+0xfc0125e0>
 8012ca0:	182b883a 	mov	r21,r3
 8012ca4:	003ed006 	br	80127e8 <__alt_data_end+0xfc0127e8>
 8012ca8:	8029883a 	mov	r20,r16
 8012cac:	003dc606 	br	80123c8 <__alt_data_end+0xfc0123c8>
 8012cb0:	d8c12317 	ldw	r3,1164(sp)
 8012cb4:	d9012517 	ldw	r4,1172(sp)
 8012cb8:	18800017 	ldw	r2,0(r3)
 8012cbc:	18c00104 	addi	r3,r3,4
 8012cc0:	d8c12315 	stw	r3,1164(sp)
 8012cc4:	11000015 	stw	r4,0(r2)
 8012cc8:	003ba706 	br	8011b68 <__alt_data_end+0xfc011b68>
 8012ccc:	d9012317 	ldw	r4,1164(sp)
 8012cd0:	14c00017 	ldw	r19,0(r2)
 8012cd4:	002b883a 	mov	r21,zero
 8012cd8:	21000104 	addi	r4,r4,4
 8012cdc:	d9012315 	stw	r4,1164(sp)
 8012ce0:	003d7906 	br	80122c8 <__alt_data_end+0xfc0122c8>
 8012ce4:	d8c12317 	ldw	r3,1164(sp)
 8012ce8:	002b883a 	mov	r21,zero
 8012cec:	00800044 	movi	r2,1
 8012cf0:	1cc00017 	ldw	r19,0(r3)
 8012cf4:	18c00104 	addi	r3,r3,4
 8012cf8:	d8c12315 	stw	r3,1164(sp)
 8012cfc:	9807883a 	mov	r3,r19
 8012d00:	003d4e06 	br	801223c <__alt_data_end+0xfc01223c>
 8012d04:	d8812317 	ldw	r2,1164(sp)
 8012d08:	002b883a 	mov	r21,zero
 8012d0c:	14c00017 	ldw	r19,0(r2)
 8012d10:	10800104 	addi	r2,r2,4
 8012d14:	d8812315 	stw	r2,1164(sp)
 8012d18:	9807883a 	mov	r3,r19
 8012d1c:	0005883a 	mov	r2,zero
 8012d20:	003d4606 	br	801223c <__alt_data_end+0xfc01223c>
 8012d24:	1cc00017 	ldw	r19,0(r3)
 8012d28:	d8c12317 	ldw	r3,1164(sp)
 8012d2c:	982bd7fa 	srai	r21,r19,31
 8012d30:	18c00104 	addi	r3,r3,4
 8012d34:	d8c12315 	stw	r3,1164(sp)
 8012d38:	a805883a 	mov	r2,r21
 8012d3c:	003c8406 	br	8011f50 <__alt_data_end+0xfc011f50>
 8012d40:	010200b4 	movhi	r4,2050
 8012d44:	210e0c04 	addi	r4,r4,14384
 8012d48:	d9012615 	stw	r4,1176(sp)
 8012d4c:	003d0606 	br	8012168 <__alt_data_end+0xfc012168>
 8012d50:	b9800043 	ldbu	r6,1(r23)
 8012d54:	94800814 	ori	r18,r18,32
 8012d58:	bdc00044 	addi	r23,r23,1
 8012d5c:	31803fcc 	andi	r6,r6,255
 8012d60:	3180201c 	xori	r6,r6,128
 8012d64:	31bfe004 	addi	r6,r6,-128
 8012d68:	003ba806 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8012d6c:	d8811e17 	ldw	r2,1144(sp)
 8012d70:	d8c12217 	ldw	r3,1160(sp)
 8012d74:	10e9c83a 	sub	r20,r2,r3
 8012d78:	003c9406 	br	8011fcc <__alt_data_end+0xfc011fcc>
 8012d7c:	da012a15 	stw	r8,1192(sp)
 8012d80:	80079640 	call	8007964 <strlen>
 8012d84:	1029883a 	mov	r20,r2
 8012d88:	dd811d83 	ldbu	r22,1142(sp)
 8012d8c:	dcc12315 	stw	r19,1164(sp)
 8012d90:	0021883a 	mov	r16,zero
 8012d94:	da012a17 	ldw	r8,1192(sp)
 8012d98:	003c8c06 	br	8011fcc <__alt_data_end+0xfc011fcc>
 8012d9c:	d9012117 	ldw	r4,1156(sp)
 8012da0:	d9412017 	ldw	r5,1152(sp)
 8012da4:	d9811a04 	addi	r6,sp,1128
 8012da8:	80119740 	call	8011974 <__sprint_r.part.0>
 8012dac:	103e521e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 8012db0:	d9411b17 	ldw	r5,1132(sp)
 8012db4:	d8c11c17 	ldw	r3,1136(sp)
 8012db8:	d811883a 	mov	r8,sp
 8012dbc:	28800044 	addi	r2,r5,1
 8012dc0:	003cce06 	br	80120fc <__alt_data_end+0xfc0120fc>
 8012dc4:	014200b4 	movhi	r5,2050
 8012dc8:	294e1004 	addi	r5,r5,14400
 8012dcc:	d9412615 	stw	r5,1176(sp)
 8012dd0:	d9411b17 	ldw	r5,1132(sp)
 8012dd4:	29400044 	addi	r5,r5,1
 8012dd8:	003cad06 	br	8012090 <__alt_data_end+0xfc012090>
 8012ddc:	00800184 	movi	r2,6
 8012de0:	1400012e 	bgeu	r2,r16,8012de8 <___vfiprintf_internal_r+0x1360>
 8012de4:	1021883a 	mov	r16,r2
 8012de8:	8029883a 	mov	r20,r16
 8012dec:	802b883a 	mov	r21,r16
 8012df0:	80001c16 	blt	r16,zero,8012e64 <___vfiprintf_internal_r+0x13dc>
 8012df4:	00c200b4 	movhi	r3,2050
 8012df8:	18cda004 	addi	r3,r3,13952
 8012dfc:	dcc12315 	stw	r19,1164(sp)
 8012e00:	d8c12215 	stw	r3,1160(sp)
 8012e04:	003cff06 	br	8012204 <__alt_data_end+0xfc012204>
 8012e08:	d9411b17 	ldw	r5,1132(sp)
 8012e0c:	008200b4 	movhi	r2,2050
 8012e10:	108e1004 	addi	r2,r2,14400
 8012e14:	d8812615 	stw	r2,1176(sp)
 8012e18:	29400044 	addi	r5,r5,1
 8012e1c:	003e6706 	br	80127bc <__alt_data_end+0xfc0127bc>
 8012e20:	d9012317 	ldw	r4,1164(sp)
 8012e24:	d9412517 	ldw	r5,1172(sp)
 8012e28:	20800017 	ldw	r2,0(r4)
 8012e2c:	21000104 	addi	r4,r4,4
 8012e30:	d9012315 	stw	r4,1164(sp)
 8012e34:	11400015 	stw	r5,0(r2)
 8012e38:	003b4b06 	br	8011b68 <__alt_data_end+0xfc011b68>
 8012e3c:	8029883a 	mov	r20,r16
 8012e40:	dd811d83 	ldbu	r22,1142(sp)
 8012e44:	dcc12315 	stw	r19,1164(sp)
 8012e48:	0021883a 	mov	r16,zero
 8012e4c:	003c5f06 	br	8011fcc <__alt_data_end+0xfc011fcc>
 8012e50:	010200b4 	movhi	r4,2050
 8012e54:	210e0c04 	addi	r4,r4,14384
 8012e58:	d9012615 	stw	r4,1176(sp)
 8012e5c:	1009883a 	mov	r4,r2
 8012e60:	003ea006 	br	80128e4 <__alt_data_end+0xfc0128e4>
 8012e64:	002b883a 	mov	r21,zero
 8012e68:	003fe206 	br	8012df4 <__alt_data_end+0xfc012df4>
 8012e6c:	d9412317 	ldw	r5,1164(sp)
 8012e70:	b807883a 	mov	r3,r23
 8012e74:	102f883a 	mov	r23,r2
 8012e78:	2c000017 	ldw	r16,0(r5)
 8012e7c:	29000104 	addi	r4,r5,4
 8012e80:	d9012315 	stw	r4,1164(sp)
 8012e84:	80000416 	blt	r16,zero,8012e98 <___vfiprintf_internal_r+0x1410>
 8012e88:	19800047 	ldb	r6,1(r3)
 8012e8c:	003b5f06 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8012e90:	043fffc4 	movi	r16,-1
 8012e94:	003bef06 	br	8011e54 <__alt_data_end+0xfc011e54>
 8012e98:	043fffc4 	movi	r16,-1
 8012e9c:	19800047 	ldb	r6,1(r3)
 8012ea0:	003b5a06 	br	8011c0c <__alt_data_end+0xfc011c0c>
 8012ea4:	282b883a 	mov	r21,r5
 8012ea8:	003cc706 	br	80121c8 <__alt_data_end+0xfc0121c8>

08012eac <__vfiprintf_internal>:
 8012eac:	2007883a 	mov	r3,r4
 8012eb0:	010200b4 	movhi	r4,2050
 8012eb4:	2114e104 	addi	r4,r4,21380
 8012eb8:	21000017 	ldw	r4,0(r4)
 8012ebc:	2805883a 	mov	r2,r5
 8012ec0:	300f883a 	mov	r7,r6
 8012ec4:	180b883a 	mov	r5,r3
 8012ec8:	100d883a 	mov	r6,r2
 8012ecc:	8011a881 	jmpi	8011a88 <___vfiprintf_internal_r>

08012ed0 <_write_r>:
 8012ed0:	defffd04 	addi	sp,sp,-12
 8012ed4:	dc000015 	stw	r16,0(sp)
 8012ed8:	040200b4 	movhi	r16,2050
 8012edc:	dc400115 	stw	r17,4(sp)
 8012ee0:	841bbd04 	addi	r16,r16,28404
 8012ee4:	2023883a 	mov	r17,r4
 8012ee8:	2809883a 	mov	r4,r5
 8012eec:	300b883a 	mov	r5,r6
 8012ef0:	380d883a 	mov	r6,r7
 8012ef4:	dfc00215 	stw	ra,8(sp)
 8012ef8:	80000015 	stw	zero,0(r16)
 8012efc:	80166080 	call	8016608 <write>
 8012f00:	00ffffc4 	movi	r3,-1
 8012f04:	10c00526 	beq	r2,r3,8012f1c <_write_r+0x4c>
 8012f08:	dfc00217 	ldw	ra,8(sp)
 8012f0c:	dc400117 	ldw	r17,4(sp)
 8012f10:	dc000017 	ldw	r16,0(sp)
 8012f14:	dec00304 	addi	sp,sp,12
 8012f18:	f800283a 	ret
 8012f1c:	80c00017 	ldw	r3,0(r16)
 8012f20:	183ff926 	beq	r3,zero,8012f08 <__alt_data_end+0xfc012f08>
 8012f24:	88c00015 	stw	r3,0(r17)
 8012f28:	003ff706 	br	8012f08 <__alt_data_end+0xfc012f08>

08012f2c <_close_r>:
 8012f2c:	defffd04 	addi	sp,sp,-12
 8012f30:	dc000015 	stw	r16,0(sp)
 8012f34:	040200b4 	movhi	r16,2050
 8012f38:	dc400115 	stw	r17,4(sp)
 8012f3c:	841bbd04 	addi	r16,r16,28404
 8012f40:	2023883a 	mov	r17,r4
 8012f44:	2809883a 	mov	r4,r5
 8012f48:	dfc00215 	stw	ra,8(sp)
 8012f4c:	80000015 	stw	zero,0(r16)
 8012f50:	80159840 	call	8015984 <close>
 8012f54:	00ffffc4 	movi	r3,-1
 8012f58:	10c00526 	beq	r2,r3,8012f70 <_close_r+0x44>
 8012f5c:	dfc00217 	ldw	ra,8(sp)
 8012f60:	dc400117 	ldw	r17,4(sp)
 8012f64:	dc000017 	ldw	r16,0(sp)
 8012f68:	dec00304 	addi	sp,sp,12
 8012f6c:	f800283a 	ret
 8012f70:	80c00017 	ldw	r3,0(r16)
 8012f74:	183ff926 	beq	r3,zero,8012f5c <__alt_data_end+0xfc012f5c>
 8012f78:	88c00015 	stw	r3,0(r17)
 8012f7c:	003ff706 	br	8012f5c <__alt_data_end+0xfc012f5c>

08012f80 <_calloc_r>:
 8012f80:	defffe04 	addi	sp,sp,-8
 8012f84:	dc000015 	stw	r16,0(sp)
 8012f88:	2021883a 	mov	r16,r4
 8012f8c:	2809883a 	mov	r4,r5
 8012f90:	300b883a 	mov	r5,r6
 8012f94:	dfc00115 	stw	ra,4(sp)
 8012f98:	8004c100 	call	8004c10 <__mulsi3>
 8012f9c:	8009883a 	mov	r4,r16
 8012fa0:	100b883a 	mov	r5,r2
 8012fa4:	80069900 	call	8006990 <_malloc_r>
 8012fa8:	1021883a 	mov	r16,r2
 8012fac:	10002826 	beq	r2,zero,8013050 <_calloc_r+0xd0>
 8012fb0:	11bfff17 	ldw	r6,-4(r2)
 8012fb4:	00bfff04 	movi	r2,-4
 8012fb8:	00c00904 	movi	r3,36
 8012fbc:	308c703a 	and	r6,r6,r2
 8012fc0:	308d883a 	add	r6,r6,r2
 8012fc4:	19801436 	bltu	r3,r6,8013018 <_calloc_r+0x98>
 8012fc8:	008004c4 	movi	r2,19
 8012fcc:	11800936 	bltu	r2,r6,8012ff4 <_calloc_r+0x74>
 8012fd0:	8005883a 	mov	r2,r16
 8012fd4:	10000015 	stw	zero,0(r2)
 8012fd8:	10000115 	stw	zero,4(r2)
 8012fdc:	10000215 	stw	zero,8(r2)
 8012fe0:	8005883a 	mov	r2,r16
 8012fe4:	dfc00117 	ldw	ra,4(sp)
 8012fe8:	dc000017 	ldw	r16,0(sp)
 8012fec:	dec00204 	addi	sp,sp,8
 8012ff0:	f800283a 	ret
 8012ff4:	80000015 	stw	zero,0(r16)
 8012ff8:	80000115 	stw	zero,4(r16)
 8012ffc:	008006c4 	movi	r2,27
 8013000:	11800d2e 	bgeu	r2,r6,8013038 <_calloc_r+0xb8>
 8013004:	80000215 	stw	zero,8(r16)
 8013008:	80000315 	stw	zero,12(r16)
 801300c:	30c00c26 	beq	r6,r3,8013040 <_calloc_r+0xc0>
 8013010:	80800404 	addi	r2,r16,16
 8013014:	003fef06 	br	8012fd4 <__alt_data_end+0xfc012fd4>
 8013018:	8009883a 	mov	r4,r16
 801301c:	000b883a 	mov	r5,zero
 8013020:	800ec7c0 	call	800ec7c <memset>
 8013024:	8005883a 	mov	r2,r16
 8013028:	dfc00117 	ldw	ra,4(sp)
 801302c:	dc000017 	ldw	r16,0(sp)
 8013030:	dec00204 	addi	sp,sp,8
 8013034:	f800283a 	ret
 8013038:	80800204 	addi	r2,r16,8
 801303c:	003fe506 	br	8012fd4 <__alt_data_end+0xfc012fd4>
 8013040:	80000415 	stw	zero,16(r16)
 8013044:	80800604 	addi	r2,r16,24
 8013048:	80000515 	stw	zero,20(r16)
 801304c:	003fe106 	br	8012fd4 <__alt_data_end+0xfc012fd4>
 8013050:	0005883a 	mov	r2,zero
 8013054:	003fe306 	br	8012fe4 <__alt_data_end+0xfc012fe4>

08013058 <_fclose_r>:
 8013058:	28003226 	beq	r5,zero,8013124 <_fclose_r+0xcc>
 801305c:	defffc04 	addi	sp,sp,-16
 8013060:	dc400115 	stw	r17,4(sp)
 8013064:	2023883a 	mov	r17,r4
 8013068:	dc000015 	stw	r16,0(sp)
 801306c:	dfc00315 	stw	ra,12(sp)
 8013070:	dc800215 	stw	r18,8(sp)
 8013074:	2821883a 	mov	r16,r5
 8013078:	800dce00 	call	800dce0 <__sfp_lock_acquire>
 801307c:	88000226 	beq	r17,zero,8013088 <_fclose_r+0x30>
 8013080:	88800e17 	ldw	r2,56(r17)
 8013084:	10002926 	beq	r2,zero,801312c <_fclose_r+0xd4>
 8013088:	8080030f 	ldh	r2,12(r16)
 801308c:	10002226 	beq	r2,zero,8013118 <_fclose_r+0xc0>
 8013090:	8809883a 	mov	r4,r17
 8013094:	800b883a 	mov	r5,r16
 8013098:	800d7140 	call	800d714 <_fflush_r>
 801309c:	1025883a 	mov	r18,r2
 80130a0:	80800b17 	ldw	r2,44(r16)
 80130a4:	10000426 	beq	r2,zero,80130b8 <_fclose_r+0x60>
 80130a8:	81400717 	ldw	r5,28(r16)
 80130ac:	8809883a 	mov	r4,r17
 80130b0:	103ee83a 	callr	r2
 80130b4:	10002616 	blt	r2,zero,8013150 <_fclose_r+0xf8>
 80130b8:	8080030b 	ldhu	r2,12(r16)
 80130bc:	1080200c 	andi	r2,r2,128
 80130c0:	10001f1e 	bne	r2,zero,8013140 <_fclose_r+0xe8>
 80130c4:	81400c17 	ldw	r5,48(r16)
 80130c8:	28000526 	beq	r5,zero,80130e0 <_fclose_r+0x88>
 80130cc:	80801004 	addi	r2,r16,64
 80130d0:	28800226 	beq	r5,r2,80130dc <_fclose_r+0x84>
 80130d4:	8809883a 	mov	r4,r17
 80130d8:	800de440 	call	800de44 <_free_r>
 80130dc:	80000c15 	stw	zero,48(r16)
 80130e0:	81401117 	ldw	r5,68(r16)
 80130e4:	28000326 	beq	r5,zero,80130f4 <_fclose_r+0x9c>
 80130e8:	8809883a 	mov	r4,r17
 80130ec:	800de440 	call	800de44 <_free_r>
 80130f0:	80001115 	stw	zero,68(r16)
 80130f4:	8000030d 	sth	zero,12(r16)
 80130f8:	800dce40 	call	800dce4 <__sfp_lock_release>
 80130fc:	9005883a 	mov	r2,r18
 8013100:	dfc00317 	ldw	ra,12(sp)
 8013104:	dc800217 	ldw	r18,8(sp)
 8013108:	dc400117 	ldw	r17,4(sp)
 801310c:	dc000017 	ldw	r16,0(sp)
 8013110:	dec00404 	addi	sp,sp,16
 8013114:	f800283a 	ret
 8013118:	800dce40 	call	800dce4 <__sfp_lock_release>
 801311c:	0005883a 	mov	r2,zero
 8013120:	003ff706 	br	8013100 <__alt_data_end+0xfc013100>
 8013124:	0005883a 	mov	r2,zero
 8013128:	f800283a 	ret
 801312c:	8809883a 	mov	r4,r17
 8013130:	800dcd00 	call	800dcd0 <__sinit>
 8013134:	8080030f 	ldh	r2,12(r16)
 8013138:	103fd51e 	bne	r2,zero,8013090 <__alt_data_end+0xfc013090>
 801313c:	003ff606 	br	8013118 <__alt_data_end+0xfc013118>
 8013140:	81400417 	ldw	r5,16(r16)
 8013144:	8809883a 	mov	r4,r17
 8013148:	800de440 	call	800de44 <_free_r>
 801314c:	003fdd06 	br	80130c4 <__alt_data_end+0xfc0130c4>
 8013150:	04bfffc4 	movi	r18,-1
 8013154:	003fd806 	br	80130b8 <__alt_data_end+0xfc0130b8>

08013158 <fclose>:
 8013158:	008200b4 	movhi	r2,2050
 801315c:	1094e104 	addi	r2,r2,21380
 8013160:	200b883a 	mov	r5,r4
 8013164:	11000017 	ldw	r4,0(r2)
 8013168:	80130581 	jmpi	8013058 <_fclose_r>

0801316c <_fputwc_r>:
 801316c:	3080030b 	ldhu	r2,12(r6)
 8013170:	defff804 	addi	sp,sp,-32
 8013174:	dcc00415 	stw	r19,16(sp)
 8013178:	dc800315 	stw	r18,12(sp)
 801317c:	dc000115 	stw	r16,4(sp)
 8013180:	dfc00715 	stw	ra,28(sp)
 8013184:	dd400615 	stw	r21,24(sp)
 8013188:	dd000515 	stw	r20,20(sp)
 801318c:	dc400215 	stw	r17,8(sp)
 8013190:	10c8000c 	andi	r3,r2,8192
 8013194:	3021883a 	mov	r16,r6
 8013198:	2027883a 	mov	r19,r4
 801319c:	2825883a 	mov	r18,r5
 80131a0:	1800051e 	bne	r3,zero,80131b8 <_fputwc_r+0x4c>
 80131a4:	30c01917 	ldw	r3,100(r6)
 80131a8:	10880014 	ori	r2,r2,8192
 80131ac:	3080030d 	sth	r2,12(r6)
 80131b0:	18880014 	ori	r2,r3,8192
 80131b4:	30801915 	stw	r2,100(r6)
 80131b8:	800e8280 	call	800e828 <__locale_mb_cur_max>
 80131bc:	00c00044 	movi	r3,1
 80131c0:	10c03e26 	beq	r2,r3,80132bc <_fputwc_r+0x150>
 80131c4:	9809883a 	mov	r4,r19
 80131c8:	d80b883a 	mov	r5,sp
 80131cc:	900d883a 	mov	r6,r18
 80131d0:	81c01704 	addi	r7,r16,92
 80131d4:	801361c0 	call	801361c <_wcrtomb_r>
 80131d8:	1029883a 	mov	r20,r2
 80131dc:	00bfffc4 	movi	r2,-1
 80131e0:	a0802026 	beq	r20,r2,8013264 <_fputwc_r+0xf8>
 80131e4:	d9400003 	ldbu	r5,0(sp)
 80131e8:	a0001c26 	beq	r20,zero,801325c <_fputwc_r+0xf0>
 80131ec:	0023883a 	mov	r17,zero
 80131f0:	05400284 	movi	r21,10
 80131f4:	00000906 	br	801321c <_fputwc_r+0xb0>
 80131f8:	80800017 	ldw	r2,0(r16)
 80131fc:	11400005 	stb	r5,0(r2)
 8013200:	80c00017 	ldw	r3,0(r16)
 8013204:	18c00044 	addi	r3,r3,1
 8013208:	80c00015 	stw	r3,0(r16)
 801320c:	8c400044 	addi	r17,r17,1
 8013210:	dc45883a 	add	r2,sp,r17
 8013214:	8d00112e 	bgeu	r17,r20,801325c <_fputwc_r+0xf0>
 8013218:	11400003 	ldbu	r5,0(r2)
 801321c:	80c00217 	ldw	r3,8(r16)
 8013220:	18ffffc4 	addi	r3,r3,-1
 8013224:	80c00215 	stw	r3,8(r16)
 8013228:	183ff30e 	bge	r3,zero,80131f8 <__alt_data_end+0xfc0131f8>
 801322c:	80800617 	ldw	r2,24(r16)
 8013230:	18801916 	blt	r3,r2,8013298 <_fputwc_r+0x12c>
 8013234:	80800017 	ldw	r2,0(r16)
 8013238:	11400005 	stb	r5,0(r2)
 801323c:	80800017 	ldw	r2,0(r16)
 8013240:	10c00003 	ldbu	r3,0(r2)
 8013244:	10800044 	addi	r2,r2,1
 8013248:	1d402326 	beq	r3,r21,80132d8 <_fputwc_r+0x16c>
 801324c:	80800015 	stw	r2,0(r16)
 8013250:	8c400044 	addi	r17,r17,1
 8013254:	dc45883a 	add	r2,sp,r17
 8013258:	8d3fef36 	bltu	r17,r20,8013218 <__alt_data_end+0xfc013218>
 801325c:	9005883a 	mov	r2,r18
 8013260:	00000406 	br	8013274 <_fputwc_r+0x108>
 8013264:	80c0030b 	ldhu	r3,12(r16)
 8013268:	a005883a 	mov	r2,r20
 801326c:	18c01014 	ori	r3,r3,64
 8013270:	80c0030d 	sth	r3,12(r16)
 8013274:	dfc00717 	ldw	ra,28(sp)
 8013278:	dd400617 	ldw	r21,24(sp)
 801327c:	dd000517 	ldw	r20,20(sp)
 8013280:	dcc00417 	ldw	r19,16(sp)
 8013284:	dc800317 	ldw	r18,12(sp)
 8013288:	dc400217 	ldw	r17,8(sp)
 801328c:	dc000117 	ldw	r16,4(sp)
 8013290:	dec00804 	addi	sp,sp,32
 8013294:	f800283a 	ret
 8013298:	9809883a 	mov	r4,r19
 801329c:	29403fcc 	andi	r5,r5,255
 80132a0:	800d883a 	mov	r6,r16
 80132a4:	80134ac0 	call	80134ac <__swbuf_r>
 80132a8:	10bfffe0 	cmpeqi	r2,r2,-1
 80132ac:	10803fcc 	andi	r2,r2,255
 80132b0:	103fd626 	beq	r2,zero,801320c <__alt_data_end+0xfc01320c>
 80132b4:	00bfffc4 	movi	r2,-1
 80132b8:	003fee06 	br	8013274 <__alt_data_end+0xfc013274>
 80132bc:	90ffffc4 	addi	r3,r18,-1
 80132c0:	01003f84 	movi	r4,254
 80132c4:	20ffbf36 	bltu	r4,r3,80131c4 <__alt_data_end+0xfc0131c4>
 80132c8:	900b883a 	mov	r5,r18
 80132cc:	dc800005 	stb	r18,0(sp)
 80132d0:	1029883a 	mov	r20,r2
 80132d4:	003fc506 	br	80131ec <__alt_data_end+0xfc0131ec>
 80132d8:	9809883a 	mov	r4,r19
 80132dc:	a80b883a 	mov	r5,r21
 80132e0:	800d883a 	mov	r6,r16
 80132e4:	80134ac0 	call	80134ac <__swbuf_r>
 80132e8:	10bfffe0 	cmpeqi	r2,r2,-1
 80132ec:	003fef06 	br	80132ac <__alt_data_end+0xfc0132ac>

080132f0 <fputwc>:
 80132f0:	defffc04 	addi	sp,sp,-16
 80132f4:	dc000115 	stw	r16,4(sp)
 80132f8:	040200b4 	movhi	r16,2050
 80132fc:	8414e104 	addi	r16,r16,21380
 8013300:	dc400215 	stw	r17,8(sp)
 8013304:	2023883a 	mov	r17,r4
 8013308:	81000017 	ldw	r4,0(r16)
 801330c:	dfc00315 	stw	ra,12(sp)
 8013310:	280d883a 	mov	r6,r5
 8013314:	20000626 	beq	r4,zero,8013330 <fputwc+0x40>
 8013318:	20800e17 	ldw	r2,56(r4)
 801331c:	1000041e 	bne	r2,zero,8013330 <fputwc+0x40>
 8013320:	d9400015 	stw	r5,0(sp)
 8013324:	800dcd00 	call	800dcd0 <__sinit>
 8013328:	81000017 	ldw	r4,0(r16)
 801332c:	d9800017 	ldw	r6,0(sp)
 8013330:	880b883a 	mov	r5,r17
 8013334:	dfc00317 	ldw	ra,12(sp)
 8013338:	dc400217 	ldw	r17,8(sp)
 801333c:	dc000117 	ldw	r16,4(sp)
 8013340:	dec00404 	addi	sp,sp,16
 8013344:	801316c1 	jmpi	801316c <_fputwc_r>

08013348 <_fstat_r>:
 8013348:	defffd04 	addi	sp,sp,-12
 801334c:	dc000015 	stw	r16,0(sp)
 8013350:	040200b4 	movhi	r16,2050
 8013354:	dc400115 	stw	r17,4(sp)
 8013358:	841bbd04 	addi	r16,r16,28404
 801335c:	2023883a 	mov	r17,r4
 8013360:	2809883a 	mov	r4,r5
 8013364:	300b883a 	mov	r5,r6
 8013368:	dfc00215 	stw	ra,8(sp)
 801336c:	80000015 	stw	zero,0(r16)
 8013370:	8015ad80 	call	8015ad8 <fstat>
 8013374:	00ffffc4 	movi	r3,-1
 8013378:	10c00526 	beq	r2,r3,8013390 <_fstat_r+0x48>
 801337c:	dfc00217 	ldw	ra,8(sp)
 8013380:	dc400117 	ldw	r17,4(sp)
 8013384:	dc000017 	ldw	r16,0(sp)
 8013388:	dec00304 	addi	sp,sp,12
 801338c:	f800283a 	ret
 8013390:	80c00017 	ldw	r3,0(r16)
 8013394:	183ff926 	beq	r3,zero,801337c <__alt_data_end+0xfc01337c>
 8013398:	88c00015 	stw	r3,0(r17)
 801339c:	003ff706 	br	801337c <__alt_data_end+0xfc01337c>

080133a0 <_isatty_r>:
 80133a0:	defffd04 	addi	sp,sp,-12
 80133a4:	dc000015 	stw	r16,0(sp)
 80133a8:	040200b4 	movhi	r16,2050
 80133ac:	dc400115 	stw	r17,4(sp)
 80133b0:	841bbd04 	addi	r16,r16,28404
 80133b4:	2023883a 	mov	r17,r4
 80133b8:	2809883a 	mov	r4,r5
 80133bc:	dfc00215 	stw	ra,8(sp)
 80133c0:	80000015 	stw	zero,0(r16)
 80133c4:	8015df40 	call	8015df4 <isatty>
 80133c8:	00ffffc4 	movi	r3,-1
 80133cc:	10c00526 	beq	r2,r3,80133e4 <_isatty_r+0x44>
 80133d0:	dfc00217 	ldw	ra,8(sp)
 80133d4:	dc400117 	ldw	r17,4(sp)
 80133d8:	dc000017 	ldw	r16,0(sp)
 80133dc:	dec00304 	addi	sp,sp,12
 80133e0:	f800283a 	ret
 80133e4:	80c00017 	ldw	r3,0(r16)
 80133e8:	183ff926 	beq	r3,zero,80133d0 <__alt_data_end+0xfc0133d0>
 80133ec:	88c00015 	stw	r3,0(r17)
 80133f0:	003ff706 	br	80133d0 <__alt_data_end+0xfc0133d0>

080133f4 <_lseek_r>:
 80133f4:	defffd04 	addi	sp,sp,-12
 80133f8:	dc000015 	stw	r16,0(sp)
 80133fc:	040200b4 	movhi	r16,2050
 8013400:	dc400115 	stw	r17,4(sp)
 8013404:	841bbd04 	addi	r16,r16,28404
 8013408:	2023883a 	mov	r17,r4
 801340c:	2809883a 	mov	r4,r5
 8013410:	300b883a 	mov	r5,r6
 8013414:	380d883a 	mov	r6,r7
 8013418:	dfc00215 	stw	ra,8(sp)
 801341c:	80000015 	stw	zero,0(r16)
 8013420:	8015fd40 	call	8015fd4 <lseek>
 8013424:	00ffffc4 	movi	r3,-1
 8013428:	10c00526 	beq	r2,r3,8013440 <_lseek_r+0x4c>
 801342c:	dfc00217 	ldw	ra,8(sp)
 8013430:	dc400117 	ldw	r17,4(sp)
 8013434:	dc000017 	ldw	r16,0(sp)
 8013438:	dec00304 	addi	sp,sp,12
 801343c:	f800283a 	ret
 8013440:	80c00017 	ldw	r3,0(r16)
 8013444:	183ff926 	beq	r3,zero,801342c <__alt_data_end+0xfc01342c>
 8013448:	88c00015 	stw	r3,0(r17)
 801344c:	003ff706 	br	801342c <__alt_data_end+0xfc01342c>

08013450 <_read_r>:
 8013450:	defffd04 	addi	sp,sp,-12
 8013454:	dc000015 	stw	r16,0(sp)
 8013458:	040200b4 	movhi	r16,2050
 801345c:	dc400115 	stw	r17,4(sp)
 8013460:	841bbd04 	addi	r16,r16,28404
 8013464:	2023883a 	mov	r17,r4
 8013468:	2809883a 	mov	r4,r5
 801346c:	300b883a 	mov	r5,r6
 8013470:	380d883a 	mov	r6,r7
 8013474:	dfc00215 	stw	ra,8(sp)
 8013478:	80000015 	stw	zero,0(r16)
 801347c:	80161b80 	call	80161b8 <read>
 8013480:	00ffffc4 	movi	r3,-1
 8013484:	10c00526 	beq	r2,r3,801349c <_read_r+0x4c>
 8013488:	dfc00217 	ldw	ra,8(sp)
 801348c:	dc400117 	ldw	r17,4(sp)
 8013490:	dc000017 	ldw	r16,0(sp)
 8013494:	dec00304 	addi	sp,sp,12
 8013498:	f800283a 	ret
 801349c:	80c00017 	ldw	r3,0(r16)
 80134a0:	183ff926 	beq	r3,zero,8013488 <__alt_data_end+0xfc013488>
 80134a4:	88c00015 	stw	r3,0(r17)
 80134a8:	003ff706 	br	8013488 <__alt_data_end+0xfc013488>

080134ac <__swbuf_r>:
 80134ac:	defffc04 	addi	sp,sp,-16
 80134b0:	dc800215 	stw	r18,8(sp)
 80134b4:	dc400115 	stw	r17,4(sp)
 80134b8:	dc000015 	stw	r16,0(sp)
 80134bc:	dfc00315 	stw	ra,12(sp)
 80134c0:	2025883a 	mov	r18,r4
 80134c4:	2823883a 	mov	r17,r5
 80134c8:	3021883a 	mov	r16,r6
 80134cc:	20000226 	beq	r4,zero,80134d8 <__swbuf_r+0x2c>
 80134d0:	20800e17 	ldw	r2,56(r4)
 80134d4:	10004126 	beq	r2,zero,80135dc <__swbuf_r+0x130>
 80134d8:	80c00617 	ldw	r3,24(r16)
 80134dc:	8180030b 	ldhu	r6,12(r16)
 80134e0:	80c00215 	stw	r3,8(r16)
 80134e4:	30c0020c 	andi	r3,r6,8
 80134e8:	18003526 	beq	r3,zero,80135c0 <__swbuf_r+0x114>
 80134ec:	80c00417 	ldw	r3,16(r16)
 80134f0:	18003326 	beq	r3,zero,80135c0 <__swbuf_r+0x114>
 80134f4:	3088000c 	andi	r2,r6,8192
 80134f8:	8c403fcc 	andi	r17,r17,255
 80134fc:	10001726 	beq	r2,zero,801355c <__swbuf_r+0xb0>
 8013500:	80800017 	ldw	r2,0(r16)
 8013504:	81000517 	ldw	r4,20(r16)
 8013508:	10c7c83a 	sub	r3,r2,r3
 801350c:	19001d0e 	bge	r3,r4,8013584 <__swbuf_r+0xd8>
 8013510:	18c00044 	addi	r3,r3,1
 8013514:	81400217 	ldw	r5,8(r16)
 8013518:	11000044 	addi	r4,r2,1
 801351c:	81000015 	stw	r4,0(r16)
 8013520:	297fffc4 	addi	r5,r5,-1
 8013524:	81400215 	stw	r5,8(r16)
 8013528:	14400005 	stb	r17,0(r2)
 801352c:	80800517 	ldw	r2,20(r16)
 8013530:	10c01d26 	beq	r2,r3,80135a8 <__swbuf_r+0xfc>
 8013534:	8080030b 	ldhu	r2,12(r16)
 8013538:	1080004c 	andi	r2,r2,1
 801353c:	1000181e 	bne	r2,zero,80135a0 <__swbuf_r+0xf4>
 8013540:	8805883a 	mov	r2,r17
 8013544:	dfc00317 	ldw	ra,12(sp)
 8013548:	dc800217 	ldw	r18,8(sp)
 801354c:	dc400117 	ldw	r17,4(sp)
 8013550:	dc000017 	ldw	r16,0(sp)
 8013554:	dec00404 	addi	sp,sp,16
 8013558:	f800283a 	ret
 801355c:	81001917 	ldw	r4,100(r16)
 8013560:	00b7ffc4 	movi	r2,-8193
 8013564:	31880014 	ori	r6,r6,8192
 8013568:	2084703a 	and	r2,r4,r2
 801356c:	80801915 	stw	r2,100(r16)
 8013570:	80800017 	ldw	r2,0(r16)
 8013574:	81000517 	ldw	r4,20(r16)
 8013578:	8180030d 	sth	r6,12(r16)
 801357c:	10c7c83a 	sub	r3,r2,r3
 8013580:	193fe316 	blt	r3,r4,8013510 <__alt_data_end+0xfc013510>
 8013584:	9009883a 	mov	r4,r18
 8013588:	800b883a 	mov	r5,r16
 801358c:	800d7140 	call	800d714 <_fflush_r>
 8013590:	1000091e 	bne	r2,zero,80135b8 <__swbuf_r+0x10c>
 8013594:	80800017 	ldw	r2,0(r16)
 8013598:	00c00044 	movi	r3,1
 801359c:	003fdd06 	br	8013514 <__alt_data_end+0xfc013514>
 80135a0:	00800284 	movi	r2,10
 80135a4:	88bfe61e 	bne	r17,r2,8013540 <__alt_data_end+0xfc013540>
 80135a8:	9009883a 	mov	r4,r18
 80135ac:	800b883a 	mov	r5,r16
 80135b0:	800d7140 	call	800d714 <_fflush_r>
 80135b4:	103fe226 	beq	r2,zero,8013540 <__alt_data_end+0xfc013540>
 80135b8:	00bfffc4 	movi	r2,-1
 80135bc:	003fe106 	br	8013544 <__alt_data_end+0xfc013544>
 80135c0:	9009883a 	mov	r4,r18
 80135c4:	800b883a 	mov	r5,r16
 80135c8:	800bc940 	call	800bc94 <__swsetup_r>
 80135cc:	1000051e 	bne	r2,zero,80135e4 <__swbuf_r+0x138>
 80135d0:	8180030b 	ldhu	r6,12(r16)
 80135d4:	80c00417 	ldw	r3,16(r16)
 80135d8:	003fc606 	br	80134f4 <__alt_data_end+0xfc0134f4>
 80135dc:	800dcd00 	call	800dcd0 <__sinit>
 80135e0:	003fbd06 	br	80134d8 <__alt_data_end+0xfc0134d8>
 80135e4:	80c0030b 	ldhu	r3,12(r16)
 80135e8:	00bfffc4 	movi	r2,-1
 80135ec:	18c01014 	ori	r3,r3,64
 80135f0:	80c0030d 	sth	r3,12(r16)
 80135f4:	00c00244 	movi	r3,9
 80135f8:	90c00015 	stw	r3,0(r18)
 80135fc:	003fd106 	br	8013544 <__alt_data_end+0xfc013544>

08013600 <__swbuf>:
 8013600:	00c200b4 	movhi	r3,2050
 8013604:	18d4e104 	addi	r3,r3,21380
 8013608:	2005883a 	mov	r2,r4
 801360c:	19000017 	ldw	r4,0(r3)
 8013610:	280d883a 	mov	r6,r5
 8013614:	100b883a 	mov	r5,r2
 8013618:	80134ac1 	jmpi	80134ac <__swbuf_r>

0801361c <_wcrtomb_r>:
 801361c:	defff604 	addi	sp,sp,-40
 8013620:	008200b4 	movhi	r2,2050
 8013624:	dc800815 	stw	r18,32(sp)
 8013628:	dc400715 	stw	r17,28(sp)
 801362c:	dc000615 	stw	r16,24(sp)
 8013630:	1094e304 	addi	r2,r2,21388
 8013634:	dfc00915 	stw	ra,36(sp)
 8013638:	2021883a 	mov	r16,r4
 801363c:	3823883a 	mov	r17,r7
 8013640:	14800017 	ldw	r18,0(r2)
 8013644:	28001426 	beq	r5,zero,8013698 <_wcrtomb_r+0x7c>
 8013648:	d9400415 	stw	r5,16(sp)
 801364c:	d9800515 	stw	r6,20(sp)
 8013650:	800e81c0 	call	800e81c <__locale_charset>
 8013654:	d9400417 	ldw	r5,16(sp)
 8013658:	d9800517 	ldw	r6,20(sp)
 801365c:	8009883a 	mov	r4,r16
 8013660:	dc400015 	stw	r17,0(sp)
 8013664:	100f883a 	mov	r7,r2
 8013668:	903ee83a 	callr	r18
 801366c:	00ffffc4 	movi	r3,-1
 8013670:	10c0031e 	bne	r2,r3,8013680 <_wcrtomb_r+0x64>
 8013674:	88000015 	stw	zero,0(r17)
 8013678:	00c02284 	movi	r3,138
 801367c:	80c00015 	stw	r3,0(r16)
 8013680:	dfc00917 	ldw	ra,36(sp)
 8013684:	dc800817 	ldw	r18,32(sp)
 8013688:	dc400717 	ldw	r17,28(sp)
 801368c:	dc000617 	ldw	r16,24(sp)
 8013690:	dec00a04 	addi	sp,sp,40
 8013694:	f800283a 	ret
 8013698:	800e81c0 	call	800e81c <__locale_charset>
 801369c:	8009883a 	mov	r4,r16
 80136a0:	dc400015 	stw	r17,0(sp)
 80136a4:	d9400104 	addi	r5,sp,4
 80136a8:	000d883a 	mov	r6,zero
 80136ac:	100f883a 	mov	r7,r2
 80136b0:	903ee83a 	callr	r18
 80136b4:	003fed06 	br	801366c <__alt_data_end+0xfc01366c>

080136b8 <wcrtomb>:
 80136b8:	defff504 	addi	sp,sp,-44
 80136bc:	dc400515 	stw	r17,20(sp)
 80136c0:	dc000415 	stw	r16,16(sp)
 80136c4:	dfc00a15 	stw	ra,40(sp)
 80136c8:	dd400915 	stw	r21,36(sp)
 80136cc:	dd000815 	stw	r20,32(sp)
 80136d0:	dcc00715 	stw	r19,28(sp)
 80136d4:	dc800615 	stw	r18,24(sp)
 80136d8:	2021883a 	mov	r16,r4
 80136dc:	3023883a 	mov	r17,r6
 80136e0:	20001d26 	beq	r4,zero,8013758 <wcrtomb+0xa0>
 80136e4:	048200b4 	movhi	r18,2050
 80136e8:	9494e104 	addi	r18,r18,21380
 80136ec:	008200b4 	movhi	r2,2050
 80136f0:	95400017 	ldw	r21,0(r18)
 80136f4:	1094e304 	addi	r2,r2,21388
 80136f8:	15000017 	ldw	r20,0(r2)
 80136fc:	2827883a 	mov	r19,r5
 8013700:	800e81c0 	call	800e81c <__locale_charset>
 8013704:	a809883a 	mov	r4,r21
 8013708:	dc400015 	stw	r17,0(sp)
 801370c:	800b883a 	mov	r5,r16
 8013710:	980d883a 	mov	r6,r19
 8013714:	100f883a 	mov	r7,r2
 8013718:	a03ee83a 	callr	r20
 801371c:	00ffffc4 	movi	r3,-1
 8013720:	10c0041e 	bne	r2,r3,8013734 <wcrtomb+0x7c>
 8013724:	90c00017 	ldw	r3,0(r18)
 8013728:	01002284 	movi	r4,138
 801372c:	88000015 	stw	zero,0(r17)
 8013730:	19000015 	stw	r4,0(r3)
 8013734:	dfc00a17 	ldw	ra,40(sp)
 8013738:	dd400917 	ldw	r21,36(sp)
 801373c:	dd000817 	ldw	r20,32(sp)
 8013740:	dcc00717 	ldw	r19,28(sp)
 8013744:	dc800617 	ldw	r18,24(sp)
 8013748:	dc400517 	ldw	r17,20(sp)
 801374c:	dc000417 	ldw	r16,16(sp)
 8013750:	dec00b04 	addi	sp,sp,44
 8013754:	f800283a 	ret
 8013758:	048200b4 	movhi	r18,2050
 801375c:	9494e104 	addi	r18,r18,21380
 8013760:	008200b4 	movhi	r2,2050
 8013764:	94c00017 	ldw	r19,0(r18)
 8013768:	1094e304 	addi	r2,r2,21388
 801376c:	14000017 	ldw	r16,0(r2)
 8013770:	800e81c0 	call	800e81c <__locale_charset>
 8013774:	9809883a 	mov	r4,r19
 8013778:	dc400015 	stw	r17,0(sp)
 801377c:	d9400104 	addi	r5,sp,4
 8013780:	000d883a 	mov	r6,zero
 8013784:	100f883a 	mov	r7,r2
 8013788:	803ee83a 	callr	r16
 801378c:	003fe306 	br	801371c <__alt_data_end+0xfc01371c>

08013790 <__ascii_wctomb>:
 8013790:	28000526 	beq	r5,zero,80137a8 <__ascii_wctomb+0x18>
 8013794:	00803fc4 	movi	r2,255
 8013798:	11800536 	bltu	r2,r6,80137b0 <__ascii_wctomb+0x20>
 801379c:	29800005 	stb	r6,0(r5)
 80137a0:	00800044 	movi	r2,1
 80137a4:	f800283a 	ret
 80137a8:	0005883a 	mov	r2,zero
 80137ac:	f800283a 	ret
 80137b0:	00802284 	movi	r2,138
 80137b4:	20800015 	stw	r2,0(r4)
 80137b8:	00bfffc4 	movi	r2,-1
 80137bc:	f800283a 	ret

080137c0 <_wctomb_r>:
 80137c0:	008200b4 	movhi	r2,2050
 80137c4:	defff904 	addi	sp,sp,-28
 80137c8:	1094e304 	addi	r2,r2,21388
 80137cc:	dfc00615 	stw	ra,24(sp)
 80137d0:	dc400515 	stw	r17,20(sp)
 80137d4:	dc000415 	stw	r16,16(sp)
 80137d8:	3823883a 	mov	r17,r7
 80137dc:	14000017 	ldw	r16,0(r2)
 80137e0:	d9000115 	stw	r4,4(sp)
 80137e4:	d9400215 	stw	r5,8(sp)
 80137e8:	d9800315 	stw	r6,12(sp)
 80137ec:	800e81c0 	call	800e81c <__locale_charset>
 80137f0:	d9000117 	ldw	r4,4(sp)
 80137f4:	d9400217 	ldw	r5,8(sp)
 80137f8:	d9800317 	ldw	r6,12(sp)
 80137fc:	dc400015 	stw	r17,0(sp)
 8013800:	100f883a 	mov	r7,r2
 8013804:	803ee83a 	callr	r16
 8013808:	dfc00617 	ldw	ra,24(sp)
 801380c:	dc400517 	ldw	r17,20(sp)
 8013810:	dc000417 	ldw	r16,16(sp)
 8013814:	dec00704 	addi	sp,sp,28
 8013818:	f800283a 	ret

0801381c <__muldi3>:
 801381c:	defff604 	addi	sp,sp,-40
 8013820:	dd800615 	stw	r22,24(sp)
 8013824:	dd400515 	stw	r21,20(sp)
 8013828:	25bfffcc 	andi	r22,r4,65535
 801382c:	357fffcc 	andi	r21,r6,65535
 8013830:	dc400115 	stw	r17,4(sp)
 8013834:	2022d43a 	srli	r17,r4,16
 8013838:	dcc00315 	stw	r19,12(sp)
 801383c:	dc800215 	stw	r18,8(sp)
 8013840:	2027883a 	mov	r19,r4
 8013844:	2825883a 	mov	r18,r5
 8013848:	a809883a 	mov	r4,r21
 801384c:	b00b883a 	mov	r5,r22
 8013850:	dfc00915 	stw	ra,36(sp)
 8013854:	df000815 	stw	fp,32(sp)
 8013858:	ddc00715 	stw	r23,28(sp)
 801385c:	3839883a 	mov	fp,r7
 8013860:	302ed43a 	srli	r23,r6,16
 8013864:	dd000415 	stw	r20,16(sp)
 8013868:	dc000015 	stw	r16,0(sp)
 801386c:	3029883a 	mov	r20,r6
 8013870:	8004c100 	call	8004c10 <__mulsi3>
 8013874:	a809883a 	mov	r4,r21
 8013878:	880b883a 	mov	r5,r17
 801387c:	1021883a 	mov	r16,r2
 8013880:	8004c100 	call	8004c10 <__mulsi3>
 8013884:	880b883a 	mov	r5,r17
 8013888:	b809883a 	mov	r4,r23
 801388c:	102b883a 	mov	r21,r2
 8013890:	8004c100 	call	8004c10 <__mulsi3>
 8013894:	b809883a 	mov	r4,r23
 8013898:	b00b883a 	mov	r5,r22
 801389c:	1023883a 	mov	r17,r2
 80138a0:	8004c100 	call	8004c10 <__mulsi3>
 80138a4:	8012d43a 	srli	r9,r16,16
 80138a8:	a885883a 	add	r2,r21,r2
 80138ac:	1251883a 	add	r8,r2,r9
 80138b0:	4540022e 	bgeu	r8,r21,80138bc <__muldi3+0xa0>
 80138b4:	00800074 	movhi	r2,1
 80138b8:	88a3883a 	add	r17,r17,r2
 80138bc:	4006d43a 	srli	r3,r8,16
 80138c0:	4010943a 	slli	r8,r8,16
 80138c4:	9809883a 	mov	r4,r19
 80138c8:	e00b883a 	mov	r5,fp
 80138cc:	843fffcc 	andi	r16,r16,65535
 80138d0:	88e3883a 	add	r17,r17,r3
 80138d4:	4421883a 	add	r16,r8,r16
 80138d8:	8004c100 	call	8004c10 <__mulsi3>
 80138dc:	a009883a 	mov	r4,r20
 80138e0:	900b883a 	mov	r5,r18
 80138e4:	1027883a 	mov	r19,r2
 80138e8:	8004c100 	call	8004c10 <__mulsi3>
 80138ec:	9885883a 	add	r2,r19,r2
 80138f0:	1447883a 	add	r3,r2,r17
 80138f4:	8005883a 	mov	r2,r16
 80138f8:	dfc00917 	ldw	ra,36(sp)
 80138fc:	df000817 	ldw	fp,32(sp)
 8013900:	ddc00717 	ldw	r23,28(sp)
 8013904:	dd800617 	ldw	r22,24(sp)
 8013908:	dd400517 	ldw	r21,20(sp)
 801390c:	dd000417 	ldw	r20,16(sp)
 8013910:	dcc00317 	ldw	r19,12(sp)
 8013914:	dc800217 	ldw	r18,8(sp)
 8013918:	dc400117 	ldw	r17,4(sp)
 801391c:	dc000017 	ldw	r16,0(sp)
 8013920:	dec00a04 	addi	sp,sp,40
 8013924:	f800283a 	ret

08013928 <__udivdi3>:
 8013928:	defff504 	addi	sp,sp,-44
 801392c:	dcc00415 	stw	r19,16(sp)
 8013930:	dc000115 	stw	r16,4(sp)
 8013934:	dfc00a15 	stw	ra,40(sp)
 8013938:	df000915 	stw	fp,36(sp)
 801393c:	ddc00815 	stw	r23,32(sp)
 8013940:	dd800715 	stw	r22,28(sp)
 8013944:	dd400615 	stw	r21,24(sp)
 8013948:	dd000515 	stw	r20,20(sp)
 801394c:	dc800315 	stw	r18,12(sp)
 8013950:	dc400215 	stw	r17,8(sp)
 8013954:	2027883a 	mov	r19,r4
 8013958:	2821883a 	mov	r16,r5
 801395c:	3800471e 	bne	r7,zero,8013a7c <__udivdi3+0x154>
 8013960:	3025883a 	mov	r18,r6
 8013964:	2023883a 	mov	r17,r4
 8013968:	2980592e 	bgeu	r5,r6,8013ad0 <__udivdi3+0x1a8>
 801396c:	00bfffd4 	movui	r2,65535
 8013970:	2829883a 	mov	r20,r5
 8013974:	1180b236 	bltu	r2,r6,8013c40 <__udivdi3+0x318>
 8013978:	00803fc4 	movi	r2,255
 801397c:	1181622e 	bgeu	r2,r6,8013f08 <__udivdi3+0x5e0>
 8013980:	00800204 	movi	r2,8
 8013984:	1007883a 	mov	r3,r2
 8013988:	3084d83a 	srl	r2,r6,r2
 801398c:	010200b4 	movhi	r4,2050
 8013990:	210cb004 	addi	r4,r4,12992
 8013994:	2085883a 	add	r2,r4,r2
 8013998:	11000003 	ldbu	r4,0(r2)
 801399c:	20c9883a 	add	r4,r4,r3
 80139a0:	00c00804 	movi	r3,32
 80139a4:	1907c83a 	sub	r3,r3,r4
 80139a8:	18000526 	beq	r3,zero,80139c0 <__udivdi3+0x98>
 80139ac:	80e0983a 	sll	r16,r16,r3
 80139b0:	9908d83a 	srl	r4,r19,r4
 80139b4:	30e4983a 	sll	r18,r6,r3
 80139b8:	98e2983a 	sll	r17,r19,r3
 80139bc:	8128b03a 	or	r20,r16,r4
 80139c0:	902ad43a 	srli	r21,r18,16
 80139c4:	a009883a 	mov	r4,r20
 80139c8:	95bfffcc 	andi	r22,r18,65535
 80139cc:	a80b883a 	mov	r5,r21
 80139d0:	8004c080 	call	8004c08 <__umodsi3>
 80139d4:	a009883a 	mov	r4,r20
 80139d8:	a80b883a 	mov	r5,r21
 80139dc:	102f883a 	mov	r23,r2
 80139e0:	8004c000 	call	8004c00 <__udivsi3>
 80139e4:	1009883a 	mov	r4,r2
 80139e8:	b00b883a 	mov	r5,r22
 80139ec:	1021883a 	mov	r16,r2
 80139f0:	8004c100 	call	8004c10 <__mulsi3>
 80139f4:	b82e943a 	slli	r23,r23,16
 80139f8:	8808d43a 	srli	r4,r17,16
 80139fc:	b906b03a 	or	r3,r23,r4
 8013a00:	1880052e 	bgeu	r3,r2,8013a18 <__udivdi3+0xf0>
 8013a04:	1c87883a 	add	r3,r3,r18
 8013a08:	813fffc4 	addi	r4,r16,-1
 8013a0c:	1c800136 	bltu	r3,r18,8013a14 <__udivdi3+0xec>
 8013a10:	18815236 	bltu	r3,r2,8013f5c <__udivdi3+0x634>
 8013a14:	2021883a 	mov	r16,r4
 8013a18:	18a7c83a 	sub	r19,r3,r2
 8013a1c:	9809883a 	mov	r4,r19
 8013a20:	a80b883a 	mov	r5,r21
 8013a24:	8004c080 	call	8004c08 <__umodsi3>
 8013a28:	1029883a 	mov	r20,r2
 8013a2c:	9809883a 	mov	r4,r19
 8013a30:	a80b883a 	mov	r5,r21
 8013a34:	a028943a 	slli	r20,r20,16
 8013a38:	8004c000 	call	8004c00 <__udivsi3>
 8013a3c:	1009883a 	mov	r4,r2
 8013a40:	b00b883a 	mov	r5,r22
 8013a44:	8c7fffcc 	andi	r17,r17,65535
 8013a48:	1027883a 	mov	r19,r2
 8013a4c:	a462b03a 	or	r17,r20,r17
 8013a50:	8004c100 	call	8004c10 <__mulsi3>
 8013a54:	8880052e 	bgeu	r17,r2,8013a6c <__udivdi3+0x144>
 8013a58:	8ca3883a 	add	r17,r17,r18
 8013a5c:	98ffffc4 	addi	r3,r19,-1
 8013a60:	8c811036 	bltu	r17,r18,8013ea4 <__udivdi3+0x57c>
 8013a64:	88810f2e 	bgeu	r17,r2,8013ea4 <__udivdi3+0x57c>
 8013a68:	9cffff84 	addi	r19,r19,-2
 8013a6c:	8020943a 	slli	r16,r16,16
 8013a70:	0007883a 	mov	r3,zero
 8013a74:	9c04b03a 	or	r2,r19,r16
 8013a78:	00006006 	br	8013bfc <__udivdi3+0x2d4>
 8013a7c:	29c05d36 	bltu	r5,r7,8013bf4 <__udivdi3+0x2cc>
 8013a80:	00bfffd4 	movui	r2,65535
 8013a84:	11c0692e 	bgeu	r2,r7,8013c2c <__udivdi3+0x304>
 8013a88:	00804034 	movhi	r2,256
 8013a8c:	10bfffc4 	addi	r2,r2,-1
 8013a90:	11c10e2e 	bgeu	r2,r7,8013ecc <__udivdi3+0x5a4>
 8013a94:	01400604 	movi	r5,24
 8013a98:	2811883a 	mov	r8,r5
 8013a9c:	394ad83a 	srl	r5,r7,r5
 8013aa0:	008200b4 	movhi	r2,2050
 8013aa4:	108cb004 	addi	r2,r2,12992
 8013aa8:	114b883a 	add	r5,r2,r5
 8013aac:	29400003 	ldbu	r5,0(r5)
 8013ab0:	00c00804 	movi	r3,32
 8013ab4:	2a0b883a 	add	r5,r5,r8
 8013ab8:	196fc83a 	sub	r23,r3,r5
 8013abc:	b8006b1e 	bne	r23,zero,8013c6c <__udivdi3+0x344>
 8013ac0:	3c011436 	bltu	r7,r16,8013f14 <__udivdi3+0x5ec>
 8013ac4:	9985403a 	cmpgeu	r2,r19,r6
 8013ac8:	0007883a 	mov	r3,zero
 8013acc:	00004b06 	br	8013bfc <__udivdi3+0x2d4>
 8013ad0:	3000041e 	bne	r6,zero,8013ae4 <__udivdi3+0x1bc>
 8013ad4:	01000044 	movi	r4,1
 8013ad8:	000b883a 	mov	r5,zero
 8013adc:	8004c000 	call	8004c00 <__udivsi3>
 8013ae0:	1025883a 	mov	r18,r2
 8013ae4:	00bfffd4 	movui	r2,65535
 8013ae8:	14805b2e 	bgeu	r2,r18,8013c58 <__udivdi3+0x330>
 8013aec:	00804034 	movhi	r2,256
 8013af0:	10bfffc4 	addi	r2,r2,-1
 8013af4:	1480fe2e 	bgeu	r2,r18,8013ef0 <__udivdi3+0x5c8>
 8013af8:	00800604 	movi	r2,24
 8013afc:	1007883a 	mov	r3,r2
 8013b00:	9084d83a 	srl	r2,r18,r2
 8013b04:	010200b4 	movhi	r4,2050
 8013b08:	210cb004 	addi	r4,r4,12992
 8013b0c:	2085883a 	add	r2,r4,r2
 8013b10:	11800003 	ldbu	r6,0(r2)
 8013b14:	01c00804 	movi	r7,32
 8013b18:	30c7883a 	add	r3,r6,r3
 8013b1c:	38cfc83a 	sub	r7,r7,r3
 8013b20:	3800a71e 	bne	r7,zero,8013dc0 <__udivdi3+0x498>
 8013b24:	9028d43a 	srli	r20,r18,16
 8013b28:	84a1c83a 	sub	r16,r16,r18
 8013b2c:	957fffcc 	andi	r21,r18,65535
 8013b30:	00c00044 	movi	r3,1
 8013b34:	8009883a 	mov	r4,r16
 8013b38:	a00b883a 	mov	r5,r20
 8013b3c:	d8c00015 	stw	r3,0(sp)
 8013b40:	8004c080 	call	8004c08 <__umodsi3>
 8013b44:	8009883a 	mov	r4,r16
 8013b48:	a00b883a 	mov	r5,r20
 8013b4c:	102d883a 	mov	r22,r2
 8013b50:	8004c000 	call	8004c00 <__udivsi3>
 8013b54:	1009883a 	mov	r4,r2
 8013b58:	a80b883a 	mov	r5,r21
 8013b5c:	1021883a 	mov	r16,r2
 8013b60:	8004c100 	call	8004c10 <__mulsi3>
 8013b64:	b02c943a 	slli	r22,r22,16
 8013b68:	880ed43a 	srli	r7,r17,16
 8013b6c:	d8c00017 	ldw	r3,0(sp)
 8013b70:	b1ccb03a 	or	r6,r22,r7
 8013b74:	3080052e 	bgeu	r6,r2,8013b8c <__udivdi3+0x264>
 8013b78:	348d883a 	add	r6,r6,r18
 8013b7c:	813fffc4 	addi	r4,r16,-1
 8013b80:	34800136 	bltu	r6,r18,8013b88 <__udivdi3+0x260>
 8013b84:	3080f236 	bltu	r6,r2,8013f50 <__udivdi3+0x628>
 8013b88:	2021883a 	mov	r16,r4
 8013b8c:	30a7c83a 	sub	r19,r6,r2
 8013b90:	9809883a 	mov	r4,r19
 8013b94:	a00b883a 	mov	r5,r20
 8013b98:	d8c00015 	stw	r3,0(sp)
 8013b9c:	8004c080 	call	8004c08 <__umodsi3>
 8013ba0:	102d883a 	mov	r22,r2
 8013ba4:	9809883a 	mov	r4,r19
 8013ba8:	a00b883a 	mov	r5,r20
 8013bac:	b02c943a 	slli	r22,r22,16
 8013bb0:	8004c000 	call	8004c00 <__udivsi3>
 8013bb4:	1009883a 	mov	r4,r2
 8013bb8:	a80b883a 	mov	r5,r21
 8013bbc:	8c7fffcc 	andi	r17,r17,65535
 8013bc0:	1027883a 	mov	r19,r2
 8013bc4:	b462b03a 	or	r17,r22,r17
 8013bc8:	8004c100 	call	8004c10 <__mulsi3>
 8013bcc:	d8c00017 	ldw	r3,0(sp)
 8013bd0:	8880052e 	bgeu	r17,r2,8013be8 <__udivdi3+0x2c0>
 8013bd4:	8ca3883a 	add	r17,r17,r18
 8013bd8:	993fffc4 	addi	r4,r19,-1
 8013bdc:	8c80af36 	bltu	r17,r18,8013e9c <__udivdi3+0x574>
 8013be0:	8880ae2e 	bgeu	r17,r2,8013e9c <__udivdi3+0x574>
 8013be4:	9cffff84 	addi	r19,r19,-2
 8013be8:	8020943a 	slli	r16,r16,16
 8013bec:	9c04b03a 	or	r2,r19,r16
 8013bf0:	00000206 	br	8013bfc <__udivdi3+0x2d4>
 8013bf4:	0007883a 	mov	r3,zero
 8013bf8:	0005883a 	mov	r2,zero
 8013bfc:	dfc00a17 	ldw	ra,40(sp)
 8013c00:	df000917 	ldw	fp,36(sp)
 8013c04:	ddc00817 	ldw	r23,32(sp)
 8013c08:	dd800717 	ldw	r22,28(sp)
 8013c0c:	dd400617 	ldw	r21,24(sp)
 8013c10:	dd000517 	ldw	r20,20(sp)
 8013c14:	dcc00417 	ldw	r19,16(sp)
 8013c18:	dc800317 	ldw	r18,12(sp)
 8013c1c:	dc400217 	ldw	r17,8(sp)
 8013c20:	dc000117 	ldw	r16,4(sp)
 8013c24:	dec00b04 	addi	sp,sp,44
 8013c28:	f800283a 	ret
 8013c2c:	00803fc4 	movi	r2,255
 8013c30:	11c0a92e 	bgeu	r2,r7,8013ed8 <__udivdi3+0x5b0>
 8013c34:	01400204 	movi	r5,8
 8013c38:	2811883a 	mov	r8,r5
 8013c3c:	003f9706 	br	8013a9c <__alt_data_end+0xfc013a9c>
 8013c40:	00804034 	movhi	r2,256
 8013c44:	10bfffc4 	addi	r2,r2,-1
 8013c48:	1180a62e 	bgeu	r2,r6,8013ee4 <__udivdi3+0x5bc>
 8013c4c:	00800604 	movi	r2,24
 8013c50:	1007883a 	mov	r3,r2
 8013c54:	003f4c06 	br	8013988 <__alt_data_end+0xfc013988>
 8013c58:	00803fc4 	movi	r2,255
 8013c5c:	1480a72e 	bgeu	r2,r18,8013efc <__udivdi3+0x5d4>
 8013c60:	00800204 	movi	r2,8
 8013c64:	1007883a 	mov	r3,r2
 8013c68:	003fa506 	br	8013b00 <__alt_data_end+0xfc013b00>
 8013c6c:	3178d83a 	srl	fp,r6,r5
 8013c70:	3dce983a 	sll	r7,r7,r23
 8013c74:	8168d83a 	srl	r20,r16,r5
 8013c78:	9950d83a 	srl	r8,r19,r5
 8013c7c:	3f38b03a 	or	fp,r7,fp
 8013c80:	e024d43a 	srli	r18,fp,16
 8013c84:	85e0983a 	sll	r16,r16,r23
 8013c88:	a009883a 	mov	r4,r20
 8013c8c:	900b883a 	mov	r5,r18
 8013c90:	8220b03a 	or	r16,r16,r8
 8013c94:	35ea983a 	sll	r21,r6,r23
 8013c98:	8004c080 	call	8004c08 <__umodsi3>
 8013c9c:	a009883a 	mov	r4,r20
 8013ca0:	900b883a 	mov	r5,r18
 8013ca4:	1023883a 	mov	r17,r2
 8013ca8:	e5bfffcc 	andi	r22,fp,65535
 8013cac:	8004c000 	call	8004c00 <__udivsi3>
 8013cb0:	1009883a 	mov	r4,r2
 8013cb4:	b00b883a 	mov	r5,r22
 8013cb8:	1029883a 	mov	r20,r2
 8013cbc:	8004c100 	call	8004c10 <__mulsi3>
 8013cc0:	8806943a 	slli	r3,r17,16
 8013cc4:	8014d43a 	srli	r10,r16,16
 8013cc8:	1a92b03a 	or	r9,r3,r10
 8013ccc:	4880042e 	bgeu	r9,r2,8013ce0 <__udivdi3+0x3b8>
 8013cd0:	4f13883a 	add	r9,r9,fp
 8013cd4:	a0ffffc4 	addi	r3,r20,-1
 8013cd8:	4f00952e 	bgeu	r9,fp,8013f30 <__udivdi3+0x608>
 8013cdc:	1829883a 	mov	r20,r3
 8013ce0:	48a3c83a 	sub	r17,r9,r2
 8013ce4:	8809883a 	mov	r4,r17
 8013ce8:	900b883a 	mov	r5,r18
 8013cec:	8004c080 	call	8004c08 <__umodsi3>
 8013cf0:	8809883a 	mov	r4,r17
 8013cf4:	900b883a 	mov	r5,r18
 8013cf8:	d8800015 	stw	r2,0(sp)
 8013cfc:	8004c000 	call	8004c00 <__udivsi3>
 8013d00:	1009883a 	mov	r4,r2
 8013d04:	b00b883a 	mov	r5,r22
 8013d08:	1023883a 	mov	r17,r2
 8013d0c:	8004c100 	call	8004c10 <__mulsi3>
 8013d10:	d8c00017 	ldw	r3,0(sp)
 8013d14:	823fffcc 	andi	r8,r16,65535
 8013d18:	1806943a 	slli	r3,r3,16
 8013d1c:	1a20b03a 	or	r16,r3,r8
 8013d20:	8080042e 	bgeu	r16,r2,8013d34 <__udivdi3+0x40c>
 8013d24:	8721883a 	add	r16,r16,fp
 8013d28:	88ffffc4 	addi	r3,r17,-1
 8013d2c:	87007c2e 	bgeu	r16,fp,8013f20 <__udivdi3+0x5f8>
 8013d30:	1823883a 	mov	r17,r3
 8013d34:	a028943a 	slli	r20,r20,16
 8013d38:	acbfffcc 	andi	r18,r21,65535
 8013d3c:	900b883a 	mov	r5,r18
 8013d40:	8d28b03a 	or	r20,r17,r20
 8013d44:	a022d43a 	srli	r17,r20,16
 8013d48:	a5bfffcc 	andi	r22,r20,65535
 8013d4c:	b009883a 	mov	r4,r22
 8013d50:	a82ad43a 	srli	r21,r21,16
 8013d54:	80a1c83a 	sub	r16,r16,r2
 8013d58:	8004c100 	call	8004c10 <__mulsi3>
 8013d5c:	8809883a 	mov	r4,r17
 8013d60:	900b883a 	mov	r5,r18
 8013d64:	1039883a 	mov	fp,r2
 8013d68:	8004c100 	call	8004c10 <__mulsi3>
 8013d6c:	8809883a 	mov	r4,r17
 8013d70:	a80b883a 	mov	r5,r21
 8013d74:	1025883a 	mov	r18,r2
 8013d78:	8004c100 	call	8004c10 <__mulsi3>
 8013d7c:	b009883a 	mov	r4,r22
 8013d80:	a80b883a 	mov	r5,r21
 8013d84:	1023883a 	mov	r17,r2
 8013d88:	8004c100 	call	8004c10 <__mulsi3>
 8013d8c:	e006d43a 	srli	r3,fp,16
 8013d90:	9085883a 	add	r2,r18,r2
 8013d94:	10c7883a 	add	r3,r2,r3
 8013d98:	1c80022e 	bgeu	r3,r18,8013da4 <__udivdi3+0x47c>
 8013d9c:	00800074 	movhi	r2,1
 8013da0:	88a3883a 	add	r17,r17,r2
 8013da4:	1808d43a 	srli	r4,r3,16
 8013da8:	8909883a 	add	r4,r17,r4
 8013dac:	81004436 	bltu	r16,r4,8013ec0 <__udivdi3+0x598>
 8013db0:	81003e26 	beq	r16,r4,8013eac <__udivdi3+0x584>
 8013db4:	a005883a 	mov	r2,r20
 8013db8:	0007883a 	mov	r3,zero
 8013dbc:	003f8f06 	br	8013bfc <__alt_data_end+0xfc013bfc>
 8013dc0:	91e4983a 	sll	r18,r18,r7
 8013dc4:	80eed83a 	srl	r23,r16,r3
 8013dc8:	81cc983a 	sll	r6,r16,r7
 8013dcc:	9028d43a 	srli	r20,r18,16
 8013dd0:	98c6d83a 	srl	r3,r19,r3
 8013dd4:	b809883a 	mov	r4,r23
 8013dd8:	a00b883a 	mov	r5,r20
 8013ddc:	30ecb03a 	or	r22,r6,r3
 8013de0:	99e2983a 	sll	r17,r19,r7
 8013de4:	8004c080 	call	8004c08 <__umodsi3>
 8013de8:	b809883a 	mov	r4,r23
 8013dec:	a00b883a 	mov	r5,r20
 8013df0:	1021883a 	mov	r16,r2
 8013df4:	957fffcc 	andi	r21,r18,65535
 8013df8:	8004c000 	call	8004c00 <__udivsi3>
 8013dfc:	a80b883a 	mov	r5,r21
 8013e00:	1009883a 	mov	r4,r2
 8013e04:	102f883a 	mov	r23,r2
 8013e08:	8004c100 	call	8004c10 <__mulsi3>
 8013e0c:	8020943a 	slli	r16,r16,16
 8013e10:	b00ad43a 	srli	r5,r22,16
 8013e14:	814cb03a 	or	r6,r16,r5
 8013e18:	3080062e 	bgeu	r6,r2,8013e34 <__udivdi3+0x50c>
 8013e1c:	348d883a 	add	r6,r6,r18
 8013e20:	b8ffffc4 	addi	r3,r23,-1
 8013e24:	34804836 	bltu	r6,r18,8013f48 <__udivdi3+0x620>
 8013e28:	3080472e 	bgeu	r6,r2,8013f48 <__udivdi3+0x620>
 8013e2c:	bdffff84 	addi	r23,r23,-2
 8013e30:	348d883a 	add	r6,r6,r18
 8013e34:	30a7c83a 	sub	r19,r6,r2
 8013e38:	9809883a 	mov	r4,r19
 8013e3c:	a00b883a 	mov	r5,r20
 8013e40:	8004c080 	call	8004c08 <__umodsi3>
 8013e44:	9809883a 	mov	r4,r19
 8013e48:	a00b883a 	mov	r5,r20
 8013e4c:	1039883a 	mov	fp,r2
 8013e50:	8004c000 	call	8004c00 <__udivsi3>
 8013e54:	1009883a 	mov	r4,r2
 8013e58:	a80b883a 	mov	r5,r21
 8013e5c:	e038943a 	slli	fp,fp,16
 8013e60:	1027883a 	mov	r19,r2
 8013e64:	8004c100 	call	8004c10 <__mulsi3>
 8013e68:	b1bfffcc 	andi	r6,r22,65535
 8013e6c:	e18cb03a 	or	r6,fp,r6
 8013e70:	3080062e 	bgeu	r6,r2,8013e8c <__udivdi3+0x564>
 8013e74:	348d883a 	add	r6,r6,r18
 8013e78:	98ffffc4 	addi	r3,r19,-1
 8013e7c:	34803036 	bltu	r6,r18,8013f40 <__udivdi3+0x618>
 8013e80:	30802f2e 	bgeu	r6,r2,8013f40 <__udivdi3+0x618>
 8013e84:	9cffff84 	addi	r19,r19,-2
 8013e88:	348d883a 	add	r6,r6,r18
 8013e8c:	b82e943a 	slli	r23,r23,16
 8013e90:	30a1c83a 	sub	r16,r6,r2
 8013e94:	9dc6b03a 	or	r3,r19,r23
 8013e98:	003f2606 	br	8013b34 <__alt_data_end+0xfc013b34>
 8013e9c:	2027883a 	mov	r19,r4
 8013ea0:	003f5106 	br	8013be8 <__alt_data_end+0xfc013be8>
 8013ea4:	1827883a 	mov	r19,r3
 8013ea8:	003ef006 	br	8013a6c <__alt_data_end+0xfc013a6c>
 8013eac:	1808943a 	slli	r4,r3,16
 8013eb0:	9dc6983a 	sll	r3,r19,r23
 8013eb4:	e73fffcc 	andi	fp,fp,65535
 8013eb8:	2709883a 	add	r4,r4,fp
 8013ebc:	193fbd2e 	bgeu	r3,r4,8013db4 <__alt_data_end+0xfc013db4>
 8013ec0:	a0bfffc4 	addi	r2,r20,-1
 8013ec4:	0007883a 	mov	r3,zero
 8013ec8:	003f4c06 	br	8013bfc <__alt_data_end+0xfc013bfc>
 8013ecc:	01400404 	movi	r5,16
 8013ed0:	2811883a 	mov	r8,r5
 8013ed4:	003ef106 	br	8013a9c <__alt_data_end+0xfc013a9c>
 8013ed8:	000b883a 	mov	r5,zero
 8013edc:	0011883a 	mov	r8,zero
 8013ee0:	003eee06 	br	8013a9c <__alt_data_end+0xfc013a9c>
 8013ee4:	00800404 	movi	r2,16
 8013ee8:	1007883a 	mov	r3,r2
 8013eec:	003ea606 	br	8013988 <__alt_data_end+0xfc013988>
 8013ef0:	00800404 	movi	r2,16
 8013ef4:	1007883a 	mov	r3,r2
 8013ef8:	003f0106 	br	8013b00 <__alt_data_end+0xfc013b00>
 8013efc:	0005883a 	mov	r2,zero
 8013f00:	0007883a 	mov	r3,zero
 8013f04:	003efe06 	br	8013b00 <__alt_data_end+0xfc013b00>
 8013f08:	0005883a 	mov	r2,zero
 8013f0c:	0007883a 	mov	r3,zero
 8013f10:	003e9d06 	br	8013988 <__alt_data_end+0xfc013988>
 8013f14:	0007883a 	mov	r3,zero
 8013f18:	00800044 	movi	r2,1
 8013f1c:	003f3706 	br	8013bfc <__alt_data_end+0xfc013bfc>
 8013f20:	80bf832e 	bgeu	r16,r2,8013d30 <__alt_data_end+0xfc013d30>
 8013f24:	8c7fff84 	addi	r17,r17,-2
 8013f28:	8721883a 	add	r16,r16,fp
 8013f2c:	003f8106 	br	8013d34 <__alt_data_end+0xfc013d34>
 8013f30:	48bf6a2e 	bgeu	r9,r2,8013cdc <__alt_data_end+0xfc013cdc>
 8013f34:	a53fff84 	addi	r20,r20,-2
 8013f38:	4f13883a 	add	r9,r9,fp
 8013f3c:	003f6806 	br	8013ce0 <__alt_data_end+0xfc013ce0>
 8013f40:	1827883a 	mov	r19,r3
 8013f44:	003fd106 	br	8013e8c <__alt_data_end+0xfc013e8c>
 8013f48:	182f883a 	mov	r23,r3
 8013f4c:	003fb906 	br	8013e34 <__alt_data_end+0xfc013e34>
 8013f50:	843fff84 	addi	r16,r16,-2
 8013f54:	348d883a 	add	r6,r6,r18
 8013f58:	003f0c06 	br	8013b8c <__alt_data_end+0xfc013b8c>
 8013f5c:	843fff84 	addi	r16,r16,-2
 8013f60:	1c87883a 	add	r3,r3,r18
 8013f64:	003eac06 	br	8013a18 <__alt_data_end+0xfc013a18>

08013f68 <__umoddi3>:
 8013f68:	defff404 	addi	sp,sp,-48
 8013f6c:	dd800815 	stw	r22,32(sp)
 8013f70:	dc400315 	stw	r17,12(sp)
 8013f74:	dc000215 	stw	r16,8(sp)
 8013f78:	dfc00b15 	stw	ra,44(sp)
 8013f7c:	df000a15 	stw	fp,40(sp)
 8013f80:	ddc00915 	stw	r23,36(sp)
 8013f84:	dd400715 	stw	r21,28(sp)
 8013f88:	dd000615 	stw	r20,24(sp)
 8013f8c:	dcc00515 	stw	r19,20(sp)
 8013f90:	dc800415 	stw	r18,16(sp)
 8013f94:	2021883a 	mov	r16,r4
 8013f98:	2823883a 	mov	r17,r5
 8013f9c:	282d883a 	mov	r22,r5
 8013fa0:	38003c1e 	bne	r7,zero,8014094 <__umoddi3+0x12c>
 8013fa4:	3027883a 	mov	r19,r6
 8013fa8:	2029883a 	mov	r20,r4
 8013fac:	2980522e 	bgeu	r5,r6,80140f8 <__umoddi3+0x190>
 8013fb0:	00bfffd4 	movui	r2,65535
 8013fb4:	1180a436 	bltu	r2,r6,8014248 <__umoddi3+0x2e0>
 8013fb8:	00803fc4 	movi	r2,255
 8013fbc:	11815e2e 	bgeu	r2,r6,8014538 <__umoddi3+0x5d0>
 8013fc0:	01400204 	movi	r5,8
 8013fc4:	2805883a 	mov	r2,r5
 8013fc8:	314ad83a 	srl	r5,r6,r5
 8013fcc:	00c200b4 	movhi	r3,2050
 8013fd0:	18ccb004 	addi	r3,r3,12992
 8013fd4:	194b883a 	add	r5,r3,r5
 8013fd8:	29000003 	ldbu	r4,0(r5)
 8013fdc:	2089883a 	add	r4,r4,r2
 8013fe0:	00800804 	movi	r2,32
 8013fe4:	1105c83a 	sub	r2,r2,r4
 8013fe8:	10010c26 	beq	r2,zero,801441c <__umoddi3+0x4b4>
 8013fec:	88a2983a 	sll	r17,r17,r2
 8013ff0:	8108d83a 	srl	r4,r16,r4
 8013ff4:	30a6983a 	sll	r19,r6,r2
 8013ff8:	80a8983a 	sll	r20,r16,r2
 8013ffc:	1025883a 	mov	r18,r2
 8014000:	892cb03a 	or	r22,r17,r4
 8014004:	9822d43a 	srli	r17,r19,16
 8014008:	b009883a 	mov	r4,r22
 801400c:	9d7fffcc 	andi	r21,r19,65535
 8014010:	880b883a 	mov	r5,r17
 8014014:	8004c080 	call	8004c08 <__umodsi3>
 8014018:	b009883a 	mov	r4,r22
 801401c:	880b883a 	mov	r5,r17
 8014020:	102f883a 	mov	r23,r2
 8014024:	8004c000 	call	8004c00 <__udivsi3>
 8014028:	1009883a 	mov	r4,r2
 801402c:	a80b883a 	mov	r5,r21
 8014030:	8004c100 	call	8004c10 <__mulsi3>
 8014034:	b82e943a 	slli	r23,r23,16
 8014038:	a008d43a 	srli	r4,r20,16
 801403c:	b906b03a 	or	r3,r23,r4
 8014040:	1880042e 	bgeu	r3,r2,8014054 <__umoddi3+0xec>
 8014044:	1cc7883a 	add	r3,r3,r19
 8014048:	1cc00236 	bltu	r3,r19,8014054 <__umoddi3+0xec>
 801404c:	1880012e 	bgeu	r3,r2,8014054 <__umoddi3+0xec>
 8014050:	1cc7883a 	add	r3,r3,r19
 8014054:	18a1c83a 	sub	r16,r3,r2
 8014058:	8009883a 	mov	r4,r16
 801405c:	880b883a 	mov	r5,r17
 8014060:	8004c080 	call	8004c08 <__umodsi3>
 8014064:	8009883a 	mov	r4,r16
 8014068:	880b883a 	mov	r5,r17
 801406c:	102d883a 	mov	r22,r2
 8014070:	8004c000 	call	8004c00 <__udivsi3>
 8014074:	1009883a 	mov	r4,r2
 8014078:	a80b883a 	mov	r5,r21
 801407c:	b02c943a 	slli	r22,r22,16
 8014080:	8004c100 	call	8004c10 <__mulsi3>
 8014084:	a13fffcc 	andi	r4,r20,65535
 8014088:	b106b03a 	or	r3,r22,r4
 801408c:	1880572e 	bgeu	r3,r2,80141ec <__umoddi3+0x284>
 8014090:	00005206 	br	80141dc <__umoddi3+0x274>
 8014094:	29c05936 	bltu	r5,r7,80141fc <__umoddi3+0x294>
 8014098:	00bfffd4 	movui	r2,65535
 801409c:	11c0652e 	bgeu	r2,r7,8014234 <__umoddi3+0x2cc>
 80140a0:	00804034 	movhi	r2,256
 80140a4:	10bfffc4 	addi	r2,r2,-1
 80140a8:	11c1172e 	bgeu	r2,r7,8014508 <__umoddi3+0x5a0>
 80140ac:	01400604 	movi	r5,24
 80140b0:	282b883a 	mov	r21,r5
 80140b4:	394ad83a 	srl	r5,r7,r5
 80140b8:	00c200b4 	movhi	r3,2050
 80140bc:	18ccb004 	addi	r3,r3,12992
 80140c0:	194b883a 	add	r5,r3,r5
 80140c4:	28800003 	ldbu	r2,0(r5)
 80140c8:	00c00804 	movi	r3,32
 80140cc:	156b883a 	add	r21,r2,r21
 80140d0:	1d69c83a 	sub	r20,r3,r21
 80140d4:	a000671e 	bne	r20,zero,8014274 <__umoddi3+0x30c>
 80140d8:	3c400136 	bltu	r7,r17,80140e0 <__umoddi3+0x178>
 80140dc:	81812336 	bltu	r16,r6,801456c <__umoddi3+0x604>
 80140e0:	8185c83a 	sub	r2,r16,r6
 80140e4:	89e3c83a 	sub	r17,r17,r7
 80140e8:	8087803a 	cmpltu	r3,r16,r2
 80140ec:	88edc83a 	sub	r22,r17,r3
 80140f0:	b007883a 	mov	r3,r22
 80140f4:	00004306 	br	8014204 <__umoddi3+0x29c>
 80140f8:	3000041e 	bne	r6,zero,801410c <__umoddi3+0x1a4>
 80140fc:	01000044 	movi	r4,1
 8014100:	000b883a 	mov	r5,zero
 8014104:	8004c000 	call	8004c00 <__udivsi3>
 8014108:	1027883a 	mov	r19,r2
 801410c:	00bfffd4 	movui	r2,65535
 8014110:	14c0532e 	bgeu	r2,r19,8014260 <__umoddi3+0x2f8>
 8014114:	00804034 	movhi	r2,256
 8014118:	10bfffc4 	addi	r2,r2,-1
 801411c:	14c1032e 	bgeu	r2,r19,801452c <__umoddi3+0x5c4>
 8014120:	00800604 	movi	r2,24
 8014124:	1007883a 	mov	r3,r2
 8014128:	9884d83a 	srl	r2,r19,r2
 801412c:	010200b4 	movhi	r4,2050
 8014130:	210cb004 	addi	r4,r4,12992
 8014134:	2085883a 	add	r2,r4,r2
 8014138:	11000003 	ldbu	r4,0(r2)
 801413c:	00800804 	movi	r2,32
 8014140:	20c7883a 	add	r3,r4,r3
 8014144:	10c5c83a 	sub	r2,r2,r3
 8014148:	1000b61e 	bne	r2,zero,8014424 <__umoddi3+0x4bc>
 801414c:	982ad43a 	srli	r21,r19,16
 8014150:	8ce3c83a 	sub	r17,r17,r19
 8014154:	9dbfffcc 	andi	r22,r19,65535
 8014158:	0025883a 	mov	r18,zero
 801415c:	8809883a 	mov	r4,r17
 8014160:	a80b883a 	mov	r5,r21
 8014164:	8004c080 	call	8004c08 <__umodsi3>
 8014168:	8809883a 	mov	r4,r17
 801416c:	a80b883a 	mov	r5,r21
 8014170:	102f883a 	mov	r23,r2
 8014174:	8004c000 	call	8004c00 <__udivsi3>
 8014178:	1009883a 	mov	r4,r2
 801417c:	b00b883a 	mov	r5,r22
 8014180:	8004c100 	call	8004c10 <__mulsi3>
 8014184:	b82e943a 	slli	r23,r23,16
 8014188:	a008d43a 	srli	r4,r20,16
 801418c:	b906b03a 	or	r3,r23,r4
 8014190:	1880032e 	bgeu	r3,r2,80141a0 <__umoddi3+0x238>
 8014194:	1cc7883a 	add	r3,r3,r19
 8014198:	1cc00136 	bltu	r3,r19,80141a0 <__umoddi3+0x238>
 801419c:	1880f136 	bltu	r3,r2,8014564 <__umoddi3+0x5fc>
 80141a0:	18a1c83a 	sub	r16,r3,r2
 80141a4:	8009883a 	mov	r4,r16
 80141a8:	a80b883a 	mov	r5,r21
 80141ac:	8004c080 	call	8004c08 <__umodsi3>
 80141b0:	8009883a 	mov	r4,r16
 80141b4:	a80b883a 	mov	r5,r21
 80141b8:	1023883a 	mov	r17,r2
 80141bc:	8004c000 	call	8004c00 <__udivsi3>
 80141c0:	1009883a 	mov	r4,r2
 80141c4:	b00b883a 	mov	r5,r22
 80141c8:	8822943a 	slli	r17,r17,16
 80141cc:	8004c100 	call	8004c10 <__mulsi3>
 80141d0:	a13fffcc 	andi	r4,r20,65535
 80141d4:	8906b03a 	or	r3,r17,r4
 80141d8:	1880042e 	bgeu	r3,r2,80141ec <__umoddi3+0x284>
 80141dc:	1cc7883a 	add	r3,r3,r19
 80141e0:	1cc00236 	bltu	r3,r19,80141ec <__umoddi3+0x284>
 80141e4:	1880012e 	bgeu	r3,r2,80141ec <__umoddi3+0x284>
 80141e8:	1cc7883a 	add	r3,r3,r19
 80141ec:	1887c83a 	sub	r3,r3,r2
 80141f0:	1c84d83a 	srl	r2,r3,r18
 80141f4:	0007883a 	mov	r3,zero
 80141f8:	00000206 	br	8014204 <__umoddi3+0x29c>
 80141fc:	2005883a 	mov	r2,r4
 8014200:	2807883a 	mov	r3,r5
 8014204:	dfc00b17 	ldw	ra,44(sp)
 8014208:	df000a17 	ldw	fp,40(sp)
 801420c:	ddc00917 	ldw	r23,36(sp)
 8014210:	dd800817 	ldw	r22,32(sp)
 8014214:	dd400717 	ldw	r21,28(sp)
 8014218:	dd000617 	ldw	r20,24(sp)
 801421c:	dcc00517 	ldw	r19,20(sp)
 8014220:	dc800417 	ldw	r18,16(sp)
 8014224:	dc400317 	ldw	r17,12(sp)
 8014228:	dc000217 	ldw	r16,8(sp)
 801422c:	dec00c04 	addi	sp,sp,48
 8014230:	f800283a 	ret
 8014234:	00803fc4 	movi	r2,255
 8014238:	11c0b02e 	bgeu	r2,r7,80144fc <__umoddi3+0x594>
 801423c:	01400204 	movi	r5,8
 8014240:	282b883a 	mov	r21,r5
 8014244:	003f9b06 	br	80140b4 <__alt_data_end+0xfc0140b4>
 8014248:	00804034 	movhi	r2,256
 801424c:	10bfffc4 	addi	r2,r2,-1
 8014250:	1180b02e 	bgeu	r2,r6,8014514 <__umoddi3+0x5ac>
 8014254:	01400604 	movi	r5,24
 8014258:	2805883a 	mov	r2,r5
 801425c:	003f5a06 	br	8013fc8 <__alt_data_end+0xfc013fc8>
 8014260:	00803fc4 	movi	r2,255
 8014264:	14c0ae2e 	bgeu	r2,r19,8014520 <__umoddi3+0x5b8>
 8014268:	00800204 	movi	r2,8
 801426c:	1007883a 	mov	r3,r2
 8014270:	003fad06 	br	8014128 <__alt_data_end+0xfc014128>
 8014274:	3d0a983a 	sll	r5,r7,r20
 8014278:	356cd83a 	srl	r22,r6,r21
 801427c:	8d78d83a 	srl	fp,r17,r21
 8014280:	8d10983a 	sll	r8,r17,r20
 8014284:	2dacb03a 	or	r22,r5,r22
 8014288:	b02ed43a 	srli	r23,r22,16
 801428c:	8564d83a 	srl	r18,r16,r21
 8014290:	e009883a 	mov	r4,fp
 8014294:	b80b883a 	mov	r5,r23
 8014298:	44a4b03a 	or	r18,r8,r18
 801429c:	3526983a 	sll	r19,r6,r20
 80142a0:	8004c080 	call	8004c08 <__umodsi3>
 80142a4:	e009883a 	mov	r4,fp
 80142a8:	b80b883a 	mov	r5,r23
 80142ac:	b47fffcc 	andi	r17,r22,65535
 80142b0:	d8800015 	stw	r2,0(sp)
 80142b4:	8004c000 	call	8004c00 <__udivsi3>
 80142b8:	1009883a 	mov	r4,r2
 80142bc:	880b883a 	mov	r5,r17
 80142c0:	1039883a 	mov	fp,r2
 80142c4:	8004c100 	call	8004c10 <__mulsi3>
 80142c8:	d9800017 	ldw	r6,0(sp)
 80142cc:	9008d43a 	srli	r4,r18,16
 80142d0:	8520983a 	sll	r16,r16,r20
 80142d4:	300c943a 	slli	r6,r6,16
 80142d8:	3106b03a 	or	r3,r6,r4
 80142dc:	1880042e 	bgeu	r3,r2,80142f0 <__umoddi3+0x388>
 80142e0:	1d87883a 	add	r3,r3,r22
 80142e4:	e13fffc4 	addi	r4,fp,-1
 80142e8:	1d809a2e 	bgeu	r3,r22,8014554 <__umoddi3+0x5ec>
 80142ec:	2039883a 	mov	fp,r4
 80142f0:	1887c83a 	sub	r3,r3,r2
 80142f4:	1809883a 	mov	r4,r3
 80142f8:	b80b883a 	mov	r5,r23
 80142fc:	d8c00115 	stw	r3,4(sp)
 8014300:	8004c080 	call	8004c08 <__umodsi3>
 8014304:	d8c00117 	ldw	r3,4(sp)
 8014308:	b80b883a 	mov	r5,r23
 801430c:	d8800015 	stw	r2,0(sp)
 8014310:	1809883a 	mov	r4,r3
 8014314:	8004c000 	call	8004c00 <__udivsi3>
 8014318:	880b883a 	mov	r5,r17
 801431c:	1009883a 	mov	r4,r2
 8014320:	102f883a 	mov	r23,r2
 8014324:	8004c100 	call	8004c10 <__mulsi3>
 8014328:	d9800017 	ldw	r6,0(sp)
 801432c:	947fffcc 	andi	r17,r18,65535
 8014330:	300c943a 	slli	r6,r6,16
 8014334:	3464b03a 	or	r18,r6,r17
 8014338:	9080042e 	bgeu	r18,r2,801434c <__umoddi3+0x3e4>
 801433c:	95a5883a 	add	r18,r18,r22
 8014340:	b8ffffc4 	addi	r3,r23,-1
 8014344:	95807f2e 	bgeu	r18,r22,8014544 <__umoddi3+0x5dc>
 8014348:	182f883a 	mov	r23,r3
 801434c:	e038943a 	slli	fp,fp,16
 8014350:	980cd43a 	srli	r6,r19,16
 8014354:	98ffffcc 	andi	r3,r19,65535
 8014358:	bf38b03a 	or	fp,r23,fp
 801435c:	e02ed43a 	srli	r23,fp,16
 8014360:	e73fffcc 	andi	fp,fp,65535
 8014364:	180b883a 	mov	r5,r3
 8014368:	e009883a 	mov	r4,fp
 801436c:	d9800015 	stw	r6,0(sp)
 8014370:	d8c00115 	stw	r3,4(sp)
 8014374:	90a5c83a 	sub	r18,r18,r2
 8014378:	8004c100 	call	8004c10 <__mulsi3>
 801437c:	d8c00117 	ldw	r3,4(sp)
 8014380:	b809883a 	mov	r4,r23
 8014384:	1023883a 	mov	r17,r2
 8014388:	180b883a 	mov	r5,r3
 801438c:	8004c100 	call	8004c10 <__mulsi3>
 8014390:	d9800017 	ldw	r6,0(sp)
 8014394:	b809883a 	mov	r4,r23
 8014398:	d8800115 	stw	r2,4(sp)
 801439c:	300b883a 	mov	r5,r6
 80143a0:	302f883a 	mov	r23,r6
 80143a4:	8004c100 	call	8004c10 <__mulsi3>
 80143a8:	e009883a 	mov	r4,fp
 80143ac:	b80b883a 	mov	r5,r23
 80143b0:	d8800015 	stw	r2,0(sp)
 80143b4:	8004c100 	call	8004c10 <__mulsi3>
 80143b8:	d8c00117 	ldw	r3,4(sp)
 80143bc:	880cd43a 	srli	r6,r17,16
 80143c0:	d9c00017 	ldw	r7,0(sp)
 80143c4:	1885883a 	add	r2,r3,r2
 80143c8:	118d883a 	add	r6,r2,r6
 80143cc:	30c0022e 	bgeu	r6,r3,80143d8 <__umoddi3+0x470>
 80143d0:	00800074 	movhi	r2,1
 80143d4:	388f883a 	add	r7,r7,r2
 80143d8:	3006d43a 	srli	r3,r6,16
 80143dc:	300c943a 	slli	r6,r6,16
 80143e0:	8c7fffcc 	andi	r17,r17,65535
 80143e4:	38c7883a 	add	r3,r7,r3
 80143e8:	3463883a 	add	r17,r6,r17
 80143ec:	90c03d36 	bltu	r18,r3,80144e4 <__umoddi3+0x57c>
 80143f0:	90c06026 	beq	r18,r3,8014574 <__umoddi3+0x60c>
 80143f4:	90c9c83a 	sub	r4,r18,r3
 80143f8:	880f883a 	mov	r7,r17
 80143fc:	81cfc83a 	sub	r7,r16,r7
 8014400:	81c7803a 	cmpltu	r3,r16,r7
 8014404:	20c7c83a 	sub	r3,r4,r3
 8014408:	1d44983a 	sll	r2,r3,r21
 801440c:	3d0ed83a 	srl	r7,r7,r20
 8014410:	1d06d83a 	srl	r3,r3,r20
 8014414:	11c4b03a 	or	r2,r2,r7
 8014418:	003f7a06 	br	8014204 <__alt_data_end+0xfc014204>
 801441c:	0025883a 	mov	r18,zero
 8014420:	003ef806 	br	8014004 <__alt_data_end+0xfc014004>
 8014424:	98a6983a 	sll	r19,r19,r2
 8014428:	88e8d83a 	srl	r20,r17,r3
 801442c:	80c6d83a 	srl	r3,r16,r3
 8014430:	982ad43a 	srli	r21,r19,16
 8014434:	88a2983a 	sll	r17,r17,r2
 8014438:	a009883a 	mov	r4,r20
 801443c:	a80b883a 	mov	r5,r21
 8014440:	88eeb03a 	or	r23,r17,r3
 8014444:	1025883a 	mov	r18,r2
 8014448:	8004c080 	call	8004c08 <__umodsi3>
 801444c:	a009883a 	mov	r4,r20
 8014450:	a80b883a 	mov	r5,r21
 8014454:	1023883a 	mov	r17,r2
 8014458:	9dbfffcc 	andi	r22,r19,65535
 801445c:	8004c000 	call	8004c00 <__udivsi3>
 8014460:	1009883a 	mov	r4,r2
 8014464:	b00b883a 	mov	r5,r22
 8014468:	8004c100 	call	8004c10 <__mulsi3>
 801446c:	8822943a 	slli	r17,r17,16
 8014470:	b808d43a 	srli	r4,r23,16
 8014474:	84a8983a 	sll	r20,r16,r18
 8014478:	8906b03a 	or	r3,r17,r4
 801447c:	1880042e 	bgeu	r3,r2,8014490 <__umoddi3+0x528>
 8014480:	1cc7883a 	add	r3,r3,r19
 8014484:	1cc00236 	bltu	r3,r19,8014490 <__umoddi3+0x528>
 8014488:	1880012e 	bgeu	r3,r2,8014490 <__umoddi3+0x528>
 801448c:	1cc7883a 	add	r3,r3,r19
 8014490:	18a1c83a 	sub	r16,r3,r2
 8014494:	8009883a 	mov	r4,r16
 8014498:	a80b883a 	mov	r5,r21
 801449c:	8004c080 	call	8004c08 <__umodsi3>
 80144a0:	8009883a 	mov	r4,r16
 80144a4:	a80b883a 	mov	r5,r21
 80144a8:	1039883a 	mov	fp,r2
 80144ac:	8004c000 	call	8004c00 <__udivsi3>
 80144b0:	1009883a 	mov	r4,r2
 80144b4:	b00b883a 	mov	r5,r22
 80144b8:	8004c100 	call	8004c10 <__mulsi3>
 80144bc:	e006943a 	slli	r3,fp,16
 80144c0:	b93fffcc 	andi	r4,r23,65535
 80144c4:	1906b03a 	or	r3,r3,r4
 80144c8:	1880042e 	bgeu	r3,r2,80144dc <__umoddi3+0x574>
 80144cc:	1cc7883a 	add	r3,r3,r19
 80144d0:	1cc00236 	bltu	r3,r19,80144dc <__umoddi3+0x574>
 80144d4:	1880012e 	bgeu	r3,r2,80144dc <__umoddi3+0x574>
 80144d8:	1cc7883a 	add	r3,r3,r19
 80144dc:	18a3c83a 	sub	r17,r3,r2
 80144e0:	003f1e06 	br	801415c <__alt_data_end+0xfc01415c>
 80144e4:	8ccfc83a 	sub	r7,r17,r19
 80144e8:	1d89c83a 	sub	r4,r3,r22
 80144ec:	89e3803a 	cmpltu	r17,r17,r7
 80144f0:	2463c83a 	sub	r17,r4,r17
 80144f4:	9449c83a 	sub	r4,r18,r17
 80144f8:	003fc006 	br	80143fc <__alt_data_end+0xfc0143fc>
 80144fc:	000b883a 	mov	r5,zero
 8014500:	002b883a 	mov	r21,zero
 8014504:	003eeb06 	br	80140b4 <__alt_data_end+0xfc0140b4>
 8014508:	01400404 	movi	r5,16
 801450c:	282b883a 	mov	r21,r5
 8014510:	003ee806 	br	80140b4 <__alt_data_end+0xfc0140b4>
 8014514:	01400404 	movi	r5,16
 8014518:	2805883a 	mov	r2,r5
 801451c:	003eaa06 	br	8013fc8 <__alt_data_end+0xfc013fc8>
 8014520:	0005883a 	mov	r2,zero
 8014524:	0007883a 	mov	r3,zero
 8014528:	003eff06 	br	8014128 <__alt_data_end+0xfc014128>
 801452c:	00800404 	movi	r2,16
 8014530:	1007883a 	mov	r3,r2
 8014534:	003efc06 	br	8014128 <__alt_data_end+0xfc014128>
 8014538:	000b883a 	mov	r5,zero
 801453c:	0005883a 	mov	r2,zero
 8014540:	003ea106 	br	8013fc8 <__alt_data_end+0xfc013fc8>
 8014544:	90bf802e 	bgeu	r18,r2,8014348 <__alt_data_end+0xfc014348>
 8014548:	bdffff84 	addi	r23,r23,-2
 801454c:	95a5883a 	add	r18,r18,r22
 8014550:	003f7e06 	br	801434c <__alt_data_end+0xfc01434c>
 8014554:	18bf652e 	bgeu	r3,r2,80142ec <__alt_data_end+0xfc0142ec>
 8014558:	e73fff84 	addi	fp,fp,-2
 801455c:	1d87883a 	add	r3,r3,r22
 8014560:	003f6306 	br	80142f0 <__alt_data_end+0xfc0142f0>
 8014564:	1cc7883a 	add	r3,r3,r19
 8014568:	003f0d06 	br	80141a0 <__alt_data_end+0xfc0141a0>
 801456c:	8005883a 	mov	r2,r16
 8014570:	003edf06 	br	80140f0 <__alt_data_end+0xfc0140f0>
 8014574:	847fdb36 	bltu	r16,r17,80144e4 <__alt_data_end+0xfc0144e4>
 8014578:	880f883a 	mov	r7,r17
 801457c:	0009883a 	mov	r4,zero
 8014580:	003f9e06 	br	80143fc <__alt_data_end+0xfc0143fc>

08014584 <__adddf3>:
 8014584:	02000434 	movhi	r8,16
 8014588:	423fffc4 	addi	r8,r8,-1
 801458c:	defffb04 	addi	sp,sp,-20
 8014590:	2a12703a 	and	r9,r5,r8
 8014594:	2806d7fa 	srli	r3,r5,31
 8014598:	3a10703a 	and	r8,r7,r8
 801459c:	3804d53a 	srli	r2,r7,20
 80145a0:	3014d77a 	srli	r10,r6,29
 80145a4:	dc000015 	stw	r16,0(sp)
 80145a8:	481290fa 	slli	r9,r9,3
 80145ac:	2820d53a 	srli	r16,r5,20
 80145b0:	401090fa 	slli	r8,r8,3
 80145b4:	200ad77a 	srli	r5,r4,29
 80145b8:	380ed7fa 	srli	r7,r7,31
 80145bc:	dc800215 	stw	r18,8(sp)
 80145c0:	dc400115 	stw	r17,4(sp)
 80145c4:	dfc00415 	stw	ra,16(sp)
 80145c8:	dcc00315 	stw	r19,12(sp)
 80145cc:	1c803fcc 	andi	r18,r3,255
 80145d0:	8401ffcc 	andi	r16,r16,2047
 80145d4:	494ab03a 	or	r5,r9,r5
 80145d8:	202290fa 	slli	r17,r4,3
 80145dc:	1081ffcc 	andi	r2,r2,2047
 80145e0:	4290b03a 	or	r8,r8,r10
 80145e4:	300c90fa 	slli	r6,r6,3
 80145e8:	91c07026 	beq	r18,r7,80147ac <__adddf3+0x228>
 80145ec:	8087c83a 	sub	r3,r16,r2
 80145f0:	00c0b30e 	bge	zero,r3,80148c0 <__adddf3+0x33c>
 80145f4:	10002a1e 	bne	r2,zero,80146a0 <__adddf3+0x11c>
 80145f8:	4184b03a 	or	r2,r8,r6
 80145fc:	1000991e 	bne	r2,zero,8014864 <__adddf3+0x2e0>
 8014600:	888001cc 	andi	r2,r17,7
 8014604:	10005b26 	beq	r2,zero,8014774 <__adddf3+0x1f0>
 8014608:	88c003cc 	andi	r3,r17,15
 801460c:	00800104 	movi	r2,4
 8014610:	18805826 	beq	r3,r2,8014774 <__adddf3+0x1f0>
 8014614:	89800104 	addi	r6,r17,4
 8014618:	3463803a 	cmpltu	r17,r6,r17
 801461c:	2c4b883a 	add	r5,r5,r17
 8014620:	2880202c 	andhi	r2,r5,128
 8014624:	9007883a 	mov	r3,r18
 8014628:	3023883a 	mov	r17,r6
 801462c:	10005426 	beq	r2,zero,8014780 <__adddf3+0x1fc>
 8014630:	84000044 	addi	r16,r16,1
 8014634:	0081ffc4 	movi	r2,2047
 8014638:	8080c126 	beq	r16,r2,8014940 <__adddf3+0x3bc>
 801463c:	013fe034 	movhi	r4,65408
 8014640:	213fffc4 	addi	r4,r4,-1
 8014644:	290a703a 	and	r5,r5,r4
 8014648:	2804977a 	slli	r2,r5,29
 801464c:	280a927a 	slli	r5,r5,9
 8014650:	8822d0fa 	srli	r17,r17,3
 8014654:	8401ffcc 	andi	r16,r16,2047
 8014658:	2808d33a 	srli	r4,r5,12
 801465c:	1444b03a 	or	r2,r2,r17
 8014660:	8401ffcc 	andi	r16,r16,2047
 8014664:	800a953a 	slli	r5,r16,20
 8014668:	18c03fcc 	andi	r3,r3,255
 801466c:	04000434 	movhi	r16,16
 8014670:	180697fa 	slli	r3,r3,31
 8014674:	843fffc4 	addi	r16,r16,-1
 8014678:	2420703a 	and	r16,r4,r16
 801467c:	8160b03a 	or	r16,r16,r5
 8014680:	80c6b03a 	or	r3,r16,r3
 8014684:	dfc00417 	ldw	ra,16(sp)
 8014688:	dcc00317 	ldw	r19,12(sp)
 801468c:	dc800217 	ldw	r18,8(sp)
 8014690:	dc400117 	ldw	r17,4(sp)
 8014694:	dc000017 	ldw	r16,0(sp)
 8014698:	dec00504 	addi	sp,sp,20
 801469c:	f800283a 	ret
 80146a0:	0081ffc4 	movi	r2,2047
 80146a4:	80bfd626 	beq	r16,r2,8014600 <__alt_data_end+0xfc014600>
 80146a8:	42002034 	orhi	r8,r8,128
 80146ac:	00800e04 	movi	r2,56
 80146b0:	10c0a616 	blt	r2,r3,801494c <__adddf3+0x3c8>
 80146b4:	008007c4 	movi	r2,31
 80146b8:	10c0c916 	blt	r2,r3,80149e0 <__adddf3+0x45c>
 80146bc:	00800804 	movi	r2,32
 80146c0:	10c5c83a 	sub	r2,r2,r3
 80146c4:	408e983a 	sll	r7,r8,r2
 80146c8:	30c8d83a 	srl	r4,r6,r3
 80146cc:	3084983a 	sll	r2,r6,r2
 80146d0:	40c6d83a 	srl	r3,r8,r3
 80146d4:	390cb03a 	or	r6,r7,r4
 80146d8:	1004c03a 	cmpne	r2,r2,zero
 80146dc:	308cb03a 	or	r6,r6,r2
 80146e0:	898dc83a 	sub	r6,r17,r6
 80146e4:	89a3803a 	cmpltu	r17,r17,r6
 80146e8:	28cbc83a 	sub	r5,r5,r3
 80146ec:	2c4bc83a 	sub	r5,r5,r17
 80146f0:	3023883a 	mov	r17,r6
 80146f4:	2880202c 	andhi	r2,r5,128
 80146f8:	10006d26 	beq	r2,zero,80148b0 <__adddf3+0x32c>
 80146fc:	04c02034 	movhi	r19,128
 8014700:	9cffffc4 	addi	r19,r19,-1
 8014704:	2ce6703a 	and	r19,r5,r19
 8014708:	98007e26 	beq	r19,zero,8014904 <__adddf3+0x380>
 801470c:	9809883a 	mov	r4,r19
 8014710:	80069040 	call	8006904 <__clzsi2>
 8014714:	10fffe04 	addi	r3,r2,-8
 8014718:	010007c4 	movi	r4,31
 801471c:	20c07f16 	blt	r4,r3,801491c <__adddf3+0x398>
 8014720:	01400a04 	movi	r5,40
 8014724:	2885c83a 	sub	r2,r5,r2
 8014728:	888ad83a 	srl	r5,r17,r2
 801472c:	98e6983a 	sll	r19,r19,r3
 8014730:	88e2983a 	sll	r17,r17,r3
 8014734:	2ce6b03a 	or	r19,r5,r19
 8014738:	1c007c16 	blt	r3,r16,801492c <__adddf3+0x3a8>
 801473c:	1c21c83a 	sub	r16,r3,r16
 8014740:	81400044 	addi	r5,r16,1
 8014744:	00c007c4 	movi	r3,31
 8014748:	19409816 	blt	r3,r5,80149ac <__adddf3+0x428>
 801474c:	1c21c83a 	sub	r16,r3,r16
 8014750:	8c08983a 	sll	r4,r17,r16
 8014754:	8946d83a 	srl	r3,r17,r5
 8014758:	9c20983a 	sll	r16,r19,r16
 801475c:	2008c03a 	cmpne	r4,r4,zero
 8014760:	994ad83a 	srl	r5,r19,r5
 8014764:	1c06b03a 	or	r3,r3,r16
 8014768:	1922b03a 	or	r17,r3,r4
 801476c:	0021883a 	mov	r16,zero
 8014770:	003fa306 	br	8014600 <__alt_data_end+0xfc014600>
 8014774:	2880202c 	andhi	r2,r5,128
 8014778:	9007883a 	mov	r3,r18
 801477c:	103fac1e 	bne	r2,zero,8014630 <__alt_data_end+0xfc014630>
 8014780:	2804977a 	slli	r2,r5,29
 8014784:	8822d0fa 	srli	r17,r17,3
 8014788:	0101ffc4 	movi	r4,2047
 801478c:	280ad0fa 	srli	r5,r5,3
 8014790:	1444b03a 	or	r2,r2,r17
 8014794:	81002c26 	beq	r16,r4,8014848 <__adddf3+0x2c4>
 8014798:	8120703a 	and	r16,r16,r4
 801479c:	01000434 	movhi	r4,16
 80147a0:	213fffc4 	addi	r4,r4,-1
 80147a4:	2908703a 	and	r4,r5,r4
 80147a8:	003fad06 	br	8014660 <__alt_data_end+0xfc014660>
 80147ac:	8089c83a 	sub	r4,r16,r2
 80147b0:	01006a0e 	bge	zero,r4,801495c <__adddf3+0x3d8>
 80147b4:	10003326 	beq	r2,zero,8014884 <__adddf3+0x300>
 80147b8:	0081ffc4 	movi	r2,2047
 80147bc:	80bf9026 	beq	r16,r2,8014600 <__alt_data_end+0xfc014600>
 80147c0:	42002034 	orhi	r8,r8,128
 80147c4:	00800e04 	movi	r2,56
 80147c8:	1100b116 	blt	r2,r4,8014a90 <__adddf3+0x50c>
 80147cc:	008007c4 	movi	r2,31
 80147d0:	1100e216 	blt	r2,r4,8014b5c <__adddf3+0x5d8>
 80147d4:	00800804 	movi	r2,32
 80147d8:	1105c83a 	sub	r2,r2,r4
 80147dc:	4092983a 	sll	r9,r8,r2
 80147e0:	310ed83a 	srl	r7,r6,r4
 80147e4:	3084983a 	sll	r2,r6,r2
 80147e8:	4110d83a 	srl	r8,r8,r4
 80147ec:	49ccb03a 	or	r6,r9,r7
 80147f0:	1004c03a 	cmpne	r2,r2,zero
 80147f4:	308cb03a 	or	r6,r6,r2
 80147f8:	344d883a 	add	r6,r6,r17
 80147fc:	3463803a 	cmpltu	r17,r6,r17
 8014800:	414b883a 	add	r5,r8,r5
 8014804:	2c4b883a 	add	r5,r5,r17
 8014808:	3023883a 	mov	r17,r6
 801480c:	2880202c 	andhi	r2,r5,128
 8014810:	10002726 	beq	r2,zero,80148b0 <__adddf3+0x32c>
 8014814:	84000044 	addi	r16,r16,1
 8014818:	0081ffc4 	movi	r2,2047
 801481c:	8080ae26 	beq	r16,r2,8014ad8 <__adddf3+0x554>
 8014820:	00bfe034 	movhi	r2,65408
 8014824:	10bfffc4 	addi	r2,r2,-1
 8014828:	288a703a 	and	r5,r5,r2
 801482c:	880cd07a 	srli	r6,r17,1
 8014830:	280897fa 	slli	r4,r5,31
 8014834:	88c0004c 	andi	r3,r17,1
 8014838:	30e2b03a 	or	r17,r6,r3
 801483c:	280ad07a 	srli	r5,r5,1
 8014840:	8922b03a 	or	r17,r17,r4
 8014844:	003f6e06 	br	8014600 <__alt_data_end+0xfc014600>
 8014848:	1148b03a 	or	r4,r2,r5
 801484c:	20003c26 	beq	r4,zero,8014940 <__adddf3+0x3bc>
 8014850:	29000234 	orhi	r4,r5,8
 8014854:	01400434 	movhi	r5,16
 8014858:	297fffc4 	addi	r5,r5,-1
 801485c:	2148703a 	and	r4,r4,r5
 8014860:	003f7f06 	br	8014660 <__alt_data_end+0xfc014660>
 8014864:	18ffffc4 	addi	r3,r3,-1
 8014868:	18004d1e 	bne	r3,zero,80149a0 <__adddf3+0x41c>
 801486c:	898dc83a 	sub	r6,r17,r6
 8014870:	89a3803a 	cmpltu	r17,r17,r6
 8014874:	2a0bc83a 	sub	r5,r5,r8
 8014878:	2c4bc83a 	sub	r5,r5,r17
 801487c:	3023883a 	mov	r17,r6
 8014880:	003f9c06 	br	80146f4 <__alt_data_end+0xfc0146f4>
 8014884:	4184b03a 	or	r2,r8,r6
 8014888:	103f5d26 	beq	r2,zero,8014600 <__alt_data_end+0xfc014600>
 801488c:	213fffc4 	addi	r4,r4,-1
 8014890:	203fd926 	beq	r4,zero,80147f8 <__alt_data_end+0xfc0147f8>
 8014894:	0081ffc4 	movi	r2,2047
 8014898:	80bfca1e 	bne	r16,r2,80147c4 <__alt_data_end+0xfc0147c4>
 801489c:	003f5806 	br	8014600 <__alt_data_end+0xfc014600>
 80148a0:	10c8b03a 	or	r4,r2,r3
 80148a4:	20008b26 	beq	r4,zero,8014ad4 <__adddf3+0x550>
 80148a8:	100b883a 	mov	r5,r2
 80148ac:	1823883a 	mov	r17,r3
 80148b0:	888001cc 	andi	r2,r17,7
 80148b4:	103f541e 	bne	r2,zero,8014608 <__alt_data_end+0xfc014608>
 80148b8:	9007883a 	mov	r3,r18
 80148bc:	003fb006 	br	8014780 <__alt_data_end+0xfc014780>
 80148c0:	1800531e 	bne	r3,zero,8014a10 <__adddf3+0x48c>
 80148c4:	80800044 	addi	r2,r16,1
 80148c8:	1081ffcc 	andi	r2,r2,2047
 80148cc:	00c00044 	movi	r3,1
 80148d0:	1880990e 	bge	r3,r2,8014b38 <__adddf3+0x5b4>
 80148d4:	8985c83a 	sub	r2,r17,r6
 80148d8:	8887803a 	cmpltu	r3,r17,r2
 80148dc:	2a27c83a 	sub	r19,r5,r8
 80148e0:	98e7c83a 	sub	r19,r19,r3
 80148e4:	98c0202c 	andhi	r3,r19,128
 80148e8:	18006226 	beq	r3,zero,8014a74 <__adddf3+0x4f0>
 80148ec:	3463c83a 	sub	r17,r6,r17
 80148f0:	4151c83a 	sub	r8,r8,r5
 80148f4:	344d803a 	cmpltu	r6,r6,r17
 80148f8:	41a7c83a 	sub	r19,r8,r6
 80148fc:	3825883a 	mov	r18,r7
 8014900:	983f821e 	bne	r19,zero,801470c <__alt_data_end+0xfc01470c>
 8014904:	8809883a 	mov	r4,r17
 8014908:	80069040 	call	8006904 <__clzsi2>
 801490c:	10800804 	addi	r2,r2,32
 8014910:	10fffe04 	addi	r3,r2,-8
 8014914:	010007c4 	movi	r4,31
 8014918:	20ff810e 	bge	r4,r3,8014720 <__alt_data_end+0xfc014720>
 801491c:	14fff604 	addi	r19,r2,-40
 8014920:	8ce6983a 	sll	r19,r17,r19
 8014924:	0023883a 	mov	r17,zero
 8014928:	1c3f840e 	bge	r3,r16,801473c <__alt_data_end+0xfc01473c>
 801492c:	017fe034 	movhi	r5,65408
 8014930:	297fffc4 	addi	r5,r5,-1
 8014934:	80e1c83a 	sub	r16,r16,r3
 8014938:	994a703a 	and	r5,r19,r5
 801493c:	003f3006 	br	8014600 <__alt_data_end+0xfc014600>
 8014940:	0009883a 	mov	r4,zero
 8014944:	0005883a 	mov	r2,zero
 8014948:	003f4506 	br	8014660 <__alt_data_end+0xfc014660>
 801494c:	418cb03a 	or	r6,r8,r6
 8014950:	300cc03a 	cmpne	r6,r6,zero
 8014954:	0007883a 	mov	r3,zero
 8014958:	003f6106 	br	80146e0 <__alt_data_end+0xfc0146e0>
 801495c:	2000921e 	bne	r4,zero,8014ba8 <__adddf3+0x624>
 8014960:	80800044 	addi	r2,r16,1
 8014964:	11c1ffcc 	andi	r7,r2,2047
 8014968:	01000044 	movi	r4,1
 801496c:	21c0610e 	bge	r4,r7,8014af4 <__adddf3+0x570>
 8014970:	0101ffc4 	movi	r4,2047
 8014974:	1100a326 	beq	r2,r4,8014c04 <__adddf3+0x680>
 8014978:	344d883a 	add	r6,r6,r17
 801497c:	3463803a 	cmpltu	r17,r6,r17
 8014980:	414b883a 	add	r5,r8,r5
 8014984:	2c4b883a 	add	r5,r5,r17
 8014988:	282297fa 	slli	r17,r5,31
 801498c:	300cd07a 	srli	r6,r6,1
 8014990:	280ad07a 	srli	r5,r5,1
 8014994:	1021883a 	mov	r16,r2
 8014998:	89a2b03a 	or	r17,r17,r6
 801499c:	003f1806 	br	8014600 <__alt_data_end+0xfc014600>
 80149a0:	0081ffc4 	movi	r2,2047
 80149a4:	80bf411e 	bne	r16,r2,80146ac <__alt_data_end+0xfc0146ac>
 80149a8:	003f1506 	br	8014600 <__alt_data_end+0xfc014600>
 80149ac:	80bff844 	addi	r2,r16,-31
 80149b0:	00c00804 	movi	r3,32
 80149b4:	9884d83a 	srl	r2,r19,r2
 80149b8:	28c04a26 	beq	r5,r3,8014ae4 <__adddf3+0x560>
 80149bc:	00c00fc4 	movi	r3,63
 80149c0:	1c21c83a 	sub	r16,r3,r16
 80149c4:	9c26983a 	sll	r19,r19,r16
 80149c8:	9c62b03a 	or	r17,r19,r17
 80149cc:	8822c03a 	cmpne	r17,r17,zero
 80149d0:	88a2b03a 	or	r17,r17,r2
 80149d4:	000b883a 	mov	r5,zero
 80149d8:	0021883a 	mov	r16,zero
 80149dc:	003fb406 	br	80148b0 <__alt_data_end+0xfc0148b0>
 80149e0:	18bff804 	addi	r2,r3,-32
 80149e4:	01000804 	movi	r4,32
 80149e8:	4084d83a 	srl	r2,r8,r2
 80149ec:	19003f26 	beq	r3,r4,8014aec <__adddf3+0x568>
 80149f0:	01001004 	movi	r4,64
 80149f4:	20c7c83a 	sub	r3,r4,r3
 80149f8:	40d0983a 	sll	r8,r8,r3
 80149fc:	418cb03a 	or	r6,r8,r6
 8014a00:	300cc03a 	cmpne	r6,r6,zero
 8014a04:	308cb03a 	or	r6,r6,r2
 8014a08:	0007883a 	mov	r3,zero
 8014a0c:	003f3406 	br	80146e0 <__alt_data_end+0xfc0146e0>
 8014a10:	80002326 	beq	r16,zero,8014aa0 <__adddf3+0x51c>
 8014a14:	0101ffc4 	movi	r4,2047
 8014a18:	11005e26 	beq	r2,r4,8014b94 <__adddf3+0x610>
 8014a1c:	00c7c83a 	sub	r3,zero,r3
 8014a20:	29402034 	orhi	r5,r5,128
 8014a24:	01000e04 	movi	r4,56
 8014a28:	20c07216 	blt	r4,r3,8014bf4 <__adddf3+0x670>
 8014a2c:	010007c4 	movi	r4,31
 8014a30:	20c0ce16 	blt	r4,r3,8014d6c <__adddf3+0x7e8>
 8014a34:	01000804 	movi	r4,32
 8014a38:	20c9c83a 	sub	r4,r4,r3
 8014a3c:	2914983a 	sll	r10,r5,r4
 8014a40:	88d2d83a 	srl	r9,r17,r3
 8014a44:	8908983a 	sll	r4,r17,r4
 8014a48:	28c6d83a 	srl	r3,r5,r3
 8014a4c:	5262b03a 	or	r17,r10,r9
 8014a50:	2008c03a 	cmpne	r4,r4,zero
 8014a54:	8922b03a 	or	r17,r17,r4
 8014a58:	3463c83a 	sub	r17,r6,r17
 8014a5c:	40c7c83a 	sub	r3,r8,r3
 8014a60:	344d803a 	cmpltu	r6,r6,r17
 8014a64:	198bc83a 	sub	r5,r3,r6
 8014a68:	1021883a 	mov	r16,r2
 8014a6c:	3825883a 	mov	r18,r7
 8014a70:	003f2006 	br	80146f4 <__alt_data_end+0xfc0146f4>
 8014a74:	9886b03a 	or	r3,r19,r2
 8014a78:	1800141e 	bne	r3,zero,8014acc <__adddf3+0x548>
 8014a7c:	0007883a 	mov	r3,zero
 8014a80:	000b883a 	mov	r5,zero
 8014a84:	0023883a 	mov	r17,zero
 8014a88:	0021883a 	mov	r16,zero
 8014a8c:	003f3c06 	br	8014780 <__alt_data_end+0xfc014780>
 8014a90:	418cb03a 	or	r6,r8,r6
 8014a94:	300cc03a 	cmpne	r6,r6,zero
 8014a98:	0011883a 	mov	r8,zero
 8014a9c:	003f5606 	br	80147f8 <__alt_data_end+0xfc0147f8>
 8014aa0:	2c48b03a 	or	r4,r5,r17
 8014aa4:	20003b26 	beq	r4,zero,8014b94 <__adddf3+0x610>
 8014aa8:	00c6303a 	nor	r3,zero,r3
 8014aac:	1800371e 	bne	r3,zero,8014b8c <__adddf3+0x608>
 8014ab0:	3463c83a 	sub	r17,r6,r17
 8014ab4:	414bc83a 	sub	r5,r8,r5
 8014ab8:	344d803a 	cmpltu	r6,r6,r17
 8014abc:	298bc83a 	sub	r5,r5,r6
 8014ac0:	1021883a 	mov	r16,r2
 8014ac4:	3825883a 	mov	r18,r7
 8014ac8:	003f0a06 	br	80146f4 <__alt_data_end+0xfc0146f4>
 8014acc:	1023883a 	mov	r17,r2
 8014ad0:	003f0d06 	br	8014708 <__alt_data_end+0xfc014708>
 8014ad4:	0007883a 	mov	r3,zero
 8014ad8:	000b883a 	mov	r5,zero
 8014adc:	0023883a 	mov	r17,zero
 8014ae0:	003f2706 	br	8014780 <__alt_data_end+0xfc014780>
 8014ae4:	0027883a 	mov	r19,zero
 8014ae8:	003fb706 	br	80149c8 <__alt_data_end+0xfc0149c8>
 8014aec:	0011883a 	mov	r8,zero
 8014af0:	003fc206 	br	80149fc <__alt_data_end+0xfc0149fc>
 8014af4:	2c44b03a 	or	r2,r5,r17
 8014af8:	8000871e 	bne	r16,zero,8014d18 <__adddf3+0x794>
 8014afc:	1000b126 	beq	r2,zero,8014dc4 <__adddf3+0x840>
 8014b00:	4184b03a 	or	r2,r8,r6
 8014b04:	103ebe26 	beq	r2,zero,8014600 <__alt_data_end+0xfc014600>
 8014b08:	3445883a 	add	r2,r6,r17
 8014b0c:	1463803a 	cmpltu	r17,r2,r17
 8014b10:	414b883a 	add	r5,r8,r5
 8014b14:	2c4b883a 	add	r5,r5,r17
 8014b18:	28c0202c 	andhi	r3,r5,128
 8014b1c:	1023883a 	mov	r17,r2
 8014b20:	183f6326 	beq	r3,zero,80148b0 <__alt_data_end+0xfc0148b0>
 8014b24:	00bfe034 	movhi	r2,65408
 8014b28:	10bfffc4 	addi	r2,r2,-1
 8014b2c:	2021883a 	mov	r16,r4
 8014b30:	288a703a 	and	r5,r5,r2
 8014b34:	003eb206 	br	8014600 <__alt_data_end+0xfc014600>
 8014b38:	2c44b03a 	or	r2,r5,r17
 8014b3c:	8000251e 	bne	r16,zero,8014bd4 <__adddf3+0x650>
 8014b40:	10004b1e 	bne	r2,zero,8014c70 <__adddf3+0x6ec>
 8014b44:	4184b03a 	or	r2,r8,r6
 8014b48:	103fe226 	beq	r2,zero,8014ad4 <__alt_data_end+0xfc014ad4>
 8014b4c:	400b883a 	mov	r5,r8
 8014b50:	3023883a 	mov	r17,r6
 8014b54:	3825883a 	mov	r18,r7
 8014b58:	003ea906 	br	8014600 <__alt_data_end+0xfc014600>
 8014b5c:	20bff804 	addi	r2,r4,-32
 8014b60:	01c00804 	movi	r7,32
 8014b64:	4084d83a 	srl	r2,r8,r2
 8014b68:	21c07e26 	beq	r4,r7,8014d64 <__adddf3+0x7e0>
 8014b6c:	01c01004 	movi	r7,64
 8014b70:	3909c83a 	sub	r4,r7,r4
 8014b74:	4110983a 	sll	r8,r8,r4
 8014b78:	418cb03a 	or	r6,r8,r6
 8014b7c:	300cc03a 	cmpne	r6,r6,zero
 8014b80:	308cb03a 	or	r6,r6,r2
 8014b84:	0011883a 	mov	r8,zero
 8014b88:	003f1b06 	br	80147f8 <__alt_data_end+0xfc0147f8>
 8014b8c:	0101ffc4 	movi	r4,2047
 8014b90:	113fa41e 	bne	r2,r4,8014a24 <__alt_data_end+0xfc014a24>
 8014b94:	400b883a 	mov	r5,r8
 8014b98:	3023883a 	mov	r17,r6
 8014b9c:	1021883a 	mov	r16,r2
 8014ba0:	3825883a 	mov	r18,r7
 8014ba4:	003e9606 	br	8014600 <__alt_data_end+0xfc014600>
 8014ba8:	80001a1e 	bne	r16,zero,8014c14 <__adddf3+0x690>
 8014bac:	2c4eb03a 	or	r7,r5,r17
 8014bb0:	38005526 	beq	r7,zero,8014d08 <__adddf3+0x784>
 8014bb4:	0108303a 	nor	r4,zero,r4
 8014bb8:	2000511e 	bne	r4,zero,8014d00 <__adddf3+0x77c>
 8014bbc:	89a3883a 	add	r17,r17,r6
 8014bc0:	414b883a 	add	r5,r8,r5
 8014bc4:	898d803a 	cmpltu	r6,r17,r6
 8014bc8:	298b883a 	add	r5,r5,r6
 8014bcc:	1021883a 	mov	r16,r2
 8014bd0:	003f0e06 	br	801480c <__alt_data_end+0xfc01480c>
 8014bd4:	1000341e 	bne	r2,zero,8014ca8 <__adddf3+0x724>
 8014bd8:	4184b03a 	or	r2,r8,r6
 8014bdc:	10006f26 	beq	r2,zero,8014d9c <__adddf3+0x818>
 8014be0:	400b883a 	mov	r5,r8
 8014be4:	3023883a 	mov	r17,r6
 8014be8:	3825883a 	mov	r18,r7
 8014bec:	0401ffc4 	movi	r16,2047
 8014bf0:	003e8306 	br	8014600 <__alt_data_end+0xfc014600>
 8014bf4:	2c62b03a 	or	r17,r5,r17
 8014bf8:	8822c03a 	cmpne	r17,r17,zero
 8014bfc:	0007883a 	mov	r3,zero
 8014c00:	003f9506 	br	8014a58 <__alt_data_end+0xfc014a58>
 8014c04:	1021883a 	mov	r16,r2
 8014c08:	000b883a 	mov	r5,zero
 8014c0c:	0023883a 	mov	r17,zero
 8014c10:	003edb06 	br	8014780 <__alt_data_end+0xfc014780>
 8014c14:	01c1ffc4 	movi	r7,2047
 8014c18:	11c03b26 	beq	r2,r7,8014d08 <__adddf3+0x784>
 8014c1c:	0109c83a 	sub	r4,zero,r4
 8014c20:	29402034 	orhi	r5,r5,128
 8014c24:	01c00e04 	movi	r7,56
 8014c28:	39006216 	blt	r7,r4,8014db4 <__adddf3+0x830>
 8014c2c:	01c007c4 	movi	r7,31
 8014c30:	39006b16 	blt	r7,r4,8014de0 <__adddf3+0x85c>
 8014c34:	01c00804 	movi	r7,32
 8014c38:	390fc83a 	sub	r7,r7,r4
 8014c3c:	29d4983a 	sll	r10,r5,r7
 8014c40:	8912d83a 	srl	r9,r17,r4
 8014c44:	89ce983a 	sll	r7,r17,r7
 8014c48:	2908d83a 	srl	r4,r5,r4
 8014c4c:	5262b03a 	or	r17,r10,r9
 8014c50:	380ac03a 	cmpne	r5,r7,zero
 8014c54:	8962b03a 	or	r17,r17,r5
 8014c58:	89a3883a 	add	r17,r17,r6
 8014c5c:	2211883a 	add	r8,r4,r8
 8014c60:	898d803a 	cmpltu	r6,r17,r6
 8014c64:	418b883a 	add	r5,r8,r6
 8014c68:	1021883a 	mov	r16,r2
 8014c6c:	003ee706 	br	801480c <__alt_data_end+0xfc01480c>
 8014c70:	4184b03a 	or	r2,r8,r6
 8014c74:	103e6226 	beq	r2,zero,8014600 <__alt_data_end+0xfc014600>
 8014c78:	8987c83a 	sub	r3,r17,r6
 8014c7c:	88c9803a 	cmpltu	r4,r17,r3
 8014c80:	2a05c83a 	sub	r2,r5,r8
 8014c84:	1105c83a 	sub	r2,r2,r4
 8014c88:	1100202c 	andhi	r4,r2,128
 8014c8c:	203f0426 	beq	r4,zero,80148a0 <__alt_data_end+0xfc0148a0>
 8014c90:	3463c83a 	sub	r17,r6,r17
 8014c94:	414bc83a 	sub	r5,r8,r5
 8014c98:	344d803a 	cmpltu	r6,r6,r17
 8014c9c:	298bc83a 	sub	r5,r5,r6
 8014ca0:	3825883a 	mov	r18,r7
 8014ca4:	003e5606 	br	8014600 <__alt_data_end+0xfc014600>
 8014ca8:	4184b03a 	or	r2,r8,r6
 8014cac:	10002b26 	beq	r2,zero,8014d5c <__adddf3+0x7d8>
 8014cb0:	2804d0fa 	srli	r2,r5,3
 8014cb4:	8822d0fa 	srli	r17,r17,3
 8014cb8:	280a977a 	slli	r5,r5,29
 8014cbc:	10c0022c 	andhi	r3,r2,8
 8014cc0:	2c62b03a 	or	r17,r5,r17
 8014cc4:	18000826 	beq	r3,zero,8014ce8 <__adddf3+0x764>
 8014cc8:	4008d0fa 	srli	r4,r8,3
 8014ccc:	20c0022c 	andhi	r3,r4,8
 8014cd0:	1800051e 	bne	r3,zero,8014ce8 <__adddf3+0x764>
 8014cd4:	300cd0fa 	srli	r6,r6,3
 8014cd8:	4010977a 	slli	r8,r8,29
 8014cdc:	2005883a 	mov	r2,r4
 8014ce0:	3825883a 	mov	r18,r7
 8014ce4:	41a2b03a 	or	r17,r8,r6
 8014ce8:	880ad77a 	srli	r5,r17,29
 8014cec:	100490fa 	slli	r2,r2,3
 8014cf0:	882290fa 	slli	r17,r17,3
 8014cf4:	0401ffc4 	movi	r16,2047
 8014cf8:	288ab03a 	or	r5,r5,r2
 8014cfc:	003e4006 	br	8014600 <__alt_data_end+0xfc014600>
 8014d00:	01c1ffc4 	movi	r7,2047
 8014d04:	11ffc71e 	bne	r2,r7,8014c24 <__alt_data_end+0xfc014c24>
 8014d08:	400b883a 	mov	r5,r8
 8014d0c:	3023883a 	mov	r17,r6
 8014d10:	1021883a 	mov	r16,r2
 8014d14:	003e3a06 	br	8014600 <__alt_data_end+0xfc014600>
 8014d18:	10002d26 	beq	r2,zero,8014dd0 <__adddf3+0x84c>
 8014d1c:	4184b03a 	or	r2,r8,r6
 8014d20:	10000e26 	beq	r2,zero,8014d5c <__adddf3+0x7d8>
 8014d24:	2804d0fa 	srli	r2,r5,3
 8014d28:	8822d0fa 	srli	r17,r17,3
 8014d2c:	280a977a 	slli	r5,r5,29
 8014d30:	10c0022c 	andhi	r3,r2,8
 8014d34:	2c62b03a 	or	r17,r5,r17
 8014d38:	183feb26 	beq	r3,zero,8014ce8 <__alt_data_end+0xfc014ce8>
 8014d3c:	4008d0fa 	srli	r4,r8,3
 8014d40:	20c0022c 	andhi	r3,r4,8
 8014d44:	183fe81e 	bne	r3,zero,8014ce8 <__alt_data_end+0xfc014ce8>
 8014d48:	300cd0fa 	srli	r6,r6,3
 8014d4c:	4010977a 	slli	r8,r8,29
 8014d50:	2005883a 	mov	r2,r4
 8014d54:	41a2b03a 	or	r17,r8,r6
 8014d58:	003fe306 	br	8014ce8 <__alt_data_end+0xfc014ce8>
 8014d5c:	0401ffc4 	movi	r16,2047
 8014d60:	003e2706 	br	8014600 <__alt_data_end+0xfc014600>
 8014d64:	0011883a 	mov	r8,zero
 8014d68:	003f8306 	br	8014b78 <__alt_data_end+0xfc014b78>
 8014d6c:	193ff804 	addi	r4,r3,-32
 8014d70:	02400804 	movi	r9,32
 8014d74:	2908d83a 	srl	r4,r5,r4
 8014d78:	1a402526 	beq	r3,r9,8014e10 <__adddf3+0x88c>
 8014d7c:	02401004 	movi	r9,64
 8014d80:	48c7c83a 	sub	r3,r9,r3
 8014d84:	28ca983a 	sll	r5,r5,r3
 8014d88:	2c62b03a 	or	r17,r5,r17
 8014d8c:	8822c03a 	cmpne	r17,r17,zero
 8014d90:	8922b03a 	or	r17,r17,r4
 8014d94:	0007883a 	mov	r3,zero
 8014d98:	003f2f06 	br	8014a58 <__alt_data_end+0xfc014a58>
 8014d9c:	01402034 	movhi	r5,128
 8014da0:	0007883a 	mov	r3,zero
 8014da4:	297fffc4 	addi	r5,r5,-1
 8014da8:	047ffe04 	movi	r17,-8
 8014dac:	0401ffc4 	movi	r16,2047
 8014db0:	003e7306 	br	8014780 <__alt_data_end+0xfc014780>
 8014db4:	2c62b03a 	or	r17,r5,r17
 8014db8:	8822c03a 	cmpne	r17,r17,zero
 8014dbc:	0009883a 	mov	r4,zero
 8014dc0:	003fa506 	br	8014c58 <__alt_data_end+0xfc014c58>
 8014dc4:	400b883a 	mov	r5,r8
 8014dc8:	3023883a 	mov	r17,r6
 8014dcc:	003e0c06 	br	8014600 <__alt_data_end+0xfc014600>
 8014dd0:	400b883a 	mov	r5,r8
 8014dd4:	3023883a 	mov	r17,r6
 8014dd8:	0401ffc4 	movi	r16,2047
 8014ddc:	003e0806 	br	8014600 <__alt_data_end+0xfc014600>
 8014de0:	21fff804 	addi	r7,r4,-32
 8014de4:	02400804 	movi	r9,32
 8014de8:	29ced83a 	srl	r7,r5,r7
 8014dec:	22400a26 	beq	r4,r9,8014e18 <__adddf3+0x894>
 8014df0:	02401004 	movi	r9,64
 8014df4:	4909c83a 	sub	r4,r9,r4
 8014df8:	290a983a 	sll	r5,r5,r4
 8014dfc:	2c62b03a 	or	r17,r5,r17
 8014e00:	8822c03a 	cmpne	r17,r17,zero
 8014e04:	89e2b03a 	or	r17,r17,r7
 8014e08:	0009883a 	mov	r4,zero
 8014e0c:	003f9206 	br	8014c58 <__alt_data_end+0xfc014c58>
 8014e10:	000b883a 	mov	r5,zero
 8014e14:	003fdc06 	br	8014d88 <__alt_data_end+0xfc014d88>
 8014e18:	000b883a 	mov	r5,zero
 8014e1c:	003ff706 	br	8014dfc <__alt_data_end+0xfc014dfc>

08014e20 <__eqdf2>:
 8014e20:	2804d53a 	srli	r2,r5,20
 8014e24:	3806d53a 	srli	r3,r7,20
 8014e28:	02000434 	movhi	r8,16
 8014e2c:	423fffc4 	addi	r8,r8,-1
 8014e30:	1081ffcc 	andi	r2,r2,2047
 8014e34:	0241ffc4 	movi	r9,2047
 8014e38:	2a14703a 	and	r10,r5,r8
 8014e3c:	18c1ffcc 	andi	r3,r3,2047
 8014e40:	3a10703a 	and	r8,r7,r8
 8014e44:	280ad7fa 	srli	r5,r5,31
 8014e48:	380ed7fa 	srli	r7,r7,31
 8014e4c:	12400f26 	beq	r2,r9,8014e8c <__eqdf2+0x6c>
 8014e50:	0241ffc4 	movi	r9,2047
 8014e54:	1a400326 	beq	r3,r9,8014e64 <__eqdf2+0x44>
 8014e58:	10c00526 	beq	r2,r3,8014e70 <__eqdf2+0x50>
 8014e5c:	00800044 	movi	r2,1
 8014e60:	f800283a 	ret
 8014e64:	4192b03a 	or	r9,r8,r6
 8014e68:	483ffc1e 	bne	r9,zero,8014e5c <__alt_data_end+0xfc014e5c>
 8014e6c:	10fffb1e 	bne	r2,r3,8014e5c <__alt_data_end+0xfc014e5c>
 8014e70:	523ffa1e 	bne	r10,r8,8014e5c <__alt_data_end+0xfc014e5c>
 8014e74:	21bff91e 	bne	r4,r6,8014e5c <__alt_data_end+0xfc014e5c>
 8014e78:	29c00826 	beq	r5,r7,8014e9c <__eqdf2+0x7c>
 8014e7c:	103ff71e 	bne	r2,zero,8014e5c <__alt_data_end+0xfc014e5c>
 8014e80:	5104b03a 	or	r2,r10,r4
 8014e84:	1004c03a 	cmpne	r2,r2,zero
 8014e88:	f800283a 	ret
 8014e8c:	5112b03a 	or	r9,r10,r4
 8014e90:	483fef26 	beq	r9,zero,8014e50 <__alt_data_end+0xfc014e50>
 8014e94:	00800044 	movi	r2,1
 8014e98:	f800283a 	ret
 8014e9c:	0005883a 	mov	r2,zero
 8014ea0:	f800283a 	ret

08014ea4 <__gedf2>:
 8014ea4:	2804d53a 	srli	r2,r5,20
 8014ea8:	3806d53a 	srli	r3,r7,20
 8014eac:	02000434 	movhi	r8,16
 8014eb0:	423fffc4 	addi	r8,r8,-1
 8014eb4:	0241ffc4 	movi	r9,2047
 8014eb8:	1081ffcc 	andi	r2,r2,2047
 8014ebc:	2a14703a 	and	r10,r5,r8
 8014ec0:	1a46703a 	and	r3,r3,r9
 8014ec4:	3a10703a 	and	r8,r7,r8
 8014ec8:	280ad7fa 	srli	r5,r5,31
 8014ecc:	380ed7fa 	srli	r7,r7,31
 8014ed0:	12400b26 	beq	r2,r9,8014f00 <__gedf2+0x5c>
 8014ed4:	1a401626 	beq	r3,r9,8014f30 <__gedf2+0x8c>
 8014ed8:	10000c1e 	bne	r2,zero,8014f0c <__gedf2+0x68>
 8014edc:	5112b03a 	or	r9,r10,r4
 8014ee0:	4813003a 	cmpeq	r9,r9,zero
 8014ee4:	4817883a 	mov	r11,r9
 8014ee8:	18000c1e 	bne	r3,zero,8014f1c <__gedf2+0x78>
 8014eec:	4198b03a 	or	r12,r8,r6
 8014ef0:	60000a1e 	bne	r12,zero,8014f1c <__gedf2+0x78>
 8014ef4:	48001326 	beq	r9,zero,8014f44 <__gedf2+0xa0>
 8014ef8:	0005883a 	mov	r2,zero
 8014efc:	f800283a 	ret
 8014f00:	5112b03a 	or	r9,r10,r4
 8014f04:	4800191e 	bne	r9,zero,8014f6c <__gedf2+0xc8>
 8014f08:	18800926 	beq	r3,r2,8014f30 <__gedf2+0x8c>
 8014f0c:	18000b1e 	bne	r3,zero,8014f3c <__gedf2+0x98>
 8014f10:	4192b03a 	or	r9,r8,r6
 8014f14:	0017883a 	mov	r11,zero
 8014f18:	48000a26 	beq	r9,zero,8014f44 <__gedf2+0xa0>
 8014f1c:	39c03fcc 	andi	r7,r7,255
 8014f20:	58000726 	beq	r11,zero,8014f40 <__gedf2+0x9c>
 8014f24:	3800081e 	bne	r7,zero,8014f48 <__gedf2+0xa4>
 8014f28:	00bfffc4 	movi	r2,-1
 8014f2c:	f800283a 	ret
 8014f30:	4192b03a 	or	r9,r8,r6
 8014f34:	48000d1e 	bne	r9,zero,8014f6c <__gedf2+0xc8>
 8014f38:	103fe826 	beq	r2,zero,8014edc <__alt_data_end+0xfc014edc>
 8014f3c:	39c03fcc 	andi	r7,r7,255
 8014f40:	29c00326 	beq	r5,r7,8014f50 <__gedf2+0xac>
 8014f44:	283ff81e 	bne	r5,zero,8014f28 <__alt_data_end+0xfc014f28>
 8014f48:	00800044 	movi	r2,1
 8014f4c:	f800283a 	ret
 8014f50:	18bffc16 	blt	r3,r2,8014f44 <__alt_data_end+0xfc014f44>
 8014f54:	10c00316 	blt	r2,r3,8014f64 <__gedf2+0xc0>
 8014f58:	42bffa36 	bltu	r8,r10,8014f44 <__alt_data_end+0xfc014f44>
 8014f5c:	52000526 	beq	r10,r8,8014f74 <__gedf2+0xd0>
 8014f60:	523fe52e 	bgeu	r10,r8,8014ef8 <__alt_data_end+0xfc014ef8>
 8014f64:	283ff026 	beq	r5,zero,8014f28 <__alt_data_end+0xfc014f28>
 8014f68:	003ff706 	br	8014f48 <__alt_data_end+0xfc014f48>
 8014f6c:	00bfff84 	movi	r2,-2
 8014f70:	f800283a 	ret
 8014f74:	313ff336 	bltu	r6,r4,8014f44 <__alt_data_end+0xfc014f44>
 8014f78:	21bfdf2e 	bgeu	r4,r6,8014ef8 <__alt_data_end+0xfc014ef8>
 8014f7c:	283fea26 	beq	r5,zero,8014f28 <__alt_data_end+0xfc014f28>
 8014f80:	003ff106 	br	8014f48 <__alt_data_end+0xfc014f48>

08014f84 <__ledf2>:
 8014f84:	2804d53a 	srli	r2,r5,20
 8014f88:	3810d53a 	srli	r8,r7,20
 8014f8c:	00c00434 	movhi	r3,16
 8014f90:	18ffffc4 	addi	r3,r3,-1
 8014f94:	0241ffc4 	movi	r9,2047
 8014f98:	1081ffcc 	andi	r2,r2,2047
 8014f9c:	28d4703a 	and	r10,r5,r3
 8014fa0:	4250703a 	and	r8,r8,r9
 8014fa4:	38c6703a 	and	r3,r7,r3
 8014fa8:	280ad7fa 	srli	r5,r5,31
 8014fac:	380ed7fa 	srli	r7,r7,31
 8014fb0:	12400b26 	beq	r2,r9,8014fe0 <__ledf2+0x5c>
 8014fb4:	42401926 	beq	r8,r9,801501c <__ledf2+0x98>
 8014fb8:	10000c1e 	bne	r2,zero,8014fec <__ledf2+0x68>
 8014fbc:	5112b03a 	or	r9,r10,r4
 8014fc0:	4813003a 	cmpeq	r9,r9,zero
 8014fc4:	4817883a 	mov	r11,r9
 8014fc8:	40000f26 	beq	r8,zero,8015008 <__ledf2+0x84>
 8014fcc:	39c03fcc 	andi	r7,r7,255
 8014fd0:	58001826 	beq	r11,zero,8015034 <__ledf2+0xb0>
 8014fd4:	38000a1e 	bne	r7,zero,8015000 <__ledf2+0x7c>
 8014fd8:	00bfffc4 	movi	r2,-1
 8014fdc:	f800283a 	ret
 8014fe0:	5112b03a 	or	r9,r10,r4
 8014fe4:	48000f1e 	bne	r9,zero,8015024 <__ledf2+0xa0>
 8014fe8:	40800c26 	beq	r8,r2,801501c <__ledf2+0x98>
 8014fec:	4000101e 	bne	r8,zero,8015030 <__ledf2+0xac>
 8014ff0:	1992b03a 	or	r9,r3,r6
 8014ff4:	0017883a 	mov	r11,zero
 8014ff8:	483ff41e 	bne	r9,zero,8014fcc <__alt_data_end+0xfc014fcc>
 8014ffc:	283ff61e 	bne	r5,zero,8014fd8 <__alt_data_end+0xfc014fd8>
 8015000:	00800044 	movi	r2,1
 8015004:	f800283a 	ret
 8015008:	1998b03a 	or	r12,r3,r6
 801500c:	603fef1e 	bne	r12,zero,8014fcc <__alt_data_end+0xfc014fcc>
 8015010:	483ffa26 	beq	r9,zero,8014ffc <__alt_data_end+0xfc014ffc>
 8015014:	0005883a 	mov	r2,zero
 8015018:	f800283a 	ret
 801501c:	1992b03a 	or	r9,r3,r6
 8015020:	48000226 	beq	r9,zero,801502c <__ledf2+0xa8>
 8015024:	00800084 	movi	r2,2
 8015028:	f800283a 	ret
 801502c:	103fe326 	beq	r2,zero,8014fbc <__alt_data_end+0xfc014fbc>
 8015030:	39c03fcc 	andi	r7,r7,255
 8015034:	29fff11e 	bne	r5,r7,8014ffc <__alt_data_end+0xfc014ffc>
 8015038:	40bff016 	blt	r8,r2,8014ffc <__alt_data_end+0xfc014ffc>
 801503c:	12000316 	blt	r2,r8,801504c <__ledf2+0xc8>
 8015040:	1abfee36 	bltu	r3,r10,8014ffc <__alt_data_end+0xfc014ffc>
 8015044:	50c00326 	beq	r10,r3,8015054 <__ledf2+0xd0>
 8015048:	50fff22e 	bgeu	r10,r3,8015014 <__alt_data_end+0xfc015014>
 801504c:	283fe226 	beq	r5,zero,8014fd8 <__alt_data_end+0xfc014fd8>
 8015050:	003feb06 	br	8015000 <__alt_data_end+0xfc015000>
 8015054:	313fe936 	bltu	r6,r4,8014ffc <__alt_data_end+0xfc014ffc>
 8015058:	21bfee2e 	bgeu	r4,r6,8015014 <__alt_data_end+0xfc015014>
 801505c:	283fde26 	beq	r5,zero,8014fd8 <__alt_data_end+0xfc014fd8>
 8015060:	003fe706 	br	8015000 <__alt_data_end+0xfc015000>

08015064 <__subdf3>:
 8015064:	00c00434 	movhi	r3,16
 8015068:	18ffffc4 	addi	r3,r3,-1
 801506c:	defffb04 	addi	sp,sp,-20
 8015070:	28d2703a 	and	r9,r5,r3
 8015074:	3814d53a 	srli	r10,r7,20
 8015078:	38c6703a 	and	r3,r7,r3
 801507c:	3004d77a 	srli	r2,r6,29
 8015080:	dc800215 	stw	r18,8(sp)
 8015084:	dc000015 	stw	r16,0(sp)
 8015088:	2824d7fa 	srli	r18,r5,31
 801508c:	2820d53a 	srli	r16,r5,20
 8015090:	481290fa 	slli	r9,r9,3
 8015094:	200ad77a 	srli	r5,r4,29
 8015098:	180690fa 	slli	r3,r3,3
 801509c:	dc400115 	stw	r17,4(sp)
 80150a0:	dfc00415 	stw	ra,16(sp)
 80150a4:	202290fa 	slli	r17,r4,3
 80150a8:	dcc00315 	stw	r19,12(sp)
 80150ac:	5281ffcc 	andi	r10,r10,2047
 80150b0:	0101ffc4 	movi	r4,2047
 80150b4:	9011883a 	mov	r8,r18
 80150b8:	8401ffcc 	andi	r16,r16,2047
 80150bc:	94803fcc 	andi	r18,r18,255
 80150c0:	494ab03a 	or	r5,r9,r5
 80150c4:	380ed7fa 	srli	r7,r7,31
 80150c8:	1886b03a 	or	r3,r3,r2
 80150cc:	300c90fa 	slli	r6,r6,3
 80150d0:	51009026 	beq	r10,r4,8015314 <__subdf3+0x2b0>
 80150d4:	39c0005c 	xori	r7,r7,1
 80150d8:	8285c83a 	sub	r2,r16,r10
 80150dc:	91c06f26 	beq	r18,r7,801529c <__subdf3+0x238>
 80150e0:	0080b10e 	bge	zero,r2,80153a8 <__subdf3+0x344>
 80150e4:	50002a1e 	bne	r10,zero,8015190 <__subdf3+0x12c>
 80150e8:	1988b03a 	or	r4,r3,r6
 80150ec:	2000941e 	bne	r4,zero,8015340 <__subdf3+0x2dc>
 80150f0:	888001cc 	andi	r2,r17,7
 80150f4:	10005b26 	beq	r2,zero,8015264 <__subdf3+0x200>
 80150f8:	88c003cc 	andi	r3,r17,15
 80150fc:	00800104 	movi	r2,4
 8015100:	18805826 	beq	r3,r2,8015264 <__subdf3+0x200>
 8015104:	88c00104 	addi	r3,r17,4
 8015108:	1c63803a 	cmpltu	r17,r3,r17
 801510c:	2c4b883a 	add	r5,r5,r17
 8015110:	2880202c 	andhi	r2,r5,128
 8015114:	9200004c 	andi	r8,r18,1
 8015118:	1823883a 	mov	r17,r3
 801511c:	10005426 	beq	r2,zero,8015270 <__subdf3+0x20c>
 8015120:	84000044 	addi	r16,r16,1
 8015124:	0081ffc4 	movi	r2,2047
 8015128:	8080bf26 	beq	r16,r2,8015428 <__subdf3+0x3c4>
 801512c:	013fe034 	movhi	r4,65408
 8015130:	213fffc4 	addi	r4,r4,-1
 8015134:	290a703a 	and	r5,r5,r4
 8015138:	2804977a 	slli	r2,r5,29
 801513c:	280a927a 	slli	r5,r5,9
 8015140:	8822d0fa 	srli	r17,r17,3
 8015144:	8401ffcc 	andi	r16,r16,2047
 8015148:	2808d33a 	srli	r4,r5,12
 801514c:	1444b03a 	or	r2,r2,r17
 8015150:	8401ffcc 	andi	r16,r16,2047
 8015154:	800a953a 	slli	r5,r16,20
 8015158:	40c03fcc 	andi	r3,r8,255
 801515c:	04000434 	movhi	r16,16
 8015160:	180697fa 	slli	r3,r3,31
 8015164:	843fffc4 	addi	r16,r16,-1
 8015168:	2420703a 	and	r16,r4,r16
 801516c:	8160b03a 	or	r16,r16,r5
 8015170:	80c6b03a 	or	r3,r16,r3
 8015174:	dfc00417 	ldw	ra,16(sp)
 8015178:	dcc00317 	ldw	r19,12(sp)
 801517c:	dc800217 	ldw	r18,8(sp)
 8015180:	dc400117 	ldw	r17,4(sp)
 8015184:	dc000017 	ldw	r16,0(sp)
 8015188:	dec00504 	addi	sp,sp,20
 801518c:	f800283a 	ret
 8015190:	0101ffc4 	movi	r4,2047
 8015194:	813fd626 	beq	r16,r4,80150f0 <__alt_data_end+0xfc0150f0>
 8015198:	18c02034 	orhi	r3,r3,128
 801519c:	01000e04 	movi	r4,56
 80151a0:	2080a416 	blt	r4,r2,8015434 <__subdf3+0x3d0>
 80151a4:	010007c4 	movi	r4,31
 80151a8:	2080c716 	blt	r4,r2,80154c8 <__subdf3+0x464>
 80151ac:	01000804 	movi	r4,32
 80151b0:	2089c83a 	sub	r4,r4,r2
 80151b4:	1910983a 	sll	r8,r3,r4
 80151b8:	308ed83a 	srl	r7,r6,r2
 80151bc:	3108983a 	sll	r4,r6,r4
 80151c0:	1884d83a 	srl	r2,r3,r2
 80151c4:	41ccb03a 	or	r6,r8,r7
 80151c8:	2008c03a 	cmpne	r4,r4,zero
 80151cc:	310cb03a 	or	r6,r6,r4
 80151d0:	898dc83a 	sub	r6,r17,r6
 80151d4:	89a3803a 	cmpltu	r17,r17,r6
 80151d8:	288bc83a 	sub	r5,r5,r2
 80151dc:	2c4bc83a 	sub	r5,r5,r17
 80151e0:	3023883a 	mov	r17,r6
 80151e4:	2880202c 	andhi	r2,r5,128
 80151e8:	10006b26 	beq	r2,zero,8015398 <__subdf3+0x334>
 80151ec:	04c02034 	movhi	r19,128
 80151f0:	9cffffc4 	addi	r19,r19,-1
 80151f4:	2ce6703a 	and	r19,r5,r19
 80151f8:	98007c26 	beq	r19,zero,80153ec <__subdf3+0x388>
 80151fc:	9809883a 	mov	r4,r19
 8015200:	80069040 	call	8006904 <__clzsi2>
 8015204:	10fffe04 	addi	r3,r2,-8
 8015208:	010007c4 	movi	r4,31
 801520c:	20c07d16 	blt	r4,r3,8015404 <__subdf3+0x3a0>
 8015210:	01400a04 	movi	r5,40
 8015214:	2885c83a 	sub	r2,r5,r2
 8015218:	888ad83a 	srl	r5,r17,r2
 801521c:	98e6983a 	sll	r19,r19,r3
 8015220:	88e2983a 	sll	r17,r17,r3
 8015224:	2ce6b03a 	or	r19,r5,r19
 8015228:	1c007a16 	blt	r3,r16,8015414 <__subdf3+0x3b0>
 801522c:	1c21c83a 	sub	r16,r3,r16
 8015230:	81400044 	addi	r5,r16,1
 8015234:	00c007c4 	movi	r3,31
 8015238:	19409616 	blt	r3,r5,8015494 <__subdf3+0x430>
 801523c:	1c21c83a 	sub	r16,r3,r16
 8015240:	8c08983a 	sll	r4,r17,r16
 8015244:	8946d83a 	srl	r3,r17,r5
 8015248:	9c20983a 	sll	r16,r19,r16
 801524c:	2008c03a 	cmpne	r4,r4,zero
 8015250:	994ad83a 	srl	r5,r19,r5
 8015254:	1c06b03a 	or	r3,r3,r16
 8015258:	1922b03a 	or	r17,r3,r4
 801525c:	0021883a 	mov	r16,zero
 8015260:	003fa306 	br	80150f0 <__alt_data_end+0xfc0150f0>
 8015264:	2880202c 	andhi	r2,r5,128
 8015268:	9200004c 	andi	r8,r18,1
 801526c:	103fac1e 	bne	r2,zero,8015120 <__alt_data_end+0xfc015120>
 8015270:	2804977a 	slli	r2,r5,29
 8015274:	8822d0fa 	srli	r17,r17,3
 8015278:	00c1ffc4 	movi	r3,2047
 801527c:	280ad0fa 	srli	r5,r5,3
 8015280:	1444b03a 	or	r2,r2,r17
 8015284:	80c02726 	beq	r16,r3,8015324 <__subdf3+0x2c0>
 8015288:	01000434 	movhi	r4,16
 801528c:	213fffc4 	addi	r4,r4,-1
 8015290:	80e0703a 	and	r16,r16,r3
 8015294:	2908703a 	and	r4,r5,r4
 8015298:	003fad06 	br	8015150 <__alt_data_end+0xfc015150>
 801529c:	0080690e 	bge	zero,r2,8015444 <__subdf3+0x3e0>
 80152a0:	50002f26 	beq	r10,zero,8015360 <__subdf3+0x2fc>
 80152a4:	0101ffc4 	movi	r4,2047
 80152a8:	813f9126 	beq	r16,r4,80150f0 <__alt_data_end+0xfc0150f0>
 80152ac:	18c02034 	orhi	r3,r3,128
 80152b0:	01000e04 	movi	r4,56
 80152b4:	2080b00e 	bge	r4,r2,8015578 <__subdf3+0x514>
 80152b8:	198cb03a 	or	r6,r3,r6
 80152bc:	300ec03a 	cmpne	r7,r6,zero
 80152c0:	0005883a 	mov	r2,zero
 80152c4:	3c4f883a 	add	r7,r7,r17
 80152c8:	3c63803a 	cmpltu	r17,r7,r17
 80152cc:	114b883a 	add	r5,r2,r5
 80152d0:	2c4b883a 	add	r5,r5,r17
 80152d4:	3823883a 	mov	r17,r7
 80152d8:	2880202c 	andhi	r2,r5,128
 80152dc:	10002e26 	beq	r2,zero,8015398 <__subdf3+0x334>
 80152e0:	84000044 	addi	r16,r16,1
 80152e4:	0081ffc4 	movi	r2,2047
 80152e8:	8080de26 	beq	r16,r2,8015664 <__subdf3+0x600>
 80152ec:	00bfe034 	movhi	r2,65408
 80152f0:	10bfffc4 	addi	r2,r2,-1
 80152f4:	288a703a 	and	r5,r5,r2
 80152f8:	880cd07a 	srli	r6,r17,1
 80152fc:	280897fa 	slli	r4,r5,31
 8015300:	88c0004c 	andi	r3,r17,1
 8015304:	30e2b03a 	or	r17,r6,r3
 8015308:	280ad07a 	srli	r5,r5,1
 801530c:	8922b03a 	or	r17,r17,r4
 8015310:	003f7706 	br	80150f0 <__alt_data_end+0xfc0150f0>
 8015314:	1984b03a 	or	r2,r3,r6
 8015318:	103f6e26 	beq	r2,zero,80150d4 <__alt_data_end+0xfc0150d4>
 801531c:	39c03fcc 	andi	r7,r7,255
 8015320:	003f6d06 	br	80150d8 <__alt_data_end+0xfc0150d8>
 8015324:	1146b03a 	or	r3,r2,r5
 8015328:	18003f26 	beq	r3,zero,8015428 <__subdf3+0x3c4>
 801532c:	00c00434 	movhi	r3,16
 8015330:	29000234 	orhi	r4,r5,8
 8015334:	18ffffc4 	addi	r3,r3,-1
 8015338:	20c8703a 	and	r4,r4,r3
 801533c:	003f8406 	br	8015150 <__alt_data_end+0xfc015150>
 8015340:	10bfffc4 	addi	r2,r2,-1
 8015344:	1000501e 	bne	r2,zero,8015488 <__subdf3+0x424>
 8015348:	898fc83a 	sub	r7,r17,r6
 801534c:	89e3803a 	cmpltu	r17,r17,r7
 8015350:	28cbc83a 	sub	r5,r5,r3
 8015354:	2c4bc83a 	sub	r5,r5,r17
 8015358:	3823883a 	mov	r17,r7
 801535c:	003fa106 	br	80151e4 <__alt_data_end+0xfc0151e4>
 8015360:	1988b03a 	or	r4,r3,r6
 8015364:	203f6226 	beq	r4,zero,80150f0 <__alt_data_end+0xfc0150f0>
 8015368:	10bfffc4 	addi	r2,r2,-1
 801536c:	10009b1e 	bne	r2,zero,80155dc <__subdf3+0x578>
 8015370:	344d883a 	add	r6,r6,r17
 8015374:	3463803a 	cmpltu	r17,r6,r17
 8015378:	194b883a 	add	r5,r3,r5
 801537c:	2c4b883a 	add	r5,r5,r17
 8015380:	3023883a 	mov	r17,r6
 8015384:	003fd406 	br	80152d8 <__alt_data_end+0xfc0152d8>
 8015388:	1106b03a 	or	r3,r2,r4
 801538c:	1800b426 	beq	r3,zero,8015660 <__subdf3+0x5fc>
 8015390:	100b883a 	mov	r5,r2
 8015394:	2023883a 	mov	r17,r4
 8015398:	888001cc 	andi	r2,r17,7
 801539c:	103f561e 	bne	r2,zero,80150f8 <__alt_data_end+0xfc0150f8>
 80153a0:	9200004c 	andi	r8,r18,1
 80153a4:	003fb206 	br	8015270 <__alt_data_end+0xfc015270>
 80153a8:	1000531e 	bne	r2,zero,80154f8 <__subdf3+0x494>
 80153ac:	80800044 	addi	r2,r16,1
 80153b0:	1081ffcc 	andi	r2,r2,2047
 80153b4:	01000044 	movi	r4,1
 80153b8:	2080a00e 	bge	r4,r2,801563c <__subdf3+0x5d8>
 80153bc:	8985c83a 	sub	r2,r17,r6
 80153c0:	8889803a 	cmpltu	r4,r17,r2
 80153c4:	28e7c83a 	sub	r19,r5,r3
 80153c8:	9927c83a 	sub	r19,r19,r4
 80153cc:	9900202c 	andhi	r4,r19,128
 80153d0:	20006226 	beq	r4,zero,801555c <__subdf3+0x4f8>
 80153d4:	3463c83a 	sub	r17,r6,r17
 80153d8:	194bc83a 	sub	r5,r3,r5
 80153dc:	344d803a 	cmpltu	r6,r6,r17
 80153e0:	29a7c83a 	sub	r19,r5,r6
 80153e4:	3825883a 	mov	r18,r7
 80153e8:	983f841e 	bne	r19,zero,80151fc <__alt_data_end+0xfc0151fc>
 80153ec:	8809883a 	mov	r4,r17
 80153f0:	80069040 	call	8006904 <__clzsi2>
 80153f4:	10800804 	addi	r2,r2,32
 80153f8:	10fffe04 	addi	r3,r2,-8
 80153fc:	010007c4 	movi	r4,31
 8015400:	20ff830e 	bge	r4,r3,8015210 <__alt_data_end+0xfc015210>
 8015404:	14fff604 	addi	r19,r2,-40
 8015408:	8ce6983a 	sll	r19,r17,r19
 801540c:	0023883a 	mov	r17,zero
 8015410:	1c3f860e 	bge	r3,r16,801522c <__alt_data_end+0xfc01522c>
 8015414:	017fe034 	movhi	r5,65408
 8015418:	297fffc4 	addi	r5,r5,-1
 801541c:	80e1c83a 	sub	r16,r16,r3
 8015420:	994a703a 	and	r5,r19,r5
 8015424:	003f3206 	br	80150f0 <__alt_data_end+0xfc0150f0>
 8015428:	0009883a 	mov	r4,zero
 801542c:	0005883a 	mov	r2,zero
 8015430:	003f4706 	br	8015150 <__alt_data_end+0xfc015150>
 8015434:	198cb03a 	or	r6,r3,r6
 8015438:	300cc03a 	cmpne	r6,r6,zero
 801543c:	0005883a 	mov	r2,zero
 8015440:	003f6306 	br	80151d0 <__alt_data_end+0xfc0151d0>
 8015444:	10009d1e 	bne	r2,zero,80156bc <__subdf3+0x658>
 8015448:	81c00044 	addi	r7,r16,1
 801544c:	3881ffcc 	andi	r2,r7,2047
 8015450:	02400044 	movi	r9,1
 8015454:	4880680e 	bge	r9,r2,80155f8 <__subdf3+0x594>
 8015458:	0081ffc4 	movi	r2,2047
 801545c:	3880ae26 	beq	r7,r2,8015718 <__subdf3+0x6b4>
 8015460:	344d883a 	add	r6,r6,r17
 8015464:	3463803a 	cmpltu	r17,r6,r17
 8015468:	194b883a 	add	r5,r3,r5
 801546c:	2c4b883a 	add	r5,r5,r17
 8015470:	282297fa 	slli	r17,r5,31
 8015474:	300cd07a 	srli	r6,r6,1
 8015478:	280ad07a 	srli	r5,r5,1
 801547c:	3821883a 	mov	r16,r7
 8015480:	89a2b03a 	or	r17,r17,r6
 8015484:	003f1a06 	br	80150f0 <__alt_data_end+0xfc0150f0>
 8015488:	0101ffc4 	movi	r4,2047
 801548c:	813f431e 	bne	r16,r4,801519c <__alt_data_end+0xfc01519c>
 8015490:	003f1706 	br	80150f0 <__alt_data_end+0xfc0150f0>
 8015494:	80bff844 	addi	r2,r16,-31
 8015498:	00c00804 	movi	r3,32
 801549c:	9884d83a 	srl	r2,r19,r2
 80154a0:	28c05126 	beq	r5,r3,80155e8 <__subdf3+0x584>
 80154a4:	00c00fc4 	movi	r3,63
 80154a8:	1c21c83a 	sub	r16,r3,r16
 80154ac:	9c26983a 	sll	r19,r19,r16
 80154b0:	9c62b03a 	or	r17,r19,r17
 80154b4:	8822c03a 	cmpne	r17,r17,zero
 80154b8:	88a2b03a 	or	r17,r17,r2
 80154bc:	000b883a 	mov	r5,zero
 80154c0:	0021883a 	mov	r16,zero
 80154c4:	003fb406 	br	8015398 <__alt_data_end+0xfc015398>
 80154c8:	113ff804 	addi	r4,r2,-32
 80154cc:	01c00804 	movi	r7,32
 80154d0:	1908d83a 	srl	r4,r3,r4
 80154d4:	11c04626 	beq	r2,r7,80155f0 <__subdf3+0x58c>
 80154d8:	01c01004 	movi	r7,64
 80154dc:	3885c83a 	sub	r2,r7,r2
 80154e0:	1884983a 	sll	r2,r3,r2
 80154e4:	118cb03a 	or	r6,r2,r6
 80154e8:	300cc03a 	cmpne	r6,r6,zero
 80154ec:	310cb03a 	or	r6,r6,r4
 80154f0:	0005883a 	mov	r2,zero
 80154f4:	003f3606 	br	80151d0 <__alt_data_end+0xfc0151d0>
 80154f8:	80002b26 	beq	r16,zero,80155a8 <__subdf3+0x544>
 80154fc:	0101ffc4 	movi	r4,2047
 8015500:	51006926 	beq	r10,r4,80156a8 <__subdf3+0x644>
 8015504:	0085c83a 	sub	r2,zero,r2
 8015508:	29402034 	orhi	r5,r5,128
 801550c:	01000e04 	movi	r4,56
 8015510:	20807d16 	blt	r4,r2,8015708 <__subdf3+0x6a4>
 8015514:	010007c4 	movi	r4,31
 8015518:	2080d916 	blt	r4,r2,8015880 <__subdf3+0x81c>
 801551c:	01000804 	movi	r4,32
 8015520:	2089c83a 	sub	r4,r4,r2
 8015524:	2912983a 	sll	r9,r5,r4
 8015528:	8890d83a 	srl	r8,r17,r2
 801552c:	8908983a 	sll	r4,r17,r4
 8015530:	2884d83a 	srl	r2,r5,r2
 8015534:	4a22b03a 	or	r17,r9,r8
 8015538:	2008c03a 	cmpne	r4,r4,zero
 801553c:	8922b03a 	or	r17,r17,r4
 8015540:	3463c83a 	sub	r17,r6,r17
 8015544:	1885c83a 	sub	r2,r3,r2
 8015548:	344d803a 	cmpltu	r6,r6,r17
 801554c:	118bc83a 	sub	r5,r2,r6
 8015550:	5021883a 	mov	r16,r10
 8015554:	3825883a 	mov	r18,r7
 8015558:	003f2206 	br	80151e4 <__alt_data_end+0xfc0151e4>
 801555c:	9886b03a 	or	r3,r19,r2
 8015560:	18001c1e 	bne	r3,zero,80155d4 <__subdf3+0x570>
 8015564:	0011883a 	mov	r8,zero
 8015568:	000b883a 	mov	r5,zero
 801556c:	0023883a 	mov	r17,zero
 8015570:	0021883a 	mov	r16,zero
 8015574:	003f3e06 	br	8015270 <__alt_data_end+0xfc015270>
 8015578:	010007c4 	movi	r4,31
 801557c:	20803c16 	blt	r4,r2,8015670 <__subdf3+0x60c>
 8015580:	01000804 	movi	r4,32
 8015584:	2089c83a 	sub	r4,r4,r2
 8015588:	1912983a 	sll	r9,r3,r4
 801558c:	308ed83a 	srl	r7,r6,r2
 8015590:	3108983a 	sll	r4,r6,r4
 8015594:	1884d83a 	srl	r2,r3,r2
 8015598:	49ceb03a 	or	r7,r9,r7
 801559c:	2008c03a 	cmpne	r4,r4,zero
 80155a0:	390eb03a 	or	r7,r7,r4
 80155a4:	003f4706 	br	80152c4 <__alt_data_end+0xfc0152c4>
 80155a8:	2c48b03a 	or	r4,r5,r17
 80155ac:	20003e26 	beq	r4,zero,80156a8 <__subdf3+0x644>
 80155b0:	0084303a 	nor	r2,zero,r2
 80155b4:	10003a1e 	bne	r2,zero,80156a0 <__subdf3+0x63c>
 80155b8:	3463c83a 	sub	r17,r6,r17
 80155bc:	194bc83a 	sub	r5,r3,r5
 80155c0:	344d803a 	cmpltu	r6,r6,r17
 80155c4:	298bc83a 	sub	r5,r5,r6
 80155c8:	5021883a 	mov	r16,r10
 80155cc:	3825883a 	mov	r18,r7
 80155d0:	003f0406 	br	80151e4 <__alt_data_end+0xfc0151e4>
 80155d4:	1023883a 	mov	r17,r2
 80155d8:	003f0706 	br	80151f8 <__alt_data_end+0xfc0151f8>
 80155dc:	0101ffc4 	movi	r4,2047
 80155e0:	813f331e 	bne	r16,r4,80152b0 <__alt_data_end+0xfc0152b0>
 80155e4:	003ec206 	br	80150f0 <__alt_data_end+0xfc0150f0>
 80155e8:	0027883a 	mov	r19,zero
 80155ec:	003fb006 	br	80154b0 <__alt_data_end+0xfc0154b0>
 80155f0:	0005883a 	mov	r2,zero
 80155f4:	003fbb06 	br	80154e4 <__alt_data_end+0xfc0154e4>
 80155f8:	2c44b03a 	or	r2,r5,r17
 80155fc:	80008b1e 	bne	r16,zero,801582c <__subdf3+0x7c8>
 8015600:	1000b526 	beq	r2,zero,80158d8 <__subdf3+0x874>
 8015604:	1984b03a 	or	r2,r3,r6
 8015608:	103eb926 	beq	r2,zero,80150f0 <__alt_data_end+0xfc0150f0>
 801560c:	3449883a 	add	r4,r6,r17
 8015610:	2463803a 	cmpltu	r17,r4,r17
 8015614:	194b883a 	add	r5,r3,r5
 8015618:	2c4b883a 	add	r5,r5,r17
 801561c:	2880202c 	andhi	r2,r5,128
 8015620:	2023883a 	mov	r17,r4
 8015624:	103f5c26 	beq	r2,zero,8015398 <__alt_data_end+0xfc015398>
 8015628:	00bfe034 	movhi	r2,65408
 801562c:	10bfffc4 	addi	r2,r2,-1
 8015630:	4821883a 	mov	r16,r9
 8015634:	288a703a 	and	r5,r5,r2
 8015638:	003ead06 	br	80150f0 <__alt_data_end+0xfc0150f0>
 801563c:	2c44b03a 	or	r2,r5,r17
 8015640:	8000291e 	bne	r16,zero,80156e8 <__subdf3+0x684>
 8015644:	10004f1e 	bne	r2,zero,8015784 <__subdf3+0x720>
 8015648:	1984b03a 	or	r2,r3,r6
 801564c:	10000426 	beq	r2,zero,8015660 <__subdf3+0x5fc>
 8015650:	180b883a 	mov	r5,r3
 8015654:	3023883a 	mov	r17,r6
 8015658:	3825883a 	mov	r18,r7
 801565c:	003ea406 	br	80150f0 <__alt_data_end+0xfc0150f0>
 8015660:	0011883a 	mov	r8,zero
 8015664:	000b883a 	mov	r5,zero
 8015668:	0023883a 	mov	r17,zero
 801566c:	003f0006 	br	8015270 <__alt_data_end+0xfc015270>
 8015670:	11fff804 	addi	r7,r2,-32
 8015674:	19c8d83a 	srl	r4,r3,r7
 8015678:	01c00804 	movi	r7,32
 801567c:	11c07e26 	beq	r2,r7,8015878 <__subdf3+0x814>
 8015680:	01c01004 	movi	r7,64
 8015684:	3885c83a 	sub	r2,r7,r2
 8015688:	1884983a 	sll	r2,r3,r2
 801568c:	118cb03a 	or	r6,r2,r6
 8015690:	300ec03a 	cmpne	r7,r6,zero
 8015694:	390eb03a 	or	r7,r7,r4
 8015698:	0005883a 	mov	r2,zero
 801569c:	003f0906 	br	80152c4 <__alt_data_end+0xfc0152c4>
 80156a0:	0101ffc4 	movi	r4,2047
 80156a4:	513f991e 	bne	r10,r4,801550c <__alt_data_end+0xfc01550c>
 80156a8:	180b883a 	mov	r5,r3
 80156ac:	3023883a 	mov	r17,r6
 80156b0:	5021883a 	mov	r16,r10
 80156b4:	3825883a 	mov	r18,r7
 80156b8:	003e8d06 	br	80150f0 <__alt_data_end+0xfc0150f0>
 80156bc:	80001a1e 	bne	r16,zero,8015728 <__subdf3+0x6c4>
 80156c0:	2c48b03a 	or	r4,r5,r17
 80156c4:	20005526 	beq	r4,zero,801581c <__subdf3+0x7b8>
 80156c8:	0084303a 	nor	r2,zero,r2
 80156cc:	1000511e 	bne	r2,zero,8015814 <__subdf3+0x7b0>
 80156d0:	89a3883a 	add	r17,r17,r6
 80156d4:	194b883a 	add	r5,r3,r5
 80156d8:	898d803a 	cmpltu	r6,r17,r6
 80156dc:	298b883a 	add	r5,r5,r6
 80156e0:	5021883a 	mov	r16,r10
 80156e4:	003efc06 	br	80152d8 <__alt_data_end+0xfc0152d8>
 80156e8:	1000341e 	bne	r2,zero,80157bc <__subdf3+0x758>
 80156ec:	1984b03a 	or	r2,r3,r6
 80156f0:	10006f26 	beq	r2,zero,80158b0 <__subdf3+0x84c>
 80156f4:	180b883a 	mov	r5,r3
 80156f8:	3023883a 	mov	r17,r6
 80156fc:	3825883a 	mov	r18,r7
 8015700:	0401ffc4 	movi	r16,2047
 8015704:	003e7a06 	br	80150f0 <__alt_data_end+0xfc0150f0>
 8015708:	2c62b03a 	or	r17,r5,r17
 801570c:	8822c03a 	cmpne	r17,r17,zero
 8015710:	0005883a 	mov	r2,zero
 8015714:	003f8a06 	br	8015540 <__alt_data_end+0xfc015540>
 8015718:	3821883a 	mov	r16,r7
 801571c:	000b883a 	mov	r5,zero
 8015720:	0023883a 	mov	r17,zero
 8015724:	003ed206 	br	8015270 <__alt_data_end+0xfc015270>
 8015728:	0101ffc4 	movi	r4,2047
 801572c:	51003b26 	beq	r10,r4,801581c <__subdf3+0x7b8>
 8015730:	0085c83a 	sub	r2,zero,r2
 8015734:	29402034 	orhi	r5,r5,128
 8015738:	01000e04 	movi	r4,56
 801573c:	20806216 	blt	r4,r2,80158c8 <__subdf3+0x864>
 8015740:	010007c4 	movi	r4,31
 8015744:	20806b16 	blt	r4,r2,80158f4 <__subdf3+0x890>
 8015748:	01000804 	movi	r4,32
 801574c:	2089c83a 	sub	r4,r4,r2
 8015750:	2912983a 	sll	r9,r5,r4
 8015754:	888ed83a 	srl	r7,r17,r2
 8015758:	8908983a 	sll	r4,r17,r4
 801575c:	2884d83a 	srl	r2,r5,r2
 8015760:	49e2b03a 	or	r17,r9,r7
 8015764:	2008c03a 	cmpne	r4,r4,zero
 8015768:	8922b03a 	or	r17,r17,r4
 801576c:	89a3883a 	add	r17,r17,r6
 8015770:	10c5883a 	add	r2,r2,r3
 8015774:	898d803a 	cmpltu	r6,r17,r6
 8015778:	118b883a 	add	r5,r2,r6
 801577c:	5021883a 	mov	r16,r10
 8015780:	003ed506 	br	80152d8 <__alt_data_end+0xfc0152d8>
 8015784:	1984b03a 	or	r2,r3,r6
 8015788:	103e5926 	beq	r2,zero,80150f0 <__alt_data_end+0xfc0150f0>
 801578c:	8989c83a 	sub	r4,r17,r6
 8015790:	8911803a 	cmpltu	r8,r17,r4
 8015794:	28c5c83a 	sub	r2,r5,r3
 8015798:	1205c83a 	sub	r2,r2,r8
 801579c:	1200202c 	andhi	r8,r2,128
 80157a0:	403ef926 	beq	r8,zero,8015388 <__alt_data_end+0xfc015388>
 80157a4:	3463c83a 	sub	r17,r6,r17
 80157a8:	194bc83a 	sub	r5,r3,r5
 80157ac:	344d803a 	cmpltu	r6,r6,r17
 80157b0:	298bc83a 	sub	r5,r5,r6
 80157b4:	3825883a 	mov	r18,r7
 80157b8:	003e4d06 	br	80150f0 <__alt_data_end+0xfc0150f0>
 80157bc:	1984b03a 	or	r2,r3,r6
 80157c0:	10002b26 	beq	r2,zero,8015870 <__subdf3+0x80c>
 80157c4:	2808d0fa 	srli	r4,r5,3
 80157c8:	8822d0fa 	srli	r17,r17,3
 80157cc:	280a977a 	slli	r5,r5,29
 80157d0:	2080022c 	andhi	r2,r4,8
 80157d4:	2c62b03a 	or	r17,r5,r17
 80157d8:	10000826 	beq	r2,zero,80157fc <__subdf3+0x798>
 80157dc:	1810d0fa 	srli	r8,r3,3
 80157e0:	4080022c 	andhi	r2,r8,8
 80157e4:	1000051e 	bne	r2,zero,80157fc <__subdf3+0x798>
 80157e8:	300cd0fa 	srli	r6,r6,3
 80157ec:	1804977a 	slli	r2,r3,29
 80157f0:	4009883a 	mov	r4,r8
 80157f4:	3825883a 	mov	r18,r7
 80157f8:	11a2b03a 	or	r17,r2,r6
 80157fc:	880ad77a 	srli	r5,r17,29
 8015800:	200890fa 	slli	r4,r4,3
 8015804:	882290fa 	slli	r17,r17,3
 8015808:	0401ffc4 	movi	r16,2047
 801580c:	290ab03a 	or	r5,r5,r4
 8015810:	003e3706 	br	80150f0 <__alt_data_end+0xfc0150f0>
 8015814:	0101ffc4 	movi	r4,2047
 8015818:	513fc71e 	bne	r10,r4,8015738 <__alt_data_end+0xfc015738>
 801581c:	180b883a 	mov	r5,r3
 8015820:	3023883a 	mov	r17,r6
 8015824:	5021883a 	mov	r16,r10
 8015828:	003e3106 	br	80150f0 <__alt_data_end+0xfc0150f0>
 801582c:	10002d26 	beq	r2,zero,80158e4 <__subdf3+0x880>
 8015830:	1984b03a 	or	r2,r3,r6
 8015834:	10000e26 	beq	r2,zero,8015870 <__subdf3+0x80c>
 8015838:	2808d0fa 	srli	r4,r5,3
 801583c:	8822d0fa 	srli	r17,r17,3
 8015840:	280a977a 	slli	r5,r5,29
 8015844:	2080022c 	andhi	r2,r4,8
 8015848:	2c62b03a 	or	r17,r5,r17
 801584c:	103feb26 	beq	r2,zero,80157fc <__alt_data_end+0xfc0157fc>
 8015850:	180ed0fa 	srli	r7,r3,3
 8015854:	3880022c 	andhi	r2,r7,8
 8015858:	103fe81e 	bne	r2,zero,80157fc <__alt_data_end+0xfc0157fc>
 801585c:	300cd0fa 	srli	r6,r6,3
 8015860:	1804977a 	slli	r2,r3,29
 8015864:	3809883a 	mov	r4,r7
 8015868:	11a2b03a 	or	r17,r2,r6
 801586c:	003fe306 	br	80157fc <__alt_data_end+0xfc0157fc>
 8015870:	0401ffc4 	movi	r16,2047
 8015874:	003e1e06 	br	80150f0 <__alt_data_end+0xfc0150f0>
 8015878:	0005883a 	mov	r2,zero
 801587c:	003f8306 	br	801568c <__alt_data_end+0xfc01568c>
 8015880:	113ff804 	addi	r4,r2,-32
 8015884:	02000804 	movi	r8,32
 8015888:	2908d83a 	srl	r4,r5,r4
 801588c:	12002526 	beq	r2,r8,8015924 <__subdf3+0x8c0>
 8015890:	02001004 	movi	r8,64
 8015894:	4085c83a 	sub	r2,r8,r2
 8015898:	288a983a 	sll	r5,r5,r2
 801589c:	2c62b03a 	or	r17,r5,r17
 80158a0:	8822c03a 	cmpne	r17,r17,zero
 80158a4:	8922b03a 	or	r17,r17,r4
 80158a8:	0005883a 	mov	r2,zero
 80158ac:	003f2406 	br	8015540 <__alt_data_end+0xfc015540>
 80158b0:	01402034 	movhi	r5,128
 80158b4:	0011883a 	mov	r8,zero
 80158b8:	297fffc4 	addi	r5,r5,-1
 80158bc:	047ffe04 	movi	r17,-8
 80158c0:	0401ffc4 	movi	r16,2047
 80158c4:	003e6a06 	br	8015270 <__alt_data_end+0xfc015270>
 80158c8:	2c62b03a 	or	r17,r5,r17
 80158cc:	8822c03a 	cmpne	r17,r17,zero
 80158d0:	0005883a 	mov	r2,zero
 80158d4:	003fa506 	br	801576c <__alt_data_end+0xfc01576c>
 80158d8:	180b883a 	mov	r5,r3
 80158dc:	3023883a 	mov	r17,r6
 80158e0:	003e0306 	br	80150f0 <__alt_data_end+0xfc0150f0>
 80158e4:	180b883a 	mov	r5,r3
 80158e8:	3023883a 	mov	r17,r6
 80158ec:	0401ffc4 	movi	r16,2047
 80158f0:	003dff06 	br	80150f0 <__alt_data_end+0xfc0150f0>
 80158f4:	113ff804 	addi	r4,r2,-32
 80158f8:	01c00804 	movi	r7,32
 80158fc:	2908d83a 	srl	r4,r5,r4
 8015900:	11c00a26 	beq	r2,r7,801592c <__subdf3+0x8c8>
 8015904:	01c01004 	movi	r7,64
 8015908:	3885c83a 	sub	r2,r7,r2
 801590c:	288a983a 	sll	r5,r5,r2
 8015910:	2c62b03a 	or	r17,r5,r17
 8015914:	8822c03a 	cmpne	r17,r17,zero
 8015918:	8922b03a 	or	r17,r17,r4
 801591c:	0005883a 	mov	r2,zero
 8015920:	003f9206 	br	801576c <__alt_data_end+0xfc01576c>
 8015924:	000b883a 	mov	r5,zero
 8015928:	003fdc06 	br	801589c <__alt_data_end+0xfc01589c>
 801592c:	000b883a 	mov	r5,zero
 8015930:	003ff706 	br	8015910 <__alt_data_end+0xfc015910>

08015934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015934:	defffe04 	addi	sp,sp,-8
 8015938:	dfc00115 	stw	ra,4(sp)
 801593c:	df000015 	stw	fp,0(sp)
 8015940:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015944:	008200b4 	movhi	r2,2050
 8015948:	1094e904 	addi	r2,r2,21412
 801594c:	10800017 	ldw	r2,0(r2)
 8015950:	10000526 	beq	r2,zero,8015968 <alt_get_errno+0x34>
 8015954:	008200b4 	movhi	r2,2050
 8015958:	1094e904 	addi	r2,r2,21412
 801595c:	10800017 	ldw	r2,0(r2)
 8015960:	103ee83a 	callr	r2
 8015964:	00000206 	br	8015970 <alt_get_errno+0x3c>
 8015968:	008200b4 	movhi	r2,2050
 801596c:	109bbd04 	addi	r2,r2,28404
}
 8015970:	e037883a 	mov	sp,fp
 8015974:	dfc00117 	ldw	ra,4(sp)
 8015978:	df000017 	ldw	fp,0(sp)
 801597c:	dec00204 	addi	sp,sp,8
 8015980:	f800283a 	ret

08015984 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8015984:	defffb04 	addi	sp,sp,-20
 8015988:	dfc00415 	stw	ra,16(sp)
 801598c:	df000315 	stw	fp,12(sp)
 8015990:	df000304 	addi	fp,sp,12
 8015994:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8015998:	e0bfff17 	ldw	r2,-4(fp)
 801599c:	10000816 	blt	r2,zero,80159c0 <close+0x3c>
 80159a0:	e13fff17 	ldw	r4,-4(fp)
 80159a4:	01400304 	movi	r5,12
 80159a8:	8004c100 	call	8004c10 <__mulsi3>
 80159ac:	1007883a 	mov	r3,r2
 80159b0:	008200b4 	movhi	r2,2050
 80159b4:	10905a04 	addi	r2,r2,16744
 80159b8:	1885883a 	add	r2,r3,r2
 80159bc:	00000106 	br	80159c4 <close+0x40>
 80159c0:	0005883a 	mov	r2,zero
 80159c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80159c8:	e0bffd17 	ldw	r2,-12(fp)
 80159cc:	10001926 	beq	r2,zero,8015a34 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80159d0:	e0bffd17 	ldw	r2,-12(fp)
 80159d4:	10800017 	ldw	r2,0(r2)
 80159d8:	10800417 	ldw	r2,16(r2)
 80159dc:	10000626 	beq	r2,zero,80159f8 <close+0x74>
 80159e0:	e0bffd17 	ldw	r2,-12(fp)
 80159e4:	10800017 	ldw	r2,0(r2)
 80159e8:	10800417 	ldw	r2,16(r2)
 80159ec:	e13ffd17 	ldw	r4,-12(fp)
 80159f0:	103ee83a 	callr	r2
 80159f4:	00000106 	br	80159fc <close+0x78>
 80159f8:	0005883a 	mov	r2,zero
 80159fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8015a00:	e13fff17 	ldw	r4,-4(fp)
 8015a04:	80162bc0 	call	80162bc <alt_release_fd>
    if (rval < 0)
 8015a08:	e0bffe17 	ldw	r2,-8(fp)
 8015a0c:	1000070e 	bge	r2,zero,8015a2c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8015a10:	80159340 	call	8015934 <alt_get_errno>
 8015a14:	1007883a 	mov	r3,r2
 8015a18:	e0bffe17 	ldw	r2,-8(fp)
 8015a1c:	0085c83a 	sub	r2,zero,r2
 8015a20:	18800015 	stw	r2,0(r3)
      return -1;
 8015a24:	00bfffc4 	movi	r2,-1
 8015a28:	00000706 	br	8015a48 <close+0xc4>
    }
    return 0;
 8015a2c:	0005883a 	mov	r2,zero
 8015a30:	00000506 	br	8015a48 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015a34:	80159340 	call	8015934 <alt_get_errno>
 8015a38:	1007883a 	mov	r3,r2
 8015a3c:	00801444 	movi	r2,81
 8015a40:	18800015 	stw	r2,0(r3)
    return -1;
 8015a44:	00bfffc4 	movi	r2,-1
  }
}
 8015a48:	e037883a 	mov	sp,fp
 8015a4c:	dfc00117 	ldw	ra,4(sp)
 8015a50:	df000017 	ldw	fp,0(sp)
 8015a54:	dec00204 	addi	sp,sp,8
 8015a58:	f800283a 	ret

08015a5c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8015a5c:	defffc04 	addi	sp,sp,-16
 8015a60:	df000315 	stw	fp,12(sp)
 8015a64:	df000304 	addi	fp,sp,12
 8015a68:	e13ffd15 	stw	r4,-12(fp)
 8015a6c:	e17ffe15 	stw	r5,-8(fp)
 8015a70:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8015a74:	e0bfff17 	ldw	r2,-4(fp)
}
 8015a78:	e037883a 	mov	sp,fp
 8015a7c:	df000017 	ldw	fp,0(sp)
 8015a80:	dec00104 	addi	sp,sp,4
 8015a84:	f800283a 	ret

08015a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015a88:	defffe04 	addi	sp,sp,-8
 8015a8c:	dfc00115 	stw	ra,4(sp)
 8015a90:	df000015 	stw	fp,0(sp)
 8015a94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015a98:	008200b4 	movhi	r2,2050
 8015a9c:	1094e904 	addi	r2,r2,21412
 8015aa0:	10800017 	ldw	r2,0(r2)
 8015aa4:	10000526 	beq	r2,zero,8015abc <alt_get_errno+0x34>
 8015aa8:	008200b4 	movhi	r2,2050
 8015aac:	1094e904 	addi	r2,r2,21412
 8015ab0:	10800017 	ldw	r2,0(r2)
 8015ab4:	103ee83a 	callr	r2
 8015ab8:	00000206 	br	8015ac4 <alt_get_errno+0x3c>
 8015abc:	008200b4 	movhi	r2,2050
 8015ac0:	109bbd04 	addi	r2,r2,28404
}
 8015ac4:	e037883a 	mov	sp,fp
 8015ac8:	dfc00117 	ldw	ra,4(sp)
 8015acc:	df000017 	ldw	fp,0(sp)
 8015ad0:	dec00204 	addi	sp,sp,8
 8015ad4:	f800283a 	ret

08015ad8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8015ad8:	defffb04 	addi	sp,sp,-20
 8015adc:	dfc00415 	stw	ra,16(sp)
 8015ae0:	df000315 	stw	fp,12(sp)
 8015ae4:	df000304 	addi	fp,sp,12
 8015ae8:	e13ffe15 	stw	r4,-8(fp)
 8015aec:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015af0:	e0bffe17 	ldw	r2,-8(fp)
 8015af4:	10000816 	blt	r2,zero,8015b18 <fstat+0x40>
 8015af8:	e13ffe17 	ldw	r4,-8(fp)
 8015afc:	01400304 	movi	r5,12
 8015b00:	8004c100 	call	8004c10 <__mulsi3>
 8015b04:	1007883a 	mov	r3,r2
 8015b08:	008200b4 	movhi	r2,2050
 8015b0c:	10905a04 	addi	r2,r2,16744
 8015b10:	1885883a 	add	r2,r3,r2
 8015b14:	00000106 	br	8015b1c <fstat+0x44>
 8015b18:	0005883a 	mov	r2,zero
 8015b1c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8015b20:	e0bffd17 	ldw	r2,-12(fp)
 8015b24:	10001026 	beq	r2,zero,8015b68 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8015b28:	e0bffd17 	ldw	r2,-12(fp)
 8015b2c:	10800017 	ldw	r2,0(r2)
 8015b30:	10800817 	ldw	r2,32(r2)
 8015b34:	10000726 	beq	r2,zero,8015b54 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8015b38:	e0bffd17 	ldw	r2,-12(fp)
 8015b3c:	10800017 	ldw	r2,0(r2)
 8015b40:	10800817 	ldw	r2,32(r2)
 8015b44:	e13ffd17 	ldw	r4,-12(fp)
 8015b48:	e17fff17 	ldw	r5,-4(fp)
 8015b4c:	103ee83a 	callr	r2
 8015b50:	00000a06 	br	8015b7c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8015b54:	e0bfff17 	ldw	r2,-4(fp)
 8015b58:	00c80004 	movi	r3,8192
 8015b5c:	10c00115 	stw	r3,4(r2)
      return 0;
 8015b60:	0005883a 	mov	r2,zero
 8015b64:	00000506 	br	8015b7c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015b68:	8015a880 	call	8015a88 <alt_get_errno>
 8015b6c:	1007883a 	mov	r3,r2
 8015b70:	00801444 	movi	r2,81
 8015b74:	18800015 	stw	r2,0(r3)
    return -1;
 8015b78:	00bfffc4 	movi	r2,-1
  }
}
 8015b7c:	e037883a 	mov	sp,fp
 8015b80:	dfc00117 	ldw	ra,4(sp)
 8015b84:	df000017 	ldw	fp,0(sp)
 8015b88:	dec00204 	addi	sp,sp,8
 8015b8c:	f800283a 	ret

08015b90 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 8015b90:	defff404 	addi	sp,sp,-48
 8015b94:	dfc00b15 	stw	ra,44(sp)
 8015b98:	df000a15 	stw	fp,40(sp)
 8015b9c:	dd000915 	stw	r20,36(sp)
 8015ba0:	dcc00815 	stw	r19,32(sp)
 8015ba4:	dc800715 	stw	r18,28(sp)
 8015ba8:	dc400615 	stw	r17,24(sp)
 8015bac:	dc000515 	stw	r16,20(sp)
 8015bb0:	df000a04 	addi	fp,sp,40
 8015bb4:	e13ff915 	stw	r4,-28(fp)
 8015bb8:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 8015bbc:	e0bffa17 	ldw	r2,-24(fp)
 8015bc0:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8015bc4:	008200b4 	movhi	r2,2050
 8015bc8:	109bc904 	addi	r2,r2,28452
 8015bcc:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 8015bd0:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8015bd4:	008200b4 	movhi	r2,2050
 8015bd8:	109bc804 	addi	r2,r2,28448
 8015bdc:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
 8015be0:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 8015be4:	e0bff817 	ldw	r2,-32(fp)
 8015be8:	10006326 	beq	r2,zero,8015d78 <gettimeofday+0x1e8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 8015bec:	d0a6e617 	ldw	r2,-25704(gp)
 8015bf0:	1029883a 	mov	r20,r2
 8015bf4:	e13ff717 	ldw	r4,-36(fp)
 8015bf8:	e17ff817 	ldw	r5,-32(fp)
 8015bfc:	8004c000 	call	8004c00 <__udivsi3>
 8015c00:	a085883a 	add	r2,r20,r2
 8015c04:	1007883a 	mov	r3,r2
 8015c08:	e0bff917 	ldw	r2,-28(fp)
 8015c0c:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 8015c10:	d0a6e704 	addi	r2,gp,-25700
 8015c14:	10800017 	ldw	r2,0(r2)
 8015c18:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 8015c1c:	e0bff717 	ldw	r2,-36(fp)
 8015c20:	1025883a 	mov	r18,r2
 8015c24:	0027883a 	mov	r19,zero
 8015c28:	010003f4 	movhi	r4,15
 8015c2c:	21109004 	addi	r4,r4,16960
 8015c30:	e17ff817 	ldw	r5,-32(fp)
 8015c34:	8004c000 	call	8004c00 <__udivsi3>
 8015c38:	1021883a 	mov	r16,r2
 8015c3c:	0023883a 	mov	r17,zero
 8015c40:	9009883a 	mov	r4,r18
 8015c44:	980b883a 	mov	r5,r19
 8015c48:	800d883a 	mov	r6,r16
 8015c4c:	880f883a 	mov	r7,r17
 8015c50:	801381c0 	call	801381c <__muldi3>
 8015c54:	100f883a 	mov	r7,r2
 8015c58:	1811883a 	mov	r8,r3
 8015c5c:	380b883a 	mov	r5,r7
 8015c60:	400d883a 	mov	r6,r8
 8015c64:	008003f4 	movhi	r2,15
 8015c68:	10909004 	addi	r2,r2,16960
 8015c6c:	0007883a 	mov	r3,zero
 8015c70:	2809883a 	mov	r4,r5
 8015c74:	300b883a 	mov	r5,r6
 8015c78:	100d883a 	mov	r6,r2
 8015c7c:	180f883a 	mov	r7,r3
 8015c80:	8013f680 	call	8013f68 <__umoddi3>
 8015c84:	1009883a 	mov	r4,r2
 8015c88:	180b883a 	mov	r5,r3
 8015c8c:	2005883a 	mov	r2,r4
 8015c90:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 8015c94:	a085883a 	add	r2,r20,r2
 8015c98:	1007883a 	mov	r3,r2
 8015c9c:	e0bff917 	ldw	r2,-28(fp)
 8015ca0:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 8015ca4:	00001406 	br	8015cf8 <gettimeofday+0x168>
      if (ptimeval->tv_sec <= 0)
 8015ca8:	e0bff917 	ldw	r2,-28(fp)
 8015cac:	10800017 	ldw	r2,0(r2)
 8015cb0:	00800516 	blt	zero,r2,8015cc8 <gettimeofday+0x138>
      {
          ptimeval->tv_sec = 0;
 8015cb4:	e0bff917 	ldw	r2,-28(fp)
 8015cb8:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 8015cbc:	e0bff917 	ldw	r2,-28(fp)
 8015cc0:	10000115 	stw	zero,4(r2)
          break;
 8015cc4:	00000f06 	br	8015d04 <gettimeofday+0x174>
      }
      else
      {
          ptimeval->tv_sec--;
 8015cc8:	e0bff917 	ldw	r2,-28(fp)
 8015ccc:	10800017 	ldw	r2,0(r2)
 8015cd0:	10ffffc4 	addi	r3,r2,-1
 8015cd4:	e0bff917 	ldw	r2,-28(fp)
 8015cd8:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 8015cdc:	e0bff917 	ldw	r2,-28(fp)
 8015ce0:	10c00117 	ldw	r3,4(r2)
 8015ce4:	008003f4 	movhi	r2,15
 8015ce8:	10909004 	addi	r2,r2,16960
 8015cec:	1887883a 	add	r3,r3,r2
 8015cf0:	e0bff917 	ldw	r2,-28(fp)
 8015cf4:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 8015cf8:	e0bff917 	ldw	r2,-28(fp)
 8015cfc:	10800117 	ldw	r2,4(r2)
 8015d00:	103fe916 	blt	r2,zero,8015ca8 <__alt_data_end+0xfc015ca8>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 8015d04:	00000c06 	br	8015d38 <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
 8015d08:	e0bff917 	ldw	r2,-28(fp)
 8015d0c:	10800017 	ldw	r2,0(r2)
 8015d10:	10c00044 	addi	r3,r2,1
 8015d14:	e0bff917 	ldw	r2,-28(fp)
 8015d18:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 8015d1c:	e0bff917 	ldw	r2,-28(fp)
 8015d20:	10c00117 	ldw	r3,4(r2)
 8015d24:	00bffc74 	movhi	r2,65521
 8015d28:	10af7004 	addi	r2,r2,-16960
 8015d2c:	1887883a 	add	r3,r3,r2
 8015d30:	e0bff917 	ldw	r2,-28(fp)
 8015d34:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 8015d38:	e0bff917 	ldw	r2,-28(fp)
 8015d3c:	10c00117 	ldw	r3,4(r2)
 8015d40:	008003f4 	movhi	r2,15
 8015d44:	10908fc4 	addi	r2,r2,16959
 8015d48:	10ffef16 	blt	r2,r3,8015d08 <__alt_data_end+0xfc015d08>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 8015d4c:	e0bff617 	ldw	r2,-40(fp)
 8015d50:	10000726 	beq	r2,zero,8015d70 <gettimeofday+0x1e0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 8015d54:	d0e6e417 	ldw	r3,-25712(gp)
 8015d58:	e0bff617 	ldw	r2,-40(fp)
 8015d5c:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 8015d60:	d0a6e504 	addi	r2,gp,-25708
 8015d64:	10c00017 	ldw	r3,0(r2)
 8015d68:	e0bff617 	ldw	r2,-40(fp)
 8015d6c:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 8015d70:	0005883a 	mov	r2,zero
 8015d74:	00000106 	br	8015d7c <gettimeofday+0x1ec>
  }

  return -ENOTSUP;
 8015d78:	00bfde84 	movi	r2,-134
}
 8015d7c:	e6fffb04 	addi	sp,fp,-20
 8015d80:	dfc00617 	ldw	ra,24(sp)
 8015d84:	df000517 	ldw	fp,20(sp)
 8015d88:	dd000417 	ldw	r20,16(sp)
 8015d8c:	dcc00317 	ldw	r19,12(sp)
 8015d90:	dc800217 	ldw	r18,8(sp)
 8015d94:	dc400117 	ldw	r17,4(sp)
 8015d98:	dc000017 	ldw	r16,0(sp)
 8015d9c:	dec00704 	addi	sp,sp,28
 8015da0:	f800283a 	ret

08015da4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015da4:	defffe04 	addi	sp,sp,-8
 8015da8:	dfc00115 	stw	ra,4(sp)
 8015dac:	df000015 	stw	fp,0(sp)
 8015db0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015db4:	008200b4 	movhi	r2,2050
 8015db8:	1094e904 	addi	r2,r2,21412
 8015dbc:	10800017 	ldw	r2,0(r2)
 8015dc0:	10000526 	beq	r2,zero,8015dd8 <alt_get_errno+0x34>
 8015dc4:	008200b4 	movhi	r2,2050
 8015dc8:	1094e904 	addi	r2,r2,21412
 8015dcc:	10800017 	ldw	r2,0(r2)
 8015dd0:	103ee83a 	callr	r2
 8015dd4:	00000206 	br	8015de0 <alt_get_errno+0x3c>
 8015dd8:	008200b4 	movhi	r2,2050
 8015ddc:	109bbd04 	addi	r2,r2,28404
}
 8015de0:	e037883a 	mov	sp,fp
 8015de4:	dfc00117 	ldw	ra,4(sp)
 8015de8:	df000017 	ldw	fp,0(sp)
 8015dec:	dec00204 	addi	sp,sp,8
 8015df0:	f800283a 	ret

08015df4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8015df4:	deffed04 	addi	sp,sp,-76
 8015df8:	dfc01215 	stw	ra,72(sp)
 8015dfc:	df001115 	stw	fp,68(sp)
 8015e00:	df001104 	addi	fp,sp,68
 8015e04:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015e08:	e0bfff17 	ldw	r2,-4(fp)
 8015e0c:	10000816 	blt	r2,zero,8015e30 <isatty+0x3c>
 8015e10:	e13fff17 	ldw	r4,-4(fp)
 8015e14:	01400304 	movi	r5,12
 8015e18:	8004c100 	call	8004c10 <__mulsi3>
 8015e1c:	1007883a 	mov	r3,r2
 8015e20:	008200b4 	movhi	r2,2050
 8015e24:	10905a04 	addi	r2,r2,16744
 8015e28:	1885883a 	add	r2,r3,r2
 8015e2c:	00000106 	br	8015e34 <isatty+0x40>
 8015e30:	0005883a 	mov	r2,zero
 8015e34:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8015e38:	e0bfef17 	ldw	r2,-68(fp)
 8015e3c:	10000e26 	beq	r2,zero,8015e78 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8015e40:	e0bfef17 	ldw	r2,-68(fp)
 8015e44:	10800017 	ldw	r2,0(r2)
 8015e48:	10800817 	ldw	r2,32(r2)
 8015e4c:	1000021e 	bne	r2,zero,8015e58 <isatty+0x64>
    {
      return 1;
 8015e50:	00800044 	movi	r2,1
 8015e54:	00000d06 	br	8015e8c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8015e58:	e0bff004 	addi	r2,fp,-64
 8015e5c:	e13fff17 	ldw	r4,-4(fp)
 8015e60:	100b883a 	mov	r5,r2
 8015e64:	8015ad80 	call	8015ad8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8015e68:	e0bff117 	ldw	r2,-60(fp)
 8015e6c:	10880020 	cmpeqi	r2,r2,8192
 8015e70:	10803fcc 	andi	r2,r2,255
 8015e74:	00000506 	br	8015e8c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015e78:	8015da40 	call	8015da4 <alt_get_errno>
 8015e7c:	1007883a 	mov	r3,r2
 8015e80:	00801444 	movi	r2,81
 8015e84:	18800015 	stw	r2,0(r3)
    return 0;
 8015e88:	0005883a 	mov	r2,zero
  }
}
 8015e8c:	e037883a 	mov	sp,fp
 8015e90:	dfc00117 	ldw	ra,4(sp)
 8015e94:	df000017 	ldw	fp,0(sp)
 8015e98:	dec00204 	addi	sp,sp,8
 8015e9c:	f800283a 	ret

08015ea0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8015ea0:	defffc04 	addi	sp,sp,-16
 8015ea4:	df000315 	stw	fp,12(sp)
 8015ea8:	df000304 	addi	fp,sp,12
 8015eac:	e13ffd15 	stw	r4,-12(fp)
 8015eb0:	e17ffe15 	stw	r5,-8(fp)
 8015eb4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8015eb8:	e0fffe17 	ldw	r3,-8(fp)
 8015ebc:	e0bffd17 	ldw	r2,-12(fp)
 8015ec0:	18800c26 	beq	r3,r2,8015ef4 <alt_load_section+0x54>
  {
    while( to != end )
 8015ec4:	00000806 	br	8015ee8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8015ec8:	e0bffe17 	ldw	r2,-8(fp)
 8015ecc:	10c00104 	addi	r3,r2,4
 8015ed0:	e0fffe15 	stw	r3,-8(fp)
 8015ed4:	e0fffd17 	ldw	r3,-12(fp)
 8015ed8:	19000104 	addi	r4,r3,4
 8015edc:	e13ffd15 	stw	r4,-12(fp)
 8015ee0:	18c00017 	ldw	r3,0(r3)
 8015ee4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8015ee8:	e0fffe17 	ldw	r3,-8(fp)
 8015eec:	e0bfff17 	ldw	r2,-4(fp)
 8015ef0:	18bff51e 	bne	r3,r2,8015ec8 <__alt_data_end+0xfc015ec8>
    {
      *to++ = *from++;
    }
  }
}
 8015ef4:	e037883a 	mov	sp,fp
 8015ef8:	df000017 	ldw	fp,0(sp)
 8015efc:	dec00104 	addi	sp,sp,4
 8015f00:	f800283a 	ret

08015f04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8015f04:	defffe04 	addi	sp,sp,-8
 8015f08:	dfc00115 	stw	ra,4(sp)
 8015f0c:	df000015 	stw	fp,0(sp)
 8015f10:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8015f14:	010200b4 	movhi	r4,2050
 8015f18:	2114ee04 	addi	r4,r4,21432
 8015f1c:	014200b4 	movhi	r5,2050
 8015f20:	294e2704 	addi	r5,r5,14492
 8015f24:	018200b4 	movhi	r6,2050
 8015f28:	3194ee04 	addi	r6,r6,21432
 8015f2c:	8015ea00 	call	8015ea0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8015f30:	01020034 	movhi	r4,2048
 8015f34:	21000804 	addi	r4,r4,32
 8015f38:	01420034 	movhi	r5,2048
 8015f3c:	29400804 	addi	r5,r5,32
 8015f40:	01820034 	movhi	r6,2048
 8015f44:	31806f04 	addi	r6,r6,444
 8015f48:	8015ea00 	call	8015ea0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8015f4c:	010200b4 	movhi	r4,2050
 8015f50:	21226204 	addi	r4,r4,-30328
 8015f54:	014200b4 	movhi	r5,2050
 8015f58:	29626204 	addi	r5,r5,-30328
 8015f5c:	018200b4 	movhi	r6,2050
 8015f60:	318e2704 	addi	r6,r6,14492
 8015f64:	8015ea00 	call	8015ea0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8015f68:	8017a9c0 	call	8017a9c <alt_dcache_flush_all>
  alt_icache_flush_all();
 8015f6c:	8017cf40 	call	8017cf4 <alt_icache_flush_all>
}
 8015f70:	e037883a 	mov	sp,fp
 8015f74:	dfc00117 	ldw	ra,4(sp)
 8015f78:	df000017 	ldw	fp,0(sp)
 8015f7c:	dec00204 	addi	sp,sp,8
 8015f80:	f800283a 	ret

08015f84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015f84:	defffe04 	addi	sp,sp,-8
 8015f88:	dfc00115 	stw	ra,4(sp)
 8015f8c:	df000015 	stw	fp,0(sp)
 8015f90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015f94:	008200b4 	movhi	r2,2050
 8015f98:	1094e904 	addi	r2,r2,21412
 8015f9c:	10800017 	ldw	r2,0(r2)
 8015fa0:	10000526 	beq	r2,zero,8015fb8 <alt_get_errno+0x34>
 8015fa4:	008200b4 	movhi	r2,2050
 8015fa8:	1094e904 	addi	r2,r2,21412
 8015fac:	10800017 	ldw	r2,0(r2)
 8015fb0:	103ee83a 	callr	r2
 8015fb4:	00000206 	br	8015fc0 <alt_get_errno+0x3c>
 8015fb8:	008200b4 	movhi	r2,2050
 8015fbc:	109bbd04 	addi	r2,r2,28404
}
 8015fc0:	e037883a 	mov	sp,fp
 8015fc4:	dfc00117 	ldw	ra,4(sp)
 8015fc8:	df000017 	ldw	fp,0(sp)
 8015fcc:	dec00204 	addi	sp,sp,8
 8015fd0:	f800283a 	ret

08015fd4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8015fd4:	defff904 	addi	sp,sp,-28
 8015fd8:	dfc00615 	stw	ra,24(sp)
 8015fdc:	df000515 	stw	fp,20(sp)
 8015fe0:	df000504 	addi	fp,sp,20
 8015fe4:	e13ffd15 	stw	r4,-12(fp)
 8015fe8:	e17ffe15 	stw	r5,-8(fp)
 8015fec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8015ff0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015ff4:	e0bffd17 	ldw	r2,-12(fp)
 8015ff8:	10000816 	blt	r2,zero,801601c <lseek+0x48>
 8015ffc:	e13ffd17 	ldw	r4,-12(fp)
 8016000:	01400304 	movi	r5,12
 8016004:	8004c100 	call	8004c10 <__mulsi3>
 8016008:	1007883a 	mov	r3,r2
 801600c:	008200b4 	movhi	r2,2050
 8016010:	10905a04 	addi	r2,r2,16744
 8016014:	1885883a 	add	r2,r3,r2
 8016018:	00000106 	br	8016020 <lseek+0x4c>
 801601c:	0005883a 	mov	r2,zero
 8016020:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8016024:	e0bffc17 	ldw	r2,-16(fp)
 8016028:	10001026 	beq	r2,zero,801606c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 801602c:	e0bffc17 	ldw	r2,-16(fp)
 8016030:	10800017 	ldw	r2,0(r2)
 8016034:	10800717 	ldw	r2,28(r2)
 8016038:	10000926 	beq	r2,zero,8016060 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 801603c:	e0bffc17 	ldw	r2,-16(fp)
 8016040:	10800017 	ldw	r2,0(r2)
 8016044:	10800717 	ldw	r2,28(r2)
 8016048:	e13ffc17 	ldw	r4,-16(fp)
 801604c:	e17ffe17 	ldw	r5,-8(fp)
 8016050:	e1bfff17 	ldw	r6,-4(fp)
 8016054:	103ee83a 	callr	r2
 8016058:	e0bffb15 	stw	r2,-20(fp)
 801605c:	00000506 	br	8016074 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8016060:	00bfde84 	movi	r2,-134
 8016064:	e0bffb15 	stw	r2,-20(fp)
 8016068:	00000206 	br	8016074 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 801606c:	00bfebc4 	movi	r2,-81
 8016070:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8016074:	e0bffb17 	ldw	r2,-20(fp)
 8016078:	1000070e 	bge	r2,zero,8016098 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 801607c:	8015f840 	call	8015f84 <alt_get_errno>
 8016080:	1007883a 	mov	r3,r2
 8016084:	e0bffb17 	ldw	r2,-20(fp)
 8016088:	0085c83a 	sub	r2,zero,r2
 801608c:	18800015 	stw	r2,0(r3)
    rc = -1;
 8016090:	00bfffc4 	movi	r2,-1
 8016094:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8016098:	e0bffb17 	ldw	r2,-20(fp)
}
 801609c:	e037883a 	mov	sp,fp
 80160a0:	dfc00117 	ldw	ra,4(sp)
 80160a4:	df000017 	ldw	fp,0(sp)
 80160a8:	dec00204 	addi	sp,sp,8
 80160ac:	f800283a 	ret

080160b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80160b0:	defffd04 	addi	sp,sp,-12
 80160b4:	dfc00215 	stw	ra,8(sp)
 80160b8:	df000115 	stw	fp,4(sp)
 80160bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80160c0:	0009883a 	mov	r4,zero
 80160c4:	80167400 	call	8016740 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80160c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80160cc:	80167740 	call	8016774 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80160d0:	010200b4 	movhi	r4,2050
 80160d4:	210e1704 	addi	r4,r4,14428
 80160d8:	014200b4 	movhi	r5,2050
 80160dc:	294e1704 	addi	r5,r5,14428
 80160e0:	018200b4 	movhi	r6,2050
 80160e4:	318e1704 	addi	r6,r6,14428
 80160e8:	80180c00 	call	80180c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80160ec:	8017bac0 	call	8017bac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80160f0:	01020074 	movhi	r4,2049
 80160f4:	211f0204 	addi	r4,r4,31752
 80160f8:	80185e40 	call	80185e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80160fc:	d126e817 	ldw	r4,-25696(gp)
 8016100:	d0e6e917 	ldw	r3,-25692(gp)
 8016104:	d0a6ea17 	ldw	r2,-25688(gp)
 8016108:	180b883a 	mov	r5,r3
 801610c:	100d883a 	mov	r6,r2
 8016110:	800247c0 	call	800247c <main>
 8016114:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8016118:	01000044 	movi	r4,1
 801611c:	80159840 	call	8015984 <close>
  exit (result);
 8016120:	e13fff17 	ldw	r4,-4(fp)
 8016124:	80185f80 	call	80185f8 <exit>

08016128 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8016128:	defffe04 	addi	sp,sp,-8
 801612c:	df000115 	stw	fp,4(sp)
 8016130:	df000104 	addi	fp,sp,4
 8016134:	e13fff15 	stw	r4,-4(fp)
}
 8016138:	e037883a 	mov	sp,fp
 801613c:	df000017 	ldw	fp,0(sp)
 8016140:	dec00104 	addi	sp,sp,4
 8016144:	f800283a 	ret

08016148 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8016148:	defffe04 	addi	sp,sp,-8
 801614c:	df000115 	stw	fp,4(sp)
 8016150:	df000104 	addi	fp,sp,4
 8016154:	e13fff15 	stw	r4,-4(fp)
}
 8016158:	e037883a 	mov	sp,fp
 801615c:	df000017 	ldw	fp,0(sp)
 8016160:	dec00104 	addi	sp,sp,4
 8016164:	f800283a 	ret

08016168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016168:	defffe04 	addi	sp,sp,-8
 801616c:	dfc00115 	stw	ra,4(sp)
 8016170:	df000015 	stw	fp,0(sp)
 8016174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016178:	008200b4 	movhi	r2,2050
 801617c:	1094e904 	addi	r2,r2,21412
 8016180:	10800017 	ldw	r2,0(r2)
 8016184:	10000526 	beq	r2,zero,801619c <alt_get_errno+0x34>
 8016188:	008200b4 	movhi	r2,2050
 801618c:	1094e904 	addi	r2,r2,21412
 8016190:	10800017 	ldw	r2,0(r2)
 8016194:	103ee83a 	callr	r2
 8016198:	00000206 	br	80161a4 <alt_get_errno+0x3c>
 801619c:	008200b4 	movhi	r2,2050
 80161a0:	109bbd04 	addi	r2,r2,28404
}
 80161a4:	e037883a 	mov	sp,fp
 80161a8:	dfc00117 	ldw	ra,4(sp)
 80161ac:	df000017 	ldw	fp,0(sp)
 80161b0:	dec00204 	addi	sp,sp,8
 80161b4:	f800283a 	ret

080161b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80161b8:	defff904 	addi	sp,sp,-28
 80161bc:	dfc00615 	stw	ra,24(sp)
 80161c0:	df000515 	stw	fp,20(sp)
 80161c4:	df000504 	addi	fp,sp,20
 80161c8:	e13ffd15 	stw	r4,-12(fp)
 80161cc:	e17ffe15 	stw	r5,-8(fp)
 80161d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80161d4:	e0bffd17 	ldw	r2,-12(fp)
 80161d8:	10000816 	blt	r2,zero,80161fc <read+0x44>
 80161dc:	e13ffd17 	ldw	r4,-12(fp)
 80161e0:	01400304 	movi	r5,12
 80161e4:	8004c100 	call	8004c10 <__mulsi3>
 80161e8:	1007883a 	mov	r3,r2
 80161ec:	008200b4 	movhi	r2,2050
 80161f0:	10905a04 	addi	r2,r2,16744
 80161f4:	1885883a 	add	r2,r3,r2
 80161f8:	00000106 	br	8016200 <read+0x48>
 80161fc:	0005883a 	mov	r2,zero
 8016200:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8016204:	e0bffb17 	ldw	r2,-20(fp)
 8016208:	10002226 	beq	r2,zero,8016294 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801620c:	e0bffb17 	ldw	r2,-20(fp)
 8016210:	10800217 	ldw	r2,8(r2)
 8016214:	108000cc 	andi	r2,r2,3
 8016218:	10800060 	cmpeqi	r2,r2,1
 801621c:	1000181e 	bne	r2,zero,8016280 <read+0xc8>
        (fd->dev->read))
 8016220:	e0bffb17 	ldw	r2,-20(fp)
 8016224:	10800017 	ldw	r2,0(r2)
 8016228:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801622c:	10001426 	beq	r2,zero,8016280 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8016230:	e0bffb17 	ldw	r2,-20(fp)
 8016234:	10800017 	ldw	r2,0(r2)
 8016238:	10800517 	ldw	r2,20(r2)
 801623c:	e0ffff17 	ldw	r3,-4(fp)
 8016240:	e13ffb17 	ldw	r4,-20(fp)
 8016244:	e17ffe17 	ldw	r5,-8(fp)
 8016248:	180d883a 	mov	r6,r3
 801624c:	103ee83a 	callr	r2
 8016250:	e0bffc15 	stw	r2,-16(fp)
 8016254:	e0bffc17 	ldw	r2,-16(fp)
 8016258:	1000070e 	bge	r2,zero,8016278 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 801625c:	80161680 	call	8016168 <alt_get_errno>
 8016260:	1007883a 	mov	r3,r2
 8016264:	e0bffc17 	ldw	r2,-16(fp)
 8016268:	0085c83a 	sub	r2,zero,r2
 801626c:	18800015 	stw	r2,0(r3)
          return -1;
 8016270:	00bfffc4 	movi	r2,-1
 8016274:	00000c06 	br	80162a8 <read+0xf0>
        }
        return rval;
 8016278:	e0bffc17 	ldw	r2,-16(fp)
 801627c:	00000a06 	br	80162a8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8016280:	80161680 	call	8016168 <alt_get_errno>
 8016284:	1007883a 	mov	r3,r2
 8016288:	00800344 	movi	r2,13
 801628c:	18800015 	stw	r2,0(r3)
 8016290:	00000406 	br	80162a4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8016294:	80161680 	call	8016168 <alt_get_errno>
 8016298:	1007883a 	mov	r3,r2
 801629c:	00801444 	movi	r2,81
 80162a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80162a4:	00bfffc4 	movi	r2,-1
}
 80162a8:	e037883a 	mov	sp,fp
 80162ac:	dfc00117 	ldw	ra,4(sp)
 80162b0:	df000017 	ldw	fp,0(sp)
 80162b4:	dec00204 	addi	sp,sp,8
 80162b8:	f800283a 	ret

080162bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80162bc:	defffc04 	addi	sp,sp,-16
 80162c0:	dfc00315 	stw	ra,12(sp)
 80162c4:	df000215 	stw	fp,8(sp)
 80162c8:	dc000115 	stw	r16,4(sp)
 80162cc:	df000204 	addi	fp,sp,8
 80162d0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80162d4:	e0bffe17 	ldw	r2,-8(fp)
 80162d8:	108000d0 	cmplti	r2,r2,3
 80162dc:	1000111e 	bne	r2,zero,8016324 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80162e0:	040200b4 	movhi	r16,2050
 80162e4:	84105a04 	addi	r16,r16,16744
 80162e8:	e0bffe17 	ldw	r2,-8(fp)
 80162ec:	1009883a 	mov	r4,r2
 80162f0:	01400304 	movi	r5,12
 80162f4:	8004c100 	call	8004c10 <__mulsi3>
 80162f8:	8085883a 	add	r2,r16,r2
 80162fc:	10800204 	addi	r2,r2,8
 8016300:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8016304:	040200b4 	movhi	r16,2050
 8016308:	84105a04 	addi	r16,r16,16744
 801630c:	e0bffe17 	ldw	r2,-8(fp)
 8016310:	1009883a 	mov	r4,r2
 8016314:	01400304 	movi	r5,12
 8016318:	8004c100 	call	8004c10 <__mulsi3>
 801631c:	8085883a 	add	r2,r16,r2
 8016320:	10000015 	stw	zero,0(r2)
  }
}
 8016324:	e6ffff04 	addi	sp,fp,-4
 8016328:	dfc00217 	ldw	ra,8(sp)
 801632c:	df000117 	ldw	fp,4(sp)
 8016330:	dc000017 	ldw	r16,0(sp)
 8016334:	dec00304 	addi	sp,sp,12
 8016338:	f800283a 	ret

0801633c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 801633c:	defff904 	addi	sp,sp,-28
 8016340:	df000615 	stw	fp,24(sp)
 8016344:	df000604 	addi	fp,sp,24
 8016348:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801634c:	0005303a 	rdctl	r2,status
 8016350:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016354:	e0fffc17 	ldw	r3,-16(fp)
 8016358:	00bfff84 	movi	r2,-2
 801635c:	1884703a 	and	r2,r3,r2
 8016360:	1001703a 	wrctl	status,r2
  
  return context;
 8016364:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8016368:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 801636c:	d0a00d17 	ldw	r2,-32716(gp)
 8016370:	10c000c4 	addi	r3,r2,3
 8016374:	00bfff04 	movi	r2,-4
 8016378:	1884703a 	and	r2,r3,r2
 801637c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8016380:	d0e00d17 	ldw	r3,-32716(gp)
 8016384:	e0bfff17 	ldw	r2,-4(fp)
 8016388:	1887883a 	add	r3,r3,r2
 801638c:	00830034 	movhi	r2,3072
 8016390:	10800004 	addi	r2,r2,0
 8016394:	10c0062e 	bgeu	r2,r3,80163b0 <sbrk+0x74>
 8016398:	e0bffa17 	ldw	r2,-24(fp)
 801639c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80163a0:	e0bffd17 	ldw	r2,-12(fp)
 80163a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80163a8:	00bfffc4 	movi	r2,-1
 80163ac:	00000b06 	br	80163dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80163b0:	d0a00d17 	ldw	r2,-32716(gp)
 80163b4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 80163b8:	d0e00d17 	ldw	r3,-32716(gp)
 80163bc:	e0bfff17 	ldw	r2,-4(fp)
 80163c0:	1885883a 	add	r2,r3,r2
 80163c4:	d0a00d15 	stw	r2,-32716(gp)
 80163c8:	e0bffa17 	ldw	r2,-24(fp)
 80163cc:	e0bffe15 	stw	r2,-8(fp)
 80163d0:	e0bffe17 	ldw	r2,-8(fp)
 80163d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80163d8:	e0bffb17 	ldw	r2,-20(fp)
} 
 80163dc:	e037883a 	mov	sp,fp
 80163e0:	df000017 	ldw	fp,0(sp)
 80163e4:	dec00104 	addi	sp,sp,4
 80163e8:	f800283a 	ret

080163ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80163ec:	defffa04 	addi	sp,sp,-24
 80163f0:	df000515 	stw	fp,20(sp)
 80163f4:	df000504 	addi	fp,sp,20
 80163f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80163fc:	0005303a 	rdctl	r2,status
 8016400:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016404:	e0fffc17 	ldw	r3,-16(fp)
 8016408:	00bfff84 	movi	r2,-2
 801640c:	1884703a 	and	r2,r3,r2
 8016410:	1001703a 	wrctl	status,r2
  
  return context;
 8016414:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8016418:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 801641c:	e0bfff17 	ldw	r2,-4(fp)
 8016420:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8016424:	e0bffd17 	ldw	r2,-12(fp)
 8016428:	10800017 	ldw	r2,0(r2)
 801642c:	e0fffd17 	ldw	r3,-12(fp)
 8016430:	18c00117 	ldw	r3,4(r3)
 8016434:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8016438:	e0bffd17 	ldw	r2,-12(fp)
 801643c:	10800117 	ldw	r2,4(r2)
 8016440:	e0fffd17 	ldw	r3,-12(fp)
 8016444:	18c00017 	ldw	r3,0(r3)
 8016448:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 801644c:	e0bffd17 	ldw	r2,-12(fp)
 8016450:	e0fffd17 	ldw	r3,-12(fp)
 8016454:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8016458:	e0bffd17 	ldw	r2,-12(fp)
 801645c:	e0fffd17 	ldw	r3,-12(fp)
 8016460:	10c00015 	stw	r3,0(r2)
 8016464:	e0bffb17 	ldw	r2,-20(fp)
 8016468:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801646c:	e0bffe17 	ldw	r2,-8(fp)
 8016470:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8016474:	e037883a 	mov	sp,fp
 8016478:	df000017 	ldw	fp,0(sp)
 801647c:	dec00104 	addi	sp,sp,4
 8016480:	f800283a 	ret

08016484 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8016484:	defffb04 	addi	sp,sp,-20
 8016488:	dfc00415 	stw	ra,16(sp)
 801648c:	df000315 	stw	fp,12(sp)
 8016490:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8016494:	d0a00e17 	ldw	r2,-32712(gp)
 8016498:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 801649c:	d0a6ec17 	ldw	r2,-25680(gp)
 80164a0:	10800044 	addi	r2,r2,1
 80164a4:	d0a6ec15 	stw	r2,-25680(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80164a8:	00002e06 	br	8016564 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80164ac:	e0bffd17 	ldw	r2,-12(fp)
 80164b0:	10800017 	ldw	r2,0(r2)
 80164b4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80164b8:	e0bffd17 	ldw	r2,-12(fp)
 80164bc:	10800403 	ldbu	r2,16(r2)
 80164c0:	10803fcc 	andi	r2,r2,255
 80164c4:	10000426 	beq	r2,zero,80164d8 <alt_tick+0x54>
 80164c8:	d0a6ec17 	ldw	r2,-25680(gp)
 80164cc:	1000021e 	bne	r2,zero,80164d8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80164d0:	e0bffd17 	ldw	r2,-12(fp)
 80164d4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80164d8:	e0bffd17 	ldw	r2,-12(fp)
 80164dc:	10800217 	ldw	r2,8(r2)
 80164e0:	d0e6ec17 	ldw	r3,-25680(gp)
 80164e4:	18801d36 	bltu	r3,r2,801655c <alt_tick+0xd8>
 80164e8:	e0bffd17 	ldw	r2,-12(fp)
 80164ec:	10800403 	ldbu	r2,16(r2)
 80164f0:	10803fcc 	andi	r2,r2,255
 80164f4:	1000191e 	bne	r2,zero,801655c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80164f8:	e0bffd17 	ldw	r2,-12(fp)
 80164fc:	10800317 	ldw	r2,12(r2)
 8016500:	e0fffd17 	ldw	r3,-12(fp)
 8016504:	18c00517 	ldw	r3,20(r3)
 8016508:	1809883a 	mov	r4,r3
 801650c:	103ee83a 	callr	r2
 8016510:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8016514:	e0bfff17 	ldw	r2,-4(fp)
 8016518:	1000031e 	bne	r2,zero,8016528 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 801651c:	e13ffd17 	ldw	r4,-12(fp)
 8016520:	80163ec0 	call	80163ec <alt_alarm_stop>
 8016524:	00000d06 	br	801655c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8016528:	e0bffd17 	ldw	r2,-12(fp)
 801652c:	10c00217 	ldw	r3,8(r2)
 8016530:	e0bfff17 	ldw	r2,-4(fp)
 8016534:	1887883a 	add	r3,r3,r2
 8016538:	e0bffd17 	ldw	r2,-12(fp)
 801653c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8016540:	e0bffd17 	ldw	r2,-12(fp)
 8016544:	10c00217 	ldw	r3,8(r2)
 8016548:	d0a6ec17 	ldw	r2,-25680(gp)
 801654c:	1880032e 	bgeu	r3,r2,801655c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8016550:	e0bffd17 	ldw	r2,-12(fp)
 8016554:	00c00044 	movi	r3,1
 8016558:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 801655c:	e0bffe17 	ldw	r2,-8(fp)
 8016560:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8016564:	e0fffd17 	ldw	r3,-12(fp)
 8016568:	d0a00e04 	addi	r2,gp,-32712
 801656c:	18bfcf1e 	bne	r3,r2,80164ac <__alt_data_end+0xfc0164ac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8016570:	0001883a 	nop
}
 8016574:	e037883a 	mov	sp,fp
 8016578:	dfc00117 	ldw	ra,4(sp)
 801657c:	df000017 	ldw	fp,0(sp)
 8016580:	dec00204 	addi	sp,sp,8
 8016584:	f800283a 	ret

08016588 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8016588:	defffd04 	addi	sp,sp,-12
 801658c:	dfc00215 	stw	ra,8(sp)
 8016590:	df000115 	stw	fp,4(sp)
 8016594:	df000104 	addi	fp,sp,4
 8016598:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 801659c:	e13fff17 	ldw	r4,-4(fp)
 80165a0:	80179440 	call	8017944 <alt_busy_sleep>
}
 80165a4:	e037883a 	mov	sp,fp
 80165a8:	dfc00117 	ldw	ra,4(sp)
 80165ac:	df000017 	ldw	fp,0(sp)
 80165b0:	dec00204 	addi	sp,sp,8
 80165b4:	f800283a 	ret

080165b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80165b8:	defffe04 	addi	sp,sp,-8
 80165bc:	dfc00115 	stw	ra,4(sp)
 80165c0:	df000015 	stw	fp,0(sp)
 80165c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80165c8:	008200b4 	movhi	r2,2050
 80165cc:	1094e904 	addi	r2,r2,21412
 80165d0:	10800017 	ldw	r2,0(r2)
 80165d4:	10000526 	beq	r2,zero,80165ec <alt_get_errno+0x34>
 80165d8:	008200b4 	movhi	r2,2050
 80165dc:	1094e904 	addi	r2,r2,21412
 80165e0:	10800017 	ldw	r2,0(r2)
 80165e4:	103ee83a 	callr	r2
 80165e8:	00000206 	br	80165f4 <alt_get_errno+0x3c>
 80165ec:	008200b4 	movhi	r2,2050
 80165f0:	109bbd04 	addi	r2,r2,28404
}
 80165f4:	e037883a 	mov	sp,fp
 80165f8:	dfc00117 	ldw	ra,4(sp)
 80165fc:	df000017 	ldw	fp,0(sp)
 8016600:	dec00204 	addi	sp,sp,8
 8016604:	f800283a 	ret

08016608 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8016608:	defff904 	addi	sp,sp,-28
 801660c:	dfc00615 	stw	ra,24(sp)
 8016610:	df000515 	stw	fp,20(sp)
 8016614:	df000504 	addi	fp,sp,20
 8016618:	e13ffd15 	stw	r4,-12(fp)
 801661c:	e17ffe15 	stw	r5,-8(fp)
 8016620:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8016624:	e0bffd17 	ldw	r2,-12(fp)
 8016628:	10000816 	blt	r2,zero,801664c <write+0x44>
 801662c:	e13ffd17 	ldw	r4,-12(fp)
 8016630:	01400304 	movi	r5,12
 8016634:	8004c100 	call	8004c10 <__mulsi3>
 8016638:	1007883a 	mov	r3,r2
 801663c:	008200b4 	movhi	r2,2050
 8016640:	10905a04 	addi	r2,r2,16744
 8016644:	1885883a 	add	r2,r3,r2
 8016648:	00000106 	br	8016650 <write+0x48>
 801664c:	0005883a 	mov	r2,zero
 8016650:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8016654:	e0bffb17 	ldw	r2,-20(fp)
 8016658:	10002126 	beq	r2,zero,80166e0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 801665c:	e0bffb17 	ldw	r2,-20(fp)
 8016660:	10800217 	ldw	r2,8(r2)
 8016664:	108000cc 	andi	r2,r2,3
 8016668:	10001826 	beq	r2,zero,80166cc <write+0xc4>
 801666c:	e0bffb17 	ldw	r2,-20(fp)
 8016670:	10800017 	ldw	r2,0(r2)
 8016674:	10800617 	ldw	r2,24(r2)
 8016678:	10001426 	beq	r2,zero,80166cc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 801667c:	e0bffb17 	ldw	r2,-20(fp)
 8016680:	10800017 	ldw	r2,0(r2)
 8016684:	10800617 	ldw	r2,24(r2)
 8016688:	e0ffff17 	ldw	r3,-4(fp)
 801668c:	e13ffb17 	ldw	r4,-20(fp)
 8016690:	e17ffe17 	ldw	r5,-8(fp)
 8016694:	180d883a 	mov	r6,r3
 8016698:	103ee83a 	callr	r2
 801669c:	e0bffc15 	stw	r2,-16(fp)
 80166a0:	e0bffc17 	ldw	r2,-16(fp)
 80166a4:	1000070e 	bge	r2,zero,80166c4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 80166a8:	80165b80 	call	80165b8 <alt_get_errno>
 80166ac:	1007883a 	mov	r3,r2
 80166b0:	e0bffc17 	ldw	r2,-16(fp)
 80166b4:	0085c83a 	sub	r2,zero,r2
 80166b8:	18800015 	stw	r2,0(r3)
        return -1;
 80166bc:	00bfffc4 	movi	r2,-1
 80166c0:	00000c06 	br	80166f4 <write+0xec>
      }
      return rval;
 80166c4:	e0bffc17 	ldw	r2,-16(fp)
 80166c8:	00000a06 	br	80166f4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80166cc:	80165b80 	call	80165b8 <alt_get_errno>
 80166d0:	1007883a 	mov	r3,r2
 80166d4:	00800344 	movi	r2,13
 80166d8:	18800015 	stw	r2,0(r3)
 80166dc:	00000406 	br	80166f0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80166e0:	80165b80 	call	80165b8 <alt_get_errno>
 80166e4:	1007883a 	mov	r3,r2
 80166e8:	00801444 	movi	r2,81
 80166ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80166f0:	00bfffc4 	movi	r2,-1
}
 80166f4:	e037883a 	mov	sp,fp
 80166f8:	dfc00117 	ldw	ra,4(sp)
 80166fc:	df000017 	ldw	fp,0(sp)
 8016700:	dec00204 	addi	sp,sp,8
 8016704:	f800283a 	ret

08016708 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8016708:	defffd04 	addi	sp,sp,-12
 801670c:	dfc00215 	stw	ra,8(sp)
 8016710:	df000115 	stw	fp,4(sp)
 8016714:	df000104 	addi	fp,sp,4
 8016718:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 801671c:	e13fff17 	ldw	r4,-4(fp)
 8016720:	014200b4 	movhi	r5,2050
 8016724:	2954e604 	addi	r5,r5,21400
 8016728:	8017b080 	call	8017b08 <alt_dev_llist_insert>
}
 801672c:	e037883a 	mov	sp,fp
 8016730:	dfc00117 	ldw	ra,4(sp)
 8016734:	df000017 	ldw	fp,0(sp)
 8016738:	dec00204 	addi	sp,sp,8
 801673c:	f800283a 	ret

08016740 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8016740:	defffd04 	addi	sp,sp,-12
 8016744:	dfc00215 	stw	ra,8(sp)
 8016748:	df000115 	stw	fp,4(sp)
 801674c:	df000104 	addi	fp,sp,4
 8016750:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 8016754:	80183dc0 	call	80183dc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8016758:	00800044 	movi	r2,1
 801675c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8016760:	e037883a 	mov	sp,fp
 8016764:	dfc00117 	ldw	ra,4(sp)
 8016768:	df000017 	ldw	fp,0(sp)
 801676c:	dec00204 	addi	sp,sp,8
 8016770:	f800283a 	ret

08016774 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8016774:	defffe04 	addi	sp,sp,-8
 8016778:	dfc00115 	stw	ra,4(sp)
 801677c:	df000015 	stw	fp,0(sp)
 8016780:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8016784:	01082004 	movi	r4,8320
 8016788:	000b883a 	mov	r5,zero
 801678c:	01800104 	movi	r6,4
 8016790:	01c0fa04 	movi	r7,1000
 8016794:	80172a40 	call	80172a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8016798:	010200b4 	movhi	r4,2050
 801679c:	2110c404 	addi	r4,r4,17168
 80167a0:	000b883a 	mov	r5,zero
 80167a4:	000d883a 	mov	r6,zero
 80167a8:	80169480 	call	8016948 <altera_avalon_jtag_uart_init>
 80167ac:	010200b4 	movhi	r4,2050
 80167b0:	2110ba04 	addi	r4,r4,17128
 80167b4:	80167080 	call	8016708 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 80167b8:	010200b4 	movhi	r4,2050
 80167bc:	2114d204 	addi	r4,r4,21320
 80167c0:	80173dc0 	call	80173dc <alt_up_character_lcd_init>
 80167c4:	010200b4 	movhi	r4,2050
 80167c8:	2114d204 	addi	r4,r4,21320
 80167cc:	80167080 	call	8016708 <alt_dev_reg>
}
 80167d0:	e037883a 	mov	sp,fp
 80167d4:	dfc00117 	ldw	ra,4(sp)
 80167d8:	df000017 	ldw	fp,0(sp)
 80167dc:	dec00204 	addi	sp,sp,8
 80167e0:	f800283a 	ret

080167e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80167e4:	defffa04 	addi	sp,sp,-24
 80167e8:	dfc00515 	stw	ra,20(sp)
 80167ec:	df000415 	stw	fp,16(sp)
 80167f0:	df000404 	addi	fp,sp,16
 80167f4:	e13ffd15 	stw	r4,-12(fp)
 80167f8:	e17ffe15 	stw	r5,-8(fp)
 80167fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016800:	e0bffd17 	ldw	r2,-12(fp)
 8016804:	10800017 	ldw	r2,0(r2)
 8016808:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 801680c:	e0bffc17 	ldw	r2,-16(fp)
 8016810:	10c00a04 	addi	r3,r2,40
 8016814:	e0bffd17 	ldw	r2,-12(fp)
 8016818:	10800217 	ldw	r2,8(r2)
 801681c:	1809883a 	mov	r4,r3
 8016820:	e17ffe17 	ldw	r5,-8(fp)
 8016824:	e1bfff17 	ldw	r6,-4(fp)
 8016828:	100f883a 	mov	r7,r2
 801682c:	8016e0c0 	call	8016e0c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8016830:	e037883a 	mov	sp,fp
 8016834:	dfc00117 	ldw	ra,4(sp)
 8016838:	df000017 	ldw	fp,0(sp)
 801683c:	dec00204 	addi	sp,sp,8
 8016840:	f800283a 	ret

08016844 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8016844:	defffa04 	addi	sp,sp,-24
 8016848:	dfc00515 	stw	ra,20(sp)
 801684c:	df000415 	stw	fp,16(sp)
 8016850:	df000404 	addi	fp,sp,16
 8016854:	e13ffd15 	stw	r4,-12(fp)
 8016858:	e17ffe15 	stw	r5,-8(fp)
 801685c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016860:	e0bffd17 	ldw	r2,-12(fp)
 8016864:	10800017 	ldw	r2,0(r2)
 8016868:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 801686c:	e0bffc17 	ldw	r2,-16(fp)
 8016870:	10c00a04 	addi	r3,r2,40
 8016874:	e0bffd17 	ldw	r2,-12(fp)
 8016878:	10800217 	ldw	r2,8(r2)
 801687c:	1809883a 	mov	r4,r3
 8016880:	e17ffe17 	ldw	r5,-8(fp)
 8016884:	e1bfff17 	ldw	r6,-4(fp)
 8016888:	100f883a 	mov	r7,r2
 801688c:	80170180 	call	8017018 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8016890:	e037883a 	mov	sp,fp
 8016894:	dfc00117 	ldw	ra,4(sp)
 8016898:	df000017 	ldw	fp,0(sp)
 801689c:	dec00204 	addi	sp,sp,8
 80168a0:	f800283a 	ret

080168a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80168a4:	defffc04 	addi	sp,sp,-16
 80168a8:	dfc00315 	stw	ra,12(sp)
 80168ac:	df000215 	stw	fp,8(sp)
 80168b0:	df000204 	addi	fp,sp,8
 80168b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80168b8:	e0bfff17 	ldw	r2,-4(fp)
 80168bc:	10800017 	ldw	r2,0(r2)
 80168c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 80168c4:	e0bffe17 	ldw	r2,-8(fp)
 80168c8:	10c00a04 	addi	r3,r2,40
 80168cc:	e0bfff17 	ldw	r2,-4(fp)
 80168d0:	10800217 	ldw	r2,8(r2)
 80168d4:	1809883a 	mov	r4,r3
 80168d8:	100b883a 	mov	r5,r2
 80168dc:	8016cb80 	call	8016cb8 <altera_avalon_jtag_uart_close>
}
 80168e0:	e037883a 	mov	sp,fp
 80168e4:	dfc00117 	ldw	ra,4(sp)
 80168e8:	df000017 	ldw	fp,0(sp)
 80168ec:	dec00204 	addi	sp,sp,8
 80168f0:	f800283a 	ret

080168f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80168f4:	defffa04 	addi	sp,sp,-24
 80168f8:	dfc00515 	stw	ra,20(sp)
 80168fc:	df000415 	stw	fp,16(sp)
 8016900:	df000404 	addi	fp,sp,16
 8016904:	e13ffd15 	stw	r4,-12(fp)
 8016908:	e17ffe15 	stw	r5,-8(fp)
 801690c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8016910:	e0bffd17 	ldw	r2,-12(fp)
 8016914:	10800017 	ldw	r2,0(r2)
 8016918:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 801691c:	e0bffc17 	ldw	r2,-16(fp)
 8016920:	10800a04 	addi	r2,r2,40
 8016924:	1009883a 	mov	r4,r2
 8016928:	e17ffe17 	ldw	r5,-8(fp)
 801692c:	e1bfff17 	ldw	r6,-4(fp)
 8016930:	8016d200 	call	8016d20 <altera_avalon_jtag_uart_ioctl>
}
 8016934:	e037883a 	mov	sp,fp
 8016938:	dfc00117 	ldw	ra,4(sp)
 801693c:	df000017 	ldw	fp,0(sp)
 8016940:	dec00204 	addi	sp,sp,8
 8016944:	f800283a 	ret

08016948 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8016948:	defffa04 	addi	sp,sp,-24
 801694c:	dfc00515 	stw	ra,20(sp)
 8016950:	df000415 	stw	fp,16(sp)
 8016954:	df000404 	addi	fp,sp,16
 8016958:	e13ffd15 	stw	r4,-12(fp)
 801695c:	e17ffe15 	stw	r5,-8(fp)
 8016960:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016964:	e0bffd17 	ldw	r2,-12(fp)
 8016968:	00c00044 	movi	r3,1
 801696c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8016970:	e0bffd17 	ldw	r2,-12(fp)
 8016974:	10800017 	ldw	r2,0(r2)
 8016978:	10800104 	addi	r2,r2,4
 801697c:	1007883a 	mov	r3,r2
 8016980:	e0bffd17 	ldw	r2,-12(fp)
 8016984:	10800817 	ldw	r2,32(r2)
 8016988:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 801698c:	e0fffe17 	ldw	r3,-8(fp)
 8016990:	e0bfff17 	ldw	r2,-4(fp)
 8016994:	d8000015 	stw	zero,0(sp)
 8016998:	1809883a 	mov	r4,r3
 801699c:	100b883a 	mov	r5,r2
 80169a0:	01820074 	movhi	r6,2049
 80169a4:	319a8304 	addi	r6,r6,27148
 80169a8:	e1fffd17 	ldw	r7,-12(fp)
 80169ac:	8017d100 	call	8017d10 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80169b0:	e0bffd17 	ldw	r2,-12(fp)
 80169b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80169b8:	e0bffd17 	ldw	r2,-12(fp)
 80169bc:	10c00204 	addi	r3,r2,8
 80169c0:	008200b4 	movhi	r2,2050
 80169c4:	109bc804 	addi	r2,r2,28448
 80169c8:	10800017 	ldw	r2,0(r2)
 80169cc:	1809883a 	mov	r4,r3
 80169d0:	100b883a 	mov	r5,r2
 80169d4:	01820074 	movhi	r6,2049
 80169d8:	319b0404 	addi	r6,r6,27664
 80169dc:	e1fffd17 	ldw	r7,-12(fp)
 80169e0:	80178040 	call	8017804 <alt_alarm_start>
 80169e4:	1000040e 	bge	r2,zero,80169f8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 80169e8:	e0fffd17 	ldw	r3,-12(fp)
 80169ec:	00a00034 	movhi	r2,32768
 80169f0:	10bfffc4 	addi	r2,r2,-1
 80169f4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80169f8:	e037883a 	mov	sp,fp
 80169fc:	dfc00117 	ldw	ra,4(sp)
 8016a00:	df000017 	ldw	fp,0(sp)
 8016a04:	dec00204 	addi	sp,sp,8
 8016a08:	f800283a 	ret

08016a0c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8016a0c:	defff804 	addi	sp,sp,-32
 8016a10:	df000715 	stw	fp,28(sp)
 8016a14:	df000704 	addi	fp,sp,28
 8016a18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8016a1c:	e0bfff17 	ldw	r2,-4(fp)
 8016a20:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8016a24:	e0bffb17 	ldw	r2,-20(fp)
 8016a28:	10800017 	ldw	r2,0(r2)
 8016a2c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016a30:	e0bffc17 	ldw	r2,-16(fp)
 8016a34:	10800104 	addi	r2,r2,4
 8016a38:	10800037 	ldwio	r2,0(r2)
 8016a3c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8016a40:	e0bffd17 	ldw	r2,-12(fp)
 8016a44:	1080c00c 	andi	r2,r2,768
 8016a48:	1000011e 	bne	r2,zero,8016a50 <altera_avalon_jtag_uart_irq+0x44>
      break;
 8016a4c:	00006c06 	br	8016c00 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8016a50:	e0bffd17 	ldw	r2,-12(fp)
 8016a54:	1080400c 	andi	r2,r2,256
 8016a58:	10003426 	beq	r2,zero,8016b2c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8016a5c:	00800074 	movhi	r2,1
 8016a60:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016a64:	e0bffb17 	ldw	r2,-20(fp)
 8016a68:	10800a17 	ldw	r2,40(r2)
 8016a6c:	10800044 	addi	r2,r2,1
 8016a70:	1081ffcc 	andi	r2,r2,2047
 8016a74:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8016a78:	e0bffb17 	ldw	r2,-20(fp)
 8016a7c:	10c00b17 	ldw	r3,44(r2)
 8016a80:	e0bffe17 	ldw	r2,-8(fp)
 8016a84:	1880011e 	bne	r3,r2,8016a8c <altera_avalon_jtag_uart_irq+0x80>
          break;
 8016a88:	00001606 	br	8016ae4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8016a8c:	e0bffc17 	ldw	r2,-16(fp)
 8016a90:	10800037 	ldwio	r2,0(r2)
 8016a94:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8016a98:	e0bff917 	ldw	r2,-28(fp)
 8016a9c:	10a0000c 	andi	r2,r2,32768
 8016aa0:	1000011e 	bne	r2,zero,8016aa8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8016aa4:	00000f06 	br	8016ae4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8016aa8:	e0bffb17 	ldw	r2,-20(fp)
 8016aac:	10800a17 	ldw	r2,40(r2)
 8016ab0:	e0fff917 	ldw	r3,-28(fp)
 8016ab4:	1809883a 	mov	r4,r3
 8016ab8:	e0fffb17 	ldw	r3,-20(fp)
 8016abc:	1885883a 	add	r2,r3,r2
 8016ac0:	10800e04 	addi	r2,r2,56
 8016ac4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016ac8:	e0bffb17 	ldw	r2,-20(fp)
 8016acc:	10800a17 	ldw	r2,40(r2)
 8016ad0:	10800044 	addi	r2,r2,1
 8016ad4:	10c1ffcc 	andi	r3,r2,2047
 8016ad8:	e0bffb17 	ldw	r2,-20(fp)
 8016adc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8016ae0:	003fe006 	br	8016a64 <__alt_data_end+0xfc016a64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8016ae4:	e0bff917 	ldw	r2,-28(fp)
 8016ae8:	10bfffec 	andhi	r2,r2,65535
 8016aec:	10000f26 	beq	r2,zero,8016b2c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016af0:	e0bffb17 	ldw	r2,-20(fp)
 8016af4:	10c00817 	ldw	r3,32(r2)
 8016af8:	00bfff84 	movi	r2,-2
 8016afc:	1886703a 	and	r3,r3,r2
 8016b00:	e0bffb17 	ldw	r2,-20(fp)
 8016b04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8016b08:	e0bffc17 	ldw	r2,-16(fp)
 8016b0c:	10800104 	addi	r2,r2,4
 8016b10:	1007883a 	mov	r3,r2
 8016b14:	e0bffb17 	ldw	r2,-20(fp)
 8016b18:	10800817 	ldw	r2,32(r2)
 8016b1c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016b20:	e0bffc17 	ldw	r2,-16(fp)
 8016b24:	10800104 	addi	r2,r2,4
 8016b28:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8016b2c:	e0bffd17 	ldw	r2,-12(fp)
 8016b30:	1080800c 	andi	r2,r2,512
 8016b34:	10003126 	beq	r2,zero,8016bfc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8016b38:	e0bffd17 	ldw	r2,-12(fp)
 8016b3c:	1004d43a 	srli	r2,r2,16
 8016b40:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8016b44:	00001406 	br	8016b98 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8016b48:	e0bffc17 	ldw	r2,-16(fp)
 8016b4c:	e0fffb17 	ldw	r3,-20(fp)
 8016b50:	18c00d17 	ldw	r3,52(r3)
 8016b54:	e13ffb17 	ldw	r4,-20(fp)
 8016b58:	20c7883a 	add	r3,r4,r3
 8016b5c:	18c20e04 	addi	r3,r3,2104
 8016b60:	18c00003 	ldbu	r3,0(r3)
 8016b64:	18c03fcc 	andi	r3,r3,255
 8016b68:	18c0201c 	xori	r3,r3,128
 8016b6c:	18ffe004 	addi	r3,r3,-128
 8016b70:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016b74:	e0bffb17 	ldw	r2,-20(fp)
 8016b78:	10800d17 	ldw	r2,52(r2)
 8016b7c:	10800044 	addi	r2,r2,1
 8016b80:	10c1ffcc 	andi	r3,r2,2047
 8016b84:	e0bffb17 	ldw	r2,-20(fp)
 8016b88:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8016b8c:	e0bffa17 	ldw	r2,-24(fp)
 8016b90:	10bfffc4 	addi	r2,r2,-1
 8016b94:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8016b98:	e0bffa17 	ldw	r2,-24(fp)
 8016b9c:	10000526 	beq	r2,zero,8016bb4 <altera_avalon_jtag_uart_irq+0x1a8>
 8016ba0:	e0bffb17 	ldw	r2,-20(fp)
 8016ba4:	10c00d17 	ldw	r3,52(r2)
 8016ba8:	e0bffb17 	ldw	r2,-20(fp)
 8016bac:	10800c17 	ldw	r2,48(r2)
 8016bb0:	18bfe51e 	bne	r3,r2,8016b48 <__alt_data_end+0xfc016b48>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8016bb4:	e0bffa17 	ldw	r2,-24(fp)
 8016bb8:	10001026 	beq	r2,zero,8016bfc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8016bbc:	e0bffb17 	ldw	r2,-20(fp)
 8016bc0:	10c00817 	ldw	r3,32(r2)
 8016bc4:	00bfff44 	movi	r2,-3
 8016bc8:	1886703a 	and	r3,r3,r2
 8016bcc:	e0bffb17 	ldw	r2,-20(fp)
 8016bd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016bd4:	e0bffb17 	ldw	r2,-20(fp)
 8016bd8:	10800017 	ldw	r2,0(r2)
 8016bdc:	10800104 	addi	r2,r2,4
 8016be0:	1007883a 	mov	r3,r2
 8016be4:	e0bffb17 	ldw	r2,-20(fp)
 8016be8:	10800817 	ldw	r2,32(r2)
 8016bec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016bf0:	e0bffc17 	ldw	r2,-16(fp)
 8016bf4:	10800104 	addi	r2,r2,4
 8016bf8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8016bfc:	003f8c06 	br	8016a30 <__alt_data_end+0xfc016a30>
}
 8016c00:	e037883a 	mov	sp,fp
 8016c04:	df000017 	ldw	fp,0(sp)
 8016c08:	dec00104 	addi	sp,sp,4
 8016c0c:	f800283a 	ret

08016c10 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8016c10:	defff804 	addi	sp,sp,-32
 8016c14:	df000715 	stw	fp,28(sp)
 8016c18:	df000704 	addi	fp,sp,28
 8016c1c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8016c20:	e0bffb17 	ldw	r2,-20(fp)
 8016c24:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8016c28:	e0bff917 	ldw	r2,-28(fp)
 8016c2c:	10800017 	ldw	r2,0(r2)
 8016c30:	10800104 	addi	r2,r2,4
 8016c34:	10800037 	ldwio	r2,0(r2)
 8016c38:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8016c3c:	e0bffa17 	ldw	r2,-24(fp)
 8016c40:	1081000c 	andi	r2,r2,1024
 8016c44:	10000b26 	beq	r2,zero,8016c74 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8016c48:	e0bff917 	ldw	r2,-28(fp)
 8016c4c:	10800017 	ldw	r2,0(r2)
 8016c50:	10800104 	addi	r2,r2,4
 8016c54:	1007883a 	mov	r3,r2
 8016c58:	e0bff917 	ldw	r2,-28(fp)
 8016c5c:	10800817 	ldw	r2,32(r2)
 8016c60:	10810014 	ori	r2,r2,1024
 8016c64:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8016c68:	e0bff917 	ldw	r2,-28(fp)
 8016c6c:	10000915 	stw	zero,36(r2)
 8016c70:	00000a06 	br	8016c9c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8016c74:	e0bff917 	ldw	r2,-28(fp)
 8016c78:	10c00917 	ldw	r3,36(r2)
 8016c7c:	00a00034 	movhi	r2,32768
 8016c80:	10bfff04 	addi	r2,r2,-4
 8016c84:	10c00536 	bltu	r2,r3,8016c9c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8016c88:	e0bff917 	ldw	r2,-28(fp)
 8016c8c:	10800917 	ldw	r2,36(r2)
 8016c90:	10c00044 	addi	r3,r2,1
 8016c94:	e0bff917 	ldw	r2,-28(fp)
 8016c98:	10c00915 	stw	r3,36(r2)
 8016c9c:	008200b4 	movhi	r2,2050
 8016ca0:	109bc804 	addi	r2,r2,28448
 8016ca4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8016ca8:	e037883a 	mov	sp,fp
 8016cac:	df000017 	ldw	fp,0(sp)
 8016cb0:	dec00104 	addi	sp,sp,4
 8016cb4:	f800283a 	ret

08016cb8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8016cb8:	defffd04 	addi	sp,sp,-12
 8016cbc:	df000215 	stw	fp,8(sp)
 8016cc0:	df000204 	addi	fp,sp,8
 8016cc4:	e13ffe15 	stw	r4,-8(fp)
 8016cc8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8016ccc:	00000506 	br	8016ce4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8016cd0:	e0bfff17 	ldw	r2,-4(fp)
 8016cd4:	1090000c 	andi	r2,r2,16384
 8016cd8:	10000226 	beq	r2,zero,8016ce4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8016cdc:	00bffd44 	movi	r2,-11
 8016ce0:	00000b06 	br	8016d10 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8016ce4:	e0bffe17 	ldw	r2,-8(fp)
 8016ce8:	10c00d17 	ldw	r3,52(r2)
 8016cec:	e0bffe17 	ldw	r2,-8(fp)
 8016cf0:	10800c17 	ldw	r2,48(r2)
 8016cf4:	18800526 	beq	r3,r2,8016d0c <altera_avalon_jtag_uart_close+0x54>
 8016cf8:	e0bffe17 	ldw	r2,-8(fp)
 8016cfc:	10c00917 	ldw	r3,36(r2)
 8016d00:	e0bffe17 	ldw	r2,-8(fp)
 8016d04:	10800117 	ldw	r2,4(r2)
 8016d08:	18bff136 	bltu	r3,r2,8016cd0 <__alt_data_end+0xfc016cd0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8016d0c:	0005883a 	mov	r2,zero
}
 8016d10:	e037883a 	mov	sp,fp
 8016d14:	df000017 	ldw	fp,0(sp)
 8016d18:	dec00104 	addi	sp,sp,4
 8016d1c:	f800283a 	ret

08016d20 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8016d20:	defffa04 	addi	sp,sp,-24
 8016d24:	df000515 	stw	fp,20(sp)
 8016d28:	df000504 	addi	fp,sp,20
 8016d2c:	e13ffd15 	stw	r4,-12(fp)
 8016d30:	e17ffe15 	stw	r5,-8(fp)
 8016d34:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8016d38:	00bff9c4 	movi	r2,-25
 8016d3c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8016d40:	e0bffe17 	ldw	r2,-8(fp)
 8016d44:	10da8060 	cmpeqi	r3,r2,27137
 8016d48:	1800031e 	bne	r3,zero,8016d58 <altera_avalon_jtag_uart_ioctl+0x38>
 8016d4c:	109a80a0 	cmpeqi	r2,r2,27138
 8016d50:	1000191e 	bne	r2,zero,8016db8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8016d54:	00002806 	br	8016df8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8016d58:	e0bffd17 	ldw	r2,-12(fp)
 8016d5c:	10c00117 	ldw	r3,4(r2)
 8016d60:	00a00034 	movhi	r2,32768
 8016d64:	10bfffc4 	addi	r2,r2,-1
 8016d68:	18801226 	beq	r3,r2,8016db4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 8016d6c:	e0bfff17 	ldw	r2,-4(fp)
 8016d70:	10800017 	ldw	r2,0(r2)
 8016d74:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8016d78:	e0bffc17 	ldw	r2,-16(fp)
 8016d7c:	10800090 	cmplti	r2,r2,2
 8016d80:	1000061e 	bne	r2,zero,8016d9c <altera_avalon_jtag_uart_ioctl+0x7c>
 8016d84:	e0fffc17 	ldw	r3,-16(fp)
 8016d88:	00a00034 	movhi	r2,32768
 8016d8c:	10bfffc4 	addi	r2,r2,-1
 8016d90:	18800226 	beq	r3,r2,8016d9c <altera_avalon_jtag_uart_ioctl+0x7c>
 8016d94:	e0bffc17 	ldw	r2,-16(fp)
 8016d98:	00000206 	br	8016da4 <altera_avalon_jtag_uart_ioctl+0x84>
 8016d9c:	00a00034 	movhi	r2,32768
 8016da0:	10bfff84 	addi	r2,r2,-2
 8016da4:	e0fffd17 	ldw	r3,-12(fp)
 8016da8:	18800115 	stw	r2,4(r3)
      rc = 0;
 8016dac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8016db0:	00001106 	br	8016df8 <altera_avalon_jtag_uart_ioctl+0xd8>
 8016db4:	00001006 	br	8016df8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8016db8:	e0bffd17 	ldw	r2,-12(fp)
 8016dbc:	10c00117 	ldw	r3,4(r2)
 8016dc0:	00a00034 	movhi	r2,32768
 8016dc4:	10bfffc4 	addi	r2,r2,-1
 8016dc8:	18800a26 	beq	r3,r2,8016df4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8016dcc:	e0bffd17 	ldw	r2,-12(fp)
 8016dd0:	10c00917 	ldw	r3,36(r2)
 8016dd4:	e0bffd17 	ldw	r2,-12(fp)
 8016dd8:	10800117 	ldw	r2,4(r2)
 8016ddc:	1885803a 	cmpltu	r2,r3,r2
 8016de0:	10c03fcc 	andi	r3,r2,255
 8016de4:	e0bfff17 	ldw	r2,-4(fp)
 8016de8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8016dec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8016df0:	00000006 	br	8016df4 <altera_avalon_jtag_uart_ioctl+0xd4>
 8016df4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8016df8:	e0bffb17 	ldw	r2,-20(fp)
}
 8016dfc:	e037883a 	mov	sp,fp
 8016e00:	df000017 	ldw	fp,0(sp)
 8016e04:	dec00104 	addi	sp,sp,4
 8016e08:	f800283a 	ret

08016e0c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8016e0c:	defff304 	addi	sp,sp,-52
 8016e10:	dfc00c15 	stw	ra,48(sp)
 8016e14:	df000b15 	stw	fp,44(sp)
 8016e18:	df000b04 	addi	fp,sp,44
 8016e1c:	e13ffc15 	stw	r4,-16(fp)
 8016e20:	e17ffd15 	stw	r5,-12(fp)
 8016e24:	e1bffe15 	stw	r6,-8(fp)
 8016e28:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8016e2c:	e0bffd17 	ldw	r2,-12(fp)
 8016e30:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8016e34:	00004906 	br	8016f5c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8016e38:	e0bffc17 	ldw	r2,-16(fp)
 8016e3c:	10800a17 	ldw	r2,40(r2)
 8016e40:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8016e44:	e0bffc17 	ldw	r2,-16(fp)
 8016e48:	10800b17 	ldw	r2,44(r2)
 8016e4c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8016e50:	e0fff717 	ldw	r3,-36(fp)
 8016e54:	e0bff817 	ldw	r2,-32(fp)
 8016e58:	18800536 	bltu	r3,r2,8016e70 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8016e5c:	e0fff717 	ldw	r3,-36(fp)
 8016e60:	e0bff817 	ldw	r2,-32(fp)
 8016e64:	1885c83a 	sub	r2,r3,r2
 8016e68:	e0bff615 	stw	r2,-40(fp)
 8016e6c:	00000406 	br	8016e80 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8016e70:	00c20004 	movi	r3,2048
 8016e74:	e0bff817 	ldw	r2,-32(fp)
 8016e78:	1885c83a 	sub	r2,r3,r2
 8016e7c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8016e80:	e0bff617 	ldw	r2,-40(fp)
 8016e84:	1000011e 	bne	r2,zero,8016e8c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8016e88:	00001d06 	br	8016f00 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8016e8c:	e0fffe17 	ldw	r3,-8(fp)
 8016e90:	e0bff617 	ldw	r2,-40(fp)
 8016e94:	1880022e 	bgeu	r3,r2,8016ea0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8016e98:	e0bffe17 	ldw	r2,-8(fp)
 8016e9c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8016ea0:	e0bff817 	ldw	r2,-32(fp)
 8016ea4:	10800e04 	addi	r2,r2,56
 8016ea8:	e0fffc17 	ldw	r3,-16(fp)
 8016eac:	1885883a 	add	r2,r3,r2
 8016eb0:	e13ff517 	ldw	r4,-44(fp)
 8016eb4:	100b883a 	mov	r5,r2
 8016eb8:	e1bff617 	ldw	r6,-40(fp)
 8016ebc:	80071380 	call	8007138 <memcpy>
      ptr   += n;
 8016ec0:	e0fff517 	ldw	r3,-44(fp)
 8016ec4:	e0bff617 	ldw	r2,-40(fp)
 8016ec8:	1885883a 	add	r2,r3,r2
 8016ecc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8016ed0:	e0fffe17 	ldw	r3,-8(fp)
 8016ed4:	e0bff617 	ldw	r2,-40(fp)
 8016ed8:	1885c83a 	sub	r2,r3,r2
 8016edc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016ee0:	e0fff817 	ldw	r3,-32(fp)
 8016ee4:	e0bff617 	ldw	r2,-40(fp)
 8016ee8:	1885883a 	add	r2,r3,r2
 8016eec:	10c1ffcc 	andi	r3,r2,2047
 8016ef0:	e0bffc17 	ldw	r2,-16(fp)
 8016ef4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8016ef8:	e0bffe17 	ldw	r2,-8(fp)
 8016efc:	00bfce16 	blt	zero,r2,8016e38 <__alt_data_end+0xfc016e38>

    /* If we read any data then return it */
    if (ptr != buffer)
 8016f00:	e0fff517 	ldw	r3,-44(fp)
 8016f04:	e0bffd17 	ldw	r2,-12(fp)
 8016f08:	18800126 	beq	r3,r2,8016f10 <altera_avalon_jtag_uart_read+0x104>
      break;
 8016f0c:	00001506 	br	8016f64 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8016f10:	e0bfff17 	ldw	r2,-4(fp)
 8016f14:	1090000c 	andi	r2,r2,16384
 8016f18:	10000126 	beq	r2,zero,8016f20 <altera_avalon_jtag_uart_read+0x114>
      break;
 8016f1c:	00001106 	br	8016f64 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8016f20:	0001883a 	nop
 8016f24:	e0bffc17 	ldw	r2,-16(fp)
 8016f28:	10c00a17 	ldw	r3,40(r2)
 8016f2c:	e0bff717 	ldw	r2,-36(fp)
 8016f30:	1880051e 	bne	r3,r2,8016f48 <altera_avalon_jtag_uart_read+0x13c>
 8016f34:	e0bffc17 	ldw	r2,-16(fp)
 8016f38:	10c00917 	ldw	r3,36(r2)
 8016f3c:	e0bffc17 	ldw	r2,-16(fp)
 8016f40:	10800117 	ldw	r2,4(r2)
 8016f44:	18bff736 	bltu	r3,r2,8016f24 <__alt_data_end+0xfc016f24>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8016f48:	e0bffc17 	ldw	r2,-16(fp)
 8016f4c:	10c00a17 	ldw	r3,40(r2)
 8016f50:	e0bff717 	ldw	r2,-36(fp)
 8016f54:	1880011e 	bne	r3,r2,8016f5c <altera_avalon_jtag_uart_read+0x150>
      break;
 8016f58:	00000206 	br	8016f64 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8016f5c:	e0bffe17 	ldw	r2,-8(fp)
 8016f60:	00bfb516 	blt	zero,r2,8016e38 <__alt_data_end+0xfc016e38>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8016f64:	e0fff517 	ldw	r3,-44(fp)
 8016f68:	e0bffd17 	ldw	r2,-12(fp)
 8016f6c:	18801826 	beq	r3,r2,8016fd0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016f70:	0005303a 	rdctl	r2,status
 8016f74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016f78:	e0fffa17 	ldw	r3,-24(fp)
 8016f7c:	00bfff84 	movi	r2,-2
 8016f80:	1884703a 	and	r2,r3,r2
 8016f84:	1001703a 	wrctl	status,r2
  
  return context;
 8016f88:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8016f8c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016f90:	e0bffc17 	ldw	r2,-16(fp)
 8016f94:	10800817 	ldw	r2,32(r2)
 8016f98:	10c00054 	ori	r3,r2,1
 8016f9c:	e0bffc17 	ldw	r2,-16(fp)
 8016fa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016fa4:	e0bffc17 	ldw	r2,-16(fp)
 8016fa8:	10800017 	ldw	r2,0(r2)
 8016fac:	10800104 	addi	r2,r2,4
 8016fb0:	1007883a 	mov	r3,r2
 8016fb4:	e0bffc17 	ldw	r2,-16(fp)
 8016fb8:	10800817 	ldw	r2,32(r2)
 8016fbc:	18800035 	stwio	r2,0(r3)
 8016fc0:	e0bff917 	ldw	r2,-28(fp)
 8016fc4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016fc8:	e0bffb17 	ldw	r2,-20(fp)
 8016fcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8016fd0:	e0fff517 	ldw	r3,-44(fp)
 8016fd4:	e0bffd17 	ldw	r2,-12(fp)
 8016fd8:	18800426 	beq	r3,r2,8016fec <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 8016fdc:	e0fff517 	ldw	r3,-44(fp)
 8016fe0:	e0bffd17 	ldw	r2,-12(fp)
 8016fe4:	1885c83a 	sub	r2,r3,r2
 8016fe8:	00000606 	br	8017004 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 8016fec:	e0bfff17 	ldw	r2,-4(fp)
 8016ff0:	1090000c 	andi	r2,r2,16384
 8016ff4:	10000226 	beq	r2,zero,8017000 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 8016ff8:	00bffd44 	movi	r2,-11
 8016ffc:	00000106 	br	8017004 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 8017000:	00bffec4 	movi	r2,-5
}
 8017004:	e037883a 	mov	sp,fp
 8017008:	dfc00117 	ldw	ra,4(sp)
 801700c:	df000017 	ldw	fp,0(sp)
 8017010:	dec00204 	addi	sp,sp,8
 8017014:	f800283a 	ret

08017018 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8017018:	defff304 	addi	sp,sp,-52
 801701c:	dfc00c15 	stw	ra,48(sp)
 8017020:	df000b15 	stw	fp,44(sp)
 8017024:	df000b04 	addi	fp,sp,44
 8017028:	e13ffc15 	stw	r4,-16(fp)
 801702c:	e17ffd15 	stw	r5,-12(fp)
 8017030:	e1bffe15 	stw	r6,-8(fp)
 8017034:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8017038:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801703c:	e0bffd17 	ldw	r2,-12(fp)
 8017040:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8017044:	00003806 	br	8017128 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8017048:	e0bffc17 	ldw	r2,-16(fp)
 801704c:	10800c17 	ldw	r2,48(r2)
 8017050:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 8017054:	e0bffc17 	ldw	r2,-16(fp)
 8017058:	10800d17 	ldw	r2,52(r2)
 801705c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8017060:	e0fff817 	ldw	r3,-32(fp)
 8017064:	e0bff517 	ldw	r2,-44(fp)
 8017068:	1880062e 	bgeu	r3,r2,8017084 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801706c:	e0fff517 	ldw	r3,-44(fp)
 8017070:	e0bff817 	ldw	r2,-32(fp)
 8017074:	1885c83a 	sub	r2,r3,r2
 8017078:	10bfffc4 	addi	r2,r2,-1
 801707c:	e0bff615 	stw	r2,-40(fp)
 8017080:	00000b06 	br	80170b0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8017084:	e0bff517 	ldw	r2,-44(fp)
 8017088:	10000526 	beq	r2,zero,80170a0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801708c:	00c20004 	movi	r3,2048
 8017090:	e0bff817 	ldw	r2,-32(fp)
 8017094:	1885c83a 	sub	r2,r3,r2
 8017098:	e0bff615 	stw	r2,-40(fp)
 801709c:	00000406 	br	80170b0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80170a0:	00c1ffc4 	movi	r3,2047
 80170a4:	e0bff817 	ldw	r2,-32(fp)
 80170a8:	1885c83a 	sub	r2,r3,r2
 80170ac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80170b0:	e0bff617 	ldw	r2,-40(fp)
 80170b4:	1000011e 	bne	r2,zero,80170bc <altera_avalon_jtag_uart_write+0xa4>
        break;
 80170b8:	00001d06 	br	8017130 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 80170bc:	e0fffe17 	ldw	r3,-8(fp)
 80170c0:	e0bff617 	ldw	r2,-40(fp)
 80170c4:	1880022e 	bgeu	r3,r2,80170d0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 80170c8:	e0bffe17 	ldw	r2,-8(fp)
 80170cc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80170d0:	e0bff817 	ldw	r2,-32(fp)
 80170d4:	10820e04 	addi	r2,r2,2104
 80170d8:	e0fffc17 	ldw	r3,-16(fp)
 80170dc:	1885883a 	add	r2,r3,r2
 80170e0:	1009883a 	mov	r4,r2
 80170e4:	e17ffd17 	ldw	r5,-12(fp)
 80170e8:	e1bff617 	ldw	r6,-40(fp)
 80170ec:	80071380 	call	8007138 <memcpy>
      ptr   += n;
 80170f0:	e0fffd17 	ldw	r3,-12(fp)
 80170f4:	e0bff617 	ldw	r2,-40(fp)
 80170f8:	1885883a 	add	r2,r3,r2
 80170fc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8017100:	e0fffe17 	ldw	r3,-8(fp)
 8017104:	e0bff617 	ldw	r2,-40(fp)
 8017108:	1885c83a 	sub	r2,r3,r2
 801710c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8017110:	e0fff817 	ldw	r3,-32(fp)
 8017114:	e0bff617 	ldw	r2,-40(fp)
 8017118:	1885883a 	add	r2,r3,r2
 801711c:	10c1ffcc 	andi	r3,r2,2047
 8017120:	e0bffc17 	ldw	r2,-16(fp)
 8017124:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8017128:	e0bffe17 	ldw	r2,-8(fp)
 801712c:	00bfc616 	blt	zero,r2,8017048 <__alt_data_end+0xfc017048>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017130:	0005303a 	rdctl	r2,status
 8017134:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017138:	e0fffa17 	ldw	r3,-24(fp)
 801713c:	00bfff84 	movi	r2,-2
 8017140:	1884703a 	and	r2,r3,r2
 8017144:	1001703a 	wrctl	status,r2
  
  return context;
 8017148:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 801714c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8017150:	e0bffc17 	ldw	r2,-16(fp)
 8017154:	10800817 	ldw	r2,32(r2)
 8017158:	10c00094 	ori	r3,r2,2
 801715c:	e0bffc17 	ldw	r2,-16(fp)
 8017160:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8017164:	e0bffc17 	ldw	r2,-16(fp)
 8017168:	10800017 	ldw	r2,0(r2)
 801716c:	10800104 	addi	r2,r2,4
 8017170:	1007883a 	mov	r3,r2
 8017174:	e0bffc17 	ldw	r2,-16(fp)
 8017178:	10800817 	ldw	r2,32(r2)
 801717c:	18800035 	stwio	r2,0(r3)
 8017180:	e0bff917 	ldw	r2,-28(fp)
 8017184:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017188:	e0bffb17 	ldw	r2,-20(fp)
 801718c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8017190:	e0bffe17 	ldw	r2,-8(fp)
 8017194:	0080120e 	bge	zero,r2,80171e0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8017198:	e0bfff17 	ldw	r2,-4(fp)
 801719c:	1090000c 	andi	r2,r2,16384
 80171a0:	10000126 	beq	r2,zero,80171a8 <altera_avalon_jtag_uart_write+0x190>
        break;
 80171a4:	00001006 	br	80171e8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80171a8:	0001883a 	nop
 80171ac:	e0bffc17 	ldw	r2,-16(fp)
 80171b0:	10c00d17 	ldw	r3,52(r2)
 80171b4:	e0bff517 	ldw	r2,-44(fp)
 80171b8:	1880051e 	bne	r3,r2,80171d0 <altera_avalon_jtag_uart_write+0x1b8>
 80171bc:	e0bffc17 	ldw	r2,-16(fp)
 80171c0:	10c00917 	ldw	r3,36(r2)
 80171c4:	e0bffc17 	ldw	r2,-16(fp)
 80171c8:	10800117 	ldw	r2,4(r2)
 80171cc:	18bff736 	bltu	r3,r2,80171ac <__alt_data_end+0xfc0171ac>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80171d0:	e0bffc17 	ldw	r2,-16(fp)
 80171d4:	10800917 	ldw	r2,36(r2)
 80171d8:	10000126 	beq	r2,zero,80171e0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 80171dc:	00000206 	br	80171e8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 80171e0:	e0bffe17 	ldw	r2,-8(fp)
 80171e4:	00bf9716 	blt	zero,r2,8017044 <__alt_data_end+0xfc017044>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80171e8:	e0fffd17 	ldw	r3,-12(fp)
 80171ec:	e0bff717 	ldw	r2,-36(fp)
 80171f0:	18800426 	beq	r3,r2,8017204 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 80171f4:	e0fffd17 	ldw	r3,-12(fp)
 80171f8:	e0bff717 	ldw	r2,-36(fp)
 80171fc:	1885c83a 	sub	r2,r3,r2
 8017200:	00000606 	br	801721c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 8017204:	e0bfff17 	ldw	r2,-4(fp)
 8017208:	1090000c 	andi	r2,r2,16384
 801720c:	10000226 	beq	r2,zero,8017218 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8017210:	00bffd44 	movi	r2,-11
 8017214:	00000106 	br	801721c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8017218:	00bffec4 	movi	r2,-5
}
 801721c:	e037883a 	mov	sp,fp
 8017220:	dfc00117 	ldw	ra,4(sp)
 8017224:	df000017 	ldw	fp,0(sp)
 8017228:	dec00204 	addi	sp,sp,8
 801722c:	f800283a 	ret

08017230 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8017230:	defffa04 	addi	sp,sp,-24
 8017234:	dfc00515 	stw	ra,20(sp)
 8017238:	df000415 	stw	fp,16(sp)
 801723c:	df000404 	addi	fp,sp,16
 8017240:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8017244:	0007883a 	mov	r3,zero
 8017248:	e0bfff17 	ldw	r2,-4(fp)
 801724c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8017250:	e0bfff17 	ldw	r2,-4(fp)
 8017254:	10800104 	addi	r2,r2,4
 8017258:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801725c:	0005303a 	rdctl	r2,status
 8017260:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017264:	e0fffd17 	ldw	r3,-12(fp)
 8017268:	00bfff84 	movi	r2,-2
 801726c:	1884703a 	and	r2,r3,r2
 8017270:	1001703a 	wrctl	status,r2
  
  return context;
 8017274:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8017278:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 801727c:	80164840 	call	8016484 <alt_tick>
 8017280:	e0bffc17 	ldw	r2,-16(fp)
 8017284:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017288:	e0bffe17 	ldw	r2,-8(fp)
 801728c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8017290:	e037883a 	mov	sp,fp
 8017294:	dfc00117 	ldw	ra,4(sp)
 8017298:	df000017 	ldw	fp,0(sp)
 801729c:	dec00204 	addi	sp,sp,8
 80172a0:	f800283a 	ret

080172a4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80172a4:	defff804 	addi	sp,sp,-32
 80172a8:	dfc00715 	stw	ra,28(sp)
 80172ac:	df000615 	stw	fp,24(sp)
 80172b0:	df000604 	addi	fp,sp,24
 80172b4:	e13ffc15 	stw	r4,-16(fp)
 80172b8:	e17ffd15 	stw	r5,-12(fp)
 80172bc:	e1bffe15 	stw	r6,-8(fp)
 80172c0:	e1ffff15 	stw	r7,-4(fp)
 80172c4:	e0bfff17 	ldw	r2,-4(fp)
 80172c8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80172cc:	008200b4 	movhi	r2,2050
 80172d0:	109bc804 	addi	r2,r2,28448
 80172d4:	10800017 	ldw	r2,0(r2)
 80172d8:	1000041e 	bne	r2,zero,80172ec <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 80172dc:	008200b4 	movhi	r2,2050
 80172e0:	109bc804 	addi	r2,r2,28448
 80172e4:	e0fffb17 	ldw	r3,-20(fp)
 80172e8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80172ec:	e0bffc17 	ldw	r2,-16(fp)
 80172f0:	10800104 	addi	r2,r2,4
 80172f4:	00c001c4 	movi	r3,7
 80172f8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80172fc:	d8000015 	stw	zero,0(sp)
 8017300:	e13ffd17 	ldw	r4,-12(fp)
 8017304:	e17ffe17 	ldw	r5,-8(fp)
 8017308:	01820074 	movhi	r6,2049
 801730c:	319c8c04 	addi	r6,r6,29232
 8017310:	e1fffc17 	ldw	r7,-16(fp)
 8017314:	8017d100 	call	8017d10 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8017318:	e037883a 	mov	sp,fp
 801731c:	dfc00117 	ldw	ra,4(sp)
 8017320:	df000017 	ldw	fp,0(sp)
 8017324:	dec00204 	addi	sp,sp,8
 8017328:	f800283a 	ret

0801732c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 801732c:	defffc04 	addi	sp,sp,-16
 8017330:	df000315 	stw	fp,12(sp)
 8017334:	df000304 	addi	fp,sp,12
 8017338:	e13ffe15 	stw	r4,-8(fp)
 801733c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 8017340:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 8017344:	e0bfff17 	ldw	r2,-4(fp)
 8017348:	1000061e 	bne	r2,zero,8017364 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 801734c:	e0bffe17 	ldw	r2,-8(fp)
 8017350:	1007883a 	mov	r3,r2
 8017354:	e0bffd03 	ldbu	r2,-12(fp)
 8017358:	1884b03a 	or	r2,r3,r2
 801735c:	e0bffd05 	stb	r2,-12(fp)
 8017360:	00000806 	br	8017384 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 8017364:	e0bffe17 	ldw	r2,-8(fp)
 8017368:	1007883a 	mov	r3,r2
 801736c:	e0bffd03 	ldbu	r2,-12(fp)
 8017370:	1884b03a 	or	r2,r3,r2
 8017374:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 8017378:	e0bffd03 	ldbu	r2,-12(fp)
 801737c:	10801014 	ori	r2,r2,64
 8017380:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 8017384:	e0fffd03 	ldbu	r3,-12(fp)
 8017388:	00bfe004 	movi	r2,-128
 801738c:	1884b03a 	or	r2,r3,r2
}
 8017390:	e037883a 	mov	sp,fp
 8017394:	df000017 	ldw	fp,0(sp)
 8017398:	dec00104 	addi	sp,sp,4
 801739c:	f800283a 	ret

080173a0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 80173a0:	defffd04 	addi	sp,sp,-12
 80173a4:	df000215 	stw	fp,8(sp)
 80173a8:	df000204 	addi	fp,sp,8
 80173ac:	e13ffe15 	stw	r4,-8(fp)
 80173b0:	2805883a 	mov	r2,r5
 80173b4:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 80173b8:	e0bffe17 	ldw	r2,-8(fp)
 80173bc:	10800a17 	ldw	r2,40(r2)
 80173c0:	1007883a 	mov	r3,r2
 80173c4:	e0bfff03 	ldbu	r2,-4(fp)
 80173c8:	18800025 	stbio	r2,0(r3)
}
 80173cc:	e037883a 	mov	sp,fp
 80173d0:	df000017 	ldw	fp,0(sp)
 80173d4:	dec00104 	addi	sp,sp,4
 80173d8:	f800283a 	ret

080173dc <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 80173dc:	defffe04 	addi	sp,sp,-8
 80173e0:	df000115 	stw	fp,4(sp)
 80173e4:	df000104 	addi	fp,sp,4
 80173e8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 80173ec:	e0bfff17 	ldw	r2,-4(fp)
 80173f0:	10800a17 	ldw	r2,40(r2)
 80173f4:	1007883a 	mov	r3,r2
 80173f8:	00800044 	movi	r2,1
 80173fc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 8017400:	e037883a 	mov	sp,fp
 8017404:	df000017 	ldw	fp,0(sp)
 8017408:	dec00104 	addi	sp,sp,4
 801740c:	f800283a 	ret

08017410 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 8017410:	defffc04 	addi	sp,sp,-16
 8017414:	dfc00315 	stw	ra,12(sp)
 8017418:	df000215 	stw	fp,8(sp)
 801741c:	df000204 	addi	fp,sp,8
 8017420:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 8017424:	e13fff17 	ldw	r4,-4(fp)
 8017428:	014200b4 	movhi	r5,2050
 801742c:	2954e604 	addi	r5,r5,21400
 8017430:	8017c640 	call	8017c64 <alt_find_dev>
 8017434:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8017438:	e0bffe17 	ldw	r2,-8(fp)
}
 801743c:	e037883a 	mov	sp,fp
 8017440:	dfc00117 	ldw	ra,4(sp)
 8017444:	df000017 	ldw	fp,0(sp)
 8017448:	dec00204 	addi	sp,sp,8
 801744c:	f800283a 	ret

08017450 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 8017450:	defffb04 	addi	sp,sp,-20
 8017454:	df000415 	stw	fp,16(sp)
 8017458:	df000404 	addi	fp,sp,16
 801745c:	e13ffd15 	stw	r4,-12(fp)
 8017460:	e17ffe15 	stw	r5,-8(fp)
 8017464:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 8017468:	e03ffc15 	stw	zero,-16(fp)
 801746c:	00000f06 	br	80174ac <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 8017470:	e0bffd17 	ldw	r2,-12(fp)
 8017474:	10800a17 	ldw	r2,40(r2)
 8017478:	10800044 	addi	r2,r2,1
 801747c:	1009883a 	mov	r4,r2
 8017480:	e0fffe17 	ldw	r3,-8(fp)
 8017484:	e0bffc17 	ldw	r2,-16(fp)
 8017488:	1885883a 	add	r2,r3,r2
 801748c:	10800003 	ldbu	r2,0(r2)
 8017490:	10803fcc 	andi	r2,r2,255
 8017494:	1080201c 	xori	r2,r2,128
 8017498:	10bfe004 	addi	r2,r2,-128
 801749c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 80174a0:	e0bffc17 	ldw	r2,-16(fp)
 80174a4:	10800044 	addi	r2,r2,1
 80174a8:	e0bffc15 	stw	r2,-16(fp)
 80174ac:	e0fffc17 	ldw	r3,-16(fp)
 80174b0:	e0bfff17 	ldw	r2,-4(fp)
 80174b4:	18bfee36 	bltu	r3,r2,8017470 <__alt_data_end+0xfc017470>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 80174b8:	e037883a 	mov	sp,fp
 80174bc:	df000017 	ldw	fp,0(sp)
 80174c0:	dec00104 	addi	sp,sp,4
 80174c4:	f800283a 	ret

080174c8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 80174c8:	defffd04 	addi	sp,sp,-12
 80174cc:	df000215 	stw	fp,8(sp)
 80174d0:	df000204 	addi	fp,sp,8
 80174d4:	e13ffe15 	stw	r4,-8(fp)
 80174d8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 80174dc:	00000d06 	br	8017514 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 80174e0:	e0bffe17 	ldw	r2,-8(fp)
 80174e4:	10800a17 	ldw	r2,40(r2)
 80174e8:	10800044 	addi	r2,r2,1
 80174ec:	1007883a 	mov	r3,r2
 80174f0:	e0bfff17 	ldw	r2,-4(fp)
 80174f4:	10800003 	ldbu	r2,0(r2)
 80174f8:	10803fcc 	andi	r2,r2,255
 80174fc:	1080201c 	xori	r2,r2,128
 8017500:	10bfe004 	addi	r2,r2,-128
 8017504:	18800025 	stbio	r2,0(r3)
		++ptr;
 8017508:	e0bfff17 	ldw	r2,-4(fp)
 801750c:	10800044 	addi	r2,r2,1
 8017510:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 8017514:	e0bfff17 	ldw	r2,-4(fp)
 8017518:	10800003 	ldbu	r2,0(r2)
 801751c:	10803fcc 	andi	r2,r2,255
 8017520:	1080201c 	xori	r2,r2,128
 8017524:	10bfe004 	addi	r2,r2,-128
 8017528:	103fed1e 	bne	r2,zero,80174e0 <__alt_data_end+0xfc0174e0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 801752c:	e037883a 	mov	sp,fp
 8017530:	df000017 	ldw	fp,0(sp)
 8017534:	dec00104 	addi	sp,sp,4
 8017538:	f800283a 	ret

0801753c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 801753c:	defffb04 	addi	sp,sp,-20
 8017540:	dfc00415 	stw	ra,16(sp)
 8017544:	df000315 	stw	fp,12(sp)
 8017548:	df000304 	addi	fp,sp,12
 801754c:	e13ffd15 	stw	r4,-12(fp)
 8017550:	e17ffe15 	stw	r5,-8(fp)
 8017554:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 8017558:	e0bffd17 	ldw	r2,-12(fp)
 801755c:	10c00017 	ldw	r3,0(r2)
 8017560:	e0bfff17 	ldw	r2,-4(fp)
 8017564:	1809883a 	mov	r4,r3
 8017568:	e17ffe17 	ldw	r5,-8(fp)
 801756c:	100d883a 	mov	r6,r2
 8017570:	80174500 	call	8017450 <alt_up_character_lcd_write>
	return 0;
 8017574:	0005883a 	mov	r2,zero
}
 8017578:	e037883a 	mov	sp,fp
 801757c:	dfc00117 	ldw	ra,4(sp)
 8017580:	df000017 	ldw	fp,0(sp)
 8017584:	dec00204 	addi	sp,sp,8
 8017588:	f800283a 	ret

0801758c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 801758c:	defffa04 	addi	sp,sp,-24
 8017590:	dfc00515 	stw	ra,20(sp)
 8017594:	df000415 	stw	fp,16(sp)
 8017598:	df000404 	addi	fp,sp,16
 801759c:	e13ffd15 	stw	r4,-12(fp)
 80175a0:	e17ffe15 	stw	r5,-8(fp)
 80175a4:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 80175a8:	e0bffe17 	ldw	r2,-8(fp)
 80175ac:	10800a28 	cmpgeui	r2,r2,40
 80175b0:	1000031e 	bne	r2,zero,80175c0 <alt_up_character_lcd_set_cursor_pos+0x34>
 80175b4:	e0bfff17 	ldw	r2,-4(fp)
 80175b8:	108000b0 	cmpltui	r2,r2,2
 80175bc:	1000021e 	bne	r2,zero,80175c8 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 80175c0:	00bfffc4 	movi	r2,-1
 80175c4:	00000906 	br	80175ec <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 80175c8:	e13ffe17 	ldw	r4,-8(fp)
 80175cc:	e17fff17 	ldw	r5,-4(fp)
 80175d0:	801732c0 	call	801732c <get_DDRAM_addr>
 80175d4:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 80175d8:	e0bffc03 	ldbu	r2,-16(fp)
 80175dc:	e13ffd17 	ldw	r4,-12(fp)
 80175e0:	100b883a 	mov	r5,r2
 80175e4:	80173a00 	call	80173a0 <alt_up_character_lcd_send_cmd>
	return 0;
 80175e8:	0005883a 	mov	r2,zero
}
 80175ec:	e037883a 	mov	sp,fp
 80175f0:	dfc00117 	ldw	ra,4(sp)
 80175f4:	df000017 	ldw	fp,0(sp)
 80175f8:	dec00204 	addi	sp,sp,8
 80175fc:	f800283a 	ret

08017600 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8017600:	defffb04 	addi	sp,sp,-20
 8017604:	dfc00415 	stw	ra,16(sp)
 8017608:	df000315 	stw	fp,12(sp)
 801760c:	df000304 	addi	fp,sp,12
 8017610:	e13ffe15 	stw	r4,-8(fp)
 8017614:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8017618:	e0bfff17 	ldw	r2,-4(fp)
 801761c:	1000011e 	bne	r2,zero,8017624 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 8017620:	00001406 	br	8017674 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8017624:	e0bfff17 	ldw	r2,-4(fp)
 8017628:	0080020e 	bge	zero,r2,8017634 <alt_up_character_lcd_shift_cursor+0x34>
 801762c:	00800504 	movi	r2,20
 8017630:	00000106 	br	8017638 <alt_up_character_lcd_shift_cursor+0x38>
 8017634:	00800404 	movi	r2,16
 8017638:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 801763c:	e0bfff17 	ldw	r2,-4(fp)
 8017640:	1000010e 	bge	r2,zero,8017648 <alt_up_character_lcd_shift_cursor+0x48>
 8017644:	0085c83a 	sub	r2,zero,r2
 8017648:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 801764c:	00000406 	br	8017660 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8017650:	e0bffd43 	ldbu	r2,-11(fp)
 8017654:	e13ffe17 	ldw	r4,-8(fp)
 8017658:	100b883a 	mov	r5,r2
 801765c:	80173a00 	call	80173a0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8017660:	e0bffd03 	ldbu	r2,-12(fp)
 8017664:	10ffffc4 	addi	r3,r2,-1
 8017668:	e0fffd05 	stb	r3,-12(fp)
 801766c:	10803fcc 	andi	r2,r2,255
 8017670:	103ff71e 	bne	r2,zero,8017650 <__alt_data_end+0xfc017650>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8017674:	e037883a 	mov	sp,fp
 8017678:	dfc00117 	ldw	ra,4(sp)
 801767c:	df000017 	ldw	fp,0(sp)
 8017680:	dec00204 	addi	sp,sp,8
 8017684:	f800283a 	ret

08017688 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8017688:	defffb04 	addi	sp,sp,-20
 801768c:	dfc00415 	stw	ra,16(sp)
 8017690:	df000315 	stw	fp,12(sp)
 8017694:	df000304 	addi	fp,sp,12
 8017698:	e13ffe15 	stw	r4,-8(fp)
 801769c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 80176a0:	e0bfff17 	ldw	r2,-4(fp)
 80176a4:	1000011e 	bne	r2,zero,80176ac <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 80176a8:	00001406 	br	80176fc <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 80176ac:	e0bfff17 	ldw	r2,-4(fp)
 80176b0:	0080020e 	bge	zero,r2,80176bc <alt_up_character_lcd_shift_display+0x34>
 80176b4:	00800704 	movi	r2,28
 80176b8:	00000106 	br	80176c0 <alt_up_character_lcd_shift_display+0x38>
 80176bc:	00800604 	movi	r2,24
 80176c0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 80176c4:	e0bfff17 	ldw	r2,-4(fp)
 80176c8:	1000010e 	bge	r2,zero,80176d0 <alt_up_character_lcd_shift_display+0x48>
 80176cc:	0085c83a 	sub	r2,zero,r2
 80176d0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80176d4:	00000406 	br	80176e8 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 80176d8:	e0bffd43 	ldbu	r2,-11(fp)
 80176dc:	e13ffe17 	ldw	r4,-8(fp)
 80176e0:	100b883a 	mov	r5,r2
 80176e4:	80173a00 	call	80173a0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80176e8:	e0bffd03 	ldbu	r2,-12(fp)
 80176ec:	10ffffc4 	addi	r3,r2,-1
 80176f0:	e0fffd05 	stb	r3,-12(fp)
 80176f4:	10803fcc 	andi	r2,r2,255
 80176f8:	103ff71e 	bne	r2,zero,80176d8 <__alt_data_end+0xfc0176d8>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 80176fc:	e037883a 	mov	sp,fp
 8017700:	dfc00117 	ldw	ra,4(sp)
 8017704:	df000017 	ldw	fp,0(sp)
 8017708:	dec00204 	addi	sp,sp,8
 801770c:	f800283a 	ret

08017710 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 8017710:	defffa04 	addi	sp,sp,-24
 8017714:	dfc00515 	stw	ra,20(sp)
 8017718:	df000415 	stw	fp,16(sp)
 801771c:	df000404 	addi	fp,sp,16
 8017720:	e13ffd15 	stw	r4,-12(fp)
 8017724:	e17ffe15 	stw	r5,-8(fp)
 8017728:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 801772c:	e0bffe17 	ldw	r2,-8(fp)
 8017730:	10800a28 	cmpgeui	r2,r2,40
 8017734:	1000031e 	bne	r2,zero,8017744 <alt_up_character_lcd_erase_pos+0x34>
 8017738:	e0bfff17 	ldw	r2,-4(fp)
 801773c:	108000b0 	cmpltui	r2,r2,2
 8017740:	1000021e 	bne	r2,zero,801774c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 8017744:	00bfffc4 	movi	r2,-1
 8017748:	00000f06 	br	8017788 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 801774c:	e13ffe17 	ldw	r4,-8(fp)
 8017750:	e17fff17 	ldw	r5,-4(fp)
 8017754:	801732c0 	call	801732c <get_DDRAM_addr>
 8017758:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 801775c:	e0bffc03 	ldbu	r2,-16(fp)
 8017760:	e13ffd17 	ldw	r4,-12(fp)
 8017764:	100b883a 	mov	r5,r2
 8017768:	80173a00 	call	80173a0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 801776c:	e0bffd17 	ldw	r2,-12(fp)
 8017770:	10800a17 	ldw	r2,40(r2)
 8017774:	10800044 	addi	r2,r2,1
 8017778:	1007883a 	mov	r3,r2
 801777c:	00800084 	movi	r2,2
 8017780:	18800025 	stbio	r2,0(r3)
	return 0;
 8017784:	0005883a 	mov	r2,zero
}
 8017788:	e037883a 	mov	sp,fp
 801778c:	dfc00117 	ldw	ra,4(sp)
 8017790:	df000017 	ldw	fp,0(sp)
 8017794:	dec00204 	addi	sp,sp,8
 8017798:	f800283a 	ret

0801779c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 801779c:	defffd04 	addi	sp,sp,-12
 80177a0:	dfc00215 	stw	ra,8(sp)
 80177a4:	df000115 	stw	fp,4(sp)
 80177a8:	df000104 	addi	fp,sp,4
 80177ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 80177b0:	e13fff17 	ldw	r4,-4(fp)
 80177b4:	01400304 	movi	r5,12
 80177b8:	80173a00 	call	80173a0 <alt_up_character_lcd_send_cmd>
}
 80177bc:	e037883a 	mov	sp,fp
 80177c0:	dfc00117 	ldw	ra,4(sp)
 80177c4:	df000017 	ldw	fp,0(sp)
 80177c8:	dec00204 	addi	sp,sp,8
 80177cc:	f800283a 	ret

080177d0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 80177d0:	defffd04 	addi	sp,sp,-12
 80177d4:	dfc00215 	stw	ra,8(sp)
 80177d8:	df000115 	stw	fp,4(sp)
 80177dc:	df000104 	addi	fp,sp,4
 80177e0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 80177e4:	e13fff17 	ldw	r4,-4(fp)
 80177e8:	014003c4 	movi	r5,15
 80177ec:	80173a00 	call	80173a0 <alt_up_character_lcd_send_cmd>
}
 80177f0:	e037883a 	mov	sp,fp
 80177f4:	dfc00117 	ldw	ra,4(sp)
 80177f8:	df000017 	ldw	fp,0(sp)
 80177fc:	dec00204 	addi	sp,sp,8
 8017800:	f800283a 	ret

08017804 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8017804:	defff504 	addi	sp,sp,-44
 8017808:	df000a15 	stw	fp,40(sp)
 801780c:	df000a04 	addi	fp,sp,40
 8017810:	e13ffc15 	stw	r4,-16(fp)
 8017814:	e17ffd15 	stw	r5,-12(fp)
 8017818:	e1bffe15 	stw	r6,-8(fp)
 801781c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8017820:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8017824:	008200b4 	movhi	r2,2050
 8017828:	109bc804 	addi	r2,r2,28448
 801782c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8017830:	10003f26 	beq	r2,zero,8017930 <alt_alarm_start+0x12c>
  {
    if (alarm)
 8017834:	e0bffc17 	ldw	r2,-16(fp)
 8017838:	10003b26 	beq	r2,zero,8017928 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 801783c:	e0bffc17 	ldw	r2,-16(fp)
 8017840:	e0fffe17 	ldw	r3,-8(fp)
 8017844:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8017848:	e0bffc17 	ldw	r2,-16(fp)
 801784c:	e0ffff17 	ldw	r3,-4(fp)
 8017850:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017854:	0005303a 	rdctl	r2,status
 8017858:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801785c:	e0fff817 	ldw	r3,-32(fp)
 8017860:	00bfff84 	movi	r2,-2
 8017864:	1884703a 	and	r2,r3,r2
 8017868:	1001703a 	wrctl	status,r2
  
  return context;
 801786c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8017870:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8017874:	008200b4 	movhi	r2,2050
 8017878:	109bc904 	addi	r2,r2,28452
 801787c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8017880:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8017884:	e0fffd17 	ldw	r3,-12(fp)
 8017888:	e0bff617 	ldw	r2,-40(fp)
 801788c:	1885883a 	add	r2,r3,r2
 8017890:	10c00044 	addi	r3,r2,1
 8017894:	e0bffc17 	ldw	r2,-16(fp)
 8017898:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 801789c:	e0bffc17 	ldw	r2,-16(fp)
 80178a0:	10c00217 	ldw	r3,8(r2)
 80178a4:	e0bff617 	ldw	r2,-40(fp)
 80178a8:	1880042e 	bgeu	r3,r2,80178bc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 80178ac:	e0bffc17 	ldw	r2,-16(fp)
 80178b0:	00c00044 	movi	r3,1
 80178b4:	10c00405 	stb	r3,16(r2)
 80178b8:	00000206 	br	80178c4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 80178bc:	e0bffc17 	ldw	r2,-16(fp)
 80178c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80178c4:	e0fffc17 	ldw	r3,-16(fp)
 80178c8:	008200b4 	movhi	r2,2050
 80178cc:	1094eb04 	addi	r2,r2,21420
 80178d0:	e0bff915 	stw	r2,-28(fp)
 80178d4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80178d8:	e0bffa17 	ldw	r2,-24(fp)
 80178dc:	e0fff917 	ldw	r3,-28(fp)
 80178e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80178e4:	e0bff917 	ldw	r2,-28(fp)
 80178e8:	10c00017 	ldw	r3,0(r2)
 80178ec:	e0bffa17 	ldw	r2,-24(fp)
 80178f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80178f4:	e0bff917 	ldw	r2,-28(fp)
 80178f8:	10800017 	ldw	r2,0(r2)
 80178fc:	e0fffa17 	ldw	r3,-24(fp)
 8017900:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8017904:	e0bff917 	ldw	r2,-28(fp)
 8017908:	e0fffa17 	ldw	r3,-24(fp)
 801790c:	10c00015 	stw	r3,0(r2)
 8017910:	e0bff717 	ldw	r2,-36(fp)
 8017914:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017918:	e0bffb17 	ldw	r2,-20(fp)
 801791c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8017920:	0005883a 	mov	r2,zero
 8017924:	00000306 	br	8017934 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8017928:	00bffa84 	movi	r2,-22
 801792c:	00000106 	br	8017934 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8017930:	00bfde84 	movi	r2,-134
  }
}
 8017934:	e037883a 	mov	sp,fp
 8017938:	df000017 	ldw	fp,0(sp)
 801793c:	dec00104 	addi	sp,sp,4
 8017940:	f800283a 	ret

08017944 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8017944:	defffa04 	addi	sp,sp,-24
 8017948:	dfc00515 	stw	ra,20(sp)
 801794c:	df000415 	stw	fp,16(sp)
 8017950:	df000404 	addi	fp,sp,16
 8017954:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8017958:	00800244 	movi	r2,9
 801795c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8017960:	e13ffd17 	ldw	r4,-12(fp)
 8017964:	014003f4 	movhi	r5,15
 8017968:	29509004 	addi	r5,r5,16960
 801796c:	8004c100 	call	8004c10 <__mulsi3>
 8017970:	0100bef4 	movhi	r4,763
 8017974:	213c2004 	addi	r4,r4,-3968
 8017978:	100b883a 	mov	r5,r2
 801797c:	8004c000 	call	8004c00 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8017980:	01200034 	movhi	r4,32768
 8017984:	213fffc4 	addi	r4,r4,-1
 8017988:	100b883a 	mov	r5,r2
 801798c:	8004c000 	call	8004c00 <__udivsi3>
 8017990:	e13fff17 	ldw	r4,-4(fp)
 8017994:	100b883a 	mov	r5,r2
 8017998:	8004c000 	call	8004c00 <__udivsi3>
 801799c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 80179a0:	e0bffe17 	ldw	r2,-8(fp)
 80179a4:	10002a26 	beq	r2,zero,8017a50 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 80179a8:	e03ffc15 	stw	zero,-16(fp)
 80179ac:	00001706 	br	8017a0c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 80179b0:	00a00034 	movhi	r2,32768
 80179b4:	10bfffc4 	addi	r2,r2,-1
 80179b8:	10bfffc4 	addi	r2,r2,-1
 80179bc:	103ffe1e 	bne	r2,zero,80179b8 <__alt_data_end+0xfc0179b8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 80179c0:	e13ffd17 	ldw	r4,-12(fp)
 80179c4:	014003f4 	movhi	r5,15
 80179c8:	29509004 	addi	r5,r5,16960
 80179cc:	8004c100 	call	8004c10 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80179d0:	0100bef4 	movhi	r4,763
 80179d4:	213c2004 	addi	r4,r4,-3968
 80179d8:	100b883a 	mov	r5,r2
 80179dc:	8004c000 	call	8004c00 <__udivsi3>
 80179e0:	01200034 	movhi	r4,32768
 80179e4:	213fffc4 	addi	r4,r4,-1
 80179e8:	100b883a 	mov	r5,r2
 80179ec:	8004c000 	call	8004c00 <__udivsi3>
 80179f0:	1007883a 	mov	r3,r2
 80179f4:	e0bfff17 	ldw	r2,-4(fp)
 80179f8:	10c5c83a 	sub	r2,r2,r3
 80179fc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8017a00:	e0bffc17 	ldw	r2,-16(fp)
 8017a04:	10800044 	addi	r2,r2,1
 8017a08:	e0bffc15 	stw	r2,-16(fp)
 8017a0c:	e0fffc17 	ldw	r3,-16(fp)
 8017a10:	e0bffe17 	ldw	r2,-8(fp)
 8017a14:	18bfe616 	blt	r3,r2,80179b0 <__alt_data_end+0xfc0179b0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8017a18:	e13ffd17 	ldw	r4,-12(fp)
 8017a1c:	014003f4 	movhi	r5,15
 8017a20:	29509004 	addi	r5,r5,16960
 8017a24:	8004c100 	call	8004c10 <__mulsi3>
 8017a28:	0100bef4 	movhi	r4,763
 8017a2c:	213c2004 	addi	r4,r4,-3968
 8017a30:	100b883a 	mov	r5,r2
 8017a34:	8004c000 	call	8004c00 <__udivsi3>
 8017a38:	1009883a 	mov	r4,r2
 8017a3c:	e17fff17 	ldw	r5,-4(fp)
 8017a40:	8004c100 	call	8004c10 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8017a44:	10bfffc4 	addi	r2,r2,-1
 8017a48:	103ffe1e 	bne	r2,zero,8017a44 <__alt_data_end+0xfc017a44>
 8017a4c:	00000d06 	br	8017a84 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8017a50:	e13ffd17 	ldw	r4,-12(fp)
 8017a54:	014003f4 	movhi	r5,15
 8017a58:	29509004 	addi	r5,r5,16960
 8017a5c:	8004c100 	call	8004c10 <__mulsi3>
 8017a60:	0100bef4 	movhi	r4,763
 8017a64:	213c2004 	addi	r4,r4,-3968
 8017a68:	100b883a 	mov	r5,r2
 8017a6c:	8004c000 	call	8004c00 <__udivsi3>
 8017a70:	1009883a 	mov	r4,r2
 8017a74:	e17fff17 	ldw	r5,-4(fp)
 8017a78:	8004c100 	call	8004c10 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8017a7c:	10bfffc4 	addi	r2,r2,-1
 8017a80:	00bffe16 	blt	zero,r2,8017a7c <__alt_data_end+0xfc017a7c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8017a84:	0005883a 	mov	r2,zero
}
 8017a88:	e037883a 	mov	sp,fp
 8017a8c:	dfc00117 	ldw	ra,4(sp)
 8017a90:	df000017 	ldw	fp,0(sp)
 8017a94:	dec00204 	addi	sp,sp,8
 8017a98:	f800283a 	ret

08017a9c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8017a9c:	deffff04 	addi	sp,sp,-4
 8017aa0:	df000015 	stw	fp,0(sp)
 8017aa4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8017aa8:	e037883a 	mov	sp,fp
 8017aac:	df000017 	ldw	fp,0(sp)
 8017ab0:	dec00104 	addi	sp,sp,4
 8017ab4:	f800283a 	ret

08017ab8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017ab8:	defffe04 	addi	sp,sp,-8
 8017abc:	dfc00115 	stw	ra,4(sp)
 8017ac0:	df000015 	stw	fp,0(sp)
 8017ac4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017ac8:	008200b4 	movhi	r2,2050
 8017acc:	1094e904 	addi	r2,r2,21412
 8017ad0:	10800017 	ldw	r2,0(r2)
 8017ad4:	10000526 	beq	r2,zero,8017aec <alt_get_errno+0x34>
 8017ad8:	008200b4 	movhi	r2,2050
 8017adc:	1094e904 	addi	r2,r2,21412
 8017ae0:	10800017 	ldw	r2,0(r2)
 8017ae4:	103ee83a 	callr	r2
 8017ae8:	00000206 	br	8017af4 <alt_get_errno+0x3c>
 8017aec:	008200b4 	movhi	r2,2050
 8017af0:	109bbd04 	addi	r2,r2,28404
}
 8017af4:	e037883a 	mov	sp,fp
 8017af8:	dfc00117 	ldw	ra,4(sp)
 8017afc:	df000017 	ldw	fp,0(sp)
 8017b00:	dec00204 	addi	sp,sp,8
 8017b04:	f800283a 	ret

08017b08 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8017b08:	defffa04 	addi	sp,sp,-24
 8017b0c:	dfc00515 	stw	ra,20(sp)
 8017b10:	df000415 	stw	fp,16(sp)
 8017b14:	df000404 	addi	fp,sp,16
 8017b18:	e13ffe15 	stw	r4,-8(fp)
 8017b1c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8017b20:	e0bffe17 	ldw	r2,-8(fp)
 8017b24:	10000326 	beq	r2,zero,8017b34 <alt_dev_llist_insert+0x2c>
 8017b28:	e0bffe17 	ldw	r2,-8(fp)
 8017b2c:	10800217 	ldw	r2,8(r2)
 8017b30:	1000061e 	bne	r2,zero,8017b4c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8017b34:	8017ab80 	call	8017ab8 <alt_get_errno>
 8017b38:	1007883a 	mov	r3,r2
 8017b3c:	00800584 	movi	r2,22
 8017b40:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8017b44:	00bffa84 	movi	r2,-22
 8017b48:	00001306 	br	8017b98 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8017b4c:	e0bffe17 	ldw	r2,-8(fp)
 8017b50:	e0ffff17 	ldw	r3,-4(fp)
 8017b54:	e0fffc15 	stw	r3,-16(fp)
 8017b58:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8017b5c:	e0bffd17 	ldw	r2,-12(fp)
 8017b60:	e0fffc17 	ldw	r3,-16(fp)
 8017b64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8017b68:	e0bffc17 	ldw	r2,-16(fp)
 8017b6c:	10c00017 	ldw	r3,0(r2)
 8017b70:	e0bffd17 	ldw	r2,-12(fp)
 8017b74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8017b78:	e0bffc17 	ldw	r2,-16(fp)
 8017b7c:	10800017 	ldw	r2,0(r2)
 8017b80:	e0fffd17 	ldw	r3,-12(fp)
 8017b84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8017b88:	e0bffc17 	ldw	r2,-16(fp)
 8017b8c:	e0fffd17 	ldw	r3,-12(fp)
 8017b90:	10c00015 	stw	r3,0(r2)

  return 0;  
 8017b94:	0005883a 	mov	r2,zero
}
 8017b98:	e037883a 	mov	sp,fp
 8017b9c:	dfc00117 	ldw	ra,4(sp)
 8017ba0:	df000017 	ldw	fp,0(sp)
 8017ba4:	dec00204 	addi	sp,sp,8
 8017ba8:	f800283a 	ret

08017bac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8017bac:	defffd04 	addi	sp,sp,-12
 8017bb0:	dfc00215 	stw	ra,8(sp)
 8017bb4:	df000115 	stw	fp,4(sp)
 8017bb8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8017bbc:	008200b4 	movhi	r2,2050
 8017bc0:	10a26104 	addi	r2,r2,-30332
 8017bc4:	e0bfff15 	stw	r2,-4(fp)
 8017bc8:	00000606 	br	8017be4 <_do_ctors+0x38>
        (*ctor) (); 
 8017bcc:	e0bfff17 	ldw	r2,-4(fp)
 8017bd0:	10800017 	ldw	r2,0(r2)
 8017bd4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8017bd8:	e0bfff17 	ldw	r2,-4(fp)
 8017bdc:	10bfff04 	addi	r2,r2,-4
 8017be0:	e0bfff15 	stw	r2,-4(fp)
 8017be4:	e0ffff17 	ldw	r3,-4(fp)
 8017be8:	008200b4 	movhi	r2,2050
 8017bec:	10a26204 	addi	r2,r2,-30328
 8017bf0:	18bff62e 	bgeu	r3,r2,8017bcc <__alt_data_end+0xfc017bcc>
        (*ctor) (); 
}
 8017bf4:	e037883a 	mov	sp,fp
 8017bf8:	dfc00117 	ldw	ra,4(sp)
 8017bfc:	df000017 	ldw	fp,0(sp)
 8017c00:	dec00204 	addi	sp,sp,8
 8017c04:	f800283a 	ret

08017c08 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8017c08:	defffd04 	addi	sp,sp,-12
 8017c0c:	dfc00215 	stw	ra,8(sp)
 8017c10:	df000115 	stw	fp,4(sp)
 8017c14:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8017c18:	008200b4 	movhi	r2,2050
 8017c1c:	10a26104 	addi	r2,r2,-30332
 8017c20:	e0bfff15 	stw	r2,-4(fp)
 8017c24:	00000606 	br	8017c40 <_do_dtors+0x38>
        (*dtor) (); 
 8017c28:	e0bfff17 	ldw	r2,-4(fp)
 8017c2c:	10800017 	ldw	r2,0(r2)
 8017c30:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8017c34:	e0bfff17 	ldw	r2,-4(fp)
 8017c38:	10bfff04 	addi	r2,r2,-4
 8017c3c:	e0bfff15 	stw	r2,-4(fp)
 8017c40:	e0ffff17 	ldw	r3,-4(fp)
 8017c44:	008200b4 	movhi	r2,2050
 8017c48:	10a26204 	addi	r2,r2,-30328
 8017c4c:	18bff62e 	bgeu	r3,r2,8017c28 <__alt_data_end+0xfc017c28>
        (*dtor) (); 
}
 8017c50:	e037883a 	mov	sp,fp
 8017c54:	dfc00117 	ldw	ra,4(sp)
 8017c58:	df000017 	ldw	fp,0(sp)
 8017c5c:	dec00204 	addi	sp,sp,8
 8017c60:	f800283a 	ret

08017c64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8017c64:	defffa04 	addi	sp,sp,-24
 8017c68:	dfc00515 	stw	ra,20(sp)
 8017c6c:	df000415 	stw	fp,16(sp)
 8017c70:	df000404 	addi	fp,sp,16
 8017c74:	e13ffe15 	stw	r4,-8(fp)
 8017c78:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8017c7c:	e0bfff17 	ldw	r2,-4(fp)
 8017c80:	10800017 	ldw	r2,0(r2)
 8017c84:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8017c88:	e13ffe17 	ldw	r4,-8(fp)
 8017c8c:	80079640 	call	8007964 <strlen>
 8017c90:	10800044 	addi	r2,r2,1
 8017c94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8017c98:	00000d06 	br	8017cd0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8017c9c:	e0bffc17 	ldw	r2,-16(fp)
 8017ca0:	10c00217 	ldw	r3,8(r2)
 8017ca4:	e0bffd17 	ldw	r2,-12(fp)
 8017ca8:	1809883a 	mov	r4,r3
 8017cac:	e17ffe17 	ldw	r5,-8(fp)
 8017cb0:	100d883a 	mov	r6,r2
 8017cb4:	80186300 	call	8018630 <memcmp>
 8017cb8:	1000021e 	bne	r2,zero,8017cc4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8017cbc:	e0bffc17 	ldw	r2,-16(fp)
 8017cc0:	00000706 	br	8017ce0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8017cc4:	e0bffc17 	ldw	r2,-16(fp)
 8017cc8:	10800017 	ldw	r2,0(r2)
 8017ccc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8017cd0:	e0fffc17 	ldw	r3,-16(fp)
 8017cd4:	e0bfff17 	ldw	r2,-4(fp)
 8017cd8:	18bff01e 	bne	r3,r2,8017c9c <__alt_data_end+0xfc017c9c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8017cdc:	0005883a 	mov	r2,zero
}
 8017ce0:	e037883a 	mov	sp,fp
 8017ce4:	dfc00117 	ldw	ra,4(sp)
 8017ce8:	df000017 	ldw	fp,0(sp)
 8017cec:	dec00204 	addi	sp,sp,8
 8017cf0:	f800283a 	ret

08017cf4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8017cf4:	deffff04 	addi	sp,sp,-4
 8017cf8:	df000015 	stw	fp,0(sp)
 8017cfc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8017d00:	e037883a 	mov	sp,fp
 8017d04:	df000017 	ldw	fp,0(sp)
 8017d08:	dec00104 	addi	sp,sp,4
 8017d0c:	f800283a 	ret

08017d10 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8017d10:	defff904 	addi	sp,sp,-28
 8017d14:	dfc00615 	stw	ra,24(sp)
 8017d18:	df000515 	stw	fp,20(sp)
 8017d1c:	df000504 	addi	fp,sp,20
 8017d20:	e13ffc15 	stw	r4,-16(fp)
 8017d24:	e17ffd15 	stw	r5,-12(fp)
 8017d28:	e1bffe15 	stw	r6,-8(fp)
 8017d2c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8017d30:	e0800217 	ldw	r2,8(fp)
 8017d34:	d8800015 	stw	r2,0(sp)
 8017d38:	e13ffc17 	ldw	r4,-16(fp)
 8017d3c:	e17ffd17 	ldw	r5,-12(fp)
 8017d40:	e1bffe17 	ldw	r6,-8(fp)
 8017d44:	e1ffff17 	ldw	r7,-4(fp)
 8017d48:	8017ef00 	call	8017ef0 <alt_iic_isr_register>
}  
 8017d4c:	e037883a 	mov	sp,fp
 8017d50:	dfc00117 	ldw	ra,4(sp)
 8017d54:	df000017 	ldw	fp,0(sp)
 8017d58:	dec00204 	addi	sp,sp,8
 8017d5c:	f800283a 	ret

08017d60 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8017d60:	defff904 	addi	sp,sp,-28
 8017d64:	df000615 	stw	fp,24(sp)
 8017d68:	df000604 	addi	fp,sp,24
 8017d6c:	e13ffe15 	stw	r4,-8(fp)
 8017d70:	e17fff15 	stw	r5,-4(fp)
 8017d74:	e0bfff17 	ldw	r2,-4(fp)
 8017d78:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017d7c:	0005303a 	rdctl	r2,status
 8017d80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017d84:	e0fffb17 	ldw	r3,-20(fp)
 8017d88:	00bfff84 	movi	r2,-2
 8017d8c:	1884703a 	and	r2,r3,r2
 8017d90:	1001703a 	wrctl	status,r2
  
  return context;
 8017d94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8017d98:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8017d9c:	e0bffa17 	ldw	r2,-24(fp)
 8017da0:	00c00044 	movi	r3,1
 8017da4:	1884983a 	sll	r2,r3,r2
 8017da8:	1007883a 	mov	r3,r2
 8017dac:	008200b4 	movhi	r2,2050
 8017db0:	109bca04 	addi	r2,r2,28456
 8017db4:	10800017 	ldw	r2,0(r2)
 8017db8:	1886b03a 	or	r3,r3,r2
 8017dbc:	008200b4 	movhi	r2,2050
 8017dc0:	109bca04 	addi	r2,r2,28456
 8017dc4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8017dc8:	008200b4 	movhi	r2,2050
 8017dcc:	109bca04 	addi	r2,r2,28456
 8017dd0:	10800017 	ldw	r2,0(r2)
 8017dd4:	100170fa 	wrctl	ienable,r2
 8017dd8:	e0bffc17 	ldw	r2,-16(fp)
 8017ddc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017de0:	e0bffd17 	ldw	r2,-12(fp)
 8017de4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8017de8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8017dec:	0001883a 	nop
}
 8017df0:	e037883a 	mov	sp,fp
 8017df4:	df000017 	ldw	fp,0(sp)
 8017df8:	dec00104 	addi	sp,sp,4
 8017dfc:	f800283a 	ret

08017e00 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8017e00:	defff904 	addi	sp,sp,-28
 8017e04:	df000615 	stw	fp,24(sp)
 8017e08:	df000604 	addi	fp,sp,24
 8017e0c:	e13ffe15 	stw	r4,-8(fp)
 8017e10:	e17fff15 	stw	r5,-4(fp)
 8017e14:	e0bfff17 	ldw	r2,-4(fp)
 8017e18:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017e1c:	0005303a 	rdctl	r2,status
 8017e20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017e24:	e0fffb17 	ldw	r3,-20(fp)
 8017e28:	00bfff84 	movi	r2,-2
 8017e2c:	1884703a 	and	r2,r3,r2
 8017e30:	1001703a 	wrctl	status,r2
  
  return context;
 8017e34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8017e38:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8017e3c:	e0bffa17 	ldw	r2,-24(fp)
 8017e40:	00c00044 	movi	r3,1
 8017e44:	1884983a 	sll	r2,r3,r2
 8017e48:	0084303a 	nor	r2,zero,r2
 8017e4c:	1007883a 	mov	r3,r2
 8017e50:	008200b4 	movhi	r2,2050
 8017e54:	109bca04 	addi	r2,r2,28456
 8017e58:	10800017 	ldw	r2,0(r2)
 8017e5c:	1886703a 	and	r3,r3,r2
 8017e60:	008200b4 	movhi	r2,2050
 8017e64:	109bca04 	addi	r2,r2,28456
 8017e68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8017e6c:	008200b4 	movhi	r2,2050
 8017e70:	109bca04 	addi	r2,r2,28456
 8017e74:	10800017 	ldw	r2,0(r2)
 8017e78:	100170fa 	wrctl	ienable,r2
 8017e7c:	e0bffc17 	ldw	r2,-16(fp)
 8017e80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017e84:	e0bffd17 	ldw	r2,-12(fp)
 8017e88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8017e8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8017e90:	0001883a 	nop
}
 8017e94:	e037883a 	mov	sp,fp
 8017e98:	df000017 	ldw	fp,0(sp)
 8017e9c:	dec00104 	addi	sp,sp,4
 8017ea0:	f800283a 	ret

08017ea4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8017ea4:	defffc04 	addi	sp,sp,-16
 8017ea8:	df000315 	stw	fp,12(sp)
 8017eac:	df000304 	addi	fp,sp,12
 8017eb0:	e13ffe15 	stw	r4,-8(fp)
 8017eb4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8017eb8:	000530fa 	rdctl	r2,ienable
 8017ebc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8017ec0:	e0bfff17 	ldw	r2,-4(fp)
 8017ec4:	00c00044 	movi	r3,1
 8017ec8:	1884983a 	sll	r2,r3,r2
 8017ecc:	1007883a 	mov	r3,r2
 8017ed0:	e0bffd17 	ldw	r2,-12(fp)
 8017ed4:	1884703a 	and	r2,r3,r2
 8017ed8:	1004c03a 	cmpne	r2,r2,zero
 8017edc:	10803fcc 	andi	r2,r2,255
}
 8017ee0:	e037883a 	mov	sp,fp
 8017ee4:	df000017 	ldw	fp,0(sp)
 8017ee8:	dec00104 	addi	sp,sp,4
 8017eec:	f800283a 	ret

08017ef0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8017ef0:	defff504 	addi	sp,sp,-44
 8017ef4:	dfc00a15 	stw	ra,40(sp)
 8017ef8:	df000915 	stw	fp,36(sp)
 8017efc:	df000904 	addi	fp,sp,36
 8017f00:	e13ffc15 	stw	r4,-16(fp)
 8017f04:	e17ffd15 	stw	r5,-12(fp)
 8017f08:	e1bffe15 	stw	r6,-8(fp)
 8017f0c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8017f10:	00bffa84 	movi	r2,-22
 8017f14:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8017f18:	e0bffd17 	ldw	r2,-12(fp)
 8017f1c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8017f20:	e0bff817 	ldw	r2,-32(fp)
 8017f24:	10800808 	cmpgei	r2,r2,32
 8017f28:	1000271e 	bne	r2,zero,8017fc8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017f2c:	0005303a 	rdctl	r2,status
 8017f30:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017f34:	e0fffa17 	ldw	r3,-24(fp)
 8017f38:	00bfff84 	movi	r2,-2
 8017f3c:	1884703a 	and	r2,r3,r2
 8017f40:	1001703a 	wrctl	status,r2
  
  return context;
 8017f44:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8017f48:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8017f4c:	008200b4 	movhi	r2,2050
 8017f50:	109d2904 	addi	r2,r2,29860
 8017f54:	e0fff817 	ldw	r3,-32(fp)
 8017f58:	180690fa 	slli	r3,r3,3
 8017f5c:	10c5883a 	add	r2,r2,r3
 8017f60:	e0fffe17 	ldw	r3,-8(fp)
 8017f64:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8017f68:	008200b4 	movhi	r2,2050
 8017f6c:	109d2904 	addi	r2,r2,29860
 8017f70:	e0fff817 	ldw	r3,-32(fp)
 8017f74:	180690fa 	slli	r3,r3,3
 8017f78:	10c5883a 	add	r2,r2,r3
 8017f7c:	10800104 	addi	r2,r2,4
 8017f80:	e0ffff17 	ldw	r3,-4(fp)
 8017f84:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8017f88:	e0bffe17 	ldw	r2,-8(fp)
 8017f8c:	10000526 	beq	r2,zero,8017fa4 <alt_iic_isr_register+0xb4>
 8017f90:	e0bff817 	ldw	r2,-32(fp)
 8017f94:	e13ffc17 	ldw	r4,-16(fp)
 8017f98:	100b883a 	mov	r5,r2
 8017f9c:	8017d600 	call	8017d60 <alt_ic_irq_enable>
 8017fa0:	00000406 	br	8017fb4 <alt_iic_isr_register+0xc4>
 8017fa4:	e0bff817 	ldw	r2,-32(fp)
 8017fa8:	e13ffc17 	ldw	r4,-16(fp)
 8017fac:	100b883a 	mov	r5,r2
 8017fb0:	8017e000 	call	8017e00 <alt_ic_irq_disable>
 8017fb4:	e0bff715 	stw	r2,-36(fp)
 8017fb8:	e0bff917 	ldw	r2,-28(fp)
 8017fbc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017fc0:	e0bffb17 	ldw	r2,-20(fp)
 8017fc4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8017fc8:	e0bff717 	ldw	r2,-36(fp)
}
 8017fcc:	e037883a 	mov	sp,fp
 8017fd0:	dfc00117 	ldw	ra,4(sp)
 8017fd4:	df000017 	ldw	fp,0(sp)
 8017fd8:	dec00204 	addi	sp,sp,8
 8017fdc:	f800283a 	ret

08017fe0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8017fe0:	defff804 	addi	sp,sp,-32
 8017fe4:	dfc00715 	stw	ra,28(sp)
 8017fe8:	df000615 	stw	fp,24(sp)
 8017fec:	dc000515 	stw	r16,20(sp)
 8017ff0:	df000604 	addi	fp,sp,24
 8017ff4:	e13ffb15 	stw	r4,-20(fp)
 8017ff8:	e17ffc15 	stw	r5,-16(fp)
 8017ffc:	e1bffd15 	stw	r6,-12(fp)
 8018000:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8018004:	e13ffc17 	ldw	r4,-16(fp)
 8018008:	e17ffd17 	ldw	r5,-12(fp)
 801800c:	e1bffe17 	ldw	r6,-8(fp)
 8018010:	801827c0 	call	801827c <open>
 8018014:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8018018:	e0bffa17 	ldw	r2,-24(fp)
 801801c:	10002216 	blt	r2,zero,80180a8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8018020:	040200b4 	movhi	r16,2050
 8018024:	84105a04 	addi	r16,r16,16744
 8018028:	e0bffa17 	ldw	r2,-24(fp)
 801802c:	1009883a 	mov	r4,r2
 8018030:	01400304 	movi	r5,12
 8018034:	8004c100 	call	8004c10 <__mulsi3>
 8018038:	8085883a 	add	r2,r16,r2
 801803c:	10c00017 	ldw	r3,0(r2)
 8018040:	e0bffb17 	ldw	r2,-20(fp)
 8018044:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8018048:	040200b4 	movhi	r16,2050
 801804c:	84105a04 	addi	r16,r16,16744
 8018050:	e0bffa17 	ldw	r2,-24(fp)
 8018054:	1009883a 	mov	r4,r2
 8018058:	01400304 	movi	r5,12
 801805c:	8004c100 	call	8004c10 <__mulsi3>
 8018060:	8085883a 	add	r2,r16,r2
 8018064:	10800104 	addi	r2,r2,4
 8018068:	10c00017 	ldw	r3,0(r2)
 801806c:	e0bffb17 	ldw	r2,-20(fp)
 8018070:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8018074:	040200b4 	movhi	r16,2050
 8018078:	84105a04 	addi	r16,r16,16744
 801807c:	e0bffa17 	ldw	r2,-24(fp)
 8018080:	1009883a 	mov	r4,r2
 8018084:	01400304 	movi	r5,12
 8018088:	8004c100 	call	8004c10 <__mulsi3>
 801808c:	8085883a 	add	r2,r16,r2
 8018090:	10800204 	addi	r2,r2,8
 8018094:	10c00017 	ldw	r3,0(r2)
 8018098:	e0bffb17 	ldw	r2,-20(fp)
 801809c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80180a0:	e13ffa17 	ldw	r4,-24(fp)
 80180a4:	80162bc0 	call	80162bc <alt_release_fd>
  }
} 
 80180a8:	e6ffff04 	addi	sp,fp,-4
 80180ac:	dfc00217 	ldw	ra,8(sp)
 80180b0:	df000117 	ldw	fp,4(sp)
 80180b4:	dc000017 	ldw	r16,0(sp)
 80180b8:	dec00304 	addi	sp,sp,12
 80180bc:	f800283a 	ret

080180c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80180c0:	defffb04 	addi	sp,sp,-20
 80180c4:	dfc00415 	stw	ra,16(sp)
 80180c8:	df000315 	stw	fp,12(sp)
 80180cc:	df000304 	addi	fp,sp,12
 80180d0:	e13ffd15 	stw	r4,-12(fp)
 80180d4:	e17ffe15 	stw	r5,-8(fp)
 80180d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80180dc:	010200b4 	movhi	r4,2050
 80180e0:	21105d04 	addi	r4,r4,16756
 80180e4:	e17ffd17 	ldw	r5,-12(fp)
 80180e8:	01800044 	movi	r6,1
 80180ec:	01c07fc4 	movi	r7,511
 80180f0:	8017fe00 	call	8017fe0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80180f4:	010200b4 	movhi	r4,2050
 80180f8:	21105a04 	addi	r4,r4,16744
 80180fc:	e17ffe17 	ldw	r5,-8(fp)
 8018100:	000d883a 	mov	r6,zero
 8018104:	01c07fc4 	movi	r7,511
 8018108:	8017fe00 	call	8017fe0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801810c:	010200b4 	movhi	r4,2050
 8018110:	21106004 	addi	r4,r4,16768
 8018114:	e17fff17 	ldw	r5,-4(fp)
 8018118:	01800044 	movi	r6,1
 801811c:	01c07fc4 	movi	r7,511
 8018120:	8017fe00 	call	8017fe0 <alt_open_fd>
}  
 8018124:	e037883a 	mov	sp,fp
 8018128:	dfc00117 	ldw	ra,4(sp)
 801812c:	df000017 	ldw	fp,0(sp)
 8018130:	dec00204 	addi	sp,sp,8
 8018134:	f800283a 	ret

08018138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018138:	defffe04 	addi	sp,sp,-8
 801813c:	dfc00115 	stw	ra,4(sp)
 8018140:	df000015 	stw	fp,0(sp)
 8018144:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018148:	008200b4 	movhi	r2,2050
 801814c:	1094e904 	addi	r2,r2,21412
 8018150:	10800017 	ldw	r2,0(r2)
 8018154:	10000526 	beq	r2,zero,801816c <alt_get_errno+0x34>
 8018158:	008200b4 	movhi	r2,2050
 801815c:	1094e904 	addi	r2,r2,21412
 8018160:	10800017 	ldw	r2,0(r2)
 8018164:	103ee83a 	callr	r2
 8018168:	00000206 	br	8018174 <alt_get_errno+0x3c>
 801816c:	008200b4 	movhi	r2,2050
 8018170:	109bbd04 	addi	r2,r2,28404
}
 8018174:	e037883a 	mov	sp,fp
 8018178:	dfc00117 	ldw	ra,4(sp)
 801817c:	df000017 	ldw	fp,0(sp)
 8018180:	dec00204 	addi	sp,sp,8
 8018184:	f800283a 	ret

08018188 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8018188:	defffb04 	addi	sp,sp,-20
 801818c:	dfc00415 	stw	ra,16(sp)
 8018190:	df000315 	stw	fp,12(sp)
 8018194:	dc000215 	stw	r16,8(sp)
 8018198:	df000304 	addi	fp,sp,12
 801819c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80181a0:	e0bffe17 	ldw	r2,-8(fp)
 80181a4:	10800217 	ldw	r2,8(r2)
 80181a8:	10d00034 	orhi	r3,r2,16384
 80181ac:	e0bffe17 	ldw	r2,-8(fp)
 80181b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80181b4:	e03ffd15 	stw	zero,-12(fp)
 80181b8:	00002306 	br	8018248 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80181bc:	040200b4 	movhi	r16,2050
 80181c0:	84105a04 	addi	r16,r16,16744
 80181c4:	e0bffd17 	ldw	r2,-12(fp)
 80181c8:	1009883a 	mov	r4,r2
 80181cc:	01400304 	movi	r5,12
 80181d0:	8004c100 	call	8004c10 <__mulsi3>
 80181d4:	8085883a 	add	r2,r16,r2
 80181d8:	10c00017 	ldw	r3,0(r2)
 80181dc:	e0bffe17 	ldw	r2,-8(fp)
 80181e0:	10800017 	ldw	r2,0(r2)
 80181e4:	1880151e 	bne	r3,r2,801823c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80181e8:	040200b4 	movhi	r16,2050
 80181ec:	84105a04 	addi	r16,r16,16744
 80181f0:	e0bffd17 	ldw	r2,-12(fp)
 80181f4:	1009883a 	mov	r4,r2
 80181f8:	01400304 	movi	r5,12
 80181fc:	8004c100 	call	8004c10 <__mulsi3>
 8018200:	8085883a 	add	r2,r16,r2
 8018204:	10800204 	addi	r2,r2,8
 8018208:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801820c:	10000b0e 	bge	r2,zero,801823c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8018210:	e13ffd17 	ldw	r4,-12(fp)
 8018214:	01400304 	movi	r5,12
 8018218:	8004c100 	call	8004c10 <__mulsi3>
 801821c:	1007883a 	mov	r3,r2
 8018220:	008200b4 	movhi	r2,2050
 8018224:	10905a04 	addi	r2,r2,16744
 8018228:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801822c:	e0bffe17 	ldw	r2,-8(fp)
 8018230:	18800226 	beq	r3,r2,801823c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8018234:	00bffcc4 	movi	r2,-13
 8018238:	00000a06 	br	8018264 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801823c:	e0bffd17 	ldw	r2,-12(fp)
 8018240:	10800044 	addi	r2,r2,1
 8018244:	e0bffd15 	stw	r2,-12(fp)
 8018248:	008200b4 	movhi	r2,2050
 801824c:	1094e804 	addi	r2,r2,21408
 8018250:	10800017 	ldw	r2,0(r2)
 8018254:	1007883a 	mov	r3,r2
 8018258:	e0bffd17 	ldw	r2,-12(fp)
 801825c:	18bfd72e 	bgeu	r3,r2,80181bc <__alt_data_end+0xfc0181bc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8018260:	0005883a 	mov	r2,zero
}
 8018264:	e6ffff04 	addi	sp,fp,-4
 8018268:	dfc00217 	ldw	ra,8(sp)
 801826c:	df000117 	ldw	fp,4(sp)
 8018270:	dc000017 	ldw	r16,0(sp)
 8018274:	dec00304 	addi	sp,sp,12
 8018278:	f800283a 	ret

0801827c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 801827c:	defff604 	addi	sp,sp,-40
 8018280:	dfc00915 	stw	ra,36(sp)
 8018284:	df000815 	stw	fp,32(sp)
 8018288:	df000804 	addi	fp,sp,32
 801828c:	e13ffd15 	stw	r4,-12(fp)
 8018290:	e17ffe15 	stw	r5,-8(fp)
 8018294:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8018298:	00bfffc4 	movi	r2,-1
 801829c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80182a0:	00bffb44 	movi	r2,-19
 80182a4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80182a8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80182ac:	e13ffd17 	ldw	r4,-12(fp)
 80182b0:	014200b4 	movhi	r5,2050
 80182b4:	2954e604 	addi	r5,r5,21400
 80182b8:	8017c640 	call	8017c64 <alt_find_dev>
 80182bc:	e0bff815 	stw	r2,-32(fp)
 80182c0:	e0bff817 	ldw	r2,-32(fp)
 80182c4:	1000051e 	bne	r2,zero,80182dc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80182c8:	e13ffd17 	ldw	r4,-12(fp)
 80182cc:	80183fc0 	call	80183fc <alt_find_file>
 80182d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80182d4:	00800044 	movi	r2,1
 80182d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80182dc:	e0bff817 	ldw	r2,-32(fp)
 80182e0:	10002b26 	beq	r2,zero,8018390 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80182e4:	e13ff817 	ldw	r4,-32(fp)
 80182e8:	80185100 	call	8018510 <alt_get_fd>
 80182ec:	e0bff915 	stw	r2,-28(fp)
 80182f0:	e0bff917 	ldw	r2,-28(fp)
 80182f4:	1000030e 	bge	r2,zero,8018304 <open+0x88>
    {
      status = index;
 80182f8:	e0bff917 	ldw	r2,-28(fp)
 80182fc:	e0bffa15 	stw	r2,-24(fp)
 8018300:	00002506 	br	8018398 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8018304:	e13ff917 	ldw	r4,-28(fp)
 8018308:	01400304 	movi	r5,12
 801830c:	8004c100 	call	8004c10 <__mulsi3>
 8018310:	1007883a 	mov	r3,r2
 8018314:	008200b4 	movhi	r2,2050
 8018318:	10905a04 	addi	r2,r2,16744
 801831c:	1885883a 	add	r2,r3,r2
 8018320:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8018324:	e0fffe17 	ldw	r3,-8(fp)
 8018328:	00900034 	movhi	r2,16384
 801832c:	10bfffc4 	addi	r2,r2,-1
 8018330:	1886703a 	and	r3,r3,r2
 8018334:	e0bffc17 	ldw	r2,-16(fp)
 8018338:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801833c:	e0bffb17 	ldw	r2,-20(fp)
 8018340:	1000051e 	bne	r2,zero,8018358 <open+0xdc>
 8018344:	e13ffc17 	ldw	r4,-16(fp)
 8018348:	80181880 	call	8018188 <alt_file_locked>
 801834c:	e0bffa15 	stw	r2,-24(fp)
 8018350:	e0bffa17 	ldw	r2,-24(fp)
 8018354:	10001016 	blt	r2,zero,8018398 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8018358:	e0bff817 	ldw	r2,-32(fp)
 801835c:	10800317 	ldw	r2,12(r2)
 8018360:	10000826 	beq	r2,zero,8018384 <open+0x108>
 8018364:	e0bff817 	ldw	r2,-32(fp)
 8018368:	10800317 	ldw	r2,12(r2)
 801836c:	e13ffc17 	ldw	r4,-16(fp)
 8018370:	e17ffd17 	ldw	r5,-12(fp)
 8018374:	e1bffe17 	ldw	r6,-8(fp)
 8018378:	e1ffff17 	ldw	r7,-4(fp)
 801837c:	103ee83a 	callr	r2
 8018380:	00000106 	br	8018388 <open+0x10c>
 8018384:	0005883a 	mov	r2,zero
 8018388:	e0bffa15 	stw	r2,-24(fp)
 801838c:	00000206 	br	8018398 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8018390:	00bffb44 	movi	r2,-19
 8018394:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8018398:	e0bffa17 	ldw	r2,-24(fp)
 801839c:	1000090e 	bge	r2,zero,80183c4 <open+0x148>
  {
    alt_release_fd (index);  
 80183a0:	e13ff917 	ldw	r4,-28(fp)
 80183a4:	80162bc0 	call	80162bc <alt_release_fd>
    ALT_ERRNO = -status;
 80183a8:	80181380 	call	8018138 <alt_get_errno>
 80183ac:	1007883a 	mov	r3,r2
 80183b0:	e0bffa17 	ldw	r2,-24(fp)
 80183b4:	0085c83a 	sub	r2,zero,r2
 80183b8:	18800015 	stw	r2,0(r3)
    return -1;
 80183bc:	00bfffc4 	movi	r2,-1
 80183c0:	00000106 	br	80183c8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 80183c4:	e0bff917 	ldw	r2,-28(fp)
}
 80183c8:	e037883a 	mov	sp,fp
 80183cc:	dfc00117 	ldw	ra,4(sp)
 80183d0:	df000017 	ldw	fp,0(sp)
 80183d4:	dec00204 	addi	sp,sp,8
 80183d8:	f800283a 	ret

080183dc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 80183dc:	deffff04 	addi	sp,sp,-4
 80183e0:	df000015 	stw	fp,0(sp)
 80183e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80183e8:	000170fa 	wrctl	ienable,zero
}
 80183ec:	e037883a 	mov	sp,fp
 80183f0:	df000017 	ldw	fp,0(sp)
 80183f4:	dec00104 	addi	sp,sp,4
 80183f8:	f800283a 	ret

080183fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80183fc:	defffb04 	addi	sp,sp,-20
 8018400:	dfc00415 	stw	ra,16(sp)
 8018404:	df000315 	stw	fp,12(sp)
 8018408:	df000304 	addi	fp,sp,12
 801840c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8018410:	008200b4 	movhi	r2,2050
 8018414:	1094e404 	addi	r2,r2,21392
 8018418:	10800017 	ldw	r2,0(r2)
 801841c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8018420:	00003106 	br	80184e8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8018424:	e0bffd17 	ldw	r2,-12(fp)
 8018428:	10800217 	ldw	r2,8(r2)
 801842c:	1009883a 	mov	r4,r2
 8018430:	80079640 	call	8007964 <strlen>
 8018434:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8018438:	e0bffd17 	ldw	r2,-12(fp)
 801843c:	10c00217 	ldw	r3,8(r2)
 8018440:	e0bffe17 	ldw	r2,-8(fp)
 8018444:	10bfffc4 	addi	r2,r2,-1
 8018448:	1885883a 	add	r2,r3,r2
 801844c:	10800003 	ldbu	r2,0(r2)
 8018450:	10803fcc 	andi	r2,r2,255
 8018454:	1080201c 	xori	r2,r2,128
 8018458:	10bfe004 	addi	r2,r2,-128
 801845c:	10800bd8 	cmpnei	r2,r2,47
 8018460:	1000031e 	bne	r2,zero,8018470 <alt_find_file+0x74>
    {
      len -= 1;
 8018464:	e0bffe17 	ldw	r2,-8(fp)
 8018468:	10bfffc4 	addi	r2,r2,-1
 801846c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8018470:	e0bffe17 	ldw	r2,-8(fp)
 8018474:	e0ffff17 	ldw	r3,-4(fp)
 8018478:	1885883a 	add	r2,r3,r2
 801847c:	10800003 	ldbu	r2,0(r2)
 8018480:	10803fcc 	andi	r2,r2,255
 8018484:	1080201c 	xori	r2,r2,128
 8018488:	10bfe004 	addi	r2,r2,-128
 801848c:	10800be0 	cmpeqi	r2,r2,47
 8018490:	1000081e 	bne	r2,zero,80184b4 <alt_find_file+0xb8>
 8018494:	e0bffe17 	ldw	r2,-8(fp)
 8018498:	e0ffff17 	ldw	r3,-4(fp)
 801849c:	1885883a 	add	r2,r3,r2
 80184a0:	10800003 	ldbu	r2,0(r2)
 80184a4:	10803fcc 	andi	r2,r2,255
 80184a8:	1080201c 	xori	r2,r2,128
 80184ac:	10bfe004 	addi	r2,r2,-128
 80184b0:	10000a1e 	bne	r2,zero,80184dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 80184b4:	e0bffd17 	ldw	r2,-12(fp)
 80184b8:	10c00217 	ldw	r3,8(r2)
 80184bc:	e0bffe17 	ldw	r2,-8(fp)
 80184c0:	1809883a 	mov	r4,r3
 80184c4:	e17fff17 	ldw	r5,-4(fp)
 80184c8:	100d883a 	mov	r6,r2
 80184cc:	80186300 	call	8018630 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80184d0:	1000021e 	bne	r2,zero,80184dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80184d4:	e0bffd17 	ldw	r2,-12(fp)
 80184d8:	00000806 	br	80184fc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 80184dc:	e0bffd17 	ldw	r2,-12(fp)
 80184e0:	10800017 	ldw	r2,0(r2)
 80184e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80184e8:	e0fffd17 	ldw	r3,-12(fp)
 80184ec:	008200b4 	movhi	r2,2050
 80184f0:	1094e404 	addi	r2,r2,21392
 80184f4:	18bfcb1e 	bne	r3,r2,8018424 <__alt_data_end+0xfc018424>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80184f8:	0005883a 	mov	r2,zero
}
 80184fc:	e037883a 	mov	sp,fp
 8018500:	dfc00117 	ldw	ra,4(sp)
 8018504:	df000017 	ldw	fp,0(sp)
 8018508:	dec00204 	addi	sp,sp,8
 801850c:	f800283a 	ret

08018510 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8018510:	defffa04 	addi	sp,sp,-24
 8018514:	dfc00515 	stw	ra,20(sp)
 8018518:	df000415 	stw	fp,16(sp)
 801851c:	dc000315 	stw	r16,12(sp)
 8018520:	df000404 	addi	fp,sp,16
 8018524:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8018528:	00bffa04 	movi	r2,-24
 801852c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8018530:	e03ffc15 	stw	zero,-16(fp)
 8018534:	00002106 	br	80185bc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8018538:	040200b4 	movhi	r16,2050
 801853c:	84105a04 	addi	r16,r16,16744
 8018540:	e0bffc17 	ldw	r2,-16(fp)
 8018544:	1009883a 	mov	r4,r2
 8018548:	01400304 	movi	r5,12
 801854c:	8004c100 	call	8004c10 <__mulsi3>
 8018550:	8085883a 	add	r2,r16,r2
 8018554:	10800017 	ldw	r2,0(r2)
 8018558:	1000151e 	bne	r2,zero,80185b0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 801855c:	040200b4 	movhi	r16,2050
 8018560:	84105a04 	addi	r16,r16,16744
 8018564:	e0bffc17 	ldw	r2,-16(fp)
 8018568:	1009883a 	mov	r4,r2
 801856c:	01400304 	movi	r5,12
 8018570:	8004c100 	call	8004c10 <__mulsi3>
 8018574:	8085883a 	add	r2,r16,r2
 8018578:	e0fffe17 	ldw	r3,-8(fp)
 801857c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8018580:	008200b4 	movhi	r2,2050
 8018584:	1094e804 	addi	r2,r2,21408
 8018588:	10c00017 	ldw	r3,0(r2)
 801858c:	e0bffc17 	ldw	r2,-16(fp)
 8018590:	1880040e 	bge	r3,r2,80185a4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8018594:	008200b4 	movhi	r2,2050
 8018598:	1094e804 	addi	r2,r2,21408
 801859c:	e0fffc17 	ldw	r3,-16(fp)
 80185a0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 80185a4:	e0bffc17 	ldw	r2,-16(fp)
 80185a8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 80185ac:	00000606 	br	80185c8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80185b0:	e0bffc17 	ldw	r2,-16(fp)
 80185b4:	10800044 	addi	r2,r2,1
 80185b8:	e0bffc15 	stw	r2,-16(fp)
 80185bc:	e0bffc17 	ldw	r2,-16(fp)
 80185c0:	10800810 	cmplti	r2,r2,32
 80185c4:	103fdc1e 	bne	r2,zero,8018538 <__alt_data_end+0xfc018538>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80185c8:	e0bffd17 	ldw	r2,-12(fp)
}
 80185cc:	e6ffff04 	addi	sp,fp,-4
 80185d0:	dfc00217 	ldw	ra,8(sp)
 80185d4:	df000117 	ldw	fp,4(sp)
 80185d8:	dc000017 	ldw	r16,0(sp)
 80185dc:	dec00304 	addi	sp,sp,12
 80185e0:	f800283a 	ret

080185e4 <atexit>:
 80185e4:	200b883a 	mov	r5,r4
 80185e8:	000d883a 	mov	r6,zero
 80185ec:	0009883a 	mov	r4,zero
 80185f0:	000f883a 	mov	r7,zero
 80185f4:	80186ac1 	jmpi	80186ac <__register_exitproc>

080185f8 <exit>:
 80185f8:	defffe04 	addi	sp,sp,-8
 80185fc:	000b883a 	mov	r5,zero
 8018600:	dc000015 	stw	r16,0(sp)
 8018604:	dfc00115 	stw	ra,4(sp)
 8018608:	2021883a 	mov	r16,r4
 801860c:	80187c00 	call	80187c0 <__call_exitprocs>
 8018610:	008200b4 	movhi	r2,2050
 8018614:	1094e004 	addi	r2,r2,21376
 8018618:	11000017 	ldw	r4,0(r2)
 801861c:	20800f17 	ldw	r2,60(r4)
 8018620:	10000126 	beq	r2,zero,8018628 <exit+0x30>
 8018624:	103ee83a 	callr	r2
 8018628:	8009883a 	mov	r4,r16
 801862c:	80189540 	call	8018954 <_exit>

08018630 <memcmp>:
 8018630:	01c000c4 	movi	r7,3
 8018634:	3980192e 	bgeu	r7,r6,801869c <memcmp+0x6c>
 8018638:	2144b03a 	or	r2,r4,r5
 801863c:	11c4703a 	and	r2,r2,r7
 8018640:	10000f26 	beq	r2,zero,8018680 <memcmp+0x50>
 8018644:	20800003 	ldbu	r2,0(r4)
 8018648:	28c00003 	ldbu	r3,0(r5)
 801864c:	10c0151e 	bne	r2,r3,80186a4 <memcmp+0x74>
 8018650:	31bfff84 	addi	r6,r6,-2
 8018654:	01ffffc4 	movi	r7,-1
 8018658:	00000406 	br	801866c <memcmp+0x3c>
 801865c:	20800003 	ldbu	r2,0(r4)
 8018660:	28c00003 	ldbu	r3,0(r5)
 8018664:	31bfffc4 	addi	r6,r6,-1
 8018668:	10c00e1e 	bne	r2,r3,80186a4 <memcmp+0x74>
 801866c:	21000044 	addi	r4,r4,1
 8018670:	29400044 	addi	r5,r5,1
 8018674:	31fff91e 	bne	r6,r7,801865c <__alt_data_end+0xfc01865c>
 8018678:	0005883a 	mov	r2,zero
 801867c:	f800283a 	ret
 8018680:	20c00017 	ldw	r3,0(r4)
 8018684:	28800017 	ldw	r2,0(r5)
 8018688:	1880041e 	bne	r3,r2,801869c <memcmp+0x6c>
 801868c:	31bfff04 	addi	r6,r6,-4
 8018690:	21000104 	addi	r4,r4,4
 8018694:	29400104 	addi	r5,r5,4
 8018698:	39bff936 	bltu	r7,r6,8018680 <__alt_data_end+0xfc018680>
 801869c:	303fe91e 	bne	r6,zero,8018644 <__alt_data_end+0xfc018644>
 80186a0:	003ff506 	br	8018678 <__alt_data_end+0xfc018678>
 80186a4:	10c5c83a 	sub	r2,r2,r3
 80186a8:	f800283a 	ret

080186ac <__register_exitproc>:
 80186ac:	008200b4 	movhi	r2,2050
 80186b0:	defffa04 	addi	sp,sp,-24
 80186b4:	1094e004 	addi	r2,r2,21376
 80186b8:	dc000315 	stw	r16,12(sp)
 80186bc:	14000017 	ldw	r16,0(r2)
 80186c0:	dc400415 	stw	r17,16(sp)
 80186c4:	dfc00515 	stw	ra,20(sp)
 80186c8:	80805217 	ldw	r2,328(r16)
 80186cc:	2023883a 	mov	r17,r4
 80186d0:	10003626 	beq	r2,zero,80187ac <__register_exitproc+0x100>
 80186d4:	10c00117 	ldw	r3,4(r2)
 80186d8:	010007c4 	movi	r4,31
 80186dc:	20c00e16 	blt	r4,r3,8018718 <__register_exitproc+0x6c>
 80186e0:	1a400044 	addi	r9,r3,1
 80186e4:	8800211e 	bne	r17,zero,801876c <__register_exitproc+0xc0>
 80186e8:	18c00084 	addi	r3,r3,2
 80186ec:	18c7883a 	add	r3,r3,r3
 80186f0:	18c7883a 	add	r3,r3,r3
 80186f4:	12400115 	stw	r9,4(r2)
 80186f8:	10c7883a 	add	r3,r2,r3
 80186fc:	19400015 	stw	r5,0(r3)
 8018700:	0005883a 	mov	r2,zero
 8018704:	dfc00517 	ldw	ra,20(sp)
 8018708:	dc400417 	ldw	r17,16(sp)
 801870c:	dc000317 	ldw	r16,12(sp)
 8018710:	dec00604 	addi	sp,sp,24
 8018714:	f800283a 	ret
 8018718:	00820034 	movhi	r2,2048
 801871c:	109a5a04 	addi	r2,r2,26984
 8018720:	10002526 	beq	r2,zero,80187b8 <__register_exitproc+0x10c>
 8018724:	01006404 	movi	r4,400
 8018728:	d9400015 	stw	r5,0(sp)
 801872c:	d9800115 	stw	r6,4(sp)
 8018730:	d9c00215 	stw	r7,8(sp)
 8018734:	80069680 	call	8006968 <malloc>
 8018738:	d9400017 	ldw	r5,0(sp)
 801873c:	d9800117 	ldw	r6,4(sp)
 8018740:	d9c00217 	ldw	r7,8(sp)
 8018744:	10001c26 	beq	r2,zero,80187b8 <__register_exitproc+0x10c>
 8018748:	80c05217 	ldw	r3,328(r16)
 801874c:	10000115 	stw	zero,4(r2)
 8018750:	02400044 	movi	r9,1
 8018754:	10c00015 	stw	r3,0(r2)
 8018758:	80805215 	stw	r2,328(r16)
 801875c:	10006215 	stw	zero,392(r2)
 8018760:	10006315 	stw	zero,396(r2)
 8018764:	0007883a 	mov	r3,zero
 8018768:	883fdf26 	beq	r17,zero,80186e8 <__alt_data_end+0xfc0186e8>
 801876c:	18d1883a 	add	r8,r3,r3
 8018770:	4211883a 	add	r8,r8,r8
 8018774:	1211883a 	add	r8,r2,r8
 8018778:	41802215 	stw	r6,136(r8)
 801877c:	01000044 	movi	r4,1
 8018780:	11806217 	ldw	r6,392(r2)
 8018784:	20c8983a 	sll	r4,r4,r3
 8018788:	310cb03a 	or	r6,r6,r4
 801878c:	11806215 	stw	r6,392(r2)
 8018790:	41c04215 	stw	r7,264(r8)
 8018794:	01800084 	movi	r6,2
 8018798:	89bfd31e 	bne	r17,r6,80186e8 <__alt_data_end+0xfc0186e8>
 801879c:	11806317 	ldw	r6,396(r2)
 80187a0:	3108b03a 	or	r4,r6,r4
 80187a4:	11006315 	stw	r4,396(r2)
 80187a8:	003fcf06 	br	80186e8 <__alt_data_end+0xfc0186e8>
 80187ac:	80805304 	addi	r2,r16,332
 80187b0:	80805215 	stw	r2,328(r16)
 80187b4:	003fc706 	br	80186d4 <__alt_data_end+0xfc0186d4>
 80187b8:	00bfffc4 	movi	r2,-1
 80187bc:	003fd106 	br	8018704 <__alt_data_end+0xfc018704>

080187c0 <__call_exitprocs>:
 80187c0:	008200b4 	movhi	r2,2050
 80187c4:	1094e004 	addi	r2,r2,21376
 80187c8:	10800017 	ldw	r2,0(r2)
 80187cc:	defff404 	addi	sp,sp,-48
 80187d0:	dd800815 	stw	r22,32(sp)
 80187d4:	d8800015 	stw	r2,0(sp)
 80187d8:	10805204 	addi	r2,r2,328
 80187dc:	dd000615 	stw	r20,24(sp)
 80187e0:	dc800415 	stw	r18,16(sp)
 80187e4:	dfc00b15 	stw	ra,44(sp)
 80187e8:	df000a15 	stw	fp,40(sp)
 80187ec:	ddc00915 	stw	r23,36(sp)
 80187f0:	dd400715 	stw	r21,28(sp)
 80187f4:	dcc00515 	stw	r19,20(sp)
 80187f8:	dc400315 	stw	r17,12(sp)
 80187fc:	dc000215 	stw	r16,8(sp)
 8018800:	2025883a 	mov	r18,r4
 8018804:	2829883a 	mov	r20,r5
 8018808:	d8800115 	stw	r2,4(sp)
 801880c:	05bfffc4 	movi	r22,-1
 8018810:	d8800017 	ldw	r2,0(sp)
 8018814:	14c05217 	ldw	r19,328(r2)
 8018818:	98001d26 	beq	r19,zero,8018890 <__call_exitprocs+0xd0>
 801881c:	dd400117 	ldw	r21,4(sp)
 8018820:	98800117 	ldw	r2,4(r19)
 8018824:	173fffc4 	addi	fp,r2,-1
 8018828:	e0000d16 	blt	fp,zero,8018860 <__call_exitprocs+0xa0>
 801882c:	14000044 	addi	r16,r2,1
 8018830:	8421883a 	add	r16,r16,r16
 8018834:	8421883a 	add	r16,r16,r16
 8018838:	84402004 	addi	r17,r16,128
 801883c:	9c63883a 	add	r17,r19,r17
 8018840:	9c21883a 	add	r16,r19,r16
 8018844:	a0001e26 	beq	r20,zero,80188c0 <__call_exitprocs+0x100>
 8018848:	80804017 	ldw	r2,256(r16)
 801884c:	15001c26 	beq	r2,r20,80188c0 <__call_exitprocs+0x100>
 8018850:	e73fffc4 	addi	fp,fp,-1
 8018854:	843fff04 	addi	r16,r16,-4
 8018858:	8c7fff04 	addi	r17,r17,-4
 801885c:	e5bff91e 	bne	fp,r22,8018844 <__alt_data_end+0xfc018844>
 8018860:	00820034 	movhi	r2,2048
 8018864:	109a5f04 	addi	r2,r2,27004
 8018868:	10000926 	beq	r2,zero,8018890 <__call_exitprocs+0xd0>
 801886c:	98800117 	ldw	r2,4(r19)
 8018870:	1000311e 	bne	r2,zero,8018938 <__call_exitprocs+0x178>
 8018874:	98800017 	ldw	r2,0(r19)
 8018878:	10003426 	beq	r2,zero,801894c <__call_exitprocs+0x18c>
 801887c:	9809883a 	mov	r4,r19
 8018880:	a8800015 	stw	r2,0(r21)
 8018884:	800697c0 	call	800697c <free>
 8018888:	acc00017 	ldw	r19,0(r21)
 801888c:	983fe41e 	bne	r19,zero,8018820 <__alt_data_end+0xfc018820>
 8018890:	dfc00b17 	ldw	ra,44(sp)
 8018894:	df000a17 	ldw	fp,40(sp)
 8018898:	ddc00917 	ldw	r23,36(sp)
 801889c:	dd800817 	ldw	r22,32(sp)
 80188a0:	dd400717 	ldw	r21,28(sp)
 80188a4:	dd000617 	ldw	r20,24(sp)
 80188a8:	dcc00517 	ldw	r19,20(sp)
 80188ac:	dc800417 	ldw	r18,16(sp)
 80188b0:	dc400317 	ldw	r17,12(sp)
 80188b4:	dc000217 	ldw	r16,8(sp)
 80188b8:	dec00c04 	addi	sp,sp,48
 80188bc:	f800283a 	ret
 80188c0:	98800117 	ldw	r2,4(r19)
 80188c4:	80c00017 	ldw	r3,0(r16)
 80188c8:	10bfffc4 	addi	r2,r2,-1
 80188cc:	17001526 	beq	r2,fp,8018924 <__call_exitprocs+0x164>
 80188d0:	80000015 	stw	zero,0(r16)
 80188d4:	183fde26 	beq	r3,zero,8018850 <__alt_data_end+0xfc018850>
 80188d8:	00800044 	movi	r2,1
 80188dc:	1708983a 	sll	r4,r2,fp
 80188e0:	98806217 	ldw	r2,392(r19)
 80188e4:	9dc00117 	ldw	r23,4(r19)
 80188e8:	2084703a 	and	r2,r4,r2
 80188ec:	1000061e 	bne	r2,zero,8018908 <__call_exitprocs+0x148>
 80188f0:	183ee83a 	callr	r3
 80188f4:	98800117 	ldw	r2,4(r19)
 80188f8:	15ffc51e 	bne	r2,r23,8018810 <__alt_data_end+0xfc018810>
 80188fc:	a8800017 	ldw	r2,0(r21)
 8018900:	14ffd326 	beq	r2,r19,8018850 <__alt_data_end+0xfc018850>
 8018904:	003fc206 	br	8018810 <__alt_data_end+0xfc018810>
 8018908:	98806317 	ldw	r2,396(r19)
 801890c:	2084703a 	and	r2,r4,r2
 8018910:	1000061e 	bne	r2,zero,801892c <__call_exitprocs+0x16c>
 8018914:	89400017 	ldw	r5,0(r17)
 8018918:	9009883a 	mov	r4,r18
 801891c:	183ee83a 	callr	r3
 8018920:	003ff406 	br	80188f4 <__alt_data_end+0xfc0188f4>
 8018924:	9f000115 	stw	fp,4(r19)
 8018928:	003fea06 	br	80188d4 <__alt_data_end+0xfc0188d4>
 801892c:	89000017 	ldw	r4,0(r17)
 8018930:	183ee83a 	callr	r3
 8018934:	003fef06 	br	80188f4 <__alt_data_end+0xfc0188f4>
 8018938:	98800017 	ldw	r2,0(r19)
 801893c:	982b883a 	mov	r21,r19
 8018940:	1027883a 	mov	r19,r2
 8018944:	983fb61e 	bne	r19,zero,8018820 <__alt_data_end+0xfc018820>
 8018948:	003fd106 	br	8018890 <__alt_data_end+0xfc018890>
 801894c:	0005883a 	mov	r2,zero
 8018950:	003ffa06 	br	801893c <__alt_data_end+0xfc01893c>

08018954 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8018954:	defffd04 	addi	sp,sp,-12
 8018958:	df000215 	stw	fp,8(sp)
 801895c:	df000204 	addi	fp,sp,8
 8018960:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8018964:	0001883a 	nop
 8018968:	e0bfff17 	ldw	r2,-4(fp)
 801896c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8018970:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8018974:	10000226 	beq	r2,zero,8018980 <_exit+0x2c>
    ALT_SIM_FAIL();
 8018978:	002af070 	cmpltui	zero,zero,43969
 801897c:	00000106 	br	8018984 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8018980:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8018984:	003fff06 	br	8018984 <__alt_data_end+0xfc018984>
