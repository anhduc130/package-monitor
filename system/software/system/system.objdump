
system.elf:     file format elf32-littlenios2
system.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000229d8 memsz 0x000229d8 flags r-x
    LOAD off    0x000239f8 vaddr 0x080229f8 paddr 0x08024510 align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00026028 vaddr 0x08026028 paddr 0x08026028 align 2**12
         filesz 0x00000000 memsz 0x00000710 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017dd4  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000aa68  08017f90  08017f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  080229f8  08024510  000239f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000710  08026028  08026028  00026028  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08026738  08026738  00025510  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00025510  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001100  00000000  00000000  00025538  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002ff90  00000000  00000000  00026638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bee3  00000000  00000000  000565c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ed62  00000000  00000000  000624ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000034bc  00000000  00000000  00071210  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004ad8  00000000  00000000  000746cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001d19e  00000000  00000000  000791a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00096344  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000016b8  00000000  00000000  00096388  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009c10d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0009c110  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009c11c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009c11d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0009c11e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0009c129  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0009c134  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0009c13f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000019  00000000  00000000  0009c14a  2**0
                  CONTENTS, READONLY
 26 .jdi          0000437f  00000000  00000000  0009c163  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006b8c6  00000000  00000000  000a04e2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08017f90 l    d  .rodata	00000000 .rodata
080229f8 l    d  .rwdata	00000000 .rwdata
08026028 l    d  .bss	00000000 .bss
08026738 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../system_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 fontParser.c
00000000 l    df *ABS*	00000000 fonts.c
00000000 l    df *ABS*	00000000 graphics.c
00000000 l    df *ABS*	00000000 keys.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 security.c
00000000 l    df *ABS*	00000000 serial.c
00000000 l    df *ABS*	00000000 switches.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08003f64 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strdup.c
00000000 l    df *ABS*	00000000 strdup_r.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
080227e6 l     O .rodata	00000010 zeroes.4166
080227f6 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
08022806 l     O .rodata	00000010 zeroes.4181
08022816 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800b264 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800ce0c l     F .text	00000008 __fp_lock
0800ce14 l     F .text	00000008 __fp_unlock
0800ce28 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
08022e00 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
08023244 l     O .rwdata	00000020 lc_ctype_charset
08023224 l     O .rwdata	00000020 lc_message_charset
08023264 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08022848 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0802296c l     O .rodata	00000010 zeroes.4110
0802297c l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
08010f7c l     F .text	000000fc __sprint_r.part.0
0802299c l     O .rodata	00000010 blanks.4125
0802298c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 alt_close.c
08014f3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08015064 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08015090 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
080153ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080154a8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0801558c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08015770 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08024500 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08015bc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08015d10 l     F .text	00000038 alt_dev_reg
08023444 l     O .rwdata	00001060 jtag_uart_0
080244a4 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08016014 l     F .text	00000204 altera_avalon_jtag_uart_irq
08016218 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08016838 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080170c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080175e8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08017740 l     F .text	00000050 alt_get_errno
08017790 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08006760 g     F .text	00000018 putchar
0800f110 g     F .text	00000074 _mprec_log10
0800f1fc g     F .text	0000008c __any_on
08012b18 g     F .text	00000054 _isatty_r
08022854 g     O .rodata	00000028 __mprec_tinytens
080156b8 g     F .text	00000078 alt_main
08006cf8 g     F .text	00000090 strcpy
08006778 g     F .text	000000b8 _puts_r
08026638 g     O .bss	00000100 alt_irq
08012b6c g     F .text	0000005c _lseek_r
08024510 g       *ABS*	00000000 __flash_rwdata_start
080169a8 g     F .text	0000003c alt_up_character_lcd_send_cmd
08014428 g     F .text	00000084 .hidden __eqdf2
0800dbe8 g     F .text	00000058 _gettimeofday_r
08026738 g       *ABS*	00000000 __alt_heap_start
08006f4c g     F .text	00000008 strtok_r
0800671c g     F .text	0000003c printf
080006cc g     F .text	000000c4 Graphics_DrawHorizontalLine
0801822a g     O .rodata	00000a64 Font10x14
08012c24 g     F .text	0000009c _wcrtomb_r
08000f74 g     F .text	00000190 Graphics_DrawInitializationScreen
0800fadc g     F .text	0000005c __sseek
0800d170 g     F .text	00000010 __sinit
080124d8 g     F .text	00000154 __swbuf_r
0800dc40 g     F .text	0000007c _setlocale_r
0800cfc8 g     F .text	00000078 __sfmoreglue
08015750 g     F .text	00000020 __malloc_unlock
080030e8 g     F .text	0000004c TS_ReadRx
08026138 g     O .bss	00000100 jsonbuf
0800dfc0 g     F .text	0000015c memmove
0800d158 g     F .text	00000018 _cleanup
080069ec g     F .text	000000e4 snprintf
0800e240 g     F .text	000000a8 _Balloc
08006eb4 g     F .text	00000098 __strtok_r
080144ac g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
08016934 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08012ac0 g     F .text	00000058 _fstat_r
08026048 g     O .bss	00000004 errno
0800fa58 g     F .text	00000008 __seofread
080014b0 g     F .text	0000001c Graphics_DrawLoadingScreen
0800fdac g     F .text	000011d0 ___svfiprintf_internal_r
0802606c g     O .bss	00000004 alt_argv
0802c4d0 g       *ABS*	00000000 _gp
08015b90 g     F .text	00000030 usleep
08003380 g     F .text	00000050 putcharRS232
080008f4 g     F .text	0000016c Graphics_DrawCircle
08001f4c g     F .text	00000044 Graphics_ButtonNumToNum
0800208c g     F .text	0000012c Graphics_AreaRect
080232c4 g     O .rwdata	00000180 alt_fd_list
08003418 g     F .text	00000038 RS232TestForReceivedData
08006758 g     F .text	00000008 _putchar_r
08000790 g     F .text	000000c4 Graphics_DrawVerticalLine
08001574 g     F .text	0000008c Graphics_DrawLockScreen
0801726c g     F .text	00000090 alt_find_dev
080065b8 g     F .text	00000138 memcpy
08016b44 g     F .text	00000050 alt_up_character_lcd_write_fd
08003334 g     F .text	0000004c Init_RS232
0800ce1c g     F .text	0000000c _cleanup_r
08005968 g     F .text	000000d0 .hidden __floatsidf
080176c8 g     F .text	00000078 alt_io_redirect
0801458c g     F .text	000000e0 .hidden __ltdf2
08017f90 g       *ABS*	00000000 __DTOR_END__
08006830 g     F .text	00000014 puts
080034e8 g     F .text	000000a0 Wifi_ReadResponse
0800f990 g     F .text	00000074 __fpclassifyd
0800f06c g     F .text	000000a4 __ratio
080124b4 g     F .text	00000024 __vfiprintf_internal
08001920 g     F .text	00000068 Graphics_DrawNumPad
08016414 g     F .text	0000020c altera_avalon_jtag_uart_read
08005de8 g     F .text	00000014 malloc
080066f0 g     F .text	0000002c _printf_r
08004080 g     F .text	00000008 .hidden __udivsi3
080153fc g     F .text	000000ac isatty
080228a4 g     O .rodata	000000c8 __mprec_tens
0801cd20 g     O .rodata	00005794 Font38x59
0800dcbc g     F .text	0000000c __locale_charset
08003e38 g     F .text	00000108 Wifi_ParseConfirmed
080040b8 g     F .text	000000b8 .hidden __lesf2
08026058 g     O .bss	00000008 alt_timezone
08026044 g     O .bss	00000004 __malloc_top_pad
08000a60 g     F .text	00000158 Graphics_DrawRectangle
08002378 g     F .text	00000030 Leds_WriteVal
080244e0 g     O .rwdata	00000004 __mb_cur_max
0800dcec g     F .text	0000000c _localeconv_r
0800e668 g     F .text	0000003c __i2b
0800d5d4 g     F .text	000004a4 __sfvwrite_r
080014cc g     F .text	000000a8 Graphics_DrawUnlockScreen
080068c0 g     F .text	00000054 _sbrk_r
08026028 g     O .bss	00000004 home_button_rect
08012bc8 g     F .text	0000005c _read_r
080244f8 g     O .rwdata	00000004 alt_max_fd
080127d0 g     F .text	00000100 _fclose_r
08002e7c g     F .text	0000003c TS_EnableTouch
0800cddc g     F .text	00000030 fflush
08026040 g     O .bss	00000004 __malloc_max_sbrked_mem
08005adc g     F .text	00000110 .hidden __extendsfdf2
08001774 g     F .text	000001ac Graphics_InitializeNumberPad
08013b8c g     F .text	0000089c .hidden __adddf3
0800ee14 g     F .text	0000011c __b2d
08001600 g     F .text	000000d0 Graphics_DrawMenu
08013570 g     F .text	0000061c .hidden __umoddi3
080155dc g     F .text	000000dc lseek
08002004 g     F .text	00000088 Graphics_RectangleTouched
08000c1c g     F .text	000000a4 Graphics_DrawText
08003f40 g     F .text	00000024 Switches_GetValue
080244d8 g     O .rwdata	00000004 _global_impure_ptr
0800f3f0 g     F .text	000005a0 _realloc_r
08026738 g       *ABS*	00000000 __bss_end
080174f8 g     F .text	000000f0 alt_iic_isr_register
08015a8c g     F .text	00000104 alt_tick
08001bbc g     F .text	00000094 Graphics_DrawSquare
08012f30 g     F .text	00000640 .hidden __udivdi3
080128e4 g     F .text	00000184 _fputwc_r
0802287c g     O .rodata	00000028 __mprec_bigtens
0800e44c g     F .text	00000104 __s2b
08005a38 g     F .text	000000a4 .hidden __floatunsidf
0800ebbc g     F .text	00000060 __mcmp
08026238 g     O .bss	00000200 rbuf
0800d190 g     F .text	00000018 __fp_lock_all
080174ac g     F .text	0000004c alt_ic_irq_enabled
080159f4 g     F .text	00000098 alt_alarm_stop
08018c8e g     O .rodata	0000140a Font16x27
0802607c g     O .bss	00000004 alt_irq_active
08002e40 g     F .text	0000003c TS_DisableTouch
080000ec g     F .exceptions	000000d0 alt_irq_handler
0802329c g     O .rwdata	00000028 alt_dev_null
08006d9c g     F .text	00000068 _strdup_r
08000bb8 g     F .text	00000064 Graphics_PointsDrawRectangle
08016dd8 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
08001104 g     F .text	00000210 Graphics_DrawWelcomeScreen
08000e64 g     F .text	00000030 Graphics_Destroy_Rectangle
08000854 g     F .text	000000a0 Graphics_DrawStraightLine
08001988 g     F .text	00000064 Graphics_InitializeHomeButton
080170a4 g     F .text	0000001c alt_dcache_flush_all
0800e550 g     F .text	00000068 __hi0bits
08003450 g     F .text	00000098 Wifi_Init
080058e0 g     F .text	00000088 .hidden __fixdfsi
08003d30 g     F .text	00000108 Wifi_ParseMasterPw
08024510 g       *ABS*	00000000 __ram_rwdata_end
080244f0 g     O .rwdata	00000008 alt_dev_list
08015c10 g     F .text	00000100 write
0800f288 g     F .text	000000a0 _putc_r
08002de8 g     F .text	00000058 TS_Init
080229f8 g       *ABS*	00000000 __ram_rodata_end
080150e0 g     F .text	000000b8 fstat
0801458c g     F .text	000000e0 .hidden __ledf2
080003ac g     F .text	00000198 Graphics_Font10x14
0800e934 g     F .text	00000140 __pow5mult
08011090 g     F .text	00001424 ___vfiprintf_internal_r
08026054 g     O .bss	00000004 __nlocale_changed
08004088 g     F .text	00000008 .hidden __umodsi3
08001d08 g     F .text	00000244 Graphics_GetNumberPressed
08026738 g       *ABS*	00000000 end
08015f50 g     F .text	000000c4 altera_avalon_jtag_uart_init
08003184 g     F .text	000001b0 TS_GetRelease
080260d8 g     O .bss	00000010 User_Input
08000ef0 g     F .text	00000084 Graphics_DrawLineDemo
08017f90 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
080168ac g     F .text	00000088 alt_avalon_timer_sc_init
08005d84 g     F .text	00000064 .hidden __clzsi2
08006914 g     F .text	000000d8 _snprintf_r
08016620 g     F .text	00000218 altera_avalon_jtag_uart_write
0800d180 g     F .text	00000004 __sfp_lock_acquire
0800ded8 g     F .text	000000e8 memchr
08016a58 g     F .text	00000078 alt_up_character_lcd_write
08009014 g     F .text	000020fc ___vfprintf_internal_r
08006ad0 g     F .text	00000058 _sprintf_r
0800370c g     F .text	000000a4 Wifi_EnsureGet
0800d2e4 g     F .text	000002f0 _free_r
0800dcc8 g     F .text	00000010 __locale_mb_cur_max
08017dc8 g     F .text	00000194 __call_exitprocs
08026050 g     O .bss	00000004 __mlocale_changed
080244d0 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08026074 g     O .bss	00000004 _alt_tick_rate
080016d0 g     F .text	000000a4 Graphics_DrawField
0800685c g     F .text	00000064 rand
0800ea74 g     F .text	00000148 __lshift
080260a8 g     O .bss	00000030 numpad
08002f38 g     F .text	000001b0 TS_GetPress
08026078 g     O .bss	00000004 _alt_nticks
080157c0 g     F .text	00000104 read
08015d7c g     F .text	00000070 alt_sys_init
08016c90 g     F .text	00000088 alt_up_character_lcd_shift_display
080045c0 g     F .text	00000134 .hidden __floatsisf
0800fbe4 g     F .text	000001c8 __ssprint_r
08002d3c g     F .text	00000084 Security_CheckCode
08017cb4 g     F .text	00000114 __register_exitproc
0800e6a4 g     F .text	00000290 __multiply
08016d18 g     F .text	0000008c alt_up_character_lcd_erase_pos
08001f90 g     F .text	00000074 Graphics_InRectangle
080162c0 g     F .text	00000068 altera_avalon_jtag_uart_close
08004090 g     F .text	00000028 .hidden __mulsi3
080229f8 g       *ABS*	00000000 __ram_rwdata_start
08017f90 g       *ABS*	00000000 __ram_rodata_start
08026080 g     O .bss	00000028 __malloc_current_mallinfo
0800ef30 g     F .text	0000013c __d2b
080260e8 g     O .bss	00000018 User_Master_Code
08015dec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08017b18 g     F .text	000000d4 alt_get_fd
08016f4c g     F .text	00000158 alt_busy_sleep
080126a4 g     F .text	00000054 _close_r
08006e9c g     F .text	00000018 strtok
08017c38 g     F .text	0000007c memcmp
08015eac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08026738 g       *ABS*	00000000 __alt_stack_base
08015efc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800b134 g     F .text	00000130 __swsetup_r
080046f4 g     F .text	00000980 .hidden __divdf3
0800d040 g     F .text	00000118 __sfp
0800f184 g     F .text	00000078 __copybits
08002dc0 g     F .text	00000028 Security_RegisterOwner
080229f8 g     O .rwdata	00000408 __malloc_av_
0800d18c g     F .text	00000004 __sinit_lock_release
08005074 g     F .text	0000086c .hidden __muldf3
0800fa04 g     F .text	00000054 __sread
08017a04 g     F .text	00000114 alt_find_file
08017110 g     F .text	000000a4 alt_dev_llist_insert
08015730 g     F .text	00000020 __malloc_lock
08015944 g     F .text	000000b0 sbrk
08006f54 g     F .text	00002070 ___svfprintf_internal_r
08006d88 g     F .text	00000014 strdup
0800cbb4 g     F .text	00000228 _fflush_r
080126f8 g     F .text	000000d8 _calloc_r
08003b18 g     F .text	00000110 Wifi_ParsePhoneNumber
08015198 g     F .text	00000214 gettimeofday
08000544 g     F .text	0000007c Graphics_WriteAPixel
08026028 g       *ABS*	00000000 __bss_start
0800e11c g     F .text	00000124 memset
08002450 g     F .text	00000844 main
08026070 g     O .bss	00000004 alt_envp
0802603c g     O .bss	00000004 __malloc_max_total_mem
0802602c g     O .bss	00000004 request_code_rect
08015e4c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0801262c g     F .text	0000001c __swbuf
08006844 g     F .text	00000018 srand
080040b8 g     F .text	000000b8 .hidden __ltsf2
08016c08 g     F .text	00000088 alt_up_character_lcd_shift_cursor
08001a1c g     F .text	000001a0 Graphics_DrawHomeIcon
0800fb38 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
080128d0 g     F .text	00000014 fclose
08005bec g     F .text	00000198 .hidden __truncdfsf2
0800b48c g     F .text	00001728 _dtoa_r
08005e10 g     F .text	000007a8 _malloc_r
08012d98 g     F .text	00000030 __ascii_wctomb
08008fc4 g     F .text	00000050 time
080244fc g     O .rwdata	00000004 alt_errno
080013e4 g     F .text	000000cc Graphics_DrawMasterCodeMenu
0800da78 g     F .text	000000b8 _fwalk
0800f328 g     F .text	000000c8 putc
08003fd0 g     F .text	00000054 .hidden __divsi3
08016a18 g     F .text	00000040 alt_up_character_lcd_open_dev
0800d1c0 g     F .text	00000124 _malloc_trim_r
08017f90 g       *ABS*	00000000 __CTOR_END__
08004170 g     F .text	00000450 .hidden __mulsf3
080169e4 g     F .text	00000034 alt_up_character_lcd_init
0800fb40 g     F .text	000000a4 strcmp
08017f90 g       *ABS*	00000000 __flash_rodata_start
08017f90 g       *ABS*	00000000 __DTOR_LIST__
080037b0 g     F .text	000000d0 Wifi_EnsurePut
08014428 g     F .text	00000084 .hidden __nedf2
08002eb8 g     F .text	00000040 TS_WaitForTouch
08015d48 g     F .text	00000034 alt_irq_init
08026030 g     O .bss	00000004 sign_up_rect
080158c4 g     F .text	00000080 alt_release_fd
08006b28 g     F .text	0000006c sprintf
08016da4 g     F .text	00000034 alt_up_character_lcd_cursor_off
080226a0 g     O .rodata	00000100 .hidden __clz_tab
0802604c g     O .bss	00000004 _PathLocale
08017bec g     F .text	00000014 atexit
08012648 g     F .text	0000005c _write_r
0800dcf8 g     F .text	0000001c setlocale
08026034 g     O .bss	00000004 log_in_rect
080039b4 g     F .text	00000048 Wifi_ReadRx
08026438 g     O .bss	00000200 cbuf
080244dc g     O .rwdata	00000004 _impure_ptr
08026068 g     O .bss	00000004 alt_argc
08003134 g     F .text	00000050 TS_WriteTx
08002ef8 g     F .text	00000040 TS_WaitForRelease
08003588 g     F .text	00000038 Wifi_PrintResponse
080039fc g     F .text	00000050 Wifi_WriteTx
080021b8 g     F .text	000000f4 Graphics_AreaTriangle
08017210 g     F .text	0000005c _do_dtors
0800dce4 g     F .text	00000008 __locale_cjk_lang
08017f90 g     O .rodata	00000299 Font5x7
08000020 g       .exceptions	00000000 alt_irq_entry
0800edb4 g     F .text	00000060 __ulp
0800d1a8 g     F .text	00000018 __fp_unlock_all
080244e8 g     O .rwdata	00000008 alt_fs_list
08003c28 g     F .text	00000108 Wifi_ParsePw
08001c50 g     F .text	000000b8 Graphics_DrawUserEnteredDigit
08003900 g     F .text	000000b4 Wifi_SendCommand
08026060 g     O .bss	00000008 alt_resettime
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800dd14 g     F .text	0000000c localeconv
080033d0 g     F .text	00000048 getcharRS232
08003a4c g     F .text	000000cc Wifi_ExtractJson
08000d9c g     F .text	000000c8 Graphics_Init_Rectangle
08017318 g     F .text	00000050 alt_ic_isr_register
08024510 g       *ABS*	00000000 _edata
0800363c g     F .text	00000050 Wifi_ClearBuffer
08026738 g       *ABS*	00000000 _end
08026038 g     O .bss	00000004 graphics_field_cursor
080001bc g       *ABS*	00000000 __ram_exceptions_end
080005c0 g     F .text	00000090 Graphics_ReadAPixel
08016328 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08000cc0 g     F .text	000000dc Graphics_DrawTextCentered
08017408 g     F .text	000000a4 alt_ic_irq_disable
0800fa60 g     F .text	0000007c __swrite
080244d4 g     O .rwdata	00000004 __malloc_trim_threshold
080179e4 g     F .text	00000020 altera_nios2_qsys_irq_init
0800dcd8 g     F .text	0000000c __locale_msgcharset
08017c00 g     F .text	00000038 exit
0800db30 g     F .text	000000b8 _fwalk_reent
080035c0 g     F .text	0000007c Wifi_CopyBuffer
0800ec1c g     F .text	00000198 __mdiff
08004024 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800d184 g     F .text	00000004 __sfp_lock_release
080001f8 g     F .text	000001b4 Graphics_Font5x7
08000000 g       *ABS*	00000000 __alt_mem_sdram
08016ad0 g     F .text	00000074 alt_up_character_lcd_string
08002c94 g     F .text	000000a8 Security_GenerateCode
080019ec g     F .text	00000030 Graphics_DrawHomeButton
0801a098 g     O .rodata	00002c88 Font22x40
08000650 g     F .text	0000007c Graphics_ProgramPalette
08017f5c g     F .text	00000034 _exit
08016e0c g     F .text	00000140 alt_alarm_start
08012e24 g     F .text	0000010c .hidden __muldi3
0800dd20 g     F .text	000001b8 __smakebuf_r
08002354 g     F .text	00000024 Keys_GetValue
08006e04 g     F .text	00000098 strlen
08017884 g     F .text	00000160 open
080144ac g     F .text	000000e0 .hidden __gedf2
08026100 g     O .bss	00000010 Security_Code
080244e4 g     O .rwdata	00000004 __wctomb
08011078 g     F .text	00000018 __sprint_r
080172fc g     F .text	0000001c alt_icache_flush_all
08006b94 g     F .text	00000164 strchr
08016b94 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0802450c g     O .rwdata	00000004 alt_priority_mask
080023a8 g     F .text	000000a8 Leds_Celebrate
08017368 g     F .text	000000a0 alt_ic_irq_enable
0800b110 g     F .text	00000024 __vfprintf_internal
0800368c g     F .text	00000080 Wifi_EnsureConnection
08012dc8 g     F .text	0000005c _wctomb_r
08026110 g     O .bss	00000028 User_Phone_Number_Input
0801466c g     F .text	000008d0 .hidden __subdf3
0800e5b8 g     F .text	000000b0 __lo0bits
08024504 g     O .rwdata	00000008 alt_alarm_list
080171b4 g     F .text	0000005c _do_ctors
08012cc0 g     F .text	000000d8 wcrtomb
08014f8c g     F .text	000000d8 close
080022ac g     F .text	000000a8 Graphics_InitializeRectangleCentered
08003880 g     F .text	00000080 Wifi_WaitReady
08000e94 g     F .text	0000005c Graphics_ClearScreen
0801550c g     F .text	00000080 alt_load
08012a68 g     F .text	00000058 fputwc
08005dfc g     F .text	00000014 free
0800d188 g     F .text	00000004 __sinit_lock_acquire
0800e310 g     F .text	0000013c __multadd
0800e2e8 g     F .text	00000028 _Bfree
08001314 g     F .text	000000d0 Graphics_DrawPhoneNumberMenu



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200b4 	movhi	r2,2050
 8000130:	10998e04 	addi	r2,r2,26168
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200b4 	movhi	r2,2050
 8000148:	10998e04 	addi	r2,r2,26168
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 80001c8:	d6b13414 	ori	gp,gp,50384
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 80001d0:	10980a14 	ori	r2,r2,24616

    movhi r3, %hi(__bss_end)
 80001d4:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d9ce14 	ori	r3,r3,26424

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	801550c0 	call	801550c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	80156b80 	call	80156b8 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <Graphics_Font5x7>:

#include "Fonts.h"
#include "Graphics.h"

void Graphics_Font5x7(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 80001f8:	defff204 	addi	sp,sp,-56
 80001fc:	dfc00d15 	stw	ra,52(sp)
 8000200:	df000c15 	stw	fp,48(sp)
 8000204:	ddc00b15 	stw	r23,44(sp)
 8000208:	dd800a15 	stw	r22,40(sp)
 800020c:	dd400915 	stw	r21,36(sp)
 8000210:	dd000815 	stw	r20,32(sp)
 8000214:	dcc00715 	stw	r19,28(sp)
 8000218:	dc800615 	stw	r18,24(sp)
 800021c:	dc400515 	stw	r17,20(sp)
 8000220:	dc000415 	stw	r16,16(sp)
 8000224:	df000c04 	addi	fp,sp,48
 8000228:	e13ff415 	stw	r4,-48(fp)
 800022c:	e17ff515 	stw	r5,-44(fp)
 8000230:	e1bff615 	stw	r6,-40(fp)
 8000234:	e1fff715 	stw	r7,-36(fp)
// using register variables (as opposed to stack based ones) may make execution faster
// depends on compiler and CPU

	register int row, column, theX = x, theY = y ;
 8000238:	e53ff417 	ldw	r20,-48(fp)
 800023c:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour  ;
 8000240:	e0bff617 	ldw	r2,-40(fp)
 8000244:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 8000248:	e4c00217 	ldw	r19,8(fp)

// if x,y coord off edge of screen don't bother
// XRES and YRES are #defined to be 800 and 480 respectively
    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 800024c:	e0bff417 	ldw	r2,-48(fp)
 8000250:	10bfffcc 	andi	r2,r2,65535
 8000254:	10a0001c 	xori	r2,r2,32768
 8000258:	10a00004 	addi	r2,r2,-32768
 800025c:	1080c808 	cmpgei	r2,r2,800
 8000260:	1000061e 	bne	r2,zero,800027c <Graphics_Font5x7+0x84>
 8000264:	e0bff517 	ldw	r2,-44(fp)
 8000268:	10bfffcc 	andi	r2,r2,65535
 800026c:	10a0001c 	xori	r2,r2,32768
 8000270:	10a00004 	addi	r2,r2,-32768
 8000274:	10807810 	cmplti	r2,r2,480
 8000278:	1000011e 	bne	r2,zero,8000280 <Graphics_Font5x7+0x88>
        return ;
 800027c:	00003e06 	br	8000378 <Graphics_Font5x7+0x180>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 8000280:	9805883a 	mov	r2,r19
 8000284:	10bfffcc 	andi	r2,r2,65535
 8000288:	10a0001c 	xori	r2,r2,32768
 800028c:	10a00004 	addi	r2,r2,-32768
 8000290:	10800810 	cmplti	r2,r2,32
 8000294:	1000381e 	bne	r2,zero,8000378 <Graphics_Font5x7+0x180>
 8000298:	9805883a 	mov	r2,r19
 800029c:	10bfffcc 	andi	r2,r2,65535
 80002a0:	10a0001c 	xori	r2,r2,32768
 80002a4:	10a00004 	addi	r2,r2,-32768
 80002a8:	10801fc8 	cmpgei	r2,r2,127
 80002ac:	1000321e 	bne	r2,zero,8000378 <Graphics_Font5x7+0x180>
		theC = theC - 0x20 ;
 80002b0:	9cfff804 	addi	r19,r19,-32
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 80002b4:	0021883a 	mov	r16,zero
 80002b8:	00002906 	br	8000360 <Graphics_Font5x7+0x168>

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
 80002bc:	04420074 	movhi	r17,2049
 80002c0:	8c5fe404 	addi	r17,r17,32656
 80002c4:	9809883a 	mov	r4,r19
 80002c8:	014001c4 	movi	r5,7
 80002cc:	80040900 	call	8004090 <__mulsi3>
 80002d0:	1405883a 	add	r2,r2,r16
 80002d4:	8885883a 	add	r2,r17,r2
 80002d8:	10800003 	ldbu	r2,0(r2)
 80002dc:	15803fcc 	andi	r22,r2,255
			BitMask = 16 ;
 80002e0:	04800404 	movi	r18,16

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 80002e4:	0023883a 	mov	r17,zero
 80002e8:	00001606 	br	8000344 <Graphics_Font5x7+0x14c>

// if a pixel in the character display it
				if((pixels & BitMask))
 80002ec:	b484703a 	and	r2,r22,r18
 80002f0:	10000926 	beq	r2,zero,8000318 <Graphics_Font5x7+0x120>
					Graphics_WriteAPixel(theX+column, theY+row, theColour) ;
 80002f4:	a449883a 	add	r4,r20,r17
 80002f8:	ac07883a 	add	r3,r21,r16
 80002fc:	b8803fcc 	andi	r2,r23,255
 8000300:	1080201c 	xori	r2,r2,128
 8000304:	10bfe004 	addi	r2,r2,-128
 8000308:	180b883a 	mov	r5,r3
 800030c:	100d883a 	mov	r6,r2
 8000310:	80005440 	call	8000544 <Graphics_WriteAPixel>
 8000314:	00000906 	br	800033c <Graphics_Font5x7+0x144>

				else {
					if(Erase == TRUE)
 8000318:	e0800317 	ldw	r2,12(fp)
 800031c:	10800058 	cmpnei	r2,r2,1
 8000320:	1000061e 	bne	r2,zero,800033c <Graphics_Font5x7+0x144>

// if pixel is part of background (not part of character)
// erase the background to value of variable BackGroundColour

						Graphics_WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 8000324:	a447883a 	add	r3,r20,r17
 8000328:	ac05883a 	add	r2,r21,r16
 800032c:	1809883a 	mov	r4,r3
 8000330:	100b883a 	mov	r5,r2
 8000334:	e1bff717 	ldw	r6,-36(fp)
 8000338:	80005440 	call	8000544 <Graphics_WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 800033c:	9025d07a 	srai	r18,r18,1

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
			BitMask = 16 ;

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 8000340:	8c400044 	addi	r17,r17,1
 8000344:	8805883a 	mov	r2,r17
 8000348:	10803fcc 	andi	r2,r2,255
 800034c:	1080201c 	xori	r2,r2,128
 8000350:	10bfe004 	addi	r2,r2,-128
 8000354:	10800150 	cmplti	r2,r2,5
 8000358:	103fe41e 	bne	r2,zero,80002ec <__alt_data_end+0xfc0002ec>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 800035c:	84000044 	addi	r16,r16,1
 8000360:	8005883a 	mov	r2,r16
 8000364:	10803fcc 	andi	r2,r2,255
 8000368:	1080201c 	xori	r2,r2,128
 800036c:	10bfe004 	addi	r2,r2,-128
 8000370:	108001d0 	cmplti	r2,r2,7
 8000374:	103fd11e 	bne	r2,zero,80002bc <__alt_data_end+0xfc0002bc>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8000378:	e6fff804 	addi	sp,fp,-32
 800037c:	dfc00917 	ldw	ra,36(sp)
 8000380:	df000817 	ldw	fp,32(sp)
 8000384:	ddc00717 	ldw	r23,28(sp)
 8000388:	dd800617 	ldw	r22,24(sp)
 800038c:	dd400517 	ldw	r21,20(sp)
 8000390:	dd000417 	ldw	r20,16(sp)
 8000394:	dcc00317 	ldw	r19,12(sp)
 8000398:	dc800217 	ldw	r18,8(sp)
 800039c:	dc400117 	ldw	r17,4(sp)
 80003a0:	dc000017 	ldw	r16,0(sp)
 80003a4:	dec00a04 	addi	sp,sp,40
 80003a8:	f800283a 	ret

080003ac <Graphics_Font10x14>:

void Graphics_Font10x14(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
 80003ac:	defff004 	addi	sp,sp,-64
 80003b0:	dfc00f15 	stw	ra,60(sp)
 80003b4:	df000e15 	stw	fp,56(sp)
 80003b8:	ddc00d15 	stw	r23,52(sp)
 80003bc:	dd800c15 	stw	r22,48(sp)
 80003c0:	dd400b15 	stw	r21,44(sp)
 80003c4:	dd000a15 	stw	r20,40(sp)
 80003c8:	dcc00915 	stw	r19,36(sp)
 80003cc:	dc800815 	stw	r18,32(sp)
 80003d0:	dc400715 	stw	r17,28(sp)
 80003d4:	dc000615 	stw	r16,24(sp)
 80003d8:	df000e04 	addi	fp,sp,56
 80003dc:	e13ff215 	stw	r4,-56(fp)
 80003e0:	e17ff315 	stw	r5,-52(fp)
 80003e4:	e1bff415 	stw	r6,-48(fp)
 80003e8:	e1fff515 	stw	r7,-44(fp)
	register int 	row,
					column,
					theX = x,
 80003ec:	e53ff217 	ldw	r20,-56(fp)
					theY = y ;
 80003f0:	e57ff317 	ldw	r21,-52(fp)
	register int 	pixels ;
	register char 	theColour = colour  ;
 80003f4:	e0bff417 	ldw	r2,-48(fp)
 80003f8:	e0bff605 	stb	r2,-40(fp)
	register int 	BitMask,
					theCharacter = c,
 80003fc:	e4c00217 	ldw	r19,8(fp)
					j,
					theRow, theColumn;


    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
 8000400:	e0bff217 	ldw	r2,-56(fp)
 8000404:	10bfffcc 	andi	r2,r2,65535
 8000408:	10a0001c 	xori	r2,r2,32768
 800040c:	10a00004 	addi	r2,r2,-32768
 8000410:	1080c808 	cmpgei	r2,r2,800
 8000414:	1000061e 	bne	r2,zero,8000430 <Graphics_Font10x14+0x84>
 8000418:	e0bff317 	ldw	r2,-52(fp)
 800041c:	10bfffcc 	andi	r2,r2,65535
 8000420:	10a0001c 	xori	r2,r2,32768
 8000424:	10a00004 	addi	r2,r2,-32768
 8000428:	10807810 	cmplti	r2,r2,480
 800042c:	1000011e 	bne	r2,zero,8000434 <Graphics_Font10x14+0x88>
        return ;
 8000430:	00003706 	br	8000510 <Graphics_Font10x14+0x164>

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
 8000434:	9805883a 	mov	r2,r19
 8000438:	10bfffcc 	andi	r2,r2,65535
 800043c:	10a0001c 	xori	r2,r2,32768
 8000440:	10a00004 	addi	r2,r2,-32768
 8000444:	10800810 	cmplti	r2,r2,32
 8000448:	1000311e 	bne	r2,zero,8000510 <Graphics_Font10x14+0x164>
 800044c:	9805883a 	mov	r2,r19
 8000450:	10bfffcc 	andi	r2,r2,65535
 8000454:	10a0001c 	xori	r2,r2,32768
 8000458:	10a00004 	addi	r2,r2,-32768
 800045c:	10801fc8 	cmpgei	r2,r2,127
 8000460:	10002b1e 	bne	r2,zero,8000510 <Graphics_Font10x14+0x164>
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
 8000464:	9cfff804 	addi	r19,r19,-32
		theRow = FONT2_YPIXELS;
 8000468:	05800384 	movi	r22,14
		theColumn = FONT2_XPIXELS;
 800046c:	05c00284 	movi	r23,10

		for(row = 0; row < theRow ; row ++)	{
 8000470:	0021883a 	mov	r16,zero
 8000474:	00002506 	br	800050c <Graphics_Font10x14+0x160>
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
 8000478:	044200b4 	movhi	r17,2050
 800047c:	8c608a84 	addi	r17,r17,-32214
 8000480:	9809883a 	mov	r4,r19
 8000484:	01400384 	movi	r5,14
 8000488:	80040900 	call	8004090 <__mulsi3>
 800048c:	1405883a 	add	r2,r2,r16
 8000490:	1085883a 	add	r2,r2,r2
 8000494:	8885883a 	add	r2,r17,r2
 8000498:	1080000b 	ldhu	r2,0(r2)
 800049c:	10bfffcc 	andi	r2,r2,65535
 80004a0:	e0bff715 	stw	r2,-36(fp)
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 80004a4:	04808004 	movi	r18,512
			for(column = 0; column < theColumn;   )  	{
 80004a8:	0023883a 	mov	r17,zero
 80004ac:	00001506 	br	8000504 <Graphics_Font10x14+0x158>
				if((pixels & BitMask))														// if valid pixel, then write it
 80004b0:	e0fff717 	ldw	r3,-36(fp)
 80004b4:	1c84703a 	and	r2,r3,r18
 80004b8:	10000726 	beq	r2,zero,80004d8 <Graphics_Font10x14+0x12c>
					Graphics_WriteAPixel(theX+column, theY+row, theColour) ;
 80004bc:	a449883a 	add	r4,r20,r17
 80004c0:	ac07883a 	add	r3,r21,r16
 80004c4:	e0bff607 	ldb	r2,-40(fp)
 80004c8:	180b883a 	mov	r5,r3
 80004cc:	100d883a 	mov	r6,r2
 80004d0:	80005440 	call	8000544 <Graphics_WriteAPixel>
 80004d4:	00000906 	br	80004fc <Graphics_Font10x14+0x150>
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == TRUE)
 80004d8:	e0800317 	ldw	r2,12(fp)
 80004dc:	10800058 	cmpnei	r2,r2,1
 80004e0:	1000061e 	bne	r2,zero,80004fc <Graphics_Font10x14+0x150>
						Graphics_WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 80004e4:	a447883a 	add	r3,r20,r17
 80004e8:	ac05883a 	add	r2,r21,r16
 80004ec:	1809883a 	mov	r4,r3
 80004f0:	100b883a 	mov	r5,r2
 80004f4:	e1bff517 	ldw	r6,-44(fp)
 80004f8:	80005440 	call	8000544 <Graphics_WriteAPixel>
					// else leave it alone
				}
					column ++ ;
 80004fc:	8c400044 	addi	r17,r17,1
				BitMask = BitMask >> 1 ;
 8000500:	9025d07a 	srai	r18,r18,1
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
 8000504:	8dffea16 	blt	r17,r23,80004b0 <__alt_data_end+0xfc0004b0>
	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
 8000508:	84000044 	addi	r16,r16,1
 800050c:	85bfda16 	blt	r16,r22,8000478 <__alt_data_end+0xfc000478>
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8000510:	e6fff804 	addi	sp,fp,-32
 8000514:	dfc00917 	ldw	ra,36(sp)
 8000518:	df000817 	ldw	fp,32(sp)
 800051c:	ddc00717 	ldw	r23,28(sp)
 8000520:	dd800617 	ldw	r22,24(sp)
 8000524:	dd400517 	ldw	r21,20(sp)
 8000528:	dd000417 	ldw	r20,16(sp)
 800052c:	dcc00317 	ldw	r19,12(sp)
 8000530:	dc800217 	ldw	r18,8(sp)
 8000534:	dc400117 	ldw	r17,4(sp)
 8000538:	dc000017 	ldw	r16,0(sp)
 800053c:	dec00a04 	addi	sp,sp,40
 8000540:	f800283a 	ret

08000544 <Graphics_WriteAPixel>:

/**********************************************************************
 * This function writes a single pixel to the x,y coords specified in the specified colour
 * Note colour is a palette number (0-255) not a 24 bit RGB value
 **********************************************************************/
void Graphics_WriteAPixel(int x, int y, int Colour) {
 8000544:	defffc04 	addi	sp,sp,-16
 8000548:	df000315 	stw	fp,12(sp)
 800054c:	df000304 	addi	fp,sp,12
 8000550:	e13ffd15 	stw	r4,-12(fp)
 8000554:	e17ffe15 	stw	r5,-8(fp)
 8000558:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;
 800055c:	0001883a 	nop
 8000560:	00a10034 	movhi	r2,33792
 8000564:	1080000b 	ldhu	r2,0(r2)
 8000568:	10bfffcc 	andi	r2,r2,65535
 800056c:	1080004c 	andi	r2,r2,1
 8000570:	103ffb26 	beq	r2,zero,8000560 <__alt_data_end+0xfc000560>

	GraphicsX1Reg = x;
 8000574:	00a10034 	movhi	r2,33792
 8000578:	10800084 	addi	r2,r2,2
 800057c:	e0fffd17 	ldw	r3,-12(fp)
 8000580:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000584:	00a10034 	movhi	r2,33792
 8000588:	10800104 	addi	r2,r2,4
 800058c:	e0fffe17 	ldw	r3,-8(fp)
 8000590:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000594:	00a10034 	movhi	r2,33792
 8000598:	10800384 	addi	r2,r2,14
 800059c:	e0ffff17 	ldw	r3,-4(fp)
 80005a0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel;
 80005a4:	00a10034 	movhi	r2,33792
 80005a8:	00c00284 	movi	r3,10
 80005ac:	10c0000d 	sth	r3,0(r2)
}
 80005b0:	e037883a 	mov	sp,fp
 80005b4:	df000017 	ldw	fp,0(sp)
 80005b8:	dec00104 	addi	sp,sp,4
 80005bc:	f800283a 	ret

080005c0 <Graphics_ReadAPixel>:

/*****************************************************************************************
 * This function read a single pixel from x,y coords specified and returns its colour
 * Note returned colour is a palette number (0-255) not a 24 bit RGB value
 ******************************************************************************************/
int Graphics_ReadAPixel(int x, int y) {
 80005c0:	defffd04 	addi	sp,sp,-12
 80005c4:	df000215 	stw	fp,8(sp)
 80005c8:	df000204 	addi	fp,sp,8
 80005cc:	e13ffe15 	stw	r4,-8(fp)
 80005d0:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;
 80005d4:	0001883a 	nop
 80005d8:	00a10034 	movhi	r2,33792
 80005dc:	1080000b 	ldhu	r2,0(r2)
 80005e0:	10bfffcc 	andi	r2,r2,65535
 80005e4:	1080004c 	andi	r2,r2,1
 80005e8:	103ffb26 	beq	r2,zero,80005d8 <__alt_data_end+0xfc0005d8>

	GraphicsX1Reg = x;
 80005ec:	00a10034 	movhi	r2,33792
 80005f0:	10800084 	addi	r2,r2,2
 80005f4:	e0fffe17 	ldw	r3,-8(fp)
 80005f8:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 80005fc:	00a10034 	movhi	r2,33792
 8000600:	10800104 	addi	r2,r2,4
 8000604:	e0ffff17 	ldw	r3,-4(fp)
 8000608:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel;
 800060c:	00a10034 	movhi	r2,33792
 8000610:	00c002c4 	movi	r3,11
 8000614:	10c0000d 	sth	r3,0(r2)

	WAIT_FOR_GRAPHICS;
 8000618:	0001883a 	nop
 800061c:	00a10034 	movhi	r2,33792
 8000620:	1080000b 	ldhu	r2,0(r2)
 8000624:	10bfffcc 	andi	r2,r2,65535
 8000628:	1080004c 	andi	r2,r2,1
 800062c:	103ffb26 	beq	r2,zero,800061c <__alt_data_end+0xfc00061c>
	return (int) (GraphicsColourReg);
 8000630:	00a10034 	movhi	r2,33792
 8000634:	10800384 	addi	r2,r2,14
 8000638:	1080000b 	ldhu	r2,0(r2)
 800063c:	10bfffcc 	andi	r2,r2,65535
}
 8000640:	e037883a 	mov	sp,fp
 8000644:	df000017 	ldw	fp,0(sp)
 8000648:	dec00104 	addi	sp,sp,4
 800064c:	f800283a 	ret

08000650 <Graphics_ProgramPalette>:

/****************************************************************************************************
 ** Subroutine to program a hardware (graphics chip) palette number with an RGB value
 ** e.g. ProgramPalette(RED, 0x00FF0000) ;
 ****************************************************************************************************/
void Graphics_ProgramPalette(int PaletteNumber, int RGB) {
 8000650:	defffd04 	addi	sp,sp,-12
 8000654:	df000215 	stw	fp,8(sp)
 8000658:	df000204 	addi	fp,sp,8
 800065c:	e13ffe15 	stw	r4,-8(fp)
 8000660:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000664:	0001883a 	nop
 8000668:	00a10034 	movhi	r2,33792
 800066c:	1080000b 	ldhu	r2,0(r2)
 8000670:	10bfffcc 	andi	r2,r2,65535
 8000674:	1080004c 	andi	r2,r2,1
 8000678:	103ffb26 	beq	r2,zero,8000668 <__alt_data_end+0xfc000668>
	GraphicsColourReg = PaletteNumber;
 800067c:	00a10034 	movhi	r2,33792
 8000680:	10800384 	addi	r2,r2,14
 8000684:	e0fffe17 	ldw	r3,-8(fp)
 8000688:	10c0000d 	sth	r3,0(r2)
	GraphicsX1Reg = RGB >> 16;
 800068c:	00a10034 	movhi	r2,33792
 8000690:	10800084 	addi	r2,r2,2
 8000694:	e0ffff17 	ldw	r3,-4(fp)
 8000698:	1807d43a 	srai	r3,r3,16
 800069c:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = RGB;
 80006a0:	00a10034 	movhi	r2,33792
 80006a4:	10800104 	addi	r2,r2,4
 80006a8:	e0ffff17 	ldw	r3,-4(fp)
 80006ac:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = ProgramPaletteColour;
 80006b0:	00a10034 	movhi	r2,33792
 80006b4:	00c00404 	movi	r3,16
 80006b8:	10c0000d 	sth	r3,0(r2)
}
 80006bc:	e037883a 	mov	sp,fp
 80006c0:	df000017 	ldw	fp,0(sp)
 80006c4:	dec00104 	addi	sp,sp,4
 80006c8:	f800283a 	ret

080006cc <Graphics_DrawHorizontalLine>:

/*****************************************************************************************
 *	Function to draw a horizontal line from x1 to x2 with the given colour.
 *
 ******************************************************************************************/
void Graphics_DrawHorizontalLine(int x1, int x2, int y, int Colour) {
 80006cc:	defffa04 	addi	sp,sp,-24
 80006d0:	df000515 	stw	fp,20(sp)
 80006d4:	df000504 	addi	fp,sp,20
 80006d8:	e13ffc15 	stw	r4,-16(fp)
 80006dc:	e17ffd15 	stw	r5,-12(fp)
 80006e0:	e1bffe15 	stw	r6,-8(fp)
 80006e4:	e1ffff15 	stw	r7,-4(fp)
	if (x2 < x1) {
 80006e8:	e0fffd17 	ldw	r3,-12(fp)
 80006ec:	e0bffc17 	ldw	r2,-16(fp)
 80006f0:	1880060e 	bge	r3,r2,800070c <Graphics_DrawHorizontalLine+0x40>
		int temp = x1;
 80006f4:	e0bffc17 	ldw	r2,-16(fp)
 80006f8:	e0bffb15 	stw	r2,-20(fp)
		x1 = x2;
 80006fc:	e0bffd17 	ldw	r2,-12(fp)
 8000700:	e0bffc15 	stw	r2,-16(fp)
		x2 = temp;
 8000704:	e0bffb17 	ldw	r2,-20(fp)
 8000708:	e0bffd15 	stw	r2,-12(fp)
	}

	WAIT_FOR_GRAPHICS;
 800070c:	0001883a 	nop
 8000710:	00a10034 	movhi	r2,33792
 8000714:	1080000b 	ldhu	r2,0(r2)
 8000718:	10bfffcc 	andi	r2,r2,65535
 800071c:	1080004c 	andi	r2,r2,1
 8000720:	103ffb26 	beq	r2,zero,8000710 <__alt_data_end+0xfc000710>

	GraphicsX1Reg = x1;
 8000724:	00a10034 	movhi	r2,33792
 8000728:	10800084 	addi	r2,r2,2
 800072c:	e0fffc17 	ldw	r3,-16(fp)
 8000730:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 8000734:	00a10034 	movhi	r2,33792
 8000738:	10800184 	addi	r2,r2,6
 800073c:	e0fffd17 	ldw	r3,-12(fp)
 8000740:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000744:	00a10034 	movhi	r2,33792
 8000748:	10800104 	addi	r2,r2,4
 800074c:	e0fffe17 	ldw	r3,-8(fp)
 8000750:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y;
 8000754:	00a10034 	movhi	r2,33792
 8000758:	10800204 	addi	r2,r2,8
 800075c:	e0fffe17 	ldw	r3,-8(fp)
 8000760:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000764:	00a10034 	movhi	r2,33792
 8000768:	10800384 	addi	r2,r2,14
 800076c:	e0ffff17 	ldw	r3,-4(fp)
 8000770:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;
 8000774:	00a10034 	movhi	r2,33792
 8000778:	00c00044 	movi	r3,1
 800077c:	10c0000d 	sth	r3,0(r2)
}
 8000780:	e037883a 	mov	sp,fp
 8000784:	df000017 	ldw	fp,0(sp)
 8000788:	dec00104 	addi	sp,sp,4
 800078c:	f800283a 	ret

08000790 <Graphics_DrawVerticalLine>:

/*****************************************************************************************
 *	Function to draw a vertical line from y1 to y2 with the given colour.
 *
 ******************************************************************************************/
void Graphics_DrawVerticalLine(int y1, int y2, int x, int Colour) {
 8000790:	defffa04 	addi	sp,sp,-24
 8000794:	df000515 	stw	fp,20(sp)
 8000798:	df000504 	addi	fp,sp,20
 800079c:	e13ffc15 	stw	r4,-16(fp)
 80007a0:	e17ffd15 	stw	r5,-12(fp)
 80007a4:	e1bffe15 	stw	r6,-8(fp)
 80007a8:	e1ffff15 	stw	r7,-4(fp)
	if (y2 < y1) {
 80007ac:	e0fffd17 	ldw	r3,-12(fp)
 80007b0:	e0bffc17 	ldw	r2,-16(fp)
 80007b4:	1880060e 	bge	r3,r2,80007d0 <Graphics_DrawVerticalLine+0x40>
		int temp = y1;
 80007b8:	e0bffc17 	ldw	r2,-16(fp)
 80007bc:	e0bffb15 	stw	r2,-20(fp)
		y1 = y2;
 80007c0:	e0bffd17 	ldw	r2,-12(fp)
 80007c4:	e0bffc15 	stw	r2,-16(fp)
		y2 = temp;
 80007c8:	e0bffb17 	ldw	r2,-20(fp)
 80007cc:	e0bffd15 	stw	r2,-12(fp)
	}

	WAIT_FOR_GRAPHICS;
 80007d0:	0001883a 	nop
 80007d4:	00a10034 	movhi	r2,33792
 80007d8:	1080000b 	ldhu	r2,0(r2)
 80007dc:	10bfffcc 	andi	r2,r2,65535
 80007e0:	1080004c 	andi	r2,r2,1
 80007e4:	103ffb26 	beq	r2,zero,80007d4 <__alt_data_end+0xfc0007d4>

	GraphicsX1Reg = x;
 80007e8:	00a10034 	movhi	r2,33792
 80007ec:	10800084 	addi	r2,r2,2
 80007f0:	e0fffe17 	ldw	r3,-8(fp)
 80007f4:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x;
 80007f8:	00a10034 	movhi	r2,33792
 80007fc:	10800184 	addi	r2,r2,6
 8000800:	e0fffe17 	ldw	r3,-8(fp)
 8000804:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000808:	00a10034 	movhi	r2,33792
 800080c:	10800104 	addi	r2,r2,4
 8000810:	e0fffc17 	ldw	r3,-16(fp)
 8000814:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000818:	00a10034 	movhi	r2,33792
 800081c:	10800204 	addi	r2,r2,8
 8000820:	e0fffd17 	ldw	r3,-12(fp)
 8000824:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 8000828:	00a10034 	movhi	r2,33792
 800082c:	10800384 	addi	r2,r2,14
 8000830:	e0ffff17 	ldw	r3,-4(fp)
 8000834:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;
 8000838:	00a10034 	movhi	r2,33792
 800083c:	00c00084 	movi	r3,2
 8000840:	10c0000d 	sth	r3,0(r2)
}
 8000844:	e037883a 	mov	sp,fp
 8000848:	df000017 	ldw	fp,0(sp)
 800084c:	dec00104 	addi	sp,sp,4
 8000850:	f800283a 	ret

08000854 <Graphics_DrawStraightLine>:

/*****************************************************************************************
 *	Function to draw a line from x1, y1 to x2, y2 with the given colour.
 *
 ******************************************************************************************/
void Graphics_DrawStraightLine(int x1, int y1, int x2, int y2, int Colour) {
 8000854:	defffb04 	addi	sp,sp,-20
 8000858:	df000415 	stw	fp,16(sp)
 800085c:	df000404 	addi	fp,sp,16
 8000860:	e13ffc15 	stw	r4,-16(fp)
 8000864:	e17ffd15 	stw	r5,-12(fp)
 8000868:	e1bffe15 	stw	r6,-8(fp)
 800086c:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 8000870:	0001883a 	nop
 8000874:	00a10034 	movhi	r2,33792
 8000878:	1080000b 	ldhu	r2,0(r2)
 800087c:	10bfffcc 	andi	r2,r2,65535
 8000880:	1080004c 	andi	r2,r2,1
 8000884:	103ffb26 	beq	r2,zero,8000874 <__alt_data_end+0xfc000874>

	GraphicsX1Reg = x1;
 8000888:	00a10034 	movhi	r2,33792
 800088c:	10800084 	addi	r2,r2,2
 8000890:	e0fffc17 	ldw	r3,-16(fp)
 8000894:	10c0000d 	sth	r3,0(r2)
	GraphicsX2Reg = x2;
 8000898:	00a10034 	movhi	r2,33792
 800089c:	10800184 	addi	r2,r2,6
 80008a0:	e0fffe17 	ldw	r3,-8(fp)
 80008a4:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 80008a8:	00a10034 	movhi	r2,33792
 80008ac:	10800104 	addi	r2,r2,4
 80008b0:	e0fffd17 	ldw	r3,-12(fp)
 80008b4:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 80008b8:	00a10034 	movhi	r2,33792
 80008bc:	10800204 	addi	r2,r2,8
 80008c0:	e0ffff17 	ldw	r3,-4(fp)
 80008c4:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;
 80008c8:	00a10034 	movhi	r2,33792
 80008cc:	10800384 	addi	r2,r2,14
 80008d0:	e0c00117 	ldw	r3,4(fp)
 80008d4:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;
 80008d8:	00a10034 	movhi	r2,33792
 80008dc:	00c000c4 	movi	r3,3
 80008e0:	10c0000d 	sth	r3,0(r2)
}
 80008e4:	e037883a 	mov	sp,fp
 80008e8:	df000017 	ldw	fp,0(sp)
 80008ec:	dec00104 	addi	sp,sp,4
 80008f0:	f800283a 	ret

080008f4 <Graphics_DrawCircle>:

/*****************************************************************************************
 *	Function to draw a circle given an x coordinate, y coordinate and the radius.
 *
 ******************************************************************************************/
void Graphics_DrawCircle(int x0, int y0, int radius, int colour) {
 80008f4:	defff704 	addi	sp,sp,-36
 80008f8:	dfc00815 	stw	ra,32(sp)
 80008fc:	df000715 	stw	fp,28(sp)
 8000900:	df000704 	addi	fp,sp,28
 8000904:	e13ffc15 	stw	r4,-16(fp)
 8000908:	e17ffd15 	stw	r5,-12(fp)
 800090c:	e1bffe15 	stw	r6,-8(fp)
 8000910:	e1ffff15 	stw	r7,-4(fp)
	int x = radius;
 8000914:	e0bffe17 	ldw	r2,-8(fp)
 8000918:	e0bff915 	stw	r2,-28(fp)
	int y = 0;
 800091c:	e03ffa15 	stw	zero,-24(fp)
	int err = 0;
 8000920:	e03ffb15 	stw	zero,-20(fp)

	while (x >= y) {
 8000924:	00004606 	br	8000a40 <Graphics_DrawCircle+0x14c>
//		Graphics_WriteAPixel(x0 - x, y0 - y, colour);
//		Graphics_WriteAPixel(x0 - y, y0 - x, colour);
//		Graphics_WriteAPixel(x0 + y, y0 - x, colour);
//		Graphics_WriteAPixel(x0 + x, y0 - y, colour);

		Graphics_DrawHorizontalLine(x0 - x, x0 + x, y0 + y, colour);
 8000928:	e0fffc17 	ldw	r3,-16(fp)
 800092c:	e0bff917 	ldw	r2,-28(fp)
 8000930:	1889c83a 	sub	r4,r3,r2
 8000934:	e0fffc17 	ldw	r3,-16(fp)
 8000938:	e0bff917 	ldw	r2,-28(fp)
 800093c:	188b883a 	add	r5,r3,r2
 8000940:	e0fffd17 	ldw	r3,-12(fp)
 8000944:	e0bffa17 	ldw	r2,-24(fp)
 8000948:	1885883a 	add	r2,r3,r2
 800094c:	100d883a 	mov	r6,r2
 8000950:	e1ffff17 	ldw	r7,-4(fp)
 8000954:	80006cc0 	call	80006cc <Graphics_DrawHorizontalLine>
		Graphics_DrawHorizontalLine(x0 - x, x0 + x, y0 - y, colour);
 8000958:	e0fffc17 	ldw	r3,-16(fp)
 800095c:	e0bff917 	ldw	r2,-28(fp)
 8000960:	1889c83a 	sub	r4,r3,r2
 8000964:	e0fffc17 	ldw	r3,-16(fp)
 8000968:	e0bff917 	ldw	r2,-28(fp)
 800096c:	188b883a 	add	r5,r3,r2
 8000970:	e0fffd17 	ldw	r3,-12(fp)
 8000974:	e0bffa17 	ldw	r2,-24(fp)
 8000978:	1885c83a 	sub	r2,r3,r2
 800097c:	100d883a 	mov	r6,r2
 8000980:	e1ffff17 	ldw	r7,-4(fp)
 8000984:	80006cc0 	call	80006cc <Graphics_DrawHorizontalLine>
		Graphics_DrawVerticalLine(y0 - x, y0 + x, x0 + y, colour);
 8000988:	e0fffd17 	ldw	r3,-12(fp)
 800098c:	e0bff917 	ldw	r2,-28(fp)
 8000990:	1889c83a 	sub	r4,r3,r2
 8000994:	e0fffd17 	ldw	r3,-12(fp)
 8000998:	e0bff917 	ldw	r2,-28(fp)
 800099c:	188b883a 	add	r5,r3,r2
 80009a0:	e0fffc17 	ldw	r3,-16(fp)
 80009a4:	e0bffa17 	ldw	r2,-24(fp)
 80009a8:	1885883a 	add	r2,r3,r2
 80009ac:	100d883a 	mov	r6,r2
 80009b0:	e1ffff17 	ldw	r7,-4(fp)
 80009b4:	80007900 	call	8000790 <Graphics_DrawVerticalLine>
		Graphics_DrawVerticalLine(y0 - x, y0 + x, x0 - y, colour);
 80009b8:	e0fffd17 	ldw	r3,-12(fp)
 80009bc:	e0bff917 	ldw	r2,-28(fp)
 80009c0:	1889c83a 	sub	r4,r3,r2
 80009c4:	e0fffd17 	ldw	r3,-12(fp)
 80009c8:	e0bff917 	ldw	r2,-28(fp)
 80009cc:	188b883a 	add	r5,r3,r2
 80009d0:	e0fffc17 	ldw	r3,-16(fp)
 80009d4:	e0bffa17 	ldw	r2,-24(fp)
 80009d8:	1885c83a 	sub	r2,r3,r2
 80009dc:	100d883a 	mov	r6,r2
 80009e0:	e1ffff17 	ldw	r7,-4(fp)
 80009e4:	80007900 	call	8000790 <Graphics_DrawVerticalLine>

		if (err <= 0) {
 80009e8:	e0bffb17 	ldw	r2,-20(fp)
 80009ec:	00800916 	blt	zero,r2,8000a14 <Graphics_DrawCircle+0x120>
			y += 1;
 80009f0:	e0bffa17 	ldw	r2,-24(fp)
 80009f4:	10800044 	addi	r2,r2,1
 80009f8:	e0bffa15 	stw	r2,-24(fp)
			err += 2 * y + 1;
 80009fc:	e0bffa17 	ldw	r2,-24(fp)
 8000a00:	1085883a 	add	r2,r2,r2
 8000a04:	10800044 	addi	r2,r2,1
 8000a08:	e0fffb17 	ldw	r3,-20(fp)
 8000a0c:	1885883a 	add	r2,r3,r2
 8000a10:	e0bffb15 	stw	r2,-20(fp)
		}
		if (err > 0) {
 8000a14:	e0bffb17 	ldw	r2,-20(fp)
 8000a18:	0080090e 	bge	zero,r2,8000a40 <Graphics_DrawCircle+0x14c>
			x -= 1;
 8000a1c:	e0bff917 	ldw	r2,-28(fp)
 8000a20:	10bfffc4 	addi	r2,r2,-1
 8000a24:	e0bff915 	stw	r2,-28(fp)
			err -= 2 * x + 1;
 8000a28:	e0bff917 	ldw	r2,-28(fp)
 8000a2c:	1085883a 	add	r2,r2,r2
 8000a30:	0084303a 	nor	r2,zero,r2
 8000a34:	e0fffb17 	ldw	r3,-20(fp)
 8000a38:	1885883a 	add	r2,r3,r2
 8000a3c:	e0bffb15 	stw	r2,-20(fp)
void Graphics_DrawCircle(int x0, int y0, int radius, int colour) {
	int x = radius;
	int y = 0;
	int err = 0;

	while (x >= y) {
 8000a40:	e0fff917 	ldw	r3,-28(fp)
 8000a44:	e0bffa17 	ldw	r2,-24(fp)
 8000a48:	18bfb70e 	bge	r3,r2,8000928 <__alt_data_end+0xfc000928>
		if (err > 0) {
			x -= 1;
			err -= 2 * x + 1;
		}
	}
}
 8000a4c:	e037883a 	mov	sp,fp
 8000a50:	dfc00117 	ldw	ra,4(sp)
 8000a54:	df000017 	ldw	fp,0(sp)
 8000a58:	dec00204 	addi	sp,sp,8
 8000a5c:	f800283a 	ret

08000a60 <Graphics_DrawRectangle>:

/*****************************************************************************************
 *	Function to draw a rectangle given a Rectangle_t object.
 *
 ******************************************************************************************/
void Graphics_DrawRectangle(Rectangle_t *rect) {
 8000a60:	defff104 	addi	sp,sp,-60
 8000a64:	dfc00e15 	stw	ra,56(sp)
 8000a68:	df000d15 	stw	fp,52(sp)
 8000a6c:	dc400c15 	stw	r17,48(sp)
 8000a70:	dc000b15 	stw	r16,44(sp)
 8000a74:	df000d04 	addi	fp,sp,52
 8000a78:	e13ffd15 	stw	r4,-12(fp)
	int x1 = rect->x1;
 8000a7c:	e0bffd17 	ldw	r2,-12(fp)
 8000a80:	10800017 	ldw	r2,0(r2)
 8000a84:	e0bff815 	stw	r2,-32(fp)
	int y1 = rect->y1;
 8000a88:	e0bffd17 	ldw	r2,-12(fp)
 8000a8c:	10800217 	ldw	r2,8(r2)
 8000a90:	e0bff915 	stw	r2,-28(fp)
	int x2 = rect->x2;
 8000a94:	e0bffd17 	ldw	r2,-12(fp)
 8000a98:	10800117 	ldw	r2,4(r2)
 8000a9c:	e0bffa15 	stw	r2,-24(fp)
	int y2 = rect->y2;
 8000aa0:	e0bffd17 	ldw	r2,-12(fp)
 8000aa4:	10800317 	ldw	r2,12(r2)
 8000aa8:	e0bffb15 	stw	r2,-20(fp)
	int yPos = rect->y1;
 8000aac:	e0bffd17 	ldw	r2,-12(fp)
 8000ab0:	10800217 	ldw	r2,8(r2)
 8000ab4:	e0bff715 	stw	r2,-36(fp)
	int colour = rect->colour;
 8000ab8:	e0bffd17 	ldw	r2,-12(fp)
 8000abc:	10800617 	ldw	r2,24(r2)
 8000ac0:	e0bffc15 	stw	r2,-16(fp)

	while (yPos <= y2) {
 8000ac4:	00000806 	br	8000ae8 <Graphics_DrawRectangle+0x88>
		Graphics_DrawHorizontalLine(x1, x2, yPos, colour);
 8000ac8:	e13ff817 	ldw	r4,-32(fp)
 8000acc:	e17ffa17 	ldw	r5,-24(fp)
 8000ad0:	e1bff717 	ldw	r6,-36(fp)
 8000ad4:	e1fffc17 	ldw	r7,-16(fp)
 8000ad8:	80006cc0 	call	80006cc <Graphics_DrawHorizontalLine>
		yPos++;
 8000adc:	e0bff717 	ldw	r2,-36(fp)
 8000ae0:	10800044 	addi	r2,r2,1
 8000ae4:	e0bff715 	stw	r2,-36(fp)
	int x2 = rect->x2;
	int y2 = rect->y2;
	int yPos = rect->y1;
	int colour = rect->colour;

	while (yPos <= y2) {
 8000ae8:	e0bff717 	ldw	r2,-36(fp)
 8000aec:	e0fffb17 	ldw	r3,-20(fp)
 8000af0:	18bff50e 	bge	r3,r2,8000ac8 <__alt_data_end+0xfc000ac8>
		Graphics_DrawHorizontalLine(x1, x2, yPos, colour);
		yPos++;
	}

	if (rect->type == 1){
 8000af4:	e0bffd17 	ldw	r2,-12(fp)
 8000af8:	10800817 	ldw	r2,32(r2)
 8000afc:	10800058 	cmpnei	r2,r2,1
 8000b00:	1000081e 	bne	r2,zero,8000b24 <Graphics_DrawRectangle+0xc4>
		Graphics_DrawHomeIcon(x1 + 30, y1 + 5);
 8000b04:	e0bff817 	ldw	r2,-32(fp)
 8000b08:	10c00784 	addi	r3,r2,30
 8000b0c:	e0bff917 	ldw	r2,-28(fp)
 8000b10:	10800144 	addi	r2,r2,5
 8000b14:	1809883a 	mov	r4,r3
 8000b18:	100b883a 	mov	r5,r2
 8000b1c:	8001a1c0 	call	8001a1c <Graphics_DrawHomeIcon>
		return;
 8000b20:	00001e06 	br	8000b9c <Graphics_DrawRectangle+0x13c>
	}

	if (rect->text != NULL){
 8000b24:	e0bffd17 	ldw	r2,-12(fp)
 8000b28:	10800717 	ldw	r2,28(r2)
 8000b2c:	10001b26 	beq	r2,zero,8000b9c <Graphics_DrawRectangle+0x13c>
		Graphics_DrawTextCentered(y1 +(y2-y1-10)/2, x1, x2, WHITE, GRAY, rect->text, strlen(rect->text),0);
 8000b30:	e0fffb17 	ldw	r3,-20(fp)
 8000b34:	e0bff917 	ldw	r2,-28(fp)
 8000b38:	1885c83a 	sub	r2,r3,r2
 8000b3c:	10bffd84 	addi	r2,r2,-10
 8000b40:	1006d7fa 	srli	r3,r2,31
 8000b44:	1885883a 	add	r2,r3,r2
 8000b48:	1005d07a 	srai	r2,r2,1
 8000b4c:	1007883a 	mov	r3,r2
 8000b50:	e0bff917 	ldw	r2,-28(fp)
 8000b54:	18a3883a 	add	r17,r3,r2
 8000b58:	e0bffd17 	ldw	r2,-12(fp)
 8000b5c:	14000717 	ldw	r16,28(r2)
 8000b60:	e0bffd17 	ldw	r2,-12(fp)
 8000b64:	10800717 	ldw	r2,28(r2)
 8000b68:	1009883a 	mov	r4,r2
 8000b6c:	8006e040 	call	8006e04 <strlen>
 8000b70:	1007883a 	mov	r3,r2
 8000b74:	00800244 	movi	r2,9
 8000b78:	d8800015 	stw	r2,0(sp)
 8000b7c:	dc000115 	stw	r16,4(sp)
 8000b80:	d8c00215 	stw	r3,8(sp)
 8000b84:	d8000315 	stw	zero,12(sp)
 8000b88:	8809883a 	mov	r4,r17
 8000b8c:	e17ff817 	ldw	r5,-32(fp)
 8000b90:	e1bffa17 	ldw	r6,-24(fp)
 8000b94:	01c00044 	movi	r7,1
 8000b98:	8000cc00 	call	8000cc0 <Graphics_DrawTextCentered>
	}
}
 8000b9c:	e6fffe04 	addi	sp,fp,-8
 8000ba0:	dfc00317 	ldw	ra,12(sp)
 8000ba4:	df000217 	ldw	fp,8(sp)
 8000ba8:	dc400117 	ldw	r17,4(sp)
 8000bac:	dc000017 	ldw	r16,0(sp)
 8000bb0:	dec00404 	addi	sp,sp,16
 8000bb4:	f800283a 	ret

08000bb8 <Graphics_PointsDrawRectangle>:

/*****************************************************************************************
 *	Function to draw a rectangle given the x and y coordinates and a colour.
 *
 ******************************************************************************************/
void Graphics_PointsDrawRectangle(int x1, int y1, int x2, int y2, int Colour) {
 8000bb8:	defffa04 	addi	sp,sp,-24
 8000bbc:	dfc00515 	stw	ra,20(sp)
 8000bc0:	df000415 	stw	fp,16(sp)
 8000bc4:	df000404 	addi	fp,sp,16
 8000bc8:	e13ffc15 	stw	r4,-16(fp)
 8000bcc:	e17ffd15 	stw	r5,-12(fp)
 8000bd0:	e1bffe15 	stw	r6,-8(fp)
 8000bd4:	e1ffff15 	stw	r7,-4(fp)
	while (y1 <= y2) {
 8000bd8:	00000806 	br	8000bfc <Graphics_PointsDrawRectangle+0x44>
		Graphics_DrawHorizontalLine(x1, x2, y1, Colour);
 8000bdc:	e13ffc17 	ldw	r4,-16(fp)
 8000be0:	e17ffe17 	ldw	r5,-8(fp)
 8000be4:	e1bffd17 	ldw	r6,-12(fp)
 8000be8:	e1c00217 	ldw	r7,8(fp)
 8000bec:	80006cc0 	call	80006cc <Graphics_DrawHorizontalLine>
		y1++;
 8000bf0:	e0bffd17 	ldw	r2,-12(fp)
 8000bf4:	10800044 	addi	r2,r2,1
 8000bf8:	e0bffd15 	stw	r2,-12(fp)
/*****************************************************************************************
 *	Function to draw a rectangle given the x and y coordinates and a colour.
 *
 ******************************************************************************************/
void Graphics_PointsDrawRectangle(int x1, int y1, int x2, int y2, int Colour) {
	while (y1 <= y2) {
 8000bfc:	e0bffd17 	ldw	r2,-12(fp)
 8000c00:	e0ffff17 	ldw	r3,-4(fp)
 8000c04:	18bff50e 	bge	r3,r2,8000bdc <__alt_data_end+0xfc000bdc>
		Graphics_DrawHorizontalLine(x1, x2, y1, Colour);
		y1++;
	}
}
 8000c08:	e037883a 	mov	sp,fp
 8000c0c:	dfc00117 	ldw	ra,4(sp)
 8000c10:	df000017 	ldw	fp,0(sp)
 8000c14:	dec00204 	addi	sp,sp,8
 8000c18:	f800283a 	ret

08000c1c <Graphics_DrawText>:

/*****************************************************************************************
 *	Function to draw text at the given coordinate in the given colour.
 *
 ******************************************************************************************/
void Graphics_DrawText(int x, int y, int colour, int backgroundColour, char *text, int n, int erase){
 8000c1c:	defff604 	addi	sp,sp,-40
 8000c20:	dfc00915 	stw	ra,36(sp)
 8000c24:	df000815 	stw	fp,32(sp)
 8000c28:	df000804 	addi	fp,sp,32
 8000c2c:	e13ffc15 	stw	r4,-16(fp)
 8000c30:	e17ffd15 	stw	r5,-12(fp)
 8000c34:	e1bffe15 	stw	r6,-8(fp)
 8000c38:	e1ffff15 	stw	r7,-4(fp)
	int i;
	int xPos = x;
 8000c3c:	e0bffc17 	ldw	r2,-16(fp)
 8000c40:	e0bffb15 	stw	r2,-20(fp)
	for (i = 0; i < n; i++){
 8000c44:	e03ffa15 	stw	zero,-24(fp)
 8000c48:	00001506 	br	8000ca0 <Graphics_DrawText+0x84>
		Graphics_Font10x14(xPos, y, colour, backgroundColour, text[i], erase);
 8000c4c:	e0bffa17 	ldw	r2,-24(fp)
 8000c50:	e0c00217 	ldw	r3,8(fp)
 8000c54:	1885883a 	add	r2,r3,r2
 8000c58:	10800003 	ldbu	r2,0(r2)
 8000c5c:	10803fcc 	andi	r2,r2,255
 8000c60:	1080201c 	xori	r2,r2,128
 8000c64:	10bfe004 	addi	r2,r2,-128
 8000c68:	d8800015 	stw	r2,0(sp)
 8000c6c:	e0800417 	ldw	r2,16(fp)
 8000c70:	d8800115 	stw	r2,4(sp)
 8000c74:	e13ffb17 	ldw	r4,-20(fp)
 8000c78:	e17ffd17 	ldw	r5,-12(fp)
 8000c7c:	e1bffe17 	ldw	r6,-8(fp)
 8000c80:	e1ffff17 	ldw	r7,-4(fp)
 8000c84:	80003ac0 	call	80003ac <Graphics_Font10x14>
		xPos = xPos + 12;
 8000c88:	e0bffb17 	ldw	r2,-20(fp)
 8000c8c:	10800304 	addi	r2,r2,12
 8000c90:	e0bffb15 	stw	r2,-20(fp)
 *
 ******************************************************************************************/
void Graphics_DrawText(int x, int y, int colour, int backgroundColour, char *text, int n, int erase){
	int i;
	int xPos = x;
	for (i = 0; i < n; i++){
 8000c94:	e0bffa17 	ldw	r2,-24(fp)
 8000c98:	10800044 	addi	r2,r2,1
 8000c9c:	e0bffa15 	stw	r2,-24(fp)
 8000ca0:	e0fffa17 	ldw	r3,-24(fp)
 8000ca4:	e0800317 	ldw	r2,12(fp)
 8000ca8:	18bfe816 	blt	r3,r2,8000c4c <__alt_data_end+0xfc000c4c>
		Graphics_Font10x14(xPos, y, colour, backgroundColour, text[i], erase);
		xPos = xPos + 12;
	}
}
 8000cac:	e037883a 	mov	sp,fp
 8000cb0:	dfc00117 	ldw	ra,4(sp)
 8000cb4:	df000017 	ldw	fp,0(sp)
 8000cb8:	dec00204 	addi	sp,sp,8
 8000cbc:	f800283a 	ret

08000cc0 <Graphics_DrawTextCentered>:

/*****************************************************************************************
 *	Function to draw centered text given a y coordinate, left x bound and a right x bound.
 *
 ******************************************************************************************/
void Graphics_DrawTextCentered(int y, int xBoundLeft, int xBoundRight, int colour, int backgroundColour, char *text, int n, int erase){
 8000cc0:	defff504 	addi	sp,sp,-44
 8000cc4:	dfc00a15 	stw	ra,40(sp)
 8000cc8:	df000915 	stw	fp,36(sp)
 8000ccc:	df000904 	addi	fp,sp,36
 8000cd0:	e13ffc15 	stw	r4,-16(fp)
 8000cd4:	e17ffd15 	stw	r5,-12(fp)
 8000cd8:	e1bffe15 	stw	r6,-8(fp)
 8000cdc:	e1ffff15 	stw	r7,-4(fp)
	int i;
	int textLength = 12 * n;
 8000ce0:	e1000417 	ldw	r4,16(fp)
 8000ce4:	01400304 	movi	r5,12
 8000ce8:	80040900 	call	8004090 <__mulsi3>
 8000cec:	e0bffb15 	stw	r2,-20(fp)
	int xPos =	xBoundLeft + (xBoundRight - textLength - xBoundLeft) / 2;
 8000cf0:	e0fffe17 	ldw	r3,-8(fp)
 8000cf4:	e0bffb17 	ldw	r2,-20(fp)
 8000cf8:	1887c83a 	sub	r3,r3,r2
 8000cfc:	e0bffd17 	ldw	r2,-12(fp)
 8000d00:	1885c83a 	sub	r2,r3,r2
 8000d04:	1006d7fa 	srli	r3,r2,31
 8000d08:	1885883a 	add	r2,r3,r2
 8000d0c:	1005d07a 	srai	r2,r2,1
 8000d10:	1007883a 	mov	r3,r2
 8000d14:	e0bffd17 	ldw	r2,-12(fp)
 8000d18:	1885883a 	add	r2,r3,r2
 8000d1c:	e0bffa15 	stw	r2,-24(fp)
	for (i = 0; i < n; i++){
 8000d20:	e03ff915 	stw	zero,-28(fp)
 8000d24:	00001506 	br	8000d7c <Graphics_DrawTextCentered+0xbc>
		Graphics_Font10x14(xPos, y, colour, backgroundColour, text[i], erase);
 8000d28:	e0bff917 	ldw	r2,-28(fp)
 8000d2c:	e0c00317 	ldw	r3,12(fp)
 8000d30:	1885883a 	add	r2,r3,r2
 8000d34:	10800003 	ldbu	r2,0(r2)
 8000d38:	10803fcc 	andi	r2,r2,255
 8000d3c:	1080201c 	xori	r2,r2,128
 8000d40:	10bfe004 	addi	r2,r2,-128
 8000d44:	d8800015 	stw	r2,0(sp)
 8000d48:	e0800517 	ldw	r2,20(fp)
 8000d4c:	d8800115 	stw	r2,4(sp)
 8000d50:	e13ffa17 	ldw	r4,-24(fp)
 8000d54:	e17ffc17 	ldw	r5,-16(fp)
 8000d58:	e1bfff17 	ldw	r6,-4(fp)
 8000d5c:	e1c00217 	ldw	r7,8(fp)
 8000d60:	80003ac0 	call	80003ac <Graphics_Font10x14>
		xPos = xPos + 12;
 8000d64:	e0bffa17 	ldw	r2,-24(fp)
 8000d68:	10800304 	addi	r2,r2,12
 8000d6c:	e0bffa15 	stw	r2,-24(fp)
 ******************************************************************************************/
void Graphics_DrawTextCentered(int y, int xBoundLeft, int xBoundRight, int colour, int backgroundColour, char *text, int n, int erase){
	int i;
	int textLength = 12 * n;
	int xPos =	xBoundLeft + (xBoundRight - textLength - xBoundLeft) / 2;
	for (i = 0; i < n; i++){
 8000d70:	e0bff917 	ldw	r2,-28(fp)
 8000d74:	10800044 	addi	r2,r2,1
 8000d78:	e0bff915 	stw	r2,-28(fp)
 8000d7c:	e0fff917 	ldw	r3,-28(fp)
 8000d80:	e0800417 	ldw	r2,16(fp)
 8000d84:	18bfe816 	blt	r3,r2,8000d28 <__alt_data_end+0xfc000d28>
		Graphics_Font10x14(xPos, y, colour, backgroundColour, text[i], erase);
		xPos = xPos + 12;
	}
}
 8000d88:	e037883a 	mov	sp,fp
 8000d8c:	dfc00117 	ldw	ra,4(sp)
 8000d90:	df000017 	ldw	fp,0(sp)
 8000d94:	dec00204 	addi	sp,sp,8
 8000d98:	f800283a 	ret

08000d9c <Graphics_Init_Rectangle>:

/*****************************************************************************************
 *	Initializes and returns a rectangle given the four points, a colour and text for the rectangle
 *
 ******************************************************************************************/
Rectangle_t* Graphics_Init_Rectangle(int x1, int y1, int x2, int y2, int colour, int type, const char *text) {
 8000d9c:	defff904 	addi	sp,sp,-28
 8000da0:	dfc00615 	stw	ra,24(sp)
 8000da4:	df000515 	stw	fp,20(sp)
 8000da8:	df000504 	addi	fp,sp,20
 8000dac:	e13ffc15 	stw	r4,-16(fp)
 8000db0:	e17ffd15 	stw	r5,-12(fp)
 8000db4:	e1bffe15 	stw	r6,-8(fp)
 8000db8:	e1ffff15 	stw	r7,-4(fp)
	Rectangle_t* rect = malloc(sizeof(Rectangle_t));
 8000dbc:	01000904 	movi	r4,36
 8000dc0:	8005de80 	call	8005de8 <malloc>
 8000dc4:	e0bffb15 	stw	r2,-20(fp)

	rect->x1 = x1;
 8000dc8:	e0bffb17 	ldw	r2,-20(fp)
 8000dcc:	e0fffc17 	ldw	r3,-16(fp)
 8000dd0:	10c00015 	stw	r3,0(r2)
	rect->x2 = x2;
 8000dd4:	e0bffb17 	ldw	r2,-20(fp)
 8000dd8:	e0fffe17 	ldw	r3,-8(fp)
 8000ddc:	10c00115 	stw	r3,4(r2)
	rect->y1 = y1;
 8000de0:	e0bffb17 	ldw	r2,-20(fp)
 8000de4:	e0fffd17 	ldw	r3,-12(fp)
 8000de8:	10c00215 	stw	r3,8(r2)
	rect->y2 = y2;
 8000dec:	e0bffb17 	ldw	r2,-20(fp)
 8000df0:	e0ffff17 	ldw	r3,-4(fp)
 8000df4:	10c00315 	stw	r3,12(r2)
	rect->type = type;
 8000df8:	e0bffb17 	ldw	r2,-20(fp)
 8000dfc:	e0c00317 	ldw	r3,12(fp)
 8000e00:	10c00815 	stw	r3,32(r2)

	rect->colour = colour;
 8000e04:	e0bffb17 	ldw	r2,-20(fp)
 8000e08:	e0c00217 	ldw	r3,8(fp)
 8000e0c:	10c00615 	stw	r3,24(r2)
	rect->x_length = x2 - x1;
 8000e10:	e0fffe17 	ldw	r3,-8(fp)
 8000e14:	e0bffc17 	ldw	r2,-16(fp)
 8000e18:	1887c83a 	sub	r3,r3,r2
 8000e1c:	e0bffb17 	ldw	r2,-20(fp)
 8000e20:	10c00415 	stw	r3,16(r2)
	rect->y_length = y2 - y1;
 8000e24:	e0ffff17 	ldw	r3,-4(fp)
 8000e28:	e0bffd17 	ldw	r2,-12(fp)
 8000e2c:	1887c83a 	sub	r3,r3,r2
 8000e30:	e0bffb17 	ldw	r2,-20(fp)
 8000e34:	10c00515 	stw	r3,20(r2)
	rect->text = strdup(text);
 8000e38:	e1000417 	ldw	r4,16(fp)
 8000e3c:	8006d880 	call	8006d88 <strdup>
 8000e40:	1007883a 	mov	r3,r2
 8000e44:	e0bffb17 	ldw	r2,-20(fp)
 8000e48:	10c00715 	stw	r3,28(r2)

	return rect;
 8000e4c:	e0bffb17 	ldw	r2,-20(fp)
}
 8000e50:	e037883a 	mov	sp,fp
 8000e54:	dfc00117 	ldw	ra,4(sp)
 8000e58:	df000017 	ldw	fp,0(sp)
 8000e5c:	dec00204 	addi	sp,sp,8
 8000e60:	f800283a 	ret

08000e64 <Graphics_Destroy_Rectangle>:

/*****************************************************************************************
 *	Destroys the given rectangle
 *
 ******************************************************************************************/
void Graphics_Destroy_Rectangle(Rectangle_t* rect) {
 8000e64:	defffd04 	addi	sp,sp,-12
 8000e68:	dfc00215 	stw	ra,8(sp)
 8000e6c:	df000115 	stw	fp,4(sp)
 8000e70:	df000104 	addi	fp,sp,4
 8000e74:	e13fff15 	stw	r4,-4(fp)
	free(rect);
 8000e78:	e13fff17 	ldw	r4,-4(fp)
 8000e7c:	8005dfc0 	call	8005dfc <free>
}
 8000e80:	e037883a 	mov	sp,fp
 8000e84:	dfc00117 	ldw	ra,4(sp)
 8000e88:	df000017 	ldw	fp,0(sp)
 8000e8c:	dec00204 	addi	sp,sp,8
 8000e90:	f800283a 	ret

08000e94 <Graphics_ClearScreen>:

/*****************************************************************************************
 *	Clears the screen with the given colour
 *
 ******************************************************************************************/
void Graphics_ClearScreen(int Colour) {
 8000e94:	defffc04 	addi	sp,sp,-16
 8000e98:	dfc00315 	stw	ra,12(sp)
 8000e9c:	df000215 	stw	fp,8(sp)
 8000ea0:	df000204 	addi	fp,sp,8
 8000ea4:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0; i < 481; i++) {
 8000ea8:	e03ffe15 	stw	zero,-8(fp)
 8000eac:	00000806 	br	8000ed0 <Graphics_ClearScreen+0x3c>
		Graphics_DrawHorizontalLine(0, 800, i, Colour);
 8000eb0:	0009883a 	mov	r4,zero
 8000eb4:	0140c804 	movi	r5,800
 8000eb8:	e1bffe17 	ldw	r6,-8(fp)
 8000ebc:	e1ffff17 	ldw	r7,-4(fp)
 8000ec0:	80006cc0 	call	80006cc <Graphics_DrawHorizontalLine>
 *	Clears the screen with the given colour
 *
 ******************************************************************************************/
void Graphics_ClearScreen(int Colour) {
	int i;
	for (i = 0; i < 481; i++) {
 8000ec4:	e0bffe17 	ldw	r2,-8(fp)
 8000ec8:	10800044 	addi	r2,r2,1
 8000ecc:	e0bffe15 	stw	r2,-8(fp)
 8000ed0:	e0bffe17 	ldw	r2,-8(fp)
 8000ed4:	10807850 	cmplti	r2,r2,481
 8000ed8:	103ff51e 	bne	r2,zero,8000eb0 <__alt_data_end+0xfc000eb0>
		Graphics_DrawHorizontalLine(0, 800, i, Colour);
	}
}
 8000edc:	e037883a 	mov	sp,fp
 8000ee0:	dfc00117 	ldw	ra,4(sp)
 8000ee4:	df000017 	ldw	fp,0(sp)
 8000ee8:	dec00204 	addi	sp,sp,8
 8000eec:	f800283a 	ret

08000ef0 <Graphics_DrawLineDemo>:

/*****************************************************************************************
 *	Function to display the line demo
 *
 ******************************************************************************************/
void Graphics_DrawLineDemo() {
 8000ef0:	defffd04 	addi	sp,sp,-12
 8000ef4:	dfc00215 	stw	ra,8(sp)
 8000ef8:	df000115 	stw	fp,4(sp)
 8000efc:	df000104 	addi	fp,sp,4
	Graphics_DrawHorizontalLine(0, 800, 240, MAGENTA);
 8000f00:	0009883a 	mov	r4,zero
 8000f04:	0140c804 	movi	r5,800
 8000f08:	01803c04 	movi	r6,240
 8000f0c:	01c001c4 	movi	r7,7
 8000f10:	80006cc0 	call	80006cc <Graphics_DrawHorizontalLine>
	Graphics_DrawVerticalLine(0, 480, 400, MAGENTA);
 8000f14:	0009883a 	mov	r4,zero
 8000f18:	01407804 	movi	r5,480
 8000f1c:	01806404 	movi	r6,400
 8000f20:	01c001c4 	movi	r7,7
 8000f24:	80007900 	call	8000790 <Graphics_DrawVerticalLine>
	Graphics_DrawStraightLine(0, 0, 800, 480, MAGENTA);
 8000f28:	008001c4 	movi	r2,7
 8000f2c:	d8800015 	stw	r2,0(sp)
 8000f30:	0009883a 	mov	r4,zero
 8000f34:	000b883a 	mov	r5,zero
 8000f38:	0180c804 	movi	r6,800
 8000f3c:	01c07804 	movi	r7,480
 8000f40:	80008540 	call	8000854 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(0, 480, 800, 0, MAGENTA);
 8000f44:	008001c4 	movi	r2,7
 8000f48:	d8800015 	stw	r2,0(sp)
 8000f4c:	0009883a 	mov	r4,zero
 8000f50:	01407804 	movi	r5,480
 8000f54:	0180c804 	movi	r6,800
 8000f58:	000f883a 	mov	r7,zero
 8000f5c:	80008540 	call	8000854 <Graphics_DrawStraightLine>
}
 8000f60:	e037883a 	mov	sp,fp
 8000f64:	dfc00117 	ldw	ra,4(sp)
 8000f68:	df000017 	ldw	fp,0(sp)
 8000f6c:	dec00204 	addi	sp,sp,8
 8000f70:	f800283a 	ret

08000f74 <Graphics_DrawInitializationScreen>:

/*****************************************************************************************
 *	Function to display the initialization screen
 *
 ******************************************************************************************/
void Graphics_DrawInitializationScreen(){
 8000f74:	deffe504 	addi	sp,sp,-108
 8000f78:	dfc01a15 	stw	ra,104(sp)
 8000f7c:	df001915 	stw	fp,100(sp)
 8000f80:	df001904 	addi	fp,sp,100
	char initializeLabel[] = "WELCOME TO THE HOME PACKAGE MONITOR!";
 8000f84:	0090d334 	movhi	r2,17228
 8000f88:	109155c4 	addi	r2,r2,17751
 8000f8c:	e0bfec15 	stw	r2,-80(fp)
 8000f90:	00881174 	movhi	r2,8261
 8000f94:	109353c4 	addi	r2,r2,19791
 8000f98:	e0bfed15 	stw	r2,-76(fp)
 8000f9c:	00950834 	movhi	r2,21536
 8000fa0:	1093d504 	addi	r2,r2,20308
 8000fa4:	e0bfee15 	stw	r2,-72(fp)
 8000fa8:	00920834 	movhi	r2,18464
 8000fac:	10915204 	addi	r2,r2,17736
 8000fb0:	e0bfef15 	stw	r2,-68(fp)
 8000fb4:	00881174 	movhi	r2,8261
 8000fb8:	109353c4 	addi	r2,r2,19791
 8000fbc:	e0bff015 	stw	r2,-64(fp)
 8000fc0:	0092d0f4 	movhi	r2,19267
 8000fc4:	10905404 	addi	r2,r2,16720
 8000fc8:	e0bff115 	stw	r2,-60(fp)
 8000fcc:	00881174 	movhi	r2,8261
 8000fd0:	1091d044 	addi	r2,r2,18241
 8000fd4:	e0bff215 	stw	r2,-56(fp)
 8000fd8:	009253b4 	movhi	r2,18766
 8000fdc:	1093d344 	addi	r2,r2,20301
 8000fe0:	e0bff315 	stw	r2,-52(fp)
 8000fe4:	008854b4 	movhi	r2,8530
 8000fe8:	1093d504 	addi	r2,r2,20308
 8000fec:	e0bff415 	stw	r2,-48(fp)
 8000ff0:	e03ff505 	stb	zero,-44(fp)
	char promptLabel[] = "SIGN UP TO INITIALIZE THE MASTER PASSCODE";
 8000ff4:	008200b4 	movhi	r2,2050
 8000ff8:	10892f04 	addi	r2,r2,9404
 8000ffc:	e0fff544 	addi	r3,fp,-43
 8001000:	100b883a 	mov	r5,r2
 8001004:	00800a84 	movi	r2,42
 8001008:	1809883a 	mov	r4,r3
 800100c:	100d883a 	mov	r6,r2
 8001010:	80065b80 	call	80065b8 <memcpy>
	char *signUpLabel = "SIGN UP";
 8001014:	008200b4 	movhi	r2,2050
 8001018:	10892d04 	addi	r2,r2,9396
 800101c:	e0bfeb15 	stw	r2,-84(fp)
	Graphics_ClearScreen(BLACK);
 8001020:	0009883a 	mov	r4,zero
 8001024:	8000e940 	call	8000e94 <Graphics_ClearScreen>

	Graphics_DrawTextCentered(200, 0, XRES, WHITE, BLACK, initializeLabel, strlen(initializeLabel), 0);
 8001028:	e0bfec04 	addi	r2,fp,-80
 800102c:	1009883a 	mov	r4,r2
 8001030:	8006e040 	call	8006e04 <strlen>
 8001034:	1007883a 	mov	r3,r2
 8001038:	d8000015 	stw	zero,0(sp)
 800103c:	e0bfec04 	addi	r2,fp,-80
 8001040:	d8800115 	stw	r2,4(sp)
 8001044:	d8c00215 	stw	r3,8(sp)
 8001048:	d8000315 	stw	zero,12(sp)
 800104c:	01003204 	movi	r4,200
 8001050:	000b883a 	mov	r5,zero
 8001054:	0180c804 	movi	r6,800
 8001058:	01c00044 	movi	r7,1
 800105c:	8000cc00 	call	8000cc0 <Graphics_DrawTextCentered>
	Graphics_DrawTextCentered(250, 0, XRES, WHITE, BLACK, promptLabel, strlen(promptLabel), 0);
 8001060:	e0bff544 	addi	r2,fp,-43
 8001064:	1009883a 	mov	r4,r2
 8001068:	8006e040 	call	8006e04 <strlen>
 800106c:	1007883a 	mov	r3,r2
 8001070:	d8000015 	stw	zero,0(sp)
 8001074:	e0bff544 	addi	r2,fp,-43
 8001078:	d8800115 	stw	r2,4(sp)
 800107c:	d8c00215 	stw	r3,8(sp)
 8001080:	d8000315 	stw	zero,12(sp)
 8001084:	01003e84 	movi	r4,250
 8001088:	000b883a 	mov	r5,zero
 800108c:	0180c804 	movi	r6,800
 8001090:	01c00044 	movi	r7,1
 8001094:	8000cc00 	call	8000cc0 <Graphics_DrawTextCentered>

	sign_up_rect = Graphics_InitializeRectangleCentered((strlen(signUpLabel) * 12) + 30, 300, 50, 0, 800, GREEN, signUpLabel);
 8001098:	e13feb17 	ldw	r4,-84(fp)
 800109c:	8006e040 	call	8006e04 <strlen>
 80010a0:	1009883a 	mov	r4,r2
 80010a4:	01400304 	movi	r5,12
 80010a8:	80040900 	call	8004090 <__mulsi3>
 80010ac:	10800784 	addi	r2,r2,30
 80010b0:	1007883a 	mov	r3,r2
 80010b4:	0080c804 	movi	r2,800
 80010b8:	d8800015 	stw	r2,0(sp)
 80010bc:	00800304 	movi	r2,12
 80010c0:	d8800115 	stw	r2,4(sp)
 80010c4:	e0bfeb17 	ldw	r2,-84(fp)
 80010c8:	d8800215 	stw	r2,8(sp)
 80010cc:	1809883a 	mov	r4,r3
 80010d0:	01404b04 	movi	r5,300
 80010d4:	01800c84 	movi	r6,50
 80010d8:	000f883a 	mov	r7,zero
 80010dc:	80022ac0 	call	80022ac <Graphics_InitializeRectangleCentered>
 80010e0:	d0a6d815 	stw	r2,-25760(gp)
	Graphics_DrawRectangle(sign_up_rect);
 80010e4:	d0a6d817 	ldw	r2,-25760(gp)
 80010e8:	1009883a 	mov	r4,r2
 80010ec:	8000a600 	call	8000a60 <Graphics_DrawRectangle>
}
 80010f0:	e037883a 	mov	sp,fp
 80010f4:	dfc00117 	ldw	ra,4(sp)
 80010f8:	df000017 	ldw	fp,0(sp)
 80010fc:	dec00204 	addi	sp,sp,8
 8001100:	f800283a 	ret

08001104 <Graphics_DrawWelcomeScreen>:

/*****************************************************************************************
 *	Function to draw the welcome screen GUI.
 *
 ******************************************************************************************/
void Graphics_DrawWelcomeScreen(){
 8001104:	deffea04 	addi	sp,sp,-88
 8001108:	dfc01515 	stw	ra,84(sp)
 800110c:	df001415 	stw	fp,80(sp)
 8001110:	df001404 	addi	fp,sp,80
	char requestLabel[] = "WELCOME, PLEASE LOG IN OR REQUEST A CODE";
 8001114:	0090d334 	movhi	r2,17228
 8001118:	109155c4 	addi	r2,r2,17751
 800111c:	e0bff015 	stw	r2,-64(fp)
 8001120:	008b1174 	movhi	r2,11333
 8001124:	109353c4 	addi	r2,r2,19791
 8001128:	e0bff115 	stw	r2,-60(fp)
 800112c:	00915334 	movhi	r2,17740
 8001130:	10940804 	addi	r2,r2,20512
 8001134:	e0bff215 	stw	r2,-56(fp)
 8001138:	00881174 	movhi	r2,8261
 800113c:	1094d044 	addi	r2,r2,21313
 8001140:	e0bff315 	stw	r2,-52(fp)
 8001144:	008811f4 	movhi	r2,8263
 8001148:	1093d304 	addi	r2,r2,20300
 800114c:	e0bff415 	stw	r2,-48(fp)
 8001150:	0093c834 	movhi	r2,20256
 8001154:	10939244 	addi	r2,r2,20041
 8001158:	e0bff515 	stw	r2,-44(fp)
 800115c:	009154b4 	movhi	r2,17746
 8001160:	10881484 	addi	r2,r2,8274
 8001164:	e0bff615 	stw	r2,-40(fp)
 8001168:	0094d174 	movhi	r2,21317
 800116c:	10955444 	addi	r2,r2,21841
 8001170:	e0bff715 	stw	r2,-36(fp)
 8001174:	00881074 	movhi	r2,8257
 8001178:	10881504 	addi	r2,r2,8276
 800117c:	e0bff815 	stw	r2,-32(fp)
 8001180:	00915134 	movhi	r2,17732
 8001184:	1093d0c4 	addi	r2,r2,20291
 8001188:	e0bff915 	stw	r2,-28(fp)
 800118c:	e03ffa05 	stb	zero,-24(fp)
	char requestCode[] = "REQUEST CODE";
 8001190:	00801484 	movi	r2,82
 8001194:	e0bffa45 	stb	r2,-23(fp)
 8001198:	00801144 	movi	r2,69
 800119c:	e0bffa85 	stb	r2,-22(fp)
 80011a0:	00801444 	movi	r2,81
 80011a4:	e0bffac5 	stb	r2,-21(fp)
 80011a8:	00801544 	movi	r2,85
 80011ac:	e0bffb05 	stb	r2,-20(fp)
 80011b0:	00801144 	movi	r2,69
 80011b4:	e0bffb45 	stb	r2,-19(fp)
 80011b8:	008014c4 	movi	r2,83
 80011bc:	e0bffb85 	stb	r2,-18(fp)
 80011c0:	00801504 	movi	r2,84
 80011c4:	e0bffbc5 	stb	r2,-17(fp)
 80011c8:	00800804 	movi	r2,32
 80011cc:	e0bffc05 	stb	r2,-16(fp)
 80011d0:	008010c4 	movi	r2,67
 80011d4:	e0bffc45 	stb	r2,-15(fp)
 80011d8:	008013c4 	movi	r2,79
 80011dc:	e0bffc85 	stb	r2,-14(fp)
 80011e0:	00801104 	movi	r2,68
 80011e4:	e0bffcc5 	stb	r2,-13(fp)
 80011e8:	00801144 	movi	r2,69
 80011ec:	e0bffd05 	stb	r2,-12(fp)
 80011f0:	e03ffd45 	stb	zero,-11(fp)
	char logInLabel[] = "LOG IN";
 80011f4:	0093d304 	movi	r2,20300
 80011f8:	e0bffd8d 	sth	r2,-10(fp)
 80011fc:	008811c4 	movi	r2,8263
 8001200:	e0bffe0d 	sth	r2,-8(fp)
 8001204:	00939244 	movi	r2,20041
 8001208:	e0bffe8d 	sth	r2,-6(fp)
 800120c:	e03fff05 	stb	zero,-4(fp)
	Graphics_ClearScreen(BLACK);
 8001210:	0009883a 	mov	r4,zero
 8001214:	8000e940 	call	8000e94 <Graphics_ClearScreen>

	Graphics_DrawTextCentered(220, 0, 800, WHITE, BLACK, requestLabel, strlen(requestLabel), 0);
 8001218:	e13ff004 	addi	r4,fp,-64
 800121c:	8006e040 	call	8006e04 <strlen>
 8001220:	d8000015 	stw	zero,0(sp)
 8001224:	e0fff004 	addi	r3,fp,-64
 8001228:	d8c00115 	stw	r3,4(sp)
 800122c:	d8800215 	stw	r2,8(sp)
 8001230:	d8000315 	stw	zero,12(sp)
 8001234:	01003704 	movi	r4,220
 8001238:	000b883a 	mov	r5,zero
 800123c:	0180c804 	movi	r6,800
 8001240:	01c00044 	movi	r7,1
 8001244:	8000cc00 	call	8000cc0 <Graphics_DrawTextCentered>

	request_code_rect = Graphics_InitializeRectangleCentered(strlen(requestCode)*12 + 30, 250, 75, 0, 800, GREEN, requestCode);
 8001248:	e0bffa44 	addi	r2,fp,-23
 800124c:	1009883a 	mov	r4,r2
 8001250:	8006e040 	call	8006e04 <strlen>
 8001254:	1009883a 	mov	r4,r2
 8001258:	01400304 	movi	r5,12
 800125c:	80040900 	call	8004090 <__mulsi3>
 8001260:	10800784 	addi	r2,r2,30
 8001264:	1007883a 	mov	r3,r2
 8001268:	0080c804 	movi	r2,800
 800126c:	d8800015 	stw	r2,0(sp)
 8001270:	00800304 	movi	r2,12
 8001274:	d8800115 	stw	r2,4(sp)
 8001278:	e0bffa44 	addi	r2,fp,-23
 800127c:	d8800215 	stw	r2,8(sp)
 8001280:	1809883a 	mov	r4,r3
 8001284:	01403e84 	movi	r5,250
 8001288:	018012c4 	movi	r6,75
 800128c:	000f883a 	mov	r7,zero
 8001290:	80022ac0 	call	80022ac <Graphics_InitializeRectangleCentered>
 8001294:	d0a6d715 	stw	r2,-25764(gp)
	Graphics_DrawRectangle(request_code_rect);
 8001298:	d0a6d717 	ldw	r2,-25764(gp)
 800129c:	1009883a 	mov	r4,r2
 80012a0:	8000a600 	call	8000a60 <Graphics_DrawRectangle>

	log_in_rect = Graphics_InitializeRectangleCentered(strlen(logInLabel)*12 + 30, 30, 75, 650, 750, BLUE, logInLabel);
 80012a4:	e0bffd84 	addi	r2,fp,-10
 80012a8:	1009883a 	mov	r4,r2
 80012ac:	8006e040 	call	8006e04 <strlen>
 80012b0:	1009883a 	mov	r4,r2
 80012b4:	01400304 	movi	r5,12
 80012b8:	80040900 	call	8004090 <__mulsi3>
 80012bc:	10800784 	addi	r2,r2,30
 80012c0:	1007883a 	mov	r3,r2
 80012c4:	0080bb84 	movi	r2,750
 80012c8:	d8800015 	stw	r2,0(sp)
 80012cc:	00800104 	movi	r2,4
 80012d0:	d8800115 	stw	r2,4(sp)
 80012d4:	e0bffd84 	addi	r2,fp,-10
 80012d8:	d8800215 	stw	r2,8(sp)
 80012dc:	1809883a 	mov	r4,r3
 80012e0:	01400784 	movi	r5,30
 80012e4:	018012c4 	movi	r6,75
 80012e8:	01c0a284 	movi	r7,650
 80012ec:	80022ac0 	call	80022ac <Graphics_InitializeRectangleCentered>
 80012f0:	d0a6d915 	stw	r2,-25756(gp)
	Graphics_DrawRectangle(log_in_rect);
 80012f4:	d0a6d917 	ldw	r2,-25756(gp)
 80012f8:	1009883a 	mov	r4,r2
 80012fc:	8000a600 	call	8000a60 <Graphics_DrawRectangle>
}
 8001300:	e037883a 	mov	sp,fp
 8001304:	dfc00117 	ldw	ra,4(sp)
 8001308:	df000017 	ldw	fp,0(sp)
 800130c:	dec00204 	addi	sp,sp,8
 8001310:	f800283a 	ret

08001314 <Graphics_DrawPhoneNumberMenu>:

void Graphics_DrawPhoneNumberMenu(){
 8001314:	defff304 	addi	sp,sp,-52
 8001318:	dfc00c15 	stw	ra,48(sp)
 800131c:	df000b15 	stw	fp,44(sp)
 8001320:	df000b04 	addi	fp,sp,44
	Graphics_ClearScreen(BLACK);
 8001324:	0009883a 	mov	r4,zero
 8001328:	8000e940 	call	8000e94 <Graphics_ClearScreen>

	char promptLabel[] = "PLEASE ENTER YOUR PHONE NUMBER:";
 800132c:	00905174 	movhi	r2,16709
 8001330:	10931404 	addi	r2,r2,19536
 8001334:	e0bff815 	stw	r2,-32(fp)
 8001338:	00914834 	movhi	r2,17696
 800133c:	109154c4 	addi	r2,r2,17747
 8001340:	e0bff915 	stw	r2,-28(fp)
 8001344:	00949174 	movhi	r2,21061
 8001348:	10951384 	addi	r2,r2,21582
 800134c:	e0bffa15 	stw	r2,-24(fp)
 8001350:	009553f4 	movhi	r2,21839
 8001354:	10964804 	addi	r2,r2,22816
 8001358:	e0bffb15 	stw	r2,-20(fp)
 800135c:	00921434 	movhi	r2,18512
 8001360:	10881484 	addi	r2,r2,8274
 8001364:	e0bffc15 	stw	r2,-16(fp)
 8001368:	00881174 	movhi	r2,8261
 800136c:	109393c4 	addi	r2,r2,20047
 8001370:	e0bffd15 	stw	r2,-12(fp)
 8001374:	00909374 	movhi	r2,16973
 8001378:	10955384 	addi	r2,r2,21838
 800137c:	e0bffe15 	stw	r2,-8(fp)
 8001380:	00800eb4 	movhi	r2,58
 8001384:	10949144 	addi	r2,r2,21061
 8001388:	e0bfff15 	stw	r2,-4(fp)
	Graphics_InitializeHomeButton();
 800138c:	80019880 	call	8001988 <Graphics_InitializeHomeButton>
	Graphics_DrawHomeButton();
 8001390:	80019ec0 	call	80019ec <Graphics_DrawHomeButton>
	Graphics_DrawText(FIELDSTARTX + 15, FIELDSTARTY - 20, WHITE, BLACK, promptLabel, strlen(promptLabel),0);
 8001394:	e13ff804 	addi	r4,fp,-32
 8001398:	8006e040 	call	8006e04 <strlen>
 800139c:	e0fff804 	addi	r3,fp,-32
 80013a0:	d8c00015 	stw	r3,0(sp)
 80013a4:	d8800115 	stw	r2,4(sp)
 80013a8:	d8000215 	stw	zero,8(sp)
 80013ac:	01002944 	movi	r4,165
 80013b0:	014003c4 	movi	r5,15
 80013b4:	01800044 	movi	r6,1
 80013b8:	000f883a 	mov	r7,zero
 80013bc:	8000c1c0 	call	8000c1c <Graphics_DrawText>
	Graphics_DrawField(PHONENUMLENGTH, PHONEINDEXLEN);
 80013c0:	01000284 	movi	r4,10
 80013c4:	01400a44 	movi	r5,41
 80013c8:	80016d00 	call	80016d0 <Graphics_DrawField>
	Graphics_DrawNumPad();
 80013cc:	80019200 	call	8001920 <Graphics_DrawNumPad>
}
 80013d0:	e037883a 	mov	sp,fp
 80013d4:	dfc00117 	ldw	ra,4(sp)
 80013d8:	df000017 	ldw	fp,0(sp)
 80013dc:	dec00204 	addi	sp,sp,8
 80013e0:	f800283a 	ret

080013e4 <Graphics_DrawMasterCodeMenu>:

void Graphics_DrawMasterCodeMenu(){
 80013e4:	defff304 	addi	sp,sp,-52
 80013e8:	dfc00c15 	stw	ra,48(sp)
 80013ec:	df000b15 	stw	fp,44(sp)
 80013f0:	df000b04 	addi	fp,sp,44
	Graphics_ClearScreen(BLACK);
 80013f4:	0009883a 	mov	r4,zero
 80013f8:	8000e940 	call	8000e94 <Graphics_ClearScreen>

	char promptLabel[] = "PLEASE ENTER THE MASTER CODE:";
 80013fc:	00905174 	movhi	r2,16709
 8001400:	10931404 	addi	r2,r2,19536
 8001404:	e0bff815 	stw	r2,-32(fp)
 8001408:	00914834 	movhi	r2,17696
 800140c:	109154c4 	addi	r2,r2,17747
 8001410:	e0bff915 	stw	r2,-28(fp)
 8001414:	00949174 	movhi	r2,21061
 8001418:	10951384 	addi	r2,r2,21582
 800141c:	e0bffa15 	stw	r2,-24(fp)
 8001420:	00915234 	movhi	r2,17736
 8001424:	10950804 	addi	r2,r2,21536
 8001428:	e0bffb15 	stw	r2,-20(fp)
 800142c:	0094d074 	movhi	r2,21313
 8001430:	10934804 	addi	r2,r2,19744
 8001434:	e0bffc15 	stw	r2,-16(fp)
 8001438:	008814b4 	movhi	r2,8274
 800143c:	10915504 	addi	r2,r2,17748
 8001440:	e0bffd15 	stw	r2,-12(fp)
 8001444:	00915134 	movhi	r2,17732
 8001448:	1093d0c4 	addi	r2,r2,20291
 800144c:	e0bffe15 	stw	r2,-8(fp)
 8001450:	00800e84 	movi	r2,58
 8001454:	e0bfff0d 	sth	r2,-4(fp)
	Graphics_InitializeHomeButton();
 8001458:	80019880 	call	8001988 <Graphics_InitializeHomeButton>
	Graphics_DrawHomeButton();
 800145c:	80019ec0 	call	80019ec <Graphics_DrawHomeButton>
	Graphics_DrawText(FIELDSTARTX + 15, FIELDSTARTY - 20, WHITE, BLACK, promptLabel, strlen(promptLabel),0);
 8001460:	e13ff804 	addi	r4,fp,-32
 8001464:	8006e040 	call	8006e04 <strlen>
 8001468:	e0fff804 	addi	r3,fp,-32
 800146c:	d8c00015 	stw	r3,0(sp)
 8001470:	d8800115 	stw	r2,4(sp)
 8001474:	d8000215 	stw	zero,8(sp)
 8001478:	01002944 	movi	r4,165
 800147c:	014003c4 	movi	r5,15
 8001480:	01800044 	movi	r6,1
 8001484:	000f883a 	mov	r7,zero
 8001488:	8000c1c0 	call	8000c1c <Graphics_DrawText>
	Graphics_DrawField(MASTERCODELENGTH, MASTERINDEXLEN);
 800148c:	01000184 	movi	r4,6
 8001490:	01401284 	movi	r5,74
 8001494:	80016d00 	call	80016d0 <Graphics_DrawField>
	Graphics_DrawNumPad();
 8001498:	80019200 	call	8001920 <Graphics_DrawNumPad>
}
 800149c:	e037883a 	mov	sp,fp
 80014a0:	dfc00117 	ldw	ra,4(sp)
 80014a4:	df000017 	ldw	fp,0(sp)
 80014a8:	dec00204 	addi	sp,sp,8
 80014ac:	f800283a 	ret

080014b0 <Graphics_DrawLoadingScreen>:

void Graphics_DrawLoadingScreen(){
 80014b0:	deffff04 	addi	sp,sp,-4
 80014b4:	df000015 	stw	fp,0(sp)
 80014b8:	d839883a 	mov	fp,sp

}
 80014bc:	e037883a 	mov	sp,fp
 80014c0:	df000017 	ldw	fp,0(sp)
 80014c4:	dec00104 	addi	sp,sp,4
 80014c8:	f800283a 	ret

080014cc <Graphics_DrawUnlockScreen>:

/*****************************************************************************************
 *	Function to draw the unlock screen GUI.
 *
 ******************************************************************************************/
void Graphics_DrawUnlockScreen(){
 80014cc:	defff404 	addi	sp,sp,-48
 80014d0:	dfc00b15 	stw	ra,44(sp)
 80014d4:	df000a15 	stw	fp,40(sp)
 80014d8:	df000a04 	addi	fp,sp,40
	Graphics_ClearScreen(GREEN);
 80014dc:	01000304 	movi	r4,12
 80014e0:	8000e940 	call	8000e94 <Graphics_ClearScreen>
	char successLabel[] = "Successfully Unlocked!";
 80014e4:	0098d8f4 	movhi	r2,25443
 80014e8:	109d54c4 	addi	r2,r2,30035
 80014ec:	e0bffa15 	stw	r2,-24(fp)
 80014f0:	00999cf4 	movhi	r2,26227
 80014f4:	109cd944 	addi	r2,r2,29541
 80014f8:	e0bffb15 	stw	r2,-20(fp)
 80014fc:	009e5b34 	movhi	r2,31084
 8001500:	109b1d44 	addi	r2,r2,27765
 8001504:	e0bffc15 	stw	r2,-16(fp)
 8001508:	009b1bb4 	movhi	r2,27758
 800150c:	10954804 	addi	r2,r2,21792
 8001510:	e0bffd15 	stw	r2,-12(fp)
 8001514:	00995af4 	movhi	r2,25963
 8001518:	1098dbc4 	addi	r2,r2,25455
 800151c:	e0bffe15 	stw	r2,-8(fp)
 8001520:	00885904 	movi	r2,8548
 8001524:	e0bfff0d 	sth	r2,-4(fp)
 8001528:	e03fff85 	stb	zero,-2(fp)
	Graphics_DrawTextCentered(200, 0, 800, WHITE, BLACK, successLabel, strlen(successLabel), 0);
 800152c:	e13ffa04 	addi	r4,fp,-24
 8001530:	8006e040 	call	8006e04 <strlen>
 8001534:	d8000015 	stw	zero,0(sp)
 8001538:	e0fffa04 	addi	r3,fp,-24
 800153c:	d8c00115 	stw	r3,4(sp)
 8001540:	d8800215 	stw	r2,8(sp)
 8001544:	d8000315 	stw	zero,12(sp)
 8001548:	01003204 	movi	r4,200
 800154c:	000b883a 	mov	r5,zero
 8001550:	0180c804 	movi	r6,800
 8001554:	01c00044 	movi	r7,1
 8001558:	8000cc00 	call	8000cc0 <Graphics_DrawTextCentered>
	Graphics_DrawHomeButton();
 800155c:	80019ec0 	call	80019ec <Graphics_DrawHomeButton>
}
 8001560:	e037883a 	mov	sp,fp
 8001564:	dfc00117 	ldw	ra,4(sp)
 8001568:	df000017 	ldw	fp,0(sp)
 800156c:	dec00204 	addi	sp,sp,8
 8001570:	f800283a 	ret

08001574 <Graphics_DrawLockScreen>:

/*****************************************************************************************
 *	Function to draw the lock screen GUI.
 *
 ******************************************************************************************/
void Graphics_DrawLockScreen(){
 8001574:	defff604 	addi	sp,sp,-40
 8001578:	dfc00915 	stw	ra,36(sp)
 800157c:	df000815 	stw	fp,32(sp)
 8001580:	df000804 	addi	fp,sp,32
	Graphics_ClearScreen(RED);
 8001584:	01000084 	movi	r4,2
 8001588:	8000e940 	call	8000e94 <Graphics_ClearScreen>
	char failureLabel[] = "Incorrect Pin";
 800158c:	009bd8f4 	movhi	r2,28515
 8001590:	109b9244 	addi	r2,r2,28233
 8001594:	e0bffc15 	stw	r2,-16(fp)
 8001598:	0098d974 	movhi	r2,25445
 800159c:	109c9c84 	addi	r2,r2,29298
 80015a0:	e0bffd15 	stw	r2,-12(fp)
 80015a4:	009a5434 	movhi	r2,26960
 80015a8:	10881d04 	addi	r2,r2,8308
 80015ac:	e0bffe15 	stw	r2,-8(fp)
 80015b0:	00801b84 	movi	r2,110
 80015b4:	e0bfff0d 	sth	r2,-4(fp)
	Graphics_DrawTextCentered(200, 0, 800, WHITE, BLACK, failureLabel, strlen(failureLabel), 0);
 80015b8:	e13ffc04 	addi	r4,fp,-16
 80015bc:	8006e040 	call	8006e04 <strlen>
 80015c0:	d8000015 	stw	zero,0(sp)
 80015c4:	e0fffc04 	addi	r3,fp,-16
 80015c8:	d8c00115 	stw	r3,4(sp)
 80015cc:	d8800215 	stw	r2,8(sp)
 80015d0:	d8000315 	stw	zero,12(sp)
 80015d4:	01003204 	movi	r4,200
 80015d8:	000b883a 	mov	r5,zero
 80015dc:	0180c804 	movi	r6,800
 80015e0:	01c00044 	movi	r7,1
 80015e4:	8000cc00 	call	8000cc0 <Graphics_DrawTextCentered>
	Graphics_DrawHomeButton();
 80015e8:	80019ec0 	call	80019ec <Graphics_DrawHomeButton>
}
 80015ec:	e037883a 	mov	sp,fp
 80015f0:	dfc00117 	ldw	ra,4(sp)
 80015f4:	df000017 	ldw	fp,0(sp)
 80015f8:	dec00204 	addi	sp,sp,8
 80015fc:	f800283a 	ret

08001600 <Graphics_DrawMenu>:

/*****************************************************************************************
 *	Function to draw the main menu GUI.
 *
 ******************************************************************************************/
void Graphics_DrawMenu() {
 8001600:	defff304 	addi	sp,sp,-52
 8001604:	dfc00c15 	stw	ra,48(sp)
 8001608:	df000b15 	stw	fp,44(sp)
 800160c:	df000b04 	addi	fp,sp,44
	char menuLabel[] = "PLEASE ENTER THE ACCESS CODE:";
 8001610:	00905174 	movhi	r2,16709
 8001614:	10931404 	addi	r2,r2,19536
 8001618:	e0bff815 	stw	r2,-32(fp)
 800161c:	00914834 	movhi	r2,17696
 8001620:	109154c4 	addi	r2,r2,17747
 8001624:	e0bff915 	stw	r2,-28(fp)
 8001628:	00949174 	movhi	r2,21061
 800162c:	10951384 	addi	r2,r2,21582
 8001630:	e0bffa15 	stw	r2,-24(fp)
 8001634:	00915234 	movhi	r2,17736
 8001638:	10950804 	addi	r2,r2,21536
 800163c:	e0bffb15 	stw	r2,-20(fp)
 8001640:	0090d0f4 	movhi	r2,17219
 8001644:	10904804 	addi	r2,r2,16672
 8001648:	e0bffc15 	stw	r2,-16(fp)
 800164c:	008814f4 	movhi	r2,8275
 8001650:	1094d144 	addi	r2,r2,21317
 8001654:	e0bffd15 	stw	r2,-12(fp)
 8001658:	00915134 	movhi	r2,17732
 800165c:	1093d0c4 	addi	r2,r2,20291
 8001660:	e0bffe15 	stw	r2,-8(fp)
 8001664:	00800e84 	movi	r2,58
 8001668:	e0bfff0d 	sth	r2,-4(fp)
	graphics_field_cursor = 0;
 800166c:	d026da15 	stw	zero,-25752(gp)

	Graphics_ClearScreen(BLACK);
 8001670:	0009883a 	mov	r4,zero
 8001674:	8000e940 	call	8000e94 <Graphics_ClearScreen>

	Graphics_InitializeHomeButton();
 8001678:	80019880 	call	8001988 <Graphics_InitializeHomeButton>
	Graphics_DrawHomeButton();
 800167c:	80019ec0 	call	80019ec <Graphics_DrawHomeButton>
	Graphics_DrawText(FIELDSTARTX + 15, FIELDSTARTY - 20, WHITE, BLACK, menuLabel, strlen(menuLabel),0);
 8001680:	e13ff804 	addi	r4,fp,-32
 8001684:	8006e040 	call	8006e04 <strlen>
 8001688:	e0fff804 	addi	r3,fp,-32
 800168c:	d8c00015 	stw	r3,0(sp)
 8001690:	d8800115 	stw	r2,4(sp)
 8001694:	d8000215 	stw	zero,8(sp)
 8001698:	01002944 	movi	r4,165
 800169c:	014003c4 	movi	r5,15
 80016a0:	01800044 	movi	r6,1
 80016a4:	000f883a 	mov	r7,zero
 80016a8:	8000c1c0 	call	8000c1c <Graphics_DrawText>
	Graphics_DrawField(CODELENGTH, CODEINDEXLEN);
 80016ac:	01000104 	movi	r4,4
 80016b0:	01401cc4 	movi	r5,115
 80016b4:	80016d00 	call	80016d0 <Graphics_DrawField>

	Graphics_DrawNumPad();
 80016b8:	80019200 	call	8001920 <Graphics_DrawNumPad>
}
 80016bc:	e037883a 	mov	sp,fp
 80016c0:	dfc00117 	ldw	ra,4(sp)
 80016c4:	df000017 	ldw	fp,0(sp)
 80016c8:	dec00204 	addi	sp,sp,8
 80016cc:	f800283a 	ret

080016d0 <Graphics_DrawField>:

/*****************************************************************************************
 *	Function to draw the white field in our number pad GUI.
 *
 ******************************************************************************************/
void Graphics_DrawField(int codeLength, int indexLength) {
 80016d0:	defff904 	addi	sp,sp,-28
 80016d4:	dfc00615 	stw	ra,24(sp)
 80016d8:	df000515 	stw	fp,20(sp)
 80016dc:	df000504 	addi	fp,sp,20
 80016e0:	e13ffe15 	stw	r4,-8(fp)
 80016e4:	e17fff15 	stw	r5,-4(fp)
	int i;
	int xStart = FIELDSTARTX + FIELDSPACE;
 80016e8:	00802784 	movi	r2,158
 80016ec:	e0bffd15 	stw	r2,-12(fp)

	Graphics_PointsDrawRectangle(FIELDSTARTX, FIELDSTARTY, FIELDENDX, FIELDENDY, WHITE);
 80016f0:	00800044 	movi	r2,1
 80016f4:	d8800015 	stw	r2,0(sp)
 80016f8:	01002584 	movi	r4,150
 80016fc:	014008c4 	movi	r5,35
 8001700:	0180a284 	movi	r6,650
 8001704:	01c01904 	movi	r7,100
 8001708:	8000bb80 	call	8000bb8 <Graphics_PointsDrawRectangle>

	for (i = 0; i < codeLength; i++) {
 800170c:	e03ffc15 	stw	zero,-16(fp)
 8001710:	00001006 	br	8001754 <Graphics_DrawField+0x84>
		Graphics_DrawHorizontalLine(xStart, xStart + indexLength, FIELDENDY - 10, BLACK);
 8001714:	e0fffd17 	ldw	r3,-12(fp)
 8001718:	e0bfff17 	ldw	r2,-4(fp)
 800171c:	1885883a 	add	r2,r3,r2
 8001720:	e13ffd17 	ldw	r4,-12(fp)
 8001724:	100b883a 	mov	r5,r2
 8001728:	01801684 	movi	r6,90
 800172c:	000f883a 	mov	r7,zero
 8001730:	80006cc0 	call	80006cc <Graphics_DrawHorizontalLine>
		xStart = xStart + indexLength + FIELDSPACE;
 8001734:	e0fffd17 	ldw	r3,-12(fp)
 8001738:	e0bfff17 	ldw	r2,-4(fp)
 800173c:	1885883a 	add	r2,r3,r2
 8001740:	10800204 	addi	r2,r2,8
 8001744:	e0bffd15 	stw	r2,-12(fp)
	int i;
	int xStart = FIELDSTARTX + FIELDSPACE;

	Graphics_PointsDrawRectangle(FIELDSTARTX, FIELDSTARTY, FIELDENDX, FIELDENDY, WHITE);

	for (i = 0; i < codeLength; i++) {
 8001748:	e0bffc17 	ldw	r2,-16(fp)
 800174c:	10800044 	addi	r2,r2,1
 8001750:	e0bffc15 	stw	r2,-16(fp)
 8001754:	e0fffc17 	ldw	r3,-16(fp)
 8001758:	e0bffe17 	ldw	r2,-8(fp)
 800175c:	18bfed16 	blt	r3,r2,8001714 <__alt_data_end+0xfc001714>
		Graphics_DrawHorizontalLine(xStart, xStart + indexLength, FIELDENDY - 10, BLACK);
		xStart = xStart + indexLength + FIELDSPACE;
	}
}
 8001760:	e037883a 	mov	sp,fp
 8001764:	dfc00117 	ldw	ra,4(sp)
 8001768:	df000017 	ldw	fp,0(sp)
 800176c:	dec00204 	addi	sp,sp,8
 8001770:	f800283a 	ret

08001774 <Graphics_InitializeNumberPad>:

void Graphics_InitializeNumberPad(){
 8001774:	defff004 	addi	sp,sp,-64
 8001778:	dfc00f15 	stw	ra,60(sp)
 800177c:	df000e15 	stw	fp,56(sp)
 8001780:	df000e04 	addi	fp,sp,56
	int i, j;
	int k = 0;
 8001784:	e03ff715 	stw	zero,-36(fp)
	int xPosStart, xPosEnd = 0;
 8001788:	e03ff915 	stw	zero,-28(fp)
	int yPosStart = 125;
 800178c:	00801f44 	movi	r2,125
 8001790:	e0bffa15 	stw	r2,-24(fp)
	int yPosEnd = yPosStart + SQUAREHEIGHT;
 8001794:	e0bffa17 	ldw	r2,-24(fp)
 8001798:	10800f04 	addi	r2,r2,60
 800179c:	e0bffb15 	stw	r2,-20(fp)
	char *text;

	for (j = 0; j < 4; j++) {
 80017a0:	e03ff615 	stw	zero,-40(fp)
 80017a4:	00005606 	br	8001900 <Graphics_InitializeNumberPad+0x18c>
		xPosStart = (800 - ((SQUAREWIDTH * 3) + (SPACESIZE * 2))) / 2;
 80017a8:	00802584 	movi	r2,150
 80017ac:	e0bff815 	stw	r2,-32(fp)
		xPosEnd = xPosStart + SQUAREWIDTH;
 80017b0:	e0bff817 	ldw	r2,-32(fp)
 80017b4:	10802584 	addi	r2,r2,150
 80017b8:	e0bff915 	stw	r2,-28(fp)
		for (i = 0; i < 3; i++) {
 80017bc:	e03ff515 	stw	zero,-44(fp)
 80017c0:	00004306 	br	80018d0 <Graphics_InitializeNumberPad+0x15c>
			int colour = GRAY;
 80017c4:	00800244 	movi	r2,9
 80017c8:	e0bffd15 	stw	r2,-12(fp)
			if(j == 3 && i == 0){
 80017cc:	e0bff617 	ldw	r2,-40(fp)
 80017d0:	108000d8 	cmpnei	r2,r2,3
 80017d4:	1000081e 	bne	r2,zero,80017f8 <Graphics_InitializeNumberPad+0x84>
 80017d8:	e0bff517 	ldw	r2,-44(fp)
 80017dc:	1000061e 	bne	r2,zero,80017f8 <Graphics_InitializeNumberPad+0x84>
				colour = GREEN;
 80017e0:	00800304 	movi	r2,12
 80017e4:	e0bffd15 	stw	r2,-12(fp)
				text = "SUBMIT";
 80017e8:	008200b4 	movhi	r2,2050
 80017ec:	10893a04 	addi	r2,r2,9448
 80017f0:	e0bffc15 	stw	r2,-16(fp)
 80017f4:	00001706 	br	8001854 <Graphics_InitializeNumberPad+0xe0>
			}
			else if (j == 3 && i == 2){
 80017f8:	e0bff617 	ldw	r2,-40(fp)
 80017fc:	108000d8 	cmpnei	r2,r2,3
 8001800:	1000091e 	bne	r2,zero,8001828 <Graphics_InitializeNumberPad+0xb4>
 8001804:	e0bff517 	ldw	r2,-44(fp)
 8001808:	10800098 	cmpnei	r2,r2,2
 800180c:	1000061e 	bne	r2,zero,8001828 <Graphics_InitializeNumberPad+0xb4>
				colour = RED;
 8001810:	00800084 	movi	r2,2
 8001814:	e0bffd15 	stw	r2,-12(fp)
				text = "CLEAR";
 8001818:	008200b4 	movhi	r2,2050
 800181c:	10893c04 	addi	r2,r2,9456
 8001820:	e0bffc15 	stw	r2,-16(fp)
 8001824:	00000b06 	br	8001854 <Graphics_InitializeNumberPad+0xe0>
			}
			else {
				char num[1];
				sprintf(num, "%d", Graphics_ButtonNumToNum(k));
 8001828:	e13ff717 	ldw	r4,-36(fp)
 800182c:	8001f4c0 	call	8001f4c <Graphics_ButtonNumToNum>
 8001830:	1007883a 	mov	r3,r2
 8001834:	e0bfff04 	addi	r2,fp,-4
 8001838:	1009883a 	mov	r4,r2
 800183c:	014200b4 	movhi	r5,2050
 8001840:	29493e04 	addi	r5,r5,9464
 8001844:	180d883a 	mov	r6,r3
 8001848:	8006b280 	call	8006b28 <sprintf>
				text = num;
 800184c:	e0bfff04 	addi	r2,fp,-4
 8001850:	e0bffc15 	stw	r2,-16(fp)
			}

			Rectangle_t* rect = Graphics_Init_Rectangle(xPosStart, yPosStart, xPosEnd, yPosEnd, colour, REGULAR_BUTTON, text);
 8001854:	e0bffd17 	ldw	r2,-12(fp)
 8001858:	d8800015 	stw	r2,0(sp)
 800185c:	d8000115 	stw	zero,4(sp)
 8001860:	e0bffc17 	ldw	r2,-16(fp)
 8001864:	d8800215 	stw	r2,8(sp)
 8001868:	e13ff817 	ldw	r4,-32(fp)
 800186c:	e17ffa17 	ldw	r5,-24(fp)
 8001870:	e1bff917 	ldw	r6,-28(fp)
 8001874:	e1fffb17 	ldw	r7,-20(fp)
 8001878:	8000d9c0 	call	8000d9c <Graphics_Init_Rectangle>
 800187c:	e0bffe15 	stw	r2,-8(fp)
			numpad[k] = rect;
 8001880:	008200b4 	movhi	r2,2050
 8001884:	10982a04 	addi	r2,r2,24744
 8001888:	e0fff717 	ldw	r3,-36(fp)
 800188c:	18c7883a 	add	r3,r3,r3
 8001890:	18c7883a 	add	r3,r3,r3
 8001894:	10c5883a 	add	r2,r2,r3
 8001898:	e0fffe17 	ldw	r3,-8(fp)
 800189c:	10c00015 	stw	r3,0(r2)
			//Graphics_DrawRectangle(rect);
			xPosStart = xPosEnd + SPACESIZE;
 80018a0:	e0bff917 	ldw	r2,-28(fp)
 80018a4:	10800644 	addi	r2,r2,25
 80018a8:	e0bff815 	stw	r2,-32(fp)
			xPosEnd = xPosStart + SQUAREWIDTH;
 80018ac:	e0bff817 	ldw	r2,-32(fp)
 80018b0:	10802584 	addi	r2,r2,150
 80018b4:	e0bff915 	stw	r2,-28(fp)

			k++;
 80018b8:	e0bff717 	ldw	r2,-36(fp)
 80018bc:	10800044 	addi	r2,r2,1
 80018c0:	e0bff715 	stw	r2,-36(fp)
	char *text;

	for (j = 0; j < 4; j++) {
		xPosStart = (800 - ((SQUAREWIDTH * 3) + (SPACESIZE * 2))) / 2;
		xPosEnd = xPosStart + SQUAREWIDTH;
		for (i = 0; i < 3; i++) {
 80018c4:	e0bff517 	ldw	r2,-44(fp)
 80018c8:	10800044 	addi	r2,r2,1
 80018cc:	e0bff515 	stw	r2,-44(fp)
 80018d0:	e0bff517 	ldw	r2,-44(fp)
 80018d4:	108000d0 	cmplti	r2,r2,3
 80018d8:	103fba1e 	bne	r2,zero,80017c4 <__alt_data_end+0xfc0017c4>
			xPosStart = xPosEnd + SPACESIZE;
			xPosEnd = xPosStart + SQUAREWIDTH;

			k++;
		}
		yPosStart = yPosEnd + SPACESIZE;
 80018dc:	e0bffb17 	ldw	r2,-20(fp)
 80018e0:	10800644 	addi	r2,r2,25
 80018e4:	e0bffa15 	stw	r2,-24(fp)
		yPosEnd = yPosStart + SQUAREHEIGHT;
 80018e8:	e0bffa17 	ldw	r2,-24(fp)
 80018ec:	10800f04 	addi	r2,r2,60
 80018f0:	e0bffb15 	stw	r2,-20(fp)
	int xPosStart, xPosEnd = 0;
	int yPosStart = 125;
	int yPosEnd = yPosStart + SQUAREHEIGHT;
	char *text;

	for (j = 0; j < 4; j++) {
 80018f4:	e0bff617 	ldw	r2,-40(fp)
 80018f8:	10800044 	addi	r2,r2,1
 80018fc:	e0bff615 	stw	r2,-40(fp)
 8001900:	e0bff617 	ldw	r2,-40(fp)
 8001904:	10800110 	cmplti	r2,r2,4
 8001908:	103fa71e 	bne	r2,zero,80017a8 <__alt_data_end+0xfc0017a8>
			k++;
		}
		yPosStart = yPosEnd + SPACESIZE;
		yPosEnd = yPosStart + SQUAREHEIGHT;
	}
}
 800190c:	e037883a 	mov	sp,fp
 8001910:	dfc00117 	ldw	ra,4(sp)
 8001914:	df000017 	ldw	fp,0(sp)
 8001918:	dec00204 	addi	sp,sp,8
 800191c:	f800283a 	ret

08001920 <Graphics_DrawNumPad>:

void Graphics_DrawNumPad(){
 8001920:	defffd04 	addi	sp,sp,-12
 8001924:	dfc00215 	stw	ra,8(sp)
 8001928:	df000115 	stw	fp,4(sp)
 800192c:	df000104 	addi	fp,sp,4
	int i;
	for (i = 0; i < NUMPAD_SIZE; i++){
 8001930:	e03fff15 	stw	zero,-4(fp)
 8001934:	00000c06 	br	8001968 <Graphics_DrawNumPad+0x48>
		Graphics_DrawRectangle(numpad[i]);
 8001938:	008200b4 	movhi	r2,2050
 800193c:	10982a04 	addi	r2,r2,24744
 8001940:	e0ffff17 	ldw	r3,-4(fp)
 8001944:	18c7883a 	add	r3,r3,r3
 8001948:	18c7883a 	add	r3,r3,r3
 800194c:	10c5883a 	add	r2,r2,r3
 8001950:	10800017 	ldw	r2,0(r2)
 8001954:	1009883a 	mov	r4,r2
 8001958:	8000a600 	call	8000a60 <Graphics_DrawRectangle>
	}
}

void Graphics_DrawNumPad(){
	int i;
	for (i = 0; i < NUMPAD_SIZE; i++){
 800195c:	e0bfff17 	ldw	r2,-4(fp)
 8001960:	10800044 	addi	r2,r2,1
 8001964:	e0bfff15 	stw	r2,-4(fp)
 8001968:	e0bfff17 	ldw	r2,-4(fp)
 800196c:	10800310 	cmplti	r2,r2,12
 8001970:	103ff11e 	bne	r2,zero,8001938 <__alt_data_end+0xfc001938>
		Graphics_DrawRectangle(numpad[i]);
	}
}
 8001974:	e037883a 	mov	sp,fp
 8001978:	dfc00117 	ldw	ra,4(sp)
 800197c:	df000017 	ldw	fp,0(sp)
 8001980:	dec00204 	addi	sp,sp,8
 8001984:	f800283a 	ret

08001988 <Graphics_InitializeHomeButton>:

void Graphics_InitializeHomeButton(){
 8001988:	defff904 	addi	sp,sp,-28
 800198c:	dfc00615 	stw	ra,24(sp)
 8001990:	df000515 	stw	fp,20(sp)
 8001994:	df000504 	addi	fp,sp,20
	char homeButtonLabel[] = "HOME";
 8001998:	00915374 	movhi	r2,17741
 800199c:	1093d204 	addi	r2,r2,20296
 80019a0:	e0bffe15 	stw	r2,-8(fp)
 80019a4:	e03fff05 	stb	zero,-4(fp)
	home_button_rect = Graphics_Init_Rectangle(25, 15, 140, 65, BLUE, HOME_BUTTON, homeButtonLabel);
 80019a8:	00800104 	movi	r2,4
 80019ac:	d8800015 	stw	r2,0(sp)
 80019b0:	00800044 	movi	r2,1
 80019b4:	d8800115 	stw	r2,4(sp)
 80019b8:	e0bffe04 	addi	r2,fp,-8
 80019bc:	d8800215 	stw	r2,8(sp)
 80019c0:	01000644 	movi	r4,25
 80019c4:	014003c4 	movi	r5,15
 80019c8:	01802304 	movi	r6,140
 80019cc:	01c01044 	movi	r7,65
 80019d0:	8000d9c0 	call	8000d9c <Graphics_Init_Rectangle>
 80019d4:	d0a6d615 	stw	r2,-25768(gp)
}
 80019d8:	e037883a 	mov	sp,fp
 80019dc:	dfc00117 	ldw	ra,4(sp)
 80019e0:	df000017 	ldw	fp,0(sp)
 80019e4:	dec00204 	addi	sp,sp,8
 80019e8:	f800283a 	ret

080019ec <Graphics_DrawHomeButton>:

void Graphics_DrawHomeButton() {
 80019ec:	defffe04 	addi	sp,sp,-8
 80019f0:	dfc00115 	stw	ra,4(sp)
 80019f4:	df000015 	stw	fp,0(sp)
 80019f8:	d839883a 	mov	fp,sp
	Graphics_DrawRectangle(home_button_rect);
 80019fc:	d0a6d617 	ldw	r2,-25768(gp)
 8001a00:	1009883a 	mov	r4,r2
 8001a04:	8000a600 	call	8000a60 <Graphics_DrawRectangle>
}
 8001a08:	e037883a 	mov	sp,fp
 8001a0c:	dfc00117 	ldw	ra,4(sp)
 8001a10:	df000017 	ldw	fp,0(sp)
 8001a14:	dec00204 	addi	sp,sp,8
 8001a18:	f800283a 	ret

08001a1c <Graphics_DrawHomeIcon>:

void Graphics_DrawHomeIcon(int xStart, int yStart){
 8001a1c:	defff504 	addi	sp,sp,-44
 8001a20:	dfc00a15 	stw	ra,40(sp)
 8001a24:	df000915 	stw	fp,36(sp)
 8001a28:	dc400815 	stw	r17,32(sp)
 8001a2c:	dc000715 	stw	r16,28(sp)
 8001a30:	df000904 	addi	fp,sp,36
 8001a34:	e13ffc15 	stw	r4,-16(fp)
 8001a38:	e17ffd15 	stw	r5,-12(fp)
	char homeButtonLabel[] = "HOME";
 8001a3c:	00915374 	movhi	r2,17741
 8001a40:	1093d204 	addi	r2,r2,20296
 8001a44:	e0bffa15 	stw	r2,-24(fp)
 8001a48:	e03ffb05 	stb	zero,-20(fp)
	Graphics_DrawStraightLine(xStart, yStart, xStart + 20, yStart + 20,WHITE);
 8001a4c:	e0bffc17 	ldw	r2,-16(fp)
 8001a50:	11800504 	addi	r6,r2,20
 8001a54:	e0bffd17 	ldw	r2,-12(fp)
 8001a58:	10c00504 	addi	r3,r2,20
 8001a5c:	00800044 	movi	r2,1
 8001a60:	d8800015 	stw	r2,0(sp)
 8001a64:	e13ffc17 	ldw	r4,-16(fp)
 8001a68:	e17ffd17 	ldw	r5,-12(fp)
 8001a6c:	180f883a 	mov	r7,r3
 8001a70:	80008540 	call	8000854 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(xStart, yStart, xStart - 20, yStart + 20,WHITE);
 8001a74:	e0bffc17 	ldw	r2,-16(fp)
 8001a78:	11bffb04 	addi	r6,r2,-20
 8001a7c:	e0bffd17 	ldw	r2,-12(fp)
 8001a80:	10c00504 	addi	r3,r2,20
 8001a84:	00800044 	movi	r2,1
 8001a88:	d8800015 	stw	r2,0(sp)
 8001a8c:	e13ffc17 	ldw	r4,-16(fp)
 8001a90:	e17ffd17 	ldw	r5,-12(fp)
 8001a94:	180f883a 	mov	r7,r3
 8001a98:	80008540 	call	8000854 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(xStart - 20, yStart + 20, xStart + 20, yStart + 20,WHITE);
 8001a9c:	e0bffc17 	ldw	r2,-16(fp)
 8001aa0:	113ffb04 	addi	r4,r2,-20
 8001aa4:	e0bffd17 	ldw	r2,-12(fp)
 8001aa8:	11400504 	addi	r5,r2,20
 8001aac:	e0bffc17 	ldw	r2,-16(fp)
 8001ab0:	11800504 	addi	r6,r2,20
 8001ab4:	e0bffd17 	ldw	r2,-12(fp)
 8001ab8:	10c00504 	addi	r3,r2,20
 8001abc:	00800044 	movi	r2,1
 8001ac0:	d8800015 	stw	r2,0(sp)
 8001ac4:	180f883a 	mov	r7,r3
 8001ac8:	80008540 	call	8000854 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(xStart - 10, yStart + 20, xStart - 10, yStart + 40,WHITE);
 8001acc:	e0bffc17 	ldw	r2,-16(fp)
 8001ad0:	113ffd84 	addi	r4,r2,-10
 8001ad4:	e0bffd17 	ldw	r2,-12(fp)
 8001ad8:	11400504 	addi	r5,r2,20
 8001adc:	e0bffc17 	ldw	r2,-16(fp)
 8001ae0:	11bffd84 	addi	r6,r2,-10
 8001ae4:	e0bffd17 	ldw	r2,-12(fp)
 8001ae8:	10c00a04 	addi	r3,r2,40
 8001aec:	00800044 	movi	r2,1
 8001af0:	d8800015 	stw	r2,0(sp)
 8001af4:	180f883a 	mov	r7,r3
 8001af8:	80008540 	call	8000854 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(xStart + 10, yStart + 20, xStart + 10, yStart + 40,WHITE);
 8001afc:	e0bffc17 	ldw	r2,-16(fp)
 8001b00:	11000284 	addi	r4,r2,10
 8001b04:	e0bffd17 	ldw	r2,-12(fp)
 8001b08:	11400504 	addi	r5,r2,20
 8001b0c:	e0bffc17 	ldw	r2,-16(fp)
 8001b10:	11800284 	addi	r6,r2,10
 8001b14:	e0bffd17 	ldw	r2,-12(fp)
 8001b18:	10c00a04 	addi	r3,r2,40
 8001b1c:	00800044 	movi	r2,1
 8001b20:	d8800015 	stw	r2,0(sp)
 8001b24:	180f883a 	mov	r7,r3
 8001b28:	80008540 	call	8000854 <Graphics_DrawStraightLine>
	Graphics_DrawStraightLine(xStart - 10, yStart + 40, xStart + 10, yStart + 40,WHITE);
 8001b2c:	e0bffc17 	ldw	r2,-16(fp)
 8001b30:	113ffd84 	addi	r4,r2,-10
 8001b34:	e0bffd17 	ldw	r2,-12(fp)
 8001b38:	11400a04 	addi	r5,r2,40
 8001b3c:	e0bffc17 	ldw	r2,-16(fp)
 8001b40:	11800284 	addi	r6,r2,10
 8001b44:	e0bffd17 	ldw	r2,-12(fp)
 8001b48:	10c00a04 	addi	r3,r2,40
 8001b4c:	00800044 	movi	r2,1
 8001b50:	d8800015 	stw	r2,0(sp)
 8001b54:	180f883a 	mov	r7,r3
 8001b58:	80008540 	call	8000854 <Graphics_DrawStraightLine>
	Graphics_DrawText(xStart + 30, yStart + 20, WHITE, BLACK, "HOME",strlen(homeButtonLabel),0);
 8001b5c:	e0bffc17 	ldw	r2,-16(fp)
 8001b60:	14400784 	addi	r17,r2,30
 8001b64:	e0bffd17 	ldw	r2,-12(fp)
 8001b68:	14000504 	addi	r16,r2,20
 8001b6c:	e13ffa04 	addi	r4,fp,-24
 8001b70:	8006e040 	call	8006e04 <strlen>
 8001b74:	1007883a 	mov	r3,r2
 8001b78:	008200b4 	movhi	r2,2050
 8001b7c:	10893f04 	addi	r2,r2,9468
 8001b80:	d8800015 	stw	r2,0(sp)
 8001b84:	d8c00115 	stw	r3,4(sp)
 8001b88:	d8000215 	stw	zero,8(sp)
 8001b8c:	8809883a 	mov	r4,r17
 8001b90:	800b883a 	mov	r5,r16
 8001b94:	01800044 	movi	r6,1
 8001b98:	000f883a 	mov	r7,zero
 8001b9c:	8000c1c0 	call	8000c1c <Graphics_DrawText>
}
 8001ba0:	e6fffe04 	addi	sp,fp,-8
 8001ba4:	dfc00317 	ldw	ra,12(sp)
 8001ba8:	df000217 	ldw	fp,8(sp)
 8001bac:	dc400117 	ldw	r17,4(sp)
 8001bb0:	dc000017 	ldw	r16,0(sp)
 8001bb4:	dec00404 	addi	sp,sp,16
 8001bb8:	f800283a 	ret

08001bbc <Graphics_DrawSquare>:

/*****************************************************************************************
 *	Function to draw a rectangle in our number pad GUI.
 *
 ******************************************************************************************/
void Graphics_DrawSquare(int index, int colour, int codeIndexLength) {
 8001bbc:	defffa04 	addi	sp,sp,-24
 8001bc0:	dfc00515 	stw	ra,20(sp)
 8001bc4:	df000415 	stw	fp,16(sp)
 8001bc8:	df000404 	addi	fp,sp,16
 8001bcc:	e13ffd15 	stw	r4,-12(fp)
 8001bd0:	e17ffe15 	stw	r5,-8(fp)
 8001bd4:	e1bfff15 	stw	r6,-4(fp)
	int lineStart = FIELDSTARTX + FIELDSPACE;
 8001bd8:	00802784 	movi	r2,158
 8001bdc:	e0bffc15 	stw	r2,-16(fp)
	while (index > 0){
 8001be0:	00000806 	br	8001c04 <Graphics_DrawSquare+0x48>
		lineStart = lineStart + codeIndexLength + FIELDSPACE;
 8001be4:	e0fffc17 	ldw	r3,-16(fp)
 8001be8:	e0bfff17 	ldw	r2,-4(fp)
 8001bec:	1885883a 	add	r2,r3,r2
 8001bf0:	10800204 	addi	r2,r2,8
 8001bf4:	e0bffc15 	stw	r2,-16(fp)
		index--;
 8001bf8:	e0bffd17 	ldw	r2,-12(fp)
 8001bfc:	10bfffc4 	addi	r2,r2,-1
 8001c00:	e0bffd15 	stw	r2,-12(fp)
 *	Function to draw a rectangle in our number pad GUI.
 *
 ******************************************************************************************/
void Graphics_DrawSquare(int index, int colour, int codeIndexLength) {
	int lineStart = FIELDSTARTX + FIELDSPACE;
	while (index > 0){
 8001c04:	e0bffd17 	ldw	r2,-12(fp)
 8001c08:	00bff616 	blt	zero,r2,8001be4 <__alt_data_end+0xfc001be4>
		lineStart = lineStart + codeIndexLength + FIELDSPACE;
		index--;
	}

	Graphics_DrawCircle(lineStart + (codeIndexLength / 2), FIELDSTARTY + 30, 15, colour);
 8001c0c:	e0bfff17 	ldw	r2,-4(fp)
 8001c10:	1006d7fa 	srli	r3,r2,31
 8001c14:	1885883a 	add	r2,r3,r2
 8001c18:	1005d07a 	srai	r2,r2,1
 8001c1c:	1007883a 	mov	r3,r2
 8001c20:	e0bffc17 	ldw	r2,-16(fp)
 8001c24:	1885883a 	add	r2,r3,r2
 8001c28:	1009883a 	mov	r4,r2
 8001c2c:	01401044 	movi	r5,65
 8001c30:	018003c4 	movi	r6,15
 8001c34:	e1fffe17 	ldw	r7,-8(fp)
 8001c38:	80008f40 	call	80008f4 <Graphics_DrawCircle>
	//Graphics_PointsDrawRectangle(lineStart + 45, FIELDSTARTY + 15, lineStart + INDEXSIZE - 45, FIELDSTARTY + 45, colour);
}
 8001c3c:	e037883a 	mov	sp,fp
 8001c40:	dfc00117 	ldw	ra,4(sp)
 8001c44:	df000017 	ldw	fp,0(sp)
 8001c48:	dec00204 	addi	sp,sp,8
 8001c4c:	f800283a 	ret

08001c50 <Graphics_DrawUserEnteredDigit>:
//	for (i = 0; i < CODELENGTH; i++){
//		Graphics_DrawUserEnteredDigit(i, User_Input[i], BLACK);
//	}
//}

void Graphics_DrawUserEnteredDigit(int index, int digitVal, int colour, int codeIndexLength){
 8001c50:	defff404 	addi	sp,sp,-48
 8001c54:	dfc00b15 	stw	ra,44(sp)
 8001c58:	df000a15 	stw	fp,40(sp)
 8001c5c:	df000a04 	addi	fp,sp,40
 8001c60:	e13ffc15 	stw	r4,-16(fp)
 8001c64:	e17ffd15 	stw	r5,-12(fp)
 8001c68:	e1bffe15 	stw	r6,-8(fp)
 8001c6c:	e1ffff15 	stw	r7,-4(fp)
	int lineStart = FIELDSTARTX + FIELDSPACE;
 8001c70:	00802784 	movi	r2,158
 8001c74:	e0bffa15 	stw	r2,-24(fp)
	while (index > 0){
 8001c78:	00000806 	br	8001c9c <Graphics_DrawUserEnteredDigit+0x4c>
		lineStart = lineStart + codeIndexLength + FIELDSPACE;
 8001c7c:	e0fffa17 	ldw	r3,-24(fp)
 8001c80:	e0bfff17 	ldw	r2,-4(fp)
 8001c84:	1885883a 	add	r2,r3,r2
 8001c88:	10800204 	addi	r2,r2,8
 8001c8c:	e0bffa15 	stw	r2,-24(fp)
		index--;
 8001c90:	e0bffc17 	ldw	r2,-16(fp)
 8001c94:	10bfffc4 	addi	r2,r2,-1
 8001c98:	e0bffc15 	stw	r2,-16(fp)
//	}
//}

void Graphics_DrawUserEnteredDigit(int index, int digitVal, int colour, int codeIndexLength){
	int lineStart = FIELDSTARTX + FIELDSPACE;
	while (index > 0){
 8001c9c:	e0bffc17 	ldw	r2,-16(fp)
 8001ca0:	00bff616 	blt	zero,r2,8001c7c <__alt_data_end+0xfc001c7c>
		lineStart = lineStart + codeIndexLength + FIELDSPACE;
		index--;
	}

	char *digit;
	sprintf(digit, "%d", digitVal);
 8001ca4:	e13ffb17 	ldw	r4,-20(fp)
 8001ca8:	014200b4 	movhi	r5,2050
 8001cac:	29493e04 	addi	r5,r5,9464
 8001cb0:	e1bffd17 	ldw	r6,-12(fp)
 8001cb4:	8006b280 	call	8006b28 <sprintf>

	Graphics_DrawTextCentered(FIELDSTARTY + 30, lineStart, lineStart + codeIndexLength, BLACK, WHITE, digit, 1,0 );
 8001cb8:	e0fffa17 	ldw	r3,-24(fp)
 8001cbc:	e0bfff17 	ldw	r2,-4(fp)
 8001cc0:	1887883a 	add	r3,r3,r2
 8001cc4:	00800044 	movi	r2,1
 8001cc8:	d8800015 	stw	r2,0(sp)
 8001ccc:	e0bffb17 	ldw	r2,-20(fp)
 8001cd0:	d8800115 	stw	r2,4(sp)
 8001cd4:	00800044 	movi	r2,1
 8001cd8:	d8800215 	stw	r2,8(sp)
 8001cdc:	d8000315 	stw	zero,12(sp)
 8001ce0:	01001044 	movi	r4,65
 8001ce4:	e17ffa17 	ldw	r5,-24(fp)
 8001ce8:	180d883a 	mov	r6,r3
 8001cec:	000f883a 	mov	r7,zero
 8001cf0:	8000cc00 	call	8000cc0 <Graphics_DrawTextCentered>
}
 8001cf4:	e037883a 	mov	sp,fp
 8001cf8:	dfc00117 	ldw	ra,4(sp)
 8001cfc:	df000017 	ldw	fp,0(sp)
 8001d00:	dec00204 	addi	sp,sp,8
 8001d04:	f800283a 	ret

08001d08 <Graphics_GetNumberPressed>:

/*
 * Get the index of the number pressed on the number pad, indices range from 0 to 11.
 */
int Graphics_GetNumberPressed(int point_x, int point_y, int codeLength, int array[], int codeIndexLength) {
 8001d08:	defff704 	addi	sp,sp,-36
 8001d0c:	dfc00815 	stw	ra,32(sp)
 8001d10:	df000715 	stw	fp,28(sp)
 8001d14:	dc000615 	stw	r16,24(sp)
 8001d18:	df000704 	addi	fp,sp,28
 8001d1c:	e13ffb15 	stw	r4,-20(fp)
 8001d20:	e17ffc15 	stw	r5,-16(fp)
 8001d24:	e1bffd15 	stw	r6,-12(fp)
 8001d28:	e1fffe15 	stw	r7,-8(fp)
	int i;
	for(i = 0; i < NUMPAD_SIZE; i++){
 8001d2c:	e03ff915 	stw	zero,-28(fp)
 8001d30:	00007c06 	br	8001f24 <Graphics_GetNumberPressed+0x21c>
		if(Graphics_InRectangle(point_x, point_y, numpad[i])) {
 8001d34:	008200b4 	movhi	r2,2050
 8001d38:	10982a04 	addi	r2,r2,24744
 8001d3c:	e0fff917 	ldw	r3,-28(fp)
 8001d40:	18c7883a 	add	r3,r3,r3
 8001d44:	18c7883a 	add	r3,r3,r3
 8001d48:	10c5883a 	add	r2,r2,r3
 8001d4c:	10800017 	ldw	r2,0(r2)
 8001d50:	e13ffb17 	ldw	r4,-20(fp)
 8001d54:	e17ffc17 	ldw	r5,-16(fp)
 8001d58:	100d883a 	mov	r6,r2
 8001d5c:	8001f900 	call	8001f90 <Graphics_InRectangle>
 8001d60:	10006d26 	beq	r2,zero,8001f18 <Graphics_GetNumberPressed+0x210>

			// Change the colour temporarily to show press
			numpad[i]->colour = BLACK;
 8001d64:	008200b4 	movhi	r2,2050
 8001d68:	10982a04 	addi	r2,r2,24744
 8001d6c:	e0fff917 	ldw	r3,-28(fp)
 8001d70:	18c7883a 	add	r3,r3,r3
 8001d74:	18c7883a 	add	r3,r3,r3
 8001d78:	10c5883a 	add	r2,r2,r3
 8001d7c:	10800017 	ldw	r2,0(r2)
 8001d80:	10000615 	stw	zero,24(r2)
			Graphics_DrawRectangle(numpad[i]);
 8001d84:	008200b4 	movhi	r2,2050
 8001d88:	10982a04 	addi	r2,r2,24744
 8001d8c:	e0fff917 	ldw	r3,-28(fp)
 8001d90:	18c7883a 	add	r3,r3,r3
 8001d94:	18c7883a 	add	r3,r3,r3
 8001d98:	10c5883a 	add	r2,r2,r3
 8001d9c:	10800017 	ldw	r2,0(r2)
 8001da0:	1009883a 	mov	r4,r2
 8001da4:	8000a600 	call	8000a60 <Graphics_DrawRectangle>
			usleep(50000);
 8001da8:	0130d414 	movui	r4,50000
 8001dac:	8015b900 	call	8015b90 <usleep>

			if(i == NUMPAD_DELETE) {
 8001db0:	e0bff917 	ldw	r2,-28(fp)
 8001db4:	108002d8 	cmpnei	r2,r2,11
 8001db8:	10001f1e 	bne	r2,zero,8001e38 <Graphics_GetNumberPressed+0x130>
				numpad[i]->colour = RED;
 8001dbc:	008200b4 	movhi	r2,2050
 8001dc0:	10982a04 	addi	r2,r2,24744
 8001dc4:	e0fff917 	ldw	r3,-28(fp)
 8001dc8:	18c7883a 	add	r3,r3,r3
 8001dcc:	18c7883a 	add	r3,r3,r3
 8001dd0:	10c5883a 	add	r2,r2,r3
 8001dd4:	10800017 	ldw	r2,0(r2)
 8001dd8:	00c00084 	movi	r3,2
 8001ddc:	10c00615 	stw	r3,24(r2)
				graphics_field_cursor = 0;
 8001de0:	d026da15 	stw	zero,-25752(gp)
				// Decrement since we've deleted a character
				int j;
				for(j = 0; j < codeLength; j++) {
 8001de4:	e03ffa15 	stw	zero,-24(fp)
 8001de8:	00000f06 	br	8001e28 <Graphics_GetNumberPressed+0x120>
					Graphics_DrawSquare(j,WHITE, codeIndexLength);
 8001dec:	e13ffa17 	ldw	r4,-24(fp)
 8001df0:	01400044 	movi	r5,1
 8001df4:	e1800217 	ldw	r6,8(fp)
 8001df8:	8001bbc0 	call	8001bbc <Graphics_DrawSquare>
					array[j] = -1;
 8001dfc:	e0bffa17 	ldw	r2,-24(fp)
 8001e00:	1085883a 	add	r2,r2,r2
 8001e04:	1085883a 	add	r2,r2,r2
 8001e08:	1007883a 	mov	r3,r2
 8001e0c:	e0bffe17 	ldw	r2,-8(fp)
 8001e10:	10c5883a 	add	r2,r2,r3
 8001e14:	00ffffc4 	movi	r3,-1
 8001e18:	10c00015 	stw	r3,0(r2)
			if(i == NUMPAD_DELETE) {
				numpad[i]->colour = RED;
				graphics_field_cursor = 0;
				// Decrement since we've deleted a character
				int j;
				for(j = 0; j < codeLength; j++) {
 8001e1c:	e0bffa17 	ldw	r2,-24(fp)
 8001e20:	10800044 	addi	r2,r2,1
 8001e24:	e0bffa15 	stw	r2,-24(fp)
 8001e28:	e0fffa17 	ldw	r3,-24(fp)
 8001e2c:	e0bffd17 	ldw	r2,-12(fp)
 8001e30:	18bfee16 	blt	r3,r2,8001dec <__alt_data_end+0xfc001dec>
 8001e34:	00002d06 	br	8001eec <Graphics_GetNumberPressed+0x1e4>
					Graphics_DrawSquare(j,WHITE, codeIndexLength);
					array[j] = -1;
				}
			} else if(i == NUMPAD_ENTER) {
 8001e38:	e0bff917 	ldw	r2,-28(fp)
 8001e3c:	10800258 	cmpnei	r2,r2,9
 8001e40:	10000a1e 	bne	r2,zero,8001e6c <Graphics_GetNumberPressed+0x164>
				numpad[i]->colour = GREEN;
 8001e44:	008200b4 	movhi	r2,2050
 8001e48:	10982a04 	addi	r2,r2,24744
 8001e4c:	e0fff917 	ldw	r3,-28(fp)
 8001e50:	18c7883a 	add	r3,r3,r3
 8001e54:	18c7883a 	add	r3,r3,r3
 8001e58:	10c5883a 	add	r2,r2,r3
 8001e5c:	10800017 	ldw	r2,0(r2)
 8001e60:	00c00304 	movi	r3,12
 8001e64:	10c00615 	stw	r3,24(r2)
 8001e68:	00002006 	br	8001eec <Graphics_GetNumberPressed+0x1e4>
			} else {
				numpad[i]->colour = GRAY;
 8001e6c:	008200b4 	movhi	r2,2050
 8001e70:	10982a04 	addi	r2,r2,24744
 8001e74:	e0fff917 	ldw	r3,-28(fp)
 8001e78:	18c7883a 	add	r3,r3,r3
 8001e7c:	18c7883a 	add	r3,r3,r3
 8001e80:	10c5883a 	add	r2,r2,r3
 8001e84:	10800017 	ldw	r2,0(r2)
 8001e88:	00c00244 	movi	r3,9
 8001e8c:	10c00615 	stw	r3,24(r2)

				// Increment since we've drawn a character
				if(graphics_field_cursor < codeLength) {
 8001e90:	d0e6da17 	ldw	r3,-25752(gp)
 8001e94:	e0bffd17 	ldw	r2,-12(fp)
 8001e98:	1880140e 	bge	r3,r2,8001eec <Graphics_GetNumberPressed+0x1e4>
					//Graphics_DrawSquare(graphics_field_cursor,BLACK);
					array[graphics_field_cursor] = Graphics_ButtonNumToNum(i);
 8001e9c:	d0a6da17 	ldw	r2,-25752(gp)
 8001ea0:	1085883a 	add	r2,r2,r2
 8001ea4:	1085883a 	add	r2,r2,r2
 8001ea8:	1007883a 	mov	r3,r2
 8001eac:	e0bffe17 	ldw	r2,-8(fp)
 8001eb0:	10e1883a 	add	r16,r2,r3
 8001eb4:	e13ff917 	ldw	r4,-28(fp)
 8001eb8:	8001f4c0 	call	8001f4c <Graphics_ButtonNumToNum>
 8001ebc:	80800015 	stw	r2,0(r16)
					Graphics_DrawUserEnteredDigit(graphics_field_cursor, Graphics_ButtonNumToNum(i), BLACK, codeIndexLength);
 8001ec0:	d426da17 	ldw	r16,-25752(gp)
 8001ec4:	e13ff917 	ldw	r4,-28(fp)
 8001ec8:	8001f4c0 	call	8001f4c <Graphics_ButtonNumToNum>
 8001ecc:	8009883a 	mov	r4,r16
 8001ed0:	100b883a 	mov	r5,r2
 8001ed4:	000d883a 	mov	r6,zero
 8001ed8:	e1c00217 	ldw	r7,8(fp)
 8001edc:	8001c500 	call	8001c50 <Graphics_DrawUserEnteredDigit>
					graphics_field_cursor++;
 8001ee0:	d0a6da17 	ldw	r2,-25752(gp)
 8001ee4:	10800044 	addi	r2,r2,1
 8001ee8:	d0a6da15 	stw	r2,-25752(gp)
				}
			}
			Graphics_DrawRectangle(numpad[i]);
 8001eec:	008200b4 	movhi	r2,2050
 8001ef0:	10982a04 	addi	r2,r2,24744
 8001ef4:	e0fff917 	ldw	r3,-28(fp)
 8001ef8:	18c7883a 	add	r3,r3,r3
 8001efc:	18c7883a 	add	r3,r3,r3
 8001f00:	10c5883a 	add	r2,r2,r3
 8001f04:	10800017 	ldw	r2,0(r2)
 8001f08:	1009883a 	mov	r4,r2
 8001f0c:	8000a600 	call	8000a60 <Graphics_DrawRectangle>

			return i;
 8001f10:	e0bff917 	ldw	r2,-28(fp)
 8001f14:	00000706 	br	8001f34 <Graphics_GetNumberPressed+0x22c>
/*
 * Get the index of the number pressed on the number pad, indices range from 0 to 11.
 */
int Graphics_GetNumberPressed(int point_x, int point_y, int codeLength, int array[], int codeIndexLength) {
	int i;
	for(i = 0; i < NUMPAD_SIZE; i++){
 8001f18:	e0bff917 	ldw	r2,-28(fp)
 8001f1c:	10800044 	addi	r2,r2,1
 8001f20:	e0bff915 	stw	r2,-28(fp)
 8001f24:	e0bff917 	ldw	r2,-28(fp)
 8001f28:	10800310 	cmplti	r2,r2,12
 8001f2c:	103f811e 	bne	r2,zero,8001d34 <__alt_data_end+0xfc001d34>
			Graphics_DrawRectangle(numpad[i]);

			return i;
		}
	}
	return -1;
 8001f30:	00bfffc4 	movi	r2,-1
}
 8001f34:	e6ffff04 	addi	sp,fp,-4
 8001f38:	dfc00217 	ldw	ra,8(sp)
 8001f3c:	df000117 	ldw	fp,4(sp)
 8001f40:	dc000017 	ldw	r16,0(sp)
 8001f44:	dec00304 	addi	sp,sp,12
 8001f48:	f800283a 	ret

08001f4c <Graphics_ButtonNumToNum>:

/*****************************************************************************************
 *	Function to convert a button index to it's corresponding number pad number.
 *
 ******************************************************************************************/
int Graphics_ButtonNumToNum(int button) {
 8001f4c:	defffd04 	addi	sp,sp,-12
 8001f50:	df000215 	stw	fp,8(sp)
 8001f54:	df000204 	addi	fp,sp,8
 8001f58:	e13fff15 	stw	r4,-4(fp)
	int num = button + 1;
 8001f5c:	e0bfff17 	ldw	r2,-4(fp)
 8001f60:	10800044 	addi	r2,r2,1
 8001f64:	e0bffe15 	stw	r2,-8(fp)
	if(num == 11)
 8001f68:	e0bffe17 	ldw	r2,-8(fp)
 8001f6c:	108002d8 	cmpnei	r2,r2,11
 8001f70:	1000021e 	bne	r2,zero,8001f7c <Graphics_ButtonNumToNum+0x30>
		return 0;
 8001f74:	0005883a 	mov	r2,zero
 8001f78:	00000106 	br	8001f80 <Graphics_ButtonNumToNum+0x34>
	return num;
 8001f7c:	e0bffe17 	ldw	r2,-8(fp)
}
 8001f80:	e037883a 	mov	sp,fp
 8001f84:	df000017 	ldw	fp,0(sp)
 8001f88:	dec00104 	addi	sp,sp,4
 8001f8c:	f800283a 	ret

08001f90 <Graphics_InRectangle>:

/**
 * Returns 1 if point inside rect
 */
int Graphics_InRectangle(int point_x, int point_y, Rectangle_t* rect) {
 8001f90:	defffc04 	addi	sp,sp,-16
 8001f94:	df000315 	stw	fp,12(sp)
 8001f98:	df000304 	addi	fp,sp,12
 8001f9c:	e13ffd15 	stw	r4,-12(fp)
 8001fa0:	e17ffe15 	stw	r5,-8(fp)
 8001fa4:	e1bfff15 	stw	r6,-4(fp)
	return point_x < rect->x2 && point_x > rect->x1 && point_y < rect->y2 && point_y > rect->y1;
 8001fa8:	e0bfff17 	ldw	r2,-4(fp)
 8001fac:	10800117 	ldw	r2,4(r2)
 8001fb0:	e0fffd17 	ldw	r3,-12(fp)
 8001fb4:	18800e0e 	bge	r3,r2,8001ff0 <Graphics_InRectangle+0x60>
 8001fb8:	e0bfff17 	ldw	r2,-4(fp)
 8001fbc:	10c00017 	ldw	r3,0(r2)
 8001fc0:	e0bffd17 	ldw	r2,-12(fp)
 8001fc4:	18800a0e 	bge	r3,r2,8001ff0 <Graphics_InRectangle+0x60>
 8001fc8:	e0bfff17 	ldw	r2,-4(fp)
 8001fcc:	10800317 	ldw	r2,12(r2)
 8001fd0:	e0fffe17 	ldw	r3,-8(fp)
 8001fd4:	1880060e 	bge	r3,r2,8001ff0 <Graphics_InRectangle+0x60>
 8001fd8:	e0bfff17 	ldw	r2,-4(fp)
 8001fdc:	10c00217 	ldw	r3,8(r2)
 8001fe0:	e0bffe17 	ldw	r2,-8(fp)
 8001fe4:	1880020e 	bge	r3,r2,8001ff0 <Graphics_InRectangle+0x60>
 8001fe8:	00800044 	movi	r2,1
 8001fec:	00000106 	br	8001ff4 <Graphics_InRectangle+0x64>
 8001ff0:	0005883a 	mov	r2,zero
}
 8001ff4:	e037883a 	mov	sp,fp
 8001ff8:	df000017 	ldw	fp,0(sp)
 8001ffc:	dec00104 	addi	sp,sp,4
 8002000:	f800283a 	ret

08002004 <Graphics_RectangleTouched>:

/**
 * Returns 1 if point inside request code rect
 */
int Graphics_RectangleTouched(int point_x, int point_y, Rectangle_t *rect) {
 8002004:	defff904 	addi	sp,sp,-28
 8002008:	dfc00615 	stw	ra,24(sp)
 800200c:	df000515 	stw	fp,20(sp)
 8002010:	df000504 	addi	fp,sp,20
 8002014:	e13ffd15 	stw	r4,-12(fp)
 8002018:	e17ffe15 	stw	r5,-8(fp)
 800201c:	e1bfff15 	stw	r6,-4(fp)
	int isTouched = Graphics_InRectangle(point_x,point_y,rect);
 8002020:	e13ffd17 	ldw	r4,-12(fp)
 8002024:	e17ffe17 	ldw	r5,-8(fp)
 8002028:	e1bfff17 	ldw	r6,-4(fp)
 800202c:	8001f900 	call	8001f90 <Graphics_InRectangle>
 8002030:	e0bffb15 	stw	r2,-20(fp)
	int originalColour = rect->colour;
 8002034:	e0bfff17 	ldw	r2,-4(fp)
 8002038:	10800617 	ldw	r2,24(r2)
 800203c:	e0bffc15 	stw	r2,-16(fp)
	if(isTouched) {
 8002040:	e0bffb17 	ldw	r2,-20(fp)
 8002044:	10000b26 	beq	r2,zero,8002074 <Graphics_RectangleTouched+0x70>
		rect->colour = BLACK;
 8002048:	e0bfff17 	ldw	r2,-4(fp)
 800204c:	10000615 	stw	zero,24(r2)
		Graphics_DrawRectangle(rect);
 8002050:	e13fff17 	ldw	r4,-4(fp)
 8002054:	8000a600 	call	8000a60 <Graphics_DrawRectangle>
		usleep(50000);
 8002058:	0130d414 	movui	r4,50000
 800205c:	8015b900 	call	8015b90 <usleep>
		rect->colour = originalColour;
 8002060:	e0bfff17 	ldw	r2,-4(fp)
 8002064:	e0fffc17 	ldw	r3,-16(fp)
 8002068:	10c00615 	stw	r3,24(r2)
		Graphics_DrawRectangle(rect);
 800206c:	e13fff17 	ldw	r4,-4(fp)
 8002070:	8000a600 	call	8000a60 <Graphics_DrawRectangle>
	}
	return isTouched;
 8002074:	e0bffb17 	ldw	r2,-20(fp)
}
 8002078:	e037883a 	mov	sp,fp
 800207c:	dfc00117 	ldw	ra,4(sp)
 8002080:	df000017 	ldw	fp,0(sp)
 8002084:	dec00204 	addi	sp,sp,8
 8002088:	f800283a 	ret

0800208c <Graphics_AreaRect>:

/**
 * Returns the rough area of a rectangle given top left (x1,y1) and bottom right (x2,y2)
 */
float Graphics_AreaRect(Rectangle_t* rect) {
 800208c:	defff504 	addi	sp,sp,-44
 8002090:	dfc00a15 	stw	ra,40(sp)
 8002094:	df000915 	stw	fp,36(sp)
 8002098:	dc800815 	stw	r18,32(sp)
 800209c:	dc400715 	stw	r17,28(sp)
 80020a0:	dc000615 	stw	r16,24(sp)
 80020a4:	df000904 	addi	fp,sp,36
 80020a8:	e13ffc15 	stw	r4,-16(fp)
	int x1 = rect->x1;
 80020ac:	e0bffc17 	ldw	r2,-16(fp)
 80020b0:	10800017 	ldw	r2,0(r2)
 80020b4:	e0bff715 	stw	r2,-36(fp)
	int y1 = rect->y1;
 80020b8:	e0bffc17 	ldw	r2,-16(fp)
 80020bc:	10800217 	ldw	r2,8(r2)
 80020c0:	e0bff815 	stw	r2,-32(fp)
	int x2 = rect->x2;
 80020c4:	e0bffc17 	ldw	r2,-16(fp)
 80020c8:	10800117 	ldw	r2,4(r2)
 80020cc:	e0bff915 	stw	r2,-28(fp)
	int y2 = rect->y2;
 80020d0:	e0bffc17 	ldw	r2,-16(fp)
 80020d4:	10800317 	ldw	r2,12(r2)
 80020d8:	e0bffa15 	stw	r2,-24(fp)

	float area = (y2 - y1)*(x2-x1) + (y1-y2)*(x1-x2);
 80020dc:	e0fffa17 	ldw	r3,-24(fp)
 80020e0:	e0bff817 	ldw	r2,-32(fp)
 80020e4:	1889c83a 	sub	r4,r3,r2
 80020e8:	e0fff917 	ldw	r3,-28(fp)
 80020ec:	e0bff717 	ldw	r2,-36(fp)
 80020f0:	1885c83a 	sub	r2,r3,r2
 80020f4:	100b883a 	mov	r5,r2
 80020f8:	80040900 	call	8004090 <__mulsi3>
 80020fc:	1025883a 	mov	r18,r2
 8002100:	e0fff817 	ldw	r3,-32(fp)
 8002104:	e0bffa17 	ldw	r2,-24(fp)
 8002108:	1889c83a 	sub	r4,r3,r2
 800210c:	e0fff717 	ldw	r3,-36(fp)
 8002110:	e0bff917 	ldw	r2,-28(fp)
 8002114:	1885c83a 	sub	r2,r3,r2
 8002118:	100b883a 	mov	r5,r2
 800211c:	80040900 	call	8004090 <__mulsi3>
 8002120:	9085883a 	add	r2,r18,r2
 8002124:	1009883a 	mov	r4,r2
 8002128:	80045c00 	call	80045c0 <__floatsisf>
 800212c:	1007883a 	mov	r3,r2
 8002130:	e0fffb15 	stw	r3,-20(fp)
	area = area < 0.0 ? area * -1.0 : area;
 8002134:	e13ffb17 	ldw	r4,-20(fp)
 8002138:	000b883a 	mov	r5,zero
 800213c:	80040b80 	call	80040b8 <__lesf2>
 8002140:	10000b0e 	bge	r2,zero,8002170 <Graphics_AreaRect+0xe4>
 8002144:	e13ffb17 	ldw	r4,-20(fp)
 8002148:	8005adc0 	call	8005adc <__extendsfdf2>
 800214c:	1009883a 	mov	r4,r2
 8002150:	180b883a 	mov	r5,r3
 8002154:	2021883a 	mov	r16,r4
 8002158:	2c60003c 	xorhi	r17,r5,32768
 800215c:	8009883a 	mov	r4,r16
 8002160:	880b883a 	mov	r5,r17
 8002164:	8005bec0 	call	8005bec <__truncdfsf2>
 8002168:	1007883a 	mov	r3,r2
 800216c:	00000106 	br	8002174 <Graphics_AreaRect+0xe8>
 8002170:	e0fffb17 	ldw	r3,-20(fp)
 8002174:	e0fffb15 	stw	r3,-20(fp)
	area = 1.0/2.0 * area;
 8002178:	e13ffb17 	ldw	r4,-20(fp)
 800217c:	014fc034 	movhi	r5,16128
 8002180:	80041700 	call	8004170 <__mulsf3>
 8002184:	1007883a 	mov	r3,r2
 8002188:	e0fffb15 	stw	r3,-20(fp)
	return area;
 800218c:	e0bffb17 	ldw	r2,-20(fp)
 8002190:	1007883a 	mov	r3,r2
}
 8002194:	1805883a 	mov	r2,r3
 8002198:	e6fffd04 	addi	sp,fp,-12
 800219c:	dfc00417 	ldw	ra,16(sp)
 80021a0:	df000317 	ldw	fp,12(sp)
 80021a4:	dc800217 	ldw	r18,8(sp)
 80021a8:	dc400117 	ldw	r17,4(sp)
 80021ac:	dc000017 	ldw	r16,0(sp)
 80021b0:	dec00504 	addi	sp,sp,20
 80021b4:	f800283a 	ret

080021b8 <Graphics_AreaTriangle>:

/**
 * Returns the rough area of a rectangle triangle given 3 points
 */
float Graphics_AreaTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {
 80021b8:	defff804 	addi	sp,sp,-32
 80021bc:	dfc00715 	stw	ra,28(sp)
 80021c0:	df000615 	stw	fp,24(sp)
 80021c4:	dc000515 	stw	r16,20(sp)
 80021c8:	df000604 	addi	fp,sp,24
 80021cc:	e13ffb15 	stw	r4,-20(fp)
 80021d0:	e17ffc15 	stw	r5,-16(fp)
 80021d4:	e1bffd15 	stw	r6,-12(fp)
 80021d8:	e1fffe15 	stw	r7,-8(fp)
	int area = 1.0/2.0 * (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));
 80021dc:	e0fffe17 	ldw	r3,-8(fp)
 80021e0:	e0800317 	ldw	r2,12(fp)
 80021e4:	1885c83a 	sub	r2,r3,r2
 80021e8:	1009883a 	mov	r4,r2
 80021ec:	e17ffb17 	ldw	r5,-20(fp)
 80021f0:	80040900 	call	8004090 <__mulsi3>
 80021f4:	1021883a 	mov	r16,r2
 80021f8:	e0c00317 	ldw	r3,12(fp)
 80021fc:	e0bffc17 	ldw	r2,-16(fp)
 8002200:	1885c83a 	sub	r2,r3,r2
 8002204:	1009883a 	mov	r4,r2
 8002208:	e17ffd17 	ldw	r5,-12(fp)
 800220c:	80040900 	call	8004090 <__mulsi3>
 8002210:	80a1883a 	add	r16,r16,r2
 8002214:	e0fffc17 	ldw	r3,-16(fp)
 8002218:	e0bffe17 	ldw	r2,-8(fp)
 800221c:	1885c83a 	sub	r2,r3,r2
 8002220:	1009883a 	mov	r4,r2
 8002224:	e1400217 	ldw	r5,8(fp)
 8002228:	80040900 	call	8004090 <__mulsi3>
 800222c:	8085883a 	add	r2,r16,r2
 8002230:	1009883a 	mov	r4,r2
 8002234:	80059680 	call	8005968 <__floatsidf>
 8002238:	100b883a 	mov	r5,r2
 800223c:	180d883a 	mov	r6,r3
 8002240:	2809883a 	mov	r4,r5
 8002244:	300b883a 	mov	r5,r6
 8002248:	000d883a 	mov	r6,zero
 800224c:	01cff834 	movhi	r7,16352
 8002250:	80050740 	call	8005074 <__muldf3>
 8002254:	1009883a 	mov	r4,r2
 8002258:	180b883a 	mov	r5,r3
 800225c:	2005883a 	mov	r2,r4
 8002260:	2807883a 	mov	r3,r5
 8002264:	1009883a 	mov	r4,r2
 8002268:	180b883a 	mov	r5,r3
 800226c:	80058e00 	call	80058e0 <__fixdfsi>
 8002270:	e0bffa15 	stw	r2,-24(fp)
	area = area < 0 ? area * -1 : area;
 8002274:	e0bffa17 	ldw	r2,-24(fp)
 8002278:	1000010e 	bge	r2,zero,8002280 <Graphics_AreaTriangle+0xc8>
 800227c:	0085c83a 	sub	r2,zero,r2
 8002280:	e0bffa15 	stw	r2,-24(fp)
	return area;
 8002284:	e13ffa17 	ldw	r4,-24(fp)
 8002288:	80045c00 	call	80045c0 <__floatsisf>
 800228c:	1007883a 	mov	r3,r2
 8002290:	1805883a 	mov	r2,r3
}
 8002294:	e6ffff04 	addi	sp,fp,-4
 8002298:	dfc00217 	ldw	ra,8(sp)
 800229c:	df000117 	ldw	fp,4(sp)
 80022a0:	dc000017 	ldw	r16,0(sp)
 80022a4:	dec00304 	addi	sp,sp,12
 80022a8:	f800283a 	ret

080022ac <Graphics_InitializeRectangleCentered>:

Rectangle_t* Graphics_InitializeRectangleCentered(int xLength, int yPos, int yLength, int xBoundLeft, int xBoundRight, int colour, char *text){
 80022ac:	defff504 	addi	sp,sp,-44
 80022b0:	dfc00a15 	stw	ra,40(sp)
 80022b4:	df000915 	stw	fp,36(sp)
 80022b8:	df000904 	addi	fp,sp,36
 80022bc:	e13ffc15 	stw	r4,-16(fp)
 80022c0:	e17ffd15 	stw	r5,-12(fp)
 80022c4:	e1bffe15 	stw	r6,-8(fp)
 80022c8:	e1ffff15 	stw	r7,-4(fp)
	int xPos =	xBoundLeft + (xBoundRight - xLength - xBoundLeft) / 2;
 80022cc:	e0c00217 	ldw	r3,8(fp)
 80022d0:	e0bffc17 	ldw	r2,-16(fp)
 80022d4:	1887c83a 	sub	r3,r3,r2
 80022d8:	e0bfff17 	ldw	r2,-4(fp)
 80022dc:	1885c83a 	sub	r2,r3,r2
 80022e0:	1006d7fa 	srli	r3,r2,31
 80022e4:	1885883a 	add	r2,r3,r2
 80022e8:	1005d07a 	srai	r2,r2,1
 80022ec:	1007883a 	mov	r3,r2
 80022f0:	e0bfff17 	ldw	r2,-4(fp)
 80022f4:	1885883a 	add	r2,r3,r2
 80022f8:	e0bffa15 	stw	r2,-24(fp)
	Rectangle_t *rect = Graphics_Init_Rectangle(xPos, yPos, xPos + xLength, yPos + yLength, colour, REGULAR_BUTTON, text);
 80022fc:	e0fffa17 	ldw	r3,-24(fp)
 8002300:	e0bffc17 	ldw	r2,-16(fp)
 8002304:	188d883a 	add	r6,r3,r2
 8002308:	e0fffd17 	ldw	r3,-12(fp)
 800230c:	e0bffe17 	ldw	r2,-8(fp)
 8002310:	1887883a 	add	r3,r3,r2
 8002314:	e0800317 	ldw	r2,12(fp)
 8002318:	d8800015 	stw	r2,0(sp)
 800231c:	d8000115 	stw	zero,4(sp)
 8002320:	e0800417 	ldw	r2,16(fp)
 8002324:	d8800215 	stw	r2,8(sp)
 8002328:	e13ffa17 	ldw	r4,-24(fp)
 800232c:	e17ffd17 	ldw	r5,-12(fp)
 8002330:	180f883a 	mov	r7,r3
 8002334:	8000d9c0 	call	8000d9c <Graphics_Init_Rectangle>
 8002338:	e0bffb15 	stw	r2,-20(fp)
	return rect;
 800233c:	e0bffb17 	ldw	r2,-20(fp)
}
 8002340:	e037883a 	mov	sp,fp
 8002344:	dfc00117 	ldw	ra,4(sp)
 8002348:	df000017 	ldw	fp,0(sp)
 800234c:	dec00204 	addi	sp,sp,8
 8002350:	f800283a 	ret

08002354 <Keys_GetValue>:
 *      Author: r3z9a
 */

#include "keys.h"

uint8_t Keys_GetValue() {
 8002354:	deffff04 	addi	sp,sp,-4
 8002358:	df000015 	stw	fp,0(sp)
 800235c:	d839883a 	mov	fp,sp
	return Keys_Base;
 8002360:	00881804 	movi	r2,8288
 8002364:	10800003 	ldbu	r2,0(r2)
}
 8002368:	e037883a 	mov	sp,fp
 800236c:	df000017 	ldw	fp,0(sp)
 8002370:	dec00104 	addi	sp,sp,4
 8002374:	f800283a 	ret

08002378 <Leds_WriteVal>:
#include <stdint.h>
#include <stdlib.h>

#include "leds.h"

void Leds_WriteVal(uint8_t val) {
 8002378:	defffe04 	addi	sp,sp,-8
 800237c:	df000115 	stw	fp,4(sp)
 8002380:	df000104 	addi	fp,sp,4
 8002384:	2005883a 	mov	r2,r4
 8002388:	e0bfff05 	stb	r2,-4(fp)
	Leds_Base = val;
 800238c:	00880404 	movi	r2,8208
 8002390:	e0ffff03 	ldbu	r3,-4(fp)
 8002394:	10c00005 	stb	r3,0(r2)
}
 8002398:	e037883a 	mov	sp,fp
 800239c:	df000017 	ldw	fp,0(sp)
 80023a0:	dec00104 	addi	sp,sp,4
 80023a4:	f800283a 	ret

080023a8 <Leds_Celebrate>:

void Leds_Celebrate() {
 80023a8:	defffd04 	addi	sp,sp,-12
 80023ac:	dfc00215 	stw	ra,8(sp)
 80023b0:	df000115 	stw	fp,4(sp)
 80023b4:	df000104 	addi	fp,sp,4
	int i = 0;
 80023b8:	e03fff15 	stw	zero,-4(fp)
	for(i=0;i<1024;i++) {
 80023bc:	e03fff15 	stw	zero,-4(fp)
 80023c0:	00000e06 	br	80023fc <Leds_Celebrate+0x54>
		Leds_Base = 0xff;
 80023c4:	00880404 	movi	r2,8208
 80023c8:	00ffffc4 	movi	r3,-1
 80023cc:	10c00005 	stb	r3,0(r2)
		usleep(100000);
 80023d0:	010000b4 	movhi	r4,2
 80023d4:	2121a804 	addi	r4,r4,-31072
 80023d8:	8015b900 	call	8015b90 <usleep>
		Leds_Base = 0x00;
 80023dc:	00880404 	movi	r2,8208
 80023e0:	10000005 	stb	zero,0(r2)
		usleep(100000);
 80023e4:	010000b4 	movhi	r4,2
 80023e8:	2121a804 	addi	r4,r4,-31072
 80023ec:	8015b900 	call	8015b90 <usleep>
	Leds_Base = val;
}

void Leds_Celebrate() {
	int i = 0;
	for(i=0;i<1024;i++) {
 80023f0:	e0bfff17 	ldw	r2,-4(fp)
 80023f4:	10800044 	addi	r2,r2,1
 80023f8:	e0bfff15 	stw	r2,-4(fp)
 80023fc:	e0bfff17 	ldw	r2,-4(fp)
 8002400:	10810010 	cmplti	r2,r2,1024
 8002404:	103fef1e 	bne	r2,zero,80023c4 <__alt_data_end+0xfc0023c4>
		usleep(100000);
		Leds_Base = 0x00;
		usleep(100000);
	}

	for(;i<1024;i++) {
 8002408:	00000906 	br	8002430 <Leds_Celebrate+0x88>
		Leds_Base = i;
 800240c:	00880404 	movi	r2,8208
 8002410:	e0ffff17 	ldw	r3,-4(fp)
 8002414:	10c00005 	stb	r3,0(r2)
		usleep(100000);
 8002418:	010000b4 	movhi	r4,2
 800241c:	2121a804 	addi	r4,r4,-31072
 8002420:	8015b900 	call	8015b90 <usleep>
		usleep(100000);
		Leds_Base = 0x00;
		usleep(100000);
	}

	for(;i<1024;i++) {
 8002424:	e0bfff17 	ldw	r2,-4(fp)
 8002428:	10800044 	addi	r2,r2,1
 800242c:	e0bfff15 	stw	r2,-4(fp)
 8002430:	e0bfff17 	ldw	r2,-4(fp)
 8002434:	10810010 	cmplti	r2,r2,1024
 8002438:	103ff41e 	bne	r2,zero,800240c <__alt_data_end+0xfc00240c>
		Leds_Base = i;
		usleep(100000);
	}
}
 800243c:	e037883a 	mov	sp,fp
 8002440:	dfc00117 	ldw	ra,4(sp)
 8002444:	df000017 	ldw	fp,0(sp)
 8002448:	dec00204 	addi	sp,sp,8
 800244c:	f800283a 	ret

08002450 <main>:
#include "leds.h"
#include "fonts.h"
#include "graphics.h"
#include "security.h"

int main() {
 8002450:	deffe404 	addi	sp,sp,-112
 8002454:	dfc01b15 	stw	ra,108(sp)
 8002458:	df001a15 	stw	fp,104(sp)
 800245c:	df001a04 	addi	fp,sp,104
	printf("Starting Program\n");
 8002460:	010200b4 	movhi	r4,2050
 8002464:	21094104 	addi	r4,r4,9476
 8002468:	80068300 	call	8006830 <puts>

	// Initialize Hardware
	Wifi_Init();
 800246c:	80034500 	call	8003450 <Wifi_Init>
	TS_Init();
 8002470:	8002de80 	call	8002de8 <TS_Init>
	Graphics_InitializeNumberPad();
 8002474:	80017740 	call	8001774 <Graphics_InitializeNumberPad>

	//int Security_State = STATE_DRAW_WELCOME_SCREEN;
	int Security_State = STATE_DRAW_INIT_SCREEN;
 8002478:	e03fed15 	stw	zero,-76(fp)
	int isInitialized = 0;
 800247c:	e03fee15 	stw	zero,-72(fp)
	int button;

	/**
	 * Send the wifi command
	 */
	Wifi_SendCommand("dofile(\"system.lua\")\r\n");
 8002480:	010200b4 	movhi	r4,2050
 8002484:	21094604 	addi	r4,r4,9496
 8002488:	80039000 	call	8003900 <Wifi_SendCommand>
	int bytesread = Wifi_ReadResponse();
 800248c:	80034e80 	call	80034e8 <Wifi_ReadResponse>
 8002490:	e0bff115 	stw	r2,-60(fp)

	// Ensure we are connected to wifi
	Wifi_EnsureConnection();
 8002494:	800368c0 	call	800368c <Wifi_EnsureConnection>

	Point p;
	while (1) {
		switch (Security_State) {
 8002498:	e0bfed17 	ldw	r2,-76(fp)
 800249c:	108003a8 	cmpgeui	r2,r2,14
 80024a0:	103ffd1e 	bne	r2,zero,8002498 <__alt_data_end+0xfc002498>
 80024a4:	e0bfed17 	ldw	r2,-76(fp)
 80024a8:	100690ba 	slli	r3,r2,2
 80024ac:	00820034 	movhi	r2,2048
 80024b0:	10893004 	addi	r2,r2,9408
 80024b4:	1885883a 	add	r2,r3,r2
 80024b8:	10800017 	ldw	r2,0(r2)
 80024bc:	1000683a 	jmp	r2
 80024c0:	080024f8 	rdprs	zero,at,147
 80024c4:	08002520 	cmpeqi	zero,at,148
 80024c8:	0800256c 	andhi	zero,at,149
 80024cc:	080026ec 	andhi	zero,at,155
 80024d0:	08002818 	cmpnei	zero,at,160
 80024d4:	08002968 	cmpgeui	zero,at,165
 80024d8:	080029e8 	cmpgeui	zero,at,167
 80024dc:	080029d8 	cmpnei	zero,at,167
 80024e0:	08002af4 	orhi	zero,at,171
 80024e4:	08002bec 	andhi	zero,at,175
 80024e8:	08002bfc 	xorhi	zero,at,175
 80024ec:	08002c3c 	xorhi	zero,at,176
 80024f0:	08002c4c 	andi	zero,at,177
 80024f4:	08002c8c 	andi	zero,at,178
//						User_Input[2], User_Input[3]);
//			}
//			printf("Cursor length: %d\n", graphics_field_cursor);
//			break;
		case STATE_DRAW_INIT_SCREEN:
			if (isInitialized) {
 80024f8:	e0bfee17 	ldw	r2,-72(fp)
 80024fc:	10000426 	beq	r2,zero,8002510 <main+0xc0>
				Graphics_DrawWelcomeScreen();
 8002500:	80011040 	call	8001104 <Graphics_DrawWelcomeScreen>
				Security_State = STATE_SIGN_IN;
 8002504:	00800144 	movi	r2,5
 8002508:	e0bfed15 	stw	r2,-76(fp)
			} else {
				Graphics_DrawInitializationScreen();
				Security_State = STATE_SIGN_UP;
			}
			break;
 800250c:	0001e006 	br	8002c90 <main+0x840>
		case STATE_DRAW_INIT_SCREEN:
			if (isInitialized) {
				Graphics_DrawWelcomeScreen();
				Security_State = STATE_SIGN_IN;
			} else {
				Graphics_DrawInitializationScreen();
 8002510:	8000f740 	call	8000f74 <Graphics_DrawInitializationScreen>
				Security_State = STATE_SIGN_UP;
 8002514:	00800044 	movi	r2,1
 8002518:	e0bfed15 	stw	r2,-76(fp)
			}
			break;
 800251c:	0001dc06 	br	8002c90 <main+0x840>
		/**
		 * This state draws the sign up screen
		 */
		case STATE_SIGN_UP:
			TS_WaitForRelease();
 8002520:	8002ef80 	call	8002ef8 <TS_WaitForRelease>
			p = TS_GetRelease();
 8002524:	80031840 	call	8003184 <TS_GetRelease>
 8002528:	1009883a 	mov	r4,r2
 800252c:	180b883a 	mov	r5,r3
 8002530:	e13ff415 	stw	r4,-48(fp)
 8002534:	e17ff515 	stw	r5,-44(fp)
			if (Graphics_RectangleTouched(p.x, p.y, sign_up_rect)) {
 8002538:	e13ff417 	ldw	r4,-48(fp)
 800253c:	e0fff517 	ldw	r3,-44(fp)
 8002540:	d0a6d817 	ldw	r2,-25760(gp)
 8002544:	180b883a 	mov	r5,r3
 8002548:	100d883a 	mov	r6,r2
 800254c:	80020040 	call	8002004 <Graphics_RectangleTouched>
 8002550:	10000526 	beq	r2,zero,8002568 <main+0x118>
				Graphics_DrawPhoneNumberMenu();
 8002554:	80013140 	call	8001314 <Graphics_DrawPhoneNumberMenu>
				graphics_field_cursor = 0;
 8002558:	d026da15 	stw	zero,-25752(gp)
				Security_State = STATE_OWNER_PHONENUM;
 800255c:	00800084 	movi	r2,2
 8002560:	e0bfed15 	stw	r2,-76(fp)
			}
			break;
 8002564:	0001ca06 	br	8002c90 <main+0x840>
 8002568:	0001c906 	br	8002c90 <main+0x840>
		/**
		 * This state handles the owner registering their phone number
		 */
		case STATE_OWNER_PHONENUM:
			TS_WaitForRelease();
 800256c:	8002ef80 	call	8002ef8 <TS_WaitForRelease>
			p = TS_GetRelease();
 8002570:	80031840 	call	8003184 <TS_GetRelease>
 8002574:	1009883a 	mov	r4,r2
 8002578:	180b883a 	mov	r5,r3
 800257c:	e13ff415 	stw	r4,-48(fp)
 8002580:	e17ff515 	stw	r5,-44(fp)
			button = Graphics_GetNumberPressed(p.x, p.y, PHONENUMLENGTH,
 8002584:	e13ff417 	ldw	r4,-48(fp)
 8002588:	e0fff517 	ldw	r3,-44(fp)
 800258c:	00800a44 	movi	r2,41
 8002590:	d8800015 	stw	r2,0(sp)
 8002594:	180b883a 	mov	r5,r3
 8002598:	01800284 	movi	r6,10
 800259c:	01c200b4 	movhi	r7,2050
 80025a0:	39d84404 	addi	r7,r7,24848
 80025a4:	8001d080 	call	8001d08 <Graphics_GetNumberPressed>
 80025a8:	e0bff215 	stw	r2,-56(fp)
					User_Phone_Number_Input, PHONEINDEXLEN);
			if (button == NUMPAD_ENTER
 80025ac:	e0bff217 	ldw	r2,-56(fp)
 80025b0:	10800258 	cmpnei	r2,r2,9
 80025b4:	1000071e 	bne	r2,zero,80025d4 <main+0x184>
					&& graphics_field_cursor == PHONENUMLENGTH) {
 80025b8:	d0a6da17 	ldw	r2,-25752(gp)
 80025bc:	10800298 	cmpnei	r2,r2,10
 80025c0:	1000041e 	bne	r2,zero,80025d4 <main+0x184>
				Graphics_DrawMasterCodeMenu();
 80025c4:	80013e40 	call	80013e4 <Graphics_DrawMasterCodeMenu>
				graphics_field_cursor = 0;
 80025c8:	d026da15 	stw	zero,-25752(gp)
				Security_State = STATE_OWNER_MASTERCODE;
 80025cc:	008000c4 	movi	r2,3
 80025d0:	e0bfed15 	stw	r2,-76(fp)
			}
			if (Graphics_RectangleTouched(p.x, p.y, home_button_rect)) {
 80025d4:	e13ff417 	ldw	r4,-48(fp)
 80025d8:	e0fff517 	ldw	r3,-44(fp)
 80025dc:	d0a6d617 	ldw	r2,-25768(gp)
 80025e0:	180b883a 	mov	r5,r3
 80025e4:	100d883a 	mov	r6,r2
 80025e8:	80020040 	call	8002004 <Graphics_RectangleTouched>
 80025ec:	10000126 	beq	r2,zero,80025f4 <main+0x1a4>
				Security_State = STATE_DRAW_INIT_SCREEN;
 80025f0:	e03fed15 	stw	zero,-76(fp)
			}
			printf("Coords: %d, %d\n", p.x, p.y);
 80025f4:	e0fff417 	ldw	r3,-48(fp)
 80025f8:	e0bff517 	ldw	r2,-44(fp)
 80025fc:	010200b4 	movhi	r4,2050
 8002600:	21094c04 	addi	r4,r4,9520
 8002604:	180b883a 	mov	r5,r3
 8002608:	100d883a 	mov	r6,r2
 800260c:	800671c0 	call	800671c <printf>
			printf("Button num: %d\n", Graphics_ButtonNumToNum(button));
 8002610:	e13ff217 	ldw	r4,-56(fp)
 8002614:	8001f4c0 	call	8001f4c <Graphics_ButtonNumToNum>
 8002618:	010200b4 	movhi	r4,2050
 800261c:	21095004 	addi	r4,r4,9536
 8002620:	100b883a 	mov	r5,r2
 8002624:	800671c0 	call	800671c <printf>
			printf("Phone Number: %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
 8002628:	008200b4 	movhi	r2,2050
 800262c:	10984404 	addi	r2,r2,24848
 8002630:	12c00017 	ldw	r11,0(r2)
 8002634:	008200b4 	movhi	r2,2050
 8002638:	10984404 	addi	r2,r2,24848
 800263c:	12800117 	ldw	r10,4(r2)
 8002640:	008200b4 	movhi	r2,2050
 8002644:	10984404 	addi	r2,r2,24848
 8002648:	12400217 	ldw	r9,8(r2)
 800264c:	008200b4 	movhi	r2,2050
 8002650:	10984404 	addi	r2,r2,24848
 8002654:	12000317 	ldw	r8,12(r2)
 8002658:	008200b4 	movhi	r2,2050
 800265c:	10984404 	addi	r2,r2,24848
 8002660:	11c00417 	ldw	r7,16(r2)
 8002664:	008200b4 	movhi	r2,2050
 8002668:	10984404 	addi	r2,r2,24848
 800266c:	11800517 	ldw	r6,20(r2)
 8002670:	008200b4 	movhi	r2,2050
 8002674:	10984404 	addi	r2,r2,24848
 8002678:	11400617 	ldw	r5,24(r2)
 800267c:	008200b4 	movhi	r2,2050
 8002680:	10984404 	addi	r2,r2,24848
 8002684:	11000717 	ldw	r4,28(r2)
 8002688:	008200b4 	movhi	r2,2050
 800268c:	10984404 	addi	r2,r2,24848
 8002690:	10c00817 	ldw	r3,32(r2)
 8002694:	008200b4 	movhi	r2,2050
 8002698:	10984404 	addi	r2,r2,24848
 800269c:	10800917 	ldw	r2,36(r2)
 80026a0:	da000015 	stw	r8,0(sp)
 80026a4:	d9c00115 	stw	r7,4(sp)
 80026a8:	d9800215 	stw	r6,8(sp)
 80026ac:	d9400315 	stw	r5,12(sp)
 80026b0:	d9000415 	stw	r4,16(sp)
 80026b4:	d8c00515 	stw	r3,20(sp)
 80026b8:	d8800615 	stw	r2,24(sp)
 80026bc:	010200b4 	movhi	r4,2050
 80026c0:	21095404 	addi	r4,r4,9552
 80026c4:	580b883a 	mov	r5,r11
 80026c8:	500d883a 	mov	r6,r10
 80026cc:	480f883a 	mov	r7,r9
 80026d0:	800671c0 	call	800671c <printf>
					User_Phone_Number_Input[0], User_Phone_Number_Input[1],
					User_Phone_Number_Input[2], User_Phone_Number_Input[3],
					User_Phone_Number_Input[4], User_Phone_Number_Input[5],
					User_Phone_Number_Input[6], User_Phone_Number_Input[7],
					User_Phone_Number_Input[8], User_Phone_Number_Input[9]);
			printf("Cursor length: %d\n", graphics_field_cursor);
 80026d4:	d0a6da17 	ldw	r2,-25752(gp)
 80026d8:	010200b4 	movhi	r4,2050
 80026dc:	21096004 	addi	r4,r4,9600
 80026e0:	100b883a 	mov	r5,r2
 80026e4:	800671c0 	call	800671c <printf>
			break;
 80026e8:	00016906 	br	8002c90 <main+0x840>
		/**
		 * This state handles drawing the registration number
		 */
		case STATE_OWNER_MASTERCODE:
			TS_WaitForRelease();
 80026ec:	8002ef80 	call	8002ef8 <TS_WaitForRelease>
			p = TS_GetRelease();
 80026f0:	80031840 	call	8003184 <TS_GetRelease>
 80026f4:	1009883a 	mov	r4,r2
 80026f8:	180b883a 	mov	r5,r3
 80026fc:	e13ff415 	stw	r4,-48(fp)
 8002700:	e17ff515 	stw	r5,-44(fp)
			button = Graphics_GetNumberPressed(p.x, p.y, MASTERCODELENGTH,
 8002704:	e13ff417 	ldw	r4,-48(fp)
 8002708:	e0fff517 	ldw	r3,-44(fp)
 800270c:	00801284 	movi	r2,74
 8002710:	d8800015 	stw	r2,0(sp)
 8002714:	180b883a 	mov	r5,r3
 8002718:	01800184 	movi	r6,6
 800271c:	01c200b4 	movhi	r7,2050
 8002720:	39d83a04 	addi	r7,r7,24808
 8002724:	8001d080 	call	8001d08 <Graphics_GetNumberPressed>
 8002728:	e0bff215 	stw	r2,-56(fp)
					User_Master_Code, MASTERINDEXLEN);
			if (button == NUMPAD_ENTER
 800272c:	e0bff217 	ldw	r2,-56(fp)
 8002730:	10800258 	cmpnei	r2,r2,9
 8002734:	1000051e 	bne	r2,zero,800274c <main+0x2fc>
					&& graphics_field_cursor == MASTERCODELENGTH) {
 8002738:	d0a6da17 	ldw	r2,-25752(gp)
 800273c:	10800198 	cmpnei	r2,r2,6
 8002740:	1000021e 	bne	r2,zero,800274c <main+0x2fc>
				Security_State = STATE_SEND_MASTERCODE;
 8002744:	00800104 	movi	r2,4
 8002748:	e0bfed15 	stw	r2,-76(fp)
			}
			if (Graphics_RectangleTouched(p.x, p.y, home_button_rect)) {
 800274c:	e13ff417 	ldw	r4,-48(fp)
 8002750:	e0fff517 	ldw	r3,-44(fp)
 8002754:	d0a6d617 	ldw	r2,-25768(gp)
 8002758:	180b883a 	mov	r5,r3
 800275c:	100d883a 	mov	r6,r2
 8002760:	80020040 	call	8002004 <Graphics_RectangleTouched>
 8002764:	10000126 	beq	r2,zero,800276c <main+0x31c>
				Security_State = STATE_DRAW_INIT_SCREEN;
 8002768:	e03fed15 	stw	zero,-76(fp)
			}
			printf("Coords: %d, %d\n", p.x, p.y);
 800276c:	e0fff417 	ldw	r3,-48(fp)
 8002770:	e0bff517 	ldw	r2,-44(fp)
 8002774:	010200b4 	movhi	r4,2050
 8002778:	21094c04 	addi	r4,r4,9520
 800277c:	180b883a 	mov	r5,r3
 8002780:	100d883a 	mov	r6,r2
 8002784:	800671c0 	call	800671c <printf>
			printf("Button num: %d\n", Graphics_ButtonNumToNum(button));
 8002788:	e13ff217 	ldw	r4,-56(fp)
 800278c:	8001f4c0 	call	8001f4c <Graphics_ButtonNumToNum>
 8002790:	010200b4 	movhi	r4,2050
 8002794:	21095004 	addi	r4,r4,9536
 8002798:	100b883a 	mov	r5,r2
 800279c:	800671c0 	call	800671c <printf>
			printf("Master Code: %d,%d,%d,%d,%d,%d\n", User_Master_Code[0],
 80027a0:	008200b4 	movhi	r2,2050
 80027a4:	10983a04 	addi	r2,r2,24808
 80027a8:	11400017 	ldw	r5,0(r2)
 80027ac:	008200b4 	movhi	r2,2050
 80027b0:	10983a04 	addi	r2,r2,24808
 80027b4:	11800117 	ldw	r6,4(r2)
 80027b8:	008200b4 	movhi	r2,2050
 80027bc:	10983a04 	addi	r2,r2,24808
 80027c0:	11c00217 	ldw	r7,8(r2)
 80027c4:	008200b4 	movhi	r2,2050
 80027c8:	10983a04 	addi	r2,r2,24808
 80027cc:	11000317 	ldw	r4,12(r2)
 80027d0:	008200b4 	movhi	r2,2050
 80027d4:	10983a04 	addi	r2,r2,24808
 80027d8:	10c00417 	ldw	r3,16(r2)
 80027dc:	008200b4 	movhi	r2,2050
 80027e0:	10983a04 	addi	r2,r2,24808
 80027e4:	10800517 	ldw	r2,20(r2)
 80027e8:	d9000015 	stw	r4,0(sp)
 80027ec:	d8c00115 	stw	r3,4(sp)
 80027f0:	d8800215 	stw	r2,8(sp)
 80027f4:	010200b4 	movhi	r4,2050
 80027f8:	21096504 	addi	r4,r4,9620
 80027fc:	800671c0 	call	800671c <printf>
					User_Master_Code[1], User_Master_Code[2], User_Master_Code[3],
					User_Master_Code[4], User_Master_Code[5]);
			printf("Cursor length: %d\n", graphics_field_cursor);
 8002800:	d0a6da17 	ldw	r2,-25752(gp)
 8002804:	010200b4 	movhi	r4,2050
 8002808:	21096004 	addi	r4,r4,9600
 800280c:	100b883a 	mov	r5,r2
 8002810:	800671c0 	call	800671c <printf>
			break;
 8002814:	00011e06 	br	8002c90 <main+0x840>
		/**
		 * This state sends the put request for the new user
		 */
		case STATE_SEND_MASTERCODE:
			printf("Sending Master Code\n");
 8002818:	010200b4 	movhi	r4,2050
 800281c:	21096d04 	addi	r4,r4,9652
 8002820:	80068300 	call	8006830 <puts>

			char master_code[16];
			int i=0;
 8002824:	e03fef15 	stw	zero,-68(fp)
			int index = 0;
 8002828:	e03ff015 	stw	zero,-64(fp)
			for (i=0; i<6; i++)
 800282c:	e03fef15 	stw	zero,-68(fp)
 8002830:	00001906 	br	8002898 <main+0x448>
				index += snprintf(&master_code[index], 16-index, "%d", User_Master_Code[i]);
 8002834:	e0fff604 	addi	r3,fp,-40
 8002838:	e0bff017 	ldw	r2,-64(fp)
 800283c:	1889883a 	add	r4,r3,r2
 8002840:	00c00404 	movi	r3,16
 8002844:	e0bff017 	ldw	r2,-64(fp)
 8002848:	1885c83a 	sub	r2,r3,r2
 800284c:	100b883a 	mov	r5,r2
 8002850:	008200b4 	movhi	r2,2050
 8002854:	10983a04 	addi	r2,r2,24808
 8002858:	e0ffef17 	ldw	r3,-68(fp)
 800285c:	18c7883a 	add	r3,r3,r3
 8002860:	18c7883a 	add	r3,r3,r3
 8002864:	10c5883a 	add	r2,r2,r3
 8002868:	10800017 	ldw	r2,0(r2)
 800286c:	018200b4 	movhi	r6,2050
 8002870:	31897204 	addi	r6,r6,9672
 8002874:	100f883a 	mov	r7,r2
 8002878:	80069ec0 	call	80069ec <snprintf>
 800287c:	1007883a 	mov	r3,r2
 8002880:	e0bff017 	ldw	r2,-64(fp)
 8002884:	10c5883a 	add	r2,r2,r3
 8002888:	e0bff015 	stw	r2,-64(fp)
			printf("Sending Master Code\n");

			char master_code[16];
			int i=0;
			int index = 0;
			for (i=0; i<6; i++)
 800288c:	e0bfef17 	ldw	r2,-68(fp)
 8002890:	10800044 	addi	r2,r2,1
 8002894:	e0bfef15 	stw	r2,-68(fp)
 8002898:	e0bfef17 	ldw	r2,-68(fp)
 800289c:	10800190 	cmplti	r2,r2,6
 80028a0:	103fe41e 	bne	r2,zero,8002834 <__alt_data_end+0xfc002834>
				index += snprintf(&master_code[index], 16-index, "%d", User_Master_Code[i]);

			char phone_num[16];
			i=0;
 80028a4:	e03fef15 	stw	zero,-68(fp)
			index = 0;
 80028a8:	e03ff015 	stw	zero,-64(fp)
			for (i=0; i<10; i++)
 80028ac:	e03fef15 	stw	zero,-68(fp)
 80028b0:	00001906 	br	8002918 <main+0x4c8>
			   index += snprintf(&phone_num[index], 16-index, "%d", User_Phone_Number_Input[i]);
 80028b4:	e0fffa04 	addi	r3,fp,-24
 80028b8:	e0bff017 	ldw	r2,-64(fp)
 80028bc:	1889883a 	add	r4,r3,r2
 80028c0:	00c00404 	movi	r3,16
 80028c4:	e0bff017 	ldw	r2,-64(fp)
 80028c8:	1885c83a 	sub	r2,r3,r2
 80028cc:	100b883a 	mov	r5,r2
 80028d0:	008200b4 	movhi	r2,2050
 80028d4:	10984404 	addi	r2,r2,24848
 80028d8:	e0ffef17 	ldw	r3,-68(fp)
 80028dc:	18c7883a 	add	r3,r3,r3
 80028e0:	18c7883a 	add	r3,r3,r3
 80028e4:	10c5883a 	add	r2,r2,r3
 80028e8:	10800017 	ldw	r2,0(r2)
 80028ec:	018200b4 	movhi	r6,2050
 80028f0:	31897204 	addi	r6,r6,9672
 80028f4:	100f883a 	mov	r7,r2
 80028f8:	80069ec0 	call	80069ec <snprintf>
 80028fc:	1007883a 	mov	r3,r2
 8002900:	e0bff017 	ldw	r2,-64(fp)
 8002904:	10c5883a 	add	r2,r2,r3
 8002908:	e0bff015 	stw	r2,-64(fp)
				index += snprintf(&master_code[index], 16-index, "%d", User_Master_Code[i]);

			char phone_num[16];
			i=0;
			index = 0;
			for (i=0; i<10; i++)
 800290c:	e0bfef17 	ldw	r2,-68(fp)
 8002910:	10800044 	addi	r2,r2,1
 8002914:	e0bfef15 	stw	r2,-68(fp)
 8002918:	e0bfef17 	ldw	r2,-68(fp)
 800291c:	10800290 	cmplti	r2,r2,10
 8002920:	103fe41e 	bne	r2,zero,80028b4 <__alt_data_end+0xfc0028b4>
			   index += snprintf(&phone_num[index], 16-index, "%d", User_Phone_Number_Input[i]);

			// Send out the new code for this box
			Wifi_EnsurePut(1,master_code,"0000","false", phone_num);
 8002924:	e0fff604 	addi	r3,fp,-40
 8002928:	e0bffa04 	addi	r2,fp,-24
 800292c:	d8800015 	stw	r2,0(sp)
 8002930:	01000044 	movi	r4,1
 8002934:	180b883a 	mov	r5,r3
 8002938:	018200b4 	movhi	r6,2050
 800293c:	31897304 	addi	r6,r6,9676
 8002940:	01c200b4 	movhi	r7,2050
 8002944:	39c97504 	addi	r7,r7,9684
 8002948:	80037b00 	call	80037b0 <Wifi_EnsurePut>
			printf("Master Code Sent\n");
 800294c:	010200b4 	movhi	r4,2050
 8002950:	21097704 	addi	r4,r4,9692
 8002954:	80068300 	call	8006830 <puts>
			isInitialized = 1;
 8002958:	00800044 	movi	r2,1
 800295c:	e0bfee15 	stw	r2,-72(fp)
			Security_State = STATE_DRAW_INIT_SCREEN;
 8002960:	e03fed15 	stw	zero,-76(fp)
			break;
 8002964:	0000ca06 	br	8002c90 <main+0x840>
		case STATE_SIGN_IN:
			TS_WaitForRelease();
 8002968:	8002ef80 	call	8002ef8 <TS_WaitForRelease>
			p = TS_GetRelease();
 800296c:	80031840 	call	8003184 <TS_GetRelease>
 8002970:	1009883a 	mov	r4,r2
 8002974:	180b883a 	mov	r5,r3
 8002978:	e13ff415 	stw	r4,-48(fp)
 800297c:	e17ff515 	stw	r5,-44(fp)
			if (Graphics_RectangleTouched(p.x, p.y, log_in_rect)) {
 8002980:	e13ff417 	ldw	r4,-48(fp)
 8002984:	e0fff517 	ldw	r3,-44(fp)
 8002988:	d0a6d917 	ldw	r2,-25756(gp)
 800298c:	180b883a 	mov	r5,r3
 8002990:	100d883a 	mov	r6,r2
 8002994:	80020040 	call	8002004 <Graphics_RectangleTouched>
 8002998:	10000426 	beq	r2,zero,80029ac <main+0x55c>
				//Log In Button was pressed
				Graphics_DrawMasterCodeMenu();
 800299c:	80013e40 	call	80013e4 <Graphics_DrawMasterCodeMenu>
				graphics_field_cursor = 0;
 80029a0:	d026da15 	stw	zero,-25752(gp)
				Security_State = STATE_ENTER_MASTER_CODE;
 80029a4:	00800184 	movi	r2,6
 80029a8:	e0bfed15 	stw	r2,-76(fp)
			}
			if (Graphics_RectangleTouched(p.x, p.y, request_code_rect)) {
 80029ac:	e13ff417 	ldw	r4,-48(fp)
 80029b0:	e0fff517 	ldw	r3,-44(fp)
 80029b4:	d0a6d717 	ldw	r2,-25764(gp)
 80029b8:	180b883a 	mov	r5,r3
 80029bc:	100d883a 	mov	r6,r2
 80029c0:	80020040 	call	8002004 <Graphics_RectangleTouched>
 80029c4:	10000326 	beq	r2,zero,80029d4 <main+0x584>
				//Request Code Button was pressed

				Security_State = STATE_REQUESTED_CODE;
 80029c8:	008001c4 	movi	r2,7
 80029cc:	e0bfed15 	stw	r2,-76(fp)
			}
			break;
 80029d0:	0000af06 	br	8002c90 <main+0x840>
 80029d4:	0000ae06 	br	8002c90 <main+0x840>
		case STATE_REQUESTED_CODE:
			Graphics_DrawMenu();
 80029d8:	80016000 	call	8001600 <Graphics_DrawMenu>
			Security_State = STATE_ENTER_CODE;
 80029dc:	00800204 	movi	r2,8
 80029e0:	e0bfed15 	stw	r2,-76(fp)
			break;
 80029e4:	0000aa06 	br	8002c90 <main+0x840>
		case STATE_ENTER_MASTER_CODE:
			TS_WaitForRelease();
 80029e8:	8002ef80 	call	8002ef8 <TS_WaitForRelease>
			p = TS_GetRelease();
 80029ec:	80031840 	call	8003184 <TS_GetRelease>
 80029f0:	1009883a 	mov	r4,r2
 80029f4:	180b883a 	mov	r5,r3
 80029f8:	e13ff415 	stw	r4,-48(fp)
 80029fc:	e17ff515 	stw	r5,-44(fp)
			button = Graphics_GetNumberPressed(p.x, p.y, MASTERCODELENGTH,
 8002a00:	e13ff417 	ldw	r4,-48(fp)
 8002a04:	e0fff517 	ldw	r3,-44(fp)
 8002a08:	00801284 	movi	r2,74
 8002a0c:	d8800015 	stw	r2,0(sp)
 8002a10:	180b883a 	mov	r5,r3
 8002a14:	01800184 	movi	r6,6
 8002a18:	01c200b4 	movhi	r7,2050
 8002a1c:	39d83a04 	addi	r7,r7,24808
 8002a20:	8001d080 	call	8001d08 <Graphics_GetNumberPressed>
 8002a24:	e0bff215 	stw	r2,-56(fp)
					User_Master_Code, MASTERINDEXLEN);
			if (button == NUMPAD_ENTER
					&& graphics_field_cursor == MASTERCODELENGTH) {
				//Check Against Master Code here.
			}
			if (Graphics_RectangleTouched(p.x, p.y, home_button_rect)) {
 8002a28:	e13ff417 	ldw	r4,-48(fp)
 8002a2c:	e0fff517 	ldw	r3,-44(fp)
 8002a30:	d0a6d617 	ldw	r2,-25768(gp)
 8002a34:	180b883a 	mov	r5,r3
 8002a38:	100d883a 	mov	r6,r2
 8002a3c:	80020040 	call	8002004 <Graphics_RectangleTouched>
 8002a40:	10000126 	beq	r2,zero,8002a48 <main+0x5f8>
				Security_State = STATE_DRAW_INIT_SCREEN;
 8002a44:	e03fed15 	stw	zero,-76(fp)
			}
			printf("Coords: %d, %d\n", p.x, p.y);
 8002a48:	e0fff417 	ldw	r3,-48(fp)
 8002a4c:	e0bff517 	ldw	r2,-44(fp)
 8002a50:	010200b4 	movhi	r4,2050
 8002a54:	21094c04 	addi	r4,r4,9520
 8002a58:	180b883a 	mov	r5,r3
 8002a5c:	100d883a 	mov	r6,r2
 8002a60:	800671c0 	call	800671c <printf>
			printf("Button num: %d\n", Graphics_ButtonNumToNum(button));
 8002a64:	e13ff217 	ldw	r4,-56(fp)
 8002a68:	8001f4c0 	call	8001f4c <Graphics_ButtonNumToNum>
 8002a6c:	010200b4 	movhi	r4,2050
 8002a70:	21095004 	addi	r4,r4,9536
 8002a74:	100b883a 	mov	r5,r2
 8002a78:	800671c0 	call	800671c <printf>
			printf("Master Code: %d,%d,%d,%d,%d,%d\n", User_Master_Code[0],
 8002a7c:	008200b4 	movhi	r2,2050
 8002a80:	10983a04 	addi	r2,r2,24808
 8002a84:	11400017 	ldw	r5,0(r2)
 8002a88:	008200b4 	movhi	r2,2050
 8002a8c:	10983a04 	addi	r2,r2,24808
 8002a90:	11800117 	ldw	r6,4(r2)
 8002a94:	008200b4 	movhi	r2,2050
 8002a98:	10983a04 	addi	r2,r2,24808
 8002a9c:	11c00217 	ldw	r7,8(r2)
 8002aa0:	008200b4 	movhi	r2,2050
 8002aa4:	10983a04 	addi	r2,r2,24808
 8002aa8:	11000317 	ldw	r4,12(r2)
 8002aac:	008200b4 	movhi	r2,2050
 8002ab0:	10983a04 	addi	r2,r2,24808
 8002ab4:	10c00417 	ldw	r3,16(r2)
 8002ab8:	008200b4 	movhi	r2,2050
 8002abc:	10983a04 	addi	r2,r2,24808
 8002ac0:	10800517 	ldw	r2,20(r2)
 8002ac4:	d9000015 	stw	r4,0(sp)
 8002ac8:	d8c00115 	stw	r3,4(sp)
 8002acc:	d8800215 	stw	r2,8(sp)
 8002ad0:	010200b4 	movhi	r4,2050
 8002ad4:	21096504 	addi	r4,r4,9620
 8002ad8:	800671c0 	call	800671c <printf>
					User_Master_Code[1], User_Master_Code[2], User_Master_Code[3],
					User_Master_Code[4], User_Master_Code[5]);
			printf("Cursor length: %d\n", graphics_field_cursor);
 8002adc:	d0a6da17 	ldw	r2,-25752(gp)
 8002ae0:	010200b4 	movhi	r4,2050
 8002ae4:	21096004 	addi	r4,r4,9600
 8002ae8:	100b883a 	mov	r5,r2
 8002aec:	800671c0 	call	800671c <printf>
			break;
 8002af0:	00006706 	br	8002c90 <main+0x840>
		case STATE_ENTER_CODE:
			TS_WaitForRelease();
 8002af4:	8002ef80 	call	8002ef8 <TS_WaitForRelease>
			p = TS_GetRelease();
 8002af8:	80031840 	call	8003184 <TS_GetRelease>
 8002afc:	1009883a 	mov	r4,r2
 8002b00:	180b883a 	mov	r5,r3
 8002b04:	e13ff415 	stw	r4,-48(fp)
 8002b08:	e17ff515 	stw	r5,-44(fp)
			int button = Graphics_GetNumberPressed(p.x, p.y, CODELENGTH,
 8002b0c:	e13ff417 	ldw	r4,-48(fp)
 8002b10:	e0fff517 	ldw	r3,-44(fp)
 8002b14:	00801cc4 	movi	r2,115
 8002b18:	d8800015 	stw	r2,0(sp)
 8002b1c:	180b883a 	mov	r5,r3
 8002b20:	01800104 	movi	r6,4
 8002b24:	01c200b4 	movhi	r7,2050
 8002b28:	39d83604 	addi	r7,r7,24792
 8002b2c:	8001d080 	call	8001d08 <Graphics_GetNumberPressed>
 8002b30:	e0bff315 	stw	r2,-52(fp)
					User_Input, CODEINDEXLEN);
			if (button == NUMPAD_ENTER) {
 8002b34:	e0bff317 	ldw	r2,-52(fp)
 8002b38:	10800258 	cmpnei	r2,r2,9
 8002b3c:	1000071e 	bne	r2,zero,8002b5c <main+0x70c>
				if (Security_CheckCode()) {
 8002b40:	8002d3c0 	call	8002d3c <Security_CheckCode>
 8002b44:	10000326 	beq	r2,zero,8002b54 <main+0x704>
					Security_State = STATE_DRAW_UNLOCK_SCREEN;
 8002b48:	008002c4 	movi	r2,11
 8002b4c:	e0bfed15 	stw	r2,-76(fp)
 8002b50:	00000206 	br	8002b5c <main+0x70c>
				} else {
					Security_State = STATE_DRAW_LOCK_SCREEN;
 8002b54:	00800244 	movi	r2,9
 8002b58:	e0bfed15 	stw	r2,-76(fp)
				}
			}
			printf("Coords: %d, %d\n", p.x, p.y);
 8002b5c:	e0fff417 	ldw	r3,-48(fp)
 8002b60:	e0bff517 	ldw	r2,-44(fp)
 8002b64:	010200b4 	movhi	r4,2050
 8002b68:	21094c04 	addi	r4,r4,9520
 8002b6c:	180b883a 	mov	r5,r3
 8002b70:	100d883a 	mov	r6,r2
 8002b74:	800671c0 	call	800671c <printf>
			printf("Button num: %d\n", Graphics_ButtonNumToNum(button));
 8002b78:	e13ff317 	ldw	r4,-52(fp)
 8002b7c:	8001f4c0 	call	8001f4c <Graphics_ButtonNumToNum>
 8002b80:	010200b4 	movhi	r4,2050
 8002b84:	21095004 	addi	r4,r4,9536
 8002b88:	100b883a 	mov	r5,r2
 8002b8c:	800671c0 	call	800671c <printf>
			printf("User Code: %d,%d,%d,%d\n", User_Input[0], User_Input[1],
 8002b90:	008200b4 	movhi	r2,2050
 8002b94:	10983604 	addi	r2,r2,24792
 8002b98:	11400017 	ldw	r5,0(r2)
 8002b9c:	008200b4 	movhi	r2,2050
 8002ba0:	10983604 	addi	r2,r2,24792
 8002ba4:	11800117 	ldw	r6,4(r2)
 8002ba8:	008200b4 	movhi	r2,2050
 8002bac:	10983604 	addi	r2,r2,24792
 8002bb0:	10c00217 	ldw	r3,8(r2)
 8002bb4:	008200b4 	movhi	r2,2050
 8002bb8:	10983604 	addi	r2,r2,24792
 8002bbc:	10800317 	ldw	r2,12(r2)
 8002bc0:	d8800015 	stw	r2,0(sp)
 8002bc4:	010200b4 	movhi	r4,2050
 8002bc8:	21097c04 	addi	r4,r4,9712
 8002bcc:	180f883a 	mov	r7,r3
 8002bd0:	800671c0 	call	800671c <printf>
					User_Input[2], User_Input[3]);
			printf("Cursor length: %d\n", graphics_field_cursor);
 8002bd4:	d0a6da17 	ldw	r2,-25752(gp)
 8002bd8:	010200b4 	movhi	r4,2050
 8002bdc:	21096004 	addi	r4,r4,9600
 8002be0:	100b883a 	mov	r5,r2
 8002be4:	800671c0 	call	800671c <printf>
			break;
 8002be8:	00002906 	br	8002c90 <main+0x840>
		case STATE_DRAW_LOCK_SCREEN:
			Graphics_DrawLockScreen();
 8002bec:	80015740 	call	8001574 <Graphics_DrawLockScreen>
			Security_State = STATE_LOCK_SCREEN;
 8002bf0:	00800284 	movi	r2,10
 8002bf4:	e0bfed15 	stw	r2,-76(fp)
			break;
 8002bf8:	00002506 	br	8002c90 <main+0x840>
		case STATE_LOCK_SCREEN:
			TS_WaitForRelease();
 8002bfc:	8002ef80 	call	8002ef8 <TS_WaitForRelease>
			p = TS_GetRelease();
 8002c00:	80031840 	call	8003184 <TS_GetRelease>
 8002c04:	1009883a 	mov	r4,r2
 8002c08:	180b883a 	mov	r5,r3
 8002c0c:	e13ff415 	stw	r4,-48(fp)
 8002c10:	e17ff515 	stw	r5,-44(fp)
			if (Graphics_InRectangle(p.x, p.y, home_button_rect)) {
 8002c14:	e13ff417 	ldw	r4,-48(fp)
 8002c18:	e0fff517 	ldw	r3,-44(fp)
 8002c1c:	d0a6d617 	ldw	r2,-25768(gp)
 8002c20:	180b883a 	mov	r5,r3
 8002c24:	100d883a 	mov	r6,r2
 8002c28:	8001f900 	call	8001f90 <Graphics_InRectangle>
 8002c2c:	10000226 	beq	r2,zero,8002c38 <main+0x7e8>
				Security_State = STATE_DRAW_INIT_SCREEN;
 8002c30:	e03fed15 	stw	zero,-76(fp)
			}
			break;
 8002c34:	00001606 	br	8002c90 <main+0x840>
 8002c38:	00001506 	br	8002c90 <main+0x840>
		case STATE_DRAW_UNLOCK_SCREEN:
			Graphics_DrawUnlockScreen();
 8002c3c:	80014cc0 	call	80014cc <Graphics_DrawUnlockScreen>
			Security_State = STATE_UNLOCK_SCREEN;
 8002c40:	00800304 	movi	r2,12
 8002c44:	e0bfed15 	stw	r2,-76(fp)
			break;
 8002c48:	00001106 	br	8002c90 <main+0x840>
		case STATE_UNLOCK_SCREEN:
			TS_WaitForRelease();
 8002c4c:	8002ef80 	call	8002ef8 <TS_WaitForRelease>
			p = TS_GetRelease();
 8002c50:	80031840 	call	8003184 <TS_GetRelease>
 8002c54:	1009883a 	mov	r4,r2
 8002c58:	180b883a 	mov	r5,r3
 8002c5c:	e13ff415 	stw	r4,-48(fp)
 8002c60:	e17ff515 	stw	r5,-44(fp)
			if (Graphics_InRectangle(p.x, p.y, home_button_rect)) {
 8002c64:	e13ff417 	ldw	r4,-48(fp)
 8002c68:	e0fff517 	ldw	r3,-44(fp)
 8002c6c:	d0a6d617 	ldw	r2,-25768(gp)
 8002c70:	180b883a 	mov	r5,r3
 8002c74:	100d883a 	mov	r6,r2
 8002c78:	8001f900 	call	8001f90 <Graphics_InRectangle>
 8002c7c:	10000226 	beq	r2,zero,8002c88 <main+0x838>
				Security_State = STATE_DRAW_INIT_SCREEN;
 8002c80:	e03fed15 	stw	zero,-76(fp)
			}
			break;
 8002c84:	00000206 	br	8002c90 <main+0x840>
 8002c88:	00000106 	br	8002c90 <main+0x840>
		case STATE_IDLE:
			break;
 8002c8c:	0001883a 	nop
		}
	}
 8002c90:	003e0106 	br	8002498 <__alt_data_end+0xfc002498>

08002c94 <Security_GenerateCode>:
 */
#include <stdlib.h>
#include "security.h"


void Security_GenerateCode() {
 8002c94:	defffd04 	addi	sp,sp,-12
 8002c98:	dfc00215 	stw	ra,8(sp)
 8002c9c:	df000115 	stw	fp,4(sp)
 8002ca0:	df000104 	addi	fp,sp,4
	// Generates a random code
	srand(time(NULL));
 8002ca4:	0009883a 	mov	r4,zero
 8002ca8:	8008fc40 	call	8008fc4 <time>
 8002cac:	1009883a 	mov	r4,r2
 8002cb0:	80068440 	call	8006844 <srand>

	rand() % 10;
 8002cb4:	800685c0 	call	800685c <rand>

	int i;
	for(i=0;i<CODE_LENGTH;i++) {
 8002cb8:	e03fff15 	stw	zero,-4(fp)
 8002cbc:	00001706 	br	8002d1c <Security_GenerateCode+0x88>
		// Security code is randomized
		Security_Code[i] = rand() % 10;
 8002cc0:	800685c0 	call	800685c <rand>
 8002cc4:	1009883a 	mov	r4,r2
 8002cc8:	01400284 	movi	r5,10
 8002ccc:	80040240 	call	8004024 <__modsi3>
 8002cd0:	1009883a 	mov	r4,r2
 8002cd4:	008200b4 	movhi	r2,2050
 8002cd8:	10984004 	addi	r2,r2,24832
 8002cdc:	e0ffff17 	ldw	r3,-4(fp)
 8002ce0:	18c7883a 	add	r3,r3,r3
 8002ce4:	18c7883a 	add	r3,r3,r3
 8002ce8:	10c5883a 	add	r2,r2,r3
 8002cec:	11000015 	stw	r4,0(r2)
		// Input code all set to -1
		User_Input[i] = -1;
 8002cf0:	008200b4 	movhi	r2,2050
 8002cf4:	10983604 	addi	r2,r2,24792
 8002cf8:	e0ffff17 	ldw	r3,-4(fp)
 8002cfc:	18c7883a 	add	r3,r3,r3
 8002d00:	18c7883a 	add	r3,r3,r3
 8002d04:	10c5883a 	add	r2,r2,r3
 8002d08:	00ffffc4 	movi	r3,-1
 8002d0c:	10c00015 	stw	r3,0(r2)
	srand(time(NULL));

	rand() % 10;

	int i;
	for(i=0;i<CODE_LENGTH;i++) {
 8002d10:	e0bfff17 	ldw	r2,-4(fp)
 8002d14:	10800044 	addi	r2,r2,1
 8002d18:	e0bfff15 	stw	r2,-4(fp)
 8002d1c:	e0bfff17 	ldw	r2,-4(fp)
 8002d20:	10800110 	cmplti	r2,r2,4
 8002d24:	103fe61e 	bne	r2,zero,8002cc0 <__alt_data_end+0xfc002cc0>
		// Security code is randomized
		Security_Code[i] = rand() % 10;
		// Input code all set to -1
		User_Input[i] = -1;
	}
}
 8002d28:	e037883a 	mov	sp,fp
 8002d2c:	dfc00117 	ldw	ra,4(sp)
 8002d30:	df000017 	ldw	fp,0(sp)
 8002d34:	dec00204 	addi	sp,sp,8
 8002d38:	f800283a 	ret

08002d3c <Security_CheckCode>:

int Security_CheckCode() {
 8002d3c:	defffe04 	addi	sp,sp,-8
 8002d40:	df000115 	stw	fp,4(sp)
 8002d44:	df000104 	addi	fp,sp,4
	int i;

	for(i=0;i<CODE_LENGTH;i++) {
 8002d48:	e03fff15 	stw	zero,-4(fp)
 8002d4c:	00001406 	br	8002da0 <Security_CheckCode+0x64>
		if(User_Input[i] != Security_Code[i]) {
 8002d50:	008200b4 	movhi	r2,2050
 8002d54:	10983604 	addi	r2,r2,24792
 8002d58:	e0ffff17 	ldw	r3,-4(fp)
 8002d5c:	18c7883a 	add	r3,r3,r3
 8002d60:	18c7883a 	add	r3,r3,r3
 8002d64:	10c5883a 	add	r2,r2,r3
 8002d68:	11000017 	ldw	r4,0(r2)
 8002d6c:	008200b4 	movhi	r2,2050
 8002d70:	10984004 	addi	r2,r2,24832
 8002d74:	e0ffff17 	ldw	r3,-4(fp)
 8002d78:	18c7883a 	add	r3,r3,r3
 8002d7c:	18c7883a 	add	r3,r3,r3
 8002d80:	10c5883a 	add	r2,r2,r3
 8002d84:	10800017 	ldw	r2,0(r2)
 8002d88:	20800226 	beq	r4,r2,8002d94 <Security_CheckCode+0x58>
			// Codes do not match
			return 0;
 8002d8c:	0005883a 	mov	r2,zero
 8002d90:	00000706 	br	8002db0 <Security_CheckCode+0x74>
}

int Security_CheckCode() {
	int i;

	for(i=0;i<CODE_LENGTH;i++) {
 8002d94:	e0bfff17 	ldw	r2,-4(fp)
 8002d98:	10800044 	addi	r2,r2,1
 8002d9c:	e0bfff15 	stw	r2,-4(fp)
 8002da0:	e0bfff17 	ldw	r2,-4(fp)
 8002da4:	10800110 	cmplti	r2,r2,4
 8002da8:	103fe91e 	bne	r2,zero,8002d50 <__alt_data_end+0xfc002d50>
		if(User_Input[i] != Security_Code[i]) {
			// Codes do not match
			return 0;
		}
	}
	return 1;
 8002dac:	00800044 	movi	r2,1
}
 8002db0:	e037883a 	mov	sp,fp
 8002db4:	df000017 	ldw	fp,0(sp)
 8002db8:	dec00104 	addi	sp,sp,4
 8002dbc:	f800283a 	ret

08002dc0 <Security_RegisterOwner>:

int Security_RegisterOwner() {
 8002dc0:	defffe04 	addi	sp,sp,-8
 8002dc4:	dfc00115 	stw	ra,4(sp)
 8002dc8:	df000015 	stw	fp,0(sp)
 8002dcc:	d839883a 	mov	fp,sp
	Wifi_SendCommand();
 8002dd0:	80039000 	call	8003900 <Wifi_SendCommand>
}
 8002dd4:	e037883a 	mov	sp,fp
 8002dd8:	dfc00117 	ldw	ra,4(sp)
 8002ddc:	df000017 	ldw	fp,0(sp)
 8002de0:	dec00204 	addi	sp,sp,8
 8002de4:	f800283a 	ret

08002de8 <TS_Init>:

/*****************************************************************************
**  START OF TOUCHSCREEN
*****************************************************************************/
void TS_Init(void)
{
 8002de8:	defffe04 	addi	sp,sp,-8
 8002dec:	dfc00115 	stw	ra,4(sp)
 8002df0:	df000015 	stw	fp,0(sp)
 8002df4:	d839883a 	mov	fp,sp
	// Reset
	TouchScreen_Control = 0x03;
 8002df8:	00a10034 	movhi	r2,33792
 8002dfc:	10808c04 	addi	r2,r2,560
 8002e00:	00c000c4 	movi	r3,3
 8002e04:	10c00005 	stb	r3,0(r2)

	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// transmitter interrupt disabled
	TouchScreen_Control = 0x15;
 8002e08:	00a10034 	movhi	r2,33792
 8002e0c:	10808c04 	addi	r2,r2,560
 8002e10:	00c00544 	movi	r3,21
 8002e14:	10c00005 	stb	r3,0(r2)

	// set 9600 Baud
	TouchScreen_Baud = 0x07;
 8002e18:	00a10034 	movhi	r2,33792
 8002e1c:	10808d04 	addi	r2,r2,564
 8002e20:	00c001c4 	movi	r3,7
 8002e24:	10c00005 	stb	r3,0(r2)

	// send touchscreen controller an "enable touch" command
	TS_EnableTouch();
 8002e28:	8002e7c0 	call	8002e7c <TS_EnableTouch>
}
 8002e2c:	e037883a 	mov	sp,fp
 8002e30:	dfc00117 	ldw	ra,4(sp)
 8002e34:	df000017 	ldw	fp,0(sp)
 8002e38:	dec00204 	addi	sp,sp,8
 8002e3c:	f800283a 	ret

08002e40 <TS_DisableTouch>:

void TS_DisableTouch( void )
{
 8002e40:	defffe04 	addi	sp,sp,-8
 8002e44:	dfc00115 	stw	ra,4(sp)
 8002e48:	df000015 	stw	fp,0(sp)
 8002e4c:	d839883a 	mov	fp,sp
	// send touchscreen controller a "disable touch" command
	TS_WriteTx(0x55);
 8002e50:	01001544 	movi	r4,85
 8002e54:	80031340 	call	8003134 <TS_WriteTx>
	TS_WriteTx(0x01);
 8002e58:	01000044 	movi	r4,1
 8002e5c:	80031340 	call	8003134 <TS_WriteTx>
	TS_WriteTx(0x13);
 8002e60:	010004c4 	movi	r4,19
 8002e64:	80031340 	call	8003134 <TS_WriteTx>
}
 8002e68:	e037883a 	mov	sp,fp
 8002e6c:	dfc00117 	ldw	ra,4(sp)
 8002e70:	df000017 	ldw	fp,0(sp)
 8002e74:	dec00204 	addi	sp,sp,8
 8002e78:	f800283a 	ret

08002e7c <TS_EnableTouch>:

void TS_EnableTouch( void )
{
 8002e7c:	defffe04 	addi	sp,sp,-8
 8002e80:	dfc00115 	stw	ra,4(sp)
 8002e84:	df000015 	stw	fp,0(sp)
 8002e88:	d839883a 	mov	fp,sp
	// send touchscreen controller an "enable touch" command
	TS_WriteTx(0x55);
 8002e8c:	01001544 	movi	r4,85
 8002e90:	80031340 	call	8003134 <TS_WriteTx>
	TS_WriteTx(0x01);
 8002e94:	01000044 	movi	r4,1
 8002e98:	80031340 	call	8003134 <TS_WriteTx>
	TS_WriteTx(0x12);
 8002e9c:	01000484 	movi	r4,18
 8002ea0:	80031340 	call	8003134 <TS_WriteTx>
}
 8002ea4:	e037883a 	mov	sp,fp
 8002ea8:	dfc00117 	ldw	ra,4(sp)
 8002eac:	df000017 	ldw	fp,0(sp)
 8002eb0:	dec00204 	addi	sp,sp,8
 8002eb4:	f800283a 	ret

08002eb8 <TS_WaitForTouch>:


void TS_WaitForTouch()
{
 8002eb8:	defffe04 	addi	sp,sp,-8
 8002ebc:	dfc00115 	stw	ra,4(sp)
 8002ec0:	df000015 	stw	fp,0(sp)
 8002ec4:	d839883a 	mov	fp,sp
	while(TS_ReadRx() != (char)0x81);
 8002ec8:	0001883a 	nop
 8002ecc:	80030e80 	call	80030e8 <TS_ReadRx>
 8002ed0:	10803fcc 	andi	r2,r2,255
 8002ed4:	1080201c 	xori	r2,r2,128
 8002ed8:	10bfe004 	addi	r2,r2,-128
 8002edc:	10bfe058 	cmpnei	r2,r2,-127
 8002ee0:	103ffa1e 	bne	r2,zero,8002ecc <__alt_data_end+0xfc002ecc>
}
 8002ee4:	e037883a 	mov	sp,fp
 8002ee8:	dfc00117 	ldw	ra,4(sp)
 8002eec:	df000017 	ldw	fp,0(sp)
 8002ef0:	dec00204 	addi	sp,sp,8
 8002ef4:	f800283a 	ret

08002ef8 <TS_WaitForRelease>:

void TS_WaitForRelease()
{
 8002ef8:	defffe04 	addi	sp,sp,-8
 8002efc:	dfc00115 	stw	ra,4(sp)
 8002f00:	df000015 	stw	fp,0(sp)
 8002f04:	d839883a 	mov	fp,sp
	while(TS_ReadRx() != (char)0x80);
 8002f08:	0001883a 	nop
 8002f0c:	80030e80 	call	80030e8 <TS_ReadRx>
 8002f10:	10803fcc 	andi	r2,r2,255
 8002f14:	1080201c 	xori	r2,r2,128
 8002f18:	10bfe004 	addi	r2,r2,-128
 8002f1c:	10bfe018 	cmpnei	r2,r2,-128
 8002f20:	103ffa1e 	bne	r2,zero,8002f0c <__alt_data_end+0xfc002f0c>
}
 8002f24:	e037883a 	mov	sp,fp
 8002f28:	dfc00117 	ldw	ra,4(sp)
 8002f2c:	df000017 	ldw	fp,0(sp)
 8002f30:	dec00204 	addi	sp,sp,8
 8002f34:	f800283a 	ret

08002f38 <TS_GetPress>:


Point TS_GetPress(void)
{
 8002f38:	defff804 	addi	sp,sp,-32
 8002f3c:	dfc00715 	stw	ra,28(sp)
 8002f40:	df000615 	stw	fp,24(sp)
 8002f44:	df000604 	addi	fp,sp,24
	u_int x_cord_upper;

	u_int y_cord_lower;
	u_int y_cord_upper;

	x_cord_lower = TS_ReadRx();
 8002f48:	80030e80 	call	80030e8 <TS_ReadRx>
 8002f4c:	10803fcc 	andi	r2,r2,255
 8002f50:	1080201c 	xori	r2,r2,128
 8002f54:	10bfe004 	addi	r2,r2,-128
 8002f58:	e0bffa15 	stw	r2,-24(fp)
	x_cord_upper = TS_ReadRx();
 8002f5c:	80030e80 	call	80030e8 <TS_ReadRx>
 8002f60:	10803fcc 	andi	r2,r2,255
 8002f64:	1080201c 	xori	r2,r2,128
 8002f68:	10bfe004 	addi	r2,r2,-128
 8002f6c:	e0bffb15 	stw	r2,-20(fp)
	y_cord_lower = TS_ReadRx();
 8002f70:	80030e80 	call	80030e8 <TS_ReadRx>
 8002f74:	10803fcc 	andi	r2,r2,255
 8002f78:	1080201c 	xori	r2,r2,128
 8002f7c:	10bfe004 	addi	r2,r2,-128
 8002f80:	e0bffc15 	stw	r2,-16(fp)
	y_cord_upper = TS_ReadRx();
 8002f84:	80030e80 	call	80030e8 <TS_ReadRx>
 8002f88:	10803fcc 	andi	r2,r2,255
 8002f8c:	1080201c 	xori	r2,r2,128
 8002f90:	10bfe004 	addi	r2,r2,-128
 8002f94:	e0bffd15 	stw	r2,-12(fp)

	p1.x = (double)((x_cord_upper << 7) | x_cord_lower)/4095.0 * 800;
 8002f98:	e0bffb17 	ldw	r2,-20(fp)
 8002f9c:	100691fa 	slli	r3,r2,7
 8002fa0:	e0bffa17 	ldw	r2,-24(fp)
 8002fa4:	1884b03a 	or	r2,r3,r2
 8002fa8:	1009883a 	mov	r4,r2
 8002fac:	8005a380 	call	8005a38 <__floatunsidf>
 8002fb0:	100b883a 	mov	r5,r2
 8002fb4:	180d883a 	mov	r6,r3
 8002fb8:	2809883a 	mov	r4,r5
 8002fbc:	300b883a 	mov	r5,r6
 8002fc0:	000d883a 	mov	r6,zero
 8002fc4:	01d02c34 	movhi	r7,16560
 8002fc8:	39ff8004 	addi	r7,r7,-512
 8002fcc:	80046f40 	call	80046f4 <__divdf3>
 8002fd0:	1009883a 	mov	r4,r2
 8002fd4:	180b883a 	mov	r5,r3
 8002fd8:	2005883a 	mov	r2,r4
 8002fdc:	2807883a 	mov	r3,r5
 8002fe0:	1009883a 	mov	r4,r2
 8002fe4:	180b883a 	mov	r5,r3
 8002fe8:	000d883a 	mov	r6,zero
 8002fec:	01d02274 	movhi	r7,16521
 8002ff0:	80050740 	call	8005074 <__muldf3>
 8002ff4:	1009883a 	mov	r4,r2
 8002ff8:	180b883a 	mov	r5,r3
 8002ffc:	2005883a 	mov	r2,r4
 8003000:	2807883a 	mov	r3,r5
 8003004:	1009883a 	mov	r4,r2
 8003008:	180b883a 	mov	r5,r3
 800300c:	80058e00 	call	80058e0 <__fixdfsi>
 8003010:	e0bffe15 	stw	r2,-8(fp)
	p1.y = (double)((y_cord_upper << 7) | y_cord_lower)/4095.0 * 450;
 8003014:	e0bffd17 	ldw	r2,-12(fp)
 8003018:	100691fa 	slli	r3,r2,7
 800301c:	e0bffc17 	ldw	r2,-16(fp)
 8003020:	1884b03a 	or	r2,r3,r2
 8003024:	1009883a 	mov	r4,r2
 8003028:	8005a380 	call	8005a38 <__floatunsidf>
 800302c:	100b883a 	mov	r5,r2
 8003030:	180d883a 	mov	r6,r3
 8003034:	2809883a 	mov	r4,r5
 8003038:	300b883a 	mov	r5,r6
 800303c:	000d883a 	mov	r6,zero
 8003040:	01d02c34 	movhi	r7,16560
 8003044:	39ff8004 	addi	r7,r7,-512
 8003048:	80046f40 	call	80046f4 <__divdf3>
 800304c:	1009883a 	mov	r4,r2
 8003050:	180b883a 	mov	r5,r3
 8003054:	2005883a 	mov	r2,r4
 8003058:	2807883a 	mov	r3,r5
 800305c:	1009883a 	mov	r4,r2
 8003060:	180b883a 	mov	r5,r3
 8003064:	000d883a 	mov	r6,zero
 8003068:	01d01f34 	movhi	r7,16508
 800306c:	39c80004 	addi	r7,r7,8192
 8003070:	80050740 	call	8005074 <__muldf3>
 8003074:	1009883a 	mov	r4,r2
 8003078:	180b883a 	mov	r5,r3
 800307c:	2005883a 	mov	r2,r4
 8003080:	2807883a 	mov	r3,r5
 8003084:	1009883a 	mov	r4,r2
 8003088:	180b883a 	mov	r5,r3
 800308c:	80058e00 	call	80058e0 <__fixdfsi>
 8003090:	e0bfff15 	stw	r2,-4(fp)

	/*
	 * Change it to -1 so that we can check later if the touch values are valid
	 */
	if(p1.x > 800 || p1.y > 450) {
 8003094:	e0bffe17 	ldw	r2,-8(fp)
 8003098:	1080c848 	cmpgei	r2,r2,801
 800309c:	1000031e 	bne	r2,zero,80030ac <TS_GetPress+0x174>
 80030a0:	e0bfff17 	ldw	r2,-4(fp)
 80030a4:	108070d0 	cmplti	r2,r2,451
 80030a8:	1000041e 	bne	r2,zero,80030bc <TS_GetPress+0x184>
		p1.x = -1;
 80030ac:	00bfffc4 	movi	r2,-1
 80030b0:	e0bffe15 	stw	r2,-8(fp)
		p1.y = -1;
 80030b4:	00bfffc4 	movi	r2,-1
 80030b8:	e0bfff15 	stw	r2,-4(fp)
	}

	return p1;
 80030bc:	e0bffe17 	ldw	r2,-8(fp)
 80030c0:	e0ffff17 	ldw	r3,-4(fp)
 80030c4:	1009883a 	mov	r4,r2
 80030c8:	180b883a 	mov	r5,r3
}
 80030cc:	2005883a 	mov	r2,r4
 80030d0:	2807883a 	mov	r3,r5
 80030d4:	e037883a 	mov	sp,fp
 80030d8:	dfc00117 	ldw	ra,4(sp)
 80030dc:	df000017 	ldw	fp,0(sp)
 80030e0:	dec00204 	addi	sp,sp,8
 80030e4:	f800283a 	ret

080030e8 <TS_ReadRx>:


char TS_ReadRx(void) {
 80030e8:	defffe04 	addi	sp,sp,-8
 80030ec:	df000115 	stw	fp,4(sp)
 80030f0:	df000104 	addi	fp,sp,4
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	while((TouchScreen_Status & 0x01) != 0x01) {}
 80030f4:	0001883a 	nop
 80030f8:	00a10034 	movhi	r2,33792
 80030fc:	10808c04 	addi	r2,r2,560
 8003100:	10800003 	ldbu	r2,0(r2)
 8003104:	10803fcc 	andi	r2,r2,255
 8003108:	1080004c 	andi	r2,r2,1
 800310c:	103ffa26 	beq	r2,zero,80030f8 <__alt_data_end+0xfc0030f8>
	char val = TouchScreen_RxData;
 8003110:	00a10034 	movhi	r2,33792
 8003114:	10808c84 	addi	r2,r2,562
 8003118:	10800003 	ldbu	r2,0(r2)
 800311c:	e0bfff05 	stb	r2,-4(fp)
	return val;
 8003120:	e0bfff03 	ldbu	r2,-4(fp)
}
 8003124:	e037883a 	mov	sp,fp
 8003128:	df000017 	ldw	fp,0(sp)
 800312c:	dec00104 	addi	sp,sp,4
 8003130:	f800283a 	ret

08003134 <TS_WriteTx>:

void TS_WriteTx(char val) {
 8003134:	defffe04 	addi	sp,sp,-8
 8003138:	df000115 	stw	fp,4(sp)
 800313c:	df000104 	addi	fp,sp,4
 8003140:	2005883a 	mov	r2,r4
 8003144:	e0bfff05 	stb	r2,-4(fp)
	// poll tx bit in 6850 status register. Wait for it to become '2'
	while((TouchScreen_Status & 0x02) != 0x02) {}
 8003148:	0001883a 	nop
 800314c:	00a10034 	movhi	r2,33792
 8003150:	10808c04 	addi	r2,r2,560
 8003154:	10800003 	ldbu	r2,0(r2)
 8003158:	10803fcc 	andi	r2,r2,255
 800315c:	1080008c 	andi	r2,r2,2
 8003160:	103ffa26 	beq	r2,zero,800314c <__alt_data_end+0xfc00314c>
	TouchScreen_TxData = val;
 8003164:	00a10034 	movhi	r2,33792
 8003168:	10808c84 	addi	r2,r2,562
 800316c:	e0ffff03 	ldbu	r3,-4(fp)
 8003170:	10c00005 	stb	r3,0(r2)
}
 8003174:	e037883a 	mov	sp,fp
 8003178:	df000017 	ldw	fp,0(sp)
 800317c:	dec00104 	addi	sp,sp,4
 8003180:	f800283a 	ret

08003184 <TS_GetRelease>:


Point TS_GetRelease(void)
{
 8003184:	defff804 	addi	sp,sp,-32
 8003188:	dfc00715 	stw	ra,28(sp)
 800318c:	df000615 	stw	fp,24(sp)
 8003190:	df000604 	addi	fp,sp,24
	u_int x_cord_upper;

	u_int y_cord_lower;
	u_int y_cord_upper;

	x_cord_lower = TS_ReadRx();
 8003194:	80030e80 	call	80030e8 <TS_ReadRx>
 8003198:	10803fcc 	andi	r2,r2,255
 800319c:	1080201c 	xori	r2,r2,128
 80031a0:	10bfe004 	addi	r2,r2,-128
 80031a4:	e0bffa15 	stw	r2,-24(fp)
	x_cord_upper = TS_ReadRx();
 80031a8:	80030e80 	call	80030e8 <TS_ReadRx>
 80031ac:	10803fcc 	andi	r2,r2,255
 80031b0:	1080201c 	xori	r2,r2,128
 80031b4:	10bfe004 	addi	r2,r2,-128
 80031b8:	e0bffb15 	stw	r2,-20(fp)
	y_cord_lower = TS_ReadRx();
 80031bc:	80030e80 	call	80030e8 <TS_ReadRx>
 80031c0:	10803fcc 	andi	r2,r2,255
 80031c4:	1080201c 	xori	r2,r2,128
 80031c8:	10bfe004 	addi	r2,r2,-128
 80031cc:	e0bffc15 	stw	r2,-16(fp)
	y_cord_upper = TS_ReadRx();
 80031d0:	80030e80 	call	80030e8 <TS_ReadRx>
 80031d4:	10803fcc 	andi	r2,r2,255
 80031d8:	1080201c 	xori	r2,r2,128
 80031dc:	10bfe004 	addi	r2,r2,-128
 80031e0:	e0bffd15 	stw	r2,-12(fp)

	p1.x = (double)((x_cord_upper << 7) | x_cord_lower)/4095.0 * 800;
 80031e4:	e0bffb17 	ldw	r2,-20(fp)
 80031e8:	100691fa 	slli	r3,r2,7
 80031ec:	e0bffa17 	ldw	r2,-24(fp)
 80031f0:	1884b03a 	or	r2,r3,r2
 80031f4:	1009883a 	mov	r4,r2
 80031f8:	8005a380 	call	8005a38 <__floatunsidf>
 80031fc:	100b883a 	mov	r5,r2
 8003200:	180d883a 	mov	r6,r3
 8003204:	2809883a 	mov	r4,r5
 8003208:	300b883a 	mov	r5,r6
 800320c:	000d883a 	mov	r6,zero
 8003210:	01d02c34 	movhi	r7,16560
 8003214:	39ff8004 	addi	r7,r7,-512
 8003218:	80046f40 	call	80046f4 <__divdf3>
 800321c:	1009883a 	mov	r4,r2
 8003220:	180b883a 	mov	r5,r3
 8003224:	2005883a 	mov	r2,r4
 8003228:	2807883a 	mov	r3,r5
 800322c:	1009883a 	mov	r4,r2
 8003230:	180b883a 	mov	r5,r3
 8003234:	000d883a 	mov	r6,zero
 8003238:	01d02274 	movhi	r7,16521
 800323c:	80050740 	call	8005074 <__muldf3>
 8003240:	1009883a 	mov	r4,r2
 8003244:	180b883a 	mov	r5,r3
 8003248:	2005883a 	mov	r2,r4
 800324c:	2807883a 	mov	r3,r5
 8003250:	1009883a 	mov	r4,r2
 8003254:	180b883a 	mov	r5,r3
 8003258:	80058e00 	call	80058e0 <__fixdfsi>
 800325c:	e0bffe15 	stw	r2,-8(fp)
	p1.y = (double)((y_cord_upper << 7) | y_cord_lower)/4095.0 * 450;
 8003260:	e0bffd17 	ldw	r2,-12(fp)
 8003264:	100691fa 	slli	r3,r2,7
 8003268:	e0bffc17 	ldw	r2,-16(fp)
 800326c:	1884b03a 	or	r2,r3,r2
 8003270:	1009883a 	mov	r4,r2
 8003274:	8005a380 	call	8005a38 <__floatunsidf>
 8003278:	100b883a 	mov	r5,r2
 800327c:	180d883a 	mov	r6,r3
 8003280:	2809883a 	mov	r4,r5
 8003284:	300b883a 	mov	r5,r6
 8003288:	000d883a 	mov	r6,zero
 800328c:	01d02c34 	movhi	r7,16560
 8003290:	39ff8004 	addi	r7,r7,-512
 8003294:	80046f40 	call	80046f4 <__divdf3>
 8003298:	1009883a 	mov	r4,r2
 800329c:	180b883a 	mov	r5,r3
 80032a0:	2005883a 	mov	r2,r4
 80032a4:	2807883a 	mov	r3,r5
 80032a8:	1009883a 	mov	r4,r2
 80032ac:	180b883a 	mov	r5,r3
 80032b0:	000d883a 	mov	r6,zero
 80032b4:	01d01f34 	movhi	r7,16508
 80032b8:	39c80004 	addi	r7,r7,8192
 80032bc:	80050740 	call	8005074 <__muldf3>
 80032c0:	1009883a 	mov	r4,r2
 80032c4:	180b883a 	mov	r5,r3
 80032c8:	2005883a 	mov	r2,r4
 80032cc:	2807883a 	mov	r3,r5
 80032d0:	1009883a 	mov	r4,r2
 80032d4:	180b883a 	mov	r5,r3
 80032d8:	80058e00 	call	80058e0 <__fixdfsi>
 80032dc:	e0bfff15 	stw	r2,-4(fp)

	/*
	 * Change it to -1 so that we can check later if the touch values are valid
	 */
	if(p1.x > 800 || p1.y > 450) {
 80032e0:	e0bffe17 	ldw	r2,-8(fp)
 80032e4:	1080c848 	cmpgei	r2,r2,801
 80032e8:	1000031e 	bne	r2,zero,80032f8 <TS_GetRelease+0x174>
 80032ec:	e0bfff17 	ldw	r2,-4(fp)
 80032f0:	108070d0 	cmplti	r2,r2,451
 80032f4:	1000041e 	bne	r2,zero,8003308 <TS_GetRelease+0x184>
		p1.x = -1;
 80032f8:	00bfffc4 	movi	r2,-1
 80032fc:	e0bffe15 	stw	r2,-8(fp)
		p1.y = -1;
 8003300:	00bfffc4 	movi	r2,-1
 8003304:	e0bfff15 	stw	r2,-4(fp)
	}
	// calibrated correctly so that it maps to a pixel on screen
	return p1;
 8003308:	e0bffe17 	ldw	r2,-8(fp)
 800330c:	e0ffff17 	ldw	r3,-4(fp)
 8003310:	1009883a 	mov	r4,r2
 8003314:	180b883a 	mov	r5,r3
}
 8003318:	2005883a 	mov	r2,r4
 800331c:	2807883a 	mov	r3,r5
 8003320:	e037883a 	mov	sp,fp
 8003324:	dfc00117 	ldw	ra,4(sp)
 8003328:	df000017 	ldw	fp,0(sp)
 800332c:	dec00204 	addi	sp,sp,8
 8003330:	f800283a 	ret

08003334 <Init_RS232>:


/*****************************************************************************
**  START OF RS232
*****************************************************************************/
void Init_RS232(void) {
 8003334:	deffff04 	addi	sp,sp,-4
 8003338:	df000015 	stw	fp,0(sp)
 800333c:	d839883a 	mov	fp,sp
	// Reset
	RS232_Control = 0x03;
 8003340:	00a10034 	movhi	r2,33792
 8003344:	10808004 	addi	r2,r2,512
 8003348:	00c000c4 	movi	r3,3
 800334c:	10c00005 	stb	r3,0(r2)

	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// transmitter interrupt disabled
	RS232_Control = 0x15;
 8003350:	00a10034 	movhi	r2,33792
 8003354:	10808004 	addi	r2,r2,512
 8003358:	00c00544 	movi	r3,21
 800335c:	10c00005 	stb	r3,0(r2)

	// program baud rate generator to use 115k baud
	RS232_Baud = BAUD_115;
 8003360:	00a10034 	movhi	r2,33792
 8003364:	10808104 	addi	r2,r2,516
 8003368:	00c00044 	movi	r3,1
 800336c:	10c00005 	stb	r3,0(r2)

}
 8003370:	e037883a 	mov	sp,fp
 8003374:	df000017 	ldw	fp,0(sp)
 8003378:	dec00104 	addi	sp,sp,4
 800337c:	f800283a 	ret

08003380 <putcharRS232>:

int putcharRS232(int c) {
 8003380:	defffe04 	addi	sp,sp,-8
 8003384:	df000115 	stw	fp,4(sp)
 8003388:	df000104 	addi	fp,sp,4
 800338c:	e13fff15 	stw	r4,-4(fp)
	// poll Tx bit in 6850 status register. Wait for it to become '1'
	while((RS232_Status & 0x02) != 0x02) {}
 8003390:	0001883a 	nop
 8003394:	00a10034 	movhi	r2,33792
 8003398:	10808004 	addi	r2,r2,512
 800339c:	10800003 	ldbu	r2,0(r2)
 80033a0:	10803fcc 	andi	r2,r2,255
 80033a4:	1080008c 	andi	r2,r2,2
 80033a8:	103ffa26 	beq	r2,zero,8003394 <__alt_data_end+0xfc003394>
	// write 'c' to the 6850 TxData register to output the character

	RS232_TxData = c;
 80033ac:	00a10034 	movhi	r2,33792
 80033b0:	10808084 	addi	r2,r2,514
 80033b4:	e0ffff17 	ldw	r3,-4(fp)
 80033b8:	10c00005 	stb	r3,0(r2)

	return c;
 80033bc:	e0bfff17 	ldw	r2,-4(fp)
}
 80033c0:	e037883a 	mov	sp,fp
 80033c4:	df000017 	ldw	fp,0(sp)
 80033c8:	dec00104 	addi	sp,sp,4
 80033cc:	f800283a 	ret

080033d0 <getcharRS232>:

int getcharRS232( void ) {
 80033d0:	deffff04 	addi	sp,sp,-4
 80033d4:	df000015 	stw	fp,0(sp)
 80033d8:	d839883a 	mov	fp,sp
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	while((RS232_Status & 0x01) != 0x01) {}
 80033dc:	0001883a 	nop
 80033e0:	00a10034 	movhi	r2,33792
 80033e4:	10808004 	addi	r2,r2,512
 80033e8:	10800003 	ldbu	r2,0(r2)
 80033ec:	10803fcc 	andi	r2,r2,255
 80033f0:	1080004c 	andi	r2,r2,1
 80033f4:	103ffa26 	beq	r2,zero,80033e0 <__alt_data_end+0xfc0033e0>
	// read received character from 6850 RxData register
	return RS232_RxData;
 80033f8:	00a10034 	movhi	r2,33792
 80033fc:	10808084 	addi	r2,r2,514
 8003400:	10800003 	ldbu	r2,0(r2)
 8003404:	10803fcc 	andi	r2,r2,255
}
 8003408:	e037883a 	mov	sp,fp
 800340c:	df000017 	ldw	fp,0(sp)
 8003410:	dec00104 	addi	sp,sp,4
 8003414:	f800283a 	ret

08003418 <RS232TestForReceivedData>:

int RS232TestForReceivedData(void) {
 8003418:	deffff04 	addi	sp,sp,-4
 800341c:	df000015 	stw	fp,0(sp)
 8003420:	d839883a 	mov	fp,sp
	// Test Rx bit in 6850 serial comms chip status register
	// if RX bit is set, return TRUE, otherwise return FALSE
	return ((RS232_Status & 0x1) == 0x01);
 8003424:	00a10034 	movhi	r2,33792
 8003428:	10808004 	addi	r2,r2,512
 800342c:	10800003 	ldbu	r2,0(r2)
 8003430:	10803fcc 	andi	r2,r2,255
 8003434:	1080004c 	andi	r2,r2,1
 8003438:	1004c03a 	cmpne	r2,r2,zero
 800343c:	10803fcc 	andi	r2,r2,255
}
 8003440:	e037883a 	mov	sp,fp
 8003444:	df000017 	ldw	fp,0(sp)
 8003448:	dec00104 	addi	sp,sp,4
 800344c:	f800283a 	ret

08003450 <Wifi_Init>:
unsigned char jsonbuf[256];

/*****************************************************************************
** Initialise wifi controller
*****************************************************************************/
void Wifi_Init(void) {
 8003450:	defffd04 	addi	sp,sp,-12
 8003454:	dfc00215 	stw	ra,8(sp)
 8003458:	df000115 	stw	fp,4(sp)
 800345c:	df000104 	addi	fp,sp,4
	// Reset
	Wifi_Control = 0x03;
 8003460:	00a10034 	movhi	r2,33792
 8003464:	10809004 	addi	r2,r2,576
 8003468:	00c000c4 	movi	r3,3
 800346c:	10c00005 	stb	r3,0(r2)

	// set up 6850 Control Register to utilise a divide by 16 clock,
	// set RTS low, use 8 bits of data, no parity, 1 stop bit,
	// transmitter interrupt disabled
	Wifi_Control = 0x55;
 8003470:	00a10034 	movhi	r2,33792
 8003474:	10809004 	addi	r2,r2,576
 8003478:	00c01544 	movi	r3,85
 800347c:	10c00005 	stb	r3,0(r2)

	// set 115200 Baud
	Wifi_Baud = 0x1;
 8003480:	00a10034 	movhi	r2,33792
 8003484:	10809104 	addi	r2,r2,580
 8003488:	00c00044 	movi	r3,1
 800348c:	10c00005 	stb	r3,0(r2)

	usleep(100000);
 8003490:	010000b4 	movhi	r4,2
 8003494:	2121a804 	addi	r4,r4,-31072
 8003498:	8015b900 	call	8015b90 <usleep>

	int i;
	for(i=0;i<10;i++) {
 800349c:	e03fff15 	stw	zero,-4(fp)
 80034a0:	00000606 	br	80034bc <Wifi_Init+0x6c>
		Wifi_SendCommand(" \r\n");
 80034a4:	010200b4 	movhi	r4,2050
 80034a8:	21098204 	addi	r4,r4,9736
 80034ac:	80039000 	call	8003900 <Wifi_SendCommand>
	Wifi_Baud = 0x1;

	usleep(100000);

	int i;
	for(i=0;i<10;i++) {
 80034b0:	e0bfff17 	ldw	r2,-4(fp)
 80034b4:	10800044 	addi	r2,r2,1
 80034b8:	e0bfff15 	stw	r2,-4(fp)
 80034bc:	e0bfff17 	ldw	r2,-4(fp)
 80034c0:	10800290 	cmplti	r2,r2,10
 80034c4:	103ff71e 	bne	r2,zero,80034a4 <__alt_data_end+0xfc0034a4>
		Wifi_SendCommand(" \r\n");
	}



	printf("Wifi inititalised\n");
 80034c8:	010200b4 	movhi	r4,2050
 80034cc:	21098304 	addi	r4,r4,9740
 80034d0:	80068300 	call	8006830 <puts>
}
 80034d4:	e037883a 	mov	sp,fp
 80034d8:	dfc00117 	ldw	ra,4(sp)
 80034dc:	df000017 	ldw	fp,0(sp)
 80034e0:	dec00204 	addi	sp,sp,8
 80034e4:	f800283a 	ret

080034e8 <Wifi_ReadResponse>:


/*****************************************************************************
* Read wifi response into buf for n bytes
*****************************************************************************/
int Wifi_ReadResponse() {
 80034e8:	defffc04 	addi	sp,sp,-16
 80034ec:	dfc00315 	stw	ra,12(sp)
 80034f0:	df000215 	stw	fp,8(sp)
 80034f4:	df000204 	addi	fp,sp,8
	int i;
	char data;
	for(i=0;i<BUF_SIZE;i++) {
 80034f8:	e03ffe15 	stw	zero,-8(fp)
 80034fc:	00001106 	br	8003544 <Wifi_ReadResponse+0x5c>
		data = Wifi_ReadRx();
 8003500:	80039b40 	call	80039b4 <Wifi_ReadRx>
 8003504:	e0bfff05 	stb	r2,-4(fp)
		if(isascii(data)) {
 8003508:	e0bfff07 	ldb	r2,-4(fp)
 800350c:	10000a16 	blt	r2,zero,8003538 <Wifi_ReadResponse+0x50>
			rbuf[i] = data;
 8003510:	e0ffff03 	ldbu	r3,-4(fp)
 8003514:	008200b4 	movhi	r2,2050
 8003518:	10988e04 	addi	r2,r2,25144
 800351c:	e13ffe17 	ldw	r4,-8(fp)
 8003520:	1105883a 	add	r2,r2,r4
 8003524:	10c00005 	stb	r3,0(r2)
			if(data == '>')
 8003528:	e0bfff07 	ldb	r2,-4(fp)
 800352c:	10800f98 	cmpnei	r2,r2,62
 8003530:	1000011e 	bne	r2,zero,8003538 <Wifi_ReadResponse+0x50>
				break;
 8003534:	00000606 	br	8003550 <Wifi_ReadResponse+0x68>
* Read wifi response into buf for n bytes
*****************************************************************************/
int Wifi_ReadResponse() {
	int i;
	char data;
	for(i=0;i<BUF_SIZE;i++) {
 8003538:	e0bffe17 	ldw	r2,-8(fp)
 800353c:	10800044 	addi	r2,r2,1
 8003540:	e0bffe15 	stw	r2,-8(fp)
 8003544:	e0bffe17 	ldw	r2,-8(fp)
 8003548:	10808010 	cmplti	r2,r2,512
 800354c:	103fec1e 	bne	r2,zero,8003500 <__alt_data_end+0xfc003500>
			rbuf[i] = data;
			if(data == '>')
				break;
		}
	}
	rbuf[i]='\0';
 8003550:	008200b4 	movhi	r2,2050
 8003554:	10988e04 	addi	r2,r2,25144
 8003558:	e0fffe17 	ldw	r3,-8(fp)
 800355c:	10c5883a 	add	r2,r2,r3
 8003560:	10000005 	stb	zero,0(r2)
	printf("%s\n",jsonbuf);
 8003564:	010200b4 	movhi	r4,2050
 8003568:	21184e04 	addi	r4,r4,24888
 800356c:	80068300 	call	8006830 <puts>
	return i;
 8003570:	e0bffe17 	ldw	r2,-8(fp)
}
 8003574:	e037883a 	mov	sp,fp
 8003578:	dfc00117 	ldw	ra,4(sp)
 800357c:	df000017 	ldw	fp,0(sp)
 8003580:	dec00204 	addi	sp,sp,8
 8003584:	f800283a 	ret

08003588 <Wifi_PrintResponse>:

/*****************************************************************************
* Wifi print response
*****************************************************************************/
int Wifi_PrintResponse() {
 8003588:	defffe04 	addi	sp,sp,-8
 800358c:	dfc00115 	stw	ra,4(sp)
 8003590:	df000015 	stw	fp,0(sp)
 8003594:	d839883a 	mov	fp,sp
	printf("%s",rbuf);
 8003598:	010200b4 	movhi	r4,2050
 800359c:	21098804 	addi	r4,r4,9760
 80035a0:	014200b4 	movhi	r5,2050
 80035a4:	29588e04 	addi	r5,r5,25144
 80035a8:	800671c0 	call	800671c <printf>
}
 80035ac:	e037883a 	mov	sp,fp
 80035b0:	dfc00117 	ldw	ra,4(sp)
 80035b4:	df000017 	ldw	fp,0(sp)
 80035b8:	dec00204 	addi	sp,sp,8
 80035bc:	f800283a 	ret

080035c0 <Wifi_CopyBuffer>:

/*****************************************************************************
* Copy over nbytes from rbuf to to cbuf
* *****************************************************************************/
void Wifi_CopyBuffer(int nbytes) {
 80035c0:	defffc04 	addi	sp,sp,-16
 80035c4:	dfc00315 	stw	ra,12(sp)
 80035c8:	df000215 	stw	fp,8(sp)
 80035cc:	df000204 	addi	fp,sp,8
 80035d0:	e13fff15 	stw	r4,-4(fp)
	// Clear the original dest
	Wifi_ClearBuffer(cbuf);
 80035d4:	010200b4 	movhi	r4,2050
 80035d8:	21190e04 	addi	r4,r4,25656
 80035dc:	800363c0 	call	800363c <Wifi_ClearBuffer>
	int i;
	for(i=0;i<nbytes;i++) {
 80035e0:	e03ffe15 	stw	zero,-8(fp)
 80035e4:	00000d06 	br	800361c <Wifi_CopyBuffer+0x5c>
		cbuf[i] = rbuf[i];
 80035e8:	008200b4 	movhi	r2,2050
 80035ec:	10988e04 	addi	r2,r2,25144
 80035f0:	e0fffe17 	ldw	r3,-8(fp)
 80035f4:	10c5883a 	add	r2,r2,r3
 80035f8:	10c00003 	ldbu	r3,0(r2)
 80035fc:	008200b4 	movhi	r2,2050
 8003600:	10990e04 	addi	r2,r2,25656
 8003604:	e13ffe17 	ldw	r4,-8(fp)
 8003608:	1105883a 	add	r2,r2,r4
 800360c:	10c00005 	stb	r3,0(r2)
* *****************************************************************************/
void Wifi_CopyBuffer(int nbytes) {
	// Clear the original dest
	Wifi_ClearBuffer(cbuf);
	int i;
	for(i=0;i<nbytes;i++) {
 8003610:	e0bffe17 	ldw	r2,-8(fp)
 8003614:	10800044 	addi	r2,r2,1
 8003618:	e0bffe15 	stw	r2,-8(fp)
 800361c:	e0fffe17 	ldw	r3,-8(fp)
 8003620:	e0bfff17 	ldw	r2,-4(fp)
 8003624:	18bff016 	blt	r3,r2,80035e8 <__alt_data_end+0xfc0035e8>
		cbuf[i] = rbuf[i];
	}
}
 8003628:	e037883a 	mov	sp,fp
 800362c:	dfc00117 	ldw	ra,4(sp)
 8003630:	df000017 	ldw	fp,0(sp)
 8003634:	dec00204 	addi	sp,sp,8
 8003638:	f800283a 	ret

0800363c <Wifi_ClearBuffer>:

/*****************************************************************************
* Clear buffers BUF_SIZE
******************************************************************************/
void Wifi_ClearBuffer(unsigned char* buf) {
 800363c:	defffd04 	addi	sp,sp,-12
 8003640:	df000215 	stw	fp,8(sp)
 8003644:	df000204 	addi	fp,sp,8
 8003648:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i=0;i<BUF_SIZE;i++) {
 800364c:	e03ffe15 	stw	zero,-8(fp)
 8003650:	00000706 	br	8003670 <Wifi_ClearBuffer+0x34>
		buf[i] = '\0';
 8003654:	e0bffe17 	ldw	r2,-8(fp)
 8003658:	e0ffff17 	ldw	r3,-4(fp)
 800365c:	1885883a 	add	r2,r3,r2
 8003660:	10000005 	stb	zero,0(r2)
/*****************************************************************************
* Clear buffers BUF_SIZE
******************************************************************************/
void Wifi_ClearBuffer(unsigned char* buf) {
	int i;
	for(i=0;i<BUF_SIZE;i++) {
 8003664:	e0bffe17 	ldw	r2,-8(fp)
 8003668:	10800044 	addi	r2,r2,1
 800366c:	e0bffe15 	stw	r2,-8(fp)
 8003670:	e0bffe17 	ldw	r2,-8(fp)
 8003674:	10808010 	cmplti	r2,r2,512
 8003678:	103ff61e 	bne	r2,zero,8003654 <__alt_data_end+0xfc003654>
		buf[i] = '\0';
	}
}
 800367c:	e037883a 	mov	sp,fp
 8003680:	df000017 	ldw	fp,0(sp)
 8003684:	dec00104 	addi	sp,sp,4
 8003688:	f800283a 	ret

0800368c <Wifi_EnsureConnection>:

/*****************************************************************************
* Keeps sending check wifi until we have connected
******************************************************************************/
void Wifi_EnsureConnection() {
 800368c:	defffe04 	addi	sp,sp,-8
 8003690:	dfc00115 	stw	ra,4(sp)
 8003694:	df000015 	stw	fp,0(sp)
 8003698:	d839883a 	mov	fp,sp
	Wifi_SendCommand("check_wifi()\r\n");
 800369c:	010200b4 	movhi	r4,2050
 80036a0:	21098904 	addi	r4,r4,9764
 80036a4:	80039000 	call	8003900 <Wifi_SendCommand>
	Wifi_ReadResponse();
 80036a8:	80034e80 	call	80034e8 <Wifi_ReadResponse>
	printf("%s\n",rbuf);
 80036ac:	010200b4 	movhi	r4,2050
 80036b0:	21188e04 	addi	r4,r4,25144
 80036b4:	80068300 	call	8006830 <puts>
	while(strchr(rbuf,'!') == NULL) {
 80036b8:	00000a06 	br	80036e4 <Wifi_EnsureConnection+0x58>
		// Go to sleep and try again in a bit
		usleep(500000);
 80036bc:	01000234 	movhi	r4,8
 80036c0:	21284804 	addi	r4,r4,-24288
 80036c4:	8015b900 	call	8015b90 <usleep>
		Wifi_SendCommand("check_wifi()\r\n");
 80036c8:	010200b4 	movhi	r4,2050
 80036cc:	21098904 	addi	r4,r4,9764
 80036d0:	80039000 	call	8003900 <Wifi_SendCommand>
		Wifi_ReadResponse();
 80036d4:	80034e80 	call	80034e8 <Wifi_ReadResponse>
		printf("%s\n",rbuf);
 80036d8:	010200b4 	movhi	r4,2050
 80036dc:	21188e04 	addi	r4,r4,25144
 80036e0:	80068300 	call	8006830 <puts>
******************************************************************************/
void Wifi_EnsureConnection() {
	Wifi_SendCommand("check_wifi()\r\n");
	Wifi_ReadResponse();
	printf("%s\n",rbuf);
	while(strchr(rbuf,'!') == NULL) {
 80036e4:	010200b4 	movhi	r4,2050
 80036e8:	21188e04 	addi	r4,r4,25144
 80036ec:	01400844 	movi	r5,33
 80036f0:	8006b940 	call	8006b94 <strchr>
 80036f4:	103ff126 	beq	r2,zero,80036bc <__alt_data_end+0xfc0036bc>
		usleep(500000);
		Wifi_SendCommand("check_wifi()\r\n");
		Wifi_ReadResponse();
		printf("%s\n",rbuf);
	}
}
 80036f8:	e037883a 	mov	sp,fp
 80036fc:	dfc00117 	ldw	ra,4(sp)
 8003700:	df000017 	ldw	fp,0(sp)
 8003704:	dec00204 	addi	sp,sp,8
 8003708:	f800283a 	ret

0800370c <Wifi_EnsureGet>:

/*****************************************************************************
* Keep sending get requests until we get a response
******************************************************************************/
void Wifi_EnsureGet(int pk) {
 800370c:	defff904 	addi	sp,sp,-28
 8003710:	dfc00615 	stw	ra,24(sp)
 8003714:	df000515 	stw	fp,20(sp)
 8003718:	df000504 	addi	fp,sp,20
 800371c:	e13fff15 	stw	r4,-4(fp)
	char buf[16];
	snprintf(buf, sizeof buf, "send_get(%d)\r\n", pk);
 8003720:	e13ffb04 	addi	r4,fp,-20
 8003724:	01400404 	movi	r5,16
 8003728:	018200b4 	movhi	r6,2050
 800372c:	31898d04 	addi	r6,r6,9780
 8003730:	e1ffff17 	ldw	r7,-4(fp)
 8003734:	80069ec0 	call	80069ec <snprintf>
	Wifi_SendCommand(buf);
 8003738:	e13ffb04 	addi	r4,fp,-20
 800373c:	80039000 	call	8003900 <Wifi_SendCommand>
	Wifi_ReadResponse();
 8003740:	80034e80 	call	80034e8 <Wifi_ReadResponse>
	while(Wifi_ExtractJson(rbuf, jsonbuf) == EJSON && strlen(jsonbuf) != 79) {
 8003744:	00000306 	br	8003754 <Wifi_EnsureGet+0x48>
		Wifi_SendCommand(buf);
 8003748:	e13ffb04 	addi	r4,fp,-20
 800374c:	80039000 	call	8003900 <Wifi_SendCommand>
		Wifi_ReadResponse();
 8003750:	80034e80 	call	80034e8 <Wifi_ReadResponse>
void Wifi_EnsureGet(int pk) {
	char buf[16];
	snprintf(buf, sizeof buf, "send_get(%d)\r\n", pk);
	Wifi_SendCommand(buf);
	Wifi_ReadResponse();
	while(Wifi_ExtractJson(rbuf, jsonbuf) == EJSON && strlen(jsonbuf) != 79) {
 8003754:	010200b4 	movhi	r4,2050
 8003758:	21188e04 	addi	r4,r4,25144
 800375c:	014200b4 	movhi	r5,2050
 8003760:	29584e04 	addi	r5,r5,24888
 8003764:	8003a4c0 	call	8003a4c <Wifi_ExtractJson>
 8003768:	10800058 	cmpnei	r2,r2,1
 800376c:	1000051e 	bne	r2,zero,8003784 <Wifi_EnsureGet+0x78>
 8003770:	010200b4 	movhi	r4,2050
 8003774:	21184e04 	addi	r4,r4,24888
 8003778:	8006e040 	call	8006e04 <strlen>
 800377c:	108013d8 	cmpnei	r2,r2,79
 8003780:	103ff11e 	bne	r2,zero,8003748 <__alt_data_end+0xfc003748>
		Wifi_SendCommand(buf);
		Wifi_ReadResponse();
	}

	printf("JSON GET BUFFER BELOW:\n");
 8003784:	010200b4 	movhi	r4,2050
 8003788:	21099104 	addi	r4,r4,9796
 800378c:	80068300 	call	8006830 <puts>
	printf("%s\n",jsonbuf);
 8003790:	010200b4 	movhi	r4,2050
 8003794:	21184e04 	addi	r4,r4,24888
 8003798:	80068300 	call	8006830 <puts>
}
 800379c:	e037883a 	mov	sp,fp
 80037a0:	dfc00117 	ldw	ra,4(sp)
 80037a4:	df000017 	ldw	fp,0(sp)
 80037a8:	dec00204 	addi	sp,sp,8
 80037ac:	f800283a 	ret

080037b0 <Wifi_EnsurePut>:

/*****************************************************************************
* Keep sending post requests until we get a response
* Should only be used when registering
******************************************************************************/
void Wifi_EnsurePut(int pk, const char *masterpw, const char *pw, const char *isconfirmed, const char *phonenum) {
 80037b0:	deffe604 	addi	sp,sp,-104
 80037b4:	dfc01915 	stw	ra,100(sp)
 80037b8:	df001815 	stw	fp,96(sp)
 80037bc:	df001804 	addi	fp,sp,96
 80037c0:	e13ffc15 	stw	r4,-16(fp)
 80037c4:	e17ffd15 	stw	r5,-12(fp)
 80037c8:	e1bffe15 	stw	r6,-8(fp)
 80037cc:	e1ffff15 	stw	r7,-4(fp)
	char buf[64];
	snprintf(buf, sizeof buf, "send_put(%d,\"%s\",\"%s\",\"%s\",\"%s\")\r\n", pk, masterpw, pw, isconfirmed, phonenum);
 80037d0:	e0bffd17 	ldw	r2,-12(fp)
 80037d4:	d8800015 	stw	r2,0(sp)
 80037d8:	e0bffe17 	ldw	r2,-8(fp)
 80037dc:	d8800115 	stw	r2,4(sp)
 80037e0:	e0bfff17 	ldw	r2,-4(fp)
 80037e4:	d8800215 	stw	r2,8(sp)
 80037e8:	e0800217 	ldw	r2,8(fp)
 80037ec:	d8800315 	stw	r2,12(sp)
 80037f0:	e13fec04 	addi	r4,fp,-80
 80037f4:	01401004 	movi	r5,64
 80037f8:	018200b4 	movhi	r6,2050
 80037fc:	31899704 	addi	r6,r6,9820
 8003800:	e1fffc17 	ldw	r7,-16(fp)
 8003804:	80069ec0 	call	80069ec <snprintf>
	Wifi_SendCommand(buf);
 8003808:	e13fec04 	addi	r4,fp,-80
 800380c:	80039000 	call	8003900 <Wifi_SendCommand>
	Wifi_ReadResponse();
 8003810:	80034e80 	call	80034e8 <Wifi_ReadResponse>
	while(Wifi_ExtractJson(rbuf, jsonbuf) == EJSON && strlen(jsonbuf) != 79) {
 8003814:	00000306 	br	8003824 <Wifi_EnsurePut+0x74>
		Wifi_SendCommand(buf);
 8003818:	e13fec04 	addi	r4,fp,-80
 800381c:	80039000 	call	8003900 <Wifi_SendCommand>
		Wifi_ReadResponse();
 8003820:	80034e80 	call	80034e8 <Wifi_ReadResponse>
void Wifi_EnsurePut(int pk, const char *masterpw, const char *pw, const char *isconfirmed, const char *phonenum) {
	char buf[64];
	snprintf(buf, sizeof buf, "send_put(%d,\"%s\",\"%s\",\"%s\",\"%s\")\r\n", pk, masterpw, pw, isconfirmed, phonenum);
	Wifi_SendCommand(buf);
	Wifi_ReadResponse();
	while(Wifi_ExtractJson(rbuf, jsonbuf) == EJSON && strlen(jsonbuf) != 79) {
 8003824:	010200b4 	movhi	r4,2050
 8003828:	21188e04 	addi	r4,r4,25144
 800382c:	014200b4 	movhi	r5,2050
 8003830:	29584e04 	addi	r5,r5,24888
 8003834:	8003a4c0 	call	8003a4c <Wifi_ExtractJson>
 8003838:	10800058 	cmpnei	r2,r2,1
 800383c:	1000051e 	bne	r2,zero,8003854 <Wifi_EnsurePut+0xa4>
 8003840:	010200b4 	movhi	r4,2050
 8003844:	21184e04 	addi	r4,r4,24888
 8003848:	8006e040 	call	8006e04 <strlen>
 800384c:	108013d8 	cmpnei	r2,r2,79
 8003850:	103ff11e 	bne	r2,zero,8003818 <__alt_data_end+0xfc003818>
		Wifi_SendCommand(buf);
		Wifi_ReadResponse();
	}

	printf("JSON PUT BUFFER BELOW:\n");
 8003854:	010200b4 	movhi	r4,2050
 8003858:	2109a004 	addi	r4,r4,9856
 800385c:	80068300 	call	8006830 <puts>
	printf("%s\n",jsonbuf);
 8003860:	010200b4 	movhi	r4,2050
 8003864:	21184e04 	addi	r4,r4,24888
 8003868:	80068300 	call	8006830 <puts>
}
 800386c:	e037883a 	mov	sp,fp
 8003870:	dfc00117 	ldw	ra,4(sp)
 8003874:	df000017 	ldw	fp,0(sp)
 8003878:	dec00204 	addi	sp,sp,8
 800387c:	f800283a 	ret

08003880 <Wifi_WaitReady>:

/*****************************************************************************
* Wait until ready for command
*****************************************************************************/
void Wifi_WaitReady(void) {
 8003880:	defffd04 	addi	sp,sp,-12
 8003884:	dfc00215 	stw	ra,8(sp)
 8003888:	df000115 	stw	fp,4(sp)
 800388c:	df000104 	addi	fp,sp,4
	char val = Wifi_ReadRx();
 8003890:	80039b40 	call	80039b4 <Wifi_ReadRx>
 8003894:	e0bfff05 	stb	r2,-4(fp)
	if(isascii(val)) {
 8003898:	e0bfff07 	ldb	r2,-4(fp)
 800389c:	10000316 	blt	r2,zero,80038ac <Wifi_WaitReady+0x2c>
		printf("%c",val);
 80038a0:	e0bfff07 	ldb	r2,-4(fp)
 80038a4:	1009883a 	mov	r4,r2
 80038a8:	80067600 	call	8006760 <putchar>
	}
	// keep reading the incoming data
	while(val != '>') {
 80038ac:	00000706 	br	80038cc <Wifi_WaitReady+0x4c>
		val = Wifi_ReadRx();
 80038b0:	80039b40 	call	80039b4 <Wifi_ReadRx>
 80038b4:	e0bfff05 	stb	r2,-4(fp)
		if(isascii(val)) {
 80038b8:	e0bfff07 	ldb	r2,-4(fp)
 80038bc:	10000316 	blt	r2,zero,80038cc <Wifi_WaitReady+0x4c>
			printf("%c",val);
 80038c0:	e0bfff07 	ldb	r2,-4(fp)
 80038c4:	1009883a 	mov	r4,r2
 80038c8:	80067600 	call	8006760 <putchar>
	char val = Wifi_ReadRx();
	if(isascii(val)) {
		printf("%c",val);
	}
	// keep reading the incoming data
	while(val != '>') {
 80038cc:	e0bfff07 	ldb	r2,-4(fp)
 80038d0:	10800f98 	cmpnei	r2,r2,62
 80038d4:	103ff61e 	bne	r2,zero,80038b0 <__alt_data_end+0xfc0038b0>
		val = Wifi_ReadRx();
		if(isascii(val)) {
			printf("%c",val);
		}
	}
	Wifi_SendCommand("\r\n");
 80038d8:	010200b4 	movhi	r4,2050
 80038dc:	2109a604 	addi	r4,r4,9880
 80038e0:	80039000 	call	8003900 <Wifi_SendCommand>
	printf('\n');
 80038e4:	01000284 	movi	r4,10
 80038e8:	800671c0 	call	800671c <printf>
}
 80038ec:	e037883a 	mov	sp,fp
 80038f0:	dfc00117 	ldw	ra,4(sp)
 80038f4:	df000017 	ldw	fp,0(sp)
 80038f8:	dec00204 	addi	sp,sp,8
 80038fc:	f800283a 	ret

08003900 <Wifi_SendCommand>:


/*****************************************************************************
* Send a command should end in \r\n
*****************************************************************************/
void Wifi_SendCommand(const char * command) {
 8003900:	defffc04 	addi	sp,sp,-16
 8003904:	dfc00315 	stw	ra,12(sp)
 8003908:	df000215 	stw	fp,8(sp)
 800390c:	df000204 	addi	fp,sp,8
 8003910:	e13fff15 	stw	r4,-4(fp)
	// Clear the response buffer before each command
	Wifi_ClearBuffer(rbuf);
 8003914:	010200b4 	movhi	r4,2050
 8003918:	21188e04 	addi	r4,r4,25144
 800391c:	800363c0 	call	800363c <Wifi_ClearBuffer>
	int cur_1=0;
 8003920:	e03ffe15 	stw	zero,-8(fp)
	while(command[cur_1] != '\n') {
 8003924:	00000c06 	br	8003958 <Wifi_SendCommand+0x58>
		Wifi_WriteTx(command[cur_1]);
 8003928:	e0bffe17 	ldw	r2,-8(fp)
 800392c:	e0ffff17 	ldw	r3,-4(fp)
 8003930:	1885883a 	add	r2,r3,r2
 8003934:	10800003 	ldbu	r2,0(r2)
 8003938:	10803fcc 	andi	r2,r2,255
 800393c:	1080201c 	xori	r2,r2,128
 8003940:	10bfe004 	addi	r2,r2,-128
 8003944:	1009883a 	mov	r4,r2
 8003948:	80039fc0 	call	80039fc <Wifi_WriteTx>
		cur_1++;
 800394c:	e0bffe17 	ldw	r2,-8(fp)
 8003950:	10800044 	addi	r2,r2,1
 8003954:	e0bffe15 	stw	r2,-8(fp)
*****************************************************************************/
void Wifi_SendCommand(const char * command) {
	// Clear the response buffer before each command
	Wifi_ClearBuffer(rbuf);
	int cur_1=0;
	while(command[cur_1] != '\n') {
 8003958:	e0bffe17 	ldw	r2,-8(fp)
 800395c:	e0ffff17 	ldw	r3,-4(fp)
 8003960:	1885883a 	add	r2,r3,r2
 8003964:	10800003 	ldbu	r2,0(r2)
 8003968:	10803fcc 	andi	r2,r2,255
 800396c:	1080201c 	xori	r2,r2,128
 8003970:	10bfe004 	addi	r2,r2,-128
 8003974:	10800298 	cmpnei	r2,r2,10
 8003978:	103feb1e 	bne	r2,zero,8003928 <__alt_data_end+0xfc003928>
		Wifi_WriteTx(command[cur_1]);
		cur_1++;
	}
	Wifi_WriteTx(command[cur_1]);
 800397c:	e0bffe17 	ldw	r2,-8(fp)
 8003980:	e0ffff17 	ldw	r3,-4(fp)
 8003984:	1885883a 	add	r2,r3,r2
 8003988:	10800003 	ldbu	r2,0(r2)
 800398c:	10803fcc 	andi	r2,r2,255
 8003990:	1080201c 	xori	r2,r2,128
 8003994:	10bfe004 	addi	r2,r2,-128
 8003998:	1009883a 	mov	r4,r2
 800399c:	80039fc0 	call	80039fc <Wifi_WriteTx>
}
 80039a0:	e037883a 	mov	sp,fp
 80039a4:	dfc00117 	ldw	ra,4(sp)
 80039a8:	df000017 	ldw	fp,0(sp)
 80039ac:	dec00204 	addi	sp,sp,8
 80039b0:	f800283a 	ret

080039b4 <Wifi_ReadRx>:


/*****************************************************************************
* Read Rx
*****************************************************************************/
int Wifi_ReadRx(void) {
 80039b4:	deffff04 	addi	sp,sp,-4
 80039b8:	df000015 	stw	fp,0(sp)
 80039bc:	d839883a 	mov	fp,sp
	// poll Rx bit in 6850 status register. Wait for it to become '1'
	while((Wifi_Status & 0x01) != 0x01) {}
 80039c0:	0001883a 	nop
 80039c4:	00a10034 	movhi	r2,33792
 80039c8:	10809004 	addi	r2,r2,576
 80039cc:	10800003 	ldbu	r2,0(r2)
 80039d0:	10803fcc 	andi	r2,r2,255
 80039d4:	1080004c 	andi	r2,r2,1
 80039d8:	103ffa26 	beq	r2,zero,80039c4 <__alt_data_end+0xfc0039c4>
	return Wifi_RxData;
 80039dc:	00a10034 	movhi	r2,33792
 80039e0:	10809084 	addi	r2,r2,578
 80039e4:	10800003 	ldbu	r2,0(r2)
 80039e8:	10803fcc 	andi	r2,r2,255
}
 80039ec:	e037883a 	mov	sp,fp
 80039f0:	df000017 	ldw	fp,0(sp)
 80039f4:	dec00104 	addi	sp,sp,4
 80039f8:	f800283a 	ret

080039fc <Wifi_WriteTx>:


/*****************************************************************************
* Write Tx
*****************************************************************************/
void Wifi_WriteTx(char val) {
 80039fc:	defffe04 	addi	sp,sp,-8
 8003a00:	df000115 	stw	fp,4(sp)
 8003a04:	df000104 	addi	fp,sp,4
 8003a08:	2005883a 	mov	r2,r4
 8003a0c:	e0bfff05 	stb	r2,-4(fp)
	// poll tx bit in 6850 status register. Wait for it to become '2'
	while((Wifi_Status & 0x02) != 0x02) {}
 8003a10:	0001883a 	nop
 8003a14:	00a10034 	movhi	r2,33792
 8003a18:	10809004 	addi	r2,r2,576
 8003a1c:	10800003 	ldbu	r2,0(r2)
 8003a20:	10803fcc 	andi	r2,r2,255
 8003a24:	1080008c 	andi	r2,r2,2
 8003a28:	103ffa26 	beq	r2,zero,8003a14 <__alt_data_end+0xfc003a14>
	Wifi_TxData = val;
 8003a2c:	00a10034 	movhi	r2,33792
 8003a30:	10809084 	addi	r2,r2,578
 8003a34:	e0ffff03 	ldbu	r3,-4(fp)
 8003a38:	10c00005 	stb	r3,0(r2)
}
 8003a3c:	e037883a 	mov	sp,fp
 8003a40:	df000017 	ldw	fp,0(sp)
 8003a44:	dec00104 	addi	sp,sp,4
 8003a48:	f800283a 	ret

08003a4c <Wifi_ExtractJson>:

/*****************************************************************************
* Parse out the json from response
*****************************************************************************/
int Wifi_ExtractJson(char *src, char *dst) {
 8003a4c:	defff704 	addi	sp,sp,-36
 8003a50:	dfc00815 	stw	ra,32(sp)
 8003a54:	df000715 	stw	fp,28(sp)
 8003a58:	df000704 	addi	fp,sp,28
 8003a5c:	e13ffe15 	stw	r4,-8(fp)
 8003a60:	e17fff15 	stw	r5,-4(fp)
	// Figure out the the left and right indices of the
	char *leftbracket = strchr(src, '{');
 8003a64:	e13ffe17 	ldw	r4,-8(fp)
 8003a68:	01401ec4 	movi	r5,123
 8003a6c:	8006b940 	call	8006b94 <strchr>
 8003a70:	e0bff915 	stw	r2,-28(fp)
	char *rightbracket = strchr(src, '}');
 8003a74:	e13ffe17 	ldw	r4,-8(fp)
 8003a78:	01401f44 	movi	r5,125
 8003a7c:	8006b940 	call	8006b94 <strchr>
 8003a80:	e0bffa15 	stw	r2,-24(fp)

	if(leftbracket == NULL || rightbracket == NULL) {
 8003a84:	e0bff917 	ldw	r2,-28(fp)
 8003a88:	10000226 	beq	r2,zero,8003a94 <Wifi_ExtractJson+0x48>
 8003a8c:	e0bffa17 	ldw	r2,-24(fp)
 8003a90:	1000021e 	bne	r2,zero,8003a9c <Wifi_ExtractJson+0x50>
		return EJSON;
 8003a94:	00800044 	movi	r2,1
 8003a98:	00001a06 	br	8003b04 <Wifi_ExtractJson+0xb8>
	}
	int leftindex = (int)(leftbracket - src);
 8003a9c:	e0fff917 	ldw	r3,-28(fp)
 8003aa0:	e0bffe17 	ldw	r2,-8(fp)
 8003aa4:	1885c83a 	sub	r2,r3,r2
 8003aa8:	e0bffb15 	stw	r2,-20(fp)
	int rightindex = (int)(rightbracket - src);
 8003aac:	e0fffa17 	ldw	r3,-24(fp)
 8003ab0:	e0bffe17 	ldw	r2,-8(fp)
 8003ab4:	1885c83a 	sub	r2,r3,r2
 8003ab8:	e0bffc15 	stw	r2,-16(fp)

	int diff = rightindex - leftindex;
 8003abc:	e0fffc17 	ldw	r3,-16(fp)
 8003ac0:	e0bffb17 	ldw	r2,-20(fp)
 8003ac4:	1885c83a 	sub	r2,r3,r2
 8003ac8:	e0bffd15 	stw	r2,-12(fp)

	// copy the substring
	memcpy(dst, &src[leftindex+1], diff-1);
 8003acc:	e0bffb17 	ldw	r2,-20(fp)
 8003ad0:	10800044 	addi	r2,r2,1
 8003ad4:	e0fffe17 	ldw	r3,-8(fp)
 8003ad8:	1887883a 	add	r3,r3,r2
 8003adc:	e0bffd17 	ldw	r2,-12(fp)
 8003ae0:	10bfffc4 	addi	r2,r2,-1
 8003ae4:	e13fff17 	ldw	r4,-4(fp)
 8003ae8:	180b883a 	mov	r5,r3
 8003aec:	100d883a 	mov	r6,r2
 8003af0:	80065b80 	call	80065b8 <memcpy>
	dst[diff] = '\0';
 8003af4:	e0bffd17 	ldw	r2,-12(fp)
 8003af8:	e0ffff17 	ldw	r3,-4(fp)
 8003afc:	1885883a 	add	r2,r3,r2
 8003b00:	10000005 	stb	zero,0(r2)
}
 8003b04:	e037883a 	mov	sp,fp
 8003b08:	dfc00117 	ldw	ra,4(sp)
 8003b0c:	df000017 	ldw	fp,0(sp)
 8003b10:	dec00204 	addi	sp,sp,8
 8003b14:	f800283a 	ret

08003b18 <Wifi_ParsePhoneNumber>:

/*****************************************************************************
* Parse out the phone number from response
*****************************************************************************/
int Wifi_ParsePhoneNumber(char *src, char *dst) {
 8003b18:	defff204 	addi	sp,sp,-56
 8003b1c:	dfc00d15 	stw	ra,52(sp)
 8003b20:	df000c15 	stw	fp,48(sp)
 8003b24:	df000c04 	addi	fp,sp,48
 8003b28:	e13ffe15 	stw	r4,-8(fp)
 8003b2c:	e17fff15 	stw	r5,-4(fp)
	char *copy = (char *)malloc(16);
 8003b30:	01000404 	movi	r4,16
 8003b34:	8005de80 	call	8005de8 <malloc>
 8003b38:	e0bff615 	stw	r2,-40(fp)
	strcpy(copy, src);
 8003b3c:	e13ff617 	ldw	r4,-40(fp)
 8003b40:	e17ffe17 	ldw	r5,-8(fp)
 8003b44:	8006cf80 	call	8006cf8 <strcpy>

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
 8003b48:	e13ff617 	ldw	r4,-40(fp)
 8003b4c:	014200b4 	movhi	r5,2050
 8003b50:	2949a704 	addi	r5,r5,9884
 8003b54:	8006e9c0 	call	8006e9c <strtok>
 8003b58:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 8003b5c:	e03ff515 	stw	zero,-44(fp)

	while(p != NULL) {
 8003b60:	00000f06 	br	8003ba0 <Wifi_ParsePhoneNumber+0x88>
  	res[i++] = p;
 8003b64:	e0bff517 	ldw	r2,-44(fp)
 8003b68:	10c00044 	addi	r3,r2,1
 8003b6c:	e0fff515 	stw	r3,-44(fp)
 8003b70:	1085883a 	add	r2,r2,r2
 8003b74:	1085883a 	add	r2,r2,r2
 8003b78:	e0fff404 	addi	r3,fp,-48
 8003b7c:	1885883a 	add	r2,r3,r2
 8003b80:	10800504 	addi	r2,r2,20
 8003b84:	e0fff417 	ldw	r3,-48(fp)
 8003b88:	10c00015 	stw	r3,0(r2)
  	p = strtok(NULL,",");
 8003b8c:	0009883a 	mov	r4,zero
 8003b90:	014200b4 	movhi	r5,2050
 8003b94:	2949a704 	addi	r5,r5,9884
 8003b98:	8006e9c0 	call	8006e9c <strtok>
 8003b9c:	e0bff415 	stw	r2,-48(fp)

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
	int i = 0;

	while(p != NULL) {
 8003ba0:	e0bff417 	ldw	r2,-48(fp)
 8003ba4:	103fef1e 	bne	r2,zero,8003b64 <__alt_data_end+0xfc003b64>
  	res[i++] = p;
  	p = strtok(NULL,",");
	}

	char *colon = strchr(res[PHONENUM_INDEX],':');
 8003ba8:	e0bffc17 	ldw	r2,-16(fp)
 8003bac:	1009883a 	mov	r4,r2
 8003bb0:	01400e84 	movi	r5,58
 8003bb4:	8006b940 	call	8006b94 <strchr>
 8003bb8:	e0bff715 	stw	r2,-36(fp)
	if(colon == NULL) {
 8003bbc:	e0bff717 	ldw	r2,-36(fp)
 8003bc0:	1000041e 	bne	r2,zero,8003bd4 <Wifi_ParsePhoneNumber+0xbc>
  	free(copy);
 8003bc4:	e13ff617 	ldw	r4,-40(fp)
 8003bc8:	8005dfc0 	call	8005dfc <free>
  	return EPHN;
 8003bcc:	00800084 	movi	r2,2
 8003bd0:	00001006 	br	8003c14 <Wifi_ParsePhoneNumber+0xfc>
	}

	int colonIndex = (int)(colon - res[PHONENUM_INDEX]);
 8003bd4:	e0bff717 	ldw	r2,-36(fp)
 8003bd8:	e0fffc17 	ldw	r3,-16(fp)
 8003bdc:	10c5c83a 	sub	r2,r2,r3
 8003be0:	e0bff815 	stw	r2,-32(fp)
	memcpy(dst, res[PHONENUM_INDEX] + colonIndex + 2, 10);
 8003be4:	e0fffc17 	ldw	r3,-16(fp)
 8003be8:	e0bff817 	ldw	r2,-32(fp)
 8003bec:	10800084 	addi	r2,r2,2
 8003bf0:	1885883a 	add	r2,r3,r2
 8003bf4:	e13fff17 	ldw	r4,-4(fp)
 8003bf8:	100b883a 	mov	r5,r2
 8003bfc:	01800284 	movi	r6,10
 8003c00:	80065b80 	call	80065b8 <memcpy>
	dst[10]='\0';
 8003c04:	e0bfff17 	ldw	r2,-4(fp)
 8003c08:	10800284 	addi	r2,r2,10
 8003c0c:	10000005 	stb	zero,0(r2)
	return 0;
 8003c10:	0005883a 	mov	r2,zero
}
 8003c14:	e037883a 	mov	sp,fp
 8003c18:	dfc00117 	ldw	ra,4(sp)
 8003c1c:	df000017 	ldw	fp,0(sp)
 8003c20:	dec00204 	addi	sp,sp,8
 8003c24:	f800283a 	ret

08003c28 <Wifi_ParsePw>:

/*****************************************************************************
* Parse out the password from response
*****************************************************************************/
int Wifi_ParsePw(char *src, char *dst) {
 8003c28:	defff204 	addi	sp,sp,-56
 8003c2c:	dfc00d15 	stw	ra,52(sp)
 8003c30:	df000c15 	stw	fp,48(sp)
 8003c34:	df000c04 	addi	fp,sp,48
 8003c38:	e13ffe15 	stw	r4,-8(fp)
 8003c3c:	e17fff15 	stw	r5,-4(fp)
	char *copy = malloc(sizeof(char)*4);
 8003c40:	01000104 	movi	r4,4
 8003c44:	8005de80 	call	8005de8 <malloc>
 8003c48:	e0bff615 	stw	r2,-40(fp)
	strcpy(copy, src);
 8003c4c:	e13ff617 	ldw	r4,-40(fp)
 8003c50:	e17ffe17 	ldw	r5,-8(fp)
 8003c54:	8006cf80 	call	8006cf8 <strcpy>

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
 8003c58:	e13ff617 	ldw	r4,-40(fp)
 8003c5c:	014200b4 	movhi	r5,2050
 8003c60:	2949a704 	addi	r5,r5,9884
 8003c64:	8006e9c0 	call	8006e9c <strtok>
 8003c68:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 8003c6c:	e03ff515 	stw	zero,-44(fp)

	while(p != NULL) {
 8003c70:	00000f06 	br	8003cb0 <Wifi_ParsePw+0x88>
   	res[i++] = p;
 8003c74:	e0bff517 	ldw	r2,-44(fp)
 8003c78:	10c00044 	addi	r3,r2,1
 8003c7c:	e0fff515 	stw	r3,-44(fp)
 8003c80:	1085883a 	add	r2,r2,r2
 8003c84:	1085883a 	add	r2,r2,r2
 8003c88:	e0fff404 	addi	r3,fp,-48
 8003c8c:	1885883a 	add	r2,r3,r2
 8003c90:	10800504 	addi	r2,r2,20
 8003c94:	e0fff417 	ldw	r3,-48(fp)
 8003c98:	10c00015 	stw	r3,0(r2)
   	p = strtok(NULL,",");
 8003c9c:	0009883a 	mov	r4,zero
 8003ca0:	014200b4 	movhi	r5,2050
 8003ca4:	2949a704 	addi	r5,r5,9884
 8003ca8:	8006e9c0 	call	8006e9c <strtok>
 8003cac:	e0bff415 	stw	r2,-48(fp)

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
	int i = 0;

	while(p != NULL) {
 8003cb0:	e0bff417 	ldw	r2,-48(fp)
 8003cb4:	103fef1e 	bne	r2,zero,8003c74 <__alt_data_end+0xfc003c74>
   	res[i++] = p;
   	p = strtok(NULL,",");
	}

	char *colon = strchr(res[PW_INDEX],':');
 8003cb8:	e0bffa17 	ldw	r2,-24(fp)
 8003cbc:	1009883a 	mov	r4,r2
 8003cc0:	01400e84 	movi	r5,58
 8003cc4:	8006b940 	call	8006b94 <strchr>
 8003cc8:	e0bff715 	stw	r2,-36(fp)
	if(colon == NULL)
 8003ccc:	e0bff717 	ldw	r2,-36(fp)
 8003cd0:	1000021e 	bne	r2,zero,8003cdc <Wifi_ParsePw+0xb4>
   	return EPW;
 8003cd4:	008000c4 	movi	r2,3
 8003cd8:	00001006 	br	8003d1c <Wifi_ParsePw+0xf4>

	int colonIndex = (int)(colon - res[PW_INDEX]);
 8003cdc:	e0bff717 	ldw	r2,-36(fp)
 8003ce0:	e0fffa17 	ldw	r3,-24(fp)
 8003ce4:	10c5c83a 	sub	r2,r2,r3
 8003ce8:	e0bff815 	stw	r2,-32(fp)
	memcpy(dst, res[PW_INDEX] + colonIndex + 2, 4);
 8003cec:	e0fffa17 	ldw	r3,-24(fp)
 8003cf0:	e0bff817 	ldw	r2,-32(fp)
 8003cf4:	10800084 	addi	r2,r2,2
 8003cf8:	1885883a 	add	r2,r3,r2
 8003cfc:	e13fff17 	ldw	r4,-4(fp)
 8003d00:	100b883a 	mov	r5,r2
 8003d04:	01800104 	movi	r6,4
 8003d08:	80065b80 	call	80065b8 <memcpy>
	dst[4]='\0';
 8003d0c:	e0bfff17 	ldw	r2,-4(fp)
 8003d10:	10800104 	addi	r2,r2,4
 8003d14:	10000005 	stb	zero,0(r2)
	return 0;
 8003d18:	0005883a 	mov	r2,zero
}
 8003d1c:	e037883a 	mov	sp,fp
 8003d20:	dfc00117 	ldw	ra,4(sp)
 8003d24:	df000017 	ldw	fp,0(sp)
 8003d28:	dec00204 	addi	sp,sp,8
 8003d2c:	f800283a 	ret

08003d30 <Wifi_ParseMasterPw>:

/*****************************************************************************
* Parse out the master password from response
*****************************************************************************/
int Wifi_ParseMasterPw(char *src, char *dst) {
 8003d30:	defff204 	addi	sp,sp,-56
 8003d34:	dfc00d15 	stw	ra,52(sp)
 8003d38:	df000c15 	stw	fp,48(sp)
 8003d3c:	df000c04 	addi	fp,sp,48
 8003d40:	e13ffe15 	stw	r4,-8(fp)
 8003d44:	e17fff15 	stw	r5,-4(fp)
	char *copy = malloc(sizeof(char)*6);
 8003d48:	01000184 	movi	r4,6
 8003d4c:	8005de80 	call	8005de8 <malloc>
 8003d50:	e0bff615 	stw	r2,-40(fp)
	strcpy(copy, src);
 8003d54:	e13ff617 	ldw	r4,-40(fp)
 8003d58:	e17ffe17 	ldw	r5,-8(fp)
 8003d5c:	8006cf80 	call	8006cf8 <strcpy>

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
 8003d60:	e13ff617 	ldw	r4,-40(fp)
 8003d64:	014200b4 	movhi	r5,2050
 8003d68:	2949a704 	addi	r5,r5,9884
 8003d6c:	8006e9c0 	call	8006e9c <strtok>
 8003d70:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 8003d74:	e03ff515 	stw	zero,-44(fp)

	while(p != NULL) {
 8003d78:	00000f06 	br	8003db8 <Wifi_ParseMasterPw+0x88>
   	res[i++] = p;
 8003d7c:	e0bff517 	ldw	r2,-44(fp)
 8003d80:	10c00044 	addi	r3,r2,1
 8003d84:	e0fff515 	stw	r3,-44(fp)
 8003d88:	1085883a 	add	r2,r2,r2
 8003d8c:	1085883a 	add	r2,r2,r2
 8003d90:	e0fff404 	addi	r3,fp,-48
 8003d94:	1885883a 	add	r2,r3,r2
 8003d98:	10800504 	addi	r2,r2,20
 8003d9c:	e0fff417 	ldw	r3,-48(fp)
 8003da0:	10c00015 	stw	r3,0(r2)
  	p = strtok(NULL,",");
 8003da4:	0009883a 	mov	r4,zero
 8003da8:	014200b4 	movhi	r5,2050
 8003dac:	2949a704 	addi	r5,r5,9884
 8003db0:	8006e9c0 	call	8006e9c <strtok>
 8003db4:	e0bff415 	stw	r2,-48(fp)

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
	int i = 0;

	while(p != NULL) {
 8003db8:	e0bff417 	ldw	r2,-48(fp)
 8003dbc:	103fef1e 	bne	r2,zero,8003d7c <__alt_data_end+0xfc003d7c>
   	res[i++] = p;
  	p = strtok(NULL,",");
	}

	char *colon = strchr(res[PWMASTER_INDEX],':');
 8003dc0:	e0bffb17 	ldw	r2,-20(fp)
 8003dc4:	1009883a 	mov	r4,r2
 8003dc8:	01400e84 	movi	r5,58
 8003dcc:	8006b940 	call	8006b94 <strchr>
 8003dd0:	e0bff715 	stw	r2,-36(fp)
	if(colon == NULL)
 8003dd4:	e0bff717 	ldw	r2,-36(fp)
 8003dd8:	1000021e 	bne	r2,zero,8003de4 <Wifi_ParseMasterPw+0xb4>
  	return EPWMAS;
 8003ddc:	00800104 	movi	r2,4
 8003de0:	00001006 	br	8003e24 <Wifi_ParseMasterPw+0xf4>

	int colonIndex = (int)(colon - res[PWMASTER_INDEX]);
 8003de4:	e0bff717 	ldw	r2,-36(fp)
 8003de8:	e0fffb17 	ldw	r3,-20(fp)
 8003dec:	10c5c83a 	sub	r2,r2,r3
 8003df0:	e0bff815 	stw	r2,-32(fp)
	memcpy(dst, res[PWMASTER_INDEX] + colonIndex + 2, 6);
 8003df4:	e0fffb17 	ldw	r3,-20(fp)
 8003df8:	e0bff817 	ldw	r2,-32(fp)
 8003dfc:	10800084 	addi	r2,r2,2
 8003e00:	1885883a 	add	r2,r3,r2
 8003e04:	e13fff17 	ldw	r4,-4(fp)
 8003e08:	100b883a 	mov	r5,r2
 8003e0c:	01800184 	movi	r6,6
 8003e10:	80065b80 	call	80065b8 <memcpy>
	dst[6]='\0';
 8003e14:	e0bfff17 	ldw	r2,-4(fp)
 8003e18:	10800184 	addi	r2,r2,6
 8003e1c:	10000005 	stb	zero,0(r2)
	return 0;
 8003e20:	0005883a 	mov	r2,zero
}
 8003e24:	e037883a 	mov	sp,fp
 8003e28:	dfc00117 	ldw	ra,4(sp)
 8003e2c:	df000017 	ldw	fp,0(sp)
 8003e30:	dec00204 	addi	sp,sp,8
 8003e34:	f800283a 	ret

08003e38 <Wifi_ParseConfirmed>:

/*****************************************************************************
* Parse out confirmed from response
*****************************************************************************/
int Wifi_ParseConfirmed(char *src, char *dst) {
 8003e38:	defff204 	addi	sp,sp,-56
 8003e3c:	dfc00d15 	stw	ra,52(sp)
 8003e40:	df000c15 	stw	fp,48(sp)
 8003e44:	df000c04 	addi	fp,sp,48
 8003e48:	e13ffe15 	stw	r4,-8(fp)
 8003e4c:	e17fff15 	stw	r5,-4(fp)
	char *copy = malloc(sizeof(char)*5);
 8003e50:	01000144 	movi	r4,5
 8003e54:	8005de80 	call	8005de8 <malloc>
 8003e58:	e0bff615 	stw	r2,-40(fp)
	strcpy(copy, src);
 8003e5c:	e13ff617 	ldw	r4,-40(fp)
 8003e60:	e17ffe17 	ldw	r5,-8(fp)
 8003e64:	8006cf80 	call	8006cf8 <strcpy>

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
 8003e68:	e13ff617 	ldw	r4,-40(fp)
 8003e6c:	014200b4 	movhi	r5,2050
 8003e70:	2949a704 	addi	r5,r5,9884
 8003e74:	8006e9c0 	call	8006e9c <strtok>
 8003e78:	e0bff415 	stw	r2,-48(fp)
	int i = 0;
 8003e7c:	e03ff515 	stw	zero,-44(fp)

	while(p != NULL) {
 8003e80:	00000f06 	br	8003ec0 <Wifi_ParseConfirmed+0x88>
  	res[i++] = p;
 8003e84:	e0bff517 	ldw	r2,-44(fp)
 8003e88:	10c00044 	addi	r3,r2,1
 8003e8c:	e0fff515 	stw	r3,-44(fp)
 8003e90:	1085883a 	add	r2,r2,r2
 8003e94:	1085883a 	add	r2,r2,r2
 8003e98:	e0fff404 	addi	r3,fp,-48
 8003e9c:	1885883a 	add	r2,r3,r2
 8003ea0:	10800504 	addi	r2,r2,20
 8003ea4:	e0fff417 	ldw	r3,-48(fp)
 8003ea8:	10c00015 	stw	r3,0(r2)
  	p = strtok(NULL,",");
 8003eac:	0009883a 	mov	r4,zero
 8003eb0:	014200b4 	movhi	r5,2050
 8003eb4:	2949a704 	addi	r5,r5,9884
 8003eb8:	8006e9c0 	call	8006e9c <strtok>
 8003ebc:	e0bff415 	stw	r2,-48(fp)

	char *res[NPARAMS];
	char *p = strtok(copy, ",");
	int i = 0;

	while(p != NULL) {
 8003ec0:	e0bff417 	ldw	r2,-48(fp)
 8003ec4:	103fef1e 	bne	r2,zero,8003e84 <__alt_data_end+0xfc003e84>
  	res[i++] = p;
  	p = strtok(NULL,",");
	}

	char *colon = strchr(res[CONFIRM_INDEX],':');
 8003ec8:	e0bffd17 	ldw	r2,-12(fp)
 8003ecc:	1009883a 	mov	r4,r2
 8003ed0:	01400e84 	movi	r5,58
 8003ed4:	8006b940 	call	8006b94 <strchr>
 8003ed8:	e0bff715 	stw	r2,-36(fp)
	if(colon == NULL)
 8003edc:	e0bff717 	ldw	r2,-36(fp)
 8003ee0:	1000021e 	bne	r2,zero,8003eec <Wifi_ParseConfirmed+0xb4>
  	return EPCNF;
 8003ee4:	00800144 	movi	r2,5
 8003ee8:	00001006 	br	8003f2c <Wifi_ParseConfirmed+0xf4>

	int colonIndex = (int)(colon - res[CONFIRM_INDEX]);
 8003eec:	e0bff717 	ldw	r2,-36(fp)
 8003ef0:	e0fffd17 	ldw	r3,-12(fp)
 8003ef4:	10c5c83a 	sub	r2,r2,r3
 8003ef8:	e0bff815 	stw	r2,-32(fp)
	memcpy(dst, res[CONFIRM_INDEX] + colonIndex + 1, 5);
 8003efc:	e0fffd17 	ldw	r3,-12(fp)
 8003f00:	e0bff817 	ldw	r2,-32(fp)
 8003f04:	10800044 	addi	r2,r2,1
 8003f08:	1885883a 	add	r2,r3,r2
 8003f0c:	e13fff17 	ldw	r4,-4(fp)
 8003f10:	100b883a 	mov	r5,r2
 8003f14:	01800144 	movi	r6,5
 8003f18:	80065b80 	call	80065b8 <memcpy>
	dst[5]='\0';
 8003f1c:	e0bfff17 	ldw	r2,-4(fp)
 8003f20:	10800144 	addi	r2,r2,5
 8003f24:	10000005 	stb	zero,0(r2)
	return 0;
 8003f28:	0005883a 	mov	r2,zero
}
 8003f2c:	e037883a 	mov	sp,fp
 8003f30:	dfc00117 	ldw	ra,4(sp)
 8003f34:	df000017 	ldw	fp,0(sp)
 8003f38:	dec00204 	addi	sp,sp,8
 8003f3c:	f800283a 	ret

08003f40 <Switches_GetValue>:
 *      Author: David
 */
#include "switches.h"
#include <stdint.h>

uint8_t Switches_GetValue() {
 8003f40:	deffff04 	addi	sp,sp,-4
 8003f44:	df000015 	stw	fp,0(sp)
 8003f48:	d839883a 	mov	fp,sp
	return Switches_Base;
 8003f4c:	00880004 	movi	r2,8192
 8003f50:	10800003 	ldbu	r2,0(r2)
}
 8003f54:	e037883a 	mov	sp,fp
 8003f58:	df000017 	ldw	fp,0(sp)
 8003f5c:	dec00104 	addi	sp,sp,4
 8003f60:	f800283a 	ret

08003f64 <udivmodsi4>:
 8003f64:	2900182e 	bgeu	r5,r4,8003fc8 <udivmodsi4+0x64>
 8003f68:	28001716 	blt	r5,zero,8003fc8 <udivmodsi4+0x64>
 8003f6c:	00800804 	movi	r2,32
 8003f70:	00c00044 	movi	r3,1
 8003f74:	00000206 	br	8003f80 <udivmodsi4+0x1c>
 8003f78:	10001126 	beq	r2,zero,8003fc0 <udivmodsi4+0x5c>
 8003f7c:	28000516 	blt	r5,zero,8003f94 <udivmodsi4+0x30>
 8003f80:	294b883a 	add	r5,r5,r5
 8003f84:	10bfffc4 	addi	r2,r2,-1
 8003f88:	18c7883a 	add	r3,r3,r3
 8003f8c:	293ffa36 	bltu	r5,r4,8003f78 <__alt_data_end+0xfc003f78>
 8003f90:	18000b26 	beq	r3,zero,8003fc0 <udivmodsi4+0x5c>
 8003f94:	0005883a 	mov	r2,zero
 8003f98:	21400236 	bltu	r4,r5,8003fa4 <udivmodsi4+0x40>
 8003f9c:	2149c83a 	sub	r4,r4,r5
 8003fa0:	10c4b03a 	or	r2,r2,r3
 8003fa4:	1806d07a 	srli	r3,r3,1
 8003fa8:	280ad07a 	srli	r5,r5,1
 8003fac:	183ffa1e 	bne	r3,zero,8003f98 <__alt_data_end+0xfc003f98>
 8003fb0:	3000011e 	bne	r6,zero,8003fb8 <udivmodsi4+0x54>
 8003fb4:	f800283a 	ret
 8003fb8:	2005883a 	mov	r2,r4
 8003fbc:	f800283a 	ret
 8003fc0:	0005883a 	mov	r2,zero
 8003fc4:	003ffa06 	br	8003fb0 <__alt_data_end+0xfc003fb0>
 8003fc8:	00c00044 	movi	r3,1
 8003fcc:	003ff106 	br	8003f94 <__alt_data_end+0xfc003f94>

08003fd0 <__divsi3>:
 8003fd0:	defffe04 	addi	sp,sp,-8
 8003fd4:	dfc00115 	stw	ra,4(sp)
 8003fd8:	dc000015 	stw	r16,0(sp)
 8003fdc:	20000b16 	blt	r4,zero,800400c <__divsi3+0x3c>
 8003fe0:	0021883a 	mov	r16,zero
 8003fe4:	28000c16 	blt	r5,zero,8004018 <__divsi3+0x48>
 8003fe8:	000d883a 	mov	r6,zero
 8003fec:	8003f640 	call	8003f64 <udivmodsi4>
 8003ff0:	0407c83a 	sub	r3,zero,r16
 8003ff4:	1884f03a 	xor	r2,r3,r2
 8003ff8:	1405883a 	add	r2,r2,r16
 8003ffc:	dfc00117 	ldw	ra,4(sp)
 8004000:	dc000017 	ldw	r16,0(sp)
 8004004:	dec00204 	addi	sp,sp,8
 8004008:	f800283a 	ret
 800400c:	0109c83a 	sub	r4,zero,r4
 8004010:	04000044 	movi	r16,1
 8004014:	283ff40e 	bge	r5,zero,8003fe8 <__alt_data_end+0xfc003fe8>
 8004018:	014bc83a 	sub	r5,zero,r5
 800401c:	8400005c 	xori	r16,r16,1
 8004020:	003ff106 	br	8003fe8 <__alt_data_end+0xfc003fe8>

08004024 <__modsi3>:
 8004024:	defffd04 	addi	sp,sp,-12
 8004028:	dfc00215 	stw	ra,8(sp)
 800402c:	dc400115 	stw	r17,4(sp)
 8004030:	dc000015 	stw	r16,0(sp)
 8004034:	20000c16 	blt	r4,zero,8004068 <__modsi3+0x44>
 8004038:	0023883a 	mov	r17,zero
 800403c:	0021883a 	mov	r16,zero
 8004040:	28000d16 	blt	r5,zero,8004078 <__modsi3+0x54>
 8004044:	01800044 	movi	r6,1
 8004048:	8003f640 	call	8003f64 <udivmodsi4>
 800404c:	1404f03a 	xor	r2,r2,r16
 8004050:	8885883a 	add	r2,r17,r2
 8004054:	dfc00217 	ldw	ra,8(sp)
 8004058:	dc400117 	ldw	r17,4(sp)
 800405c:	dc000017 	ldw	r16,0(sp)
 8004060:	dec00304 	addi	sp,sp,12
 8004064:	f800283a 	ret
 8004068:	0109c83a 	sub	r4,zero,r4
 800406c:	04400044 	movi	r17,1
 8004070:	043fffc4 	movi	r16,-1
 8004074:	283ff30e 	bge	r5,zero,8004044 <__alt_data_end+0xfc004044>
 8004078:	014bc83a 	sub	r5,zero,r5
 800407c:	003ff106 	br	8004044 <__alt_data_end+0xfc004044>

08004080 <__udivsi3>:
 8004080:	000d883a 	mov	r6,zero
 8004084:	8003f641 	jmpi	8003f64 <udivmodsi4>

08004088 <__umodsi3>:
 8004088:	01800044 	movi	r6,1
 800408c:	8003f641 	jmpi	8003f64 <udivmodsi4>

08004090 <__mulsi3>:
 8004090:	0005883a 	mov	r2,zero
 8004094:	20000726 	beq	r4,zero,80040b4 <__mulsi3+0x24>
 8004098:	20c0004c 	andi	r3,r4,1
 800409c:	2008d07a 	srli	r4,r4,1
 80040a0:	18000126 	beq	r3,zero,80040a8 <__mulsi3+0x18>
 80040a4:	1145883a 	add	r2,r2,r5
 80040a8:	294b883a 	add	r5,r5,r5
 80040ac:	203ffa1e 	bne	r4,zero,8004098 <__alt_data_end+0xfc004098>
 80040b0:	f800283a 	ret
 80040b4:	f800283a 	ret

080040b8 <__lesf2>:
 80040b8:	2004d5fa 	srli	r2,r4,23
 80040bc:	280cd5fa 	srli	r6,r5,23
 80040c0:	00c02034 	movhi	r3,128
 80040c4:	18ffffc4 	addi	r3,r3,-1
 80040c8:	10803fcc 	andi	r2,r2,255
 80040cc:	01c03fc4 	movi	r7,255
 80040d0:	1910703a 	and	r8,r3,r4
 80040d4:	31803fcc 	andi	r6,r6,255
 80040d8:	1946703a 	and	r3,r3,r5
 80040dc:	2008d7fa 	srli	r4,r4,31
 80040e0:	280ad7fa 	srli	r5,r5,31
 80040e4:	11c00a26 	beq	r2,r7,8004110 <__lesf2+0x58>
 80040e8:	31c01526 	beq	r6,r7,8004140 <__lesf2+0x88>
 80040ec:	10000a1e 	bne	r2,zero,8004118 <__lesf2+0x60>
 80040f0:	4013003a 	cmpeq	r9,r8,zero
 80040f4:	480f883a 	mov	r7,r9
 80040f8:	30000d26 	beq	r6,zero,8004130 <__lesf2+0x78>
 80040fc:	29403fcc 	andi	r5,r5,255
 8004100:	38001426 	beq	r7,zero,8004154 <__lesf2+0x9c>
 8004104:	2800081e 	bne	r5,zero,8004128 <__lesf2+0x70>
 8004108:	00bfffc4 	movi	r2,-1
 800410c:	f800283a 	ret
 8004110:	40000c1e 	bne	r8,zero,8004144 <__lesf2+0x8c>
 8004114:	30800a26 	beq	r6,r2,8004140 <__lesf2+0x88>
 8004118:	30000d1e 	bne	r6,zero,8004150 <__lesf2+0x98>
 800411c:	000f883a 	mov	r7,zero
 8004120:	183ff61e 	bne	r3,zero,80040fc <__alt_data_end+0xfc0040fc>
 8004124:	203ff81e 	bne	r4,zero,8004108 <__alt_data_end+0xfc004108>
 8004128:	00800044 	movi	r2,1
 800412c:	f800283a 	ret
 8004130:	183ff21e 	bne	r3,zero,80040fc <__alt_data_end+0xfc0040fc>
 8004134:	483ffb26 	beq	r9,zero,8004124 <__alt_data_end+0xfc004124>
 8004138:	0005883a 	mov	r2,zero
 800413c:	f800283a 	ret
 8004140:	18000226 	beq	r3,zero,800414c <__lesf2+0x94>
 8004144:	00800084 	movi	r2,2
 8004148:	f800283a 	ret
 800414c:	103fe826 	beq	r2,zero,80040f0 <__alt_data_end+0xfc0040f0>
 8004150:	29403fcc 	andi	r5,r5,255
 8004154:	217ff31e 	bne	r4,r5,8004124 <__alt_data_end+0xfc004124>
 8004158:	30bff216 	blt	r6,r2,8004124 <__alt_data_end+0xfc004124>
 800415c:	11800216 	blt	r2,r6,8004168 <__lesf2+0xb0>
 8004160:	1a3ff036 	bltu	r3,r8,8004124 <__alt_data_end+0xfc004124>
 8004164:	40fff42e 	bgeu	r8,r3,8004138 <__alt_data_end+0xfc004138>
 8004168:	203fe726 	beq	r4,zero,8004108 <__alt_data_end+0xfc004108>
 800416c:	003fee06 	br	8004128 <__alt_data_end+0xfc004128>

08004170 <__mulsf3>:
 8004170:	defff504 	addi	sp,sp,-44
 8004174:	dc400215 	stw	r17,8(sp)
 8004178:	2022d5fa 	srli	r17,r4,23
 800417c:	dd400615 	stw	r21,24(sp)
 8004180:	202ad7fa 	srli	r21,r4,31
 8004184:	dc000115 	stw	r16,4(sp)
 8004188:	04002034 	movhi	r16,128
 800418c:	df000915 	stw	fp,36(sp)
 8004190:	dd000515 	stw	r20,20(sp)
 8004194:	843fffc4 	addi	r16,r16,-1
 8004198:	dfc00a15 	stw	ra,40(sp)
 800419c:	ddc00815 	stw	r23,32(sp)
 80041a0:	dd800715 	stw	r22,28(sp)
 80041a4:	dcc00415 	stw	r19,16(sp)
 80041a8:	dc800315 	stw	r18,12(sp)
 80041ac:	8c403fcc 	andi	r17,r17,255
 80041b0:	8120703a 	and	r16,r16,r4
 80041b4:	a829883a 	mov	r20,r21
 80041b8:	af003fcc 	andi	fp,r21,255
 80041bc:	88005026 	beq	r17,zero,8004300 <__mulsf3+0x190>
 80041c0:	00803fc4 	movi	r2,255
 80041c4:	88802f26 	beq	r17,r2,8004284 <__mulsf3+0x114>
 80041c8:	84002034 	orhi	r16,r16,128
 80041cc:	802090fa 	slli	r16,r16,3
 80041d0:	8c7fe044 	addi	r17,r17,-127
 80041d4:	0025883a 	mov	r18,zero
 80041d8:	002f883a 	mov	r23,zero
 80041dc:	2804d5fa 	srli	r2,r5,23
 80041e0:	282cd7fa 	srli	r22,r5,31
 80041e4:	01002034 	movhi	r4,128
 80041e8:	213fffc4 	addi	r4,r4,-1
 80041ec:	10803fcc 	andi	r2,r2,255
 80041f0:	2166703a 	and	r19,r4,r5
 80041f4:	b1803fcc 	andi	r6,r22,255
 80041f8:	10004926 	beq	r2,zero,8004320 <__mulsf3+0x1b0>
 80041fc:	00c03fc4 	movi	r3,255
 8004200:	10c04326 	beq	r2,r3,8004310 <__mulsf3+0x1a0>
 8004204:	99402034 	orhi	r5,r19,128
 8004208:	282690fa 	slli	r19,r5,3
 800420c:	10bfe044 	addi	r2,r2,-127
 8004210:	000b883a 	mov	r5,zero
 8004214:	88a3883a 	add	r17,r17,r2
 8004218:	2c86b03a 	or	r3,r5,r18
 800421c:	008003c4 	movi	r2,15
 8004220:	adaaf03a 	xor	r21,r21,r22
 8004224:	8c800044 	addi	r18,r17,1
 8004228:	10c06536 	bltu	r2,r3,80043c0 <__mulsf3+0x250>
 800422c:	180690ba 	slli	r3,r3,2
 8004230:	01020034 	movhi	r4,2048
 8004234:	21109104 	addi	r4,r4,16964
 8004238:	1907883a 	add	r3,r3,r4
 800423c:	18800017 	ldw	r2,0(r3)
 8004240:	1000683a 	jmp	r2
 8004244:	080043c0 	call	80043c <__alt_mem_sdram-0x77ffbc4>
 8004248:	080044b8 	rdprs	zero,at,274
 800424c:	080044b8 	rdprs	zero,at,274
 8004250:	080044c8 	cmpgei	zero,at,275
 8004254:	08004294 	ori	zero,at,266
 8004258:	08004294 	ori	zero,at,266
 800425c:	080043ac 	andhi	zero,at,270
 8004260:	080044c8 	cmpgei	zero,at,275
 8004264:	08004294 	ori	zero,at,266
 8004268:	080043ac 	andhi	zero,at,270
 800426c:	08004294 	ori	zero,at,266
 8004270:	080044c8 	cmpgei	zero,at,275
 8004274:	08004298 	cmpnei	zero,at,266
 8004278:	08004298 	cmpnei	zero,at,266
 800427c:	08004298 	cmpnei	zero,at,266
 8004280:	080044d8 	cmpnei	zero,at,275
 8004284:	8000311e 	bne	r16,zero,800434c <__mulsf3+0x1dc>
 8004288:	04800204 	movi	r18,8
 800428c:	05c00084 	movi	r23,2
 8004290:	003fd206 	br	80041dc <__alt_data_end+0xfc0041dc>
 8004294:	a839883a 	mov	fp,r21
 8004298:	00800084 	movi	r2,2
 800429c:	b880231e 	bne	r23,r2,800432c <__mulsf3+0x1bc>
 80042a0:	e500004c 	andi	r20,fp,1
 80042a4:	00ffffc4 	movi	r3,-1
 80042a8:	0009883a 	mov	r4,zero
 80042ac:	18c03fcc 	andi	r3,r3,255
 80042b0:	180695fa 	slli	r3,r3,23
 80042b4:	a0803fcc 	andi	r2,r20,255
 80042b8:	04002034 	movhi	r16,128
 80042bc:	100497fa 	slli	r2,r2,31
 80042c0:	843fffc4 	addi	r16,r16,-1
 80042c4:	2420703a 	and	r16,r4,r16
 80042c8:	80e0b03a 	or	r16,r16,r3
 80042cc:	8084b03a 	or	r2,r16,r2
 80042d0:	dfc00a17 	ldw	ra,40(sp)
 80042d4:	df000917 	ldw	fp,36(sp)
 80042d8:	ddc00817 	ldw	r23,32(sp)
 80042dc:	dd800717 	ldw	r22,28(sp)
 80042e0:	dd400617 	ldw	r21,24(sp)
 80042e4:	dd000517 	ldw	r20,20(sp)
 80042e8:	dcc00417 	ldw	r19,16(sp)
 80042ec:	dc800317 	ldw	r18,12(sp)
 80042f0:	dc400217 	ldw	r17,8(sp)
 80042f4:	dc000117 	ldw	r16,4(sp)
 80042f8:	dec00b04 	addi	sp,sp,44
 80042fc:	f800283a 	ret
 8004300:	8000151e 	bne	r16,zero,8004358 <__mulsf3+0x1e8>
 8004304:	04800104 	movi	r18,4
 8004308:	05c00044 	movi	r23,1
 800430c:	003fb306 	br	80041dc <__alt_data_end+0xfc0041dc>
 8004310:	980b003a 	cmpeq	r5,r19,zero
 8004314:	00c000c4 	movi	r3,3
 8004318:	194bc83a 	sub	r5,r3,r5
 800431c:	003fbd06 	br	8004214 <__alt_data_end+0xfc004214>
 8004320:	9800181e 	bne	r19,zero,8004384 <__mulsf3+0x214>
 8004324:	01400044 	movi	r5,1
 8004328:	003fba06 	br	8004214 <__alt_data_end+0xfc004214>
 800432c:	008000c4 	movi	r2,3
 8004330:	b8809d26 	beq	r23,r2,80045a8 <__mulsf3+0x438>
 8004334:	00800044 	movi	r2,1
 8004338:	b880821e 	bne	r23,r2,8004544 <__mulsf3+0x3d4>
 800433c:	e0a8703a 	and	r20,fp,r2
 8004340:	0007883a 	mov	r3,zero
 8004344:	0009883a 	mov	r4,zero
 8004348:	003fd806 	br	80042ac <__alt_data_end+0xfc0042ac>
 800434c:	04800304 	movi	r18,12
 8004350:	05c000c4 	movi	r23,3
 8004354:	003fa106 	br	80041dc <__alt_data_end+0xfc0041dc>
 8004358:	8009883a 	mov	r4,r16
 800435c:	d9400015 	stw	r5,0(sp)
 8004360:	8005d840 	call	8005d84 <__clzsi2>
 8004364:	10fffec4 	addi	r3,r2,-5
 8004368:	047fe284 	movi	r17,-118
 800436c:	80e0983a 	sll	r16,r16,r3
 8004370:	88a3c83a 	sub	r17,r17,r2
 8004374:	0025883a 	mov	r18,zero
 8004378:	002f883a 	mov	r23,zero
 800437c:	d9400017 	ldw	r5,0(sp)
 8004380:	003f9606 	br	80041dc <__alt_data_end+0xfc0041dc>
 8004384:	9809883a 	mov	r4,r19
 8004388:	d9800015 	stw	r6,0(sp)
 800438c:	8005d840 	call	8005d84 <__clzsi2>
 8004390:	10fffec4 	addi	r3,r2,-5
 8004394:	98e6983a 	sll	r19,r19,r3
 8004398:	00ffe284 	movi	r3,-118
 800439c:	1885c83a 	sub	r2,r3,r2
 80043a0:	000b883a 	mov	r5,zero
 80043a4:	d9800017 	ldw	r6,0(sp)
 80043a8:	003f9a06 	br	8004214 <__alt_data_end+0xfc004214>
 80043ac:	01002034 	movhi	r4,128
 80043b0:	0029883a 	mov	r20,zero
 80043b4:	213fffc4 	addi	r4,r4,-1
 80043b8:	00ffffc4 	movi	r3,-1
 80043bc:	003fbb06 	br	80042ac <__alt_data_end+0xfc0042ac>
 80043c0:	802ed43a 	srli	r23,r16,16
 80043c4:	982cd43a 	srli	r22,r19,16
 80043c8:	843fffcc 	andi	r16,r16,65535
 80043cc:	9cffffcc 	andi	r19,r19,65535
 80043d0:	9809883a 	mov	r4,r19
 80043d4:	800b883a 	mov	r5,r16
 80043d8:	80040900 	call	8004090 <__mulsi3>
 80043dc:	9809883a 	mov	r4,r19
 80043e0:	b80b883a 	mov	r5,r23
 80043e4:	1029883a 	mov	r20,r2
 80043e8:	80040900 	call	8004090 <__mulsi3>
 80043ec:	b80b883a 	mov	r5,r23
 80043f0:	b009883a 	mov	r4,r22
 80043f4:	1027883a 	mov	r19,r2
 80043f8:	80040900 	call	8004090 <__mulsi3>
 80043fc:	b009883a 	mov	r4,r22
 8004400:	800b883a 	mov	r5,r16
 8004404:	102f883a 	mov	r23,r2
 8004408:	80040900 	call	8004090 <__mulsi3>
 800440c:	a008d43a 	srli	r4,r20,16
 8004410:	9885883a 	add	r2,r19,r2
 8004414:	1107883a 	add	r3,r2,r4
 8004418:	1cc0022e 	bgeu	r3,r19,8004424 <__mulsf3+0x2b4>
 800441c:	00800074 	movhi	r2,1
 8004420:	b8af883a 	add	r23,r23,r2
 8004424:	1820943a 	slli	r16,r3,16
 8004428:	a53fffcc 	andi	r20,r20,65535
 800442c:	1806d43a 	srli	r3,r3,16
 8004430:	8529883a 	add	r20,r16,r20
 8004434:	a02091ba 	slli	r16,r20,6
 8004438:	b8c7883a 	add	r3,r23,r3
 800443c:	a028d6ba 	srli	r20,r20,26
 8004440:	180691ba 	slli	r3,r3,6
 8004444:	8020c03a 	cmpne	r16,r16,zero
 8004448:	8520b03a 	or	r16,r16,r20
 800444c:	80e0b03a 	or	r16,r16,r3
 8004450:	8082002c 	andhi	r2,r16,2048
 8004454:	10000426 	beq	r2,zero,8004468 <__mulsf3+0x2f8>
 8004458:	8004d07a 	srli	r2,r16,1
 800445c:	8400004c 	andi	r16,r16,1
 8004460:	9023883a 	mov	r17,r18
 8004464:	80a0b03a 	or	r16,r16,r2
 8004468:	88c01fc4 	addi	r3,r17,127
 800446c:	00c02d0e 	bge	zero,r3,8004524 <__mulsf3+0x3b4>
 8004470:	808001cc 	andi	r2,r16,7
 8004474:	10000426 	beq	r2,zero,8004488 <__mulsf3+0x318>
 8004478:	810003cc 	andi	r4,r16,15
 800447c:	00800104 	movi	r2,4
 8004480:	20800126 	beq	r4,r2,8004488 <__mulsf3+0x318>
 8004484:	80a1883a 	add	r16,r16,r2
 8004488:	8082002c 	andhi	r2,r16,2048
 800448c:	10000426 	beq	r2,zero,80044a0 <__mulsf3+0x330>
 8004490:	00be0034 	movhi	r2,63488
 8004494:	10bfffc4 	addi	r2,r2,-1
 8004498:	88c02004 	addi	r3,r17,128
 800449c:	80a0703a 	and	r16,r16,r2
 80044a0:	00803f84 	movi	r2,254
 80044a4:	10c01b0e 	bge	r2,r3,8004514 <__mulsf3+0x3a4>
 80044a8:	ad00004c 	andi	r20,r21,1
 80044ac:	00ffffc4 	movi	r3,-1
 80044b0:	0009883a 	mov	r4,zero
 80044b4:	003f7d06 	br	80042ac <__alt_data_end+0xfc0042ac>
 80044b8:	9821883a 	mov	r16,r19
 80044bc:	a839883a 	mov	fp,r21
 80044c0:	282f883a 	mov	r23,r5
 80044c4:	003f7406 	br	8004298 <__alt_data_end+0xfc004298>
 80044c8:	9821883a 	mov	r16,r19
 80044cc:	3039883a 	mov	fp,r6
 80044d0:	282f883a 	mov	r23,r5
 80044d4:	003f7006 	br	8004298 <__alt_data_end+0xfc004298>
 80044d8:	8080102c 	andhi	r2,r16,64
 80044dc:	10000826 	beq	r2,zero,8004500 <__mulsf3+0x390>
 80044e0:	9880102c 	andhi	r2,r19,64
 80044e4:	1000061e 	bne	r2,zero,8004500 <__mulsf3+0x390>
 80044e8:	00802034 	movhi	r2,128
 80044ec:	99001034 	orhi	r4,r19,64
 80044f0:	10bfffc4 	addi	r2,r2,-1
 80044f4:	b029883a 	mov	r20,r22
 80044f8:	2088703a 	and	r4,r4,r2
 80044fc:	003fae06 	br	80043b8 <__alt_data_end+0xfc0043b8>
 8004500:	00802034 	movhi	r2,128
 8004504:	81001034 	orhi	r4,r16,64
 8004508:	10bfffc4 	addi	r2,r2,-1
 800450c:	2088703a 	and	r4,r4,r2
 8004510:	003fa906 	br	80043b8 <__alt_data_end+0xfc0043b8>
 8004514:	802091ba 	slli	r16,r16,6
 8004518:	ad00004c 	andi	r20,r21,1
 800451c:	8008d27a 	srli	r4,r16,9
 8004520:	003f6206 	br	80042ac <__alt_data_end+0xfc0042ac>
 8004524:	00ffe084 	movi	r3,-126
 8004528:	1c47c83a 	sub	r3,r3,r17
 800452c:	008006c4 	movi	r2,27
 8004530:	10c0070e 	bge	r2,r3,8004550 <__mulsf3+0x3e0>
 8004534:	ad00004c 	andi	r20,r21,1
 8004538:	0007883a 	mov	r3,zero
 800453c:	0009883a 	mov	r4,zero
 8004540:	003f5a06 	br	80042ac <__alt_data_end+0xfc0042ac>
 8004544:	9023883a 	mov	r17,r18
 8004548:	e02b883a 	mov	r21,fp
 800454c:	003fc606 	br	8004468 <__alt_data_end+0xfc004468>
 8004550:	88802784 	addi	r2,r17,158
 8004554:	8084983a 	sll	r2,r16,r2
 8004558:	80e0d83a 	srl	r16,r16,r3
 800455c:	1004c03a 	cmpne	r2,r2,zero
 8004560:	1404b03a 	or	r2,r2,r16
 8004564:	10c001cc 	andi	r3,r2,7
 8004568:	18000426 	beq	r3,zero,800457c <__mulsf3+0x40c>
 800456c:	110003cc 	andi	r4,r2,15
 8004570:	00c00104 	movi	r3,4
 8004574:	20c00126 	beq	r4,r3,800457c <__mulsf3+0x40c>
 8004578:	10c5883a 	add	r2,r2,r3
 800457c:	10c1002c 	andhi	r3,r2,1024
 8004580:	18000426 	beq	r3,zero,8004594 <__mulsf3+0x424>
 8004584:	ad00004c 	andi	r20,r21,1
 8004588:	00c00044 	movi	r3,1
 800458c:	0009883a 	mov	r4,zero
 8004590:	003f4606 	br	80042ac <__alt_data_end+0xfc0042ac>
 8004594:	100491ba 	slli	r2,r2,6
 8004598:	ad00004c 	andi	r20,r21,1
 800459c:	0007883a 	mov	r3,zero
 80045a0:	1008d27a 	srli	r4,r2,9
 80045a4:	003f4106 	br	80042ac <__alt_data_end+0xfc0042ac>
 80045a8:	00802034 	movhi	r2,128
 80045ac:	81001034 	orhi	r4,r16,64
 80045b0:	10bfffc4 	addi	r2,r2,-1
 80045b4:	e500004c 	andi	r20,fp,1
 80045b8:	2088703a 	and	r4,r4,r2
 80045bc:	003f7e06 	br	80043b8 <__alt_data_end+0xfc0043b8>

080045c0 <__floatsisf>:
 80045c0:	defffd04 	addi	sp,sp,-12
 80045c4:	dc000015 	stw	r16,0(sp)
 80045c8:	dfc00215 	stw	ra,8(sp)
 80045cc:	dc400115 	stw	r17,4(sp)
 80045d0:	2021883a 	mov	r16,r4
 80045d4:	20003a26 	beq	r4,zero,80046c0 <__floatsisf+0x100>
 80045d8:	2022d7fa 	srli	r17,r4,31
 80045dc:	88000126 	beq	r17,zero,80045e4 <__floatsisf+0x24>
 80045e0:	0121c83a 	sub	r16,zero,r4
 80045e4:	8009883a 	mov	r4,r16
 80045e8:	8005d840 	call	8005d84 <__clzsi2>
 80045ec:	00c02784 	movi	r3,158
 80045f0:	1887c83a 	sub	r3,r3,r2
 80045f4:	01802584 	movi	r6,150
 80045f8:	800b883a 	mov	r5,r16
 80045fc:	30c01616 	blt	r6,r3,8004658 <__floatsisf+0x98>
 8004600:	01000204 	movi	r4,8
 8004604:	2080020e 	bge	r4,r2,8004610 <__floatsisf+0x50>
 8004608:	10bffe04 	addi	r2,r2,-8
 800460c:	80a0983a 	sll	r16,r16,r2
 8004610:	00802034 	movhi	r2,128
 8004614:	10bfffc4 	addi	r2,r2,-1
 8004618:	8809883a 	mov	r4,r17
 800461c:	80a0703a 	and	r16,r16,r2
 8004620:	18803fcc 	andi	r2,r3,255
 8004624:	100695fa 	slli	r3,r2,23
 8004628:	20803fcc 	andi	r2,r4,255
 800462c:	100897fa 	slli	r4,r2,31
 8004630:	00802034 	movhi	r2,128
 8004634:	10bfffc4 	addi	r2,r2,-1
 8004638:	8084703a 	and	r2,r16,r2
 800463c:	10c4b03a 	or	r2,r2,r3
 8004640:	1104b03a 	or	r2,r2,r4
 8004644:	dfc00217 	ldw	ra,8(sp)
 8004648:	dc400117 	ldw	r17,4(sp)
 800464c:	dc000017 	ldw	r16,0(sp)
 8004650:	dec00304 	addi	sp,sp,12
 8004654:	f800283a 	ret
 8004658:	01002644 	movi	r4,153
 800465c:	20c01c16 	blt	r4,r3,80046d0 <__floatsisf+0x110>
 8004660:	01000144 	movi	r4,5
 8004664:	2080020e 	bge	r4,r2,8004670 <__floatsisf+0xb0>
 8004668:	113ffec4 	addi	r4,r2,-5
 800466c:	290a983a 	sll	r5,r5,r4
 8004670:	043f0034 	movhi	r16,64512
 8004674:	843fffc4 	addi	r16,r16,-1
 8004678:	298001cc 	andi	r6,r5,7
 800467c:	2c20703a 	and	r16,r5,r16
 8004680:	30000426 	beq	r6,zero,8004694 <__floatsisf+0xd4>
 8004684:	294003cc 	andi	r5,r5,15
 8004688:	01000104 	movi	r4,4
 800468c:	29000126 	beq	r5,r4,8004694 <__floatsisf+0xd4>
 8004690:	8121883a 	add	r16,r16,r4
 8004694:	8101002c 	andhi	r4,r16,1024
 8004698:	20000526 	beq	r4,zero,80046b0 <__floatsisf+0xf0>
 800469c:	00c027c4 	movi	r3,159
 80046a0:	1887c83a 	sub	r3,r3,r2
 80046a4:	00bf0034 	movhi	r2,64512
 80046a8:	10bfffc4 	addi	r2,r2,-1
 80046ac:	80a0703a 	and	r16,r16,r2
 80046b0:	802091ba 	slli	r16,r16,6
 80046b4:	8809883a 	mov	r4,r17
 80046b8:	8020d27a 	srli	r16,r16,9
 80046bc:	003fd806 	br	8004620 <__alt_data_end+0xfc004620>
 80046c0:	0009883a 	mov	r4,zero
 80046c4:	0007883a 	mov	r3,zero
 80046c8:	0021883a 	mov	r16,zero
 80046cc:	003fd406 	br	8004620 <__alt_data_end+0xfc004620>
 80046d0:	01800144 	movi	r6,5
 80046d4:	110006c4 	addi	r4,r2,27
 80046d8:	8108983a 	sll	r4,r16,r4
 80046dc:	308fc83a 	sub	r7,r6,r2
 80046e0:	81cad83a 	srl	r5,r16,r7
 80046e4:	2008c03a 	cmpne	r4,r4,zero
 80046e8:	214ab03a 	or	r5,r4,r5
 80046ec:	30bfe00e 	bge	r6,r2,8004670 <__alt_data_end+0xfc004670>
 80046f0:	003fdd06 	br	8004668 <__alt_data_end+0xfc004668>

080046f4 <__divdf3>:
 80046f4:	defff004 	addi	sp,sp,-64
 80046f8:	dc800815 	stw	r18,32(sp)
 80046fc:	2824d53a 	srli	r18,r5,20
 8004700:	dd800c15 	stw	r22,48(sp)
 8004704:	282cd7fa 	srli	r22,r5,31
 8004708:	dc000615 	stw	r16,24(sp)
 800470c:	04000434 	movhi	r16,16
 8004710:	df000e15 	stw	fp,56(sp)
 8004714:	dd000a15 	stw	r20,40(sp)
 8004718:	dcc00915 	stw	r19,36(sp)
 800471c:	dc400715 	stw	r17,28(sp)
 8004720:	843fffc4 	addi	r16,r16,-1
 8004724:	dfc00f15 	stw	ra,60(sp)
 8004728:	ddc00d15 	stw	r23,52(sp)
 800472c:	dd400b15 	stw	r21,44(sp)
 8004730:	9481ffcc 	andi	r18,r18,2047
 8004734:	2029883a 	mov	r20,r4
 8004738:	2027883a 	mov	r19,r4
 800473c:	2c22703a 	and	r17,r5,r16
 8004740:	b7003fcc 	andi	fp,r22,255
 8004744:	90005e26 	beq	r18,zero,80048c0 <__divdf3+0x1cc>
 8004748:	0081ffc4 	movi	r2,2047
 800474c:	90803526 	beq	r18,r2,8004824 <__divdf3+0x130>
 8004750:	8c000434 	orhi	r16,r17,16
 8004754:	2004d77a 	srli	r2,r4,29
 8004758:	802090fa 	slli	r16,r16,3
 800475c:	202690fa 	slli	r19,r4,3
 8004760:	94bf0044 	addi	r18,r18,-1023
 8004764:	80a2b03a 	or	r17,r16,r2
 8004768:	0029883a 	mov	r20,zero
 800476c:	0011883a 	mov	r8,zero
 8004770:	380ad53a 	srli	r5,r7,20
 8004774:	382ed7fa 	srli	r23,r7,31
 8004778:	04000434 	movhi	r16,16
 800477c:	843fffc4 	addi	r16,r16,-1
 8004780:	2941ffcc 	andi	r5,r5,2047
 8004784:	302b883a 	mov	r21,r6
 8004788:	3c20703a 	and	r16,r7,r16
 800478c:	ba403fcc 	andi	r9,r23,255
 8004790:	28006726 	beq	r5,zero,8004930 <__divdf3+0x23c>
 8004794:	0081ffc4 	movi	r2,2047
 8004798:	28805f26 	beq	r5,r2,8004918 <__divdf3+0x224>
 800479c:	84000434 	orhi	r16,r16,16
 80047a0:	3004d77a 	srli	r2,r6,29
 80047a4:	802090fa 	slli	r16,r16,3
 80047a8:	302a90fa 	slli	r21,r6,3
 80047ac:	297f0044 	addi	r5,r5,-1023
 80047b0:	80a0b03a 	or	r16,r16,r2
 80047b4:	000f883a 	mov	r7,zero
 80047b8:	3d06b03a 	or	r3,r7,r20
 80047bc:	180690ba 	slli	r3,r3,2
 80047c0:	00820034 	movhi	r2,2048
 80047c4:	1091f904 	addi	r2,r2,18404
 80047c8:	1885883a 	add	r2,r3,r2
 80047cc:	10800017 	ldw	r2,0(r2)
 80047d0:	b5c8f03a 	xor	r4,r22,r23
 80047d4:	200d883a 	mov	r6,r4
 80047d8:	25003fcc 	andi	r20,r4,255
 80047dc:	9165c83a 	sub	r18,r18,r5
 80047e0:	1000683a 	jmp	r2
 80047e4:	08004a2c 	andhi	zero,at,296
 80047e8:	0800485c 	xori	zero,at,289
 80047ec:	080049f0 	cmpltui	zero,at,295
 80047f0:	08004840 	call	800484 <__alt_mem_sdram-0x77ffb7c>
 80047f4:	080049f0 	cmpltui	zero,at,295
 80047f8:	080049c4 	addi	zero,at,295
 80047fc:	080049f0 	cmpltui	zero,at,295
 8004800:	08004840 	call	800484 <__alt_mem_sdram-0x77ffb7c>
 8004804:	0800485c 	xori	zero,at,289
 8004808:	0800485c 	xori	zero,at,289
 800480c:	080049c4 	addi	zero,at,295
 8004810:	08004840 	call	800484 <__alt_mem_sdram-0x77ffb7c>
 8004814:	08004850 	cmplti	zero,at,289
 8004818:	08004850 	cmplti	zero,at,289
 800481c:	08004850 	cmplti	zero,at,289
 8004820:	08004a00 	call	8004a0 <__alt_mem_sdram-0x77ffb60>
 8004824:	8904b03a 	or	r2,r17,r4
 8004828:	1000631e 	bne	r2,zero,80049b8 <__divdf3+0x2c4>
 800482c:	05000204 	movi	r20,8
 8004830:	0023883a 	mov	r17,zero
 8004834:	0027883a 	mov	r19,zero
 8004838:	02000084 	movi	r8,2
 800483c:	003fcc06 	br	8004770 <__alt_data_end+0xfc004770>
 8004840:	8023883a 	mov	r17,r16
 8004844:	a827883a 	mov	r19,r21
 8004848:	4839883a 	mov	fp,r9
 800484c:	3811883a 	mov	r8,r7
 8004850:	00800084 	movi	r2,2
 8004854:	4081531e 	bne	r8,r2,8004da4 <__divdf3+0x6b0>
 8004858:	e029883a 	mov	r20,fp
 800485c:	a180004c 	andi	r6,r20,1
 8004860:	0201ffc4 	movi	r8,2047
 8004864:	000b883a 	mov	r5,zero
 8004868:	0027883a 	mov	r19,zero
 800486c:	4010953a 	slli	r8,r8,20
 8004870:	30c03fcc 	andi	r3,r6,255
 8004874:	04000434 	movhi	r16,16
 8004878:	180697fa 	slli	r3,r3,31
 800487c:	843fffc4 	addi	r16,r16,-1
 8004880:	2c20703a 	and	r16,r5,r16
 8004884:	8220b03a 	or	r16,r16,r8
 8004888:	80c6b03a 	or	r3,r16,r3
 800488c:	9805883a 	mov	r2,r19
 8004890:	dfc00f17 	ldw	ra,60(sp)
 8004894:	df000e17 	ldw	fp,56(sp)
 8004898:	ddc00d17 	ldw	r23,52(sp)
 800489c:	dd800c17 	ldw	r22,48(sp)
 80048a0:	dd400b17 	ldw	r21,44(sp)
 80048a4:	dd000a17 	ldw	r20,40(sp)
 80048a8:	dcc00917 	ldw	r19,36(sp)
 80048ac:	dc800817 	ldw	r18,32(sp)
 80048b0:	dc400717 	ldw	r17,28(sp)
 80048b4:	dc000617 	ldw	r16,24(sp)
 80048b8:	dec01004 	addi	sp,sp,64
 80048bc:	f800283a 	ret
 80048c0:	8904b03a 	or	r2,r17,r4
 80048c4:	10003726 	beq	r2,zero,80049a4 <__divdf3+0x2b0>
 80048c8:	88014d26 	beq	r17,zero,8004e00 <__divdf3+0x70c>
 80048cc:	8809883a 	mov	r4,r17
 80048d0:	d9800215 	stw	r6,8(sp)
 80048d4:	d9c00515 	stw	r7,20(sp)
 80048d8:	8005d840 	call	8005d84 <__clzsi2>
 80048dc:	d9800217 	ldw	r6,8(sp)
 80048e0:	d9c00517 	ldw	r7,20(sp)
 80048e4:	1007883a 	mov	r3,r2
 80048e8:	01000a04 	movi	r4,40
 80048ec:	1cfffe04 	addi	r19,r3,-8
 80048f0:	20c9c83a 	sub	r4,r4,r3
 80048f4:	8cca983a 	sll	r5,r17,r19
 80048f8:	a108d83a 	srl	r4,r20,r4
 80048fc:	a4e6983a 	sll	r19,r20,r19
 8004900:	2162b03a 	or	r17,r4,r5
 8004904:	04bf0344 	movi	r18,-1011
 8004908:	90e5c83a 	sub	r18,r18,r3
 800490c:	0029883a 	mov	r20,zero
 8004910:	0011883a 	mov	r8,zero
 8004914:	003f9606 	br	8004770 <__alt_data_end+0xfc004770>
 8004918:	8184b03a 	or	r2,r16,r6
 800491c:	10001f1e 	bne	r2,zero,800499c <__divdf3+0x2a8>
 8004920:	0021883a 	mov	r16,zero
 8004924:	002b883a 	mov	r21,zero
 8004928:	01c00084 	movi	r7,2
 800492c:	003fa206 	br	80047b8 <__alt_data_end+0xfc0047b8>
 8004930:	8184b03a 	or	r2,r16,r6
 8004934:	10001526 	beq	r2,zero,800498c <__divdf3+0x298>
 8004938:	80013d26 	beq	r16,zero,8004e30 <__divdf3+0x73c>
 800493c:	8009883a 	mov	r4,r16
 8004940:	d9800215 	stw	r6,8(sp)
 8004944:	da000315 	stw	r8,12(sp)
 8004948:	da400415 	stw	r9,16(sp)
 800494c:	8005d840 	call	8005d84 <__clzsi2>
 8004950:	d9800217 	ldw	r6,8(sp)
 8004954:	da000317 	ldw	r8,12(sp)
 8004958:	da400417 	ldw	r9,16(sp)
 800495c:	1007883a 	mov	r3,r2
 8004960:	01000a04 	movi	r4,40
 8004964:	1d7ffe04 	addi	r21,r3,-8
 8004968:	20c9c83a 	sub	r4,r4,r3
 800496c:	8560983a 	sll	r16,r16,r21
 8004970:	3108d83a 	srl	r4,r6,r4
 8004974:	356a983a 	sll	r21,r6,r21
 8004978:	2420b03a 	or	r16,r4,r16
 800497c:	017f0344 	movi	r5,-1011
 8004980:	28cbc83a 	sub	r5,r5,r3
 8004984:	000f883a 	mov	r7,zero
 8004988:	003f8b06 	br	80047b8 <__alt_data_end+0xfc0047b8>
 800498c:	0021883a 	mov	r16,zero
 8004990:	002b883a 	mov	r21,zero
 8004994:	01c00044 	movi	r7,1
 8004998:	003f8706 	br	80047b8 <__alt_data_end+0xfc0047b8>
 800499c:	01c000c4 	movi	r7,3
 80049a0:	003f8506 	br	80047b8 <__alt_data_end+0xfc0047b8>
 80049a4:	05000104 	movi	r20,4
 80049a8:	0023883a 	mov	r17,zero
 80049ac:	0027883a 	mov	r19,zero
 80049b0:	02000044 	movi	r8,1
 80049b4:	003f6e06 	br	8004770 <__alt_data_end+0xfc004770>
 80049b8:	05000304 	movi	r20,12
 80049bc:	020000c4 	movi	r8,3
 80049c0:	003f6b06 	br	8004770 <__alt_data_end+0xfc004770>
 80049c4:	01400434 	movhi	r5,16
 80049c8:	000d883a 	mov	r6,zero
 80049cc:	297fffc4 	addi	r5,r5,-1
 80049d0:	04ffffc4 	movi	r19,-1
 80049d4:	0201ffc4 	movi	r8,2047
 80049d8:	003fa406 	br	800486c <__alt_data_end+0xfc00486c>
 80049dc:	043f0084 	movi	r16,-1022
 80049e0:	84a1c83a 	sub	r16,r16,r18
 80049e4:	00800e04 	movi	r2,56
 80049e8:	14014d0e 	bge	r2,r16,8004f20 <__divdf3+0x82c>
 80049ec:	a180004c 	andi	r6,r20,1
 80049f0:	0011883a 	mov	r8,zero
 80049f4:	000b883a 	mov	r5,zero
 80049f8:	0027883a 	mov	r19,zero
 80049fc:	003f9b06 	br	800486c <__alt_data_end+0xfc00486c>
 8004a00:	8880022c 	andhi	r2,r17,8
 8004a04:	1000f026 	beq	r2,zero,8004dc8 <__divdf3+0x6d4>
 8004a08:	8080022c 	andhi	r2,r16,8
 8004a0c:	1000ee1e 	bne	r2,zero,8004dc8 <__divdf3+0x6d4>
 8004a10:	00800434 	movhi	r2,16
 8004a14:	81400234 	orhi	r5,r16,8
 8004a18:	10bfffc4 	addi	r2,r2,-1
 8004a1c:	b80d883a 	mov	r6,r23
 8004a20:	288a703a 	and	r5,r5,r2
 8004a24:	a827883a 	mov	r19,r21
 8004a28:	003fea06 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004a2c:	84411c36 	bltu	r16,r17,8004ea0 <__divdf3+0x7ac>
 8004a30:	8c011a26 	beq	r17,r16,8004e9c <__divdf3+0x7a8>
 8004a34:	94bfffc4 	addi	r18,r18,-1
 8004a38:	dcc00015 	stw	r19,0(sp)
 8004a3c:	8811883a 	mov	r8,r17
 8004a40:	002d883a 	mov	r22,zero
 8004a44:	a80cd63a 	srli	r6,r21,24
 8004a48:	8020923a 	slli	r16,r16,8
 8004a4c:	a82a923a 	slli	r21,r21,8
 8004a50:	4009883a 	mov	r4,r8
 8004a54:	342eb03a 	or	r23,r6,r16
 8004a58:	dd400115 	stw	r21,4(sp)
 8004a5c:	b82ad43a 	srli	r21,r23,16
 8004a60:	da000315 	stw	r8,12(sp)
 8004a64:	bcffffcc 	andi	r19,r23,65535
 8004a68:	a80b883a 	mov	r5,r21
 8004a6c:	80040800 	call	8004080 <__udivsi3>
 8004a70:	1009883a 	mov	r4,r2
 8004a74:	980b883a 	mov	r5,r19
 8004a78:	1023883a 	mov	r17,r2
 8004a7c:	80040900 	call	8004090 <__mulsi3>
 8004a80:	da000317 	ldw	r8,12(sp)
 8004a84:	a80b883a 	mov	r5,r21
 8004a88:	1039883a 	mov	fp,r2
 8004a8c:	4009883a 	mov	r4,r8
 8004a90:	80040880 	call	8004088 <__umodsi3>
 8004a94:	d8c00017 	ldw	r3,0(sp)
 8004a98:	1004943a 	slli	r2,r2,16
 8004a9c:	1810d43a 	srli	r8,r3,16
 8004aa0:	120eb03a 	or	r7,r2,r8
 8004aa4:	3f00062e 	bgeu	r7,fp,8004ac0 <__divdf3+0x3cc>
 8004aa8:	3dcf883a 	add	r7,r7,r23
 8004aac:	88bfffc4 	addi	r2,r17,-1
 8004ab0:	3dc10a36 	bltu	r7,r23,8004edc <__divdf3+0x7e8>
 8004ab4:	3f01092e 	bgeu	r7,fp,8004edc <__divdf3+0x7e8>
 8004ab8:	8c7fff84 	addi	r17,r17,-2
 8004abc:	3dcf883a 	add	r7,r7,r23
 8004ac0:	3f39c83a 	sub	fp,r7,fp
 8004ac4:	e009883a 	mov	r4,fp
 8004ac8:	a80b883a 	mov	r5,r21
 8004acc:	80040800 	call	8004080 <__udivsi3>
 8004ad0:	1009883a 	mov	r4,r2
 8004ad4:	980b883a 	mov	r5,r19
 8004ad8:	1021883a 	mov	r16,r2
 8004adc:	80040900 	call	8004090 <__mulsi3>
 8004ae0:	e009883a 	mov	r4,fp
 8004ae4:	a80b883a 	mov	r5,r21
 8004ae8:	d8800315 	stw	r2,12(sp)
 8004aec:	80040880 	call	8004088 <__umodsi3>
 8004af0:	d9000017 	ldw	r4,0(sp)
 8004af4:	1004943a 	slli	r2,r2,16
 8004af8:	da000317 	ldw	r8,12(sp)
 8004afc:	20ffffcc 	andi	r3,r4,65535
 8004b00:	10ceb03a 	or	r7,r2,r3
 8004b04:	3a00062e 	bgeu	r7,r8,8004b20 <__divdf3+0x42c>
 8004b08:	3dcf883a 	add	r7,r7,r23
 8004b0c:	80bfffc4 	addi	r2,r16,-1
 8004b10:	3dc0f036 	bltu	r7,r23,8004ed4 <__divdf3+0x7e0>
 8004b14:	3a00ef2e 	bgeu	r7,r8,8004ed4 <__divdf3+0x7e0>
 8004b18:	843fff84 	addi	r16,r16,-2
 8004b1c:	3dcf883a 	add	r7,r7,r23
 8004b20:	d8c00117 	ldw	r3,4(sp)
 8004b24:	8822943a 	slli	r17,r17,16
 8004b28:	3a0fc83a 	sub	r7,r7,r8
 8004b2c:	1806d43a 	srli	r3,r3,16
 8004b30:	8462b03a 	or	r17,r16,r17
 8004b34:	8affffcc 	andi	r11,r17,65535
 8004b38:	d8c00015 	stw	r3,0(sp)
 8004b3c:	d8c00117 	ldw	r3,4(sp)
 8004b40:	8820d43a 	srli	r16,r17,16
 8004b44:	5809883a 	mov	r4,r11
 8004b48:	1f3fffcc 	andi	fp,r3,65535
 8004b4c:	e00b883a 	mov	r5,fp
 8004b50:	d9c00515 	stw	r7,20(sp)
 8004b54:	dac00215 	stw	r11,8(sp)
 8004b58:	80040900 	call	8004090 <__mulsi3>
 8004b5c:	8009883a 	mov	r4,r16
 8004b60:	e00b883a 	mov	r5,fp
 8004b64:	d8800415 	stw	r2,16(sp)
 8004b68:	80040900 	call	8004090 <__mulsi3>
 8004b6c:	d9400017 	ldw	r5,0(sp)
 8004b70:	8009883a 	mov	r4,r16
 8004b74:	d8800315 	stw	r2,12(sp)
 8004b78:	80040900 	call	8004090 <__mulsi3>
 8004b7c:	dac00217 	ldw	r11,8(sp)
 8004b80:	d9400017 	ldw	r5,0(sp)
 8004b84:	d8800215 	stw	r2,8(sp)
 8004b88:	5809883a 	mov	r4,r11
 8004b8c:	80040900 	call	8004090 <__mulsi3>
 8004b90:	da400417 	ldw	r9,16(sp)
 8004b94:	da800317 	ldw	r10,12(sp)
 8004b98:	d9c00517 	ldw	r7,20(sp)
 8004b9c:	480ad43a 	srli	r5,r9,16
 8004ba0:	5085883a 	add	r2,r10,r2
 8004ba4:	db000217 	ldw	r12,8(sp)
 8004ba8:	1151883a 	add	r8,r2,r5
 8004bac:	4280022e 	bgeu	r8,r10,8004bb8 <__divdf3+0x4c4>
 8004bb0:	00800074 	movhi	r2,1
 8004bb4:	6099883a 	add	r12,r12,r2
 8004bb8:	400ad43a 	srli	r5,r8,16
 8004bbc:	4010943a 	slli	r8,r8,16
 8004bc0:	4c3fffcc 	andi	r16,r9,65535
 8004bc4:	6149883a 	add	r4,r12,r5
 8004bc8:	4411883a 	add	r8,r8,r16
 8004bcc:	3900a736 	bltu	r7,r4,8004e6c <__divdf3+0x778>
 8004bd0:	3900c426 	beq	r7,r4,8004ee4 <__divdf3+0x7f0>
 8004bd4:	3909c83a 	sub	r4,r7,r4
 8004bd8:	b221c83a 	sub	r16,r22,r8
 8004bdc:	b42d803a 	cmpltu	r22,r22,r16
 8004be0:	25adc83a 	sub	r22,r4,r22
 8004be4:	b5c0c626 	beq	r22,r23,8004f00 <__divdf3+0x80c>
 8004be8:	b009883a 	mov	r4,r22
 8004bec:	a80b883a 	mov	r5,r21
 8004bf0:	80040800 	call	8004080 <__udivsi3>
 8004bf4:	1009883a 	mov	r4,r2
 8004bf8:	980b883a 	mov	r5,r19
 8004bfc:	d8800315 	stw	r2,12(sp)
 8004c00:	80040900 	call	8004090 <__mulsi3>
 8004c04:	a80b883a 	mov	r5,r21
 8004c08:	b009883a 	mov	r4,r22
 8004c0c:	d8800415 	stw	r2,16(sp)
 8004c10:	80040880 	call	8004088 <__umodsi3>
 8004c14:	1004943a 	slli	r2,r2,16
 8004c18:	800ed43a 	srli	r7,r16,16
 8004c1c:	da400417 	ldw	r9,16(sp)
 8004c20:	da000317 	ldw	r8,12(sp)
 8004c24:	11cab03a 	or	r5,r2,r7
 8004c28:	2a40062e 	bgeu	r5,r9,8004c44 <__divdf3+0x550>
 8004c2c:	2dcb883a 	add	r5,r5,r23
 8004c30:	40bfffc4 	addi	r2,r8,-1
 8004c34:	2dc0b436 	bltu	r5,r23,8004f08 <__divdf3+0x814>
 8004c38:	2a40b32e 	bgeu	r5,r9,8004f08 <__divdf3+0x814>
 8004c3c:	423fff84 	addi	r8,r8,-2
 8004c40:	2dcb883a 	add	r5,r5,r23
 8004c44:	2a6dc83a 	sub	r22,r5,r9
 8004c48:	b009883a 	mov	r4,r22
 8004c4c:	a80b883a 	mov	r5,r21
 8004c50:	da000315 	stw	r8,12(sp)
 8004c54:	80040800 	call	8004080 <__udivsi3>
 8004c58:	980b883a 	mov	r5,r19
 8004c5c:	1009883a 	mov	r4,r2
 8004c60:	d8800415 	stw	r2,16(sp)
 8004c64:	80040900 	call	8004090 <__mulsi3>
 8004c68:	b009883a 	mov	r4,r22
 8004c6c:	a80b883a 	mov	r5,r21
 8004c70:	1027883a 	mov	r19,r2
 8004c74:	80040880 	call	8004088 <__umodsi3>
 8004c78:	1004943a 	slli	r2,r2,16
 8004c7c:	843fffcc 	andi	r16,r16,65535
 8004c80:	da000317 	ldw	r8,12(sp)
 8004c84:	140eb03a 	or	r7,r2,r16
 8004c88:	da400417 	ldw	r9,16(sp)
 8004c8c:	3cc0062e 	bgeu	r7,r19,8004ca8 <__divdf3+0x5b4>
 8004c90:	3dcf883a 	add	r7,r7,r23
 8004c94:	48bfffc4 	addi	r2,r9,-1
 8004c98:	3dc09d36 	bltu	r7,r23,8004f10 <__divdf3+0x81c>
 8004c9c:	3cc09c2e 	bgeu	r7,r19,8004f10 <__divdf3+0x81c>
 8004ca0:	4a7fff84 	addi	r9,r9,-2
 8004ca4:	3dcf883a 	add	r7,r7,r23
 8004ca8:	4010943a 	slli	r8,r8,16
 8004cac:	3cebc83a 	sub	r21,r7,r19
 8004cb0:	e00b883a 	mov	r5,fp
 8004cb4:	4a26b03a 	or	r19,r9,r8
 8004cb8:	99ffffcc 	andi	r7,r19,65535
 8004cbc:	9820d43a 	srli	r16,r19,16
 8004cc0:	3809883a 	mov	r4,r7
 8004cc4:	d9c00515 	stw	r7,20(sp)
 8004cc8:	80040900 	call	8004090 <__mulsi3>
 8004ccc:	8009883a 	mov	r4,r16
 8004cd0:	e00b883a 	mov	r5,fp
 8004cd4:	102d883a 	mov	r22,r2
 8004cd8:	80040900 	call	8004090 <__mulsi3>
 8004cdc:	d9400017 	ldw	r5,0(sp)
 8004ce0:	8009883a 	mov	r4,r16
 8004ce4:	1039883a 	mov	fp,r2
 8004ce8:	80040900 	call	8004090 <__mulsi3>
 8004cec:	d9c00517 	ldw	r7,20(sp)
 8004cf0:	d9400017 	ldw	r5,0(sp)
 8004cf4:	1021883a 	mov	r16,r2
 8004cf8:	3809883a 	mov	r4,r7
 8004cfc:	80040900 	call	8004090 <__mulsi3>
 8004d00:	b008d43a 	srli	r4,r22,16
 8004d04:	e085883a 	add	r2,fp,r2
 8004d08:	1109883a 	add	r4,r2,r4
 8004d0c:	2700022e 	bgeu	r4,fp,8004d18 <__divdf3+0x624>
 8004d10:	00800074 	movhi	r2,1
 8004d14:	80a1883a 	add	r16,r16,r2
 8004d18:	200ad43a 	srli	r5,r4,16
 8004d1c:	2008943a 	slli	r4,r4,16
 8004d20:	b5bfffcc 	andi	r22,r22,65535
 8004d24:	8145883a 	add	r2,r16,r5
 8004d28:	2589883a 	add	r4,r4,r22
 8004d2c:	a8802c36 	bltu	r21,r2,8004de0 <__divdf3+0x6ec>
 8004d30:	a880a426 	beq	r21,r2,8004fc4 <__divdf3+0x8d0>
 8004d34:	9cc00054 	ori	r19,r19,1
 8004d38:	9200ffc4 	addi	r8,r18,1023
 8004d3c:	023f270e 	bge	zero,r8,80049dc <__alt_data_end+0xfc0049dc>
 8004d40:	988001cc 	andi	r2,r19,7
 8004d44:	10000726 	beq	r2,zero,8004d64 <__divdf3+0x670>
 8004d48:	990003cc 	andi	r4,r19,15
 8004d4c:	00800104 	movi	r2,4
 8004d50:	20800426 	beq	r4,r2,8004d64 <__divdf3+0x670>
 8004d54:	9885883a 	add	r2,r19,r2
 8004d58:	14e7803a 	cmpltu	r19,r2,r19
 8004d5c:	8ce3883a 	add	r17,r17,r19
 8004d60:	1027883a 	mov	r19,r2
 8004d64:	8880402c 	andhi	r2,r17,256
 8004d68:	10000426 	beq	r2,zero,8004d7c <__divdf3+0x688>
 8004d6c:	00bfc034 	movhi	r2,65280
 8004d70:	10bfffc4 	addi	r2,r2,-1
 8004d74:	92010004 	addi	r8,r18,1024
 8004d78:	88a2703a 	and	r17,r17,r2
 8004d7c:	0081ff84 	movi	r2,2046
 8004d80:	123eb616 	blt	r2,r8,800485c <__alt_data_end+0xfc00485c>
 8004d84:	9826d0fa 	srli	r19,r19,3
 8004d88:	8804977a 	slli	r2,r17,29
 8004d8c:	8820927a 	slli	r16,r17,9
 8004d90:	4201ffcc 	andi	r8,r8,2047
 8004d94:	14e6b03a 	or	r19,r2,r19
 8004d98:	800ad33a 	srli	r5,r16,12
 8004d9c:	a180004c 	andi	r6,r20,1
 8004da0:	003eb206 	br	800486c <__alt_data_end+0xfc00486c>
 8004da4:	008000c4 	movi	r2,3
 8004da8:	4080ac26 	beq	r8,r2,800505c <__divdf3+0x968>
 8004dac:	00800044 	movi	r2,1
 8004db0:	4080591e 	bne	r8,r2,8004f18 <__divdf3+0x824>
 8004db4:	e00d883a 	mov	r6,fp
 8004db8:	0011883a 	mov	r8,zero
 8004dbc:	000b883a 	mov	r5,zero
 8004dc0:	0027883a 	mov	r19,zero
 8004dc4:	003ea906 	br	800486c <__alt_data_end+0xfc00486c>
 8004dc8:	00800434 	movhi	r2,16
 8004dcc:	89400234 	orhi	r5,r17,8
 8004dd0:	10bfffc4 	addi	r2,r2,-1
 8004dd4:	b00d883a 	mov	r6,r22
 8004dd8:	288a703a 	and	r5,r5,r2
 8004ddc:	003efd06 	br	80049d4 <__alt_data_end+0xfc0049d4>
 8004de0:	adcf883a 	add	r7,r21,r23
 8004de4:	997fffc4 	addi	r5,r19,-1
 8004de8:	3dc0412e 	bgeu	r7,r23,8004ef0 <__divdf3+0x7fc>
 8004dec:	2827883a 	mov	r19,r5
 8004df0:	38bfd01e 	bne	r7,r2,8004d34 <__alt_data_end+0xfc004d34>
 8004df4:	d8c00117 	ldw	r3,4(sp)
 8004df8:	193fce1e 	bne	r3,r4,8004d34 <__alt_data_end+0xfc004d34>
 8004dfc:	003fce06 	br	8004d38 <__alt_data_end+0xfc004d38>
 8004e00:	d9800215 	stw	r6,8(sp)
 8004e04:	d9c00515 	stw	r7,20(sp)
 8004e08:	8005d840 	call	8005d84 <__clzsi2>
 8004e0c:	10c00804 	addi	r3,r2,32
 8004e10:	010009c4 	movi	r4,39
 8004e14:	d9800217 	ldw	r6,8(sp)
 8004e18:	d9c00517 	ldw	r7,20(sp)
 8004e1c:	20feb20e 	bge	r4,r3,80048e8 <__alt_data_end+0xfc0048e8>
 8004e20:	117ffe04 	addi	r5,r2,-8
 8004e24:	a162983a 	sll	r17,r20,r5
 8004e28:	0027883a 	mov	r19,zero
 8004e2c:	003eb506 	br	8004904 <__alt_data_end+0xfc004904>
 8004e30:	3009883a 	mov	r4,r6
 8004e34:	d9800215 	stw	r6,8(sp)
 8004e38:	da000315 	stw	r8,12(sp)
 8004e3c:	da400415 	stw	r9,16(sp)
 8004e40:	8005d840 	call	8005d84 <__clzsi2>
 8004e44:	10c00804 	addi	r3,r2,32
 8004e48:	010009c4 	movi	r4,39
 8004e4c:	d9800217 	ldw	r6,8(sp)
 8004e50:	da000317 	ldw	r8,12(sp)
 8004e54:	da400417 	ldw	r9,16(sp)
 8004e58:	20fec10e 	bge	r4,r3,8004960 <__alt_data_end+0xfc004960>
 8004e5c:	10bffe04 	addi	r2,r2,-8
 8004e60:	a8a0983a 	sll	r16,r21,r2
 8004e64:	002b883a 	mov	r21,zero
 8004e68:	003ec406 	br	800497c <__alt_data_end+0xfc00497c>
 8004e6c:	d8c00117 	ldw	r3,4(sp)
 8004e70:	b0ed883a 	add	r22,r22,r3
 8004e74:	b0c5803a 	cmpltu	r2,r22,r3
 8004e78:	15c5883a 	add	r2,r2,r23
 8004e7c:	11cf883a 	add	r7,r2,r7
 8004e80:	88bfffc4 	addi	r2,r17,-1
 8004e84:	b9c00d2e 	bgeu	r23,r7,8004ebc <__divdf3+0x7c8>
 8004e88:	39003f36 	bltu	r7,r4,8004f88 <__divdf3+0x894>
 8004e8c:	21c06a26 	beq	r4,r7,8005038 <__divdf3+0x944>
 8004e90:	3909c83a 	sub	r4,r7,r4
 8004e94:	1023883a 	mov	r17,r2
 8004e98:	003f4f06 	br	8004bd8 <__alt_data_end+0xfc004bd8>
 8004e9c:	9d7ee536 	bltu	r19,r21,8004a34 <__alt_data_end+0xfc004a34>
 8004ea0:	982ed07a 	srli	r23,r19,1
 8004ea4:	880497fa 	slli	r2,r17,31
 8004ea8:	8810d07a 	srli	r8,r17,1
 8004eac:	982c97fa 	slli	r22,r19,31
 8004eb0:	b884b03a 	or	r2,r23,r2
 8004eb4:	d8800015 	stw	r2,0(sp)
 8004eb8:	003ee206 	br	8004a44 <__alt_data_end+0xfc004a44>
 8004ebc:	3dfff41e 	bne	r7,r23,8004e90 <__alt_data_end+0xfc004e90>
 8004ec0:	d8c00117 	ldw	r3,4(sp)
 8004ec4:	b0fff02e 	bgeu	r22,r3,8004e88 <__alt_data_end+0xfc004e88>
 8004ec8:	b909c83a 	sub	r4,r23,r4
 8004ecc:	1023883a 	mov	r17,r2
 8004ed0:	003f4106 	br	8004bd8 <__alt_data_end+0xfc004bd8>
 8004ed4:	1021883a 	mov	r16,r2
 8004ed8:	003f1106 	br	8004b20 <__alt_data_end+0xfc004b20>
 8004edc:	1023883a 	mov	r17,r2
 8004ee0:	003ef706 	br	8004ac0 <__alt_data_end+0xfc004ac0>
 8004ee4:	b23fe136 	bltu	r22,r8,8004e6c <__alt_data_end+0xfc004e6c>
 8004ee8:	0009883a 	mov	r4,zero
 8004eec:	003f3a06 	br	8004bd8 <__alt_data_end+0xfc004bd8>
 8004ef0:	38802c36 	bltu	r7,r2,8004fa4 <__divdf3+0x8b0>
 8004ef4:	11c05326 	beq	r2,r7,8005044 <__divdf3+0x950>
 8004ef8:	2827883a 	mov	r19,r5
 8004efc:	003f8d06 	br	8004d34 <__alt_data_end+0xfc004d34>
 8004f00:	04ffffc4 	movi	r19,-1
 8004f04:	003f8c06 	br	8004d38 <__alt_data_end+0xfc004d38>
 8004f08:	1011883a 	mov	r8,r2
 8004f0c:	003f4d06 	br	8004c44 <__alt_data_end+0xfc004c44>
 8004f10:	1013883a 	mov	r9,r2
 8004f14:	003f6406 	br	8004ca8 <__alt_data_end+0xfc004ca8>
 8004f18:	e029883a 	mov	r20,fp
 8004f1c:	003f8606 	br	8004d38 <__alt_data_end+0xfc004d38>
 8004f20:	008007c4 	movi	r2,31
 8004f24:	14002a16 	blt	r2,r16,8004fd0 <__divdf3+0x8dc>
 8004f28:	91410784 	addi	r5,r18,1054
 8004f2c:	9c0cd83a 	srl	r6,r19,r16
 8004f30:	8948983a 	sll	r4,r17,r5
 8004f34:	9944983a 	sll	r2,r19,r5
 8004f38:	8c20d83a 	srl	r16,r17,r16
 8004f3c:	3108b03a 	or	r4,r6,r4
 8004f40:	1004c03a 	cmpne	r2,r2,zero
 8004f44:	2084b03a 	or	r2,r4,r2
 8004f48:	110001cc 	andi	r4,r2,7
 8004f4c:	20000726 	beq	r4,zero,8004f6c <__divdf3+0x878>
 8004f50:	114003cc 	andi	r5,r2,15
 8004f54:	01000104 	movi	r4,4
 8004f58:	29000426 	beq	r5,r4,8004f6c <__divdf3+0x878>
 8004f5c:	11000104 	addi	r4,r2,4
 8004f60:	2085803a 	cmpltu	r2,r4,r2
 8004f64:	80a1883a 	add	r16,r16,r2
 8004f68:	2005883a 	mov	r2,r4
 8004f6c:	8100202c 	andhi	r4,r16,128
 8004f70:	20002d26 	beq	r4,zero,8005028 <__divdf3+0x934>
 8004f74:	a180004c 	andi	r6,r20,1
 8004f78:	02000044 	movi	r8,1
 8004f7c:	000b883a 	mov	r5,zero
 8004f80:	0027883a 	mov	r19,zero
 8004f84:	003e3906 	br	800486c <__alt_data_end+0xfc00486c>
 8004f88:	d8c00117 	ldw	r3,4(sp)
 8004f8c:	8c7fff84 	addi	r17,r17,-2
 8004f90:	b0ed883a 	add	r22,r22,r3
 8004f94:	b0c5803a 	cmpltu	r2,r22,r3
 8004f98:	15c5883a 	add	r2,r2,r23
 8004f9c:	11cf883a 	add	r7,r2,r7
 8004fa0:	003f0c06 	br	8004bd4 <__alt_data_end+0xfc004bd4>
 8004fa4:	d8c00117 	ldw	r3,4(sp)
 8004fa8:	997fff84 	addi	r5,r19,-2
 8004fac:	18d1883a 	add	r8,r3,r3
 8004fb0:	40c7803a 	cmpltu	r3,r8,r3
 8004fb4:	1dcd883a 	add	r6,r3,r23
 8004fb8:	398f883a 	add	r7,r7,r6
 8004fbc:	da000115 	stw	r8,4(sp)
 8004fc0:	003f8a06 	br	8004dec <__alt_data_end+0xfc004dec>
 8004fc4:	203f861e 	bne	r4,zero,8004de0 <__alt_data_end+0xfc004de0>
 8004fc8:	d8000115 	stw	zero,4(sp)
 8004fcc:	003f8906 	br	8004df4 <__alt_data_end+0xfc004df4>
 8004fd0:	00bef884 	movi	r2,-1054
 8004fd4:	1485c83a 	sub	r2,r2,r18
 8004fd8:	01000804 	movi	r4,32
 8004fdc:	8884d83a 	srl	r2,r17,r2
 8004fe0:	81001c26 	beq	r16,r4,8005054 <__divdf3+0x960>
 8004fe4:	91010f84 	addi	r4,r18,1086
 8004fe8:	8908983a 	sll	r4,r17,r4
 8004fec:	24c8b03a 	or	r4,r4,r19
 8004ff0:	2008c03a 	cmpne	r4,r4,zero
 8004ff4:	2084b03a 	or	r2,r4,r2
 8004ff8:	140001cc 	andi	r16,r2,7
 8004ffc:	8000061e 	bne	r16,zero,8005018 <__divdf3+0x924>
 8005000:	000b883a 	mov	r5,zero
 8005004:	1004d0fa 	srli	r2,r2,3
 8005008:	a180004c 	andi	r6,r20,1
 800500c:	0011883a 	mov	r8,zero
 8005010:	1426b03a 	or	r19,r2,r16
 8005014:	003e1506 	br	800486c <__alt_data_end+0xfc00486c>
 8005018:	114003cc 	andi	r5,r2,15
 800501c:	01000104 	movi	r4,4
 8005020:	0021883a 	mov	r16,zero
 8005024:	293fcd1e 	bne	r5,r4,8004f5c <__alt_data_end+0xfc004f5c>
 8005028:	800a927a 	slli	r5,r16,9
 800502c:	8020977a 	slli	r16,r16,29
 8005030:	280ad33a 	srli	r5,r5,12
 8005034:	003ff306 	br	8005004 <__alt_data_end+0xfc005004>
 8005038:	b23fd336 	bltu	r22,r8,8004f88 <__alt_data_end+0xfc004f88>
 800503c:	1023883a 	mov	r17,r2
 8005040:	003fa906 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 8005044:	d8c00117 	ldw	r3,4(sp)
 8005048:	193fd636 	bltu	r3,r4,8004fa4 <__alt_data_end+0xfc004fa4>
 800504c:	2827883a 	mov	r19,r5
 8005050:	003f6806 	br	8004df4 <__alt_data_end+0xfc004df4>
 8005054:	0009883a 	mov	r4,zero
 8005058:	003fe406 	br	8004fec <__alt_data_end+0xfc004fec>
 800505c:	00800434 	movhi	r2,16
 8005060:	89400234 	orhi	r5,r17,8
 8005064:	10bfffc4 	addi	r2,r2,-1
 8005068:	e00d883a 	mov	r6,fp
 800506c:	288a703a 	and	r5,r5,r2
 8005070:	003e5806 	br	80049d4 <__alt_data_end+0xfc0049d4>

08005074 <__muldf3>:
 8005074:	deffee04 	addi	sp,sp,-72
 8005078:	dd000c15 	stw	r20,48(sp)
 800507c:	2828d53a 	srli	r20,r5,20
 8005080:	dd400d15 	stw	r21,52(sp)
 8005084:	282ad7fa 	srli	r21,r5,31
 8005088:	dc000815 	stw	r16,32(sp)
 800508c:	04000434 	movhi	r16,16
 8005090:	ddc00f15 	stw	r23,60(sp)
 8005094:	dcc00b15 	stw	r19,44(sp)
 8005098:	dc800a15 	stw	r18,40(sp)
 800509c:	843fffc4 	addi	r16,r16,-1
 80050a0:	dfc01115 	stw	ra,68(sp)
 80050a4:	df001015 	stw	fp,64(sp)
 80050a8:	dd800e15 	stw	r22,56(sp)
 80050ac:	dc400915 	stw	r17,36(sp)
 80050b0:	a501ffcc 	andi	r20,r20,2047
 80050b4:	2025883a 	mov	r18,r4
 80050b8:	202f883a 	mov	r23,r4
 80050bc:	2c20703a 	and	r16,r5,r16
 80050c0:	a827883a 	mov	r19,r21
 80050c4:	aa403fcc 	andi	r9,r21,255
 80050c8:	a0005926 	beq	r20,zero,8005230 <__muldf3+0x1bc>
 80050cc:	0081ffc4 	movi	r2,2047
 80050d0:	a0803426 	beq	r20,r2,80051a4 <__muldf3+0x130>
 80050d4:	84000434 	orhi	r16,r16,16
 80050d8:	2004d77a 	srli	r2,r4,29
 80050dc:	802090fa 	slli	r16,r16,3
 80050e0:	202e90fa 	slli	r23,r4,3
 80050e4:	a53f0044 	addi	r20,r20,-1023
 80050e8:	80a0b03a 	or	r16,r16,r2
 80050ec:	000b883a 	mov	r5,zero
 80050f0:	0039883a 	mov	fp,zero
 80050f4:	3806d53a 	srli	r3,r7,20
 80050f8:	382cd7fa 	srli	r22,r7,31
 80050fc:	00800434 	movhi	r2,16
 8005100:	10bfffc4 	addi	r2,r2,-1
 8005104:	18c1ffcc 	andi	r3,r3,2047
 8005108:	3025883a 	mov	r18,r6
 800510c:	38a2703a 	and	r17,r7,r2
 8005110:	b2803fcc 	andi	r10,r22,255
 8005114:	18006426 	beq	r3,zero,80052a8 <__muldf3+0x234>
 8005118:	0081ffc4 	movi	r2,2047
 800511c:	18805c26 	beq	r3,r2,8005290 <__muldf3+0x21c>
 8005120:	8c400434 	orhi	r17,r17,16
 8005124:	3004d77a 	srli	r2,r6,29
 8005128:	882290fa 	slli	r17,r17,3
 800512c:	302490fa 	slli	r18,r6,3
 8005130:	18ff0044 	addi	r3,r3,-1023
 8005134:	88a2b03a 	or	r17,r17,r2
 8005138:	000f883a 	mov	r7,zero
 800513c:	394ab03a 	or	r5,r7,r5
 8005140:	280a90ba 	slli	r5,r5,2
 8005144:	00820034 	movhi	r2,2048
 8005148:	10945904 	addi	r2,r2,20836
 800514c:	288b883a 	add	r5,r5,r2
 8005150:	28800017 	ldw	r2,0(r5)
 8005154:	a0c7883a 	add	r3,r20,r3
 8005158:	b54cf03a 	xor	r6,r22,r21
 800515c:	1a000044 	addi	r8,r3,1
 8005160:	1000683a 	jmp	r2
 8005164:	080053a8 	cmpgeui	zero,at,334
 8005168:	08005394 	ori	zero,at,334
 800516c:	08005394 	ori	zero,at,334
 8005170:	08005380 	call	800538 <__alt_mem_sdram-0x77ffac8>
 8005174:	080051c0 	call	80051c <__alt_mem_sdram-0x77ffae4>
 8005178:	080051c0 	call	80051c <__alt_mem_sdram-0x77ffae4>
 800517c:	08005368 	cmpgeui	zero,at,333
 8005180:	08005380 	call	800538 <__alt_mem_sdram-0x77ffac8>
 8005184:	080051c0 	call	80051c <__alt_mem_sdram-0x77ffae4>
 8005188:	08005368 	cmpgeui	zero,at,333
 800518c:	080051c0 	call	80051c <__alt_mem_sdram-0x77ffae4>
 8005190:	08005380 	call	800538 <__alt_mem_sdram-0x77ffac8>
 8005194:	080051c4 	addi	zero,at,327
 8005198:	080051c4 	addi	zero,at,327
 800519c:	080051c4 	addi	zero,at,327
 80051a0:	080056e4 	muli	zero,at,347
 80051a4:	8104b03a 	or	r2,r16,r4
 80051a8:	10006c1e 	bne	r2,zero,800535c <__muldf3+0x2e8>
 80051ac:	01400204 	movi	r5,8
 80051b0:	0021883a 	mov	r16,zero
 80051b4:	002f883a 	mov	r23,zero
 80051b8:	07000084 	movi	fp,2
 80051bc:	003fcd06 	br	80050f4 <__alt_data_end+0xfc0050f4>
 80051c0:	3013883a 	mov	r9,r6
 80051c4:	00800084 	movi	r2,2
 80051c8:	e080501e 	bne	fp,r2,800530c <__muldf3+0x298>
 80051cc:	4cc0004c 	andi	r19,r9,1
 80051d0:	0101ffc4 	movi	r4,2047
 80051d4:	0021883a 	mov	r16,zero
 80051d8:	002f883a 	mov	r23,zero
 80051dc:	2008953a 	slli	r4,r4,20
 80051e0:	98c03fcc 	andi	r3,r19,255
 80051e4:	04400434 	movhi	r17,16
 80051e8:	8c7fffc4 	addi	r17,r17,-1
 80051ec:	180697fa 	slli	r3,r3,31
 80051f0:	8460703a 	and	r16,r16,r17
 80051f4:	8120b03a 	or	r16,r16,r4
 80051f8:	80c6b03a 	or	r3,r16,r3
 80051fc:	b805883a 	mov	r2,r23
 8005200:	dfc01117 	ldw	ra,68(sp)
 8005204:	df001017 	ldw	fp,64(sp)
 8005208:	ddc00f17 	ldw	r23,60(sp)
 800520c:	dd800e17 	ldw	r22,56(sp)
 8005210:	dd400d17 	ldw	r21,52(sp)
 8005214:	dd000c17 	ldw	r20,48(sp)
 8005218:	dcc00b17 	ldw	r19,44(sp)
 800521c:	dc800a17 	ldw	r18,40(sp)
 8005220:	dc400917 	ldw	r17,36(sp)
 8005224:	dc000817 	ldw	r16,32(sp)
 8005228:	dec01204 	addi	sp,sp,72
 800522c:	f800283a 	ret
 8005230:	8104b03a 	or	r2,r16,r4
 8005234:	10004426 	beq	r2,zero,8005348 <__muldf3+0x2d4>
 8005238:	80014b26 	beq	r16,zero,8005768 <__muldf3+0x6f4>
 800523c:	8009883a 	mov	r4,r16
 8005240:	d9800715 	stw	r6,28(sp)
 8005244:	d9c00215 	stw	r7,8(sp)
 8005248:	da400415 	stw	r9,16(sp)
 800524c:	8005d840 	call	8005d84 <__clzsi2>
 8005250:	d9800717 	ldw	r6,28(sp)
 8005254:	d9c00217 	ldw	r7,8(sp)
 8005258:	da400417 	ldw	r9,16(sp)
 800525c:	1007883a 	mov	r3,r2
 8005260:	01000a04 	movi	r4,40
 8005264:	1dfffe04 	addi	r23,r3,-8
 8005268:	20c9c83a 	sub	r4,r4,r3
 800526c:	85e0983a 	sll	r16,r16,r23
 8005270:	9108d83a 	srl	r4,r18,r4
 8005274:	95ee983a 	sll	r23,r18,r23
 8005278:	2420b03a 	or	r16,r4,r16
 800527c:	053f0344 	movi	r20,-1011
 8005280:	a0e9c83a 	sub	r20,r20,r3
 8005284:	000b883a 	mov	r5,zero
 8005288:	0039883a 	mov	fp,zero
 800528c:	003f9906 	br	80050f4 <__alt_data_end+0xfc0050f4>
 8005290:	8984b03a 	or	r2,r17,r6
 8005294:	10002a1e 	bne	r2,zero,8005340 <__muldf3+0x2cc>
 8005298:	0023883a 	mov	r17,zero
 800529c:	0025883a 	mov	r18,zero
 80052a0:	01c00084 	movi	r7,2
 80052a4:	003fa506 	br	800513c <__alt_data_end+0xfc00513c>
 80052a8:	8984b03a 	or	r2,r17,r6
 80052ac:	10002026 	beq	r2,zero,8005330 <__muldf3+0x2bc>
 80052b0:	88011c26 	beq	r17,zero,8005724 <__muldf3+0x6b0>
 80052b4:	8809883a 	mov	r4,r17
 80052b8:	d9400215 	stw	r5,8(sp)
 80052bc:	d9800715 	stw	r6,28(sp)
 80052c0:	da400415 	stw	r9,16(sp)
 80052c4:	da800315 	stw	r10,12(sp)
 80052c8:	8005d840 	call	8005d84 <__clzsi2>
 80052cc:	d9400217 	ldw	r5,8(sp)
 80052d0:	d9800717 	ldw	r6,28(sp)
 80052d4:	da400417 	ldw	r9,16(sp)
 80052d8:	da800317 	ldw	r10,12(sp)
 80052dc:	1007883a 	mov	r3,r2
 80052e0:	01000a04 	movi	r4,40
 80052e4:	1cbffe04 	addi	r18,r3,-8
 80052e8:	20c9c83a 	sub	r4,r4,r3
 80052ec:	8ca2983a 	sll	r17,r17,r18
 80052f0:	3108d83a 	srl	r4,r6,r4
 80052f4:	34a4983a 	sll	r18,r6,r18
 80052f8:	2462b03a 	or	r17,r4,r17
 80052fc:	00bf0344 	movi	r2,-1011
 8005300:	10c7c83a 	sub	r3,r2,r3
 8005304:	000f883a 	mov	r7,zero
 8005308:	003f8c06 	br	800513c <__alt_data_end+0xfc00513c>
 800530c:	008000c4 	movi	r2,3
 8005310:	e0816d26 	beq	fp,r2,80058c8 <__muldf3+0x854>
 8005314:	00800044 	movi	r2,1
 8005318:	e081321e 	bne	fp,r2,80057e4 <__muldf3+0x770>
 800531c:	48a6703a 	and	r19,r9,r2
 8005320:	0009883a 	mov	r4,zero
 8005324:	0021883a 	mov	r16,zero
 8005328:	002f883a 	mov	r23,zero
 800532c:	003fab06 	br	80051dc <__alt_data_end+0xfc0051dc>
 8005330:	0023883a 	mov	r17,zero
 8005334:	0025883a 	mov	r18,zero
 8005338:	01c00044 	movi	r7,1
 800533c:	003f7f06 	br	800513c <__alt_data_end+0xfc00513c>
 8005340:	01c000c4 	movi	r7,3
 8005344:	003f7d06 	br	800513c <__alt_data_end+0xfc00513c>
 8005348:	01400104 	movi	r5,4
 800534c:	0021883a 	mov	r16,zero
 8005350:	002f883a 	mov	r23,zero
 8005354:	07000044 	movi	fp,1
 8005358:	003f6606 	br	80050f4 <__alt_data_end+0xfc0050f4>
 800535c:	01400304 	movi	r5,12
 8005360:	070000c4 	movi	fp,3
 8005364:	003f6306 	br	80050f4 <__alt_data_end+0xfc0050f4>
 8005368:	04000434 	movhi	r16,16
 800536c:	0027883a 	mov	r19,zero
 8005370:	843fffc4 	addi	r16,r16,-1
 8005374:	05ffffc4 	movi	r23,-1
 8005378:	0101ffc4 	movi	r4,2047
 800537c:	003f9706 	br	80051dc <__alt_data_end+0xfc0051dc>
 8005380:	8821883a 	mov	r16,r17
 8005384:	902f883a 	mov	r23,r18
 8005388:	5013883a 	mov	r9,r10
 800538c:	3839883a 	mov	fp,r7
 8005390:	003f8c06 	br	80051c4 <__alt_data_end+0xfc0051c4>
 8005394:	8821883a 	mov	r16,r17
 8005398:	902f883a 	mov	r23,r18
 800539c:	3013883a 	mov	r9,r6
 80053a0:	3839883a 	mov	fp,r7
 80053a4:	003f8706 	br	80051c4 <__alt_data_end+0xfc0051c4>
 80053a8:	b82ad43a 	srli	r21,r23,16
 80053ac:	9038d43a 	srli	fp,r18,16
 80053b0:	bdffffcc 	andi	r23,r23,65535
 80053b4:	94bfffcc 	andi	r18,r18,65535
 80053b8:	9009883a 	mov	r4,r18
 80053bc:	b80b883a 	mov	r5,r23
 80053c0:	d8c00515 	stw	r3,20(sp)
 80053c4:	d9800715 	stw	r6,28(sp)
 80053c8:	da000615 	stw	r8,24(sp)
 80053cc:	80040900 	call	8004090 <__mulsi3>
 80053d0:	9009883a 	mov	r4,r18
 80053d4:	a80b883a 	mov	r5,r21
 80053d8:	1029883a 	mov	r20,r2
 80053dc:	80040900 	call	8004090 <__mulsi3>
 80053e0:	e009883a 	mov	r4,fp
 80053e4:	a80b883a 	mov	r5,r21
 80053e8:	102d883a 	mov	r22,r2
 80053ec:	80040900 	call	8004090 <__mulsi3>
 80053f0:	e009883a 	mov	r4,fp
 80053f4:	b80b883a 	mov	r5,r23
 80053f8:	1027883a 	mov	r19,r2
 80053fc:	80040900 	call	8004090 <__mulsi3>
 8005400:	a008d43a 	srli	r4,r20,16
 8005404:	b085883a 	add	r2,r22,r2
 8005408:	d8c00517 	ldw	r3,20(sp)
 800540c:	110f883a 	add	r7,r2,r4
 8005410:	d9800717 	ldw	r6,28(sp)
 8005414:	da000617 	ldw	r8,24(sp)
 8005418:	3d80022e 	bgeu	r7,r22,8005424 <__muldf3+0x3b0>
 800541c:	00800074 	movhi	r2,1
 8005420:	98a7883a 	add	r19,r19,r2
 8005424:	3804943a 	slli	r2,r7,16
 8005428:	380ed43a 	srli	r7,r7,16
 800542c:	882cd43a 	srli	r22,r17,16
 8005430:	a53fffcc 	andi	r20,r20,65535
 8005434:	8c7fffcc 	andi	r17,r17,65535
 8005438:	1529883a 	add	r20,r2,r20
 800543c:	8809883a 	mov	r4,r17
 8005440:	b80b883a 	mov	r5,r23
 8005444:	d8c00515 	stw	r3,20(sp)
 8005448:	d9800715 	stw	r6,28(sp)
 800544c:	da000615 	stw	r8,24(sp)
 8005450:	d9c00015 	stw	r7,0(sp)
 8005454:	dd000115 	stw	r20,4(sp)
 8005458:	80040900 	call	8004090 <__mulsi3>
 800545c:	a80b883a 	mov	r5,r21
 8005460:	8809883a 	mov	r4,r17
 8005464:	d8800415 	stw	r2,16(sp)
 8005468:	80040900 	call	8004090 <__mulsi3>
 800546c:	a80b883a 	mov	r5,r21
 8005470:	b009883a 	mov	r4,r22
 8005474:	1029883a 	mov	r20,r2
 8005478:	80040900 	call	8004090 <__mulsi3>
 800547c:	b009883a 	mov	r4,r22
 8005480:	b80b883a 	mov	r5,r23
 8005484:	102b883a 	mov	r21,r2
 8005488:	80040900 	call	8004090 <__mulsi3>
 800548c:	da400417 	ldw	r9,16(sp)
 8005490:	a085883a 	add	r2,r20,r2
 8005494:	d8c00517 	ldw	r3,20(sp)
 8005498:	4808d43a 	srli	r4,r9,16
 800549c:	d9800717 	ldw	r6,28(sp)
 80054a0:	da000617 	ldw	r8,24(sp)
 80054a4:	1109883a 	add	r4,r2,r4
 80054a8:	2500022e 	bgeu	r4,r20,80054b4 <__muldf3+0x440>
 80054ac:	00800074 	movhi	r2,1
 80054b0:	a8ab883a 	add	r21,r21,r2
 80054b4:	200e943a 	slli	r7,r4,16
 80054b8:	2004d43a 	srli	r2,r4,16
 80054bc:	802ed43a 	srli	r23,r16,16
 80054c0:	843fffcc 	andi	r16,r16,65535
 80054c4:	4d3fffcc 	andi	r20,r9,65535
 80054c8:	9009883a 	mov	r4,r18
 80054cc:	800b883a 	mov	r5,r16
 80054d0:	3d29883a 	add	r20,r7,r20
 80054d4:	d8c00515 	stw	r3,20(sp)
 80054d8:	d9800715 	stw	r6,28(sp)
 80054dc:	da000615 	stw	r8,24(sp)
 80054e0:	a8ab883a 	add	r21,r21,r2
 80054e4:	80040900 	call	8004090 <__mulsi3>
 80054e8:	9009883a 	mov	r4,r18
 80054ec:	b80b883a 	mov	r5,r23
 80054f0:	d8800315 	stw	r2,12(sp)
 80054f4:	80040900 	call	8004090 <__mulsi3>
 80054f8:	e009883a 	mov	r4,fp
 80054fc:	b80b883a 	mov	r5,r23
 8005500:	1025883a 	mov	r18,r2
 8005504:	80040900 	call	8004090 <__mulsi3>
 8005508:	e009883a 	mov	r4,fp
 800550c:	800b883a 	mov	r5,r16
 8005510:	d8800215 	stw	r2,8(sp)
 8005514:	80040900 	call	8004090 <__mulsi3>
 8005518:	da800317 	ldw	r10,12(sp)
 800551c:	d9400017 	ldw	r5,0(sp)
 8005520:	9085883a 	add	r2,r18,r2
 8005524:	5008d43a 	srli	r4,r10,16
 8005528:	a153883a 	add	r9,r20,r5
 800552c:	d8c00517 	ldw	r3,20(sp)
 8005530:	1109883a 	add	r4,r2,r4
 8005534:	d9800717 	ldw	r6,28(sp)
 8005538:	da000617 	ldw	r8,24(sp)
 800553c:	dac00217 	ldw	r11,8(sp)
 8005540:	2480022e 	bgeu	r4,r18,800554c <__muldf3+0x4d8>
 8005544:	00800074 	movhi	r2,1
 8005548:	5897883a 	add	r11,r11,r2
 800554c:	200e943a 	slli	r7,r4,16
 8005550:	2038d43a 	srli	fp,r4,16
 8005554:	52bfffcc 	andi	r10,r10,65535
 8005558:	3a8f883a 	add	r7,r7,r10
 800555c:	8809883a 	mov	r4,r17
 8005560:	800b883a 	mov	r5,r16
 8005564:	d8c00515 	stw	r3,20(sp)
 8005568:	d9800715 	stw	r6,28(sp)
 800556c:	d9c00215 	stw	r7,8(sp)
 8005570:	da000615 	stw	r8,24(sp)
 8005574:	da400415 	stw	r9,16(sp)
 8005578:	5f39883a 	add	fp,r11,fp
 800557c:	80040900 	call	8004090 <__mulsi3>
 8005580:	8809883a 	mov	r4,r17
 8005584:	b80b883a 	mov	r5,r23
 8005588:	1025883a 	mov	r18,r2
 800558c:	80040900 	call	8004090 <__mulsi3>
 8005590:	b009883a 	mov	r4,r22
 8005594:	b80b883a 	mov	r5,r23
 8005598:	d8800315 	stw	r2,12(sp)
 800559c:	80040900 	call	8004090 <__mulsi3>
 80055a0:	b009883a 	mov	r4,r22
 80055a4:	800b883a 	mov	r5,r16
 80055a8:	1023883a 	mov	r17,r2
 80055ac:	80040900 	call	8004090 <__mulsi3>
 80055b0:	da800317 	ldw	r10,12(sp)
 80055b4:	9008d43a 	srli	r4,r18,16
 80055b8:	d8c00517 	ldw	r3,20(sp)
 80055bc:	5085883a 	add	r2,r10,r2
 80055c0:	1109883a 	add	r4,r2,r4
 80055c4:	d9800717 	ldw	r6,28(sp)
 80055c8:	d9c00217 	ldw	r7,8(sp)
 80055cc:	da000617 	ldw	r8,24(sp)
 80055d0:	da400417 	ldw	r9,16(sp)
 80055d4:	2280022e 	bgeu	r4,r10,80055e0 <__muldf3+0x56c>
 80055d8:	00800074 	movhi	r2,1
 80055dc:	88a3883a 	add	r17,r17,r2
 80055e0:	2004943a 	slli	r2,r4,16
 80055e4:	94bfffcc 	andi	r18,r18,65535
 80055e8:	4ce7883a 	add	r19,r9,r19
 80055ec:	14a5883a 	add	r18,r2,r18
 80055f0:	9d29803a 	cmpltu	r20,r19,r20
 80055f4:	9565883a 	add	r18,r18,r21
 80055f8:	9505883a 	add	r2,r18,r20
 80055fc:	99e7883a 	add	r19,r19,r7
 8005600:	99cf803a 	cmpltu	r7,r19,r7
 8005604:	e08b883a 	add	r5,fp,r2
 8005608:	2008d43a 	srli	r4,r4,16
 800560c:	29ef883a 	add	r23,r5,r7
 8005610:	1529803a 	cmpltu	r20,r2,r20
 8005614:	956b803a 	cmpltu	r21,r18,r21
 8005618:	b9cf803a 	cmpltu	r7,r23,r7
 800561c:	a564b03a 	or	r18,r20,r21
 8005620:	2f39803a 	cmpltu	fp,r5,fp
 8005624:	9125883a 	add	r18,r18,r4
 8005628:	3f38b03a 	or	fp,r7,fp
 800562c:	9725883a 	add	r18,r18,fp
 8005630:	9804927a 	slli	r2,r19,9
 8005634:	9463883a 	add	r17,r18,r17
 8005638:	d9000117 	ldw	r4,4(sp)
 800563c:	b820d5fa 	srli	r16,r23,23
 8005640:	8822927a 	slli	r17,r17,9
 8005644:	9826d5fa 	srli	r19,r19,23
 8005648:	1104b03a 	or	r2,r2,r4
 800564c:	b82e927a 	slli	r23,r23,9
 8005650:	1004c03a 	cmpne	r2,r2,zero
 8005654:	8c20b03a 	or	r16,r17,r16
 8005658:	14e6b03a 	or	r19,r2,r19
 800565c:	8080402c 	andhi	r2,r16,256
 8005660:	9deeb03a 	or	r23,r19,r23
 8005664:	10000726 	beq	r2,zero,8005684 <__muldf3+0x610>
 8005668:	b804d07a 	srli	r2,r23,1
 800566c:	800697fa 	slli	r3,r16,31
 8005670:	bdc0004c 	andi	r23,r23,1
 8005674:	8020d07a 	srli	r16,r16,1
 8005678:	b8aeb03a 	or	r23,r23,r2
 800567c:	b8eeb03a 	or	r23,r23,r3
 8005680:	4007883a 	mov	r3,r8
 8005684:	1900ffc4 	addi	r4,r3,1023
 8005688:	01004d0e 	bge	zero,r4,80057c0 <__muldf3+0x74c>
 800568c:	b88001cc 	andi	r2,r23,7
 8005690:	10000726 	beq	r2,zero,80056b0 <__muldf3+0x63c>
 8005694:	b94003cc 	andi	r5,r23,15
 8005698:	00800104 	movi	r2,4
 800569c:	28800426 	beq	r5,r2,80056b0 <__muldf3+0x63c>
 80056a0:	b885883a 	add	r2,r23,r2
 80056a4:	15ef803a 	cmpltu	r23,r2,r23
 80056a8:	85e1883a 	add	r16,r16,r23
 80056ac:	102f883a 	mov	r23,r2
 80056b0:	8080402c 	andhi	r2,r16,256
 80056b4:	10000426 	beq	r2,zero,80056c8 <__muldf3+0x654>
 80056b8:	00bfc034 	movhi	r2,65280
 80056bc:	10bfffc4 	addi	r2,r2,-1
 80056c0:	19010004 	addi	r4,r3,1024
 80056c4:	80a0703a 	and	r16,r16,r2
 80056c8:	0081ff84 	movi	r2,2046
 80056cc:	1100340e 	bge	r2,r4,80057a0 <__muldf3+0x72c>
 80056d0:	34c0004c 	andi	r19,r6,1
 80056d4:	0101ffc4 	movi	r4,2047
 80056d8:	0021883a 	mov	r16,zero
 80056dc:	002f883a 	mov	r23,zero
 80056e0:	003ebe06 	br	80051dc <__alt_data_end+0xfc0051dc>
 80056e4:	8080022c 	andhi	r2,r16,8
 80056e8:	10000926 	beq	r2,zero,8005710 <__muldf3+0x69c>
 80056ec:	8880022c 	andhi	r2,r17,8
 80056f0:	1000071e 	bne	r2,zero,8005710 <__muldf3+0x69c>
 80056f4:	00800434 	movhi	r2,16
 80056f8:	8c000234 	orhi	r16,r17,8
 80056fc:	10bfffc4 	addi	r2,r2,-1
 8005700:	b027883a 	mov	r19,r22
 8005704:	80a0703a 	and	r16,r16,r2
 8005708:	902f883a 	mov	r23,r18
 800570c:	003f1a06 	br	8005378 <__alt_data_end+0xfc005378>
 8005710:	00800434 	movhi	r2,16
 8005714:	84000234 	orhi	r16,r16,8
 8005718:	10bfffc4 	addi	r2,r2,-1
 800571c:	80a0703a 	and	r16,r16,r2
 8005720:	003f1506 	br	8005378 <__alt_data_end+0xfc005378>
 8005724:	3009883a 	mov	r4,r6
 8005728:	d9400215 	stw	r5,8(sp)
 800572c:	d9800715 	stw	r6,28(sp)
 8005730:	da400415 	stw	r9,16(sp)
 8005734:	da800315 	stw	r10,12(sp)
 8005738:	8005d840 	call	8005d84 <__clzsi2>
 800573c:	10c00804 	addi	r3,r2,32
 8005740:	010009c4 	movi	r4,39
 8005744:	d9400217 	ldw	r5,8(sp)
 8005748:	d9800717 	ldw	r6,28(sp)
 800574c:	da400417 	ldw	r9,16(sp)
 8005750:	da800317 	ldw	r10,12(sp)
 8005754:	20fee20e 	bge	r4,r3,80052e0 <__alt_data_end+0xfc0052e0>
 8005758:	147ffe04 	addi	r17,r2,-8
 800575c:	9462983a 	sll	r17,r18,r17
 8005760:	0025883a 	mov	r18,zero
 8005764:	003ee506 	br	80052fc <__alt_data_end+0xfc0052fc>
 8005768:	d9800715 	stw	r6,28(sp)
 800576c:	d9c00215 	stw	r7,8(sp)
 8005770:	da400415 	stw	r9,16(sp)
 8005774:	8005d840 	call	8005d84 <__clzsi2>
 8005778:	10c00804 	addi	r3,r2,32
 800577c:	010009c4 	movi	r4,39
 8005780:	d9800717 	ldw	r6,28(sp)
 8005784:	d9c00217 	ldw	r7,8(sp)
 8005788:	da400417 	ldw	r9,16(sp)
 800578c:	20feb40e 	bge	r4,r3,8005260 <__alt_data_end+0xfc005260>
 8005790:	143ffe04 	addi	r16,r2,-8
 8005794:	9420983a 	sll	r16,r18,r16
 8005798:	002f883a 	mov	r23,zero
 800579c:	003eb706 	br	800527c <__alt_data_end+0xfc00527c>
 80057a0:	8004977a 	slli	r2,r16,29
 80057a4:	b82ed0fa 	srli	r23,r23,3
 80057a8:	8020927a 	slli	r16,r16,9
 80057ac:	2101ffcc 	andi	r4,r4,2047
 80057b0:	15eeb03a 	or	r23,r2,r23
 80057b4:	8020d33a 	srli	r16,r16,12
 80057b8:	34c0004c 	andi	r19,r6,1
 80057bc:	003e8706 	br	80051dc <__alt_data_end+0xfc0051dc>
 80057c0:	00bf0084 	movi	r2,-1022
 80057c4:	10c5c83a 	sub	r2,r2,r3
 80057c8:	01000e04 	movi	r4,56
 80057cc:	2080080e 	bge	r4,r2,80057f0 <__muldf3+0x77c>
 80057d0:	34c0004c 	andi	r19,r6,1
 80057d4:	0009883a 	mov	r4,zero
 80057d8:	0021883a 	mov	r16,zero
 80057dc:	002f883a 	mov	r23,zero
 80057e0:	003e7e06 	br	80051dc <__alt_data_end+0xfc0051dc>
 80057e4:	4007883a 	mov	r3,r8
 80057e8:	480d883a 	mov	r6,r9
 80057ec:	003fa506 	br	8005684 <__alt_data_end+0xfc005684>
 80057f0:	010007c4 	movi	r4,31
 80057f4:	20801816 	blt	r4,r2,8005858 <__muldf3+0x7e4>
 80057f8:	18c10784 	addi	r3,r3,1054
 80057fc:	80c8983a 	sll	r4,r16,r3
 8005800:	b88ad83a 	srl	r5,r23,r2
 8005804:	b8c6983a 	sll	r3,r23,r3
 8005808:	80a0d83a 	srl	r16,r16,r2
 800580c:	2908b03a 	or	r4,r5,r4
 8005810:	1804c03a 	cmpne	r2,r3,zero
 8005814:	2088b03a 	or	r4,r4,r2
 8005818:	208001cc 	andi	r2,r4,7
 800581c:	10000726 	beq	r2,zero,800583c <__muldf3+0x7c8>
 8005820:	20c003cc 	andi	r3,r4,15
 8005824:	00800104 	movi	r2,4
 8005828:	18800426 	beq	r3,r2,800583c <__muldf3+0x7c8>
 800582c:	20c00104 	addi	r3,r4,4
 8005830:	1905803a 	cmpltu	r2,r3,r4
 8005834:	80a1883a 	add	r16,r16,r2
 8005838:	1809883a 	mov	r4,r3
 800583c:	8080202c 	andhi	r2,r16,128
 8005840:	10001b26 	beq	r2,zero,80058b0 <__muldf3+0x83c>
 8005844:	34c0004c 	andi	r19,r6,1
 8005848:	01000044 	movi	r4,1
 800584c:	0021883a 	mov	r16,zero
 8005850:	002f883a 	mov	r23,zero
 8005854:	003e6106 	br	80051dc <__alt_data_end+0xfc0051dc>
 8005858:	013ef884 	movi	r4,-1054
 800585c:	20c9c83a 	sub	r4,r4,r3
 8005860:	01400804 	movi	r5,32
 8005864:	8108d83a 	srl	r4,r16,r4
 8005868:	11401526 	beq	r2,r5,80058c0 <__muldf3+0x84c>
 800586c:	18c10f84 	addi	r3,r3,1086
 8005870:	80e0983a 	sll	r16,r16,r3
 8005874:	85eeb03a 	or	r23,r16,r23
 8005878:	b804c03a 	cmpne	r2,r23,zero
 800587c:	1108b03a 	or	r4,r2,r4
 8005880:	20c001cc 	andi	r3,r4,7
 8005884:	1800061e 	bne	r3,zero,80058a0 <__muldf3+0x82c>
 8005888:	0021883a 	mov	r16,zero
 800588c:	202ed0fa 	srli	r23,r4,3
 8005890:	34c0004c 	andi	r19,r6,1
 8005894:	0009883a 	mov	r4,zero
 8005898:	b8eeb03a 	or	r23,r23,r3
 800589c:	003e4f06 	br	80051dc <__alt_data_end+0xfc0051dc>
 80058a0:	20c003cc 	andi	r3,r4,15
 80058a4:	00800104 	movi	r2,4
 80058a8:	0021883a 	mov	r16,zero
 80058ac:	18bfdf1e 	bne	r3,r2,800582c <__alt_data_end+0xfc00582c>
 80058b0:	8004927a 	slli	r2,r16,9
 80058b4:	8006977a 	slli	r3,r16,29
 80058b8:	1020d33a 	srli	r16,r2,12
 80058bc:	003ff306 	br	800588c <__alt_data_end+0xfc00588c>
 80058c0:	0021883a 	mov	r16,zero
 80058c4:	003feb06 	br	8005874 <__alt_data_end+0xfc005874>
 80058c8:	00800434 	movhi	r2,16
 80058cc:	84000234 	orhi	r16,r16,8
 80058d0:	10bfffc4 	addi	r2,r2,-1
 80058d4:	4cc0004c 	andi	r19,r9,1
 80058d8:	80a0703a 	and	r16,r16,r2
 80058dc:	003ea606 	br	8005378 <__alt_data_end+0xfc005378>

080058e0 <__fixdfsi>:
 80058e0:	2806d53a 	srli	r3,r5,20
 80058e4:	00800434 	movhi	r2,16
 80058e8:	10bfffc4 	addi	r2,r2,-1
 80058ec:	18c1ffcc 	andi	r3,r3,2047
 80058f0:	0180ff84 	movi	r6,1022
 80058f4:	2884703a 	and	r2,r5,r2
 80058f8:	280ad7fa 	srli	r5,r5,31
 80058fc:	30c0130e 	bge	r6,r3,800594c <__fixdfsi+0x6c>
 8005900:	01810744 	movi	r6,1053
 8005904:	30c00d16 	blt	r6,r3,800593c <__fixdfsi+0x5c>
 8005908:	01810cc4 	movi	r6,1075
 800590c:	30cdc83a 	sub	r6,r6,r3
 8005910:	01c007c4 	movi	r7,31
 8005914:	10800434 	orhi	r2,r2,16
 8005918:	39800e0e 	bge	r7,r6,8005954 <__fixdfsi+0x74>
 800591c:	010104c4 	movi	r4,1043
 8005920:	20c7c83a 	sub	r3,r4,r3
 8005924:	10c6d83a 	srl	r3,r2,r3
 8005928:	29403fcc 	andi	r5,r5,255
 800592c:	0145c83a 	sub	r2,zero,r5
 8005930:	1884f03a 	xor	r2,r3,r2
 8005934:	1145883a 	add	r2,r2,r5
 8005938:	f800283a 	ret
 800593c:	00a00034 	movhi	r2,32768
 8005940:	10bfffc4 	addi	r2,r2,-1
 8005944:	2885883a 	add	r2,r5,r2
 8005948:	f800283a 	ret
 800594c:	0005883a 	mov	r2,zero
 8005950:	f800283a 	ret
 8005954:	18fefb44 	addi	r3,r3,-1043
 8005958:	2188d83a 	srl	r4,r4,r6
 800595c:	10c6983a 	sll	r3,r2,r3
 8005960:	20c6b03a 	or	r3,r4,r3
 8005964:	003ff006 	br	8005928 <__alt_data_end+0xfc005928>

08005968 <__floatsidf>:
 8005968:	defffd04 	addi	sp,sp,-12
 800596c:	dc400115 	stw	r17,4(sp)
 8005970:	dfc00215 	stw	ra,8(sp)
 8005974:	dc000015 	stw	r16,0(sp)
 8005978:	2023883a 	mov	r17,r4
 800597c:	20001426 	beq	r4,zero,80059d0 <__floatsidf+0x68>
 8005980:	2020d7fa 	srli	r16,r4,31
 8005984:	80000126 	beq	r16,zero,800598c <__floatsidf+0x24>
 8005988:	0123c83a 	sub	r17,zero,r4
 800598c:	8809883a 	mov	r4,r17
 8005990:	8005d840 	call	8005d84 <__clzsi2>
 8005994:	01410784 	movi	r5,1054
 8005998:	00c00284 	movi	r3,10
 800599c:	288bc83a 	sub	r5,r5,r2
 80059a0:	18801c16 	blt	r3,r2,8005a14 <__floatsidf+0xac>
 80059a4:	00c002c4 	movi	r3,11
 80059a8:	1887c83a 	sub	r3,r3,r2
 80059ac:	88c8d83a 	srl	r4,r17,r3
 80059b0:	00c00434 	movhi	r3,16
 80059b4:	18ffffc4 	addi	r3,r3,-1
 80059b8:	10800544 	addi	r2,r2,21
 80059bc:	20c8703a 	and	r4,r4,r3
 80059c0:	8884983a 	sll	r2,r17,r2
 80059c4:	28c1ffcc 	andi	r3,r5,2047
 80059c8:	800d883a 	mov	r6,r16
 80059cc:	00000406 	br	80059e0 <__floatsidf+0x78>
 80059d0:	000d883a 	mov	r6,zero
 80059d4:	0007883a 	mov	r3,zero
 80059d8:	0009883a 	mov	r4,zero
 80059dc:	0005883a 	mov	r2,zero
 80059e0:	180a953a 	slli	r5,r3,20
 80059e4:	31803fcc 	andi	r6,r6,255
 80059e8:	00c00434 	movhi	r3,16
 80059ec:	300c97fa 	slli	r6,r6,31
 80059f0:	18ffffc4 	addi	r3,r3,-1
 80059f4:	20c6703a 	and	r3,r4,r3
 80059f8:	1946b03a 	or	r3,r3,r5
 80059fc:	1986b03a 	or	r3,r3,r6
 8005a00:	dfc00217 	ldw	ra,8(sp)
 8005a04:	dc400117 	ldw	r17,4(sp)
 8005a08:	dc000017 	ldw	r16,0(sp)
 8005a0c:	dec00304 	addi	sp,sp,12
 8005a10:	f800283a 	ret
 8005a14:	10fffd44 	addi	r3,r2,-11
 8005a18:	88c8983a 	sll	r4,r17,r3
 8005a1c:	00800434 	movhi	r2,16
 8005a20:	10bfffc4 	addi	r2,r2,-1
 8005a24:	2088703a 	and	r4,r4,r2
 8005a28:	28c1ffcc 	andi	r3,r5,2047
 8005a2c:	800d883a 	mov	r6,r16
 8005a30:	0005883a 	mov	r2,zero
 8005a34:	003fea06 	br	80059e0 <__alt_data_end+0xfc0059e0>

08005a38 <__floatunsidf>:
 8005a38:	defffe04 	addi	sp,sp,-8
 8005a3c:	dc000015 	stw	r16,0(sp)
 8005a40:	dfc00115 	stw	ra,4(sp)
 8005a44:	2021883a 	mov	r16,r4
 8005a48:	20001026 	beq	r4,zero,8005a8c <__floatunsidf+0x54>
 8005a4c:	8005d840 	call	8005d84 <__clzsi2>
 8005a50:	01410784 	movi	r5,1054
 8005a54:	100d883a 	mov	r6,r2
 8005a58:	288bc83a 	sub	r5,r5,r2
 8005a5c:	00800284 	movi	r2,10
 8005a60:	11801616 	blt	r2,r6,8005abc <__floatunsidf+0x84>
 8005a64:	008002c4 	movi	r2,11
 8005a68:	1185c83a 	sub	r2,r2,r6
 8005a6c:	8084d83a 	srl	r2,r16,r2
 8005a70:	00c00434 	movhi	r3,16
 8005a74:	31c00544 	addi	r7,r6,21
 8005a78:	18ffffc4 	addi	r3,r3,-1
 8005a7c:	81e0983a 	sll	r16,r16,r7
 8005a80:	10cc703a 	and	r6,r2,r3
 8005a84:	2941ffcc 	andi	r5,r5,2047
 8005a88:	00000206 	br	8005a94 <__floatunsidf+0x5c>
 8005a8c:	000b883a 	mov	r5,zero
 8005a90:	000d883a 	mov	r6,zero
 8005a94:	280a953a 	slli	r5,r5,20
 8005a98:	00c00434 	movhi	r3,16
 8005a9c:	18ffffc4 	addi	r3,r3,-1
 8005aa0:	30c6703a 	and	r3,r6,r3
 8005aa4:	8005883a 	mov	r2,r16
 8005aa8:	1946b03a 	or	r3,r3,r5
 8005aac:	dfc00117 	ldw	ra,4(sp)
 8005ab0:	dc000017 	ldw	r16,0(sp)
 8005ab4:	dec00204 	addi	sp,sp,8
 8005ab8:	f800283a 	ret
 8005abc:	31bffd44 	addi	r6,r6,-11
 8005ac0:	818c983a 	sll	r6,r16,r6
 8005ac4:	00800434 	movhi	r2,16
 8005ac8:	10bfffc4 	addi	r2,r2,-1
 8005acc:	2941ffcc 	andi	r5,r5,2047
 8005ad0:	0021883a 	mov	r16,zero
 8005ad4:	308c703a 	and	r6,r6,r2
 8005ad8:	003fee06 	br	8005a94 <__alt_data_end+0xfc005a94>

08005adc <__extendsfdf2>:
 8005adc:	200ad5fa 	srli	r5,r4,23
 8005ae0:	defffd04 	addi	sp,sp,-12
 8005ae4:	dc400115 	stw	r17,4(sp)
 8005ae8:	29403fcc 	andi	r5,r5,255
 8005aec:	29800044 	addi	r6,r5,1
 8005af0:	04402034 	movhi	r17,128
 8005af4:	dc000015 	stw	r16,0(sp)
 8005af8:	8c7fffc4 	addi	r17,r17,-1
 8005afc:	dfc00215 	stw	ra,8(sp)
 8005b00:	31803fcc 	andi	r6,r6,255
 8005b04:	00800044 	movi	r2,1
 8005b08:	8922703a 	and	r17,r17,r4
 8005b0c:	2020d7fa 	srli	r16,r4,31
 8005b10:	1180110e 	bge	r2,r6,8005b58 <__extendsfdf2+0x7c>
 8005b14:	880ed0fa 	srli	r7,r17,3
 8005b18:	8822977a 	slli	r17,r17,29
 8005b1c:	2940e004 	addi	r5,r5,896
 8005b20:	2941ffcc 	andi	r5,r5,2047
 8005b24:	280c953a 	slli	r6,r5,20
 8005b28:	01400434 	movhi	r5,16
 8005b2c:	800697fa 	slli	r3,r16,31
 8005b30:	297fffc4 	addi	r5,r5,-1
 8005b34:	394a703a 	and	r5,r7,r5
 8005b38:	298ab03a 	or	r5,r5,r6
 8005b3c:	8805883a 	mov	r2,r17
 8005b40:	28c6b03a 	or	r3,r5,r3
 8005b44:	dfc00217 	ldw	ra,8(sp)
 8005b48:	dc400117 	ldw	r17,4(sp)
 8005b4c:	dc000017 	ldw	r16,0(sp)
 8005b50:	dec00304 	addi	sp,sp,12
 8005b54:	f800283a 	ret
 8005b58:	2800111e 	bne	r5,zero,8005ba0 <__extendsfdf2+0xc4>
 8005b5c:	88001c26 	beq	r17,zero,8005bd0 <__extendsfdf2+0xf4>
 8005b60:	8809883a 	mov	r4,r17
 8005b64:	8005d840 	call	8005d84 <__clzsi2>
 8005b68:	00c00284 	movi	r3,10
 8005b6c:	18801b16 	blt	r3,r2,8005bdc <__extendsfdf2+0x100>
 8005b70:	01c002c4 	movi	r7,11
 8005b74:	388fc83a 	sub	r7,r7,r2
 8005b78:	10c00544 	addi	r3,r2,21
 8005b7c:	89ced83a 	srl	r7,r17,r7
 8005b80:	88e2983a 	sll	r17,r17,r3
 8005b84:	0180e244 	movi	r6,905
 8005b88:	308bc83a 	sub	r5,r6,r2
 8005b8c:	01800434 	movhi	r6,16
 8005b90:	31bfffc4 	addi	r6,r6,-1
 8005b94:	398e703a 	and	r7,r7,r6
 8005b98:	2941ffcc 	andi	r5,r5,2047
 8005b9c:	003fe006 	br	8005b20 <__alt_data_end+0xfc005b20>
 8005ba0:	88000826 	beq	r17,zero,8005bc4 <__extendsfdf2+0xe8>
 8005ba4:	880ed0fa 	srli	r7,r17,3
 8005ba8:	00800434 	movhi	r2,16
 8005bac:	10bfffc4 	addi	r2,r2,-1
 8005bb0:	39c00234 	orhi	r7,r7,8
 8005bb4:	8822977a 	slli	r17,r17,29
 8005bb8:	388e703a 	and	r7,r7,r2
 8005bbc:	0141ffc4 	movi	r5,2047
 8005bc0:	003fd706 	br	8005b20 <__alt_data_end+0xfc005b20>
 8005bc4:	0141ffc4 	movi	r5,2047
 8005bc8:	000f883a 	mov	r7,zero
 8005bcc:	003fd406 	br	8005b20 <__alt_data_end+0xfc005b20>
 8005bd0:	000b883a 	mov	r5,zero
 8005bd4:	000f883a 	mov	r7,zero
 8005bd8:	003fd106 	br	8005b20 <__alt_data_end+0xfc005b20>
 8005bdc:	11fffd44 	addi	r7,r2,-11
 8005be0:	89ce983a 	sll	r7,r17,r7
 8005be4:	0023883a 	mov	r17,zero
 8005be8:	003fe606 	br	8005b84 <__alt_data_end+0xfc005b84>

08005bec <__truncdfsf2>:
 8005bec:	2810d53a 	srli	r8,r5,20
 8005bf0:	01c00434 	movhi	r7,16
 8005bf4:	39ffffc4 	addi	r7,r7,-1
 8005bf8:	29ce703a 	and	r7,r5,r7
 8005bfc:	380e90fa 	slli	r7,r7,3
 8005c00:	4201ffcc 	andi	r8,r8,2047
 8005c04:	200cd77a 	srli	r6,r4,29
 8005c08:	42400044 	addi	r9,r8,1
 8005c0c:	4a41ffcc 	andi	r9,r9,2047
 8005c10:	00800044 	movi	r2,1
 8005c14:	398cb03a 	or	r6,r7,r6
 8005c18:	280ad7fa 	srli	r5,r5,31
 8005c1c:	200e90fa 	slli	r7,r4,3
 8005c20:	1240230e 	bge	r2,r9,8005cb0 <__truncdfsf2+0xc4>
 8005c24:	40ff2004 	addi	r3,r8,-896
 8005c28:	00803f84 	movi	r2,254
 8005c2c:	10c01516 	blt	r2,r3,8005c84 <__truncdfsf2+0x98>
 8005c30:	00c02d0e 	bge	zero,r3,8005ce8 <__truncdfsf2+0xfc>
 8005c34:	200891ba 	slli	r4,r4,6
 8005c38:	300c90fa 	slli	r6,r6,3
 8005c3c:	380ed77a 	srli	r7,r7,29
 8005c40:	2008c03a 	cmpne	r4,r4,zero
 8005c44:	310cb03a 	or	r6,r6,r4
 8005c48:	31ccb03a 	or	r6,r6,r7
 8005c4c:	308001cc 	andi	r2,r6,7
 8005c50:	10000426 	beq	r2,zero,8005c64 <__truncdfsf2+0x78>
 8005c54:	310003cc 	andi	r4,r6,15
 8005c58:	00800104 	movi	r2,4
 8005c5c:	20800126 	beq	r4,r2,8005c64 <__truncdfsf2+0x78>
 8005c60:	31800104 	addi	r6,r6,4
 8005c64:	3081002c 	andhi	r2,r6,1024
 8005c68:	10002326 	beq	r2,zero,8005cf8 <__truncdfsf2+0x10c>
 8005c6c:	18c00044 	addi	r3,r3,1
 8005c70:	00803fc4 	movi	r2,255
 8005c74:	18800326 	beq	r3,r2,8005c84 <__truncdfsf2+0x98>
 8005c78:	300c91ba 	slli	r6,r6,6
 8005c7c:	300cd27a 	srli	r6,r6,9
 8005c80:	00000206 	br	8005c8c <__truncdfsf2+0xa0>
 8005c84:	00ffffc4 	movi	r3,-1
 8005c88:	000d883a 	mov	r6,zero
 8005c8c:	18c03fcc 	andi	r3,r3,255
 8005c90:	180895fa 	slli	r4,r3,23
 8005c94:	00c02034 	movhi	r3,128
 8005c98:	280a97fa 	slli	r5,r5,31
 8005c9c:	18ffffc4 	addi	r3,r3,-1
 8005ca0:	30c6703a 	and	r3,r6,r3
 8005ca4:	1906b03a 	or	r3,r3,r4
 8005ca8:	1944b03a 	or	r2,r3,r5
 8005cac:	f800283a 	ret
 8005cb0:	4000071e 	bne	r8,zero,8005cd0 <__truncdfsf2+0xe4>
 8005cb4:	31ccb03a 	or	r6,r6,r7
 8005cb8:	30000d1e 	bne	r6,zero,8005cf0 <__truncdfsf2+0x104>
 8005cbc:	0007883a 	mov	r3,zero
 8005cc0:	00802034 	movhi	r2,128
 8005cc4:	10bfffc4 	addi	r2,r2,-1
 8005cc8:	308c703a 	and	r6,r6,r2
 8005ccc:	003fef06 	br	8005c8c <__alt_data_end+0xfc005c8c>
 8005cd0:	31c8b03a 	or	r4,r6,r7
 8005cd4:	203feb26 	beq	r4,zero,8005c84 <__alt_data_end+0xfc005c84>
 8005cd8:	300c90fa 	slli	r6,r6,3
 8005cdc:	00c03fc4 	movi	r3,255
 8005ce0:	31808034 	orhi	r6,r6,512
 8005ce4:	003fd906 	br	8005c4c <__alt_data_end+0xfc005c4c>
 8005ce8:	00bffa44 	movi	r2,-23
 8005cec:	1880090e 	bge	r3,r2,8005d14 <__truncdfsf2+0x128>
 8005cf0:	01800144 	movi	r6,5
 8005cf4:	0007883a 	mov	r3,zero
 8005cf8:	00803fc4 	movi	r2,255
 8005cfc:	300cd0fa 	srli	r6,r6,3
 8005d00:	18bfef1e 	bne	r3,r2,8005cc0 <__alt_data_end+0xfc005cc0>
 8005d04:	303fdf26 	beq	r6,zero,8005c84 <__alt_data_end+0xfc005c84>
 8005d08:	31801034 	orhi	r6,r6,64
 8005d0c:	00ffffc4 	movi	r3,-1
 8005d10:	003feb06 	br	8005cc0 <__alt_data_end+0xfc005cc0>
 8005d14:	0080e784 	movi	r2,926
 8005d18:	1205c83a 	sub	r2,r2,r8
 8005d1c:	00c007c4 	movi	r3,31
 8005d20:	31802034 	orhi	r6,r6,128
 8005d24:	18800916 	blt	r3,r2,8005d4c <__truncdfsf2+0x160>
 8005d28:	423f2084 	addi	r8,r8,-894
 8005d2c:	3a06983a 	sll	r3,r7,r8
 8005d30:	3210983a 	sll	r8,r6,r8
 8005d34:	388ed83a 	srl	r7,r7,r2
 8005d38:	180cc03a 	cmpne	r6,r3,zero
 8005d3c:	418cb03a 	or	r6,r8,r6
 8005d40:	31ccb03a 	or	r6,r6,r7
 8005d44:	0007883a 	mov	r3,zero
 8005d48:	003fc006 	br	8005c4c <__alt_data_end+0xfc005c4c>
 8005d4c:	00c0df84 	movi	r3,894
 8005d50:	1a07c83a 	sub	r3,r3,r8
 8005d54:	01000804 	movi	r4,32
 8005d58:	30c6d83a 	srl	r3,r6,r3
 8005d5c:	11000726 	beq	r2,r4,8005d7c <__truncdfsf2+0x190>
 8005d60:	423f2884 	addi	r8,r8,-862
 8005d64:	3210983a 	sll	r8,r6,r8
 8005d68:	41ceb03a 	or	r7,r8,r7
 8005d6c:	380ec03a 	cmpne	r7,r7,zero
 8005d70:	38ccb03a 	or	r6,r7,r3
 8005d74:	0007883a 	mov	r3,zero
 8005d78:	003fb406 	br	8005c4c <__alt_data_end+0xfc005c4c>
 8005d7c:	0011883a 	mov	r8,zero
 8005d80:	003ff906 	br	8005d68 <__alt_data_end+0xfc005d68>

08005d84 <__clzsi2>:
 8005d84:	00bfffd4 	movui	r2,65535
 8005d88:	11000b36 	bltu	r2,r4,8005db8 <__clzsi2+0x34>
 8005d8c:	00803fc4 	movi	r2,255
 8005d90:	1100122e 	bgeu	r2,r4,8005ddc <__clzsi2+0x58>
 8005d94:	00c00204 	movi	r3,8
 8005d98:	01400604 	movi	r5,24
 8005d9c:	20c8d83a 	srl	r4,r4,r3
 8005da0:	008200b4 	movhi	r2,2050
 8005da4:	1089a804 	addi	r2,r2,9888
 8005da8:	1109883a 	add	r4,r2,r4
 8005dac:	20800003 	ldbu	r2,0(r4)
 8005db0:	2885c83a 	sub	r2,r5,r2
 8005db4:	f800283a 	ret
 8005db8:	00804034 	movhi	r2,256
 8005dbc:	10bfffc4 	addi	r2,r2,-1
 8005dc0:	11000336 	bltu	r2,r4,8005dd0 <__clzsi2+0x4c>
 8005dc4:	00c00404 	movi	r3,16
 8005dc8:	180b883a 	mov	r5,r3
 8005dcc:	003ff306 	br	8005d9c <__alt_data_end+0xfc005d9c>
 8005dd0:	00c00604 	movi	r3,24
 8005dd4:	01400204 	movi	r5,8
 8005dd8:	003ff006 	br	8005d9c <__alt_data_end+0xfc005d9c>
 8005ddc:	0007883a 	mov	r3,zero
 8005de0:	01400804 	movi	r5,32
 8005de4:	003fed06 	br	8005d9c <__alt_data_end+0xfc005d9c>

08005de8 <malloc>:
 8005de8:	008200b4 	movhi	r2,2050
 8005dec:	10913704 	addi	r2,r2,17628
 8005df0:	200b883a 	mov	r5,r4
 8005df4:	11000017 	ldw	r4,0(r2)
 8005df8:	8005e101 	jmpi	8005e10 <_malloc_r>

08005dfc <free>:
 8005dfc:	008200b4 	movhi	r2,2050
 8005e00:	10913704 	addi	r2,r2,17628
 8005e04:	200b883a 	mov	r5,r4
 8005e08:	11000017 	ldw	r4,0(r2)
 8005e0c:	800d2e41 	jmpi	800d2e4 <_free_r>

08005e10 <_malloc_r>:
 8005e10:	defff504 	addi	sp,sp,-44
 8005e14:	dc800315 	stw	r18,12(sp)
 8005e18:	dfc00a15 	stw	ra,40(sp)
 8005e1c:	df000915 	stw	fp,36(sp)
 8005e20:	ddc00815 	stw	r23,32(sp)
 8005e24:	dd800715 	stw	r22,28(sp)
 8005e28:	dd400615 	stw	r21,24(sp)
 8005e2c:	dd000515 	stw	r20,20(sp)
 8005e30:	dcc00415 	stw	r19,16(sp)
 8005e34:	dc400215 	stw	r17,8(sp)
 8005e38:	dc000115 	stw	r16,4(sp)
 8005e3c:	288002c4 	addi	r2,r5,11
 8005e40:	00c00584 	movi	r3,22
 8005e44:	2025883a 	mov	r18,r4
 8005e48:	18802a2e 	bgeu	r3,r2,8005ef4 <_malloc_r+0xe4>
 8005e4c:	047ffe04 	movi	r17,-8
 8005e50:	1462703a 	and	r17,r2,r17
 8005e54:	88009e16 	blt	r17,zero,80060d0 <_malloc_r+0x2c0>
 8005e58:	89409d36 	bltu	r17,r5,80060d0 <_malloc_r+0x2c0>
 8005e5c:	80157300 	call	8015730 <__malloc_lock>
 8005e60:	00807dc4 	movi	r2,503
 8005e64:	14402736 	bltu	r2,r17,8005f04 <_malloc_r+0xf4>
 8005e68:	8806d0fa 	srli	r3,r17,3
 8005e6c:	04c200b4 	movhi	r19,2050
 8005e70:	9cca7e04 	addi	r19,r19,10744
 8005e74:	18c5883a 	add	r2,r3,r3
 8005e78:	1085883a 	add	r2,r2,r2
 8005e7c:	1085883a 	add	r2,r2,r2
 8005e80:	9885883a 	add	r2,r19,r2
 8005e84:	14000317 	ldw	r16,12(r2)
 8005e88:	80814a26 	beq	r16,r2,80063b4 <_malloc_r+0x5a4>
 8005e8c:	80c00117 	ldw	r3,4(r16)
 8005e90:	81000317 	ldw	r4,12(r16)
 8005e94:	00bfff04 	movi	r2,-4
 8005e98:	1884703a 	and	r2,r3,r2
 8005e9c:	81400217 	ldw	r5,8(r16)
 8005ea0:	8085883a 	add	r2,r16,r2
 8005ea4:	10c00117 	ldw	r3,4(r2)
 8005ea8:	29000315 	stw	r4,12(r5)
 8005eac:	21400215 	stw	r5,8(r4)
 8005eb0:	18c00054 	ori	r3,r3,1
 8005eb4:	10c00115 	stw	r3,4(r2)
 8005eb8:	9009883a 	mov	r4,r18
 8005ebc:	80157500 	call	8015750 <__malloc_unlock>
 8005ec0:	80800204 	addi	r2,r16,8
 8005ec4:	dfc00a17 	ldw	ra,40(sp)
 8005ec8:	df000917 	ldw	fp,36(sp)
 8005ecc:	ddc00817 	ldw	r23,32(sp)
 8005ed0:	dd800717 	ldw	r22,28(sp)
 8005ed4:	dd400617 	ldw	r21,24(sp)
 8005ed8:	dd000517 	ldw	r20,20(sp)
 8005edc:	dcc00417 	ldw	r19,16(sp)
 8005ee0:	dc800317 	ldw	r18,12(sp)
 8005ee4:	dc400217 	ldw	r17,8(sp)
 8005ee8:	dc000117 	ldw	r16,4(sp)
 8005eec:	dec00b04 	addi	sp,sp,44
 8005ef0:	f800283a 	ret
 8005ef4:	04400404 	movi	r17,16
 8005ef8:	89407536 	bltu	r17,r5,80060d0 <_malloc_r+0x2c0>
 8005efc:	80157300 	call	8015730 <__malloc_lock>
 8005f00:	003fd906 	br	8005e68 <__alt_data_end+0xfc005e68>
 8005f04:	8806d27a 	srli	r3,r17,9
 8005f08:	18007526 	beq	r3,zero,80060e0 <_malloc_r+0x2d0>
 8005f0c:	00800104 	movi	r2,4
 8005f10:	10c0ef36 	bltu	r2,r3,80062d0 <_malloc_r+0x4c0>
 8005f14:	8806d1ba 	srli	r3,r17,6
 8005f18:	19c00e04 	addi	r7,r3,56
 8005f1c:	39cb883a 	add	r5,r7,r7
 8005f20:	04c200b4 	movhi	r19,2050
 8005f24:	294b883a 	add	r5,r5,r5
 8005f28:	9cca7e04 	addi	r19,r19,10744
 8005f2c:	294b883a 	add	r5,r5,r5
 8005f30:	994b883a 	add	r5,r19,r5
 8005f34:	2c000317 	ldw	r16,12(r5)
 8005f38:	2c000e26 	beq	r5,r16,8005f74 <_malloc_r+0x164>
 8005f3c:	80800117 	ldw	r2,4(r16)
 8005f40:	01bfff04 	movi	r6,-4
 8005f44:	010003c4 	movi	r4,15
 8005f48:	1184703a 	and	r2,r2,r6
 8005f4c:	1447c83a 	sub	r3,r2,r17
 8005f50:	20c00716 	blt	r4,r3,8005f70 <_malloc_r+0x160>
 8005f54:	1800650e 	bge	r3,zero,80060ec <_malloc_r+0x2dc>
 8005f58:	84000317 	ldw	r16,12(r16)
 8005f5c:	2c000526 	beq	r5,r16,8005f74 <_malloc_r+0x164>
 8005f60:	80800117 	ldw	r2,4(r16)
 8005f64:	1184703a 	and	r2,r2,r6
 8005f68:	1447c83a 	sub	r3,r2,r17
 8005f6c:	20fff90e 	bge	r4,r3,8005f54 <__alt_data_end+0xfc005f54>
 8005f70:	39ffffc4 	addi	r7,r7,-1
 8005f74:	38c00044 	addi	r3,r7,1
 8005f78:	018200b4 	movhi	r6,2050
 8005f7c:	9c000417 	ldw	r16,16(r19)
 8005f80:	318a7e04 	addi	r6,r6,10744
 8005f84:	32400204 	addi	r9,r6,8
 8005f88:	82410326 	beq	r16,r9,8006398 <_malloc_r+0x588>
 8005f8c:	81000117 	ldw	r4,4(r16)
 8005f90:	00bfff04 	movi	r2,-4
 8005f94:	208e703a 	and	r7,r4,r2
 8005f98:	3c45c83a 	sub	r2,r7,r17
 8005f9c:	010003c4 	movi	r4,15
 8005fa0:	2080ee16 	blt	r4,r2,800635c <_malloc_r+0x54c>
 8005fa4:	32400515 	stw	r9,20(r6)
 8005fa8:	32400415 	stw	r9,16(r6)
 8005fac:	1000510e 	bge	r2,zero,80060f4 <_malloc_r+0x2e4>
 8005fb0:	00807fc4 	movi	r2,511
 8005fb4:	11c0ce36 	bltu	r2,r7,80062f0 <_malloc_r+0x4e0>
 8005fb8:	3808d0fa 	srli	r4,r7,3
 8005fbc:	01c00044 	movi	r7,1
 8005fc0:	30800117 	ldw	r2,4(r6)
 8005fc4:	210b883a 	add	r5,r4,r4
 8005fc8:	294b883a 	add	r5,r5,r5
 8005fcc:	2009d0ba 	srai	r4,r4,2
 8005fd0:	294b883a 	add	r5,r5,r5
 8005fd4:	298b883a 	add	r5,r5,r6
 8005fd8:	2a000217 	ldw	r8,8(r5)
 8005fdc:	3908983a 	sll	r4,r7,r4
 8005fe0:	81400315 	stw	r5,12(r16)
 8005fe4:	82000215 	stw	r8,8(r16)
 8005fe8:	2088b03a 	or	r4,r4,r2
 8005fec:	2c000215 	stw	r16,8(r5)
 8005ff0:	31000115 	stw	r4,4(r6)
 8005ff4:	44000315 	stw	r16,12(r8)
 8005ff8:	1805d0ba 	srai	r2,r3,2
 8005ffc:	01400044 	movi	r5,1
 8006000:	288a983a 	sll	r5,r5,r2
 8006004:	21404336 	bltu	r4,r5,8006114 <_malloc_r+0x304>
 8006008:	2144703a 	and	r2,r4,r5
 800600c:	10000a1e 	bne	r2,zero,8006038 <_malloc_r+0x228>
 8006010:	00bfff04 	movi	r2,-4
 8006014:	294b883a 	add	r5,r5,r5
 8006018:	1886703a 	and	r3,r3,r2
 800601c:	2144703a 	and	r2,r4,r5
 8006020:	18c00104 	addi	r3,r3,4
 8006024:	1000041e 	bne	r2,zero,8006038 <_malloc_r+0x228>
 8006028:	294b883a 	add	r5,r5,r5
 800602c:	2144703a 	and	r2,r4,r5
 8006030:	18c00104 	addi	r3,r3,4
 8006034:	103ffc26 	beq	r2,zero,8006028 <__alt_data_end+0xfc006028>
 8006038:	023fff04 	movi	r8,-4
 800603c:	01c003c4 	movi	r7,15
 8006040:	18c5883a 	add	r2,r3,r3
 8006044:	1085883a 	add	r2,r2,r2
 8006048:	1085883a 	add	r2,r2,r2
 800604c:	9895883a 	add	r10,r19,r2
 8006050:	52c00304 	addi	r11,r10,12
 8006054:	1819883a 	mov	r12,r3
 8006058:	5c000017 	ldw	r16,0(r11)
 800605c:	59bffd04 	addi	r6,r11,-12
 8006060:	8180041e 	bne	r16,r6,8006074 <_malloc_r+0x264>
 8006064:	0000ce06 	br	80063a0 <_malloc_r+0x590>
 8006068:	2000d70e 	bge	r4,zero,80063c8 <_malloc_r+0x5b8>
 800606c:	84000317 	ldw	r16,12(r16)
 8006070:	8180cb26 	beq	r16,r6,80063a0 <_malloc_r+0x590>
 8006074:	80800117 	ldw	r2,4(r16)
 8006078:	1204703a 	and	r2,r2,r8
 800607c:	1449c83a 	sub	r4,r2,r17
 8006080:	393ff90e 	bge	r7,r4,8006068 <__alt_data_end+0xfc006068>
 8006084:	80800317 	ldw	r2,12(r16)
 8006088:	80c00217 	ldw	r3,8(r16)
 800608c:	89400054 	ori	r5,r17,1
 8006090:	81400115 	stw	r5,4(r16)
 8006094:	18800315 	stw	r2,12(r3)
 8006098:	10c00215 	stw	r3,8(r2)
 800609c:	8463883a 	add	r17,r16,r17
 80060a0:	9c400515 	stw	r17,20(r19)
 80060a4:	9c400415 	stw	r17,16(r19)
 80060a8:	20800054 	ori	r2,r4,1
 80060ac:	88800115 	stw	r2,4(r17)
 80060b0:	8a400315 	stw	r9,12(r17)
 80060b4:	8a400215 	stw	r9,8(r17)
 80060b8:	8923883a 	add	r17,r17,r4
 80060bc:	89000015 	stw	r4,0(r17)
 80060c0:	9009883a 	mov	r4,r18
 80060c4:	80157500 	call	8015750 <__malloc_unlock>
 80060c8:	80800204 	addi	r2,r16,8
 80060cc:	003f7d06 	br	8005ec4 <__alt_data_end+0xfc005ec4>
 80060d0:	00800304 	movi	r2,12
 80060d4:	90800015 	stw	r2,0(r18)
 80060d8:	0005883a 	mov	r2,zero
 80060dc:	003f7906 	br	8005ec4 <__alt_data_end+0xfc005ec4>
 80060e0:	01401f84 	movi	r5,126
 80060e4:	01c00fc4 	movi	r7,63
 80060e8:	003f8d06 	br	8005f20 <__alt_data_end+0xfc005f20>
 80060ec:	81000317 	ldw	r4,12(r16)
 80060f0:	003f6a06 	br	8005e9c <__alt_data_end+0xfc005e9c>
 80060f4:	81c5883a 	add	r2,r16,r7
 80060f8:	10c00117 	ldw	r3,4(r2)
 80060fc:	9009883a 	mov	r4,r18
 8006100:	18c00054 	ori	r3,r3,1
 8006104:	10c00115 	stw	r3,4(r2)
 8006108:	80157500 	call	8015750 <__malloc_unlock>
 800610c:	80800204 	addi	r2,r16,8
 8006110:	003f6c06 	br	8005ec4 <__alt_data_end+0xfc005ec4>
 8006114:	9c000217 	ldw	r16,8(r19)
 8006118:	00bfff04 	movi	r2,-4
 800611c:	85800117 	ldw	r22,4(r16)
 8006120:	b0ac703a 	and	r22,r22,r2
 8006124:	b4400336 	bltu	r22,r17,8006134 <_malloc_r+0x324>
 8006128:	b445c83a 	sub	r2,r22,r17
 800612c:	00c003c4 	movi	r3,15
 8006130:	18805d16 	blt	r3,r2,80062a8 <_malloc_r+0x498>
 8006134:	05c200b4 	movhi	r23,2050
 8006138:	008200b4 	movhi	r2,2050
 800613c:	bdd13404 	addi	r23,r23,17616
 8006140:	10981104 	addi	r2,r2,24644
 8006144:	15400017 	ldw	r21,0(r2)
 8006148:	b9000017 	ldw	r4,0(r23)
 800614c:	00ffffc4 	movi	r3,-1
 8006150:	858d883a 	add	r6,r16,r22
 8006154:	8d6b883a 	add	r21,r17,r21
 8006158:	20c0e426 	beq	r4,r3,80064ec <_malloc_r+0x6dc>
 800615c:	ad4403c4 	addi	r21,r21,4111
 8006160:	00fc0004 	movi	r3,-4096
 8006164:	a8ea703a 	and	r21,r21,r3
 8006168:	9009883a 	mov	r4,r18
 800616c:	a80b883a 	mov	r5,r21
 8006170:	d9800015 	stw	r6,0(sp)
 8006174:	80068c00 	call	80068c0 <_sbrk_r>
 8006178:	00ffffc4 	movi	r3,-1
 800617c:	1029883a 	mov	r20,r2
 8006180:	d9800017 	ldw	r6,0(sp)
 8006184:	10c0a426 	beq	r2,r3,8006418 <_malloc_r+0x608>
 8006188:	1180a236 	bltu	r2,r6,8006414 <_malloc_r+0x604>
 800618c:	070200b4 	movhi	fp,2050
 8006190:	e7182004 	addi	fp,fp,24704
 8006194:	e0c00017 	ldw	r3,0(fp)
 8006198:	a8c7883a 	add	r3,r21,r3
 800619c:	e0c00015 	stw	r3,0(fp)
 80061a0:	3500da26 	beq	r6,r20,800650c <_malloc_r+0x6fc>
 80061a4:	b9000017 	ldw	r4,0(r23)
 80061a8:	00bfffc4 	movi	r2,-1
 80061ac:	2080e426 	beq	r4,r2,8006540 <_malloc_r+0x730>
 80061b0:	a185c83a 	sub	r2,r20,r6
 80061b4:	1885883a 	add	r2,r3,r2
 80061b8:	e0800015 	stw	r2,0(fp)
 80061bc:	a0c001cc 	andi	r3,r20,7
 80061c0:	1800b526 	beq	r3,zero,8006498 <_malloc_r+0x688>
 80061c4:	a0e9c83a 	sub	r20,r20,r3
 80061c8:	00840204 	movi	r2,4104
 80061cc:	a5000204 	addi	r20,r20,8
 80061d0:	10c7c83a 	sub	r3,r2,r3
 80061d4:	a545883a 	add	r2,r20,r21
 80061d8:	1083ffcc 	andi	r2,r2,4095
 80061dc:	18abc83a 	sub	r21,r3,r2
 80061e0:	9009883a 	mov	r4,r18
 80061e4:	a80b883a 	mov	r5,r21
 80061e8:	80068c00 	call	80068c0 <_sbrk_r>
 80061ec:	00ffffc4 	movi	r3,-1
 80061f0:	10c0d026 	beq	r2,r3,8006534 <_malloc_r+0x724>
 80061f4:	1507c83a 	sub	r3,r2,r20
 80061f8:	a8c7883a 	add	r3,r21,r3
 80061fc:	18c00054 	ori	r3,r3,1
 8006200:	e0800017 	ldw	r2,0(fp)
 8006204:	9d000215 	stw	r20,8(r19)
 8006208:	a0c00115 	stw	r3,4(r20)
 800620c:	a887883a 	add	r3,r21,r2
 8006210:	e0c00015 	stw	r3,0(fp)
 8006214:	84c00e26 	beq	r16,r19,8006250 <_malloc_r+0x440>
 8006218:	018003c4 	movi	r6,15
 800621c:	3580a02e 	bgeu	r6,r22,80064a0 <_malloc_r+0x690>
 8006220:	81400117 	ldw	r5,4(r16)
 8006224:	013ffe04 	movi	r4,-8
 8006228:	b0bffd04 	addi	r2,r22,-12
 800622c:	1104703a 	and	r2,r2,r4
 8006230:	2900004c 	andi	r4,r5,1
 8006234:	1108b03a 	or	r4,r2,r4
 8006238:	81000115 	stw	r4,4(r16)
 800623c:	01400144 	movi	r5,5
 8006240:	8089883a 	add	r4,r16,r2
 8006244:	21400115 	stw	r5,4(r4)
 8006248:	21400215 	stw	r5,8(r4)
 800624c:	3080c036 	bltu	r6,r2,8006550 <_malloc_r+0x740>
 8006250:	008200b4 	movhi	r2,2050
 8006254:	10981004 	addi	r2,r2,24640
 8006258:	11000017 	ldw	r4,0(r2)
 800625c:	20c0012e 	bgeu	r4,r3,8006264 <_malloc_r+0x454>
 8006260:	10c00015 	stw	r3,0(r2)
 8006264:	008200b4 	movhi	r2,2050
 8006268:	10980f04 	addi	r2,r2,24636
 800626c:	11000017 	ldw	r4,0(r2)
 8006270:	9c000217 	ldw	r16,8(r19)
 8006274:	20c0012e 	bgeu	r4,r3,800627c <_malloc_r+0x46c>
 8006278:	10c00015 	stw	r3,0(r2)
 800627c:	80c00117 	ldw	r3,4(r16)
 8006280:	00bfff04 	movi	r2,-4
 8006284:	1886703a 	and	r3,r3,r2
 8006288:	1c45c83a 	sub	r2,r3,r17
 800628c:	1c400236 	bltu	r3,r17,8006298 <_malloc_r+0x488>
 8006290:	00c003c4 	movi	r3,15
 8006294:	18800416 	blt	r3,r2,80062a8 <_malloc_r+0x498>
 8006298:	9009883a 	mov	r4,r18
 800629c:	80157500 	call	8015750 <__malloc_unlock>
 80062a0:	0005883a 	mov	r2,zero
 80062a4:	003f0706 	br	8005ec4 <__alt_data_end+0xfc005ec4>
 80062a8:	88c00054 	ori	r3,r17,1
 80062ac:	80c00115 	stw	r3,4(r16)
 80062b0:	8463883a 	add	r17,r16,r17
 80062b4:	10800054 	ori	r2,r2,1
 80062b8:	9c400215 	stw	r17,8(r19)
 80062bc:	88800115 	stw	r2,4(r17)
 80062c0:	9009883a 	mov	r4,r18
 80062c4:	80157500 	call	8015750 <__malloc_unlock>
 80062c8:	80800204 	addi	r2,r16,8
 80062cc:	003efd06 	br	8005ec4 <__alt_data_end+0xfc005ec4>
 80062d0:	00800504 	movi	r2,20
 80062d4:	10c0482e 	bgeu	r2,r3,80063f8 <_malloc_r+0x5e8>
 80062d8:	00801504 	movi	r2,84
 80062dc:	10c06836 	bltu	r2,r3,8006480 <_malloc_r+0x670>
 80062e0:	8806d33a 	srli	r3,r17,12
 80062e4:	19c01b84 	addi	r7,r3,110
 80062e8:	39cb883a 	add	r5,r7,r7
 80062ec:	003f0c06 	br	8005f20 <__alt_data_end+0xfc005f20>
 80062f0:	3804d27a 	srli	r2,r7,9
 80062f4:	01000104 	movi	r4,4
 80062f8:	2080422e 	bgeu	r4,r2,8006404 <_malloc_r+0x5f4>
 80062fc:	01000504 	movi	r4,20
 8006300:	20807c36 	bltu	r4,r2,80064f4 <_malloc_r+0x6e4>
 8006304:	110016c4 	addi	r4,r2,91
 8006308:	210b883a 	add	r5,r4,r4
 800630c:	294b883a 	add	r5,r5,r5
 8006310:	294b883a 	add	r5,r5,r5
 8006314:	994b883a 	add	r5,r19,r5
 8006318:	28800217 	ldw	r2,8(r5)
 800631c:	020200b4 	movhi	r8,2050
 8006320:	420a7e04 	addi	r8,r8,10744
 8006324:	11406326 	beq	r2,r5,80064b4 <_malloc_r+0x6a4>
 8006328:	01bfff04 	movi	r6,-4
 800632c:	11000117 	ldw	r4,4(r2)
 8006330:	2188703a 	and	r4,r4,r6
 8006334:	3900022e 	bgeu	r7,r4,8006340 <_malloc_r+0x530>
 8006338:	10800217 	ldw	r2,8(r2)
 800633c:	28bffb1e 	bne	r5,r2,800632c <__alt_data_end+0xfc00632c>
 8006340:	11800317 	ldw	r6,12(r2)
 8006344:	99000117 	ldw	r4,4(r19)
 8006348:	81800315 	stw	r6,12(r16)
 800634c:	80800215 	stw	r2,8(r16)
 8006350:	34000215 	stw	r16,8(r6)
 8006354:	14000315 	stw	r16,12(r2)
 8006358:	003f2706 	br	8005ff8 <__alt_data_end+0xfc005ff8>
 800635c:	88c00054 	ori	r3,r17,1
 8006360:	80c00115 	stw	r3,4(r16)
 8006364:	8463883a 	add	r17,r16,r17
 8006368:	34400515 	stw	r17,20(r6)
 800636c:	34400415 	stw	r17,16(r6)
 8006370:	10c00054 	ori	r3,r2,1
 8006374:	8a400315 	stw	r9,12(r17)
 8006378:	8a400215 	stw	r9,8(r17)
 800637c:	88c00115 	stw	r3,4(r17)
 8006380:	88a3883a 	add	r17,r17,r2
 8006384:	88800015 	stw	r2,0(r17)
 8006388:	9009883a 	mov	r4,r18
 800638c:	80157500 	call	8015750 <__malloc_unlock>
 8006390:	80800204 	addi	r2,r16,8
 8006394:	003ecb06 	br	8005ec4 <__alt_data_end+0xfc005ec4>
 8006398:	31000117 	ldw	r4,4(r6)
 800639c:	003f1606 	br	8005ff8 <__alt_data_end+0xfc005ff8>
 80063a0:	63000044 	addi	r12,r12,1
 80063a4:	608000cc 	andi	r2,r12,3
 80063a8:	5ac00204 	addi	r11,r11,8
 80063ac:	103f2a1e 	bne	r2,zero,8006058 <__alt_data_end+0xfc006058>
 80063b0:	00002106 	br	8006438 <_malloc_r+0x628>
 80063b4:	80800204 	addi	r2,r16,8
 80063b8:	84000517 	ldw	r16,20(r16)
 80063bc:	143eb31e 	bne	r2,r16,8005e8c <__alt_data_end+0xfc005e8c>
 80063c0:	18c00084 	addi	r3,r3,2
 80063c4:	003eec06 	br	8005f78 <__alt_data_end+0xfc005f78>
 80063c8:	8085883a 	add	r2,r16,r2
 80063cc:	10c00117 	ldw	r3,4(r2)
 80063d0:	81000317 	ldw	r4,12(r16)
 80063d4:	81400217 	ldw	r5,8(r16)
 80063d8:	18c00054 	ori	r3,r3,1
 80063dc:	10c00115 	stw	r3,4(r2)
 80063e0:	29000315 	stw	r4,12(r5)
 80063e4:	21400215 	stw	r5,8(r4)
 80063e8:	9009883a 	mov	r4,r18
 80063ec:	80157500 	call	8015750 <__malloc_unlock>
 80063f0:	80800204 	addi	r2,r16,8
 80063f4:	003eb306 	br	8005ec4 <__alt_data_end+0xfc005ec4>
 80063f8:	19c016c4 	addi	r7,r3,91
 80063fc:	39cb883a 	add	r5,r7,r7
 8006400:	003ec706 	br	8005f20 <__alt_data_end+0xfc005f20>
 8006404:	3804d1ba 	srli	r2,r7,6
 8006408:	11000e04 	addi	r4,r2,56
 800640c:	210b883a 	add	r5,r4,r4
 8006410:	003fbe06 	br	800630c <__alt_data_end+0xfc00630c>
 8006414:	84ff5d26 	beq	r16,r19,800618c <__alt_data_end+0xfc00618c>
 8006418:	9c000217 	ldw	r16,8(r19)
 800641c:	00bfff04 	movi	r2,-4
 8006420:	80c00117 	ldw	r3,4(r16)
 8006424:	1886703a 	and	r3,r3,r2
 8006428:	003f9706 	br	8006288 <__alt_data_end+0xfc006288>
 800642c:	52800017 	ldw	r10,0(r10)
 8006430:	18ffffc4 	addi	r3,r3,-1
 8006434:	50805c1e 	bne	r10,r2,80065a8 <_malloc_r+0x798>
 8006438:	190000cc 	andi	r4,r3,3
 800643c:	50bffe04 	addi	r2,r10,-8
 8006440:	203ffa1e 	bne	r4,zero,800642c <__alt_data_end+0xfc00642c>
 8006444:	98800117 	ldw	r2,4(r19)
 8006448:	0146303a 	nor	r3,zero,r5
 800644c:	1884703a 	and	r2,r3,r2
 8006450:	98800115 	stw	r2,4(r19)
 8006454:	294b883a 	add	r5,r5,r5
 8006458:	117f2e36 	bltu	r2,r5,8006114 <__alt_data_end+0xfc006114>
 800645c:	283f2d26 	beq	r5,zero,8006114 <__alt_data_end+0xfc006114>
 8006460:	1146703a 	and	r3,r2,r5
 8006464:	1800521e 	bne	r3,zero,80065b0 <_malloc_r+0x7a0>
 8006468:	6007883a 	mov	r3,r12
 800646c:	294b883a 	add	r5,r5,r5
 8006470:	1148703a 	and	r4,r2,r5
 8006474:	18c00104 	addi	r3,r3,4
 8006478:	203ffc26 	beq	r4,zero,800646c <__alt_data_end+0xfc00646c>
 800647c:	003ef006 	br	8006040 <__alt_data_end+0xfc006040>
 8006480:	00805504 	movi	r2,340
 8006484:	10c01336 	bltu	r2,r3,80064d4 <_malloc_r+0x6c4>
 8006488:	8806d3fa 	srli	r3,r17,15
 800648c:	19c01dc4 	addi	r7,r3,119
 8006490:	39cb883a 	add	r5,r7,r7
 8006494:	003ea206 	br	8005f20 <__alt_data_end+0xfc005f20>
 8006498:	00c40004 	movi	r3,4096
 800649c:	003f4d06 	br	80061d4 <__alt_data_end+0xfc0061d4>
 80064a0:	00800044 	movi	r2,1
 80064a4:	a0800115 	stw	r2,4(r20)
 80064a8:	a021883a 	mov	r16,r20
 80064ac:	0007883a 	mov	r3,zero
 80064b0:	003f7506 	br	8006288 <__alt_data_end+0xfc006288>
 80064b4:	200bd0ba 	srai	r5,r4,2
 80064b8:	01800044 	movi	r6,1
 80064bc:	41000117 	ldw	r4,4(r8)
 80064c0:	314a983a 	sll	r5,r6,r5
 80064c4:	100d883a 	mov	r6,r2
 80064c8:	2908b03a 	or	r4,r5,r4
 80064cc:	41000115 	stw	r4,4(r8)
 80064d0:	003f9d06 	br	8006348 <__alt_data_end+0xfc006348>
 80064d4:	00815504 	movi	r2,1364
 80064d8:	10c01336 	bltu	r2,r3,8006528 <_malloc_r+0x718>
 80064dc:	8806d4ba 	srli	r3,r17,18
 80064e0:	19c01f04 	addi	r7,r3,124
 80064e4:	39cb883a 	add	r5,r7,r7
 80064e8:	003e8d06 	br	8005f20 <__alt_data_end+0xfc005f20>
 80064ec:	ad400404 	addi	r21,r21,16
 80064f0:	003f1d06 	br	8006168 <__alt_data_end+0xfc006168>
 80064f4:	01001504 	movi	r4,84
 80064f8:	20801c36 	bltu	r4,r2,800656c <_malloc_r+0x75c>
 80064fc:	3804d33a 	srli	r2,r7,12
 8006500:	11001b84 	addi	r4,r2,110
 8006504:	210b883a 	add	r5,r4,r4
 8006508:	003f8006 	br	800630c <__alt_data_end+0xfc00630c>
 800650c:	3083ffcc 	andi	r2,r6,4095
 8006510:	103f241e 	bne	r2,zero,80061a4 <__alt_data_end+0xfc0061a4>
 8006514:	99000217 	ldw	r4,8(r19)
 8006518:	ad85883a 	add	r2,r21,r22
 800651c:	10800054 	ori	r2,r2,1
 8006520:	20800115 	stw	r2,4(r4)
 8006524:	003f4a06 	br	8006250 <__alt_data_end+0xfc006250>
 8006528:	01403f04 	movi	r5,252
 800652c:	01c01f84 	movi	r7,126
 8006530:	003e7b06 	br	8005f20 <__alt_data_end+0xfc005f20>
 8006534:	00c00044 	movi	r3,1
 8006538:	002b883a 	mov	r21,zero
 800653c:	003f3006 	br	8006200 <__alt_data_end+0xfc006200>
 8006540:	008200b4 	movhi	r2,2050
 8006544:	10913404 	addi	r2,r2,17616
 8006548:	15000015 	stw	r20,0(r2)
 800654c:	003f1b06 	br	80061bc <__alt_data_end+0xfc0061bc>
 8006550:	9009883a 	mov	r4,r18
 8006554:	81400204 	addi	r5,r16,8
 8006558:	800d2e40 	call	800d2e4 <_free_r>
 800655c:	008200b4 	movhi	r2,2050
 8006560:	10982004 	addi	r2,r2,24704
 8006564:	10c00017 	ldw	r3,0(r2)
 8006568:	003f3906 	br	8006250 <__alt_data_end+0xfc006250>
 800656c:	01005504 	movi	r4,340
 8006570:	20800436 	bltu	r4,r2,8006584 <_malloc_r+0x774>
 8006574:	3804d3fa 	srli	r2,r7,15
 8006578:	11001dc4 	addi	r4,r2,119
 800657c:	210b883a 	add	r5,r4,r4
 8006580:	003f6206 	br	800630c <__alt_data_end+0xfc00630c>
 8006584:	01015504 	movi	r4,1364
 8006588:	20800436 	bltu	r4,r2,800659c <_malloc_r+0x78c>
 800658c:	3804d4ba 	srli	r2,r7,18
 8006590:	11001f04 	addi	r4,r2,124
 8006594:	210b883a 	add	r5,r4,r4
 8006598:	003f5c06 	br	800630c <__alt_data_end+0xfc00630c>
 800659c:	01403f04 	movi	r5,252
 80065a0:	01001f84 	movi	r4,126
 80065a4:	003f5906 	br	800630c <__alt_data_end+0xfc00630c>
 80065a8:	98800117 	ldw	r2,4(r19)
 80065ac:	003fa906 	br	8006454 <__alt_data_end+0xfc006454>
 80065b0:	6007883a 	mov	r3,r12
 80065b4:	003ea206 	br	8006040 <__alt_data_end+0xfc006040>

080065b8 <memcpy>:
 80065b8:	deffff04 	addi	sp,sp,-4
 80065bc:	dc000015 	stw	r16,0(sp)
 80065c0:	00c003c4 	movi	r3,15
 80065c4:	2005883a 	mov	r2,r4
 80065c8:	1980432e 	bgeu	r3,r6,80066d8 <memcpy+0x120>
 80065cc:	2146b03a 	or	r3,r4,r5
 80065d0:	18c000cc 	andi	r3,r3,3
 80065d4:	1800421e 	bne	r3,zero,80066e0 <memcpy+0x128>
 80065d8:	343ffc04 	addi	r16,r6,-16
 80065dc:	8020d13a 	srli	r16,r16,4
 80065e0:	28c00104 	addi	r3,r5,4
 80065e4:	23400104 	addi	r13,r4,4
 80065e8:	801e913a 	slli	r15,r16,4
 80065ec:	2b000204 	addi	r12,r5,8
 80065f0:	22c00204 	addi	r11,r4,8
 80065f4:	7bc00504 	addi	r15,r15,20
 80065f8:	2a800304 	addi	r10,r5,12
 80065fc:	22400304 	addi	r9,r4,12
 8006600:	2bdf883a 	add	r15,r5,r15
 8006604:	2811883a 	mov	r8,r5
 8006608:	200f883a 	mov	r7,r4
 800660c:	41000017 	ldw	r4,0(r8)
 8006610:	39c00404 	addi	r7,r7,16
 8006614:	18c00404 	addi	r3,r3,16
 8006618:	393ffc15 	stw	r4,-16(r7)
 800661c:	1bbffc17 	ldw	r14,-16(r3)
 8006620:	6b400404 	addi	r13,r13,16
 8006624:	5ac00404 	addi	r11,r11,16
 8006628:	6bbffc15 	stw	r14,-16(r13)
 800662c:	63800017 	ldw	r14,0(r12)
 8006630:	4a400404 	addi	r9,r9,16
 8006634:	42000404 	addi	r8,r8,16
 8006638:	5bbffc15 	stw	r14,-16(r11)
 800663c:	53800017 	ldw	r14,0(r10)
 8006640:	63000404 	addi	r12,r12,16
 8006644:	52800404 	addi	r10,r10,16
 8006648:	4bbffc15 	stw	r14,-16(r9)
 800664c:	1bffef1e 	bne	r3,r15,800660c <__alt_data_end+0xfc00660c>
 8006650:	81c00044 	addi	r7,r16,1
 8006654:	380e913a 	slli	r7,r7,4
 8006658:	310003cc 	andi	r4,r6,15
 800665c:	02c000c4 	movi	r11,3
 8006660:	11c7883a 	add	r3,r2,r7
 8006664:	29cb883a 	add	r5,r5,r7
 8006668:	59001f2e 	bgeu	r11,r4,80066e8 <memcpy+0x130>
 800666c:	1813883a 	mov	r9,r3
 8006670:	2811883a 	mov	r8,r5
 8006674:	200f883a 	mov	r7,r4
 8006678:	42800017 	ldw	r10,0(r8)
 800667c:	4a400104 	addi	r9,r9,4
 8006680:	39ffff04 	addi	r7,r7,-4
 8006684:	4abfff15 	stw	r10,-4(r9)
 8006688:	42000104 	addi	r8,r8,4
 800668c:	59fffa36 	bltu	r11,r7,8006678 <__alt_data_end+0xfc006678>
 8006690:	213fff04 	addi	r4,r4,-4
 8006694:	2008d0ba 	srli	r4,r4,2
 8006698:	318000cc 	andi	r6,r6,3
 800669c:	21000044 	addi	r4,r4,1
 80066a0:	2109883a 	add	r4,r4,r4
 80066a4:	2109883a 	add	r4,r4,r4
 80066a8:	1907883a 	add	r3,r3,r4
 80066ac:	290b883a 	add	r5,r5,r4
 80066b0:	30000626 	beq	r6,zero,80066cc <memcpy+0x114>
 80066b4:	198d883a 	add	r6,r3,r6
 80066b8:	29c00003 	ldbu	r7,0(r5)
 80066bc:	18c00044 	addi	r3,r3,1
 80066c0:	29400044 	addi	r5,r5,1
 80066c4:	19ffffc5 	stb	r7,-1(r3)
 80066c8:	19bffb1e 	bne	r3,r6,80066b8 <__alt_data_end+0xfc0066b8>
 80066cc:	dc000017 	ldw	r16,0(sp)
 80066d0:	dec00104 	addi	sp,sp,4
 80066d4:	f800283a 	ret
 80066d8:	2007883a 	mov	r3,r4
 80066dc:	003ff406 	br	80066b0 <__alt_data_end+0xfc0066b0>
 80066e0:	2007883a 	mov	r3,r4
 80066e4:	003ff306 	br	80066b4 <__alt_data_end+0xfc0066b4>
 80066e8:	200d883a 	mov	r6,r4
 80066ec:	003ff006 	br	80066b0 <__alt_data_end+0xfc0066b0>

080066f0 <_printf_r>:
 80066f0:	defffd04 	addi	sp,sp,-12
 80066f4:	dfc00015 	stw	ra,0(sp)
 80066f8:	d9800115 	stw	r6,4(sp)
 80066fc:	d9c00215 	stw	r7,8(sp)
 8006700:	280d883a 	mov	r6,r5
 8006704:	21400217 	ldw	r5,8(r4)
 8006708:	d9c00104 	addi	r7,sp,4
 800670c:	80090140 	call	8009014 <___vfprintf_internal_r>
 8006710:	dfc00017 	ldw	ra,0(sp)
 8006714:	dec00304 	addi	sp,sp,12
 8006718:	f800283a 	ret

0800671c <printf>:
 800671c:	defffc04 	addi	sp,sp,-16
 8006720:	dfc00015 	stw	ra,0(sp)
 8006724:	d9400115 	stw	r5,4(sp)
 8006728:	d9800215 	stw	r6,8(sp)
 800672c:	d9c00315 	stw	r7,12(sp)
 8006730:	008200b4 	movhi	r2,2050
 8006734:	10913704 	addi	r2,r2,17628
 8006738:	10800017 	ldw	r2,0(r2)
 800673c:	200b883a 	mov	r5,r4
 8006740:	d9800104 	addi	r6,sp,4
 8006744:	11000217 	ldw	r4,8(r2)
 8006748:	800b1100 	call	800b110 <__vfprintf_internal>
 800674c:	dfc00017 	ldw	ra,0(sp)
 8006750:	dec00404 	addi	sp,sp,16
 8006754:	f800283a 	ret

08006758 <_putchar_r>:
 8006758:	21800217 	ldw	r6,8(r4)
 800675c:	800f2881 	jmpi	800f288 <_putc_r>

08006760 <putchar>:
 8006760:	008200b4 	movhi	r2,2050
 8006764:	10913704 	addi	r2,r2,17628
 8006768:	200b883a 	mov	r5,r4
 800676c:	11000017 	ldw	r4,0(r2)
 8006770:	21800217 	ldw	r6,8(r4)
 8006774:	800f2881 	jmpi	800f288 <_putc_r>

08006778 <_puts_r>:
 8006778:	defff604 	addi	sp,sp,-40
 800677c:	dc000715 	stw	r16,28(sp)
 8006780:	2021883a 	mov	r16,r4
 8006784:	2809883a 	mov	r4,r5
 8006788:	dc400815 	stw	r17,32(sp)
 800678c:	dfc00915 	stw	ra,36(sp)
 8006790:	2823883a 	mov	r17,r5
 8006794:	8006e040 	call	8006e04 <strlen>
 8006798:	00c200b4 	movhi	r3,2050
 800679c:	18d13704 	addi	r3,r3,17628
 80067a0:	18c00017 	ldw	r3,0(r3)
 80067a4:	11000044 	addi	r4,r2,1
 80067a8:	d8800115 	stw	r2,4(sp)
 80067ac:	18c00217 	ldw	r3,8(r3)
 80067b0:	014200b4 	movhi	r5,2050
 80067b4:	2949e804 	addi	r5,r5,10144
 80067b8:	1880030b 	ldhu	r2,12(r3)
 80067bc:	d9400215 	stw	r5,8(sp)
 80067c0:	d9000615 	stw	r4,24(sp)
 80067c4:	01400044 	movi	r5,1
 80067c8:	01000084 	movi	r4,2
 80067cc:	d9000515 	stw	r4,20(sp)
 80067d0:	dc400015 	stw	r17,0(sp)
 80067d4:	d9400315 	stw	r5,12(sp)
 80067d8:	dec00415 	stw	sp,16(sp)
 80067dc:	1108000c 	andi	r4,r2,8192
 80067e0:	2000061e 	bne	r4,zero,80067fc <_puts_r+0x84>
 80067e4:	19401917 	ldw	r5,100(r3)
 80067e8:	0137ffc4 	movi	r4,-8193
 80067ec:	10880014 	ori	r2,r2,8192
 80067f0:	2908703a 	and	r4,r5,r4
 80067f4:	1880030d 	sth	r2,12(r3)
 80067f8:	19001915 	stw	r4,100(r3)
 80067fc:	81400217 	ldw	r5,8(r16)
 8006800:	8009883a 	mov	r4,r16
 8006804:	d9800404 	addi	r6,sp,16
 8006808:	800d5d40 	call	800d5d4 <__sfvwrite_r>
 800680c:	1000061e 	bne	r2,zero,8006828 <_puts_r+0xb0>
 8006810:	00800284 	movi	r2,10
 8006814:	dfc00917 	ldw	ra,36(sp)
 8006818:	dc400817 	ldw	r17,32(sp)
 800681c:	dc000717 	ldw	r16,28(sp)
 8006820:	dec00a04 	addi	sp,sp,40
 8006824:	f800283a 	ret
 8006828:	00bfffc4 	movi	r2,-1
 800682c:	003ff906 	br	8006814 <__alt_data_end+0xfc006814>

08006830 <puts>:
 8006830:	008200b4 	movhi	r2,2050
 8006834:	10913704 	addi	r2,r2,17628
 8006838:	200b883a 	mov	r5,r4
 800683c:	11000017 	ldw	r4,0(r2)
 8006840:	80067781 	jmpi	8006778 <_puts_r>

08006844 <srand>:
 8006844:	008200b4 	movhi	r2,2050
 8006848:	10913704 	addi	r2,r2,17628
 800684c:	10800017 	ldw	r2,0(r2)
 8006850:	11002915 	stw	r4,164(r2)
 8006854:	10002a15 	stw	zero,168(r2)
 8006858:	f800283a 	ret

0800685c <rand>:
 800685c:	008200b4 	movhi	r2,2050
 8006860:	defffe04 	addi	sp,sp,-8
 8006864:	10913704 	addi	r2,r2,17628
 8006868:	dc000015 	stw	r16,0(sp)
 800686c:	14000017 	ldw	r16,0(r2)
 8006870:	dfc00115 	stw	ra,4(sp)
 8006874:	01932574 	movhi	r6,19605
 8006878:	81002917 	ldw	r4,164(r16)
 800687c:	81402a17 	ldw	r5,168(r16)
 8006880:	01d614b4 	movhi	r7,22610
 8006884:	319fcb44 	addi	r6,r6,32557
 8006888:	39fd0b44 	addi	r7,r7,-3027
 800688c:	8012e240 	call	8012e24 <__muldi3>
 8006890:	11000044 	addi	r4,r2,1
 8006894:	2085803a 	cmpltu	r2,r4,r2
 8006898:	10c7883a 	add	r3,r2,r3
 800689c:	00a00034 	movhi	r2,32768
 80068a0:	10bfffc4 	addi	r2,r2,-1
 80068a4:	1884703a 	and	r2,r3,r2
 80068a8:	81002915 	stw	r4,164(r16)
 80068ac:	80c02a15 	stw	r3,168(r16)
 80068b0:	dfc00117 	ldw	ra,4(sp)
 80068b4:	dc000017 	ldw	r16,0(sp)
 80068b8:	dec00204 	addi	sp,sp,8
 80068bc:	f800283a 	ret

080068c0 <_sbrk_r>:
 80068c0:	defffd04 	addi	sp,sp,-12
 80068c4:	dc000015 	stw	r16,0(sp)
 80068c8:	040200b4 	movhi	r16,2050
 80068cc:	dc400115 	stw	r17,4(sp)
 80068d0:	84181204 	addi	r16,r16,24648
 80068d4:	2023883a 	mov	r17,r4
 80068d8:	2809883a 	mov	r4,r5
 80068dc:	dfc00215 	stw	ra,8(sp)
 80068e0:	80000015 	stw	zero,0(r16)
 80068e4:	80159440 	call	8015944 <sbrk>
 80068e8:	00ffffc4 	movi	r3,-1
 80068ec:	10c00526 	beq	r2,r3,8006904 <_sbrk_r+0x44>
 80068f0:	dfc00217 	ldw	ra,8(sp)
 80068f4:	dc400117 	ldw	r17,4(sp)
 80068f8:	dc000017 	ldw	r16,0(sp)
 80068fc:	dec00304 	addi	sp,sp,12
 8006900:	f800283a 	ret
 8006904:	80c00017 	ldw	r3,0(r16)
 8006908:	183ff926 	beq	r3,zero,80068f0 <__alt_data_end+0xfc0068f0>
 800690c:	88c00015 	stw	r3,0(r17)
 8006910:	003ff706 	br	80068f0 <__alt_data_end+0xfc0068f0>

08006914 <_snprintf_r>:
 8006914:	3005883a 	mov	r2,r6
 8006918:	30003016 	blt	r6,zero,80069dc <_snprintf_r+0xc8>
 800691c:	deffe404 	addi	sp,sp,-112
 8006920:	00c08204 	movi	r3,520
 8006924:	dc001a15 	stw	r16,104(sp)
 8006928:	dfc01b15 	stw	ra,108(sp)
 800692c:	d8c0030d 	sth	r3,12(sp)
 8006930:	d9400015 	stw	r5,0(sp)
 8006934:	d9400415 	stw	r5,16(sp)
 8006938:	380d883a 	mov	r6,r7
 800693c:	2021883a 	mov	r16,r4
 8006940:	10001026 	beq	r2,zero,8006984 <_snprintf_r+0x70>
 8006944:	10bfffc4 	addi	r2,r2,-1
 8006948:	d8800215 	stw	r2,8(sp)
 800694c:	d8800515 	stw	r2,20(sp)
 8006950:	d80b883a 	mov	r5,sp
 8006954:	00bfffc4 	movi	r2,-1
 8006958:	d9c01c04 	addi	r7,sp,112
 800695c:	d880038d 	sth	r2,14(sp)
 8006960:	8006f540 	call	8006f54 <___svfprintf_internal_r>
 8006964:	00ffffc4 	movi	r3,-1
 8006968:	10c01916 	blt	r2,r3,80069d0 <_snprintf_r+0xbc>
 800696c:	d8c00017 	ldw	r3,0(sp)
 8006970:	18000005 	stb	zero,0(r3)
 8006974:	dfc01b17 	ldw	ra,108(sp)
 8006978:	dc001a17 	ldw	r16,104(sp)
 800697c:	dec01c04 	addi	sp,sp,112
 8006980:	f800283a 	ret
 8006984:	00bfffc4 	movi	r2,-1
 8006988:	d80b883a 	mov	r5,sp
 800698c:	d9c01c04 	addi	r7,sp,112
 8006990:	d8000215 	stw	zero,8(sp)
 8006994:	d8000515 	stw	zero,20(sp)
 8006998:	d880038d 	sth	r2,14(sp)
 800699c:	8006f540 	call	8006f54 <___svfprintf_internal_r>
 80069a0:	00ffffc4 	movi	r3,-1
 80069a4:	10c00416 	blt	r2,r3,80069b8 <_snprintf_r+0xa4>
 80069a8:	dfc01b17 	ldw	ra,108(sp)
 80069ac:	dc001a17 	ldw	r16,104(sp)
 80069b0:	dec01c04 	addi	sp,sp,112
 80069b4:	f800283a 	ret
 80069b8:	00c022c4 	movi	r3,139
 80069bc:	80c00015 	stw	r3,0(r16)
 80069c0:	dfc01b17 	ldw	ra,108(sp)
 80069c4:	dc001a17 	ldw	r16,104(sp)
 80069c8:	dec01c04 	addi	sp,sp,112
 80069cc:	f800283a 	ret
 80069d0:	00c022c4 	movi	r3,139
 80069d4:	80c00015 	stw	r3,0(r16)
 80069d8:	003fe406 	br	800696c <__alt_data_end+0xfc00696c>
 80069dc:	008022c4 	movi	r2,139
 80069e0:	20800015 	stw	r2,0(r4)
 80069e4:	00bfffc4 	movi	r2,-1
 80069e8:	f800283a 	ret

080069ec <snprintf>:
 80069ec:	deffe304 	addi	sp,sp,-116
 80069f0:	dfc01b15 	stw	ra,108(sp)
 80069f4:	dc001a15 	stw	r16,104(sp)
 80069f8:	d9c01c15 	stw	r7,112(sp)
 80069fc:	008200b4 	movhi	r2,2050
 8006a00:	10913704 	addi	r2,r2,17628
 8006a04:	14000017 	ldw	r16,0(r2)
 8006a08:	28002d16 	blt	r5,zero,8006ac0 <snprintf+0xd4>
 8006a0c:	00c08204 	movi	r3,520
 8006a10:	d8c0030d 	sth	r3,12(sp)
 8006a14:	d9000015 	stw	r4,0(sp)
 8006a18:	d9000415 	stw	r4,16(sp)
 8006a1c:	28001126 	beq	r5,zero,8006a64 <snprintf+0x78>
 8006a20:	28bfffc4 	addi	r2,r5,-1
 8006a24:	d8800215 	stw	r2,8(sp)
 8006a28:	d8800515 	stw	r2,20(sp)
 8006a2c:	8009883a 	mov	r4,r16
 8006a30:	00bfffc4 	movi	r2,-1
 8006a34:	d80b883a 	mov	r5,sp
 8006a38:	d9c01c04 	addi	r7,sp,112
 8006a3c:	d880038d 	sth	r2,14(sp)
 8006a40:	8006f540 	call	8006f54 <___svfprintf_internal_r>
 8006a44:	00ffffc4 	movi	r3,-1
 8006a48:	10c01a16 	blt	r2,r3,8006ab4 <snprintf+0xc8>
 8006a4c:	d8c00017 	ldw	r3,0(sp)
 8006a50:	18000005 	stb	zero,0(r3)
 8006a54:	dfc01b17 	ldw	ra,108(sp)
 8006a58:	dc001a17 	ldw	r16,104(sp)
 8006a5c:	dec01d04 	addi	sp,sp,116
 8006a60:	f800283a 	ret
 8006a64:	00bfffc4 	movi	r2,-1
 8006a68:	8009883a 	mov	r4,r16
 8006a6c:	d80b883a 	mov	r5,sp
 8006a70:	d9c01c04 	addi	r7,sp,112
 8006a74:	d8000215 	stw	zero,8(sp)
 8006a78:	d8000515 	stw	zero,20(sp)
 8006a7c:	d880038d 	sth	r2,14(sp)
 8006a80:	8006f540 	call	8006f54 <___svfprintf_internal_r>
 8006a84:	00ffffc4 	movi	r3,-1
 8006a88:	10c00416 	blt	r2,r3,8006a9c <snprintf+0xb0>
 8006a8c:	dfc01b17 	ldw	ra,108(sp)
 8006a90:	dc001a17 	ldw	r16,104(sp)
 8006a94:	dec01d04 	addi	sp,sp,116
 8006a98:	f800283a 	ret
 8006a9c:	00c022c4 	movi	r3,139
 8006aa0:	80c00015 	stw	r3,0(r16)
 8006aa4:	dfc01b17 	ldw	ra,108(sp)
 8006aa8:	dc001a17 	ldw	r16,104(sp)
 8006aac:	dec01d04 	addi	sp,sp,116
 8006ab0:	f800283a 	ret
 8006ab4:	00c022c4 	movi	r3,139
 8006ab8:	80c00015 	stw	r3,0(r16)
 8006abc:	003fe306 	br	8006a4c <__alt_data_end+0xfc006a4c>
 8006ac0:	008022c4 	movi	r2,139
 8006ac4:	80800015 	stw	r2,0(r16)
 8006ac8:	00bfffc4 	movi	r2,-1
 8006acc:	003fef06 	br	8006a8c <__alt_data_end+0xfc006a8c>

08006ad0 <_sprintf_r>:
 8006ad0:	deffe404 	addi	sp,sp,-112
 8006ad4:	2807883a 	mov	r3,r5
 8006ad8:	dfc01a15 	stw	ra,104(sp)
 8006adc:	d9c01b15 	stw	r7,108(sp)
 8006ae0:	00a00034 	movhi	r2,32768
 8006ae4:	10bfffc4 	addi	r2,r2,-1
 8006ae8:	02008204 	movi	r8,520
 8006aec:	d8800215 	stw	r2,8(sp)
 8006af0:	d8800515 	stw	r2,20(sp)
 8006af4:	d80b883a 	mov	r5,sp
 8006af8:	d9c01b04 	addi	r7,sp,108
 8006afc:	00bfffc4 	movi	r2,-1
 8006b00:	d8c00015 	stw	r3,0(sp)
 8006b04:	d8c00415 	stw	r3,16(sp)
 8006b08:	da00030d 	sth	r8,12(sp)
 8006b0c:	d880038d 	sth	r2,14(sp)
 8006b10:	8006f540 	call	8006f54 <___svfprintf_internal_r>
 8006b14:	d8c00017 	ldw	r3,0(sp)
 8006b18:	18000005 	stb	zero,0(r3)
 8006b1c:	dfc01a17 	ldw	ra,104(sp)
 8006b20:	dec01c04 	addi	sp,sp,112
 8006b24:	f800283a 	ret

08006b28 <sprintf>:
 8006b28:	deffe304 	addi	sp,sp,-116
 8006b2c:	2007883a 	mov	r3,r4
 8006b30:	dfc01a15 	stw	ra,104(sp)
 8006b34:	d9801b15 	stw	r6,108(sp)
 8006b38:	d9c01c15 	stw	r7,112(sp)
 8006b3c:	010200b4 	movhi	r4,2050
 8006b40:	21113704 	addi	r4,r4,17628
 8006b44:	21000017 	ldw	r4,0(r4)
 8006b48:	00a00034 	movhi	r2,32768
 8006b4c:	10bfffc4 	addi	r2,r2,-1
 8006b50:	280d883a 	mov	r6,r5
 8006b54:	02008204 	movi	r8,520
 8006b58:	d8800215 	stw	r2,8(sp)
 8006b5c:	d8800515 	stw	r2,20(sp)
 8006b60:	d80b883a 	mov	r5,sp
 8006b64:	d9c01b04 	addi	r7,sp,108
 8006b68:	00bfffc4 	movi	r2,-1
 8006b6c:	d8c00015 	stw	r3,0(sp)
 8006b70:	d8c00415 	stw	r3,16(sp)
 8006b74:	da00030d 	sth	r8,12(sp)
 8006b78:	d880038d 	sth	r2,14(sp)
 8006b7c:	8006f540 	call	8006f54 <___svfprintf_internal_r>
 8006b80:	d8c00017 	ldw	r3,0(sp)
 8006b84:	18000005 	stb	zero,0(r3)
 8006b88:	dfc01a17 	ldw	ra,104(sp)
 8006b8c:	dec01d04 	addi	sp,sp,116
 8006b90:	f800283a 	ret

08006b94 <strchr>:
 8006b94:	2ac03fcc 	andi	r11,r5,255
 8006b98:	2815883a 	mov	r10,r5
 8006b9c:	208000cc 	andi	r2,r4,3
 8006ba0:	58003726 	beq	r11,zero,8006c80 <strchr+0xec>
 8006ba4:	10000b26 	beq	r2,zero,8006bd4 <strchr+0x40>
 8006ba8:	20800003 	ldbu	r2,0(r4)
 8006bac:	10003226 	beq	r2,zero,8006c78 <strchr+0xe4>
 8006bb0:	28c03fcc 	andi	r3,r5,255
 8006bb4:	5880041e 	bne	r11,r2,8006bc8 <strchr+0x34>
 8006bb8:	00004d06 	br	8006cf0 <strchr+0x15c>
 8006bbc:	20800003 	ldbu	r2,0(r4)
 8006bc0:	10002d26 	beq	r2,zero,8006c78 <strchr+0xe4>
 8006bc4:	18804a26 	beq	r3,r2,8006cf0 <strchr+0x15c>
 8006bc8:	21000044 	addi	r4,r4,1
 8006bcc:	208000cc 	andi	r2,r4,3
 8006bd0:	103ffa1e 	bne	r2,zero,8006bbc <__alt_data_end+0xfc006bbc>
 8006bd4:	29403fcc 	andi	r5,r5,255
 8006bd8:	280e923a 	slli	r7,r5,8
 8006bdc:	20800017 	ldw	r2,0(r4)
 8006be0:	01bfbff4 	movhi	r6,65279
 8006be4:	394ab03a 	or	r5,r7,r5
 8006be8:	280e943a 	slli	r7,r5,16
 8006bec:	31bfbfc4 	addi	r6,r6,-257
 8006bf0:	0090303a 	nor	r8,zero,r2
 8006bf4:	394eb03a 	or	r7,r7,r5
 8006bf8:	1187883a 	add	r3,r2,r6
 8006bfc:	11c4f03a 	xor	r2,r2,r7
 8006c00:	008a303a 	nor	r5,zero,r2
 8006c04:	1185883a 	add	r2,r2,r6
 8006c08:	03202074 	movhi	r12,32897
 8006c0c:	2884703a 	and	r2,r5,r2
 8006c10:	40c6703a 	and	r3,r8,r3
 8006c14:	63202004 	addi	r12,r12,-32640
 8006c18:	10c4b03a 	or	r2,r2,r3
 8006c1c:	1304703a 	and	r2,r2,r12
 8006c20:	10000c1e 	bne	r2,zero,8006c54 <strchr+0xc0>
 8006c24:	21000104 	addi	r4,r4,4
 8006c28:	20800017 	ldw	r2,0(r4)
 8006c2c:	3886f03a 	xor	r3,r7,r2
 8006c30:	00d2303a 	nor	r9,zero,r3
 8006c34:	198b883a 	add	r5,r3,r6
 8006c38:	0090303a 	nor	r8,zero,r2
 8006c3c:	1187883a 	add	r3,r2,r6
 8006c40:	494a703a 	and	r5,r9,r5
 8006c44:	40c4703a 	and	r2,r8,r3
 8006c48:	2884b03a 	or	r2,r5,r2
 8006c4c:	1304703a 	and	r2,r2,r12
 8006c50:	103ff426 	beq	r2,zero,8006c24 <__alt_data_end+0xfc006c24>
 8006c54:	20800003 	ldbu	r2,0(r4)
 8006c58:	10000726 	beq	r2,zero,8006c78 <strchr+0xe4>
 8006c5c:	58802426 	beq	r11,r2,8006cf0 <strchr+0x15c>
 8006c60:	50c03fcc 	andi	r3,r10,255
 8006c64:	00000106 	br	8006c6c <strchr+0xd8>
 8006c68:	18802126 	beq	r3,r2,8006cf0 <strchr+0x15c>
 8006c6c:	21000044 	addi	r4,r4,1
 8006c70:	20800003 	ldbu	r2,0(r4)
 8006c74:	103ffc1e 	bne	r2,zero,8006c68 <__alt_data_end+0xfc006c68>
 8006c78:	0005883a 	mov	r2,zero
 8006c7c:	f800283a 	ret
 8006c80:	10000526 	beq	r2,zero,8006c98 <strchr+0x104>
 8006c84:	20800003 	ldbu	r2,0(r4)
 8006c88:	10001926 	beq	r2,zero,8006cf0 <strchr+0x15c>
 8006c8c:	21000044 	addi	r4,r4,1
 8006c90:	208000cc 	andi	r2,r4,3
 8006c94:	103ffb1e 	bne	r2,zero,8006c84 <__alt_data_end+0xfc006c84>
 8006c98:	20800017 	ldw	r2,0(r4)
 8006c9c:	01bfbff4 	movhi	r6,65279
 8006ca0:	31bfbfc4 	addi	r6,r6,-257
 8006ca4:	0086303a 	nor	r3,zero,r2
 8006ca8:	01602074 	movhi	r5,32897
 8006cac:	1185883a 	add	r2,r2,r6
 8006cb0:	29602004 	addi	r5,r5,-32640
 8006cb4:	10c4703a 	and	r2,r2,r3
 8006cb8:	1144703a 	and	r2,r2,r5
 8006cbc:	10000a1e 	bne	r2,zero,8006ce8 <strchr+0x154>
 8006cc0:	21000104 	addi	r4,r4,4
 8006cc4:	20800017 	ldw	r2,0(r4)
 8006cc8:	1187883a 	add	r3,r2,r6
 8006ccc:	0084303a 	nor	r2,zero,r2
 8006cd0:	1884703a 	and	r2,r3,r2
 8006cd4:	1144703a 	and	r2,r2,r5
 8006cd8:	103ff926 	beq	r2,zero,8006cc0 <__alt_data_end+0xfc006cc0>
 8006cdc:	20800003 	ldbu	r2,0(r4)
 8006ce0:	10000326 	beq	r2,zero,8006cf0 <strchr+0x15c>
 8006ce4:	21000044 	addi	r4,r4,1
 8006ce8:	20800003 	ldbu	r2,0(r4)
 8006cec:	103ffd1e 	bne	r2,zero,8006ce4 <__alt_data_end+0xfc006ce4>
 8006cf0:	2005883a 	mov	r2,r4
 8006cf4:	f800283a 	ret

08006cf8 <strcpy>:
 8006cf8:	2906b03a 	or	r3,r5,r4
 8006cfc:	18c000cc 	andi	r3,r3,3
 8006d00:	2005883a 	mov	r2,r4
 8006d04:	1800161e 	bne	r3,zero,8006d60 <strcpy+0x68>
 8006d08:	29c00017 	ldw	r7,0(r5)
 8006d0c:	02ffbff4 	movhi	r11,65279
 8006d10:	5affbfc4 	addi	r11,r11,-257
 8006d14:	02a02074 	movhi	r10,32897
 8006d18:	01c8303a 	nor	r4,zero,r7
 8006d1c:	3ac7883a 	add	r3,r7,r11
 8006d20:	52a02004 	addi	r10,r10,-32640
 8006d24:	20c6703a 	and	r3,r4,r3
 8006d28:	1a86703a 	and	r3,r3,r10
 8006d2c:	18000c1e 	bne	r3,zero,8006d60 <strcpy+0x68>
 8006d30:	1011883a 	mov	r8,r2
 8006d34:	41c00015 	stw	r7,0(r8)
 8006d38:	29400104 	addi	r5,r5,4
 8006d3c:	29c00017 	ldw	r7,0(r5)
 8006d40:	41800104 	addi	r6,r8,4
 8006d44:	3011883a 	mov	r8,r6
 8006d48:	01d2303a 	nor	r9,zero,r7
 8006d4c:	3ac7883a 	add	r3,r7,r11
 8006d50:	48c6703a 	and	r3,r9,r3
 8006d54:	1a86703a 	and	r3,r3,r10
 8006d58:	183ff626 	beq	r3,zero,8006d34 <__alt_data_end+0xfc006d34>
 8006d5c:	00000106 	br	8006d64 <strcpy+0x6c>
 8006d60:	100d883a 	mov	r6,r2
 8006d64:	28c00003 	ldbu	r3,0(r5)
 8006d68:	31800044 	addi	r6,r6,1
 8006d6c:	29400044 	addi	r5,r5,1
 8006d70:	30ffffc5 	stb	r3,-1(r6)
 8006d74:	18c03fcc 	andi	r3,r3,255
 8006d78:	18c0201c 	xori	r3,r3,128
 8006d7c:	18ffe004 	addi	r3,r3,-128
 8006d80:	183ff81e 	bne	r3,zero,8006d64 <__alt_data_end+0xfc006d64>
 8006d84:	f800283a 	ret

08006d88 <strdup>:
 8006d88:	008200b4 	movhi	r2,2050
 8006d8c:	10913704 	addi	r2,r2,17628
 8006d90:	200b883a 	mov	r5,r4
 8006d94:	11000017 	ldw	r4,0(r2)
 8006d98:	8006d9c1 	jmpi	8006d9c <_strdup_r>

08006d9c <_strdup_r>:
 8006d9c:	defffc04 	addi	sp,sp,-16
 8006da0:	dc000015 	stw	r16,0(sp)
 8006da4:	2021883a 	mov	r16,r4
 8006da8:	2809883a 	mov	r4,r5
 8006dac:	dfc00315 	stw	ra,12(sp)
 8006db0:	dc800215 	stw	r18,8(sp)
 8006db4:	dc400115 	stw	r17,4(sp)
 8006db8:	2825883a 	mov	r18,r5
 8006dbc:	8006e040 	call	8006e04 <strlen>
 8006dc0:	14400044 	addi	r17,r2,1
 8006dc4:	8009883a 	mov	r4,r16
 8006dc8:	880b883a 	mov	r5,r17
 8006dcc:	8005e100 	call	8005e10 <_malloc_r>
 8006dd0:	1021883a 	mov	r16,r2
 8006dd4:	10000426 	beq	r2,zero,8006de8 <_strdup_r+0x4c>
 8006dd8:	1009883a 	mov	r4,r2
 8006ddc:	900b883a 	mov	r5,r18
 8006de0:	880d883a 	mov	r6,r17
 8006de4:	80065b80 	call	80065b8 <memcpy>
 8006de8:	8005883a 	mov	r2,r16
 8006dec:	dfc00317 	ldw	ra,12(sp)
 8006df0:	dc800217 	ldw	r18,8(sp)
 8006df4:	dc400117 	ldw	r17,4(sp)
 8006df8:	dc000017 	ldw	r16,0(sp)
 8006dfc:	dec00404 	addi	sp,sp,16
 8006e00:	f800283a 	ret

08006e04 <strlen>:
 8006e04:	208000cc 	andi	r2,r4,3
 8006e08:	10002026 	beq	r2,zero,8006e8c <strlen+0x88>
 8006e0c:	20800007 	ldb	r2,0(r4)
 8006e10:	10002026 	beq	r2,zero,8006e94 <strlen+0x90>
 8006e14:	2005883a 	mov	r2,r4
 8006e18:	00000206 	br	8006e24 <strlen+0x20>
 8006e1c:	10c00007 	ldb	r3,0(r2)
 8006e20:	18001826 	beq	r3,zero,8006e84 <strlen+0x80>
 8006e24:	10800044 	addi	r2,r2,1
 8006e28:	10c000cc 	andi	r3,r2,3
 8006e2c:	183ffb1e 	bne	r3,zero,8006e1c <__alt_data_end+0xfc006e1c>
 8006e30:	10c00017 	ldw	r3,0(r2)
 8006e34:	01ffbff4 	movhi	r7,65279
 8006e38:	39ffbfc4 	addi	r7,r7,-257
 8006e3c:	00ca303a 	nor	r5,zero,r3
 8006e40:	01a02074 	movhi	r6,32897
 8006e44:	19c7883a 	add	r3,r3,r7
 8006e48:	31a02004 	addi	r6,r6,-32640
 8006e4c:	1946703a 	and	r3,r3,r5
 8006e50:	1986703a 	and	r3,r3,r6
 8006e54:	1800091e 	bne	r3,zero,8006e7c <strlen+0x78>
 8006e58:	10800104 	addi	r2,r2,4
 8006e5c:	10c00017 	ldw	r3,0(r2)
 8006e60:	19cb883a 	add	r5,r3,r7
 8006e64:	00c6303a 	nor	r3,zero,r3
 8006e68:	28c6703a 	and	r3,r5,r3
 8006e6c:	1986703a 	and	r3,r3,r6
 8006e70:	183ff926 	beq	r3,zero,8006e58 <__alt_data_end+0xfc006e58>
 8006e74:	00000106 	br	8006e7c <strlen+0x78>
 8006e78:	10800044 	addi	r2,r2,1
 8006e7c:	10c00007 	ldb	r3,0(r2)
 8006e80:	183ffd1e 	bne	r3,zero,8006e78 <__alt_data_end+0xfc006e78>
 8006e84:	1105c83a 	sub	r2,r2,r4
 8006e88:	f800283a 	ret
 8006e8c:	2005883a 	mov	r2,r4
 8006e90:	003fe706 	br	8006e30 <__alt_data_end+0xfc006e30>
 8006e94:	0005883a 	mov	r2,zero
 8006e98:	f800283a 	ret

08006e9c <strtok>:
 8006e9c:	008200b4 	movhi	r2,2050
 8006ea0:	10913704 	addi	r2,r2,17628
 8006ea4:	11800017 	ldw	r6,0(r2)
 8006ea8:	01c00044 	movi	r7,1
 8006eac:	31801704 	addi	r6,r6,92
 8006eb0:	8006eb41 	jmpi	8006eb4 <__strtok_r>

08006eb4 <__strtok_r>:
 8006eb4:	20001e26 	beq	r4,zero,8006f30 <__strtok_r+0x7c>
 8006eb8:	2005883a 	mov	r2,r4
 8006ebc:	22400007 	ldb	r9,0(r4)
 8006ec0:	2807883a 	mov	r3,r5
 8006ec4:	21000044 	addi	r4,r4,1
 8006ec8:	00000106 	br	8006ed0 <__strtok_r+0x1c>
 8006ecc:	4a001126 	beq	r9,r8,8006f14 <__strtok_r+0x60>
 8006ed0:	1a000007 	ldb	r8,0(r3)
 8006ed4:	18c00044 	addi	r3,r3,1
 8006ed8:	403ffc1e 	bne	r8,zero,8006ecc <__alt_data_end+0xfc006ecc>
 8006edc:	48001826 	beq	r9,zero,8006f40 <__strtok_r+0x8c>
 8006ee0:	2013883a 	mov	r9,r4
 8006ee4:	22000007 	ldb	r8,0(r4)
 8006ee8:	2807883a 	mov	r3,r5
 8006eec:	21000044 	addi	r4,r4,1
 8006ef0:	00000106 	br	8006ef8 <__strtok_r+0x44>
 8006ef4:	383ffa26 	beq	r7,zero,8006ee0 <__alt_data_end+0xfc006ee0>
 8006ef8:	19c00007 	ldb	r7,0(r3)
 8006efc:	18c00044 	addi	r3,r3,1
 8006f00:	3a3ffc1e 	bne	r7,r8,8006ef4 <__alt_data_end+0xfc006ef4>
 8006f04:	40000726 	beq	r8,zero,8006f24 <__strtok_r+0x70>
 8006f08:	48000005 	stb	zero,0(r9)
 8006f0c:	31000015 	stw	r4,0(r6)
 8006f10:	f800283a 	ret
 8006f14:	383fe81e 	bne	r7,zero,8006eb8 <__alt_data_end+0xfc006eb8>
 8006f18:	31000015 	stw	r4,0(r6)
 8006f1c:	10000005 	stb	zero,0(r2)
 8006f20:	f800283a 	ret
 8006f24:	0009883a 	mov	r4,zero
 8006f28:	31000015 	stw	r4,0(r6)
 8006f2c:	f800283a 	ret
 8006f30:	31000017 	ldw	r4,0(r6)
 8006f34:	203fe01e 	bne	r4,zero,8006eb8 <__alt_data_end+0xfc006eb8>
 8006f38:	0005883a 	mov	r2,zero
 8006f3c:	f800283a 	ret
 8006f40:	30000015 	stw	zero,0(r6)
 8006f44:	0005883a 	mov	r2,zero
 8006f48:	f800283a 	ret

08006f4c <strtok_r>:
 8006f4c:	01c00044 	movi	r7,1
 8006f50:	8006eb41 	jmpi	8006eb4 <__strtok_r>

08006f54 <___svfprintf_internal_r>:
 8006f54:	deffb504 	addi	sp,sp,-300
 8006f58:	dfc04a15 	stw	ra,296(sp)
 8006f5c:	dd804715 	stw	r22,284(sp)
 8006f60:	d9002f15 	stw	r4,188(sp)
 8006f64:	282d883a 	mov	r22,r5
 8006f68:	d9802915 	stw	r6,164(sp)
 8006f6c:	d9c02d15 	stw	r7,180(sp)
 8006f70:	df004915 	stw	fp,292(sp)
 8006f74:	ddc04815 	stw	r23,288(sp)
 8006f78:	dd404615 	stw	r21,280(sp)
 8006f7c:	dd004515 	stw	r20,276(sp)
 8006f80:	dcc04415 	stw	r19,272(sp)
 8006f84:	dc804315 	stw	r18,268(sp)
 8006f88:	dc404215 	stw	r17,264(sp)
 8006f8c:	dc004115 	stw	r16,260(sp)
 8006f90:	800dcec0 	call	800dcec <_localeconv_r>
 8006f94:	10800017 	ldw	r2,0(r2)
 8006f98:	1009883a 	mov	r4,r2
 8006f9c:	d8803515 	stw	r2,212(sp)
 8006fa0:	8006e040 	call	8006e04 <strlen>
 8006fa4:	d8803915 	stw	r2,228(sp)
 8006fa8:	b080030b 	ldhu	r2,12(r22)
 8006fac:	1080200c 	andi	r2,r2,128
 8006fb0:	10000226 	beq	r2,zero,8006fbc <___svfprintf_internal_r+0x68>
 8006fb4:	b0800417 	ldw	r2,16(r22)
 8006fb8:	10067426 	beq	r2,zero,800898c <___svfprintf_internal_r+0x1a38>
 8006fbc:	d9001dc4 	addi	r4,sp,119
 8006fc0:	ddc01e04 	addi	r23,sp,120
 8006fc4:	d9400404 	addi	r5,sp,16
 8006fc8:	050200b4 	movhi	r20,2050
 8006fcc:	b905c83a 	sub	r2,r23,r4
 8006fd0:	a509f984 	addi	r20,r20,10214
 8006fd4:	d9002815 	stw	r4,160(sp)
 8006fd8:	d9401e15 	stw	r5,120(sp)
 8006fdc:	d8002015 	stw	zero,128(sp)
 8006fe0:	d8001f15 	stw	zero,124(sp)
 8006fe4:	d8003315 	stw	zero,204(sp)
 8006fe8:	d8003715 	stw	zero,220(sp)
 8006fec:	d8003815 	stw	zero,224(sp)
 8006ff0:	d8003b15 	stw	zero,236(sp)
 8006ff4:	d8003a15 	stw	zero,232(sp)
 8006ff8:	d8003015 	stw	zero,192(sp)
 8006ffc:	2811883a 	mov	r8,r5
 8007000:	d8803d15 	stw	r2,244(sp)
 8007004:	d8c02917 	ldw	r3,164(sp)
 8007008:	18800007 	ldb	r2,0(r3)
 800700c:	1001fa26 	beq	r2,zero,80077f8 <___svfprintf_internal_r+0x8a4>
 8007010:	00c00944 	movi	r3,37
 8007014:	dc002917 	ldw	r16,164(sp)
 8007018:	10c0021e 	bne	r2,r3,8007024 <___svfprintf_internal_r+0xd0>
 800701c:	00001606 	br	8007078 <___svfprintf_internal_r+0x124>
 8007020:	10c08526 	beq	r2,r3,8007238 <___svfprintf_internal_r+0x2e4>
 8007024:	84000044 	addi	r16,r16,1
 8007028:	80800007 	ldb	r2,0(r16)
 800702c:	103ffc1e 	bne	r2,zero,8007020 <__alt_data_end+0xfc007020>
 8007030:	d9002917 	ldw	r4,164(sp)
 8007034:	8123c83a 	sub	r17,r16,r4
 8007038:	88000f26 	beq	r17,zero,8007078 <___svfprintf_internal_r+0x124>
 800703c:	d8802917 	ldw	r2,164(sp)
 8007040:	d8c02017 	ldw	r3,128(sp)
 8007044:	44400115 	stw	r17,4(r8)
 8007048:	40800015 	stw	r2,0(r8)
 800704c:	d8801f17 	ldw	r2,124(sp)
 8007050:	1c47883a 	add	r3,r3,r17
 8007054:	d8c02015 	stw	r3,128(sp)
 8007058:	10800044 	addi	r2,r2,1
 800705c:	d8801f15 	stw	r2,124(sp)
 8007060:	00c001c4 	movi	r3,7
 8007064:	18807716 	blt	r3,r2,8007244 <___svfprintf_internal_r+0x2f0>
 8007068:	42000204 	addi	r8,r8,8
 800706c:	d8c03017 	ldw	r3,192(sp)
 8007070:	1c47883a 	add	r3,r3,r17
 8007074:	d8c03015 	stw	r3,192(sp)
 8007078:	80800007 	ldb	r2,0(r16)
 800707c:	10007826 	beq	r2,zero,8007260 <___svfprintf_internal_r+0x30c>
 8007080:	80800044 	addi	r2,r16,1
 8007084:	84000047 	ldb	r16,1(r16)
 8007088:	0027883a 	mov	r19,zero
 800708c:	0039883a 	mov	fp,zero
 8007090:	dcc02a05 	stb	r19,168(sp)
 8007094:	d8002785 	stb	zero,158(sp)
 8007098:	027fffc4 	movi	r9,-1
 800709c:	d8002e15 	stw	zero,184(sp)
 80070a0:	04401604 	movi	r17,88
 80070a4:	04800244 	movi	r18,9
 80070a8:	da002915 	stw	r8,164(sp)
 80070ac:	e027883a 	mov	r19,fp
 80070b0:	17000044 	addi	fp,r2,1
 80070b4:	80bff804 	addi	r2,r16,-32
 80070b8:	88830036 	bltu	r17,r2,8007cbc <___svfprintf_internal_r+0xd68>
 80070bc:	100490ba 	slli	r2,r2,2
 80070c0:	01020034 	movhi	r4,2048
 80070c4:	211c3504 	addi	r4,r4,28884
 80070c8:	1105883a 	add	r2,r2,r4
 80070cc:	10800017 	ldw	r2,0(r2)
 80070d0:	1000683a 	jmp	r2
 80070d4:	08007b00 	call	8007b0 <__alt_mem_sdram-0x77ff850>
 80070d8:	08007cbc 	xorhi	zero,at,498
 80070dc:	08007cbc 	xorhi	zero,at,498
 80070e0:	08007b1c 	xori	zero,at,492
 80070e4:	08007cbc 	xorhi	zero,at,498
 80070e8:	08007cbc 	xorhi	zero,at,498
 80070ec:	08007cbc 	xorhi	zero,at,498
 80070f0:	08007cbc 	xorhi	zero,at,498
 80070f4:	08007cbc 	xorhi	zero,at,498
 80070f8:	08007cbc 	xorhi	zero,at,498
 80070fc:	08007c08 	cmpgei	zero,at,496
 8007100:	08007c30 	cmpltui	zero,at,496
 8007104:	08007cbc 	xorhi	zero,at,498
 8007108:	080072c0 	call	80072c <__alt_mem_sdram-0x77ff8d4>
 800710c:	080072d0 	cmplti	zero,at,459
 8007110:	08007cbc 	xorhi	zero,at,498
 8007114:	08007320 	cmpeqi	zero,at,460
 8007118:	08007330 	cmpltui	zero,at,460
 800711c:	08007330 	cmpltui	zero,at,460
 8007120:	08007330 	cmpltui	zero,at,460
 8007124:	08007330 	cmpltui	zero,at,460
 8007128:	08007330 	cmpltui	zero,at,460
 800712c:	08007330 	cmpltui	zero,at,460
 8007130:	08007330 	cmpltui	zero,at,460
 8007134:	08007330 	cmpltui	zero,at,460
 8007138:	08007330 	cmpltui	zero,at,460
 800713c:	08007cbc 	xorhi	zero,at,498
 8007140:	08007cbc 	xorhi	zero,at,498
 8007144:	08007cbc 	xorhi	zero,at,498
 8007148:	08007cbc 	xorhi	zero,at,498
 800714c:	08007cbc 	xorhi	zero,at,498
 8007150:	08007cbc 	xorhi	zero,at,498
 8007154:	08007cbc 	xorhi	zero,at,498
 8007158:	08007cbc 	xorhi	zero,at,498
 800715c:	08007cbc 	xorhi	zero,at,498
 8007160:	08007cbc 	xorhi	zero,at,498
 8007164:	08007374 	orhi	zero,at,461
 8007168:	08007800 	call	800780 <__alt_mem_sdram-0x77ff880>
 800716c:	08007cbc 	xorhi	zero,at,498
 8007170:	08007800 	call	800780 <__alt_mem_sdram-0x77ff880>
 8007174:	08007cbc 	xorhi	zero,at,498
 8007178:	08007cbc 	xorhi	zero,at,498
 800717c:	08007cbc 	xorhi	zero,at,498
 8007180:	08007cbc 	xorhi	zero,at,498
 8007184:	080078a8 	cmpgeui	zero,at,482
 8007188:	08007cbc 	xorhi	zero,at,498
 800718c:	08007cbc 	xorhi	zero,at,498
 8007190:	080078b8 	rdprs	zero,at,482
 8007194:	08007cbc 	xorhi	zero,at,498
 8007198:	08007cbc 	xorhi	zero,at,498
 800719c:	08007cbc 	xorhi	zero,at,498
 80071a0:	08007cbc 	xorhi	zero,at,498
 80071a4:	08007cbc 	xorhi	zero,at,498
 80071a8:	080078f8 	rdprs	zero,at,483
 80071ac:	08007cbc 	xorhi	zero,at,498
 80071b0:	08007cbc 	xorhi	zero,at,498
 80071b4:	08007a4c 	andi	zero,at,489
 80071b8:	08007cbc 	xorhi	zero,at,498
 80071bc:	08007cbc 	xorhi	zero,at,498
 80071c0:	08007cbc 	xorhi	zero,at,498
 80071c4:	08007cbc 	xorhi	zero,at,498
 80071c8:	08007cbc 	xorhi	zero,at,498
 80071cc:	08007cbc 	xorhi	zero,at,498
 80071d0:	08007cbc 	xorhi	zero,at,498
 80071d4:	08007cbc 	xorhi	zero,at,498
 80071d8:	08007cbc 	xorhi	zero,at,498
 80071dc:	08007cbc 	xorhi	zero,at,498
 80071e0:	08007ab4 	orhi	zero,at,490
 80071e4:	08007978 	rdprs	zero,at,485
 80071e8:	08007800 	call	800780 <__alt_mem_sdram-0x77ff880>
 80071ec:	08007800 	call	800780 <__alt_mem_sdram-0x77ff880>
 80071f0:	08007800 	call	800780 <__alt_mem_sdram-0x77ff880>
 80071f4:	080079e4 	muli	zero,at,487
 80071f8:	08007978 	rdprs	zero,at,485
 80071fc:	08007cbc 	xorhi	zero,at,498
 8007200:	08007cbc 	xorhi	zero,at,498
 8007204:	080079f4 	orhi	zero,at,487
 8007208:	08007cbc 	xorhi	zero,at,498
 800720c:	08007a0c 	andi	zero,at,488
 8007210:	08007c80 	call	8007c8 <__alt_mem_sdram-0x77ff838>
 8007214:	0800792c 	andhi	zero,at,484
 8007218:	08007bf8 	rdprs	zero,at,495
 800721c:	08007cbc 	xorhi	zero,at,498
 8007220:	08007b2c 	andhi	zero,at,492
 8007224:	08007cbc 	xorhi	zero,at,498
 8007228:	08007c44 	addi	zero,at,497
 800722c:	08007cbc 	xorhi	zero,at,498
 8007230:	08007cbc 	xorhi	zero,at,498
 8007234:	08007bac 	andhi	zero,at,494
 8007238:	d9402917 	ldw	r5,164(sp)
 800723c:	8163c83a 	sub	r17,r16,r5
 8007240:	003f7d06 	br	8007038 <__alt_data_end+0xfc007038>
 8007244:	d9002f17 	ldw	r4,188(sp)
 8007248:	b00b883a 	mov	r5,r22
 800724c:	b80d883a 	mov	r6,r23
 8007250:	800fbe40 	call	800fbe4 <__ssprint_r>
 8007254:	1000081e 	bne	r2,zero,8007278 <___svfprintf_internal_r+0x324>
 8007258:	da000404 	addi	r8,sp,16
 800725c:	003f8306 	br	800706c <__alt_data_end+0xfc00706c>
 8007260:	d8802017 	ldw	r2,128(sp)
 8007264:	10000426 	beq	r2,zero,8007278 <___svfprintf_internal_r+0x324>
 8007268:	d9002f17 	ldw	r4,188(sp)
 800726c:	b00b883a 	mov	r5,r22
 8007270:	d9801e04 	addi	r6,sp,120
 8007274:	800fbe40 	call	800fbe4 <__ssprint_r>
 8007278:	b080030b 	ldhu	r2,12(r22)
 800727c:	1080100c 	andi	r2,r2,64
 8007280:	10000d1e 	bne	r2,zero,80072b8 <___svfprintf_internal_r+0x364>
 8007284:	d8803017 	ldw	r2,192(sp)
 8007288:	dfc04a17 	ldw	ra,296(sp)
 800728c:	df004917 	ldw	fp,292(sp)
 8007290:	ddc04817 	ldw	r23,288(sp)
 8007294:	dd804717 	ldw	r22,284(sp)
 8007298:	dd404617 	ldw	r21,280(sp)
 800729c:	dd004517 	ldw	r20,276(sp)
 80072a0:	dcc04417 	ldw	r19,272(sp)
 80072a4:	dc804317 	ldw	r18,268(sp)
 80072a8:	dc404217 	ldw	r17,264(sp)
 80072ac:	dc004117 	ldw	r16,260(sp)
 80072b0:	dec04b04 	addi	sp,sp,300
 80072b4:	f800283a 	ret
 80072b8:	00bfffc4 	movi	r2,-1
 80072bc:	003ff206 	br	8007288 <__alt_data_end+0xfc007288>
 80072c0:	e005883a 	mov	r2,fp
 80072c4:	9cc00114 	ori	r19,r19,4
 80072c8:	e4000007 	ldb	r16,0(fp)
 80072cc:	003f7806 	br	80070b0 <__alt_data_end+0xfc0070b0>
 80072d0:	e4000007 	ldb	r16,0(fp)
 80072d4:	01000a84 	movi	r4,42
 80072d8:	e0800044 	addi	r2,fp,1
 80072dc:	81071026 	beq	r16,r4,8008f20 <___svfprintf_internal_r+0x1fcc>
 80072e0:	857ff404 	addi	r21,r16,-48
 80072e4:	1039883a 	mov	fp,r2
 80072e8:	0013883a 	mov	r9,zero
 80072ec:	957f7136 	bltu	r18,r21,80070b4 <__alt_data_end+0xfc0070b4>
 80072f0:	0009883a 	mov	r4,zero
 80072f4:	01400284 	movi	r5,10
 80072f8:	80040900 	call	8004090 <__mulsi3>
 80072fc:	e4000007 	ldb	r16,0(fp)
 8007300:	a889883a 	add	r4,r21,r2
 8007304:	e7000044 	addi	fp,fp,1
 8007308:	857ff404 	addi	r21,r16,-48
 800730c:	957ff92e 	bgeu	r18,r21,80072f4 <__alt_data_end+0xfc0072f4>
 8007310:	2013883a 	mov	r9,r4
 8007314:	203f670e 	bge	r4,zero,80070b4 <__alt_data_end+0xfc0070b4>
 8007318:	027fffc4 	movi	r9,-1
 800731c:	003f6506 	br	80070b4 <__alt_data_end+0xfc0070b4>
 8007320:	9cc02014 	ori	r19,r19,128
 8007324:	e005883a 	mov	r2,fp
 8007328:	e4000007 	ldb	r16,0(fp)
 800732c:	003f6006 	br	80070b0 <__alt_data_end+0xfc0070b0>
 8007330:	857ff404 	addi	r21,r16,-48
 8007334:	d8002e15 	stw	zero,184(sp)
 8007338:	e021883a 	mov	r16,fp
 800733c:	0009883a 	mov	r4,zero
 8007340:	da402b15 	stw	r9,172(sp)
 8007344:	01400284 	movi	r5,10
 8007348:	80040900 	call	8004090 <__mulsi3>
 800734c:	81400007 	ldb	r5,0(r16)
 8007350:	1549883a 	add	r4,r2,r21
 8007354:	e7000044 	addi	fp,fp,1
 8007358:	2d7ff404 	addi	r21,r5,-48
 800735c:	e021883a 	mov	r16,fp
 8007360:	957ff82e 	bgeu	r18,r21,8007344 <__alt_data_end+0xfc007344>
 8007364:	2821883a 	mov	r16,r5
 8007368:	d9002e15 	stw	r4,184(sp)
 800736c:	da402b17 	ldw	r9,172(sp)
 8007370:	003f5006 	br	80070b4 <__alt_data_end+0xfc0070b4>
 8007374:	da002917 	ldw	r8,164(sp)
 8007378:	df002915 	stw	fp,164(sp)
 800737c:	9839883a 	mov	fp,r19
 8007380:	dcc02a03 	ldbu	r19,168(sp)
 8007384:	e7000414 	ori	fp,fp,16
 8007388:	e080080c 	andi	r2,fp,32
 800738c:	dcc02785 	stb	r19,158(sp)
 8007390:	d8c02d17 	ldw	r3,180(sp)
 8007394:	10018026 	beq	r2,zero,8007998 <___svfprintf_internal_r+0xa44>
 8007398:	d9002d17 	ldw	r4,180(sp)
 800739c:	18800117 	ldw	r2,4(r3)
 80073a0:	1c800017 	ldw	r18,0(r3)
 80073a4:	21000204 	addi	r4,r4,8
 80073a8:	d9002d15 	stw	r4,180(sp)
 80073ac:	102b883a 	mov	r21,r2
 80073b0:	10018216 	blt	r2,zero,80079bc <___svfprintf_internal_r+0xa68>
 80073b4:	dcc02783 	ldbu	r19,158(sp)
 80073b8:	da403215 	stw	r9,200(sp)
 80073bc:	00800044 	movi	r2,1
 80073c0:	9546b03a 	or	r3,r18,r21
 80073c4:	48000216 	blt	r9,zero,80073d0 <___svfprintf_internal_r+0x47c>
 80073c8:	013fdfc4 	movi	r4,-129
 80073cc:	e138703a 	and	fp,fp,r4
 80073d0:	1802471e 	bne	r3,zero,8007cf0 <___svfprintf_internal_r+0xd9c>
 80073d4:	48035226 	beq	r9,zero,8008120 <___svfprintf_internal_r+0x11cc>
 80073d8:	10803fcc 	andi	r2,r2,255
 80073dc:	00c00044 	movi	r3,1
 80073e0:	10c26626 	beq	r2,r3,8007d7c <___svfprintf_internal_r+0xe28>
 80073e4:	00c00084 	movi	r3,2
 80073e8:	10c2e826 	beq	r2,r3,8007f8c <___svfprintf_internal_r+0x1038>
 80073ec:	b807883a 	mov	r3,r23
 80073f0:	9008d0fa 	srli	r4,r18,3
 80073f4:	a80a977a 	slli	r5,r21,29
 80073f8:	a82ad0fa 	srli	r21,r21,3
 80073fc:	948001cc 	andi	r18,r18,7
 8007400:	90800c04 	addi	r2,r18,48
 8007404:	18ffffc4 	addi	r3,r3,-1
 8007408:	2924b03a 	or	r18,r5,r4
 800740c:	18800005 	stb	r2,0(r3)
 8007410:	9548b03a 	or	r4,r18,r21
 8007414:	203ff61e 	bne	r4,zero,80073f0 <__alt_data_end+0xfc0073f0>
 8007418:	e100004c 	andi	r4,fp,1
 800741c:	d8c03115 	stw	r3,196(sp)
 8007420:	2002e826 	beq	r4,zero,8007fc4 <___svfprintf_internal_r+0x1070>
 8007424:	10803fcc 	andi	r2,r2,255
 8007428:	1080201c 	xori	r2,r2,128
 800742c:	10bfe004 	addi	r2,r2,-128
 8007430:	01000c04 	movi	r4,48
 8007434:	11056d26 	beq	r2,r4,80089ec <___svfprintf_internal_r+0x1a98>
 8007438:	d9403117 	ldw	r5,196(sp)
 800743c:	193fffc5 	stb	r4,-1(r3)
 8007440:	297fffc4 	addi	r5,r5,-1
 8007444:	d9403115 	stw	r5,196(sp)
 8007448:	b963c83a 	sub	r17,r23,r5
 800744c:	8805883a 	mov	r2,r17
 8007450:	8a40010e 	bge	r17,r9,8007458 <___svfprintf_internal_r+0x504>
 8007454:	4805883a 	mov	r2,r9
 8007458:	d8802a15 	stw	r2,168(sp)
 800745c:	d8003415 	stw	zero,208(sp)
 8007460:	98803fcc 	andi	r2,r19,255
 8007464:	1080201c 	xori	r2,r2,128
 8007468:	10bfe004 	addi	r2,r2,-128
 800746c:	10000326 	beq	r2,zero,800747c <___svfprintf_internal_r+0x528>
 8007470:	d8c02a17 	ldw	r3,168(sp)
 8007474:	18c00044 	addi	r3,r3,1
 8007478:	d8c02a15 	stw	r3,168(sp)
 800747c:	e0c0008c 	andi	r3,fp,2
 8007480:	d8c02b15 	stw	r3,172(sp)
 8007484:	18000326 	beq	r3,zero,8007494 <___svfprintf_internal_r+0x540>
 8007488:	d8c02a17 	ldw	r3,168(sp)
 800748c:	18c00084 	addi	r3,r3,2
 8007490:	d8c02a15 	stw	r3,168(sp)
 8007494:	e0c0210c 	andi	r3,fp,132
 8007498:	d8c02c15 	stw	r3,176(sp)
 800749c:	1802121e 	bne	r3,zero,8007ce8 <___svfprintf_internal_r+0xd94>
 80074a0:	d9002e17 	ldw	r4,184(sp)
 80074a4:	d8c02a17 	ldw	r3,168(sp)
 80074a8:	20ebc83a 	sub	r21,r4,r3
 80074ac:	05420e0e 	bge	zero,r21,8007ce8 <___svfprintf_internal_r+0xd94>
 80074b0:	02400404 	movi	r9,16
 80074b4:	d8c02017 	ldw	r3,128(sp)
 80074b8:	d8801f17 	ldw	r2,124(sp)
 80074bc:	4d45aa0e 	bge	r9,r21,8008b68 <___svfprintf_internal_r+0x1c14>
 80074c0:	014200b4 	movhi	r5,2050
 80074c4:	a809883a 	mov	r4,r21
 80074c8:	2949fd84 	addi	r5,r5,10230
 80074cc:	dc003c15 	stw	r16,240(sp)
 80074d0:	882b883a 	mov	r21,r17
 80074d4:	d9403615 	stw	r5,216(sp)
 80074d8:	4827883a 	mov	r19,r9
 80074dc:	048001c4 	movi	r18,7
 80074e0:	dc002f17 	ldw	r16,188(sp)
 80074e4:	2023883a 	mov	r17,r4
 80074e8:	00000306 	br	80074f8 <___svfprintf_internal_r+0x5a4>
 80074ec:	8c7ffc04 	addi	r17,r17,-16
 80074f0:	42000204 	addi	r8,r8,8
 80074f4:	9c40130e 	bge	r19,r17,8007544 <___svfprintf_internal_r+0x5f0>
 80074f8:	010200b4 	movhi	r4,2050
 80074fc:	18c00404 	addi	r3,r3,16
 8007500:	10800044 	addi	r2,r2,1
 8007504:	2109fd84 	addi	r4,r4,10230
 8007508:	41000015 	stw	r4,0(r8)
 800750c:	44c00115 	stw	r19,4(r8)
 8007510:	d8c02015 	stw	r3,128(sp)
 8007514:	d8801f15 	stw	r2,124(sp)
 8007518:	90bff40e 	bge	r18,r2,80074ec <__alt_data_end+0xfc0074ec>
 800751c:	8009883a 	mov	r4,r16
 8007520:	b00b883a 	mov	r5,r22
 8007524:	b80d883a 	mov	r6,r23
 8007528:	800fbe40 	call	800fbe4 <__ssprint_r>
 800752c:	103f521e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8007530:	8c7ffc04 	addi	r17,r17,-16
 8007534:	d8c02017 	ldw	r3,128(sp)
 8007538:	d8801f17 	ldw	r2,124(sp)
 800753c:	da000404 	addi	r8,sp,16
 8007540:	9c7fed16 	blt	r19,r17,80074f8 <__alt_data_end+0xfc0074f8>
 8007544:	dc003c17 	ldw	r16,240(sp)
 8007548:	8809883a 	mov	r4,r17
 800754c:	a823883a 	mov	r17,r21
 8007550:	202b883a 	mov	r21,r4
 8007554:	d9403617 	ldw	r5,216(sp)
 8007558:	a8c7883a 	add	r3,r21,r3
 800755c:	10800044 	addi	r2,r2,1
 8007560:	41400015 	stw	r5,0(r8)
 8007564:	45400115 	stw	r21,4(r8)
 8007568:	d8c02015 	stw	r3,128(sp)
 800756c:	d8801f15 	stw	r2,124(sp)
 8007570:	010001c4 	movi	r4,7
 8007574:	20834416 	blt	r4,r2,8008288 <___svfprintf_internal_r+0x1334>
 8007578:	d8802787 	ldb	r2,158(sp)
 800757c:	42000204 	addi	r8,r8,8
 8007580:	10000c26 	beq	r2,zero,80075b4 <___svfprintf_internal_r+0x660>
 8007584:	d8801f17 	ldw	r2,124(sp)
 8007588:	d9002784 	addi	r4,sp,158
 800758c:	18c00044 	addi	r3,r3,1
 8007590:	10800044 	addi	r2,r2,1
 8007594:	41000015 	stw	r4,0(r8)
 8007598:	01000044 	movi	r4,1
 800759c:	41000115 	stw	r4,4(r8)
 80075a0:	d8c02015 	stw	r3,128(sp)
 80075a4:	d8801f15 	stw	r2,124(sp)
 80075a8:	010001c4 	movi	r4,7
 80075ac:	2082ee16 	blt	r4,r2,8008168 <___svfprintf_internal_r+0x1214>
 80075b0:	42000204 	addi	r8,r8,8
 80075b4:	d8802b17 	ldw	r2,172(sp)
 80075b8:	10000c26 	beq	r2,zero,80075ec <___svfprintf_internal_r+0x698>
 80075bc:	d8801f17 	ldw	r2,124(sp)
 80075c0:	d9002704 	addi	r4,sp,156
 80075c4:	18c00084 	addi	r3,r3,2
 80075c8:	10800044 	addi	r2,r2,1
 80075cc:	41000015 	stw	r4,0(r8)
 80075d0:	01000084 	movi	r4,2
 80075d4:	41000115 	stw	r4,4(r8)
 80075d8:	d8c02015 	stw	r3,128(sp)
 80075dc:	d8801f15 	stw	r2,124(sp)
 80075e0:	010001c4 	movi	r4,7
 80075e4:	2082e816 	blt	r4,r2,8008188 <___svfprintf_internal_r+0x1234>
 80075e8:	42000204 	addi	r8,r8,8
 80075ec:	d9002c17 	ldw	r4,176(sp)
 80075f0:	00802004 	movi	r2,128
 80075f4:	20823126 	beq	r4,r2,8007ebc <___svfprintf_internal_r+0xf68>
 80075f8:	d9403217 	ldw	r5,200(sp)
 80075fc:	2c67c83a 	sub	r19,r5,r17
 8007600:	04c02f0e 	bge	zero,r19,80076c0 <___svfprintf_internal_r+0x76c>
 8007604:	05400404 	movi	r21,16
 8007608:	d8801f17 	ldw	r2,124(sp)
 800760c:	acc4260e 	bge	r21,r19,80086a8 <___svfprintf_internal_r+0x1754>
 8007610:	014200b4 	movhi	r5,2050
 8007614:	9809883a 	mov	r4,r19
 8007618:	2949f984 	addi	r5,r5,10214
 800761c:	dc002c15 	stw	r16,176(sp)
 8007620:	8827883a 	mov	r19,r17
 8007624:	d9402b15 	stw	r5,172(sp)
 8007628:	048001c4 	movi	r18,7
 800762c:	dc002f17 	ldw	r16,188(sp)
 8007630:	2023883a 	mov	r17,r4
 8007634:	00000306 	br	8007644 <___svfprintf_internal_r+0x6f0>
 8007638:	8c7ffc04 	addi	r17,r17,-16
 800763c:	42000204 	addi	r8,r8,8
 8007640:	ac40110e 	bge	r21,r17,8007688 <___svfprintf_internal_r+0x734>
 8007644:	18c00404 	addi	r3,r3,16
 8007648:	10800044 	addi	r2,r2,1
 800764c:	45000015 	stw	r20,0(r8)
 8007650:	45400115 	stw	r21,4(r8)
 8007654:	d8c02015 	stw	r3,128(sp)
 8007658:	d8801f15 	stw	r2,124(sp)
 800765c:	90bff60e 	bge	r18,r2,8007638 <__alt_data_end+0xfc007638>
 8007660:	8009883a 	mov	r4,r16
 8007664:	b00b883a 	mov	r5,r22
 8007668:	b80d883a 	mov	r6,r23
 800766c:	800fbe40 	call	800fbe4 <__ssprint_r>
 8007670:	103f011e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8007674:	8c7ffc04 	addi	r17,r17,-16
 8007678:	d8c02017 	ldw	r3,128(sp)
 800767c:	d8801f17 	ldw	r2,124(sp)
 8007680:	da000404 	addi	r8,sp,16
 8007684:	ac7fef16 	blt	r21,r17,8007644 <__alt_data_end+0xfc007644>
 8007688:	dc002c17 	ldw	r16,176(sp)
 800768c:	8809883a 	mov	r4,r17
 8007690:	9823883a 	mov	r17,r19
 8007694:	2027883a 	mov	r19,r4
 8007698:	d9002b17 	ldw	r4,172(sp)
 800769c:	1cc7883a 	add	r3,r3,r19
 80076a0:	10800044 	addi	r2,r2,1
 80076a4:	41000015 	stw	r4,0(r8)
 80076a8:	44c00115 	stw	r19,4(r8)
 80076ac:	d8c02015 	stw	r3,128(sp)
 80076b0:	d8801f15 	stw	r2,124(sp)
 80076b4:	010001c4 	movi	r4,7
 80076b8:	2082a316 	blt	r4,r2,8008148 <___svfprintf_internal_r+0x11f4>
 80076bc:	42000204 	addi	r8,r8,8
 80076c0:	e080400c 	andi	r2,fp,256
 80076c4:	1001b31e 	bne	r2,zero,8007d94 <___svfprintf_internal_r+0xe40>
 80076c8:	d8801f17 	ldw	r2,124(sp)
 80076cc:	d9403117 	ldw	r5,196(sp)
 80076d0:	1c47883a 	add	r3,r3,r17
 80076d4:	10800044 	addi	r2,r2,1
 80076d8:	41400015 	stw	r5,0(r8)
 80076dc:	44400115 	stw	r17,4(r8)
 80076e0:	d8c02015 	stw	r3,128(sp)
 80076e4:	d8801f15 	stw	r2,124(sp)
 80076e8:	010001c4 	movi	r4,7
 80076ec:	20827e16 	blt	r4,r2,80080e8 <___svfprintf_internal_r+0x1194>
 80076f0:	42000204 	addi	r8,r8,8
 80076f4:	e080010c 	andi	r2,fp,4
 80076f8:	10003226 	beq	r2,zero,80077c4 <___svfprintf_internal_r+0x870>
 80076fc:	d8802e17 	ldw	r2,184(sp)
 8007700:	d9002a17 	ldw	r4,168(sp)
 8007704:	1121c83a 	sub	r16,r2,r4
 8007708:	04002e0e 	bge	zero,r16,80077c4 <___svfprintf_internal_r+0x870>
 800770c:	04400404 	movi	r17,16
 8007710:	d8801f17 	ldw	r2,124(sp)
 8007714:	8c05550e 	bge	r17,r16,8008c6c <___svfprintf_internal_r+0x1d18>
 8007718:	010200b4 	movhi	r4,2050
 800771c:	2109fd84 	addi	r4,r4,10230
 8007720:	d9003615 	stw	r4,216(sp)
 8007724:	048001c4 	movi	r18,7
 8007728:	dcc02f17 	ldw	r19,188(sp)
 800772c:	00000306 	br	800773c <___svfprintf_internal_r+0x7e8>
 8007730:	843ffc04 	addi	r16,r16,-16
 8007734:	42000204 	addi	r8,r8,8
 8007738:	8c00130e 	bge	r17,r16,8007788 <___svfprintf_internal_r+0x834>
 800773c:	014200b4 	movhi	r5,2050
 8007740:	18c00404 	addi	r3,r3,16
 8007744:	10800044 	addi	r2,r2,1
 8007748:	2949fd84 	addi	r5,r5,10230
 800774c:	41400015 	stw	r5,0(r8)
 8007750:	44400115 	stw	r17,4(r8)
 8007754:	d8c02015 	stw	r3,128(sp)
 8007758:	d8801f15 	stw	r2,124(sp)
 800775c:	90bff40e 	bge	r18,r2,8007730 <__alt_data_end+0xfc007730>
 8007760:	9809883a 	mov	r4,r19
 8007764:	b00b883a 	mov	r5,r22
 8007768:	b80d883a 	mov	r6,r23
 800776c:	800fbe40 	call	800fbe4 <__ssprint_r>
 8007770:	103ec11e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8007774:	843ffc04 	addi	r16,r16,-16
 8007778:	d8c02017 	ldw	r3,128(sp)
 800777c:	d8801f17 	ldw	r2,124(sp)
 8007780:	da000404 	addi	r8,sp,16
 8007784:	8c3fed16 	blt	r17,r16,800773c <__alt_data_end+0xfc00773c>
 8007788:	d9003617 	ldw	r4,216(sp)
 800778c:	1c07883a 	add	r3,r3,r16
 8007790:	10800044 	addi	r2,r2,1
 8007794:	41000015 	stw	r4,0(r8)
 8007798:	44000115 	stw	r16,4(r8)
 800779c:	d8c02015 	stw	r3,128(sp)
 80077a0:	d8801f15 	stw	r2,124(sp)
 80077a4:	010001c4 	movi	r4,7
 80077a8:	2080060e 	bge	r4,r2,80077c4 <___svfprintf_internal_r+0x870>
 80077ac:	d9002f17 	ldw	r4,188(sp)
 80077b0:	b00b883a 	mov	r5,r22
 80077b4:	b80d883a 	mov	r6,r23
 80077b8:	800fbe40 	call	800fbe4 <__ssprint_r>
 80077bc:	103eae1e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 80077c0:	d8c02017 	ldw	r3,128(sp)
 80077c4:	df002a17 	ldw	fp,168(sp)
 80077c8:	d9402e17 	ldw	r5,184(sp)
 80077cc:	e140010e 	bge	fp,r5,80077d4 <___svfprintf_internal_r+0x880>
 80077d0:	2839883a 	mov	fp,r5
 80077d4:	d8803017 	ldw	r2,192(sp)
 80077d8:	1705883a 	add	r2,r2,fp
 80077dc:	d8803015 	stw	r2,192(sp)
 80077e0:	1802491e 	bne	r3,zero,8008108 <___svfprintf_internal_r+0x11b4>
 80077e4:	d8c02917 	ldw	r3,164(sp)
 80077e8:	d8001f15 	stw	zero,124(sp)
 80077ec:	da000404 	addi	r8,sp,16
 80077f0:	18800007 	ldb	r2,0(r3)
 80077f4:	103e061e 	bne	r2,zero,8007010 <__alt_data_end+0xfc007010>
 80077f8:	dc002917 	ldw	r16,164(sp)
 80077fc:	003e1e06 	br	8007078 <__alt_data_end+0xfc007078>
 8007800:	d9002d17 	ldw	r4,180(sp)
 8007804:	d9402d17 	ldw	r5,180(sp)
 8007808:	da002917 	ldw	r8,164(sp)
 800780c:	21000017 	ldw	r4,0(r4)
 8007810:	29400117 	ldw	r5,4(r5)
 8007814:	df002915 	stw	fp,164(sp)
 8007818:	9839883a 	mov	fp,r19
 800781c:	dcc02a03 	ldbu	r19,168(sp)
 8007820:	d9003715 	stw	r4,220(sp)
 8007824:	d9403815 	stw	r5,224(sp)
 8007828:	da004015 	stw	r8,256(sp)
 800782c:	da403f15 	stw	r9,252(sp)
 8007830:	dcc02785 	stb	r19,158(sp)
 8007834:	800f9900 	call	800f990 <__fpclassifyd>
 8007838:	d8c02d17 	ldw	r3,180(sp)
 800783c:	04400044 	movi	r17,1
 8007840:	da004017 	ldw	r8,256(sp)
 8007844:	1c800204 	addi	r18,r3,8
 8007848:	da403f17 	ldw	r9,252(sp)
 800784c:	d9003717 	ldw	r4,220(sp)
 8007850:	d9403817 	ldw	r5,224(sp)
 8007854:	14433e1e 	bne	r2,r17,8008550 <___svfprintf_internal_r+0x15fc>
 8007858:	000d883a 	mov	r6,zero
 800785c:	000f883a 	mov	r7,zero
 8007860:	801458c0 	call	801458c <__ledf2>
 8007864:	da004017 	ldw	r8,256(sp)
 8007868:	10050c16 	blt	r2,zero,8008c9c <___svfprintf_internal_r+0x1d48>
 800786c:	dcc02783 	ldbu	r19,158(sp)
 8007870:	008011c4 	movi	r2,71
 8007874:	1404410e 	bge	r2,r16,800897c <___svfprintf_internal_r+0x1a28>
 8007878:	014200b4 	movhi	r5,2050
 800787c:	2949ea04 	addi	r5,r5,10152
 8007880:	d9403115 	stw	r5,196(sp)
 8007884:	00c000c4 	movi	r3,3
 8007888:	00bfdfc4 	movi	r2,-129
 800788c:	d8c02a15 	stw	r3,168(sp)
 8007890:	e0b8703a 	and	fp,fp,r2
 8007894:	dc802d15 	stw	r18,180(sp)
 8007898:	1823883a 	mov	r17,r3
 800789c:	d8003215 	stw	zero,200(sp)
 80078a0:	d8003415 	stw	zero,208(sp)
 80078a4:	003eee06 	br	8007460 <__alt_data_end+0xfc007460>
 80078a8:	9cc00214 	ori	r19,r19,8
 80078ac:	e005883a 	mov	r2,fp
 80078b0:	e4000007 	ldb	r16,0(fp)
 80078b4:	003dfe06 	br	80070b0 <__alt_data_end+0xfc0070b0>
 80078b8:	da002917 	ldw	r8,164(sp)
 80078bc:	df002915 	stw	fp,164(sp)
 80078c0:	9f000414 	ori	fp,r19,16
 80078c4:	e080080c 	andi	r2,fp,32
 80078c8:	1000f226 	beq	r2,zero,8007c94 <___svfprintf_internal_r+0xd40>
 80078cc:	d9402d17 	ldw	r5,180(sp)
 80078d0:	0005883a 	mov	r2,zero
 80078d4:	2c800017 	ldw	r18,0(r5)
 80078d8:	2d400117 	ldw	r21,4(r5)
 80078dc:	29400204 	addi	r5,r5,8
 80078e0:	d9402d15 	stw	r5,180(sp)
 80078e4:	9546b03a 	or	r3,r18,r21
 80078e8:	d8002785 	stb	zero,158(sp)
 80078ec:	da403215 	stw	r9,200(sp)
 80078f0:	0027883a 	mov	r19,zero
 80078f4:	003eb306 	br	80073c4 <__alt_data_end+0xfc0073c4>
 80078f8:	da002917 	ldw	r8,164(sp)
 80078fc:	df002915 	stw	fp,164(sp)
 8007900:	9f000414 	ori	fp,r19,16
 8007904:	e080080c 	andi	r2,fp,32
 8007908:	1000d326 	beq	r2,zero,8007c58 <___svfprintf_internal_r+0xd04>
 800790c:	d9002d17 	ldw	r4,180(sp)
 8007910:	00800044 	movi	r2,1
 8007914:	24800017 	ldw	r18,0(r4)
 8007918:	25400117 	ldw	r21,4(r4)
 800791c:	21000204 	addi	r4,r4,8
 8007920:	d9002d15 	stw	r4,180(sp)
 8007924:	9546b03a 	or	r3,r18,r21
 8007928:	003fef06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 800792c:	d9402d17 	ldw	r5,180(sp)
 8007930:	00800c04 	movi	r2,48
 8007934:	d8802705 	stb	r2,156(sp)
 8007938:	2c800017 	ldw	r18,0(r5)
 800793c:	00801e04 	movi	r2,120
 8007940:	d8802745 	stb	r2,157(sp)
 8007944:	008200b4 	movhi	r2,2050
 8007948:	1089f204 	addi	r2,r2,10184
 800794c:	29400104 	addi	r5,r5,4
 8007950:	da002917 	ldw	r8,164(sp)
 8007954:	d8803b15 	stw	r2,236(sp)
 8007958:	df002915 	stw	fp,164(sp)
 800795c:	002b883a 	mov	r21,zero
 8007960:	9f000094 	ori	fp,r19,2
 8007964:	d9402d15 	stw	r5,180(sp)
 8007968:	00800084 	movi	r2,2
 800796c:	04001e04 	movi	r16,120
 8007970:	9007883a 	mov	r3,r18
 8007974:	003fdc06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8007978:	da002917 	ldw	r8,164(sp)
 800797c:	df002915 	stw	fp,164(sp)
 8007980:	9839883a 	mov	fp,r19
 8007984:	dcc02a03 	ldbu	r19,168(sp)
 8007988:	e080080c 	andi	r2,fp,32
 800798c:	d8c02d17 	ldw	r3,180(sp)
 8007990:	dcc02785 	stb	r19,158(sp)
 8007994:	103e801e 	bne	r2,zero,8007398 <__alt_data_end+0xfc007398>
 8007998:	e080040c 	andi	r2,fp,16
 800799c:	10031f26 	beq	r2,zero,800861c <___svfprintf_internal_r+0x16c8>
 80079a0:	1c800017 	ldw	r18,0(r3)
 80079a4:	d9402d17 	ldw	r5,180(sp)
 80079a8:	902bd7fa 	srai	r21,r18,31
 80079ac:	29400104 	addi	r5,r5,4
 80079b0:	d9402d15 	stw	r5,180(sp)
 80079b4:	a805883a 	mov	r2,r21
 80079b8:	103e7e0e 	bge	r2,zero,80073b4 <__alt_data_end+0xfc0073b4>
 80079bc:	04a5c83a 	sub	r18,zero,r18
 80079c0:	9004c03a 	cmpne	r2,r18,zero
 80079c4:	056bc83a 	sub	r21,zero,r21
 80079c8:	a8abc83a 	sub	r21,r21,r2
 80079cc:	04c00b44 	movi	r19,45
 80079d0:	dcc02785 	stb	r19,158(sp)
 80079d4:	da403215 	stw	r9,200(sp)
 80079d8:	00800044 	movi	r2,1
 80079dc:	9546b03a 	or	r3,r18,r21
 80079e0:	003e7806 	br	80073c4 <__alt_data_end+0xfc0073c4>
 80079e4:	9cc01014 	ori	r19,r19,64
 80079e8:	e005883a 	mov	r2,fp
 80079ec:	e4000007 	ldb	r16,0(fp)
 80079f0:	003daf06 	br	80070b0 <__alt_data_end+0xfc0070b0>
 80079f4:	e4000007 	ldb	r16,0(fp)
 80079f8:	00801b04 	movi	r2,108
 80079fc:	80837726 	beq	r16,r2,80087dc <___svfprintf_internal_r+0x1888>
 8007a00:	9cc00414 	ori	r19,r19,16
 8007a04:	e005883a 	mov	r2,fp
 8007a08:	003da906 	br	80070b0 <__alt_data_end+0xfc0070b0>
 8007a0c:	da002917 	ldw	r8,164(sp)
 8007a10:	df002915 	stw	fp,164(sp)
 8007a14:	9839883a 	mov	fp,r19
 8007a18:	dcc02a03 	ldbu	r19,168(sp)
 8007a1c:	e080080c 	andi	r2,fp,32
 8007a20:	dcc02785 	stb	r19,158(sp)
 8007a24:	1002f126 	beq	r2,zero,80085ec <___svfprintf_internal_r+0x1698>
 8007a28:	d9402d17 	ldw	r5,180(sp)
 8007a2c:	d9003017 	ldw	r4,192(sp)
 8007a30:	28800017 	ldw	r2,0(r5)
 8007a34:	2007d7fa 	srai	r3,r4,31
 8007a38:	29400104 	addi	r5,r5,4
 8007a3c:	d9402d15 	stw	r5,180(sp)
 8007a40:	11000015 	stw	r4,0(r2)
 8007a44:	10c00115 	stw	r3,4(r2)
 8007a48:	003d6e06 	br	8007004 <__alt_data_end+0xfc007004>
 8007a4c:	da002917 	ldw	r8,164(sp)
 8007a50:	df002915 	stw	fp,164(sp)
 8007a54:	9839883a 	mov	fp,r19
 8007a58:	dcc02a03 	ldbu	r19,168(sp)
 8007a5c:	014200b4 	movhi	r5,2050
 8007a60:	2949ed04 	addi	r5,r5,10164
 8007a64:	dcc02785 	stb	r19,158(sp)
 8007a68:	d9403b15 	stw	r5,236(sp)
 8007a6c:	e0c0080c 	andi	r3,fp,32
 8007a70:	d8802d17 	ldw	r2,180(sp)
 8007a74:	18005826 	beq	r3,zero,8007bd8 <___svfprintf_internal_r+0xc84>
 8007a78:	d9402d17 	ldw	r5,180(sp)
 8007a7c:	14800017 	ldw	r18,0(r2)
 8007a80:	15400117 	ldw	r21,4(r2)
 8007a84:	29400204 	addi	r5,r5,8
 8007a88:	d9402d15 	stw	r5,180(sp)
 8007a8c:	e080004c 	andi	r2,fp,1
 8007a90:	10020626 	beq	r2,zero,80082ac <___svfprintf_internal_r+0x1358>
 8007a94:	9546b03a 	or	r3,r18,r21
 8007a98:	1802f326 	beq	r3,zero,8008668 <___svfprintf_internal_r+0x1714>
 8007a9c:	00800c04 	movi	r2,48
 8007aa0:	d8802705 	stb	r2,156(sp)
 8007aa4:	dc002745 	stb	r16,157(sp)
 8007aa8:	e7000094 	ori	fp,fp,2
 8007aac:	00800084 	movi	r2,2
 8007ab0:	003f8d06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8007ab4:	d8c02d17 	ldw	r3,180(sp)
 8007ab8:	d9002d17 	ldw	r4,180(sp)
 8007abc:	da002917 	ldw	r8,164(sp)
 8007ac0:	18800017 	ldw	r2,0(r3)
 8007ac4:	21000104 	addi	r4,r4,4
 8007ac8:	00c00044 	movi	r3,1
 8007acc:	df002915 	stw	fp,164(sp)
 8007ad0:	d8c02a15 	stw	r3,168(sp)
 8007ad4:	9839883a 	mov	fp,r19
 8007ad8:	d8002785 	stb	zero,158(sp)
 8007adc:	d8801405 	stb	r2,80(sp)
 8007ae0:	d9002d15 	stw	r4,180(sp)
 8007ae4:	1823883a 	mov	r17,r3
 8007ae8:	d8c01404 	addi	r3,sp,80
 8007aec:	d8003215 	stw	zero,200(sp)
 8007af0:	d8003415 	stw	zero,208(sp)
 8007af4:	d8c03115 	stw	r3,196(sp)
 8007af8:	0005883a 	mov	r2,zero
 8007afc:	003e5f06 	br	800747c <__alt_data_end+0xfc00747c>
 8007b00:	d8802a07 	ldb	r2,168(sp)
 8007b04:	1002c21e 	bne	r2,zero,8008610 <___svfprintf_internal_r+0x16bc>
 8007b08:	00c00804 	movi	r3,32
 8007b0c:	d8c02a05 	stb	r3,168(sp)
 8007b10:	e005883a 	mov	r2,fp
 8007b14:	e4000007 	ldb	r16,0(fp)
 8007b18:	003d6506 	br	80070b0 <__alt_data_end+0xfc0070b0>
 8007b1c:	9cc00054 	ori	r19,r19,1
 8007b20:	e005883a 	mov	r2,fp
 8007b24:	e4000007 	ldb	r16,0(fp)
 8007b28:	003d6106 	br	80070b0 <__alt_data_end+0xfc0070b0>
 8007b2c:	d8c02d17 	ldw	r3,180(sp)
 8007b30:	d9002d17 	ldw	r4,180(sp)
 8007b34:	da002917 	ldw	r8,164(sp)
 8007b38:	18c00017 	ldw	r3,0(r3)
 8007b3c:	df002915 	stw	fp,164(sp)
 8007b40:	d8002785 	stb	zero,158(sp)
 8007b44:	d8c03115 	stw	r3,196(sp)
 8007b48:	9839883a 	mov	fp,r19
 8007b4c:	24800104 	addi	r18,r4,4
 8007b50:	18043526 	beq	r3,zero,8008c28 <___svfprintf_internal_r+0x1cd4>
 8007b54:	d9003117 	ldw	r4,196(sp)
 8007b58:	4803e016 	blt	r9,zero,8008adc <___svfprintf_internal_r+0x1b88>
 8007b5c:	480d883a 	mov	r6,r9
 8007b60:	000b883a 	mov	r5,zero
 8007b64:	da004015 	stw	r8,256(sp)
 8007b68:	da403f15 	stw	r9,252(sp)
 8007b6c:	800ded80 	call	800ded8 <memchr>
 8007b70:	da004017 	ldw	r8,256(sp)
 8007b74:	da403f17 	ldw	r9,252(sp)
 8007b78:	10045f26 	beq	r2,zero,8008cf8 <___svfprintf_internal_r+0x1da4>
 8007b7c:	d8c03117 	ldw	r3,196(sp)
 8007b80:	10e3c83a 	sub	r17,r2,r3
 8007b84:	4c40010e 	bge	r9,r17,8007b8c <___svfprintf_internal_r+0xc38>
 8007b88:	4823883a 	mov	r17,r9
 8007b8c:	8805883a 	mov	r2,r17
 8007b90:	8803d716 	blt	r17,zero,8008af0 <___svfprintf_internal_r+0x1b9c>
 8007b94:	dcc02783 	ldbu	r19,158(sp)
 8007b98:	d8802a15 	stw	r2,168(sp)
 8007b9c:	dc802d15 	stw	r18,180(sp)
 8007ba0:	d8003215 	stw	zero,200(sp)
 8007ba4:	d8003415 	stw	zero,208(sp)
 8007ba8:	003e2d06 	br	8007460 <__alt_data_end+0xfc007460>
 8007bac:	da002917 	ldw	r8,164(sp)
 8007bb0:	df002915 	stw	fp,164(sp)
 8007bb4:	9839883a 	mov	fp,r19
 8007bb8:	dcc02a03 	ldbu	r19,168(sp)
 8007bbc:	010200b4 	movhi	r4,2050
 8007bc0:	2109f204 	addi	r4,r4,10184
 8007bc4:	d9003b15 	stw	r4,236(sp)
 8007bc8:	dcc02785 	stb	r19,158(sp)
 8007bcc:	e0c0080c 	andi	r3,fp,32
 8007bd0:	d8802d17 	ldw	r2,180(sp)
 8007bd4:	183fa81e 	bne	r3,zero,8007a78 <__alt_data_end+0xfc007a78>
 8007bd8:	e0c0040c 	andi	r3,fp,16
 8007bdc:	18027126 	beq	r3,zero,80085a4 <___svfprintf_internal_r+0x1650>
 8007be0:	d8c02d17 	ldw	r3,180(sp)
 8007be4:	14800017 	ldw	r18,0(r2)
 8007be8:	002b883a 	mov	r21,zero
 8007bec:	18c00104 	addi	r3,r3,4
 8007bf0:	d8c02d15 	stw	r3,180(sp)
 8007bf4:	003fa506 	br	8007a8c <__alt_data_end+0xfc007a8c>
 8007bf8:	9cc00814 	ori	r19,r19,32
 8007bfc:	e005883a 	mov	r2,fp
 8007c00:	e4000007 	ldb	r16,0(fp)
 8007c04:	003d2a06 	br	80070b0 <__alt_data_end+0xfc0070b0>
 8007c08:	d9002d17 	ldw	r4,180(sp)
 8007c0c:	d9402d17 	ldw	r5,180(sp)
 8007c10:	21000017 	ldw	r4,0(r4)
 8007c14:	28c00104 	addi	r3,r5,4
 8007c18:	d9002e15 	stw	r4,184(sp)
 8007c1c:	2002e916 	blt	r4,zero,80087c4 <___svfprintf_internal_r+0x1870>
 8007c20:	d8c02d15 	stw	r3,180(sp)
 8007c24:	e005883a 	mov	r2,fp
 8007c28:	e4000007 	ldb	r16,0(fp)
 8007c2c:	003d2006 	br	80070b0 <__alt_data_end+0xfc0070b0>
 8007c30:	00c00ac4 	movi	r3,43
 8007c34:	d8c02a05 	stb	r3,168(sp)
 8007c38:	e005883a 	mov	r2,fp
 8007c3c:	e4000007 	ldb	r16,0(fp)
 8007c40:	003d1b06 	br	80070b0 <__alt_data_end+0xfc0070b0>
 8007c44:	da002917 	ldw	r8,164(sp)
 8007c48:	df002915 	stw	fp,164(sp)
 8007c4c:	9839883a 	mov	fp,r19
 8007c50:	e080080c 	andi	r2,fp,32
 8007c54:	103f2d1e 	bne	r2,zero,800790c <__alt_data_end+0xfc00790c>
 8007c58:	e080040c 	andi	r2,fp,16
 8007c5c:	10027826 	beq	r2,zero,8008640 <___svfprintf_internal_r+0x16ec>
 8007c60:	d9402d17 	ldw	r5,180(sp)
 8007c64:	002b883a 	mov	r21,zero
 8007c68:	00800044 	movi	r2,1
 8007c6c:	2c800017 	ldw	r18,0(r5)
 8007c70:	29400104 	addi	r5,r5,4
 8007c74:	d9402d15 	stw	r5,180(sp)
 8007c78:	9007883a 	mov	r3,r18
 8007c7c:	003f1a06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8007c80:	da002917 	ldw	r8,164(sp)
 8007c84:	df002915 	stw	fp,164(sp)
 8007c88:	9839883a 	mov	fp,r19
 8007c8c:	e080080c 	andi	r2,fp,32
 8007c90:	103f0e1e 	bne	r2,zero,80078cc <__alt_data_end+0xfc0078cc>
 8007c94:	e080040c 	andi	r2,fp,16
 8007c98:	10024a26 	beq	r2,zero,80085c4 <___svfprintf_internal_r+0x1670>
 8007c9c:	d8802d17 	ldw	r2,180(sp)
 8007ca0:	002b883a 	mov	r21,zero
 8007ca4:	14800017 	ldw	r18,0(r2)
 8007ca8:	10800104 	addi	r2,r2,4
 8007cac:	d8802d15 	stw	r2,180(sp)
 8007cb0:	9007883a 	mov	r3,r18
 8007cb4:	0005883a 	mov	r2,zero
 8007cb8:	003f0b06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8007cbc:	da002917 	ldw	r8,164(sp)
 8007cc0:	df002915 	stw	fp,164(sp)
 8007cc4:	9839883a 	mov	fp,r19
 8007cc8:	dcc02a03 	ldbu	r19,168(sp)
 8007ccc:	dcc02785 	stb	r19,158(sp)
 8007cd0:	803d6326 	beq	r16,zero,8007260 <__alt_data_end+0xfc007260>
 8007cd4:	00c00044 	movi	r3,1
 8007cd8:	d8c02a15 	stw	r3,168(sp)
 8007cdc:	dc001405 	stb	r16,80(sp)
 8007ce0:	d8002785 	stb	zero,158(sp)
 8007ce4:	003f7f06 	br	8007ae4 <__alt_data_end+0xfc007ae4>
 8007ce8:	d8c02017 	ldw	r3,128(sp)
 8007cec:	003e2406 	br	8007580 <__alt_data_end+0xfc007580>
 8007cf0:	10803fcc 	andi	r2,r2,255
 8007cf4:	00c00044 	movi	r3,1
 8007cf8:	10fdba1e 	bne	r2,r3,80073e4 <__alt_data_end+0xfc0073e4>
 8007cfc:	a800021e 	bne	r21,zero,8007d08 <___svfprintf_internal_r+0xdb4>
 8007d00:	00800244 	movi	r2,9
 8007d04:	14801d2e 	bgeu	r2,r18,8007d7c <___svfprintf_internal_r+0xe28>
 8007d08:	dc002a15 	stw	r16,168(sp)
 8007d0c:	b823883a 	mov	r17,r23
 8007d10:	9021883a 	mov	r16,r18
 8007d14:	da002b15 	stw	r8,172(sp)
 8007d18:	a825883a 	mov	r18,r21
 8007d1c:	482b883a 	mov	r21,r9
 8007d20:	8009883a 	mov	r4,r16
 8007d24:	900b883a 	mov	r5,r18
 8007d28:	01800284 	movi	r6,10
 8007d2c:	000f883a 	mov	r7,zero
 8007d30:	80135700 	call	8013570 <__umoddi3>
 8007d34:	10800c04 	addi	r2,r2,48
 8007d38:	8c7fffc4 	addi	r17,r17,-1
 8007d3c:	8009883a 	mov	r4,r16
 8007d40:	900b883a 	mov	r5,r18
 8007d44:	01800284 	movi	r6,10
 8007d48:	000f883a 	mov	r7,zero
 8007d4c:	88800005 	stb	r2,0(r17)
 8007d50:	8012f300 	call	8012f30 <__udivdi3>
 8007d54:	1021883a 	mov	r16,r2
 8007d58:	10c4b03a 	or	r2,r2,r3
 8007d5c:	1825883a 	mov	r18,r3
 8007d60:	103fef1e 	bne	r2,zero,8007d20 <__alt_data_end+0xfc007d20>
 8007d64:	dc403115 	stw	r17,196(sp)
 8007d68:	dc002a17 	ldw	r16,168(sp)
 8007d6c:	da002b17 	ldw	r8,172(sp)
 8007d70:	a813883a 	mov	r9,r21
 8007d74:	bc63c83a 	sub	r17,r23,r17
 8007d78:	003db406 	br	800744c <__alt_data_end+0xfc00744c>
 8007d7c:	94800c04 	addi	r18,r18,48
 8007d80:	d8c01dc4 	addi	r3,sp,119
 8007d84:	dc801dc5 	stb	r18,119(sp)
 8007d88:	dc403d17 	ldw	r17,244(sp)
 8007d8c:	d8c03115 	stw	r3,196(sp)
 8007d90:	003dae06 	br	800744c <__alt_data_end+0xfc00744c>
 8007d94:	00801944 	movi	r2,101
 8007d98:	14008c0e 	bge	r2,r16,8007fcc <___svfprintf_internal_r+0x1078>
 8007d9c:	d9003717 	ldw	r4,220(sp)
 8007da0:	d9403817 	ldw	r5,224(sp)
 8007da4:	000d883a 	mov	r6,zero
 8007da8:	000f883a 	mov	r7,zero
 8007dac:	d8c03e15 	stw	r3,248(sp)
 8007db0:	da004015 	stw	r8,256(sp)
 8007db4:	80144280 	call	8014428 <__eqdf2>
 8007db8:	d8c03e17 	ldw	r3,248(sp)
 8007dbc:	da004017 	ldw	r8,256(sp)
 8007dc0:	1000fc1e 	bne	r2,zero,80081b4 <___svfprintf_internal_r+0x1260>
 8007dc4:	d8801f17 	ldw	r2,124(sp)
 8007dc8:	010200b4 	movhi	r4,2050
 8007dcc:	2109f904 	addi	r4,r4,10212
 8007dd0:	18c00044 	addi	r3,r3,1
 8007dd4:	10800044 	addi	r2,r2,1
 8007dd8:	41000015 	stw	r4,0(r8)
 8007ddc:	01000044 	movi	r4,1
 8007de0:	41000115 	stw	r4,4(r8)
 8007de4:	d8c02015 	stw	r3,128(sp)
 8007de8:	d8801f15 	stw	r2,124(sp)
 8007dec:	010001c4 	movi	r4,7
 8007df0:	20823116 	blt	r4,r2,80086b8 <___svfprintf_internal_r+0x1764>
 8007df4:	42000204 	addi	r8,r8,8
 8007df8:	d8802617 	ldw	r2,152(sp)
 8007dfc:	d9403317 	ldw	r5,204(sp)
 8007e00:	11400216 	blt	r2,r5,8007e0c <___svfprintf_internal_r+0xeb8>
 8007e04:	e080004c 	andi	r2,fp,1
 8007e08:	103e3a26 	beq	r2,zero,80076f4 <__alt_data_end+0xfc0076f4>
 8007e0c:	d8803917 	ldw	r2,228(sp)
 8007e10:	d9003517 	ldw	r4,212(sp)
 8007e14:	d9403917 	ldw	r5,228(sp)
 8007e18:	1887883a 	add	r3,r3,r2
 8007e1c:	d8801f17 	ldw	r2,124(sp)
 8007e20:	41000015 	stw	r4,0(r8)
 8007e24:	41400115 	stw	r5,4(r8)
 8007e28:	10800044 	addi	r2,r2,1
 8007e2c:	d8c02015 	stw	r3,128(sp)
 8007e30:	d8801f15 	stw	r2,124(sp)
 8007e34:	010001c4 	movi	r4,7
 8007e38:	20826c16 	blt	r4,r2,80087ec <___svfprintf_internal_r+0x1898>
 8007e3c:	42000204 	addi	r8,r8,8
 8007e40:	d8803317 	ldw	r2,204(sp)
 8007e44:	143fffc4 	addi	r16,r2,-1
 8007e48:	043e2a0e 	bge	zero,r16,80076f4 <__alt_data_end+0xfc0076f4>
 8007e4c:	04400404 	movi	r17,16
 8007e50:	d8801f17 	ldw	r2,124(sp)
 8007e54:	8c00980e 	bge	r17,r16,80080b8 <___svfprintf_internal_r+0x1164>
 8007e58:	014200b4 	movhi	r5,2050
 8007e5c:	2949f984 	addi	r5,r5,10214
 8007e60:	d9402b15 	stw	r5,172(sp)
 8007e64:	04c001c4 	movi	r19,7
 8007e68:	dc802f17 	ldw	r18,188(sp)
 8007e6c:	00000306 	br	8007e7c <___svfprintf_internal_r+0xf28>
 8007e70:	42000204 	addi	r8,r8,8
 8007e74:	843ffc04 	addi	r16,r16,-16
 8007e78:	8c00920e 	bge	r17,r16,80080c4 <___svfprintf_internal_r+0x1170>
 8007e7c:	18c00404 	addi	r3,r3,16
 8007e80:	10800044 	addi	r2,r2,1
 8007e84:	45000015 	stw	r20,0(r8)
 8007e88:	44400115 	stw	r17,4(r8)
 8007e8c:	d8c02015 	stw	r3,128(sp)
 8007e90:	d8801f15 	stw	r2,124(sp)
 8007e94:	98bff60e 	bge	r19,r2,8007e70 <__alt_data_end+0xfc007e70>
 8007e98:	9009883a 	mov	r4,r18
 8007e9c:	b00b883a 	mov	r5,r22
 8007ea0:	b80d883a 	mov	r6,r23
 8007ea4:	800fbe40 	call	800fbe4 <__ssprint_r>
 8007ea8:	103cf31e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8007eac:	d8c02017 	ldw	r3,128(sp)
 8007eb0:	d8801f17 	ldw	r2,124(sp)
 8007eb4:	da000404 	addi	r8,sp,16
 8007eb8:	003fee06 	br	8007e74 <__alt_data_end+0xfc007e74>
 8007ebc:	d9402e17 	ldw	r5,184(sp)
 8007ec0:	d8802a17 	ldw	r2,168(sp)
 8007ec4:	28a7c83a 	sub	r19,r5,r2
 8007ec8:	04fdcb0e 	bge	zero,r19,80075f8 <__alt_data_end+0xfc0075f8>
 8007ecc:	05400404 	movi	r21,16
 8007ed0:	d8801f17 	ldw	r2,124(sp)
 8007ed4:	acc3840e 	bge	r21,r19,8008ce8 <___svfprintf_internal_r+0x1d94>
 8007ed8:	014200b4 	movhi	r5,2050
 8007edc:	9809883a 	mov	r4,r19
 8007ee0:	2949f984 	addi	r5,r5,10214
 8007ee4:	dc002c15 	stw	r16,176(sp)
 8007ee8:	8827883a 	mov	r19,r17
 8007eec:	d9402b15 	stw	r5,172(sp)
 8007ef0:	048001c4 	movi	r18,7
 8007ef4:	dc002f17 	ldw	r16,188(sp)
 8007ef8:	2023883a 	mov	r17,r4
 8007efc:	00000306 	br	8007f0c <___svfprintf_internal_r+0xfb8>
 8007f00:	8c7ffc04 	addi	r17,r17,-16
 8007f04:	42000204 	addi	r8,r8,8
 8007f08:	ac40110e 	bge	r21,r17,8007f50 <___svfprintf_internal_r+0xffc>
 8007f0c:	18c00404 	addi	r3,r3,16
 8007f10:	10800044 	addi	r2,r2,1
 8007f14:	45000015 	stw	r20,0(r8)
 8007f18:	45400115 	stw	r21,4(r8)
 8007f1c:	d8c02015 	stw	r3,128(sp)
 8007f20:	d8801f15 	stw	r2,124(sp)
 8007f24:	90bff60e 	bge	r18,r2,8007f00 <__alt_data_end+0xfc007f00>
 8007f28:	8009883a 	mov	r4,r16
 8007f2c:	b00b883a 	mov	r5,r22
 8007f30:	b80d883a 	mov	r6,r23
 8007f34:	800fbe40 	call	800fbe4 <__ssprint_r>
 8007f38:	103ccf1e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8007f3c:	8c7ffc04 	addi	r17,r17,-16
 8007f40:	d8c02017 	ldw	r3,128(sp)
 8007f44:	d8801f17 	ldw	r2,124(sp)
 8007f48:	da000404 	addi	r8,sp,16
 8007f4c:	ac7fef16 	blt	r21,r17,8007f0c <__alt_data_end+0xfc007f0c>
 8007f50:	dc002c17 	ldw	r16,176(sp)
 8007f54:	8809883a 	mov	r4,r17
 8007f58:	9823883a 	mov	r17,r19
 8007f5c:	2027883a 	mov	r19,r4
 8007f60:	d9002b17 	ldw	r4,172(sp)
 8007f64:	1cc7883a 	add	r3,r3,r19
 8007f68:	10800044 	addi	r2,r2,1
 8007f6c:	41000015 	stw	r4,0(r8)
 8007f70:	44c00115 	stw	r19,4(r8)
 8007f74:	d8c02015 	stw	r3,128(sp)
 8007f78:	d8801f15 	stw	r2,124(sp)
 8007f7c:	010001c4 	movi	r4,7
 8007f80:	20816b16 	blt	r4,r2,8008530 <___svfprintf_internal_r+0x15dc>
 8007f84:	42000204 	addi	r8,r8,8
 8007f88:	003d9b06 	br	80075f8 <__alt_data_end+0xfc0075f8>
 8007f8c:	d9403b17 	ldw	r5,236(sp)
 8007f90:	b807883a 	mov	r3,r23
 8007f94:	908003cc 	andi	r2,r18,15
 8007f98:	a808973a 	slli	r4,r21,28
 8007f9c:	2885883a 	add	r2,r5,r2
 8007fa0:	9024d13a 	srli	r18,r18,4
 8007fa4:	10800003 	ldbu	r2,0(r2)
 8007fa8:	a82ad13a 	srli	r21,r21,4
 8007fac:	18ffffc4 	addi	r3,r3,-1
 8007fb0:	24a4b03a 	or	r18,r4,r18
 8007fb4:	18800005 	stb	r2,0(r3)
 8007fb8:	9544b03a 	or	r2,r18,r21
 8007fbc:	103ff51e 	bne	r2,zero,8007f94 <__alt_data_end+0xfc007f94>
 8007fc0:	d8c03115 	stw	r3,196(sp)
 8007fc4:	b8e3c83a 	sub	r17,r23,r3
 8007fc8:	003d2006 	br	800744c <__alt_data_end+0xfc00744c>
 8007fcc:	d9403317 	ldw	r5,204(sp)
 8007fd0:	00800044 	movi	r2,1
 8007fd4:	18c00044 	addi	r3,r3,1
 8007fd8:	1141360e 	bge	r2,r5,80084b4 <___svfprintf_internal_r+0x1560>
 8007fdc:	dc001f17 	ldw	r16,124(sp)
 8007fe0:	d8803117 	ldw	r2,196(sp)
 8007fe4:	d8c02015 	stw	r3,128(sp)
 8007fe8:	84000044 	addi	r16,r16,1
 8007fec:	40800015 	stw	r2,0(r8)
 8007ff0:	00800044 	movi	r2,1
 8007ff4:	40800115 	stw	r2,4(r8)
 8007ff8:	dc001f15 	stw	r16,124(sp)
 8007ffc:	008001c4 	movi	r2,7
 8008000:	14013916 	blt	r2,r16,80084e8 <___svfprintf_internal_r+0x1594>
 8008004:	42000204 	addi	r8,r8,8
 8008008:	d9003917 	ldw	r4,228(sp)
 800800c:	d9403517 	ldw	r5,212(sp)
 8008010:	84000044 	addi	r16,r16,1
 8008014:	1907883a 	add	r3,r3,r4
 8008018:	41400015 	stw	r5,0(r8)
 800801c:	41000115 	stw	r4,4(r8)
 8008020:	d8c02015 	stw	r3,128(sp)
 8008024:	dc001f15 	stw	r16,124(sp)
 8008028:	008001c4 	movi	r2,7
 800802c:	14013716 	blt	r2,r16,800850c <___svfprintf_internal_r+0x15b8>
 8008030:	44400204 	addi	r17,r8,8
 8008034:	d9003717 	ldw	r4,220(sp)
 8008038:	d9403817 	ldw	r5,224(sp)
 800803c:	000d883a 	mov	r6,zero
 8008040:	000f883a 	mov	r7,zero
 8008044:	d8c03e15 	stw	r3,248(sp)
 8008048:	80144280 	call	8014428 <__eqdf2>
 800804c:	d8c03e17 	ldw	r3,248(sp)
 8008050:	10009926 	beq	r2,zero,80082b8 <___svfprintf_internal_r+0x1364>
 8008054:	d9003317 	ldw	r4,204(sp)
 8008058:	d9403117 	ldw	r5,196(sp)
 800805c:	84000044 	addi	r16,r16,1
 8008060:	20bfffc4 	addi	r2,r4,-1
 8008064:	1887883a 	add	r3,r3,r2
 8008068:	29000044 	addi	r4,r5,1
 800806c:	88800115 	stw	r2,4(r17)
 8008070:	89000015 	stw	r4,0(r17)
 8008074:	d8c02015 	stw	r3,128(sp)
 8008078:	dc001f15 	stw	r16,124(sp)
 800807c:	008001c4 	movi	r2,7
 8008080:	1400b716 	blt	r2,r16,8008360 <___svfprintf_internal_r+0x140c>
 8008084:	8c400204 	addi	r17,r17,8
 8008088:	d9403a17 	ldw	r5,232(sp)
 800808c:	dcc022c4 	addi	r19,sp,139
 8008090:	84000044 	addi	r16,r16,1
 8008094:	28c7883a 	add	r3,r5,r3
 8008098:	8cc00015 	stw	r19,0(r17)
 800809c:	89400115 	stw	r5,4(r17)
 80080a0:	d8c02015 	stw	r3,128(sp)
 80080a4:	dc001f15 	stw	r16,124(sp)
 80080a8:	008001c4 	movi	r2,7
 80080ac:	14000e16 	blt	r2,r16,80080e8 <___svfprintf_internal_r+0x1194>
 80080b0:	8a000204 	addi	r8,r17,8
 80080b4:	003d8f06 	br	80076f4 <__alt_data_end+0xfc0076f4>
 80080b8:	010200b4 	movhi	r4,2050
 80080bc:	2109f984 	addi	r4,r4,10214
 80080c0:	d9002b15 	stw	r4,172(sp)
 80080c4:	d9002b17 	ldw	r4,172(sp)
 80080c8:	1c07883a 	add	r3,r3,r16
 80080cc:	44000115 	stw	r16,4(r8)
 80080d0:	41000015 	stw	r4,0(r8)
 80080d4:	10800044 	addi	r2,r2,1
 80080d8:	d8c02015 	stw	r3,128(sp)
 80080dc:	d8801f15 	stw	r2,124(sp)
 80080e0:	010001c4 	movi	r4,7
 80080e4:	20bd820e 	bge	r4,r2,80076f0 <__alt_data_end+0xfc0076f0>
 80080e8:	d9002f17 	ldw	r4,188(sp)
 80080ec:	b00b883a 	mov	r5,r22
 80080f0:	b80d883a 	mov	r6,r23
 80080f4:	800fbe40 	call	800fbe4 <__ssprint_r>
 80080f8:	103c5f1e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 80080fc:	d8c02017 	ldw	r3,128(sp)
 8008100:	da000404 	addi	r8,sp,16
 8008104:	003d7b06 	br	80076f4 <__alt_data_end+0xfc0076f4>
 8008108:	d9002f17 	ldw	r4,188(sp)
 800810c:	b00b883a 	mov	r5,r22
 8008110:	b80d883a 	mov	r6,r23
 8008114:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008118:	103db226 	beq	r2,zero,80077e4 <__alt_data_end+0xfc0077e4>
 800811c:	003c5606 	br	8007278 <__alt_data_end+0xfc007278>
 8008120:	10803fcc 	andi	r2,r2,255
 8008124:	1000201e 	bne	r2,zero,80081a8 <___svfprintf_internal_r+0x1254>
 8008128:	e080004c 	andi	r2,fp,1
 800812c:	10001e26 	beq	r2,zero,80081a8 <___svfprintf_internal_r+0x1254>
 8008130:	00800c04 	movi	r2,48
 8008134:	d8c01dc4 	addi	r3,sp,119
 8008138:	d8801dc5 	stb	r2,119(sp)
 800813c:	dc403d17 	ldw	r17,244(sp)
 8008140:	d8c03115 	stw	r3,196(sp)
 8008144:	003cc106 	br	800744c <__alt_data_end+0xfc00744c>
 8008148:	d9002f17 	ldw	r4,188(sp)
 800814c:	b00b883a 	mov	r5,r22
 8008150:	b80d883a 	mov	r6,r23
 8008154:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008158:	103c471e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 800815c:	d8c02017 	ldw	r3,128(sp)
 8008160:	da000404 	addi	r8,sp,16
 8008164:	003d5606 	br	80076c0 <__alt_data_end+0xfc0076c0>
 8008168:	d9002f17 	ldw	r4,188(sp)
 800816c:	b00b883a 	mov	r5,r22
 8008170:	b80d883a 	mov	r6,r23
 8008174:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008178:	103c3f1e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 800817c:	d8c02017 	ldw	r3,128(sp)
 8008180:	da000404 	addi	r8,sp,16
 8008184:	003d0b06 	br	80075b4 <__alt_data_end+0xfc0075b4>
 8008188:	d9002f17 	ldw	r4,188(sp)
 800818c:	b00b883a 	mov	r5,r22
 8008190:	b80d883a 	mov	r6,r23
 8008194:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008198:	103c371e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 800819c:	d8c02017 	ldw	r3,128(sp)
 80081a0:	da000404 	addi	r8,sp,16
 80081a4:	003d1106 	br	80075ec <__alt_data_end+0xfc0075ec>
 80081a8:	0023883a 	mov	r17,zero
 80081ac:	ddc03115 	stw	r23,196(sp)
 80081b0:	003ca606 	br	800744c <__alt_data_end+0xfc00744c>
 80081b4:	dc002617 	ldw	r16,152(sp)
 80081b8:	0401470e 	bge	zero,r16,80086d8 <___svfprintf_internal_r+0x1784>
 80081bc:	d8803317 	ldw	r2,204(sp)
 80081c0:	d9403117 	ldw	r5,196(sp)
 80081c4:	d9003417 	ldw	r4,208(sp)
 80081c8:	1023883a 	mov	r17,r2
 80081cc:	28a1883a 	add	r16,r5,r2
 80081d0:	2080010e 	bge	r4,r2,80081d8 <___svfprintf_internal_r+0x1284>
 80081d4:	2023883a 	mov	r17,r4
 80081d8:	04400b0e 	bge	zero,r17,8008208 <___svfprintf_internal_r+0x12b4>
 80081dc:	d8801f17 	ldw	r2,124(sp)
 80081e0:	d9403117 	ldw	r5,196(sp)
 80081e4:	1c47883a 	add	r3,r3,r17
 80081e8:	10800044 	addi	r2,r2,1
 80081ec:	41400015 	stw	r5,0(r8)
 80081f0:	44400115 	stw	r17,4(r8)
 80081f4:	d8c02015 	stw	r3,128(sp)
 80081f8:	d8801f15 	stw	r2,124(sp)
 80081fc:	010001c4 	movi	r4,7
 8008200:	20825f16 	blt	r4,r2,8008b80 <___svfprintf_internal_r+0x1c2c>
 8008204:	42000204 	addi	r8,r8,8
 8008208:	88025b16 	blt	r17,zero,8008b78 <___svfprintf_internal_r+0x1c24>
 800820c:	d8803417 	ldw	r2,208(sp)
 8008210:	1463c83a 	sub	r17,r2,r17
 8008214:	0440620e 	bge	zero,r17,80083a0 <___svfprintf_internal_r+0x144c>
 8008218:	04c00404 	movi	r19,16
 800821c:	d8801f17 	ldw	r2,124(sp)
 8008220:	9c41130e 	bge	r19,r17,8008670 <___svfprintf_internal_r+0x171c>
 8008224:	014200b4 	movhi	r5,2050
 8008228:	2949f984 	addi	r5,r5,10214
 800822c:	d9402b15 	stw	r5,172(sp)
 8008230:	054001c4 	movi	r21,7
 8008234:	dc802f17 	ldw	r18,188(sp)
 8008238:	00000306 	br	8008248 <___svfprintf_internal_r+0x12f4>
 800823c:	42000204 	addi	r8,r8,8
 8008240:	8c7ffc04 	addi	r17,r17,-16
 8008244:	9c410d0e 	bge	r19,r17,800867c <___svfprintf_internal_r+0x1728>
 8008248:	18c00404 	addi	r3,r3,16
 800824c:	10800044 	addi	r2,r2,1
 8008250:	45000015 	stw	r20,0(r8)
 8008254:	44c00115 	stw	r19,4(r8)
 8008258:	d8c02015 	stw	r3,128(sp)
 800825c:	d8801f15 	stw	r2,124(sp)
 8008260:	a8bff60e 	bge	r21,r2,800823c <__alt_data_end+0xfc00823c>
 8008264:	9009883a 	mov	r4,r18
 8008268:	b00b883a 	mov	r5,r22
 800826c:	b80d883a 	mov	r6,r23
 8008270:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008274:	103c001e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008278:	d8c02017 	ldw	r3,128(sp)
 800827c:	d8801f17 	ldw	r2,124(sp)
 8008280:	da000404 	addi	r8,sp,16
 8008284:	003fee06 	br	8008240 <__alt_data_end+0xfc008240>
 8008288:	d9002f17 	ldw	r4,188(sp)
 800828c:	b00b883a 	mov	r5,r22
 8008290:	b80d883a 	mov	r6,r23
 8008294:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008298:	103bf71e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 800829c:	d8c02017 	ldw	r3,128(sp)
 80082a0:	d8802787 	ldb	r2,158(sp)
 80082a4:	da000404 	addi	r8,sp,16
 80082a8:	003cb506 	br	8007580 <__alt_data_end+0xfc007580>
 80082ac:	00800084 	movi	r2,2
 80082b0:	9546b03a 	or	r3,r18,r21
 80082b4:	003d8c06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 80082b8:	d8803317 	ldw	r2,204(sp)
 80082bc:	14ffffc4 	addi	r19,r2,-1
 80082c0:	04ff710e 	bge	zero,r19,8008088 <__alt_data_end+0xfc008088>
 80082c4:	05400404 	movi	r21,16
 80082c8:	acc2f80e 	bge	r21,r19,8008eac <___svfprintf_internal_r+0x1f58>
 80082cc:	014200b4 	movhi	r5,2050
 80082d0:	2949f984 	addi	r5,r5,10214
 80082d4:	d9402b15 	stw	r5,172(sp)
 80082d8:	01c001c4 	movi	r7,7
 80082dc:	dc802f17 	ldw	r18,188(sp)
 80082e0:	00000306 	br	80082f0 <___svfprintf_internal_r+0x139c>
 80082e4:	9cfffc04 	addi	r19,r19,-16
 80082e8:	8c400204 	addi	r17,r17,8
 80082ec:	acc0130e 	bge	r21,r19,800833c <___svfprintf_internal_r+0x13e8>
 80082f0:	18c00404 	addi	r3,r3,16
 80082f4:	84000044 	addi	r16,r16,1
 80082f8:	8d000015 	stw	r20,0(r17)
 80082fc:	8d400115 	stw	r21,4(r17)
 8008300:	d8c02015 	stw	r3,128(sp)
 8008304:	dc001f15 	stw	r16,124(sp)
 8008308:	3c3ff60e 	bge	r7,r16,80082e4 <__alt_data_end+0xfc0082e4>
 800830c:	9009883a 	mov	r4,r18
 8008310:	b00b883a 	mov	r5,r22
 8008314:	b80d883a 	mov	r6,r23
 8008318:	d9c03e15 	stw	r7,248(sp)
 800831c:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008320:	d9c03e17 	ldw	r7,248(sp)
 8008324:	103bd41e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008328:	9cfffc04 	addi	r19,r19,-16
 800832c:	d8c02017 	ldw	r3,128(sp)
 8008330:	dc001f17 	ldw	r16,124(sp)
 8008334:	dc400404 	addi	r17,sp,16
 8008338:	acffed16 	blt	r21,r19,80082f0 <__alt_data_end+0xfc0082f0>
 800833c:	d8802b17 	ldw	r2,172(sp)
 8008340:	1cc7883a 	add	r3,r3,r19
 8008344:	84000044 	addi	r16,r16,1
 8008348:	88800015 	stw	r2,0(r17)
 800834c:	8cc00115 	stw	r19,4(r17)
 8008350:	d8c02015 	stw	r3,128(sp)
 8008354:	dc001f15 	stw	r16,124(sp)
 8008358:	008001c4 	movi	r2,7
 800835c:	143f490e 	bge	r2,r16,8008084 <__alt_data_end+0xfc008084>
 8008360:	d9002f17 	ldw	r4,188(sp)
 8008364:	b00b883a 	mov	r5,r22
 8008368:	b80d883a 	mov	r6,r23
 800836c:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008370:	103bc11e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008374:	d8c02017 	ldw	r3,128(sp)
 8008378:	dc001f17 	ldw	r16,124(sp)
 800837c:	dc400404 	addi	r17,sp,16
 8008380:	003f4106 	br	8008088 <__alt_data_end+0xfc008088>
 8008384:	d9002f17 	ldw	r4,188(sp)
 8008388:	b00b883a 	mov	r5,r22
 800838c:	b80d883a 	mov	r6,r23
 8008390:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008394:	103bb81e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008398:	d8c02017 	ldw	r3,128(sp)
 800839c:	da000404 	addi	r8,sp,16
 80083a0:	d9403117 	ldw	r5,196(sp)
 80083a4:	d9003417 	ldw	r4,208(sp)
 80083a8:	d8802617 	ldw	r2,152(sp)
 80083ac:	2923883a 	add	r17,r5,r4
 80083b0:	d9403317 	ldw	r5,204(sp)
 80083b4:	11400216 	blt	r2,r5,80083c0 <___svfprintf_internal_r+0x146c>
 80083b8:	e100004c 	andi	r4,fp,1
 80083bc:	20000d26 	beq	r4,zero,80083f4 <___svfprintf_internal_r+0x14a0>
 80083c0:	d9003917 	ldw	r4,228(sp)
 80083c4:	d9403517 	ldw	r5,212(sp)
 80083c8:	1907883a 	add	r3,r3,r4
 80083cc:	d9001f17 	ldw	r4,124(sp)
 80083d0:	41400015 	stw	r5,0(r8)
 80083d4:	d9403917 	ldw	r5,228(sp)
 80083d8:	21000044 	addi	r4,r4,1
 80083dc:	d8c02015 	stw	r3,128(sp)
 80083e0:	41400115 	stw	r5,4(r8)
 80083e4:	d9001f15 	stw	r4,124(sp)
 80083e8:	014001c4 	movi	r5,7
 80083ec:	2901ec16 	blt	r5,r4,8008ba0 <___svfprintf_internal_r+0x1c4c>
 80083f0:	42000204 	addi	r8,r8,8
 80083f4:	d9003317 	ldw	r4,204(sp)
 80083f8:	2085c83a 	sub	r2,r4,r2
 80083fc:	8449c83a 	sub	r4,r16,r17
 8008400:	1021883a 	mov	r16,r2
 8008404:	2080010e 	bge	r4,r2,800840c <___svfprintf_internal_r+0x14b8>
 8008408:	2021883a 	mov	r16,r4
 800840c:	04000a0e 	bge	zero,r16,8008438 <___svfprintf_internal_r+0x14e4>
 8008410:	d9001f17 	ldw	r4,124(sp)
 8008414:	1c07883a 	add	r3,r3,r16
 8008418:	44400015 	stw	r17,0(r8)
 800841c:	21000044 	addi	r4,r4,1
 8008420:	44000115 	stw	r16,4(r8)
 8008424:	d8c02015 	stw	r3,128(sp)
 8008428:	d9001f15 	stw	r4,124(sp)
 800842c:	014001c4 	movi	r5,7
 8008430:	2901f216 	blt	r5,r4,8008bfc <___svfprintf_internal_r+0x1ca8>
 8008434:	42000204 	addi	r8,r8,8
 8008438:	80020a16 	blt	r16,zero,8008c64 <___svfprintf_internal_r+0x1d10>
 800843c:	1421c83a 	sub	r16,r2,r16
 8008440:	043cac0e 	bge	zero,r16,80076f4 <__alt_data_end+0xfc0076f4>
 8008444:	04400404 	movi	r17,16
 8008448:	d8801f17 	ldw	r2,124(sp)
 800844c:	8c3f1a0e 	bge	r17,r16,80080b8 <__alt_data_end+0xfc0080b8>
 8008450:	014200b4 	movhi	r5,2050
 8008454:	2949f984 	addi	r5,r5,10214
 8008458:	d9402b15 	stw	r5,172(sp)
 800845c:	04c001c4 	movi	r19,7
 8008460:	dc802f17 	ldw	r18,188(sp)
 8008464:	00000306 	br	8008474 <___svfprintf_internal_r+0x1520>
 8008468:	42000204 	addi	r8,r8,8
 800846c:	843ffc04 	addi	r16,r16,-16
 8008470:	8c3f140e 	bge	r17,r16,80080c4 <__alt_data_end+0xfc0080c4>
 8008474:	18c00404 	addi	r3,r3,16
 8008478:	10800044 	addi	r2,r2,1
 800847c:	45000015 	stw	r20,0(r8)
 8008480:	44400115 	stw	r17,4(r8)
 8008484:	d8c02015 	stw	r3,128(sp)
 8008488:	d8801f15 	stw	r2,124(sp)
 800848c:	98bff60e 	bge	r19,r2,8008468 <__alt_data_end+0xfc008468>
 8008490:	9009883a 	mov	r4,r18
 8008494:	b00b883a 	mov	r5,r22
 8008498:	b80d883a 	mov	r6,r23
 800849c:	800fbe40 	call	800fbe4 <__ssprint_r>
 80084a0:	103b751e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 80084a4:	d8c02017 	ldw	r3,128(sp)
 80084a8:	d8801f17 	ldw	r2,124(sp)
 80084ac:	da000404 	addi	r8,sp,16
 80084b0:	003fee06 	br	800846c <__alt_data_end+0xfc00846c>
 80084b4:	e088703a 	and	r4,fp,r2
 80084b8:	203ec81e 	bne	r4,zero,8007fdc <__alt_data_end+0xfc007fdc>
 80084bc:	dc001f17 	ldw	r16,124(sp)
 80084c0:	d9003117 	ldw	r4,196(sp)
 80084c4:	40800115 	stw	r2,4(r8)
 80084c8:	84000044 	addi	r16,r16,1
 80084cc:	41000015 	stw	r4,0(r8)
 80084d0:	d8c02015 	stw	r3,128(sp)
 80084d4:	dc001f15 	stw	r16,124(sp)
 80084d8:	008001c4 	movi	r2,7
 80084dc:	143fa016 	blt	r2,r16,8008360 <__alt_data_end+0xfc008360>
 80084e0:	44400204 	addi	r17,r8,8
 80084e4:	003ee806 	br	8008088 <__alt_data_end+0xfc008088>
 80084e8:	d9002f17 	ldw	r4,188(sp)
 80084ec:	b00b883a 	mov	r5,r22
 80084f0:	b80d883a 	mov	r6,r23
 80084f4:	800fbe40 	call	800fbe4 <__ssprint_r>
 80084f8:	103b5f1e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 80084fc:	d8c02017 	ldw	r3,128(sp)
 8008500:	dc001f17 	ldw	r16,124(sp)
 8008504:	da000404 	addi	r8,sp,16
 8008508:	003ebf06 	br	8008008 <__alt_data_end+0xfc008008>
 800850c:	d9002f17 	ldw	r4,188(sp)
 8008510:	b00b883a 	mov	r5,r22
 8008514:	b80d883a 	mov	r6,r23
 8008518:	800fbe40 	call	800fbe4 <__ssprint_r>
 800851c:	103b561e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008520:	d8c02017 	ldw	r3,128(sp)
 8008524:	dc001f17 	ldw	r16,124(sp)
 8008528:	dc400404 	addi	r17,sp,16
 800852c:	003ec106 	br	8008034 <__alt_data_end+0xfc008034>
 8008530:	d9002f17 	ldw	r4,188(sp)
 8008534:	b00b883a 	mov	r5,r22
 8008538:	b80d883a 	mov	r6,r23
 800853c:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008540:	103b4d1e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008544:	d8c02017 	ldw	r3,128(sp)
 8008548:	da000404 	addi	r8,sp,16
 800854c:	003c2a06 	br	80075f8 <__alt_data_end+0xfc0075f8>
 8008550:	da004015 	stw	r8,256(sp)
 8008554:	da403f15 	stw	r9,252(sp)
 8008558:	800f9900 	call	800f990 <__fpclassifyd>
 800855c:	da004017 	ldw	r8,256(sp)
 8008560:	da403f17 	ldw	r9,252(sp)
 8008564:	1000a91e 	bne	r2,zero,800880c <___svfprintf_internal_r+0x18b8>
 8008568:	008011c4 	movi	r2,71
 800856c:	14011016 	blt	r2,r16,80089b0 <___svfprintf_internal_r+0x1a5c>
 8008570:	010200b4 	movhi	r4,2050
 8008574:	2109eb04 	addi	r4,r4,10156
 8008578:	d9003115 	stw	r4,196(sp)
 800857c:	00c000c4 	movi	r3,3
 8008580:	00bfdfc4 	movi	r2,-129
 8008584:	d8c02a15 	stw	r3,168(sp)
 8008588:	e0b8703a 	and	fp,fp,r2
 800858c:	dcc02783 	ldbu	r19,158(sp)
 8008590:	dc802d15 	stw	r18,180(sp)
 8008594:	1823883a 	mov	r17,r3
 8008598:	d8003215 	stw	zero,200(sp)
 800859c:	d8003415 	stw	zero,208(sp)
 80085a0:	003baf06 	br	8007460 <__alt_data_end+0xfc007460>
 80085a4:	e0c0100c 	andi	r3,fp,64
 80085a8:	18012a26 	beq	r3,zero,8008a54 <___svfprintf_internal_r+0x1b00>
 80085ac:	d9002d17 	ldw	r4,180(sp)
 80085b0:	1480000b 	ldhu	r18,0(r2)
 80085b4:	002b883a 	mov	r21,zero
 80085b8:	21000104 	addi	r4,r4,4
 80085bc:	d9002d15 	stw	r4,180(sp)
 80085c0:	003d3206 	br	8007a8c <__alt_data_end+0xfc007a8c>
 80085c4:	e080100c 	andi	r2,fp,64
 80085c8:	10011326 	beq	r2,zero,8008a18 <___svfprintf_internal_r+0x1ac4>
 80085cc:	d8c02d17 	ldw	r3,180(sp)
 80085d0:	002b883a 	mov	r21,zero
 80085d4:	0005883a 	mov	r2,zero
 80085d8:	1c80000b 	ldhu	r18,0(r3)
 80085dc:	18c00104 	addi	r3,r3,4
 80085e0:	d8c02d15 	stw	r3,180(sp)
 80085e4:	9007883a 	mov	r3,r18
 80085e8:	003cbf06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 80085ec:	e080040c 	andi	r2,fp,16
 80085f0:	10011e26 	beq	r2,zero,8008a6c <___svfprintf_internal_r+0x1b18>
 80085f4:	d9402d17 	ldw	r5,180(sp)
 80085f8:	d8c03017 	ldw	r3,192(sp)
 80085fc:	28800017 	ldw	r2,0(r5)
 8008600:	29400104 	addi	r5,r5,4
 8008604:	d9402d15 	stw	r5,180(sp)
 8008608:	10c00015 	stw	r3,0(r2)
 800860c:	003a7d06 	br	8007004 <__alt_data_end+0xfc007004>
 8008610:	e4000007 	ldb	r16,0(fp)
 8008614:	e005883a 	mov	r2,fp
 8008618:	003aa506 	br	80070b0 <__alt_data_end+0xfc0070b0>
 800861c:	e080100c 	andi	r2,fp,64
 8008620:	10010526 	beq	r2,zero,8008a38 <___svfprintf_internal_r+0x1ae4>
 8008624:	1c80000f 	ldh	r18,0(r3)
 8008628:	d8802d17 	ldw	r2,180(sp)
 800862c:	902bd7fa 	srai	r21,r18,31
 8008630:	10800104 	addi	r2,r2,4
 8008634:	d8802d15 	stw	r2,180(sp)
 8008638:	a805883a 	mov	r2,r21
 800863c:	003b5c06 	br	80073b0 <__alt_data_end+0xfc0073b0>
 8008640:	e080100c 	andi	r2,fp,64
 8008644:	1000ec26 	beq	r2,zero,80089f8 <___svfprintf_internal_r+0x1aa4>
 8008648:	d8802d17 	ldw	r2,180(sp)
 800864c:	002b883a 	mov	r21,zero
 8008650:	1480000b 	ldhu	r18,0(r2)
 8008654:	10800104 	addi	r2,r2,4
 8008658:	d8802d15 	stw	r2,180(sp)
 800865c:	9007883a 	mov	r3,r18
 8008660:	00800044 	movi	r2,1
 8008664:	003ca006 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8008668:	00800084 	movi	r2,2
 800866c:	003c9e06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8008670:	010200b4 	movhi	r4,2050
 8008674:	2109f984 	addi	r4,r4,10214
 8008678:	d9002b15 	stw	r4,172(sp)
 800867c:	d9002b17 	ldw	r4,172(sp)
 8008680:	1c47883a 	add	r3,r3,r17
 8008684:	10800044 	addi	r2,r2,1
 8008688:	41000015 	stw	r4,0(r8)
 800868c:	44400115 	stw	r17,4(r8)
 8008690:	d8c02015 	stw	r3,128(sp)
 8008694:	d8801f15 	stw	r2,124(sp)
 8008698:	010001c4 	movi	r4,7
 800869c:	20bf3916 	blt	r4,r2,8008384 <__alt_data_end+0xfc008384>
 80086a0:	42000204 	addi	r8,r8,8
 80086a4:	003f3e06 	br	80083a0 <__alt_data_end+0xfc0083a0>
 80086a8:	010200b4 	movhi	r4,2050
 80086ac:	2109f984 	addi	r4,r4,10214
 80086b0:	d9002b15 	stw	r4,172(sp)
 80086b4:	003bf806 	br	8007698 <__alt_data_end+0xfc007698>
 80086b8:	d9002f17 	ldw	r4,188(sp)
 80086bc:	b00b883a 	mov	r5,r22
 80086c0:	b80d883a 	mov	r6,r23
 80086c4:	800fbe40 	call	800fbe4 <__ssprint_r>
 80086c8:	103aeb1e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 80086cc:	d8c02017 	ldw	r3,128(sp)
 80086d0:	da000404 	addi	r8,sp,16
 80086d4:	003dc806 	br	8007df8 <__alt_data_end+0xfc007df8>
 80086d8:	d8801f17 	ldw	r2,124(sp)
 80086dc:	014200b4 	movhi	r5,2050
 80086e0:	01000044 	movi	r4,1
 80086e4:	18c00044 	addi	r3,r3,1
 80086e8:	10800044 	addi	r2,r2,1
 80086ec:	2949f904 	addi	r5,r5,10212
 80086f0:	41000115 	stw	r4,4(r8)
 80086f4:	41400015 	stw	r5,0(r8)
 80086f8:	d8c02015 	stw	r3,128(sp)
 80086fc:	d8801f15 	stw	r2,124(sp)
 8008700:	010001c4 	movi	r4,7
 8008704:	2080ae16 	blt	r4,r2,80089c0 <___svfprintf_internal_r+0x1a6c>
 8008708:	42000204 	addi	r8,r8,8
 800870c:	8000041e 	bne	r16,zero,8008720 <___svfprintf_internal_r+0x17cc>
 8008710:	d8803317 	ldw	r2,204(sp)
 8008714:	1000021e 	bne	r2,zero,8008720 <___svfprintf_internal_r+0x17cc>
 8008718:	e080004c 	andi	r2,fp,1
 800871c:	103bf526 	beq	r2,zero,80076f4 <__alt_data_end+0xfc0076f4>
 8008720:	d9003917 	ldw	r4,228(sp)
 8008724:	d8801f17 	ldw	r2,124(sp)
 8008728:	d9403517 	ldw	r5,212(sp)
 800872c:	1907883a 	add	r3,r3,r4
 8008730:	10800044 	addi	r2,r2,1
 8008734:	41000115 	stw	r4,4(r8)
 8008738:	41400015 	stw	r5,0(r8)
 800873c:	d8c02015 	stw	r3,128(sp)
 8008740:	d8801f15 	stw	r2,124(sp)
 8008744:	010001c4 	movi	r4,7
 8008748:	2081ac16 	blt	r4,r2,8008dfc <___svfprintf_internal_r+0x1ea8>
 800874c:	42000204 	addi	r8,r8,8
 8008750:	0421c83a 	sub	r16,zero,r16
 8008754:	0400d60e 	bge	zero,r16,8008ab0 <___svfprintf_internal_r+0x1b5c>
 8008758:	04400404 	movi	r17,16
 800875c:	8c01190e 	bge	r17,r16,8008bc4 <___svfprintf_internal_r+0x1c70>
 8008760:	014200b4 	movhi	r5,2050
 8008764:	2949f984 	addi	r5,r5,10214
 8008768:	d9402b15 	stw	r5,172(sp)
 800876c:	04c001c4 	movi	r19,7
 8008770:	dc802f17 	ldw	r18,188(sp)
 8008774:	00000306 	br	8008784 <___svfprintf_internal_r+0x1830>
 8008778:	42000204 	addi	r8,r8,8
 800877c:	843ffc04 	addi	r16,r16,-16
 8008780:	8c01130e 	bge	r17,r16,8008bd0 <___svfprintf_internal_r+0x1c7c>
 8008784:	18c00404 	addi	r3,r3,16
 8008788:	10800044 	addi	r2,r2,1
 800878c:	45000015 	stw	r20,0(r8)
 8008790:	44400115 	stw	r17,4(r8)
 8008794:	d8c02015 	stw	r3,128(sp)
 8008798:	d8801f15 	stw	r2,124(sp)
 800879c:	98bff60e 	bge	r19,r2,8008778 <__alt_data_end+0xfc008778>
 80087a0:	9009883a 	mov	r4,r18
 80087a4:	b00b883a 	mov	r5,r22
 80087a8:	b80d883a 	mov	r6,r23
 80087ac:	800fbe40 	call	800fbe4 <__ssprint_r>
 80087b0:	103ab11e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 80087b4:	d8c02017 	ldw	r3,128(sp)
 80087b8:	d8801f17 	ldw	r2,124(sp)
 80087bc:	da000404 	addi	r8,sp,16
 80087c0:	003fee06 	br	800877c <__alt_data_end+0xfc00877c>
 80087c4:	d8802e17 	ldw	r2,184(sp)
 80087c8:	d8c02d15 	stw	r3,180(sp)
 80087cc:	0085c83a 	sub	r2,zero,r2
 80087d0:	d8802e15 	stw	r2,184(sp)
 80087d4:	e005883a 	mov	r2,fp
 80087d8:	003aba06 	br	80072c4 <__alt_data_end+0xfc0072c4>
 80087dc:	e0800044 	addi	r2,fp,1
 80087e0:	9cc00814 	ori	r19,r19,32
 80087e4:	e4000047 	ldb	r16,1(fp)
 80087e8:	003a3106 	br	80070b0 <__alt_data_end+0xfc0070b0>
 80087ec:	d9002f17 	ldw	r4,188(sp)
 80087f0:	b00b883a 	mov	r5,r22
 80087f4:	b80d883a 	mov	r6,r23
 80087f8:	800fbe40 	call	800fbe4 <__ssprint_r>
 80087fc:	103a9e1e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008800:	d8c02017 	ldw	r3,128(sp)
 8008804:	da000404 	addi	r8,sp,16
 8008808:	003d8d06 	br	8007e40 <__alt_data_end+0xfc007e40>
 800880c:	04fff7c4 	movi	r19,-33
 8008810:	00bfffc4 	movi	r2,-1
 8008814:	84e6703a 	and	r19,r16,r19
 8008818:	48807226 	beq	r9,r2,80089e4 <___svfprintf_internal_r+0x1a90>
 800881c:	008011c4 	movi	r2,71
 8008820:	98818026 	beq	r19,r2,8008e24 <___svfprintf_internal_r+0x1ed0>
 8008824:	d9003817 	ldw	r4,224(sp)
 8008828:	e0c04014 	ori	r3,fp,256
 800882c:	d8c02d15 	stw	r3,180(sp)
 8008830:	20017f16 	blt	r4,zero,8008e30 <___svfprintf_internal_r+0x1edc>
 8008834:	dc403817 	ldw	r17,224(sp)
 8008838:	d8002a05 	stb	zero,168(sp)
 800883c:	00801984 	movi	r2,102
 8008840:	8080ad26 	beq	r16,r2,8008af8 <___svfprintf_internal_r+0x1ba4>
 8008844:	00801184 	movi	r2,70
 8008848:	8080ab26 	beq	r16,r2,8008af8 <___svfprintf_internal_r+0x1ba4>
 800884c:	00801144 	movi	r2,69
 8008850:	98818426 	beq	r19,r2,8008e64 <___svfprintf_internal_r+0x1f10>
 8008854:	482b883a 	mov	r21,r9
 8008858:	d8802604 	addi	r2,sp,152
 800885c:	d8800115 	stw	r2,4(sp)
 8008860:	d9002f17 	ldw	r4,188(sp)
 8008864:	d8802504 	addi	r2,sp,148
 8008868:	d9403717 	ldw	r5,220(sp)
 800886c:	d8800215 	stw	r2,8(sp)
 8008870:	d8802104 	addi	r2,sp,132
 8008874:	dd400015 	stw	r21,0(sp)
 8008878:	d8800315 	stw	r2,12(sp)
 800887c:	880d883a 	mov	r6,r17
 8008880:	01c00084 	movi	r7,2
 8008884:	da004015 	stw	r8,256(sp)
 8008888:	da403f15 	stw	r9,252(sp)
 800888c:	800b48c0 	call	800b48c <_dtoa_r>
 8008890:	d8803115 	stw	r2,196(sp)
 8008894:	008019c4 	movi	r2,103
 8008898:	da004017 	ldw	r8,256(sp)
 800889c:	da403f17 	ldw	r9,252(sp)
 80088a0:	80800226 	beq	r16,r2,80088ac <___svfprintf_internal_r+0x1958>
 80088a4:	008011c4 	movi	r2,71
 80088a8:	8080a51e 	bne	r16,r2,8008b40 <___svfprintf_internal_r+0x1bec>
 80088ac:	e080004c 	andi	r2,fp,1
 80088b0:	10017226 	beq	r2,zero,8008e7c <___svfprintf_internal_r+0x1f28>
 80088b4:	d8c03117 	ldw	r3,196(sp)
 80088b8:	1d55883a 	add	r10,r3,r21
 80088bc:	d9003717 	ldw	r4,220(sp)
 80088c0:	880b883a 	mov	r5,r17
 80088c4:	000d883a 	mov	r6,zero
 80088c8:	000f883a 	mov	r7,zero
 80088cc:	da004015 	stw	r8,256(sp)
 80088d0:	da403f15 	stw	r9,252(sp)
 80088d4:	da803e15 	stw	r10,248(sp)
 80088d8:	80144280 	call	8014428 <__eqdf2>
 80088dc:	da004017 	ldw	r8,256(sp)
 80088e0:	da403f17 	ldw	r9,252(sp)
 80088e4:	da803e17 	ldw	r10,248(sp)
 80088e8:	1000fd26 	beq	r2,zero,8008ce0 <___svfprintf_internal_r+0x1d8c>
 80088ec:	d8802117 	ldw	r2,132(sp)
 80088f0:	1280062e 	bgeu	r2,r10,800890c <___svfprintf_internal_r+0x19b8>
 80088f4:	01000c04 	movi	r4,48
 80088f8:	10c00044 	addi	r3,r2,1
 80088fc:	d8c02115 	stw	r3,132(sp)
 8008900:	11000005 	stb	r4,0(r2)
 8008904:	d8802117 	ldw	r2,132(sp)
 8008908:	12bffb36 	bltu	r2,r10,80088f8 <__alt_data_end+0xfc0088f8>
 800890c:	d8c03117 	ldw	r3,196(sp)
 8008910:	10c5c83a 	sub	r2,r2,r3
 8008914:	d8803315 	stw	r2,204(sp)
 8008918:	008011c4 	movi	r2,71
 800891c:	9880e226 	beq	r19,r2,8008ca8 <___svfprintf_internal_r+0x1d54>
 8008920:	00801944 	movi	r2,101
 8008924:	1401a30e 	bge	r2,r16,8008fb4 <___svfprintf_internal_r+0x2060>
 8008928:	d8c02617 	ldw	r3,152(sp)
 800892c:	00801984 	movi	r2,102
 8008930:	d8c03415 	stw	r3,208(sp)
 8008934:	80815326 	beq	r16,r2,8008e84 <___svfprintf_internal_r+0x1f30>
 8008938:	d8c03417 	ldw	r3,208(sp)
 800893c:	d9003317 	ldw	r4,204(sp)
 8008940:	19013f16 	blt	r3,r4,8008e40 <___svfprintf_internal_r+0x1eec>
 8008944:	e080004c 	andi	r2,fp,1
 8008948:	10014826 	beq	r2,zero,8008e6c <___svfprintf_internal_r+0x1f18>
 800894c:	d8c03417 	ldw	r3,208(sp)
 8008950:	1c400044 	addi	r17,r3,1
 8008954:	8839883a 	mov	fp,r17
 8008958:	88014016 	blt	r17,zero,8008e5c <___svfprintf_internal_r+0x1f08>
 800895c:	dd402a07 	ldb	r21,168(sp)
 8008960:	a800c61e 	bne	r21,zero,8008c7c <___svfprintf_internal_r+0x1d28>
 8008964:	df002a15 	stw	fp,168(sp)
 8008968:	dcc02783 	ldbu	r19,158(sp)
 800896c:	df002d17 	ldw	fp,180(sp)
 8008970:	d8003215 	stw	zero,200(sp)
 8008974:	dc802d15 	stw	r18,180(sp)
 8008978:	003ab906 	br	8007460 <__alt_data_end+0xfc007460>
 800897c:	010200b4 	movhi	r4,2050
 8008980:	2109e904 	addi	r4,r4,10148
 8008984:	d9003115 	stw	r4,196(sp)
 8008988:	003bbe06 	br	8007884 <__alt_data_end+0xfc007884>
 800898c:	d9002f17 	ldw	r4,188(sp)
 8008990:	04001004 	movi	r16,64
 8008994:	800b883a 	mov	r5,r16
 8008998:	8005e100 	call	8005e10 <_malloc_r>
 800899c:	b0800015 	stw	r2,0(r22)
 80089a0:	b0800415 	stw	r2,16(r22)
 80089a4:	10017c26 	beq	r2,zero,8008f98 <___svfprintf_internal_r+0x2044>
 80089a8:	b4000515 	stw	r16,20(r22)
 80089ac:	00398306 	br	8006fbc <__alt_data_end+0xfc006fbc>
 80089b0:	014200b4 	movhi	r5,2050
 80089b4:	2949ec04 	addi	r5,r5,10160
 80089b8:	d9403115 	stw	r5,196(sp)
 80089bc:	003eef06 	br	800857c <__alt_data_end+0xfc00857c>
 80089c0:	d9002f17 	ldw	r4,188(sp)
 80089c4:	b00b883a 	mov	r5,r22
 80089c8:	b80d883a 	mov	r6,r23
 80089cc:	800fbe40 	call	800fbe4 <__ssprint_r>
 80089d0:	103a291e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 80089d4:	dc002617 	ldw	r16,152(sp)
 80089d8:	d8c02017 	ldw	r3,128(sp)
 80089dc:	da000404 	addi	r8,sp,16
 80089e0:	003f4a06 	br	800870c <__alt_data_end+0xfc00870c>
 80089e4:	02400184 	movi	r9,6
 80089e8:	003f8e06 	br	8008824 <__alt_data_end+0xfc008824>
 80089ec:	d8c03117 	ldw	r3,196(sp)
 80089f0:	b8e3c83a 	sub	r17,r23,r3
 80089f4:	003a9506 	br	800744c <__alt_data_end+0xfc00744c>
 80089f8:	d8c02d17 	ldw	r3,180(sp)
 80089fc:	002b883a 	mov	r21,zero
 8008a00:	00800044 	movi	r2,1
 8008a04:	1c800017 	ldw	r18,0(r3)
 8008a08:	18c00104 	addi	r3,r3,4
 8008a0c:	d8c02d15 	stw	r3,180(sp)
 8008a10:	9007883a 	mov	r3,r18
 8008a14:	003bb406 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8008a18:	d9002d17 	ldw	r4,180(sp)
 8008a1c:	002b883a 	mov	r21,zero
 8008a20:	0005883a 	mov	r2,zero
 8008a24:	24800017 	ldw	r18,0(r4)
 8008a28:	21000104 	addi	r4,r4,4
 8008a2c:	d9002d15 	stw	r4,180(sp)
 8008a30:	9007883a 	mov	r3,r18
 8008a34:	003bac06 	br	80078e8 <__alt_data_end+0xfc0078e8>
 8008a38:	1c800017 	ldw	r18,0(r3)
 8008a3c:	d8c02d17 	ldw	r3,180(sp)
 8008a40:	902bd7fa 	srai	r21,r18,31
 8008a44:	18c00104 	addi	r3,r3,4
 8008a48:	d8c02d15 	stw	r3,180(sp)
 8008a4c:	a805883a 	mov	r2,r21
 8008a50:	003a5706 	br	80073b0 <__alt_data_end+0xfc0073b0>
 8008a54:	d9402d17 	ldw	r5,180(sp)
 8008a58:	14800017 	ldw	r18,0(r2)
 8008a5c:	002b883a 	mov	r21,zero
 8008a60:	29400104 	addi	r5,r5,4
 8008a64:	d9402d15 	stw	r5,180(sp)
 8008a68:	003c0806 	br	8007a8c <__alt_data_end+0xfc007a8c>
 8008a6c:	e080100c 	andi	r2,fp,64
 8008a70:	10009426 	beq	r2,zero,8008cc4 <___svfprintf_internal_r+0x1d70>
 8008a74:	d9002d17 	ldw	r4,180(sp)
 8008a78:	d9403017 	ldw	r5,192(sp)
 8008a7c:	20800017 	ldw	r2,0(r4)
 8008a80:	21000104 	addi	r4,r4,4
 8008a84:	d9002d15 	stw	r4,180(sp)
 8008a88:	1140000d 	sth	r5,0(r2)
 8008a8c:	00395d06 	br	8007004 <__alt_data_end+0xfc007004>
 8008a90:	d9002f17 	ldw	r4,188(sp)
 8008a94:	b00b883a 	mov	r5,r22
 8008a98:	b80d883a 	mov	r6,r23
 8008a9c:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008aa0:	1039f51e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008aa4:	d8c02017 	ldw	r3,128(sp)
 8008aa8:	d8801f17 	ldw	r2,124(sp)
 8008aac:	da000404 	addi	r8,sp,16
 8008ab0:	d9403317 	ldw	r5,204(sp)
 8008ab4:	d9003117 	ldw	r4,196(sp)
 8008ab8:	10800044 	addi	r2,r2,1
 8008abc:	28c7883a 	add	r3,r5,r3
 8008ac0:	41000015 	stw	r4,0(r8)
 8008ac4:	41400115 	stw	r5,4(r8)
 8008ac8:	d8c02015 	stw	r3,128(sp)
 8008acc:	d8801f15 	stw	r2,124(sp)
 8008ad0:	010001c4 	movi	r4,7
 8008ad4:	20bb060e 	bge	r4,r2,80076f0 <__alt_data_end+0xfc0076f0>
 8008ad8:	003d8306 	br	80080e8 <__alt_data_end+0xfc0080e8>
 8008adc:	da004015 	stw	r8,256(sp)
 8008ae0:	8006e040 	call	8006e04 <strlen>
 8008ae4:	1023883a 	mov	r17,r2
 8008ae8:	da004017 	ldw	r8,256(sp)
 8008aec:	883c290e 	bge	r17,zero,8007b94 <__alt_data_end+0xfc007b94>
 8008af0:	0005883a 	mov	r2,zero
 8008af4:	003c2706 	br	8007b94 <__alt_data_end+0xfc007b94>
 8008af8:	d8802604 	addi	r2,sp,152
 8008afc:	d8800115 	stw	r2,4(sp)
 8008b00:	d9002f17 	ldw	r4,188(sp)
 8008b04:	d8802504 	addi	r2,sp,148
 8008b08:	d9403717 	ldw	r5,220(sp)
 8008b0c:	d8800215 	stw	r2,8(sp)
 8008b10:	d8802104 	addi	r2,sp,132
 8008b14:	da400015 	stw	r9,0(sp)
 8008b18:	d8800315 	stw	r2,12(sp)
 8008b1c:	880d883a 	mov	r6,r17
 8008b20:	01c000c4 	movi	r7,3
 8008b24:	da004015 	stw	r8,256(sp)
 8008b28:	da403f15 	stw	r9,252(sp)
 8008b2c:	800b48c0 	call	800b48c <_dtoa_r>
 8008b30:	da403f17 	ldw	r9,252(sp)
 8008b34:	da004017 	ldw	r8,256(sp)
 8008b38:	d8803115 	stw	r2,196(sp)
 8008b3c:	482b883a 	mov	r21,r9
 8008b40:	d8c03117 	ldw	r3,196(sp)
 8008b44:	00801184 	movi	r2,70
 8008b48:	1d55883a 	add	r10,r3,r21
 8008b4c:	98bf5b1e 	bne	r19,r2,80088bc <__alt_data_end+0xfc0088bc>
 8008b50:	19000007 	ldb	r4,0(r3)
 8008b54:	00800c04 	movi	r2,48
 8008b58:	2080d826 	beq	r4,r2,8008ebc <___svfprintf_internal_r+0x1f68>
 8008b5c:	d8c02617 	ldw	r3,152(sp)
 8008b60:	50d5883a 	add	r10,r10,r3
 8008b64:	003f5506 	br	80088bc <__alt_data_end+0xfc0088bc>
 8008b68:	010200b4 	movhi	r4,2050
 8008b6c:	2109fd84 	addi	r4,r4,10230
 8008b70:	d9003615 	stw	r4,216(sp)
 8008b74:	003a7706 	br	8007554 <__alt_data_end+0xfc007554>
 8008b78:	0023883a 	mov	r17,zero
 8008b7c:	003da306 	br	800820c <__alt_data_end+0xfc00820c>
 8008b80:	d9002f17 	ldw	r4,188(sp)
 8008b84:	b00b883a 	mov	r5,r22
 8008b88:	b80d883a 	mov	r6,r23
 8008b8c:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008b90:	1039b91e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008b94:	d8c02017 	ldw	r3,128(sp)
 8008b98:	da000404 	addi	r8,sp,16
 8008b9c:	003d9a06 	br	8008208 <__alt_data_end+0xfc008208>
 8008ba0:	d9002f17 	ldw	r4,188(sp)
 8008ba4:	b00b883a 	mov	r5,r22
 8008ba8:	b80d883a 	mov	r6,r23
 8008bac:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008bb0:	1039b11e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008bb4:	d8802617 	ldw	r2,152(sp)
 8008bb8:	d8c02017 	ldw	r3,128(sp)
 8008bbc:	da000404 	addi	r8,sp,16
 8008bc0:	003e0c06 	br	80083f4 <__alt_data_end+0xfc0083f4>
 8008bc4:	010200b4 	movhi	r4,2050
 8008bc8:	2109f984 	addi	r4,r4,10214
 8008bcc:	d9002b15 	stw	r4,172(sp)
 8008bd0:	d9002b17 	ldw	r4,172(sp)
 8008bd4:	1c07883a 	add	r3,r3,r16
 8008bd8:	10800044 	addi	r2,r2,1
 8008bdc:	41000015 	stw	r4,0(r8)
 8008be0:	44000115 	stw	r16,4(r8)
 8008be4:	d8c02015 	stw	r3,128(sp)
 8008be8:	d8801f15 	stw	r2,124(sp)
 8008bec:	010001c4 	movi	r4,7
 8008bf0:	20bfa716 	blt	r4,r2,8008a90 <__alt_data_end+0xfc008a90>
 8008bf4:	42000204 	addi	r8,r8,8
 8008bf8:	003fad06 	br	8008ab0 <__alt_data_end+0xfc008ab0>
 8008bfc:	d9002f17 	ldw	r4,188(sp)
 8008c00:	b00b883a 	mov	r5,r22
 8008c04:	b80d883a 	mov	r6,r23
 8008c08:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008c0c:	10399a1e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008c10:	d8802617 	ldw	r2,152(sp)
 8008c14:	d9403317 	ldw	r5,204(sp)
 8008c18:	d8c02017 	ldw	r3,128(sp)
 8008c1c:	da000404 	addi	r8,sp,16
 8008c20:	2885c83a 	sub	r2,r5,r2
 8008c24:	003e0406 	br	8008438 <__alt_data_end+0xfc008438>
 8008c28:	00800184 	movi	r2,6
 8008c2c:	1240012e 	bgeu	r2,r9,8008c34 <___svfprintf_internal_r+0x1ce0>
 8008c30:	1013883a 	mov	r9,r2
 8008c34:	4823883a 	mov	r17,r9
 8008c38:	4805883a 	mov	r2,r9
 8008c3c:	4800b616 	blt	r9,zero,8008f18 <___svfprintf_internal_r+0x1fc4>
 8008c40:	014200b4 	movhi	r5,2050
 8008c44:	2949f704 	addi	r5,r5,10204
 8008c48:	d8802a15 	stw	r2,168(sp)
 8008c4c:	dc802d15 	stw	r18,180(sp)
 8008c50:	d8003215 	stw	zero,200(sp)
 8008c54:	d8003415 	stw	zero,208(sp)
 8008c58:	d9403115 	stw	r5,196(sp)
 8008c5c:	0005883a 	mov	r2,zero
 8008c60:	003a0606 	br	800747c <__alt_data_end+0xfc00747c>
 8008c64:	0021883a 	mov	r16,zero
 8008c68:	003df406 	br	800843c <__alt_data_end+0xfc00843c>
 8008c6c:	014200b4 	movhi	r5,2050
 8008c70:	2949fd84 	addi	r5,r5,10230
 8008c74:	d9403615 	stw	r5,216(sp)
 8008c78:	003ac306 	br	8007788 <__alt_data_end+0xfc007788>
 8008c7c:	00800b44 	movi	r2,45
 8008c80:	d8802785 	stb	r2,158(sp)
 8008c84:	df002a15 	stw	fp,168(sp)
 8008c88:	d8003215 	stw	zero,200(sp)
 8008c8c:	df002d17 	ldw	fp,180(sp)
 8008c90:	00800b44 	movi	r2,45
 8008c94:	dc802d15 	stw	r18,180(sp)
 8008c98:	0039f506 	br	8007470 <__alt_data_end+0xfc007470>
 8008c9c:	04c00b44 	movi	r19,45
 8008ca0:	dcc02785 	stb	r19,158(sp)
 8008ca4:	003af206 	br	8007870 <__alt_data_end+0xfc007870>
 8008ca8:	d8c02617 	ldw	r3,152(sp)
 8008cac:	00bfff44 	movi	r2,-3
 8008cb0:	18801816 	blt	r3,r2,8008d14 <___svfprintf_internal_r+0x1dc0>
 8008cb4:	48c01716 	blt	r9,r3,8008d14 <___svfprintf_internal_r+0x1dc0>
 8008cb8:	d8c03415 	stw	r3,208(sp)
 8008cbc:	040019c4 	movi	r16,103
 8008cc0:	003f1d06 	br	8008938 <__alt_data_end+0xfc008938>
 8008cc4:	d8c02d17 	ldw	r3,180(sp)
 8008cc8:	d9003017 	ldw	r4,192(sp)
 8008ccc:	18800017 	ldw	r2,0(r3)
 8008cd0:	18c00104 	addi	r3,r3,4
 8008cd4:	d8c02d15 	stw	r3,180(sp)
 8008cd8:	11000015 	stw	r4,0(r2)
 8008cdc:	0038c906 	br	8007004 <__alt_data_end+0xfc007004>
 8008ce0:	5005883a 	mov	r2,r10
 8008ce4:	003f0906 	br	800890c <__alt_data_end+0xfc00890c>
 8008ce8:	010200b4 	movhi	r4,2050
 8008cec:	2109f984 	addi	r4,r4,10214
 8008cf0:	d9002b15 	stw	r4,172(sp)
 8008cf4:	003c9a06 	br	8007f60 <__alt_data_end+0xfc007f60>
 8008cf8:	da402a15 	stw	r9,168(sp)
 8008cfc:	dcc02783 	ldbu	r19,158(sp)
 8008d00:	4823883a 	mov	r17,r9
 8008d04:	dc802d15 	stw	r18,180(sp)
 8008d08:	d8003215 	stw	zero,200(sp)
 8008d0c:	d8003415 	stw	zero,208(sp)
 8008d10:	0039d306 	br	8007460 <__alt_data_end+0xfc007460>
 8008d14:	843fff84 	addi	r16,r16,-2
 8008d18:	1d7fffc4 	addi	r21,r3,-1
 8008d1c:	dd402615 	stw	r21,152(sp)
 8008d20:	dc0022c5 	stb	r16,139(sp)
 8008d24:	a8008f16 	blt	r21,zero,8008f64 <___svfprintf_internal_r+0x2010>
 8008d28:	00800ac4 	movi	r2,43
 8008d2c:	d8802305 	stb	r2,140(sp)
 8008d30:	00800244 	movi	r2,9
 8008d34:	1540710e 	bge	r2,r21,8008efc <___svfprintf_internal_r+0x1fa8>
 8008d38:	dcc022c4 	addi	r19,sp,139
 8008d3c:	dc002b15 	stw	r16,172(sp)
 8008d40:	4023883a 	mov	r17,r8
 8008d44:	9821883a 	mov	r16,r19
 8008d48:	a809883a 	mov	r4,r21
 8008d4c:	01400284 	movi	r5,10
 8008d50:	80040240 	call	8004024 <__modsi3>
 8008d54:	10800c04 	addi	r2,r2,48
 8008d58:	843fffc4 	addi	r16,r16,-1
 8008d5c:	a809883a 	mov	r4,r21
 8008d60:	01400284 	movi	r5,10
 8008d64:	80800005 	stb	r2,0(r16)
 8008d68:	8003fd00 	call	8003fd0 <__divsi3>
 8008d6c:	01000244 	movi	r4,9
 8008d70:	102b883a 	mov	r21,r2
 8008d74:	20bff416 	blt	r4,r2,8008d48 <__alt_data_end+0xfc008d48>
 8008d78:	8811883a 	mov	r8,r17
 8008d7c:	10800c04 	addi	r2,r2,48
 8008d80:	8023883a 	mov	r17,r16
 8008d84:	897fffc4 	addi	r5,r17,-1
 8008d88:	88bfffc5 	stb	r2,-1(r17)
 8008d8c:	dc002b17 	ldw	r16,172(sp)
 8008d90:	2cc08a2e 	bgeu	r5,r19,8008fbc <___svfprintf_internal_r+0x2068>
 8008d94:	d9802384 	addi	r6,sp,142
 8008d98:	344dc83a 	sub	r6,r6,r17
 8008d9c:	d9002344 	addi	r4,sp,141
 8008da0:	998d883a 	add	r6,r19,r6
 8008da4:	00000106 	br	8008dac <___svfprintf_internal_r+0x1e58>
 8008da8:	28800003 	ldbu	r2,0(r5)
 8008dac:	20800005 	stb	r2,0(r4)
 8008db0:	21000044 	addi	r4,r4,1
 8008db4:	29400044 	addi	r5,r5,1
 8008db8:	21bffb1e 	bne	r4,r6,8008da8 <__alt_data_end+0xfc008da8>
 8008dbc:	d8802304 	addi	r2,sp,140
 8008dc0:	1445c83a 	sub	r2,r2,r17
 8008dc4:	d9402344 	addi	r5,sp,141
 8008dc8:	2885883a 	add	r2,r5,r2
 8008dcc:	14e7c83a 	sub	r19,r2,r19
 8008dd0:	d8803317 	ldw	r2,204(sp)
 8008dd4:	d8c03317 	ldw	r3,204(sp)
 8008dd8:	dcc03a15 	stw	r19,232(sp)
 8008ddc:	14e3883a 	add	r17,r2,r19
 8008de0:	00800044 	movi	r2,1
 8008de4:	10c0690e 	bge	r2,r3,8008f8c <___svfprintf_internal_r+0x2038>
 8008de8:	8c400044 	addi	r17,r17,1
 8008dec:	8839883a 	mov	fp,r17
 8008df0:	88006416 	blt	r17,zero,8008f84 <___svfprintf_internal_r+0x2030>
 8008df4:	d8003415 	stw	zero,208(sp)
 8008df8:	003ed806 	br	800895c <__alt_data_end+0xfc00895c>
 8008dfc:	d9002f17 	ldw	r4,188(sp)
 8008e00:	b00b883a 	mov	r5,r22
 8008e04:	b80d883a 	mov	r6,r23
 8008e08:	800fbe40 	call	800fbe4 <__ssprint_r>
 8008e0c:	10391a1e 	bne	r2,zero,8007278 <__alt_data_end+0xfc007278>
 8008e10:	dc002617 	ldw	r16,152(sp)
 8008e14:	d8c02017 	ldw	r3,128(sp)
 8008e18:	d8801f17 	ldw	r2,124(sp)
 8008e1c:	da000404 	addi	r8,sp,16
 8008e20:	003e4b06 	br	8008750 <__alt_data_end+0xfc008750>
 8008e24:	483e7f1e 	bne	r9,zero,8008824 <__alt_data_end+0xfc008824>
 8008e28:	8813883a 	mov	r9,r17
 8008e2c:	003e7d06 	br	8008824 <__alt_data_end+0xfc008824>
 8008e30:	00c00b44 	movi	r3,45
 8008e34:	2460003c 	xorhi	r17,r4,32768
 8008e38:	d8c02a05 	stb	r3,168(sp)
 8008e3c:	003e7f06 	br	800883c <__alt_data_end+0xfc00883c>
 8008e40:	d8c03417 	ldw	r3,208(sp)
 8008e44:	00c03e0e 	bge	zero,r3,8008f40 <___svfprintf_internal_r+0x1fec>
 8008e48:	04400044 	movi	r17,1
 8008e4c:	d9003317 	ldw	r4,204(sp)
 8008e50:	8923883a 	add	r17,r17,r4
 8008e54:	8839883a 	mov	fp,r17
 8008e58:	883ec00e 	bge	r17,zero,800895c <__alt_data_end+0xfc00895c>
 8008e5c:	0039883a 	mov	fp,zero
 8008e60:	003ebe06 	br	800895c <__alt_data_end+0xfc00895c>
 8008e64:	4d400044 	addi	r21,r9,1
 8008e68:	003e7b06 	br	8008858 <__alt_data_end+0xfc008858>
 8008e6c:	1839883a 	mov	fp,r3
 8008e70:	18004e16 	blt	r3,zero,8008fac <___svfprintf_internal_r+0x2058>
 8008e74:	dc403417 	ldw	r17,208(sp)
 8008e78:	003eb806 	br	800895c <__alt_data_end+0xfc00895c>
 8008e7c:	d8802117 	ldw	r2,132(sp)
 8008e80:	003ea206 	br	800890c <__alt_data_end+0xfc00890c>
 8008e84:	00c0310e 	bge	zero,r3,8008f4c <___svfprintf_internal_r+0x1ff8>
 8008e88:	4800021e 	bne	r9,zero,8008e94 <___svfprintf_internal_r+0x1f40>
 8008e8c:	e080004c 	andi	r2,fp,1
 8008e90:	103ff626 	beq	r2,zero,8008e6c <__alt_data_end+0xfc008e6c>
 8008e94:	d8c03417 	ldw	r3,208(sp)
 8008e98:	4a400044 	addi	r9,r9,1
 8008e9c:	1a63883a 	add	r17,r3,r9
 8008ea0:	8839883a 	mov	fp,r17
 8008ea4:	883ead0e 	bge	r17,zero,800895c <__alt_data_end+0xfc00895c>
 8008ea8:	003fec06 	br	8008e5c <__alt_data_end+0xfc008e5c>
 8008eac:	010200b4 	movhi	r4,2050
 8008eb0:	2109f984 	addi	r4,r4,10214
 8008eb4:	d9002b15 	stw	r4,172(sp)
 8008eb8:	003d2006 	br	800833c <__alt_data_end+0xfc00833c>
 8008ebc:	d9003717 	ldw	r4,220(sp)
 8008ec0:	880b883a 	mov	r5,r17
 8008ec4:	000d883a 	mov	r6,zero
 8008ec8:	000f883a 	mov	r7,zero
 8008ecc:	da004015 	stw	r8,256(sp)
 8008ed0:	da403f15 	stw	r9,252(sp)
 8008ed4:	da803e15 	stw	r10,248(sp)
 8008ed8:	80144280 	call	8014428 <__eqdf2>
 8008edc:	da004017 	ldw	r8,256(sp)
 8008ee0:	da403f17 	ldw	r9,252(sp)
 8008ee4:	da803e17 	ldw	r10,248(sp)
 8008ee8:	103f1c26 	beq	r2,zero,8008b5c <__alt_data_end+0xfc008b5c>
 8008eec:	00800044 	movi	r2,1
 8008ef0:	1547c83a 	sub	r3,r2,r21
 8008ef4:	d8c02615 	stw	r3,152(sp)
 8008ef8:	003f1906 	br	8008b60 <__alt_data_end+0xfc008b60>
 8008efc:	00800c04 	movi	r2,48
 8008f00:	a8c00c04 	addi	r3,r21,48
 8008f04:	d8802345 	stb	r2,141(sp)
 8008f08:	d8c02385 	stb	r3,142(sp)
 8008f0c:	d88023c4 	addi	r2,sp,143
 8008f10:	dcc022c4 	addi	r19,sp,139
 8008f14:	003fad06 	br	8008dcc <__alt_data_end+0xfc008dcc>
 8008f18:	0005883a 	mov	r2,zero
 8008f1c:	003f4806 	br	8008c40 <__alt_data_end+0xfc008c40>
 8008f20:	d9402d17 	ldw	r5,180(sp)
 8008f24:	2a400017 	ldw	r9,0(r5)
 8008f28:	28c00104 	addi	r3,r5,4
 8008f2c:	d8c02d15 	stw	r3,180(sp)
 8008f30:	483e2c0e 	bge	r9,zero,80087e4 <__alt_data_end+0xfc0087e4>
 8008f34:	027fffc4 	movi	r9,-1
 8008f38:	e4000047 	ldb	r16,1(fp)
 8008f3c:	00385c06 	br	80070b0 <__alt_data_end+0xfc0070b0>
 8008f40:	04400084 	movi	r17,2
 8008f44:	88e3c83a 	sub	r17,r17,r3
 8008f48:	003fc006 	br	8008e4c <__alt_data_end+0xfc008e4c>
 8008f4c:	4800091e 	bne	r9,zero,8008f74 <___svfprintf_internal_r+0x2020>
 8008f50:	e080004c 	andi	r2,fp,1
 8008f54:	1000071e 	bne	r2,zero,8008f74 <___svfprintf_internal_r+0x2020>
 8008f58:	07000044 	movi	fp,1
 8008f5c:	e023883a 	mov	r17,fp
 8008f60:	003e7e06 	br	800895c <__alt_data_end+0xfc00895c>
 8008f64:	00800b44 	movi	r2,45
 8008f68:	056bc83a 	sub	r21,zero,r21
 8008f6c:	d8802305 	stb	r2,140(sp)
 8008f70:	003f6f06 	br	8008d30 <__alt_data_end+0xfc008d30>
 8008f74:	4c400084 	addi	r17,r9,2
 8008f78:	8839883a 	mov	fp,r17
 8008f7c:	883e770e 	bge	r17,zero,800895c <__alt_data_end+0xfc00895c>
 8008f80:	003fb606 	br	8008e5c <__alt_data_end+0xfc008e5c>
 8008f84:	0039883a 	mov	fp,zero
 8008f88:	003f9a06 	br	8008df4 <__alt_data_end+0xfc008df4>
 8008f8c:	e084703a 	and	r2,fp,r2
 8008f90:	103f9626 	beq	r2,zero,8008dec <__alt_data_end+0xfc008dec>
 8008f94:	003f9406 	br	8008de8 <__alt_data_end+0xfc008de8>
 8008f98:	d8c02f17 	ldw	r3,188(sp)
 8008f9c:	00800304 	movi	r2,12
 8008fa0:	18800015 	stw	r2,0(r3)
 8008fa4:	00bfffc4 	movi	r2,-1
 8008fa8:	0038b706 	br	8007288 <__alt_data_end+0xfc007288>
 8008fac:	0039883a 	mov	fp,zero
 8008fb0:	003fb006 	br	8008e74 <__alt_data_end+0xfc008e74>
 8008fb4:	d8c02617 	ldw	r3,152(sp)
 8008fb8:	003f5706 	br	8008d18 <__alt_data_end+0xfc008d18>
 8008fbc:	d8802344 	addi	r2,sp,141
 8008fc0:	003f8206 	br	8008dcc <__alt_data_end+0xfc008dcc>

08008fc4 <time>:
 8008fc4:	008200b4 	movhi	r2,2050
 8008fc8:	defffc04 	addi	sp,sp,-16
 8008fcc:	10913704 	addi	r2,r2,17628
 8008fd0:	dc000215 	stw	r16,8(sp)
 8008fd4:	2021883a 	mov	r16,r4
 8008fd8:	11000017 	ldw	r4,0(r2)
 8008fdc:	d80b883a 	mov	r5,sp
 8008fe0:	000d883a 	mov	r6,zero
 8008fe4:	dfc00315 	stw	ra,12(sp)
 8008fe8:	800dbe80 	call	800dbe8 <_gettimeofday_r>
 8008fec:	10000716 	blt	r2,zero,800900c <time+0x48>
 8008ff0:	d8800017 	ldw	r2,0(sp)
 8008ff4:	80000126 	beq	r16,zero,8008ffc <time+0x38>
 8008ff8:	80800015 	stw	r2,0(r16)
 8008ffc:	dfc00317 	ldw	ra,12(sp)
 8009000:	dc000217 	ldw	r16,8(sp)
 8009004:	dec00404 	addi	sp,sp,16
 8009008:	f800283a 	ret
 800900c:	00bfffc4 	movi	r2,-1
 8009010:	003ffa06 	br	8008ffc <__alt_data_end+0xfc008ffc>

08009014 <___vfprintf_internal_r>:
 8009014:	defeb604 	addi	sp,sp,-1320
 8009018:	dfc14915 	stw	ra,1316(sp)
 800901c:	ddc14715 	stw	r23,1308(sp)
 8009020:	dd814615 	stw	r22,1304(sp)
 8009024:	202f883a 	mov	r23,r4
 8009028:	282d883a 	mov	r22,r5
 800902c:	d9812a15 	stw	r6,1192(sp)
 8009030:	d9c12d15 	stw	r7,1204(sp)
 8009034:	df014815 	stw	fp,1312(sp)
 8009038:	dd414515 	stw	r21,1300(sp)
 800903c:	dd014415 	stw	r20,1296(sp)
 8009040:	dcc14315 	stw	r19,1292(sp)
 8009044:	dc814215 	stw	r18,1288(sp)
 8009048:	dc414115 	stw	r17,1284(sp)
 800904c:	dc014015 	stw	r16,1280(sp)
 8009050:	800dcec0 	call	800dcec <_localeconv_r>
 8009054:	10800017 	ldw	r2,0(r2)
 8009058:	1009883a 	mov	r4,r2
 800905c:	d8813515 	stw	r2,1236(sp)
 8009060:	8006e040 	call	8006e04 <strlen>
 8009064:	d8813815 	stw	r2,1248(sp)
 8009068:	b8000226 	beq	r23,zero,8009074 <___vfprintf_internal_r+0x60>
 800906c:	b8800e17 	ldw	r2,56(r23)
 8009070:	10010526 	beq	r2,zero,8009488 <___vfprintf_internal_r+0x474>
 8009074:	b0c0030b 	ldhu	r3,12(r22)
 8009078:	1908000c 	andi	r4,r3,8192
 800907c:	1805883a 	mov	r2,r3
 8009080:	2000071e 	bne	r4,zero,80090a0 <___vfprintf_internal_r+0x8c>
 8009084:	b1001917 	ldw	r4,100(r22)
 8009088:	18880014 	ori	r2,r3,8192
 800908c:	00f7ffc4 	movi	r3,-8193
 8009090:	20c8703a 	and	r4,r4,r3
 8009094:	b080030d 	sth	r2,12(r22)
 8009098:	1007883a 	mov	r3,r2
 800909c:	b1001915 	stw	r4,100(r22)
 80090a0:	1100020c 	andi	r4,r2,8
 80090a4:	2000a826 	beq	r4,zero,8009348 <___vfprintf_internal_r+0x334>
 80090a8:	b1000417 	ldw	r4,16(r22)
 80090ac:	2000a626 	beq	r4,zero,8009348 <___vfprintf_internal_r+0x334>
 80090b0:	1080068c 	andi	r2,r2,26
 80090b4:	01000284 	movi	r4,10
 80090b8:	1100ac26 	beq	r2,r4,800936c <___vfprintf_internal_r+0x358>
 80090bc:	d8c10e04 	addi	r3,sp,1080
 80090c0:	d9010dc4 	addi	r4,sp,1079
 80090c4:	d9400404 	addi	r5,sp,16
 80090c8:	050200b4 	movhi	r20,2050
 80090cc:	1905c83a 	sub	r2,r3,r4
 80090d0:	a50a0184 	addi	r20,r20,10246
 80090d4:	d8c12815 	stw	r3,1184(sp)
 80090d8:	d9012915 	stw	r4,1188(sp)
 80090dc:	d9411e15 	stw	r5,1144(sp)
 80090e0:	d8012015 	stw	zero,1152(sp)
 80090e4:	d8011f15 	stw	zero,1148(sp)
 80090e8:	d8013315 	stw	zero,1228(sp)
 80090ec:	d8013715 	stw	zero,1244(sp)
 80090f0:	d8013915 	stw	zero,1252(sp)
 80090f4:	d8013b15 	stw	zero,1260(sp)
 80090f8:	d8013a15 	stw	zero,1256(sp)
 80090fc:	d8012f15 	stw	zero,1212(sp)
 8009100:	2811883a 	mov	r8,r5
 8009104:	d8813c15 	stw	r2,1264(sp)
 8009108:	d8c12a17 	ldw	r3,1192(sp)
 800910c:	18800007 	ldb	r2,0(r3)
 8009110:	10021326 	beq	r2,zero,8009960 <___vfprintf_internal_r+0x94c>
 8009114:	00c00944 	movi	r3,37
 8009118:	dc012a17 	ldw	r16,1192(sp)
 800911c:	10c0021e 	bne	r2,r3,8009128 <___vfprintf_internal_r+0x114>
 8009120:	00001606 	br	800917c <___vfprintf_internal_r+0x168>
 8009124:	10c08526 	beq	r2,r3,800933c <___vfprintf_internal_r+0x328>
 8009128:	84000044 	addi	r16,r16,1
 800912c:	80800007 	ldb	r2,0(r16)
 8009130:	103ffc1e 	bne	r2,zero,8009124 <__alt_data_end+0xfc009124>
 8009134:	d9012a17 	ldw	r4,1192(sp)
 8009138:	8123c83a 	sub	r17,r16,r4
 800913c:	88000f26 	beq	r17,zero,800917c <___vfprintf_internal_r+0x168>
 8009140:	d8812a17 	ldw	r2,1192(sp)
 8009144:	d8c12017 	ldw	r3,1152(sp)
 8009148:	44400115 	stw	r17,4(r8)
 800914c:	40800015 	stw	r2,0(r8)
 8009150:	d8811f17 	ldw	r2,1148(sp)
 8009154:	1c47883a 	add	r3,r3,r17
 8009158:	d8c12015 	stw	r3,1152(sp)
 800915c:	10800044 	addi	r2,r2,1
 8009160:	d8811f15 	stw	r2,1148(sp)
 8009164:	00c001c4 	movi	r3,7
 8009168:	1880b516 	blt	r3,r2,8009440 <___vfprintf_internal_r+0x42c>
 800916c:	42000204 	addi	r8,r8,8
 8009170:	d8c12f17 	ldw	r3,1212(sp)
 8009174:	1c47883a 	add	r3,r3,r17
 8009178:	d8c12f15 	stw	r3,1212(sp)
 800917c:	80800007 	ldb	r2,0(r16)
 8009180:	1000b626 	beq	r2,zero,800945c <___vfprintf_internal_r+0x448>
 8009184:	80800044 	addi	r2,r16,1
 8009188:	84000047 	ldb	r16,1(r16)
 800918c:	0027883a 	mov	r19,zero
 8009190:	0039883a 	mov	fp,zero
 8009194:	dcc12b05 	stb	r19,1196(sp)
 8009198:	d8012785 	stb	zero,1182(sp)
 800919c:	027fffc4 	movi	r9,-1
 80091a0:	d8012e15 	stw	zero,1208(sp)
 80091a4:	04401604 	movi	r17,88
 80091a8:	04800244 	movi	r18,9
 80091ac:	da012a15 	stw	r8,1192(sp)
 80091b0:	e027883a 	mov	r19,fp
 80091b4:	17000044 	addi	fp,r2,1
 80091b8:	80bff804 	addi	r2,r16,-32
 80091bc:	88831236 	bltu	r17,r2,8009e08 <___vfprintf_internal_r+0xdf4>
 80091c0:	100490ba 	slli	r2,r2,2
 80091c4:	01020074 	movhi	r4,2049
 80091c8:	21247604 	addi	r4,r4,-28200
 80091cc:	1105883a 	add	r2,r2,r4
 80091d0:	10800017 	ldw	r2,0(r2)
 80091d4:	1000683a 	jmp	r2
 80091d8:	08009d24 	muli	zero,at,628
 80091dc:	08009e08 	cmpgei	zero,at,632
 80091e0:	08009e08 	cmpgei	zero,at,632
 80091e4:	08009d40 	call	8009d4 <__alt_mem_sdram-0x77ff62c>
 80091e8:	08009e08 	cmpgei	zero,at,632
 80091ec:	08009e08 	cmpgei	zero,at,632
 80091f0:	08009e08 	cmpgei	zero,at,632
 80091f4:	08009e08 	cmpgei	zero,at,632
 80091f8:	08009e08 	cmpgei	zero,at,632
 80091fc:	08009e08 	cmpgei	zero,at,632
 8009200:	08009d50 	cmplti	zero,at,629
 8009204:	08009d78 	rdprs	zero,at,629
 8009208:	08009e08 	cmpgei	zero,at,632
 800920c:	08009494 	ori	zero,at,594
 8009210:	080094a4 	muli	zero,at,594
 8009214:	08009e08 	cmpgei	zero,at,632
 8009218:	080094f4 	orhi	zero,at,595
 800921c:	08009504 	addi	zero,at,596
 8009220:	08009504 	addi	zero,at,596
 8009224:	08009504 	addi	zero,at,596
 8009228:	08009504 	addi	zero,at,596
 800922c:	08009504 	addi	zero,at,596
 8009230:	08009504 	addi	zero,at,596
 8009234:	08009504 	addi	zero,at,596
 8009238:	08009504 	addi	zero,at,596
 800923c:	08009504 	addi	zero,at,596
 8009240:	08009e08 	cmpgei	zero,at,632
 8009244:	08009e08 	cmpgei	zero,at,632
 8009248:	08009e08 	cmpgei	zero,at,632
 800924c:	08009e08 	cmpgei	zero,at,632
 8009250:	08009e08 	cmpgei	zero,at,632
 8009254:	08009e08 	cmpgei	zero,at,632
 8009258:	08009e08 	cmpgei	zero,at,632
 800925c:	08009e08 	cmpgei	zero,at,632
 8009260:	08009e08 	cmpgei	zero,at,632
 8009264:	08009e08 	cmpgei	zero,at,632
 8009268:	08009548 	cmpgei	zero,at,597
 800926c:	08009968 	cmpgeui	zero,at,613
 8009270:	08009e08 	cmpgei	zero,at,632
 8009274:	08009968 	cmpgeui	zero,at,613
 8009278:	08009e08 	cmpgei	zero,at,632
 800927c:	08009e08 	cmpgei	zero,at,632
 8009280:	08009e08 	cmpgei	zero,at,632
 8009284:	08009e08 	cmpgei	zero,at,632
 8009288:	08009a10 	cmplti	zero,at,616
 800928c:	08009e08 	cmpgei	zero,at,632
 8009290:	08009e08 	cmpgei	zero,at,632
 8009294:	08009a20 	cmpeqi	zero,at,616
 8009298:	08009e08 	cmpgei	zero,at,632
 800929c:	08009e08 	cmpgei	zero,at,632
 80092a0:	08009e08 	cmpgei	zero,at,632
 80092a4:	08009e08 	cmpgei	zero,at,632
 80092a8:	08009e08 	cmpgei	zero,at,632
 80092ac:	08009a64 	muli	zero,at,617
 80092b0:	08009e08 	cmpgei	zero,at,632
 80092b4:	08009e08 	cmpgei	zero,at,632
 80092b8:	08009a9c 	xori	zero,at,618
 80092bc:	08009e08 	cmpgei	zero,at,632
 80092c0:	08009e08 	cmpgei	zero,at,632
 80092c4:	08009e08 	cmpgei	zero,at,632
 80092c8:	08009e08 	cmpgei	zero,at,632
 80092cc:	08009e08 	cmpgei	zero,at,632
 80092d0:	08009e08 	cmpgei	zero,at,632
 80092d4:	08009e08 	cmpgei	zero,at,632
 80092d8:	08009e08 	cmpgei	zero,at,632
 80092dc:	08009e08 	cmpgei	zero,at,632
 80092e0:	08009e08 	cmpgei	zero,at,632
 80092e4:	08009cd8 	cmpnei	zero,at,627
 80092e8:	08009c84 	addi	zero,at,626
 80092ec:	08009968 	cmpgeui	zero,at,613
 80092f0:	08009968 	cmpgeui	zero,at,613
 80092f4:	08009968 	cmpgeui	zero,at,613
 80092f8:	08009cc8 	cmpgei	zero,at,627
 80092fc:	08009c84 	addi	zero,at,626
 8009300:	08009e08 	cmpgei	zero,at,632
 8009304:	08009e08 	cmpgei	zero,at,632
 8009308:	08009ba0 	cmpeqi	zero,at,622
 800930c:	08009e08 	cmpgei	zero,at,632
 8009310:	08009bb8 	rdprs	zero,at,622
 8009314:	08009bf8 	rdprs	zero,at,623
 8009318:	08009c38 	rdprs	zero,at,624
 800931c:	08009b04 	addi	zero,at,620
 8009320:	08009e08 	cmpgei	zero,at,632
 8009324:	08009d8c 	andi	zero,at,630
 8009328:	08009e08 	cmpgei	zero,at,632
 800932c:	08009b14 	ori	zero,at,620
 8009330:	08009e08 	cmpgei	zero,at,632
 8009334:	08009e08 	cmpgei	zero,at,632
 8009338:	08009b54 	ori	zero,at,621
 800933c:	d9412a17 	ldw	r5,1192(sp)
 8009340:	8163c83a 	sub	r17,r16,r5
 8009344:	003f7d06 	br	800913c <__alt_data_end+0xfc00913c>
 8009348:	b809883a 	mov	r4,r23
 800934c:	b00b883a 	mov	r5,r22
 8009350:	800b1340 	call	800b134 <__swsetup_r>
 8009354:	10002d1e 	bne	r2,zero,800940c <___vfprintf_internal_r+0x3f8>
 8009358:	b0c0030b 	ldhu	r3,12(r22)
 800935c:	01000284 	movi	r4,10
 8009360:	1805883a 	mov	r2,r3
 8009364:	1080068c 	andi	r2,r2,26
 8009368:	113f541e 	bne	r2,r4,80090bc <__alt_data_end+0xfc0090bc>
 800936c:	b080038b 	ldhu	r2,14(r22)
 8009370:	113fffcc 	andi	r4,r2,65535
 8009374:	2120001c 	xori	r4,r4,32768
 8009378:	21200004 	addi	r4,r4,-32768
 800937c:	203f4f16 	blt	r4,zero,80090bc <__alt_data_end+0xfc0090bc>
 8009380:	b2c01917 	ldw	r11,100(r22)
 8009384:	b2800717 	ldw	r10,28(r22)
 8009388:	b2400917 	ldw	r9,36(r22)
 800938c:	d9812a17 	ldw	r6,1192(sp)
 8009390:	d9c12d17 	ldw	r7,1204(sp)
 8009394:	02010004 	movi	r8,1024
 8009398:	18ffff4c 	andi	r3,r3,65533
 800939c:	d881078d 	sth	r2,1054(sp)
 80093a0:	b809883a 	mov	r4,r23
 80093a4:	d8800404 	addi	r2,sp,16
 80093a8:	d9410404 	addi	r5,sp,1040
 80093ac:	d8c1070d 	sth	r3,1052(sp)
 80093b0:	dac11d15 	stw	r11,1140(sp)
 80093b4:	da810b15 	stw	r10,1068(sp)
 80093b8:	da410d15 	stw	r9,1076(sp)
 80093bc:	d8810415 	stw	r2,1040(sp)
 80093c0:	d8810815 	stw	r2,1056(sp)
 80093c4:	da010615 	stw	r8,1048(sp)
 80093c8:	da010915 	stw	r8,1060(sp)
 80093cc:	d8010a15 	stw	zero,1064(sp)
 80093d0:	80090140 	call	8009014 <___vfprintf_internal_r>
 80093d4:	1021883a 	mov	r16,r2
 80093d8:	10000416 	blt	r2,zero,80093ec <___vfprintf_internal_r+0x3d8>
 80093dc:	b809883a 	mov	r4,r23
 80093e0:	d9410404 	addi	r5,sp,1040
 80093e4:	800cbb40 	call	800cbb4 <_fflush_r>
 80093e8:	1007301e 	bne	r2,zero,800b0ac <___vfprintf_internal_r+0x2098>
 80093ec:	d881070b 	ldhu	r2,1052(sp)
 80093f0:	1080100c 	andi	r2,r2,64
 80093f4:	10000326 	beq	r2,zero,8009404 <___vfprintf_internal_r+0x3f0>
 80093f8:	b080030b 	ldhu	r2,12(r22)
 80093fc:	10801014 	ori	r2,r2,64
 8009400:	b080030d 	sth	r2,12(r22)
 8009404:	8005883a 	mov	r2,r16
 8009408:	00000106 	br	8009410 <___vfprintf_internal_r+0x3fc>
 800940c:	00bfffc4 	movi	r2,-1
 8009410:	dfc14917 	ldw	ra,1316(sp)
 8009414:	df014817 	ldw	fp,1312(sp)
 8009418:	ddc14717 	ldw	r23,1308(sp)
 800941c:	dd814617 	ldw	r22,1304(sp)
 8009420:	dd414517 	ldw	r21,1300(sp)
 8009424:	dd014417 	ldw	r20,1296(sp)
 8009428:	dcc14317 	ldw	r19,1292(sp)
 800942c:	dc814217 	ldw	r18,1288(sp)
 8009430:	dc414117 	ldw	r17,1284(sp)
 8009434:	dc014017 	ldw	r16,1280(sp)
 8009438:	dec14a04 	addi	sp,sp,1320
 800943c:	f800283a 	ret
 8009440:	b809883a 	mov	r4,r23
 8009444:	b00b883a 	mov	r5,r22
 8009448:	d9811e04 	addi	r6,sp,1144
 800944c:	80110780 	call	8011078 <__sprint_r>
 8009450:	1000081e 	bne	r2,zero,8009474 <___vfprintf_internal_r+0x460>
 8009454:	da000404 	addi	r8,sp,16
 8009458:	003f4506 	br	8009170 <__alt_data_end+0xfc009170>
 800945c:	d8812017 	ldw	r2,1152(sp)
 8009460:	10000426 	beq	r2,zero,8009474 <___vfprintf_internal_r+0x460>
 8009464:	b809883a 	mov	r4,r23
 8009468:	b00b883a 	mov	r5,r22
 800946c:	d9811e04 	addi	r6,sp,1144
 8009470:	80110780 	call	8011078 <__sprint_r>
 8009474:	b080030b 	ldhu	r2,12(r22)
 8009478:	1080100c 	andi	r2,r2,64
 800947c:	103fe31e 	bne	r2,zero,800940c <__alt_data_end+0xfc00940c>
 8009480:	d8812f17 	ldw	r2,1212(sp)
 8009484:	003fe206 	br	8009410 <__alt_data_end+0xfc009410>
 8009488:	b809883a 	mov	r4,r23
 800948c:	800d1700 	call	800d170 <__sinit>
 8009490:	003ef806 	br	8009074 <__alt_data_end+0xfc009074>
 8009494:	e005883a 	mov	r2,fp
 8009498:	9cc00114 	ori	r19,r19,4
 800949c:	e4000007 	ldb	r16,0(fp)
 80094a0:	003f4406 	br	80091b4 <__alt_data_end+0xfc0091b4>
 80094a4:	e4000007 	ldb	r16,0(fp)
 80094a8:	01000a84 	movi	r4,42
 80094ac:	e0800044 	addi	r2,fp,1
 80094b0:	8106f626 	beq	r16,r4,800b08c <___vfprintf_internal_r+0x2078>
 80094b4:	857ff404 	addi	r21,r16,-48
 80094b8:	1039883a 	mov	fp,r2
 80094bc:	0013883a 	mov	r9,zero
 80094c0:	957f3d36 	bltu	r18,r21,80091b8 <__alt_data_end+0xfc0091b8>
 80094c4:	0009883a 	mov	r4,zero
 80094c8:	01400284 	movi	r5,10
 80094cc:	80040900 	call	8004090 <__mulsi3>
 80094d0:	e4000007 	ldb	r16,0(fp)
 80094d4:	a889883a 	add	r4,r21,r2
 80094d8:	e7000044 	addi	fp,fp,1
 80094dc:	857ff404 	addi	r21,r16,-48
 80094e0:	957ff92e 	bgeu	r18,r21,80094c8 <__alt_data_end+0xfc0094c8>
 80094e4:	2013883a 	mov	r9,r4
 80094e8:	203f330e 	bge	r4,zero,80091b8 <__alt_data_end+0xfc0091b8>
 80094ec:	027fffc4 	movi	r9,-1
 80094f0:	003f3106 	br	80091b8 <__alt_data_end+0xfc0091b8>
 80094f4:	9cc02014 	ori	r19,r19,128
 80094f8:	e005883a 	mov	r2,fp
 80094fc:	e4000007 	ldb	r16,0(fp)
 8009500:	003f2c06 	br	80091b4 <__alt_data_end+0xfc0091b4>
 8009504:	857ff404 	addi	r21,r16,-48
 8009508:	d8012e15 	stw	zero,1208(sp)
 800950c:	e021883a 	mov	r16,fp
 8009510:	0009883a 	mov	r4,zero
 8009514:	da412c15 	stw	r9,1200(sp)
 8009518:	01400284 	movi	r5,10
 800951c:	80040900 	call	8004090 <__mulsi3>
 8009520:	81400007 	ldb	r5,0(r16)
 8009524:	1549883a 	add	r4,r2,r21
 8009528:	e7000044 	addi	fp,fp,1
 800952c:	2d7ff404 	addi	r21,r5,-48
 8009530:	e021883a 	mov	r16,fp
 8009534:	957ff82e 	bgeu	r18,r21,8009518 <__alt_data_end+0xfc009518>
 8009538:	2821883a 	mov	r16,r5
 800953c:	d9012e15 	stw	r4,1208(sp)
 8009540:	da412c17 	ldw	r9,1200(sp)
 8009544:	003f1c06 	br	80091b8 <__alt_data_end+0xfc0091b8>
 8009548:	da012a17 	ldw	r8,1192(sp)
 800954c:	df012a15 	stw	fp,1192(sp)
 8009550:	9839883a 	mov	fp,r19
 8009554:	dcc12b03 	ldbu	r19,1196(sp)
 8009558:	e7000414 	ori	fp,fp,16
 800955c:	e080080c 	andi	r2,fp,32
 8009560:	dcc12785 	stb	r19,1182(sp)
 8009564:	d8c12d17 	ldw	r3,1204(sp)
 8009568:	1001ce26 	beq	r2,zero,8009ca4 <___vfprintf_internal_r+0xc90>
 800956c:	d9012d17 	ldw	r4,1204(sp)
 8009570:	18800117 	ldw	r2,4(r3)
 8009574:	1c800017 	ldw	r18,0(r3)
 8009578:	21000204 	addi	r4,r4,8
 800957c:	d9012d15 	stw	r4,1204(sp)
 8009580:	102b883a 	mov	r21,r2
 8009584:	10044916 	blt	r2,zero,800a6ac <___vfprintf_internal_r+0x1698>
 8009588:	dcc12783 	ldbu	r19,1182(sp)
 800958c:	da413215 	stw	r9,1224(sp)
 8009590:	00800044 	movi	r2,1
 8009594:	9546b03a 	or	r3,r18,r21
 8009598:	48000216 	blt	r9,zero,80095a4 <___vfprintf_internal_r+0x590>
 800959c:	013fdfc4 	movi	r4,-129
 80095a0:	e138703a 	and	fp,fp,r4
 80095a4:	1802251e 	bne	r3,zero,8009e3c <___vfprintf_internal_r+0xe28>
 80095a8:	48031726 	beq	r9,zero,800a208 <___vfprintf_internal_r+0x11f4>
 80095ac:	10803fcc 	andi	r2,r2,255
 80095b0:	00c00044 	movi	r3,1
 80095b4:	10c24526 	beq	r2,r3,8009ecc <___vfprintf_internal_r+0xeb8>
 80095b8:	00c00084 	movi	r3,2
 80095bc:	10c33426 	beq	r2,r3,800a290 <___vfprintf_internal_r+0x127c>
 80095c0:	d8c10e04 	addi	r3,sp,1080
 80095c4:	9008d0fa 	srli	r4,r18,3
 80095c8:	a80a977a 	slli	r5,r21,29
 80095cc:	a82ad0fa 	srli	r21,r21,3
 80095d0:	948001cc 	andi	r18,r18,7
 80095d4:	90800c04 	addi	r2,r18,48
 80095d8:	18ffffc4 	addi	r3,r3,-1
 80095dc:	2924b03a 	or	r18,r5,r4
 80095e0:	18800005 	stb	r2,0(r3)
 80095e4:	9548b03a 	or	r4,r18,r21
 80095e8:	203ff61e 	bne	r4,zero,80095c4 <__alt_data_end+0xfc0095c4>
 80095ec:	e100004c 	andi	r4,fp,1
 80095f0:	d8c13115 	stw	r3,1220(sp)
 80095f4:	20039a1e 	bne	r4,zero,800a460 <___vfprintf_internal_r+0x144c>
 80095f8:	d8812817 	ldw	r2,1184(sp)
 80095fc:	10e3c83a 	sub	r17,r2,r3
 8009600:	8805883a 	mov	r2,r17
 8009604:	8a40010e 	bge	r17,r9,800960c <___vfprintf_internal_r+0x5f8>
 8009608:	4805883a 	mov	r2,r9
 800960c:	d8812b15 	stw	r2,1196(sp)
 8009610:	d8013415 	stw	zero,1232(sp)
 8009614:	98803fcc 	andi	r2,r19,255
 8009618:	1080201c 	xori	r2,r2,128
 800961c:	10bfe004 	addi	r2,r2,-128
 8009620:	10000326 	beq	r2,zero,8009630 <___vfprintf_internal_r+0x61c>
 8009624:	d8c12b17 	ldw	r3,1196(sp)
 8009628:	18c00044 	addi	r3,r3,1
 800962c:	d8c12b15 	stw	r3,1196(sp)
 8009630:	e0c0008c 	andi	r3,fp,2
 8009634:	d8c12c15 	stw	r3,1200(sp)
 8009638:	18000326 	beq	r3,zero,8009648 <___vfprintf_internal_r+0x634>
 800963c:	d8c12b17 	ldw	r3,1196(sp)
 8009640:	18c00084 	addi	r3,r3,2
 8009644:	d8c12b15 	stw	r3,1196(sp)
 8009648:	e0c0210c 	andi	r3,fp,132
 800964c:	d8c13015 	stw	r3,1216(sp)
 8009650:	1801f81e 	bne	r3,zero,8009e34 <___vfprintf_internal_r+0xe20>
 8009654:	d9012e17 	ldw	r4,1208(sp)
 8009658:	d8c12b17 	ldw	r3,1196(sp)
 800965c:	20ebc83a 	sub	r21,r4,r3
 8009660:	0541f40e 	bge	zero,r21,8009e34 <___vfprintf_internal_r+0xe20>
 8009664:	02400404 	movi	r9,16
 8009668:	d8c12017 	ldw	r3,1152(sp)
 800966c:	d8811f17 	ldw	r2,1148(sp)
 8009670:	4d45750e 	bge	r9,r21,800ac48 <___vfprintf_internal_r+0x1c34>
 8009674:	014200b4 	movhi	r5,2050
 8009678:	294a0584 	addi	r5,r5,10262
 800967c:	d9413615 	stw	r5,1240(sp)
 8009680:	4827883a 	mov	r19,r9
 8009684:	048001c4 	movi	r18,7
 8009688:	00000306 	br	8009698 <___vfprintf_internal_r+0x684>
 800968c:	ad7ffc04 	addi	r21,r21,-16
 8009690:	42000204 	addi	r8,r8,8
 8009694:	9d40130e 	bge	r19,r21,80096e4 <___vfprintf_internal_r+0x6d0>
 8009698:	010200b4 	movhi	r4,2050
 800969c:	18c00404 	addi	r3,r3,16
 80096a0:	10800044 	addi	r2,r2,1
 80096a4:	210a0584 	addi	r4,r4,10262
 80096a8:	41000015 	stw	r4,0(r8)
 80096ac:	44c00115 	stw	r19,4(r8)
 80096b0:	d8c12015 	stw	r3,1152(sp)
 80096b4:	d8811f15 	stw	r2,1148(sp)
 80096b8:	90bff40e 	bge	r18,r2,800968c <__alt_data_end+0xfc00968c>
 80096bc:	b809883a 	mov	r4,r23
 80096c0:	b00b883a 	mov	r5,r22
 80096c4:	d9811e04 	addi	r6,sp,1144
 80096c8:	80110780 	call	8011078 <__sprint_r>
 80096cc:	103f691e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 80096d0:	ad7ffc04 	addi	r21,r21,-16
 80096d4:	d8c12017 	ldw	r3,1152(sp)
 80096d8:	d8811f17 	ldw	r2,1148(sp)
 80096dc:	da000404 	addi	r8,sp,16
 80096e0:	9d7fed16 	blt	r19,r21,8009698 <__alt_data_end+0xfc009698>
 80096e4:	d9413617 	ldw	r5,1240(sp)
 80096e8:	a8c7883a 	add	r3,r21,r3
 80096ec:	10800044 	addi	r2,r2,1
 80096f0:	41400015 	stw	r5,0(r8)
 80096f4:	45400115 	stw	r21,4(r8)
 80096f8:	d8c12015 	stw	r3,1152(sp)
 80096fc:	d8811f15 	stw	r2,1148(sp)
 8009700:	010001c4 	movi	r4,7
 8009704:	20832b16 	blt	r4,r2,800a3b4 <___vfprintf_internal_r+0x13a0>
 8009708:	d8812787 	ldb	r2,1182(sp)
 800970c:	42000204 	addi	r8,r8,8
 8009710:	10000c26 	beq	r2,zero,8009744 <___vfprintf_internal_r+0x730>
 8009714:	d8811f17 	ldw	r2,1148(sp)
 8009718:	d9012784 	addi	r4,sp,1182
 800971c:	18c00044 	addi	r3,r3,1
 8009720:	10800044 	addi	r2,r2,1
 8009724:	41000015 	stw	r4,0(r8)
 8009728:	01000044 	movi	r4,1
 800972c:	41000115 	stw	r4,4(r8)
 8009730:	d8c12015 	stw	r3,1152(sp)
 8009734:	d8811f15 	stw	r2,1148(sp)
 8009738:	010001c4 	movi	r4,7
 800973c:	2082c416 	blt	r4,r2,800a250 <___vfprintf_internal_r+0x123c>
 8009740:	42000204 	addi	r8,r8,8
 8009744:	d8812c17 	ldw	r2,1200(sp)
 8009748:	10000c26 	beq	r2,zero,800977c <___vfprintf_internal_r+0x768>
 800974c:	d8811f17 	ldw	r2,1148(sp)
 8009750:	d9012704 	addi	r4,sp,1180
 8009754:	18c00084 	addi	r3,r3,2
 8009758:	10800044 	addi	r2,r2,1
 800975c:	41000015 	stw	r4,0(r8)
 8009760:	01000084 	movi	r4,2
 8009764:	41000115 	stw	r4,4(r8)
 8009768:	d8c12015 	stw	r3,1152(sp)
 800976c:	d8811f15 	stw	r2,1148(sp)
 8009770:	010001c4 	movi	r4,7
 8009774:	2082be16 	blt	r4,r2,800a270 <___vfprintf_internal_r+0x125c>
 8009778:	42000204 	addi	r8,r8,8
 800977c:	d9013017 	ldw	r4,1216(sp)
 8009780:	00802004 	movi	r2,128
 8009784:	20822026 	beq	r4,r2,800a008 <___vfprintf_internal_r+0xff4>
 8009788:	d9413217 	ldw	r5,1224(sp)
 800978c:	2c67c83a 	sub	r19,r5,r17
 8009790:	04c0260e 	bge	zero,r19,800982c <___vfprintf_internal_r+0x818>
 8009794:	05400404 	movi	r21,16
 8009798:	d8811f17 	ldw	r2,1148(sp)
 800979c:	acc4720e 	bge	r21,r19,800a968 <___vfprintf_internal_r+0x1954>
 80097a0:	014200b4 	movhi	r5,2050
 80097a4:	294a0184 	addi	r5,r5,10246
 80097a8:	d9412c15 	stw	r5,1200(sp)
 80097ac:	048001c4 	movi	r18,7
 80097b0:	00000306 	br	80097c0 <___vfprintf_internal_r+0x7ac>
 80097b4:	9cfffc04 	addi	r19,r19,-16
 80097b8:	42000204 	addi	r8,r8,8
 80097bc:	acc0110e 	bge	r21,r19,8009804 <___vfprintf_internal_r+0x7f0>
 80097c0:	18c00404 	addi	r3,r3,16
 80097c4:	10800044 	addi	r2,r2,1
 80097c8:	45000015 	stw	r20,0(r8)
 80097cc:	45400115 	stw	r21,4(r8)
 80097d0:	d8c12015 	stw	r3,1152(sp)
 80097d4:	d8811f15 	stw	r2,1148(sp)
 80097d8:	90bff60e 	bge	r18,r2,80097b4 <__alt_data_end+0xfc0097b4>
 80097dc:	b809883a 	mov	r4,r23
 80097e0:	b00b883a 	mov	r5,r22
 80097e4:	d9811e04 	addi	r6,sp,1144
 80097e8:	80110780 	call	8011078 <__sprint_r>
 80097ec:	103f211e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 80097f0:	9cfffc04 	addi	r19,r19,-16
 80097f4:	d8c12017 	ldw	r3,1152(sp)
 80097f8:	d8811f17 	ldw	r2,1148(sp)
 80097fc:	da000404 	addi	r8,sp,16
 8009800:	acffef16 	blt	r21,r19,80097c0 <__alt_data_end+0xfc0097c0>
 8009804:	d9012c17 	ldw	r4,1200(sp)
 8009808:	1cc7883a 	add	r3,r3,r19
 800980c:	10800044 	addi	r2,r2,1
 8009810:	41000015 	stw	r4,0(r8)
 8009814:	44c00115 	stw	r19,4(r8)
 8009818:	d8c12015 	stw	r3,1152(sp)
 800981c:	d8811f15 	stw	r2,1148(sp)
 8009820:	010001c4 	movi	r4,7
 8009824:	20828216 	blt	r4,r2,800a230 <___vfprintf_internal_r+0x121c>
 8009828:	42000204 	addi	r8,r8,8
 800982c:	e080400c 	andi	r2,fp,256
 8009830:	1001ac1e 	bne	r2,zero,8009ee4 <___vfprintf_internal_r+0xed0>
 8009834:	d8811f17 	ldw	r2,1148(sp)
 8009838:	d9413117 	ldw	r5,1220(sp)
 800983c:	1c47883a 	add	r3,r3,r17
 8009840:	10800044 	addi	r2,r2,1
 8009844:	41400015 	stw	r5,0(r8)
 8009848:	44400115 	stw	r17,4(r8)
 800984c:	d8c12015 	stw	r3,1152(sp)
 8009850:	d8811f15 	stw	r2,1148(sp)
 8009854:	010001c4 	movi	r4,7
 8009858:	20825d16 	blt	r4,r2,800a1d0 <___vfprintf_internal_r+0x11bc>
 800985c:	42000204 	addi	r8,r8,8
 8009860:	e080010c 	andi	r2,fp,4
 8009864:	10003126 	beq	r2,zero,800992c <___vfprintf_internal_r+0x918>
 8009868:	d8812e17 	ldw	r2,1208(sp)
 800986c:	d9012b17 	ldw	r4,1196(sp)
 8009870:	1121c83a 	sub	r16,r2,r4
 8009874:	04002d0e 	bge	zero,r16,800992c <___vfprintf_internal_r+0x918>
 8009878:	04400404 	movi	r17,16
 800987c:	d8811f17 	ldw	r2,1148(sp)
 8009880:	8c05340e 	bge	r17,r16,800ad54 <___vfprintf_internal_r+0x1d40>
 8009884:	010200b4 	movhi	r4,2050
 8009888:	210a0584 	addi	r4,r4,10262
 800988c:	d9013615 	stw	r4,1240(sp)
 8009890:	048001c4 	movi	r18,7
 8009894:	00000306 	br	80098a4 <___vfprintf_internal_r+0x890>
 8009898:	843ffc04 	addi	r16,r16,-16
 800989c:	42000204 	addi	r8,r8,8
 80098a0:	8c00130e 	bge	r17,r16,80098f0 <___vfprintf_internal_r+0x8dc>
 80098a4:	014200b4 	movhi	r5,2050
 80098a8:	18c00404 	addi	r3,r3,16
 80098ac:	10800044 	addi	r2,r2,1
 80098b0:	294a0584 	addi	r5,r5,10262
 80098b4:	41400015 	stw	r5,0(r8)
 80098b8:	44400115 	stw	r17,4(r8)
 80098bc:	d8c12015 	stw	r3,1152(sp)
 80098c0:	d8811f15 	stw	r2,1148(sp)
 80098c4:	90bff40e 	bge	r18,r2,8009898 <__alt_data_end+0xfc009898>
 80098c8:	b809883a 	mov	r4,r23
 80098cc:	b00b883a 	mov	r5,r22
 80098d0:	d9811e04 	addi	r6,sp,1144
 80098d4:	80110780 	call	8011078 <__sprint_r>
 80098d8:	103ee61e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 80098dc:	843ffc04 	addi	r16,r16,-16
 80098e0:	d8c12017 	ldw	r3,1152(sp)
 80098e4:	d8811f17 	ldw	r2,1148(sp)
 80098e8:	da000404 	addi	r8,sp,16
 80098ec:	8c3fed16 	blt	r17,r16,80098a4 <__alt_data_end+0xfc0098a4>
 80098f0:	d9013617 	ldw	r4,1240(sp)
 80098f4:	1c07883a 	add	r3,r3,r16
 80098f8:	10800044 	addi	r2,r2,1
 80098fc:	41000015 	stw	r4,0(r8)
 8009900:	44000115 	stw	r16,4(r8)
 8009904:	d8c12015 	stw	r3,1152(sp)
 8009908:	d8811f15 	stw	r2,1148(sp)
 800990c:	010001c4 	movi	r4,7
 8009910:	2080060e 	bge	r4,r2,800992c <___vfprintf_internal_r+0x918>
 8009914:	b809883a 	mov	r4,r23
 8009918:	b00b883a 	mov	r5,r22
 800991c:	d9811e04 	addi	r6,sp,1144
 8009920:	80110780 	call	8011078 <__sprint_r>
 8009924:	103ed31e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 8009928:	d8c12017 	ldw	r3,1152(sp)
 800992c:	df012b17 	ldw	fp,1196(sp)
 8009930:	d9412e17 	ldw	r5,1208(sp)
 8009934:	e140010e 	bge	fp,r5,800993c <___vfprintf_internal_r+0x928>
 8009938:	2839883a 	mov	fp,r5
 800993c:	d8812f17 	ldw	r2,1212(sp)
 8009940:	1705883a 	add	r2,r2,fp
 8009944:	d8812f15 	stw	r2,1212(sp)
 8009948:	1802291e 	bne	r3,zero,800a1f0 <___vfprintf_internal_r+0x11dc>
 800994c:	d8c12a17 	ldw	r3,1192(sp)
 8009950:	d8011f15 	stw	zero,1148(sp)
 8009954:	da000404 	addi	r8,sp,16
 8009958:	18800007 	ldb	r2,0(r3)
 800995c:	103ded1e 	bne	r2,zero,8009114 <__alt_data_end+0xfc009114>
 8009960:	dc012a17 	ldw	r16,1192(sp)
 8009964:	003e0506 	br	800917c <__alt_data_end+0xfc00917c>
 8009968:	d9012d17 	ldw	r4,1204(sp)
 800996c:	d9412d17 	ldw	r5,1204(sp)
 8009970:	da012a17 	ldw	r8,1192(sp)
 8009974:	21000017 	ldw	r4,0(r4)
 8009978:	29400117 	ldw	r5,4(r5)
 800997c:	df012a15 	stw	fp,1192(sp)
 8009980:	9839883a 	mov	fp,r19
 8009984:	dcc12b03 	ldbu	r19,1196(sp)
 8009988:	d9013715 	stw	r4,1244(sp)
 800998c:	d9413915 	stw	r5,1252(sp)
 8009990:	da013f15 	stw	r8,1276(sp)
 8009994:	da413e15 	stw	r9,1272(sp)
 8009998:	dcc12785 	stb	r19,1182(sp)
 800999c:	800f9900 	call	800f990 <__fpclassifyd>
 80099a0:	d8c12d17 	ldw	r3,1204(sp)
 80099a4:	04400044 	movi	r17,1
 80099a8:	da013f17 	ldw	r8,1276(sp)
 80099ac:	1c800204 	addi	r18,r3,8
 80099b0:	da413e17 	ldw	r9,1272(sp)
 80099b4:	d9013717 	ldw	r4,1244(sp)
 80099b8:	d9413917 	ldw	r5,1252(sp)
 80099bc:	1443451e 	bne	r2,r17,800a6d4 <___vfprintf_internal_r+0x16c0>
 80099c0:	000d883a 	mov	r6,zero
 80099c4:	000f883a 	mov	r7,zero
 80099c8:	801458c0 	call	801458c <__ledf2>
 80099cc:	da013f17 	ldw	r8,1276(sp)
 80099d0:	1004fe16 	blt	r2,zero,800adcc <___vfprintf_internal_r+0x1db8>
 80099d4:	dcc12783 	ldbu	r19,1182(sp)
 80099d8:	008011c4 	movi	r2,71
 80099dc:	14045d0e 	bge	r2,r16,800ab54 <___vfprintf_internal_r+0x1b40>
 80099e0:	014200b4 	movhi	r5,2050
 80099e4:	2949ea04 	addi	r5,r5,10152
 80099e8:	d9413115 	stw	r5,1220(sp)
 80099ec:	00c000c4 	movi	r3,3
 80099f0:	00bfdfc4 	movi	r2,-129
 80099f4:	d8c12b15 	stw	r3,1196(sp)
 80099f8:	e0b8703a 	and	fp,fp,r2
 80099fc:	dc812d15 	stw	r18,1204(sp)
 8009a00:	1823883a 	mov	r17,r3
 8009a04:	d8013215 	stw	zero,1224(sp)
 8009a08:	d8013415 	stw	zero,1232(sp)
 8009a0c:	003f0106 	br	8009614 <__alt_data_end+0xfc009614>
 8009a10:	9cc00214 	ori	r19,r19,8
 8009a14:	e005883a 	mov	r2,fp
 8009a18:	e4000007 	ldb	r16,0(fp)
 8009a1c:	003de506 	br	80091b4 <__alt_data_end+0xfc0091b4>
 8009a20:	da012a17 	ldw	r8,1192(sp)
 8009a24:	df012a15 	stw	fp,1192(sp)
 8009a28:	9f000414 	ori	fp,r19,16
 8009a2c:	e0c0080c 	andi	r3,fp,32
 8009a30:	d8812d17 	ldw	r2,1204(sp)
 8009a34:	18007626 	beq	r3,zero,8009c10 <___vfprintf_internal_r+0xbfc>
 8009a38:	d9412d17 	ldw	r5,1204(sp)
 8009a3c:	14800017 	ldw	r18,0(r2)
 8009a40:	15400117 	ldw	r21,4(r2)
 8009a44:	29400204 	addi	r5,r5,8
 8009a48:	d9412d15 	stw	r5,1204(sp)
 8009a4c:	0005883a 	mov	r2,zero
 8009a50:	9546b03a 	or	r3,r18,r21
 8009a54:	d8012785 	stb	zero,1182(sp)
 8009a58:	da413215 	stw	r9,1224(sp)
 8009a5c:	0027883a 	mov	r19,zero
 8009a60:	003ecd06 	br	8009598 <__alt_data_end+0xfc009598>
 8009a64:	da012a17 	ldw	r8,1192(sp)
 8009a68:	df012a15 	stw	fp,1192(sp)
 8009a6c:	9f000414 	ori	fp,r19,16
 8009a70:	e0c0080c 	andi	r3,fp,32
 8009a74:	d8812d17 	ldw	r2,1204(sp)
 8009a78:	18002c26 	beq	r3,zero,8009b2c <___vfprintf_internal_r+0xb18>
 8009a7c:	d9012d17 	ldw	r4,1204(sp)
 8009a80:	14800017 	ldw	r18,0(r2)
 8009a84:	15400117 	ldw	r21,4(r2)
 8009a88:	21000204 	addi	r4,r4,8
 8009a8c:	d9012d15 	stw	r4,1204(sp)
 8009a90:	00800044 	movi	r2,1
 8009a94:	9546b03a 	or	r3,r18,r21
 8009a98:	003fee06 	br	8009a54 <__alt_data_end+0xfc009a54>
 8009a9c:	da012a17 	ldw	r8,1192(sp)
 8009aa0:	df012a15 	stw	fp,1192(sp)
 8009aa4:	9839883a 	mov	fp,r19
 8009aa8:	dcc12b03 	ldbu	r19,1196(sp)
 8009aac:	014200b4 	movhi	r5,2050
 8009ab0:	2949ed04 	addi	r5,r5,10164
 8009ab4:	dcc12785 	stb	r19,1182(sp)
 8009ab8:	d9413b15 	stw	r5,1260(sp)
 8009abc:	e0c0080c 	andi	r3,fp,32
 8009ac0:	d8812d17 	ldw	r2,1204(sp)
 8009ac4:	18002e26 	beq	r3,zero,8009b80 <___vfprintf_internal_r+0xb6c>
 8009ac8:	d9412d17 	ldw	r5,1204(sp)
 8009acc:	14800017 	ldw	r18,0(r2)
 8009ad0:	15400117 	ldw	r21,4(r2)
 8009ad4:	29400204 	addi	r5,r5,8
 8009ad8:	d9412d15 	stw	r5,1204(sp)
 8009adc:	e080004c 	andi	r2,fp,1
 8009ae0:	10025c26 	beq	r2,zero,800a454 <___vfprintf_internal_r+0x1440>
 8009ae4:	9546b03a 	or	r3,r18,r21
 8009ae8:	18038f26 	beq	r3,zero,800a928 <___vfprintf_internal_r+0x1914>
 8009aec:	00800c04 	movi	r2,48
 8009af0:	d8812705 	stb	r2,1180(sp)
 8009af4:	dc012745 	stb	r16,1181(sp)
 8009af8:	e7000094 	ori	fp,fp,2
 8009afc:	00800084 	movi	r2,2
 8009b00:	003fd406 	br	8009a54 <__alt_data_end+0xfc009a54>
 8009b04:	9cc00814 	ori	r19,r19,32
 8009b08:	e005883a 	mov	r2,fp
 8009b0c:	e4000007 	ldb	r16,0(fp)
 8009b10:	003da806 	br	80091b4 <__alt_data_end+0xfc0091b4>
 8009b14:	da012a17 	ldw	r8,1192(sp)
 8009b18:	df012a15 	stw	fp,1192(sp)
 8009b1c:	9839883a 	mov	fp,r19
 8009b20:	e0c0080c 	andi	r3,fp,32
 8009b24:	d8812d17 	ldw	r2,1204(sp)
 8009b28:	183fd41e 	bne	r3,zero,8009a7c <__alt_data_end+0xfc009a7c>
 8009b2c:	e0c0040c 	andi	r3,fp,16
 8009b30:	18035f26 	beq	r3,zero,800a8b0 <___vfprintf_internal_r+0x189c>
 8009b34:	d9412d17 	ldw	r5,1204(sp)
 8009b38:	14800017 	ldw	r18,0(r2)
 8009b3c:	002b883a 	mov	r21,zero
 8009b40:	29400104 	addi	r5,r5,4
 8009b44:	d9412d15 	stw	r5,1204(sp)
 8009b48:	00800044 	movi	r2,1
 8009b4c:	9007883a 	mov	r3,r18
 8009b50:	003fc006 	br	8009a54 <__alt_data_end+0xfc009a54>
 8009b54:	da012a17 	ldw	r8,1192(sp)
 8009b58:	df012a15 	stw	fp,1192(sp)
 8009b5c:	9839883a 	mov	fp,r19
 8009b60:	dcc12b03 	ldbu	r19,1196(sp)
 8009b64:	010200b4 	movhi	r4,2050
 8009b68:	2109f204 	addi	r4,r4,10184
 8009b6c:	d9013b15 	stw	r4,1260(sp)
 8009b70:	dcc12785 	stb	r19,1182(sp)
 8009b74:	e0c0080c 	andi	r3,fp,32
 8009b78:	d8812d17 	ldw	r2,1204(sp)
 8009b7c:	183fd21e 	bne	r3,zero,8009ac8 <__alt_data_end+0xfc009ac8>
 8009b80:	e0c0040c 	andi	r3,fp,16
 8009b84:	18035426 	beq	r3,zero,800a8d8 <___vfprintf_internal_r+0x18c4>
 8009b88:	d8c12d17 	ldw	r3,1204(sp)
 8009b8c:	14800017 	ldw	r18,0(r2)
 8009b90:	002b883a 	mov	r21,zero
 8009b94:	18c00104 	addi	r3,r3,4
 8009b98:	d8c12d15 	stw	r3,1204(sp)
 8009b9c:	003fcf06 	br	8009adc <__alt_data_end+0xfc009adc>
 8009ba0:	e4000007 	ldb	r16,0(fp)
 8009ba4:	00801b04 	movi	r2,108
 8009ba8:	8083f726 	beq	r16,r2,800ab88 <___vfprintf_internal_r+0x1b74>
 8009bac:	9cc00414 	ori	r19,r19,16
 8009bb0:	e005883a 	mov	r2,fp
 8009bb4:	003d7f06 	br	80091b4 <__alt_data_end+0xfc0091b4>
 8009bb8:	da012a17 	ldw	r8,1192(sp)
 8009bbc:	df012a15 	stw	fp,1192(sp)
 8009bc0:	9839883a 	mov	fp,r19
 8009bc4:	dcc12b03 	ldbu	r19,1196(sp)
 8009bc8:	e080080c 	andi	r2,fp,32
 8009bcc:	dcc12785 	stb	r19,1182(sp)
 8009bd0:	10032226 	beq	r2,zero,800a85c <___vfprintf_internal_r+0x1848>
 8009bd4:	d9412d17 	ldw	r5,1204(sp)
 8009bd8:	d9012f17 	ldw	r4,1212(sp)
 8009bdc:	28800017 	ldw	r2,0(r5)
 8009be0:	2007d7fa 	srai	r3,r4,31
 8009be4:	29400104 	addi	r5,r5,4
 8009be8:	d9412d15 	stw	r5,1204(sp)
 8009bec:	11000015 	stw	r4,0(r2)
 8009bf0:	10c00115 	stw	r3,4(r2)
 8009bf4:	003d4406 	br	8009108 <__alt_data_end+0xfc009108>
 8009bf8:	da012a17 	ldw	r8,1192(sp)
 8009bfc:	df012a15 	stw	fp,1192(sp)
 8009c00:	9839883a 	mov	fp,r19
 8009c04:	e0c0080c 	andi	r3,fp,32
 8009c08:	d8812d17 	ldw	r2,1204(sp)
 8009c0c:	183f8a1e 	bne	r3,zero,8009a38 <__alt_data_end+0xfc009a38>
 8009c10:	e0c0040c 	andi	r3,fp,16
 8009c14:	18031c26 	beq	r3,zero,800a888 <___vfprintf_internal_r+0x1874>
 8009c18:	14800017 	ldw	r18,0(r2)
 8009c1c:	d8812d17 	ldw	r2,1204(sp)
 8009c20:	002b883a 	mov	r21,zero
 8009c24:	9007883a 	mov	r3,r18
 8009c28:	10800104 	addi	r2,r2,4
 8009c2c:	d8812d15 	stw	r2,1204(sp)
 8009c30:	0005883a 	mov	r2,zero
 8009c34:	003f8706 	br	8009a54 <__alt_data_end+0xfc009a54>
 8009c38:	d9412d17 	ldw	r5,1204(sp)
 8009c3c:	00800c04 	movi	r2,48
 8009c40:	d8812705 	stb	r2,1180(sp)
 8009c44:	2c800017 	ldw	r18,0(r5)
 8009c48:	00801e04 	movi	r2,120
 8009c4c:	d8812745 	stb	r2,1181(sp)
 8009c50:	008200b4 	movhi	r2,2050
 8009c54:	1089f204 	addi	r2,r2,10184
 8009c58:	29400104 	addi	r5,r5,4
 8009c5c:	da012a17 	ldw	r8,1192(sp)
 8009c60:	d8813b15 	stw	r2,1260(sp)
 8009c64:	df012a15 	stw	fp,1192(sp)
 8009c68:	002b883a 	mov	r21,zero
 8009c6c:	9f000094 	ori	fp,r19,2
 8009c70:	d9412d15 	stw	r5,1204(sp)
 8009c74:	00800084 	movi	r2,2
 8009c78:	04001e04 	movi	r16,120
 8009c7c:	9007883a 	mov	r3,r18
 8009c80:	003f7406 	br	8009a54 <__alt_data_end+0xfc009a54>
 8009c84:	da012a17 	ldw	r8,1192(sp)
 8009c88:	df012a15 	stw	fp,1192(sp)
 8009c8c:	9839883a 	mov	fp,r19
 8009c90:	dcc12b03 	ldbu	r19,1196(sp)
 8009c94:	e080080c 	andi	r2,fp,32
 8009c98:	d8c12d17 	ldw	r3,1204(sp)
 8009c9c:	dcc12785 	stb	r19,1182(sp)
 8009ca0:	103e321e 	bne	r2,zero,800956c <__alt_data_end+0xfc00956c>
 8009ca4:	e080040c 	andi	r2,fp,16
 8009ca8:	10031326 	beq	r2,zero,800a8f8 <___vfprintf_internal_r+0x18e4>
 8009cac:	1c800017 	ldw	r18,0(r3)
 8009cb0:	d9412d17 	ldw	r5,1204(sp)
 8009cb4:	902bd7fa 	srai	r21,r18,31
 8009cb8:	29400104 	addi	r5,r5,4
 8009cbc:	d9412d15 	stw	r5,1204(sp)
 8009cc0:	a805883a 	mov	r2,r21
 8009cc4:	003e2f06 	br	8009584 <__alt_data_end+0xfc009584>
 8009cc8:	9cc01014 	ori	r19,r19,64
 8009ccc:	e005883a 	mov	r2,fp
 8009cd0:	e4000007 	ldb	r16,0(fp)
 8009cd4:	003d3706 	br	80091b4 <__alt_data_end+0xfc0091b4>
 8009cd8:	d8c12d17 	ldw	r3,1204(sp)
 8009cdc:	d9012d17 	ldw	r4,1204(sp)
 8009ce0:	da012a17 	ldw	r8,1192(sp)
 8009ce4:	18800017 	ldw	r2,0(r3)
 8009ce8:	21000104 	addi	r4,r4,4
 8009cec:	00c00044 	movi	r3,1
 8009cf0:	df012a15 	stw	fp,1192(sp)
 8009cf4:	d8c12b15 	stw	r3,1196(sp)
 8009cf8:	9839883a 	mov	fp,r19
 8009cfc:	d8012785 	stb	zero,1182(sp)
 8009d00:	d8810405 	stb	r2,1040(sp)
 8009d04:	d9012d15 	stw	r4,1204(sp)
 8009d08:	1823883a 	mov	r17,r3
 8009d0c:	d8c10404 	addi	r3,sp,1040
 8009d10:	d8013215 	stw	zero,1224(sp)
 8009d14:	d8013415 	stw	zero,1232(sp)
 8009d18:	d8c13115 	stw	r3,1220(sp)
 8009d1c:	0005883a 	mov	r2,zero
 8009d20:	003e4306 	br	8009630 <__alt_data_end+0xfc009630>
 8009d24:	d8812b07 	ldb	r2,1196(sp)
 8009d28:	1002fc1e 	bne	r2,zero,800a91c <___vfprintf_internal_r+0x1908>
 8009d2c:	00c00804 	movi	r3,32
 8009d30:	d8c12b05 	stb	r3,1196(sp)
 8009d34:	e005883a 	mov	r2,fp
 8009d38:	e4000007 	ldb	r16,0(fp)
 8009d3c:	003d1d06 	br	80091b4 <__alt_data_end+0xfc0091b4>
 8009d40:	9cc00054 	ori	r19,r19,1
 8009d44:	e005883a 	mov	r2,fp
 8009d48:	e4000007 	ldb	r16,0(fp)
 8009d4c:	003d1906 	br	80091b4 <__alt_data_end+0xfc0091b4>
 8009d50:	d9012d17 	ldw	r4,1204(sp)
 8009d54:	d9412d17 	ldw	r5,1204(sp)
 8009d58:	21000017 	ldw	r4,0(r4)
 8009d5c:	28c00104 	addi	r3,r5,4
 8009d60:	d9012e15 	stw	r4,1208(sp)
 8009d64:	20038c16 	blt	r4,zero,800ab98 <___vfprintf_internal_r+0x1b84>
 8009d68:	d8c12d15 	stw	r3,1204(sp)
 8009d6c:	e005883a 	mov	r2,fp
 8009d70:	e4000007 	ldb	r16,0(fp)
 8009d74:	003d0f06 	br	80091b4 <__alt_data_end+0xfc0091b4>
 8009d78:	00c00ac4 	movi	r3,43
 8009d7c:	d8c12b05 	stb	r3,1196(sp)
 8009d80:	e005883a 	mov	r2,fp
 8009d84:	e4000007 	ldb	r16,0(fp)
 8009d88:	003d0a06 	br	80091b4 <__alt_data_end+0xfc0091b4>
 8009d8c:	d8c12d17 	ldw	r3,1204(sp)
 8009d90:	d9012d17 	ldw	r4,1204(sp)
 8009d94:	da012a17 	ldw	r8,1192(sp)
 8009d98:	18c00017 	ldw	r3,0(r3)
 8009d9c:	df012a15 	stw	fp,1192(sp)
 8009da0:	d8012785 	stb	zero,1182(sp)
 8009da4:	d8c13115 	stw	r3,1220(sp)
 8009da8:	9839883a 	mov	fp,r19
 8009dac:	24800104 	addi	r18,r4,4
 8009db0:	1803f726 	beq	r3,zero,800ad90 <___vfprintf_internal_r+0x1d7c>
 8009db4:	d9013117 	ldw	r4,1220(sp)
 8009db8:	48038916 	blt	r9,zero,800abe0 <___vfprintf_internal_r+0x1bcc>
 8009dbc:	480d883a 	mov	r6,r9
 8009dc0:	000b883a 	mov	r5,zero
 8009dc4:	da013f15 	stw	r8,1276(sp)
 8009dc8:	da413e15 	stw	r9,1272(sp)
 8009dcc:	800ded80 	call	800ded8 <memchr>
 8009dd0:	da013f17 	ldw	r8,1276(sp)
 8009dd4:	da413e17 	ldw	r9,1272(sp)
 8009dd8:	10045926 	beq	r2,zero,800af40 <___vfprintf_internal_r+0x1f2c>
 8009ddc:	d8c13117 	ldw	r3,1220(sp)
 8009de0:	10e3c83a 	sub	r17,r2,r3
 8009de4:	4c433516 	blt	r9,r17,800aabc <___vfprintf_internal_r+0x1aa8>
 8009de8:	8805883a 	mov	r2,r17
 8009dec:	88038116 	blt	r17,zero,800abf4 <___vfprintf_internal_r+0x1be0>
 8009df0:	dcc12783 	ldbu	r19,1182(sp)
 8009df4:	d8812b15 	stw	r2,1196(sp)
 8009df8:	dc812d15 	stw	r18,1204(sp)
 8009dfc:	d8013215 	stw	zero,1224(sp)
 8009e00:	d8013415 	stw	zero,1232(sp)
 8009e04:	003e0306 	br	8009614 <__alt_data_end+0xfc009614>
 8009e08:	da012a17 	ldw	r8,1192(sp)
 8009e0c:	df012a15 	stw	fp,1192(sp)
 8009e10:	9839883a 	mov	fp,r19
 8009e14:	dcc12b03 	ldbu	r19,1196(sp)
 8009e18:	dcc12785 	stb	r19,1182(sp)
 8009e1c:	803d8f26 	beq	r16,zero,800945c <__alt_data_end+0xfc00945c>
 8009e20:	00c00044 	movi	r3,1
 8009e24:	d8c12b15 	stw	r3,1196(sp)
 8009e28:	dc010405 	stb	r16,1040(sp)
 8009e2c:	d8012785 	stb	zero,1182(sp)
 8009e30:	003fb506 	br	8009d08 <__alt_data_end+0xfc009d08>
 8009e34:	d8c12017 	ldw	r3,1152(sp)
 8009e38:	003e3506 	br	8009710 <__alt_data_end+0xfc009710>
 8009e3c:	10803fcc 	andi	r2,r2,255
 8009e40:	00c00044 	movi	r3,1
 8009e44:	10fddc1e 	bne	r2,r3,80095b8 <__alt_data_end+0xfc0095b8>
 8009e48:	a800021e 	bne	r21,zero,8009e54 <___vfprintf_internal_r+0xe40>
 8009e4c:	00800244 	movi	r2,9
 8009e50:	14801e2e 	bgeu	r2,r18,8009ecc <___vfprintf_internal_r+0xeb8>
 8009e54:	dc012b15 	stw	r16,1196(sp)
 8009e58:	dc410e04 	addi	r17,sp,1080
 8009e5c:	9021883a 	mov	r16,r18
 8009e60:	da012c15 	stw	r8,1200(sp)
 8009e64:	a825883a 	mov	r18,r21
 8009e68:	482b883a 	mov	r21,r9
 8009e6c:	8009883a 	mov	r4,r16
 8009e70:	900b883a 	mov	r5,r18
 8009e74:	01800284 	movi	r6,10
 8009e78:	000f883a 	mov	r7,zero
 8009e7c:	80135700 	call	8013570 <__umoddi3>
 8009e80:	10800c04 	addi	r2,r2,48
 8009e84:	8c7fffc4 	addi	r17,r17,-1
 8009e88:	8009883a 	mov	r4,r16
 8009e8c:	900b883a 	mov	r5,r18
 8009e90:	01800284 	movi	r6,10
 8009e94:	000f883a 	mov	r7,zero
 8009e98:	88800005 	stb	r2,0(r17)
 8009e9c:	8012f300 	call	8012f30 <__udivdi3>
 8009ea0:	1021883a 	mov	r16,r2
 8009ea4:	10c4b03a 	or	r2,r2,r3
 8009ea8:	1825883a 	mov	r18,r3
 8009eac:	103fef1e 	bne	r2,zero,8009e6c <__alt_data_end+0xfc009e6c>
 8009eb0:	d9012817 	ldw	r4,1184(sp)
 8009eb4:	dc413115 	stw	r17,1220(sp)
 8009eb8:	dc012b17 	ldw	r16,1196(sp)
 8009ebc:	da012c17 	ldw	r8,1200(sp)
 8009ec0:	a813883a 	mov	r9,r21
 8009ec4:	2463c83a 	sub	r17,r4,r17
 8009ec8:	003dcd06 	br	8009600 <__alt_data_end+0xfc009600>
 8009ecc:	94800c04 	addi	r18,r18,48
 8009ed0:	d8c10dc4 	addi	r3,sp,1079
 8009ed4:	dc810dc5 	stb	r18,1079(sp)
 8009ed8:	dc413c17 	ldw	r17,1264(sp)
 8009edc:	d8c13115 	stw	r3,1220(sp)
 8009ee0:	003dc706 	br	8009600 <__alt_data_end+0xfc009600>
 8009ee4:	00801944 	movi	r2,101
 8009ee8:	1400720e 	bge	r2,r16,800a0b4 <___vfprintf_internal_r+0x10a0>
 8009eec:	d9013717 	ldw	r4,1244(sp)
 8009ef0:	d9413917 	ldw	r5,1252(sp)
 8009ef4:	000d883a 	mov	r6,zero
 8009ef8:	000f883a 	mov	r7,zero
 8009efc:	d8c13d15 	stw	r3,1268(sp)
 8009f00:	da013f15 	stw	r8,1276(sp)
 8009f04:	80144280 	call	8014428 <__eqdf2>
 8009f08:	d8c13d17 	ldw	r3,1268(sp)
 8009f0c:	da013f17 	ldw	r8,1276(sp)
 8009f10:	1000f41e 	bne	r2,zero,800a2e4 <___vfprintf_internal_r+0x12d0>
 8009f14:	d8811f17 	ldw	r2,1148(sp)
 8009f18:	010200b4 	movhi	r4,2050
 8009f1c:	2109f904 	addi	r4,r4,10212
 8009f20:	18c00044 	addi	r3,r3,1
 8009f24:	10800044 	addi	r2,r2,1
 8009f28:	41000015 	stw	r4,0(r8)
 8009f2c:	01000044 	movi	r4,1
 8009f30:	41000115 	stw	r4,4(r8)
 8009f34:	d8c12015 	stw	r3,1152(sp)
 8009f38:	d8811f15 	stw	r2,1148(sp)
 8009f3c:	010001c4 	movi	r4,7
 8009f40:	20828d16 	blt	r4,r2,800a978 <___vfprintf_internal_r+0x1964>
 8009f44:	42000204 	addi	r8,r8,8
 8009f48:	d8812617 	ldw	r2,1176(sp)
 8009f4c:	d9413317 	ldw	r5,1228(sp)
 8009f50:	11400216 	blt	r2,r5,8009f5c <___vfprintf_internal_r+0xf48>
 8009f54:	e080004c 	andi	r2,fp,1
 8009f58:	103e4126 	beq	r2,zero,8009860 <__alt_data_end+0xfc009860>
 8009f5c:	d8813817 	ldw	r2,1248(sp)
 8009f60:	d9013517 	ldw	r4,1236(sp)
 8009f64:	d9413817 	ldw	r5,1248(sp)
 8009f68:	1887883a 	add	r3,r3,r2
 8009f6c:	d8811f17 	ldw	r2,1148(sp)
 8009f70:	41000015 	stw	r4,0(r8)
 8009f74:	41400115 	stw	r5,4(r8)
 8009f78:	10800044 	addi	r2,r2,1
 8009f7c:	d8c12015 	stw	r3,1152(sp)
 8009f80:	d8811f15 	stw	r2,1148(sp)
 8009f84:	010001c4 	movi	r4,7
 8009f88:	20830916 	blt	r4,r2,800abb0 <___vfprintf_internal_r+0x1b9c>
 8009f8c:	42000204 	addi	r8,r8,8
 8009f90:	d8813317 	ldw	r2,1228(sp)
 8009f94:	143fffc4 	addi	r16,r2,-1
 8009f98:	043e310e 	bge	zero,r16,8009860 <__alt_data_end+0xfc009860>
 8009f9c:	04400404 	movi	r17,16
 8009fa0:	d8811f17 	ldw	r2,1148(sp)
 8009fa4:	8c007e0e 	bge	r17,r16,800a1a0 <___vfprintf_internal_r+0x118c>
 8009fa8:	014200b4 	movhi	r5,2050
 8009fac:	294a0184 	addi	r5,r5,10246
 8009fb0:	d9412c15 	stw	r5,1200(sp)
 8009fb4:	04c001c4 	movi	r19,7
 8009fb8:	00000306 	br	8009fc8 <___vfprintf_internal_r+0xfb4>
 8009fbc:	42000204 	addi	r8,r8,8
 8009fc0:	843ffc04 	addi	r16,r16,-16
 8009fc4:	8c00790e 	bge	r17,r16,800a1ac <___vfprintf_internal_r+0x1198>
 8009fc8:	18c00404 	addi	r3,r3,16
 8009fcc:	10800044 	addi	r2,r2,1
 8009fd0:	45000015 	stw	r20,0(r8)
 8009fd4:	44400115 	stw	r17,4(r8)
 8009fd8:	d8c12015 	stw	r3,1152(sp)
 8009fdc:	d8811f15 	stw	r2,1148(sp)
 8009fe0:	98bff60e 	bge	r19,r2,8009fbc <__alt_data_end+0xfc009fbc>
 8009fe4:	b809883a 	mov	r4,r23
 8009fe8:	b00b883a 	mov	r5,r22
 8009fec:	d9811e04 	addi	r6,sp,1144
 8009ff0:	80110780 	call	8011078 <__sprint_r>
 8009ff4:	103d1f1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 8009ff8:	d8c12017 	ldw	r3,1152(sp)
 8009ffc:	d8811f17 	ldw	r2,1148(sp)
 800a000:	da000404 	addi	r8,sp,16
 800a004:	003fee06 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800a008:	d9412e17 	ldw	r5,1208(sp)
 800a00c:	d8812b17 	ldw	r2,1196(sp)
 800a010:	28a7c83a 	sub	r19,r5,r2
 800a014:	04fddc0e 	bge	zero,r19,8009788 <__alt_data_end+0xfc009788>
 800a018:	05400404 	movi	r21,16
 800a01c:	d8811f17 	ldw	r2,1148(sp)
 800a020:	acc3870e 	bge	r21,r19,800ae40 <___vfprintf_internal_r+0x1e2c>
 800a024:	014200b4 	movhi	r5,2050
 800a028:	294a0184 	addi	r5,r5,10246
 800a02c:	d9412c15 	stw	r5,1200(sp)
 800a030:	048001c4 	movi	r18,7
 800a034:	00000306 	br	800a044 <___vfprintf_internal_r+0x1030>
 800a038:	9cfffc04 	addi	r19,r19,-16
 800a03c:	42000204 	addi	r8,r8,8
 800a040:	acc0110e 	bge	r21,r19,800a088 <___vfprintf_internal_r+0x1074>
 800a044:	18c00404 	addi	r3,r3,16
 800a048:	10800044 	addi	r2,r2,1
 800a04c:	45000015 	stw	r20,0(r8)
 800a050:	45400115 	stw	r21,4(r8)
 800a054:	d8c12015 	stw	r3,1152(sp)
 800a058:	d8811f15 	stw	r2,1148(sp)
 800a05c:	90bff60e 	bge	r18,r2,800a038 <__alt_data_end+0xfc00a038>
 800a060:	b809883a 	mov	r4,r23
 800a064:	b00b883a 	mov	r5,r22
 800a068:	d9811e04 	addi	r6,sp,1144
 800a06c:	80110780 	call	8011078 <__sprint_r>
 800a070:	103d001e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a074:	9cfffc04 	addi	r19,r19,-16
 800a078:	d8c12017 	ldw	r3,1152(sp)
 800a07c:	d8811f17 	ldw	r2,1148(sp)
 800a080:	da000404 	addi	r8,sp,16
 800a084:	acffef16 	blt	r21,r19,800a044 <__alt_data_end+0xfc00a044>
 800a088:	d9012c17 	ldw	r4,1200(sp)
 800a08c:	1cc7883a 	add	r3,r3,r19
 800a090:	10800044 	addi	r2,r2,1
 800a094:	41000015 	stw	r4,0(r8)
 800a098:	44c00115 	stw	r19,4(r8)
 800a09c:	d8c12015 	stw	r3,1152(sp)
 800a0a0:	d8811f15 	stw	r2,1148(sp)
 800a0a4:	010001c4 	movi	r4,7
 800a0a8:	20817816 	blt	r4,r2,800a68c <___vfprintf_internal_r+0x1678>
 800a0ac:	42000204 	addi	r8,r8,8
 800a0b0:	003db506 	br	8009788 <__alt_data_end+0xfc009788>
 800a0b4:	d9413317 	ldw	r5,1228(sp)
 800a0b8:	00800044 	movi	r2,1
 800a0bc:	18c00044 	addi	r3,r3,1
 800a0c0:	11413e0e 	bge	r2,r5,800a5bc <___vfprintf_internal_r+0x15a8>
 800a0c4:	dc011f17 	ldw	r16,1148(sp)
 800a0c8:	d8813117 	ldw	r2,1220(sp)
 800a0cc:	d8c12015 	stw	r3,1152(sp)
 800a0d0:	84000044 	addi	r16,r16,1
 800a0d4:	40800015 	stw	r2,0(r8)
 800a0d8:	00800044 	movi	r2,1
 800a0dc:	40800115 	stw	r2,4(r8)
 800a0e0:	dc011f15 	stw	r16,1148(sp)
 800a0e4:	008001c4 	movi	r2,7
 800a0e8:	14015616 	blt	r2,r16,800a644 <___vfprintf_internal_r+0x1630>
 800a0ec:	42000204 	addi	r8,r8,8
 800a0f0:	d9013817 	ldw	r4,1248(sp)
 800a0f4:	d9413517 	ldw	r5,1236(sp)
 800a0f8:	84000044 	addi	r16,r16,1
 800a0fc:	1907883a 	add	r3,r3,r4
 800a100:	41400015 	stw	r5,0(r8)
 800a104:	41000115 	stw	r4,4(r8)
 800a108:	d8c12015 	stw	r3,1152(sp)
 800a10c:	dc011f15 	stw	r16,1148(sp)
 800a110:	008001c4 	movi	r2,7
 800a114:	14015416 	blt	r2,r16,800a668 <___vfprintf_internal_r+0x1654>
 800a118:	44400204 	addi	r17,r8,8
 800a11c:	d9013717 	ldw	r4,1244(sp)
 800a120:	d9413917 	ldw	r5,1252(sp)
 800a124:	000d883a 	mov	r6,zero
 800a128:	000f883a 	mov	r7,zero
 800a12c:	d8c13d15 	stw	r3,1268(sp)
 800a130:	80144280 	call	8014428 <__eqdf2>
 800a134:	d8c13d17 	ldw	r3,1268(sp)
 800a138:	1000a726 	beq	r2,zero,800a3d8 <___vfprintf_internal_r+0x13c4>
 800a13c:	d9013317 	ldw	r4,1228(sp)
 800a140:	d9413117 	ldw	r5,1220(sp)
 800a144:	84000044 	addi	r16,r16,1
 800a148:	20bfffc4 	addi	r2,r4,-1
 800a14c:	1887883a 	add	r3,r3,r2
 800a150:	29000044 	addi	r4,r5,1
 800a154:	88800115 	stw	r2,4(r17)
 800a158:	89000015 	stw	r4,0(r17)
 800a15c:	d8c12015 	stw	r3,1152(sp)
 800a160:	dc011f15 	stw	r16,1148(sp)
 800a164:	008001c4 	movi	r2,7
 800a168:	14012d16 	blt	r2,r16,800a620 <___vfprintf_internal_r+0x160c>
 800a16c:	8c400204 	addi	r17,r17,8
 800a170:	d9413a17 	ldw	r5,1256(sp)
 800a174:	dcc122c4 	addi	r19,sp,1163
 800a178:	84000044 	addi	r16,r16,1
 800a17c:	28c7883a 	add	r3,r5,r3
 800a180:	8cc00015 	stw	r19,0(r17)
 800a184:	89400115 	stw	r5,4(r17)
 800a188:	d8c12015 	stw	r3,1152(sp)
 800a18c:	dc011f15 	stw	r16,1148(sp)
 800a190:	008001c4 	movi	r2,7
 800a194:	14000e16 	blt	r2,r16,800a1d0 <___vfprintf_internal_r+0x11bc>
 800a198:	8a000204 	addi	r8,r17,8
 800a19c:	003db006 	br	8009860 <__alt_data_end+0xfc009860>
 800a1a0:	010200b4 	movhi	r4,2050
 800a1a4:	210a0184 	addi	r4,r4,10246
 800a1a8:	d9012c15 	stw	r4,1200(sp)
 800a1ac:	d9012c17 	ldw	r4,1200(sp)
 800a1b0:	1c07883a 	add	r3,r3,r16
 800a1b4:	44000115 	stw	r16,4(r8)
 800a1b8:	41000015 	stw	r4,0(r8)
 800a1bc:	10800044 	addi	r2,r2,1
 800a1c0:	d8c12015 	stw	r3,1152(sp)
 800a1c4:	d8811f15 	stw	r2,1148(sp)
 800a1c8:	010001c4 	movi	r4,7
 800a1cc:	20bda30e 	bge	r4,r2,800985c <__alt_data_end+0xfc00985c>
 800a1d0:	b809883a 	mov	r4,r23
 800a1d4:	b00b883a 	mov	r5,r22
 800a1d8:	d9811e04 	addi	r6,sp,1144
 800a1dc:	80110780 	call	8011078 <__sprint_r>
 800a1e0:	103ca41e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a1e4:	d8c12017 	ldw	r3,1152(sp)
 800a1e8:	da000404 	addi	r8,sp,16
 800a1ec:	003d9c06 	br	8009860 <__alt_data_end+0xfc009860>
 800a1f0:	b809883a 	mov	r4,r23
 800a1f4:	b00b883a 	mov	r5,r22
 800a1f8:	d9811e04 	addi	r6,sp,1144
 800a1fc:	80110780 	call	8011078 <__sprint_r>
 800a200:	103dd226 	beq	r2,zero,800994c <__alt_data_end+0xfc00994c>
 800a204:	003c9b06 	br	8009474 <__alt_data_end+0xfc009474>
 800a208:	10803fcc 	andi	r2,r2,255
 800a20c:	1000311e 	bne	r2,zero,800a2d4 <___vfprintf_internal_r+0x12c0>
 800a210:	e080004c 	andi	r2,fp,1
 800a214:	10002f26 	beq	r2,zero,800a2d4 <___vfprintf_internal_r+0x12c0>
 800a218:	00800c04 	movi	r2,48
 800a21c:	d8c10dc4 	addi	r3,sp,1079
 800a220:	d8810dc5 	stb	r2,1079(sp)
 800a224:	dc413c17 	ldw	r17,1264(sp)
 800a228:	d8c13115 	stw	r3,1220(sp)
 800a22c:	003cf406 	br	8009600 <__alt_data_end+0xfc009600>
 800a230:	b809883a 	mov	r4,r23
 800a234:	b00b883a 	mov	r5,r22
 800a238:	d9811e04 	addi	r6,sp,1144
 800a23c:	80110780 	call	8011078 <__sprint_r>
 800a240:	103c8c1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a244:	d8c12017 	ldw	r3,1152(sp)
 800a248:	da000404 	addi	r8,sp,16
 800a24c:	003d7706 	br	800982c <__alt_data_end+0xfc00982c>
 800a250:	b809883a 	mov	r4,r23
 800a254:	b00b883a 	mov	r5,r22
 800a258:	d9811e04 	addi	r6,sp,1144
 800a25c:	80110780 	call	8011078 <__sprint_r>
 800a260:	103c841e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a264:	d8c12017 	ldw	r3,1152(sp)
 800a268:	da000404 	addi	r8,sp,16
 800a26c:	003d3506 	br	8009744 <__alt_data_end+0xfc009744>
 800a270:	b809883a 	mov	r4,r23
 800a274:	b00b883a 	mov	r5,r22
 800a278:	d9811e04 	addi	r6,sp,1144
 800a27c:	80110780 	call	8011078 <__sprint_r>
 800a280:	103c7c1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a284:	d8c12017 	ldw	r3,1152(sp)
 800a288:	da000404 	addi	r8,sp,16
 800a28c:	003d3b06 	br	800977c <__alt_data_end+0xfc00977c>
 800a290:	d9413b17 	ldw	r5,1260(sp)
 800a294:	d8c10e04 	addi	r3,sp,1080
 800a298:	908003cc 	andi	r2,r18,15
 800a29c:	a808973a 	slli	r4,r21,28
 800a2a0:	2885883a 	add	r2,r5,r2
 800a2a4:	9024d13a 	srli	r18,r18,4
 800a2a8:	10800003 	ldbu	r2,0(r2)
 800a2ac:	a82ad13a 	srli	r21,r21,4
 800a2b0:	18ffffc4 	addi	r3,r3,-1
 800a2b4:	24a4b03a 	or	r18,r4,r18
 800a2b8:	18800005 	stb	r2,0(r3)
 800a2bc:	9544b03a 	or	r2,r18,r21
 800a2c0:	103ff51e 	bne	r2,zero,800a298 <__alt_data_end+0xfc00a298>
 800a2c4:	d9412817 	ldw	r5,1184(sp)
 800a2c8:	d8c13115 	stw	r3,1220(sp)
 800a2cc:	28e3c83a 	sub	r17,r5,r3
 800a2d0:	003ccb06 	br	8009600 <__alt_data_end+0xfc009600>
 800a2d4:	d8c10e04 	addi	r3,sp,1080
 800a2d8:	0023883a 	mov	r17,zero
 800a2dc:	d8c13115 	stw	r3,1220(sp)
 800a2e0:	003cc706 	br	8009600 <__alt_data_end+0xfc009600>
 800a2e4:	dc012617 	ldw	r16,1176(sp)
 800a2e8:	0401ab0e 	bge	zero,r16,800a998 <___vfprintf_internal_r+0x1984>
 800a2ec:	d8813317 	ldw	r2,1228(sp)
 800a2f0:	d9413117 	ldw	r5,1220(sp)
 800a2f4:	d9013417 	ldw	r4,1232(sp)
 800a2f8:	1023883a 	mov	r17,r2
 800a2fc:	28a1883a 	add	r16,r5,r2
 800a300:	2080010e 	bge	r4,r2,800a308 <___vfprintf_internal_r+0x12f4>
 800a304:	2023883a 	mov	r17,r4
 800a308:	04400b0e 	bge	zero,r17,800a338 <___vfprintf_internal_r+0x1324>
 800a30c:	d8811f17 	ldw	r2,1148(sp)
 800a310:	d9413117 	ldw	r5,1220(sp)
 800a314:	1c47883a 	add	r3,r3,r17
 800a318:	10800044 	addi	r2,r2,1
 800a31c:	41400015 	stw	r5,0(r8)
 800a320:	44400115 	stw	r17,4(r8)
 800a324:	d8c12015 	stw	r3,1152(sp)
 800a328:	d8811f15 	stw	r2,1148(sp)
 800a32c:	010001c4 	movi	r4,7
 800a330:	20826716 	blt	r4,r2,800acd0 <___vfprintf_internal_r+0x1cbc>
 800a334:	42000204 	addi	r8,r8,8
 800a338:	88026316 	blt	r17,zero,800acc8 <___vfprintf_internal_r+0x1cb4>
 800a33c:	d8813417 	ldw	r2,1232(sp)
 800a340:	1463c83a 	sub	r17,r2,r17
 800a344:	0440590e 	bge	zero,r17,800a4ac <___vfprintf_internal_r+0x1498>
 800a348:	04c00404 	movi	r19,16
 800a34c:	d8811f17 	ldw	r2,1148(sp)
 800a350:	9c41770e 	bge	r19,r17,800a930 <___vfprintf_internal_r+0x191c>
 800a354:	014200b4 	movhi	r5,2050
 800a358:	294a0184 	addi	r5,r5,10246
 800a35c:	d9412c15 	stw	r5,1200(sp)
 800a360:	054001c4 	movi	r21,7
 800a364:	00000306 	br	800a374 <___vfprintf_internal_r+0x1360>
 800a368:	42000204 	addi	r8,r8,8
 800a36c:	8c7ffc04 	addi	r17,r17,-16
 800a370:	9c41720e 	bge	r19,r17,800a93c <___vfprintf_internal_r+0x1928>
 800a374:	18c00404 	addi	r3,r3,16
 800a378:	10800044 	addi	r2,r2,1
 800a37c:	45000015 	stw	r20,0(r8)
 800a380:	44c00115 	stw	r19,4(r8)
 800a384:	d8c12015 	stw	r3,1152(sp)
 800a388:	d8811f15 	stw	r2,1148(sp)
 800a38c:	a8bff60e 	bge	r21,r2,800a368 <__alt_data_end+0xfc00a368>
 800a390:	b809883a 	mov	r4,r23
 800a394:	b00b883a 	mov	r5,r22
 800a398:	d9811e04 	addi	r6,sp,1144
 800a39c:	80110780 	call	8011078 <__sprint_r>
 800a3a0:	103c341e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a3a4:	d8c12017 	ldw	r3,1152(sp)
 800a3a8:	d8811f17 	ldw	r2,1148(sp)
 800a3ac:	da000404 	addi	r8,sp,16
 800a3b0:	003fee06 	br	800a36c <__alt_data_end+0xfc00a36c>
 800a3b4:	b809883a 	mov	r4,r23
 800a3b8:	b00b883a 	mov	r5,r22
 800a3bc:	d9811e04 	addi	r6,sp,1144
 800a3c0:	80110780 	call	8011078 <__sprint_r>
 800a3c4:	103c2b1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a3c8:	d8c12017 	ldw	r3,1152(sp)
 800a3cc:	d8812787 	ldb	r2,1182(sp)
 800a3d0:	da000404 	addi	r8,sp,16
 800a3d4:	003cce06 	br	8009710 <__alt_data_end+0xfc009710>
 800a3d8:	d8813317 	ldw	r2,1228(sp)
 800a3dc:	14ffffc4 	addi	r19,r2,-1
 800a3e0:	04ff630e 	bge	zero,r19,800a170 <__alt_data_end+0xfc00a170>
 800a3e4:	05400404 	movi	r21,16
 800a3e8:	acc0810e 	bge	r21,r19,800a5f0 <___vfprintf_internal_r+0x15dc>
 800a3ec:	014200b4 	movhi	r5,2050
 800a3f0:	294a0184 	addi	r5,r5,10246
 800a3f4:	d9412c15 	stw	r5,1200(sp)
 800a3f8:	01c001c4 	movi	r7,7
 800a3fc:	00000306 	br	800a40c <___vfprintf_internal_r+0x13f8>
 800a400:	8c400204 	addi	r17,r17,8
 800a404:	9cfffc04 	addi	r19,r19,-16
 800a408:	acc07c0e 	bge	r21,r19,800a5fc <___vfprintf_internal_r+0x15e8>
 800a40c:	18c00404 	addi	r3,r3,16
 800a410:	84000044 	addi	r16,r16,1
 800a414:	8d000015 	stw	r20,0(r17)
 800a418:	8d400115 	stw	r21,4(r17)
 800a41c:	d8c12015 	stw	r3,1152(sp)
 800a420:	dc011f15 	stw	r16,1148(sp)
 800a424:	3c3ff60e 	bge	r7,r16,800a400 <__alt_data_end+0xfc00a400>
 800a428:	b809883a 	mov	r4,r23
 800a42c:	b00b883a 	mov	r5,r22
 800a430:	d9811e04 	addi	r6,sp,1144
 800a434:	d9c13d15 	stw	r7,1268(sp)
 800a438:	80110780 	call	8011078 <__sprint_r>
 800a43c:	d9c13d17 	ldw	r7,1268(sp)
 800a440:	103c0c1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a444:	d8c12017 	ldw	r3,1152(sp)
 800a448:	dc011f17 	ldw	r16,1148(sp)
 800a44c:	dc400404 	addi	r17,sp,16
 800a450:	003fec06 	br	800a404 <__alt_data_end+0xfc00a404>
 800a454:	00800084 	movi	r2,2
 800a458:	9546b03a 	or	r3,r18,r21
 800a45c:	003d7d06 	br	8009a54 <__alt_data_end+0xfc009a54>
 800a460:	10803fcc 	andi	r2,r2,255
 800a464:	1080201c 	xori	r2,r2,128
 800a468:	10bfe004 	addi	r2,r2,-128
 800a46c:	01000c04 	movi	r4,48
 800a470:	1101d726 	beq	r2,r4,800abd0 <___vfprintf_internal_r+0x1bbc>
 800a474:	d9413117 	ldw	r5,1220(sp)
 800a478:	d8812817 	ldw	r2,1184(sp)
 800a47c:	193fffc5 	stb	r4,-1(r3)
 800a480:	297fffc4 	addi	r5,r5,-1
 800a484:	d9413115 	stw	r5,1220(sp)
 800a488:	1163c83a 	sub	r17,r2,r5
 800a48c:	003c5c06 	br	8009600 <__alt_data_end+0xfc009600>
 800a490:	b809883a 	mov	r4,r23
 800a494:	b00b883a 	mov	r5,r22
 800a498:	d9811e04 	addi	r6,sp,1144
 800a49c:	80110780 	call	8011078 <__sprint_r>
 800a4a0:	103bf41e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a4a4:	d8c12017 	ldw	r3,1152(sp)
 800a4a8:	da000404 	addi	r8,sp,16
 800a4ac:	d9413117 	ldw	r5,1220(sp)
 800a4b0:	d9013417 	ldw	r4,1232(sp)
 800a4b4:	d8812617 	ldw	r2,1176(sp)
 800a4b8:	2923883a 	add	r17,r5,r4
 800a4bc:	d9413317 	ldw	r5,1228(sp)
 800a4c0:	11400216 	blt	r2,r5,800a4cc <___vfprintf_internal_r+0x14b8>
 800a4c4:	e100004c 	andi	r4,fp,1
 800a4c8:	20000d26 	beq	r4,zero,800a500 <___vfprintf_internal_r+0x14ec>
 800a4cc:	d9013817 	ldw	r4,1248(sp)
 800a4d0:	d9413517 	ldw	r5,1236(sp)
 800a4d4:	1907883a 	add	r3,r3,r4
 800a4d8:	d9011f17 	ldw	r4,1148(sp)
 800a4dc:	41400015 	stw	r5,0(r8)
 800a4e0:	d9413817 	ldw	r5,1248(sp)
 800a4e4:	21000044 	addi	r4,r4,1
 800a4e8:	d8c12015 	stw	r3,1152(sp)
 800a4ec:	41400115 	stw	r5,4(r8)
 800a4f0:	d9011f15 	stw	r4,1148(sp)
 800a4f4:	014001c4 	movi	r5,7
 800a4f8:	2901fd16 	blt	r5,r4,800acf0 <___vfprintf_internal_r+0x1cdc>
 800a4fc:	42000204 	addi	r8,r8,8
 800a500:	d9013317 	ldw	r4,1228(sp)
 800a504:	2085c83a 	sub	r2,r4,r2
 800a508:	8449c83a 	sub	r4,r16,r17
 800a50c:	1021883a 	mov	r16,r2
 800a510:	2080010e 	bge	r4,r2,800a518 <___vfprintf_internal_r+0x1504>
 800a514:	2021883a 	mov	r16,r4
 800a518:	04000a0e 	bge	zero,r16,800a544 <___vfprintf_internal_r+0x1530>
 800a51c:	d9011f17 	ldw	r4,1148(sp)
 800a520:	1c07883a 	add	r3,r3,r16
 800a524:	44400015 	stw	r17,0(r8)
 800a528:	21000044 	addi	r4,r4,1
 800a52c:	44000115 	stw	r16,4(r8)
 800a530:	d8c12015 	stw	r3,1152(sp)
 800a534:	d9011f15 	stw	r4,1148(sp)
 800a538:	014001c4 	movi	r5,7
 800a53c:	29020916 	blt	r5,r4,800ad64 <___vfprintf_internal_r+0x1d50>
 800a540:	42000204 	addi	r8,r8,8
 800a544:	80020116 	blt	r16,zero,800ad4c <___vfprintf_internal_r+0x1d38>
 800a548:	1421c83a 	sub	r16,r2,r16
 800a54c:	043cc40e 	bge	zero,r16,8009860 <__alt_data_end+0xfc009860>
 800a550:	04400404 	movi	r17,16
 800a554:	d8811f17 	ldw	r2,1148(sp)
 800a558:	8c3f110e 	bge	r17,r16,800a1a0 <__alt_data_end+0xfc00a1a0>
 800a55c:	014200b4 	movhi	r5,2050
 800a560:	294a0184 	addi	r5,r5,10246
 800a564:	d9412c15 	stw	r5,1200(sp)
 800a568:	04c001c4 	movi	r19,7
 800a56c:	00000306 	br	800a57c <___vfprintf_internal_r+0x1568>
 800a570:	42000204 	addi	r8,r8,8
 800a574:	843ffc04 	addi	r16,r16,-16
 800a578:	8c3f0c0e 	bge	r17,r16,800a1ac <__alt_data_end+0xfc00a1ac>
 800a57c:	18c00404 	addi	r3,r3,16
 800a580:	10800044 	addi	r2,r2,1
 800a584:	45000015 	stw	r20,0(r8)
 800a588:	44400115 	stw	r17,4(r8)
 800a58c:	d8c12015 	stw	r3,1152(sp)
 800a590:	d8811f15 	stw	r2,1148(sp)
 800a594:	98bff60e 	bge	r19,r2,800a570 <__alt_data_end+0xfc00a570>
 800a598:	b809883a 	mov	r4,r23
 800a59c:	b00b883a 	mov	r5,r22
 800a5a0:	d9811e04 	addi	r6,sp,1144
 800a5a4:	80110780 	call	8011078 <__sprint_r>
 800a5a8:	103bb21e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a5ac:	d8c12017 	ldw	r3,1152(sp)
 800a5b0:	d8811f17 	ldw	r2,1148(sp)
 800a5b4:	da000404 	addi	r8,sp,16
 800a5b8:	003fee06 	br	800a574 <__alt_data_end+0xfc00a574>
 800a5bc:	e088703a 	and	r4,fp,r2
 800a5c0:	203ec01e 	bne	r4,zero,800a0c4 <__alt_data_end+0xfc00a0c4>
 800a5c4:	dc011f17 	ldw	r16,1148(sp)
 800a5c8:	d9013117 	ldw	r4,1220(sp)
 800a5cc:	40800115 	stw	r2,4(r8)
 800a5d0:	84000044 	addi	r16,r16,1
 800a5d4:	41000015 	stw	r4,0(r8)
 800a5d8:	d8c12015 	stw	r3,1152(sp)
 800a5dc:	dc011f15 	stw	r16,1148(sp)
 800a5e0:	008001c4 	movi	r2,7
 800a5e4:	14000e16 	blt	r2,r16,800a620 <___vfprintf_internal_r+0x160c>
 800a5e8:	44400204 	addi	r17,r8,8
 800a5ec:	003ee006 	br	800a170 <__alt_data_end+0xfc00a170>
 800a5f0:	010200b4 	movhi	r4,2050
 800a5f4:	210a0184 	addi	r4,r4,10246
 800a5f8:	d9012c15 	stw	r4,1200(sp)
 800a5fc:	d8812c17 	ldw	r2,1200(sp)
 800a600:	1cc7883a 	add	r3,r3,r19
 800a604:	84000044 	addi	r16,r16,1
 800a608:	88800015 	stw	r2,0(r17)
 800a60c:	8cc00115 	stw	r19,4(r17)
 800a610:	d8c12015 	stw	r3,1152(sp)
 800a614:	dc011f15 	stw	r16,1148(sp)
 800a618:	008001c4 	movi	r2,7
 800a61c:	143ed30e 	bge	r2,r16,800a16c <__alt_data_end+0xfc00a16c>
 800a620:	b809883a 	mov	r4,r23
 800a624:	b00b883a 	mov	r5,r22
 800a628:	d9811e04 	addi	r6,sp,1144
 800a62c:	80110780 	call	8011078 <__sprint_r>
 800a630:	103b901e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a634:	d8c12017 	ldw	r3,1152(sp)
 800a638:	dc011f17 	ldw	r16,1148(sp)
 800a63c:	dc400404 	addi	r17,sp,16
 800a640:	003ecb06 	br	800a170 <__alt_data_end+0xfc00a170>
 800a644:	b809883a 	mov	r4,r23
 800a648:	b00b883a 	mov	r5,r22
 800a64c:	d9811e04 	addi	r6,sp,1144
 800a650:	80110780 	call	8011078 <__sprint_r>
 800a654:	103b871e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a658:	d8c12017 	ldw	r3,1152(sp)
 800a65c:	dc011f17 	ldw	r16,1148(sp)
 800a660:	da000404 	addi	r8,sp,16
 800a664:	003ea206 	br	800a0f0 <__alt_data_end+0xfc00a0f0>
 800a668:	b809883a 	mov	r4,r23
 800a66c:	b00b883a 	mov	r5,r22
 800a670:	d9811e04 	addi	r6,sp,1144
 800a674:	80110780 	call	8011078 <__sprint_r>
 800a678:	103b7e1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a67c:	d8c12017 	ldw	r3,1152(sp)
 800a680:	dc011f17 	ldw	r16,1148(sp)
 800a684:	dc400404 	addi	r17,sp,16
 800a688:	003ea406 	br	800a11c <__alt_data_end+0xfc00a11c>
 800a68c:	b809883a 	mov	r4,r23
 800a690:	b00b883a 	mov	r5,r22
 800a694:	d9811e04 	addi	r6,sp,1144
 800a698:	80110780 	call	8011078 <__sprint_r>
 800a69c:	103b751e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a6a0:	d8c12017 	ldw	r3,1152(sp)
 800a6a4:	da000404 	addi	r8,sp,16
 800a6a8:	003c3706 	br	8009788 <__alt_data_end+0xfc009788>
 800a6ac:	04a5c83a 	sub	r18,zero,r18
 800a6b0:	9004c03a 	cmpne	r2,r18,zero
 800a6b4:	056bc83a 	sub	r21,zero,r21
 800a6b8:	a8abc83a 	sub	r21,r21,r2
 800a6bc:	04c00b44 	movi	r19,45
 800a6c0:	dcc12785 	stb	r19,1182(sp)
 800a6c4:	da413215 	stw	r9,1224(sp)
 800a6c8:	00800044 	movi	r2,1
 800a6cc:	9546b03a 	or	r3,r18,r21
 800a6d0:	003bb106 	br	8009598 <__alt_data_end+0xfc009598>
 800a6d4:	da013f15 	stw	r8,1276(sp)
 800a6d8:	da413e15 	stw	r9,1272(sp)
 800a6dc:	800f9900 	call	800f990 <__fpclassifyd>
 800a6e0:	da013f17 	ldw	r8,1276(sp)
 800a6e4:	da413e17 	ldw	r9,1272(sp)
 800a6e8:	1000e526 	beq	r2,zero,800aa80 <___vfprintf_internal_r+0x1a6c>
 800a6ec:	04fff7c4 	movi	r19,-33
 800a6f0:	00bfffc4 	movi	r2,-1
 800a6f4:	84e6703a 	and	r19,r16,r19
 800a6f8:	48822926 	beq	r9,r2,800afa0 <___vfprintf_internal_r+0x1f8c>
 800a6fc:	008011c4 	movi	r2,71
 800a700:	98821626 	beq	r19,r2,800af5c <___vfprintf_internal_r+0x1f48>
 800a704:	d9013917 	ldw	r4,1252(sp)
 800a708:	e0c04014 	ori	r3,fp,256
 800a70c:	d8c12d15 	stw	r3,1204(sp)
 800a710:	20021f16 	blt	r4,zero,800af90 <___vfprintf_internal_r+0x1f7c>
 800a714:	dc413917 	ldw	r17,1252(sp)
 800a718:	d8012b05 	stb	zero,1196(sp)
 800a71c:	00801984 	movi	r2,102
 800a720:	80814d26 	beq	r16,r2,800ac58 <___vfprintf_internal_r+0x1c44>
 800a724:	00801184 	movi	r2,70
 800a728:	80814b26 	beq	r16,r2,800ac58 <___vfprintf_internal_r+0x1c44>
 800a72c:	00801144 	movi	r2,69
 800a730:	98821d26 	beq	r19,r2,800afa8 <___vfprintf_internal_r+0x1f94>
 800a734:	482b883a 	mov	r21,r9
 800a738:	d8812604 	addi	r2,sp,1176
 800a73c:	d8800115 	stw	r2,4(sp)
 800a740:	d9413717 	ldw	r5,1244(sp)
 800a744:	d8812504 	addi	r2,sp,1172
 800a748:	d8800215 	stw	r2,8(sp)
 800a74c:	d8812104 	addi	r2,sp,1156
 800a750:	dd400015 	stw	r21,0(sp)
 800a754:	d8800315 	stw	r2,12(sp)
 800a758:	b809883a 	mov	r4,r23
 800a75c:	880d883a 	mov	r6,r17
 800a760:	01c00084 	movi	r7,2
 800a764:	da013f15 	stw	r8,1276(sp)
 800a768:	da413e15 	stw	r9,1272(sp)
 800a76c:	800b48c0 	call	800b48c <_dtoa_r>
 800a770:	d8813115 	stw	r2,1220(sp)
 800a774:	008019c4 	movi	r2,103
 800a778:	da013f17 	ldw	r8,1276(sp)
 800a77c:	da413e17 	ldw	r9,1272(sp)
 800a780:	80800226 	beq	r16,r2,800a78c <___vfprintf_internal_r+0x1778>
 800a784:	008011c4 	movi	r2,71
 800a788:	8081451e 	bne	r16,r2,800aca0 <___vfprintf_internal_r+0x1c8c>
 800a78c:	e080004c 	andi	r2,fp,1
 800a790:	10021e26 	beq	r2,zero,800b00c <___vfprintf_internal_r+0x1ff8>
 800a794:	d8c13117 	ldw	r3,1220(sp)
 800a798:	1d55883a 	add	r10,r3,r21
 800a79c:	d9013717 	ldw	r4,1244(sp)
 800a7a0:	880b883a 	mov	r5,r17
 800a7a4:	000d883a 	mov	r6,zero
 800a7a8:	000f883a 	mov	r7,zero
 800a7ac:	da013f15 	stw	r8,1276(sp)
 800a7b0:	da413e15 	stw	r9,1272(sp)
 800a7b4:	da813d15 	stw	r10,1268(sp)
 800a7b8:	80144280 	call	8014428 <__eqdf2>
 800a7bc:	da013f17 	ldw	r8,1276(sp)
 800a7c0:	da413e17 	ldw	r9,1272(sp)
 800a7c4:	da813d17 	ldw	r10,1268(sp)
 800a7c8:	1001a126 	beq	r2,zero,800ae50 <___vfprintf_internal_r+0x1e3c>
 800a7cc:	d8812117 	ldw	r2,1156(sp)
 800a7d0:	1280062e 	bgeu	r2,r10,800a7ec <___vfprintf_internal_r+0x17d8>
 800a7d4:	01000c04 	movi	r4,48
 800a7d8:	10c00044 	addi	r3,r2,1
 800a7dc:	d8c12115 	stw	r3,1156(sp)
 800a7e0:	11000005 	stb	r4,0(r2)
 800a7e4:	d8812117 	ldw	r2,1156(sp)
 800a7e8:	12bffb36 	bltu	r2,r10,800a7d8 <__alt_data_end+0xfc00a7d8>
 800a7ec:	d8c13117 	ldw	r3,1220(sp)
 800a7f0:	10c5c83a 	sub	r2,r2,r3
 800a7f4:	d8813315 	stw	r2,1228(sp)
 800a7f8:	008011c4 	movi	r2,71
 800a7fc:	98818926 	beq	r19,r2,800ae24 <___vfprintf_internal_r+0x1e10>
 800a800:	00801944 	movi	r2,101
 800a804:	14023c0e 	bge	r2,r16,800b0f8 <___vfprintf_internal_r+0x20e4>
 800a808:	d8c12617 	ldw	r3,1176(sp)
 800a80c:	00801984 	movi	r2,102
 800a810:	d8c13415 	stw	r3,1232(sp)
 800a814:	8081ef26 	beq	r16,r2,800afd4 <___vfprintf_internal_r+0x1fc0>
 800a818:	d8c13417 	ldw	r3,1232(sp)
 800a81c:	d9013317 	ldw	r4,1228(sp)
 800a820:	1901e316 	blt	r3,r4,800afb0 <___vfprintf_internal_r+0x1f9c>
 800a824:	e080004c 	andi	r2,fp,1
 800a828:	1001f426 	beq	r2,zero,800affc <___vfprintf_internal_r+0x1fe8>
 800a82c:	d8c13417 	ldw	r3,1232(sp)
 800a830:	1c400044 	addi	r17,r3,1
 800a834:	8839883a 	mov	fp,r17
 800a838:	8801e416 	blt	r17,zero,800afcc <___vfprintf_internal_r+0x1fb8>
 800a83c:	dd412b07 	ldb	r21,1196(sp)
 800a840:	a801701e 	bne	r21,zero,800ae04 <___vfprintf_internal_r+0x1df0>
 800a844:	df012b15 	stw	fp,1196(sp)
 800a848:	dcc12783 	ldbu	r19,1182(sp)
 800a84c:	df012d17 	ldw	fp,1204(sp)
 800a850:	d8013215 	stw	zero,1224(sp)
 800a854:	dc812d15 	stw	r18,1204(sp)
 800a858:	003b6e06 	br	8009614 <__alt_data_end+0xfc009614>
 800a85c:	e080040c 	andi	r2,fp,16
 800a860:	1000b51e 	bne	r2,zero,800ab38 <___vfprintf_internal_r+0x1b24>
 800a864:	e080100c 	andi	r2,fp,64
 800a868:	10015b26 	beq	r2,zero,800add8 <___vfprintf_internal_r+0x1dc4>
 800a86c:	d9012d17 	ldw	r4,1204(sp)
 800a870:	d9412f17 	ldw	r5,1212(sp)
 800a874:	20800017 	ldw	r2,0(r4)
 800a878:	21000104 	addi	r4,r4,4
 800a87c:	d9012d15 	stw	r4,1204(sp)
 800a880:	1140000d 	sth	r5,0(r2)
 800a884:	003a2006 	br	8009108 <__alt_data_end+0xfc009108>
 800a888:	e0c0100c 	andi	r3,fp,64
 800a88c:	1800a226 	beq	r3,zero,800ab18 <___vfprintf_internal_r+0x1b04>
 800a890:	d8c12d17 	ldw	r3,1204(sp)
 800a894:	1480000b 	ldhu	r18,0(r2)
 800a898:	002b883a 	mov	r21,zero
 800a89c:	18c00104 	addi	r3,r3,4
 800a8a0:	d8c12d15 	stw	r3,1204(sp)
 800a8a4:	0005883a 	mov	r2,zero
 800a8a8:	9007883a 	mov	r3,r18
 800a8ac:	003c6906 	br	8009a54 <__alt_data_end+0xfc009a54>
 800a8b0:	e0c0100c 	andi	r3,fp,64
 800a8b4:	18009026 	beq	r3,zero,800aaf8 <___vfprintf_internal_r+0x1ae4>
 800a8b8:	1480000b 	ldhu	r18,0(r2)
 800a8bc:	d8812d17 	ldw	r2,1204(sp)
 800a8c0:	002b883a 	mov	r21,zero
 800a8c4:	9007883a 	mov	r3,r18
 800a8c8:	10800104 	addi	r2,r2,4
 800a8cc:	d8812d15 	stw	r2,1204(sp)
 800a8d0:	00800044 	movi	r2,1
 800a8d4:	003c5f06 	br	8009a54 <__alt_data_end+0xfc009a54>
 800a8d8:	e0c0100c 	andi	r3,fp,64
 800a8dc:	18008026 	beq	r3,zero,800aae0 <___vfprintf_internal_r+0x1acc>
 800a8e0:	d9012d17 	ldw	r4,1204(sp)
 800a8e4:	1480000b 	ldhu	r18,0(r2)
 800a8e8:	002b883a 	mov	r21,zero
 800a8ec:	21000104 	addi	r4,r4,4
 800a8f0:	d9012d15 	stw	r4,1204(sp)
 800a8f4:	003c7906 	br	8009adc <__alt_data_end+0xfc009adc>
 800a8f8:	e080100c 	andi	r2,fp,64
 800a8fc:	10007126 	beq	r2,zero,800aac4 <___vfprintf_internal_r+0x1ab0>
 800a900:	1c80000f 	ldh	r18,0(r3)
 800a904:	d8812d17 	ldw	r2,1204(sp)
 800a908:	902bd7fa 	srai	r21,r18,31
 800a90c:	10800104 	addi	r2,r2,4
 800a910:	d8812d15 	stw	r2,1204(sp)
 800a914:	a805883a 	mov	r2,r21
 800a918:	003b1a06 	br	8009584 <__alt_data_end+0xfc009584>
 800a91c:	e4000007 	ldb	r16,0(fp)
 800a920:	e005883a 	mov	r2,fp
 800a924:	003a2306 	br	80091b4 <__alt_data_end+0xfc0091b4>
 800a928:	00800084 	movi	r2,2
 800a92c:	003c4906 	br	8009a54 <__alt_data_end+0xfc009a54>
 800a930:	010200b4 	movhi	r4,2050
 800a934:	210a0184 	addi	r4,r4,10246
 800a938:	d9012c15 	stw	r4,1200(sp)
 800a93c:	d9012c17 	ldw	r4,1200(sp)
 800a940:	1c47883a 	add	r3,r3,r17
 800a944:	10800044 	addi	r2,r2,1
 800a948:	41000015 	stw	r4,0(r8)
 800a94c:	44400115 	stw	r17,4(r8)
 800a950:	d8c12015 	stw	r3,1152(sp)
 800a954:	d8811f15 	stw	r2,1148(sp)
 800a958:	010001c4 	movi	r4,7
 800a95c:	20becc16 	blt	r4,r2,800a490 <__alt_data_end+0xfc00a490>
 800a960:	42000204 	addi	r8,r8,8
 800a964:	003ed106 	br	800a4ac <__alt_data_end+0xfc00a4ac>
 800a968:	010200b4 	movhi	r4,2050
 800a96c:	210a0184 	addi	r4,r4,10246
 800a970:	d9012c15 	stw	r4,1200(sp)
 800a974:	003ba306 	br	8009804 <__alt_data_end+0xfc009804>
 800a978:	b809883a 	mov	r4,r23
 800a97c:	b00b883a 	mov	r5,r22
 800a980:	d9811e04 	addi	r6,sp,1144
 800a984:	80110780 	call	8011078 <__sprint_r>
 800a988:	103aba1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800a98c:	d8c12017 	ldw	r3,1152(sp)
 800a990:	da000404 	addi	r8,sp,16
 800a994:	003d6c06 	br	8009f48 <__alt_data_end+0xfc009f48>
 800a998:	d8811f17 	ldw	r2,1148(sp)
 800a99c:	014200b4 	movhi	r5,2050
 800a9a0:	01000044 	movi	r4,1
 800a9a4:	18c00044 	addi	r3,r3,1
 800a9a8:	10800044 	addi	r2,r2,1
 800a9ac:	2949f904 	addi	r5,r5,10212
 800a9b0:	41000115 	stw	r4,4(r8)
 800a9b4:	41400015 	stw	r5,0(r8)
 800a9b8:	d8c12015 	stw	r3,1152(sp)
 800a9bc:	d8811f15 	stw	r2,1148(sp)
 800a9c0:	010001c4 	movi	r4,7
 800a9c4:	20806716 	blt	r4,r2,800ab64 <___vfprintf_internal_r+0x1b50>
 800a9c8:	42000204 	addi	r8,r8,8
 800a9cc:	8000041e 	bne	r16,zero,800a9e0 <___vfprintf_internal_r+0x19cc>
 800a9d0:	d8813317 	ldw	r2,1228(sp)
 800a9d4:	1000021e 	bne	r2,zero,800a9e0 <___vfprintf_internal_r+0x19cc>
 800a9d8:	e080004c 	andi	r2,fp,1
 800a9dc:	103ba026 	beq	r2,zero,8009860 <__alt_data_end+0xfc009860>
 800a9e0:	d9013817 	ldw	r4,1248(sp)
 800a9e4:	d8811f17 	ldw	r2,1148(sp)
 800a9e8:	d9413517 	ldw	r5,1236(sp)
 800a9ec:	1907883a 	add	r3,r3,r4
 800a9f0:	10800044 	addi	r2,r2,1
 800a9f4:	41000115 	stw	r4,4(r8)
 800a9f8:	41400015 	stw	r5,0(r8)
 800a9fc:	d8c12015 	stw	r3,1152(sp)
 800aa00:	d8811f15 	stw	r2,1148(sp)
 800aa04:	010001c4 	movi	r4,7
 800aa08:	20815716 	blt	r4,r2,800af68 <___vfprintf_internal_r+0x1f54>
 800aa0c:	42000204 	addi	r8,r8,8
 800aa10:	0421c83a 	sub	r16,zero,r16
 800aa14:	0400810e 	bge	zero,r16,800ac1c <___vfprintf_internal_r+0x1c08>
 800aa18:	04400404 	movi	r17,16
 800aa1c:	8c00bd0e 	bge	r17,r16,800ad14 <___vfprintf_internal_r+0x1d00>
 800aa20:	014200b4 	movhi	r5,2050
 800aa24:	294a0184 	addi	r5,r5,10246
 800aa28:	d9412c15 	stw	r5,1200(sp)
 800aa2c:	04c001c4 	movi	r19,7
 800aa30:	00000306 	br	800aa40 <___vfprintf_internal_r+0x1a2c>
 800aa34:	42000204 	addi	r8,r8,8
 800aa38:	843ffc04 	addi	r16,r16,-16
 800aa3c:	8c00b80e 	bge	r17,r16,800ad20 <___vfprintf_internal_r+0x1d0c>
 800aa40:	18c00404 	addi	r3,r3,16
 800aa44:	10800044 	addi	r2,r2,1
 800aa48:	45000015 	stw	r20,0(r8)
 800aa4c:	44400115 	stw	r17,4(r8)
 800aa50:	d8c12015 	stw	r3,1152(sp)
 800aa54:	d8811f15 	stw	r2,1148(sp)
 800aa58:	98bff60e 	bge	r19,r2,800aa34 <__alt_data_end+0xfc00aa34>
 800aa5c:	b809883a 	mov	r4,r23
 800aa60:	b00b883a 	mov	r5,r22
 800aa64:	d9811e04 	addi	r6,sp,1144
 800aa68:	80110780 	call	8011078 <__sprint_r>
 800aa6c:	103a811e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800aa70:	d8c12017 	ldw	r3,1152(sp)
 800aa74:	d8811f17 	ldw	r2,1148(sp)
 800aa78:	da000404 	addi	r8,sp,16
 800aa7c:	003fee06 	br	800aa38 <__alt_data_end+0xfc00aa38>
 800aa80:	008011c4 	movi	r2,71
 800aa84:	1400db16 	blt	r2,r16,800adf4 <___vfprintf_internal_r+0x1de0>
 800aa88:	010200b4 	movhi	r4,2050
 800aa8c:	2109eb04 	addi	r4,r4,10156
 800aa90:	d9013115 	stw	r4,1220(sp)
 800aa94:	00c000c4 	movi	r3,3
 800aa98:	00bfdfc4 	movi	r2,-129
 800aa9c:	d8c12b15 	stw	r3,1196(sp)
 800aaa0:	e0b8703a 	and	fp,fp,r2
 800aaa4:	dcc12783 	ldbu	r19,1182(sp)
 800aaa8:	dc812d15 	stw	r18,1204(sp)
 800aaac:	1823883a 	mov	r17,r3
 800aab0:	d8013215 	stw	zero,1224(sp)
 800aab4:	d8013415 	stw	zero,1232(sp)
 800aab8:	003ad606 	br	8009614 <__alt_data_end+0xfc009614>
 800aabc:	4823883a 	mov	r17,r9
 800aac0:	003cc906 	br	8009de8 <__alt_data_end+0xfc009de8>
 800aac4:	1c800017 	ldw	r18,0(r3)
 800aac8:	d8c12d17 	ldw	r3,1204(sp)
 800aacc:	902bd7fa 	srai	r21,r18,31
 800aad0:	18c00104 	addi	r3,r3,4
 800aad4:	d8c12d15 	stw	r3,1204(sp)
 800aad8:	a805883a 	mov	r2,r21
 800aadc:	003aa906 	br	8009584 <__alt_data_end+0xfc009584>
 800aae0:	d9412d17 	ldw	r5,1204(sp)
 800aae4:	14800017 	ldw	r18,0(r2)
 800aae8:	002b883a 	mov	r21,zero
 800aaec:	29400104 	addi	r5,r5,4
 800aaf0:	d9412d15 	stw	r5,1204(sp)
 800aaf4:	003bf906 	br	8009adc <__alt_data_end+0xfc009adc>
 800aaf8:	d8c12d17 	ldw	r3,1204(sp)
 800aafc:	14800017 	ldw	r18,0(r2)
 800ab00:	002b883a 	mov	r21,zero
 800ab04:	18c00104 	addi	r3,r3,4
 800ab08:	d8c12d15 	stw	r3,1204(sp)
 800ab0c:	00800044 	movi	r2,1
 800ab10:	9007883a 	mov	r3,r18
 800ab14:	003bcf06 	br	8009a54 <__alt_data_end+0xfc009a54>
 800ab18:	d9012d17 	ldw	r4,1204(sp)
 800ab1c:	14800017 	ldw	r18,0(r2)
 800ab20:	002b883a 	mov	r21,zero
 800ab24:	21000104 	addi	r4,r4,4
 800ab28:	d9012d15 	stw	r4,1204(sp)
 800ab2c:	0005883a 	mov	r2,zero
 800ab30:	9007883a 	mov	r3,r18
 800ab34:	003bc706 	br	8009a54 <__alt_data_end+0xfc009a54>
 800ab38:	d9412d17 	ldw	r5,1204(sp)
 800ab3c:	d8c12f17 	ldw	r3,1212(sp)
 800ab40:	28800017 	ldw	r2,0(r5)
 800ab44:	29400104 	addi	r5,r5,4
 800ab48:	d9412d15 	stw	r5,1204(sp)
 800ab4c:	10c00015 	stw	r3,0(r2)
 800ab50:	00396d06 	br	8009108 <__alt_data_end+0xfc009108>
 800ab54:	010200b4 	movhi	r4,2050
 800ab58:	2109e904 	addi	r4,r4,10148
 800ab5c:	d9013115 	stw	r4,1220(sp)
 800ab60:	003ba206 	br	80099ec <__alt_data_end+0xfc0099ec>
 800ab64:	b809883a 	mov	r4,r23
 800ab68:	b00b883a 	mov	r5,r22
 800ab6c:	d9811e04 	addi	r6,sp,1144
 800ab70:	80110780 	call	8011078 <__sprint_r>
 800ab74:	103a3f1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800ab78:	dc012617 	ldw	r16,1176(sp)
 800ab7c:	d8c12017 	ldw	r3,1152(sp)
 800ab80:	da000404 	addi	r8,sp,16
 800ab84:	003f9106 	br	800a9cc <__alt_data_end+0xfc00a9cc>
 800ab88:	e0800044 	addi	r2,fp,1
 800ab8c:	9cc00814 	ori	r19,r19,32
 800ab90:	e4000047 	ldb	r16,1(fp)
 800ab94:	00398706 	br	80091b4 <__alt_data_end+0xfc0091b4>
 800ab98:	d8812e17 	ldw	r2,1208(sp)
 800ab9c:	d8c12d15 	stw	r3,1204(sp)
 800aba0:	0085c83a 	sub	r2,zero,r2
 800aba4:	d8812e15 	stw	r2,1208(sp)
 800aba8:	e005883a 	mov	r2,fp
 800abac:	003a3a06 	br	8009498 <__alt_data_end+0xfc009498>
 800abb0:	b809883a 	mov	r4,r23
 800abb4:	b00b883a 	mov	r5,r22
 800abb8:	d9811e04 	addi	r6,sp,1144
 800abbc:	80110780 	call	8011078 <__sprint_r>
 800abc0:	103a2c1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800abc4:	d8c12017 	ldw	r3,1152(sp)
 800abc8:	da000404 	addi	r8,sp,16
 800abcc:	003cf006 	br	8009f90 <__alt_data_end+0xfc009f90>
 800abd0:	d8c12817 	ldw	r3,1184(sp)
 800abd4:	d9013117 	ldw	r4,1220(sp)
 800abd8:	1923c83a 	sub	r17,r3,r4
 800abdc:	003a8806 	br	8009600 <__alt_data_end+0xfc009600>
 800abe0:	da013f15 	stw	r8,1276(sp)
 800abe4:	8006e040 	call	8006e04 <strlen>
 800abe8:	1023883a 	mov	r17,r2
 800abec:	da013f17 	ldw	r8,1276(sp)
 800abf0:	883c7f0e 	bge	r17,zero,8009df0 <__alt_data_end+0xfc009df0>
 800abf4:	0005883a 	mov	r2,zero
 800abf8:	003c7d06 	br	8009df0 <__alt_data_end+0xfc009df0>
 800abfc:	b809883a 	mov	r4,r23
 800ac00:	b00b883a 	mov	r5,r22
 800ac04:	d9811e04 	addi	r6,sp,1144
 800ac08:	80110780 	call	8011078 <__sprint_r>
 800ac0c:	103a191e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800ac10:	d8c12017 	ldw	r3,1152(sp)
 800ac14:	d8811f17 	ldw	r2,1148(sp)
 800ac18:	da000404 	addi	r8,sp,16
 800ac1c:	d9413317 	ldw	r5,1228(sp)
 800ac20:	d9013117 	ldw	r4,1220(sp)
 800ac24:	10800044 	addi	r2,r2,1
 800ac28:	28c7883a 	add	r3,r5,r3
 800ac2c:	41000015 	stw	r4,0(r8)
 800ac30:	41400115 	stw	r5,4(r8)
 800ac34:	d8c12015 	stw	r3,1152(sp)
 800ac38:	d8811f15 	stw	r2,1148(sp)
 800ac3c:	010001c4 	movi	r4,7
 800ac40:	20bb060e 	bge	r4,r2,800985c <__alt_data_end+0xfc00985c>
 800ac44:	003d6206 	br	800a1d0 <__alt_data_end+0xfc00a1d0>
 800ac48:	010200b4 	movhi	r4,2050
 800ac4c:	210a0584 	addi	r4,r4,10262
 800ac50:	d9013615 	stw	r4,1240(sp)
 800ac54:	003aa306 	br	80096e4 <__alt_data_end+0xfc0096e4>
 800ac58:	d8812604 	addi	r2,sp,1176
 800ac5c:	d8800115 	stw	r2,4(sp)
 800ac60:	d9413717 	ldw	r5,1244(sp)
 800ac64:	d8812504 	addi	r2,sp,1172
 800ac68:	d8800215 	stw	r2,8(sp)
 800ac6c:	d8812104 	addi	r2,sp,1156
 800ac70:	da400015 	stw	r9,0(sp)
 800ac74:	d8800315 	stw	r2,12(sp)
 800ac78:	b809883a 	mov	r4,r23
 800ac7c:	880d883a 	mov	r6,r17
 800ac80:	01c000c4 	movi	r7,3
 800ac84:	da013f15 	stw	r8,1276(sp)
 800ac88:	da413e15 	stw	r9,1272(sp)
 800ac8c:	800b48c0 	call	800b48c <_dtoa_r>
 800ac90:	da413e17 	ldw	r9,1272(sp)
 800ac94:	da013f17 	ldw	r8,1276(sp)
 800ac98:	d8813115 	stw	r2,1220(sp)
 800ac9c:	482b883a 	mov	r21,r9
 800aca0:	d8c13117 	ldw	r3,1220(sp)
 800aca4:	00801184 	movi	r2,70
 800aca8:	1d55883a 	add	r10,r3,r21
 800acac:	98bebb1e 	bne	r19,r2,800a79c <__alt_data_end+0xfc00a79c>
 800acb0:	19000007 	ldb	r4,0(r3)
 800acb4:	00800c04 	movi	r2,48
 800acb8:	2080dd26 	beq	r4,r2,800b030 <___vfprintf_internal_r+0x201c>
 800acbc:	d8c12617 	ldw	r3,1176(sp)
 800acc0:	50d5883a 	add	r10,r10,r3
 800acc4:	003eb506 	br	800a79c <__alt_data_end+0xfc00a79c>
 800acc8:	0023883a 	mov	r17,zero
 800accc:	003d9b06 	br	800a33c <__alt_data_end+0xfc00a33c>
 800acd0:	b809883a 	mov	r4,r23
 800acd4:	b00b883a 	mov	r5,r22
 800acd8:	d9811e04 	addi	r6,sp,1144
 800acdc:	80110780 	call	8011078 <__sprint_r>
 800ace0:	1039e41e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800ace4:	d8c12017 	ldw	r3,1152(sp)
 800ace8:	da000404 	addi	r8,sp,16
 800acec:	003d9206 	br	800a338 <__alt_data_end+0xfc00a338>
 800acf0:	b809883a 	mov	r4,r23
 800acf4:	b00b883a 	mov	r5,r22
 800acf8:	d9811e04 	addi	r6,sp,1144
 800acfc:	80110780 	call	8011078 <__sprint_r>
 800ad00:	1039dc1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800ad04:	d8812617 	ldw	r2,1176(sp)
 800ad08:	d8c12017 	ldw	r3,1152(sp)
 800ad0c:	da000404 	addi	r8,sp,16
 800ad10:	003dfb06 	br	800a500 <__alt_data_end+0xfc00a500>
 800ad14:	010200b4 	movhi	r4,2050
 800ad18:	210a0184 	addi	r4,r4,10246
 800ad1c:	d9012c15 	stw	r4,1200(sp)
 800ad20:	d9012c17 	ldw	r4,1200(sp)
 800ad24:	1c07883a 	add	r3,r3,r16
 800ad28:	10800044 	addi	r2,r2,1
 800ad2c:	41000015 	stw	r4,0(r8)
 800ad30:	44000115 	stw	r16,4(r8)
 800ad34:	d8c12015 	stw	r3,1152(sp)
 800ad38:	d8811f15 	stw	r2,1148(sp)
 800ad3c:	010001c4 	movi	r4,7
 800ad40:	20bfae16 	blt	r4,r2,800abfc <__alt_data_end+0xfc00abfc>
 800ad44:	42000204 	addi	r8,r8,8
 800ad48:	003fb406 	br	800ac1c <__alt_data_end+0xfc00ac1c>
 800ad4c:	0021883a 	mov	r16,zero
 800ad50:	003dfd06 	br	800a548 <__alt_data_end+0xfc00a548>
 800ad54:	014200b4 	movhi	r5,2050
 800ad58:	294a0584 	addi	r5,r5,10262
 800ad5c:	d9413615 	stw	r5,1240(sp)
 800ad60:	003ae306 	br	80098f0 <__alt_data_end+0xfc0098f0>
 800ad64:	b809883a 	mov	r4,r23
 800ad68:	b00b883a 	mov	r5,r22
 800ad6c:	d9811e04 	addi	r6,sp,1144
 800ad70:	80110780 	call	8011078 <__sprint_r>
 800ad74:	1039bf1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800ad78:	d8812617 	ldw	r2,1176(sp)
 800ad7c:	d9413317 	ldw	r5,1228(sp)
 800ad80:	d8c12017 	ldw	r3,1152(sp)
 800ad84:	da000404 	addi	r8,sp,16
 800ad88:	2885c83a 	sub	r2,r5,r2
 800ad8c:	003ded06 	br	800a544 <__alt_data_end+0xfc00a544>
 800ad90:	00800184 	movi	r2,6
 800ad94:	1240012e 	bgeu	r2,r9,800ad9c <___vfprintf_internal_r+0x1d88>
 800ad98:	1013883a 	mov	r9,r2
 800ad9c:	4823883a 	mov	r17,r9
 800ada0:	4805883a 	mov	r2,r9
 800ada4:	4800b216 	blt	r9,zero,800b070 <___vfprintf_internal_r+0x205c>
 800ada8:	014200b4 	movhi	r5,2050
 800adac:	2949f704 	addi	r5,r5,10204
 800adb0:	d8812b15 	stw	r2,1196(sp)
 800adb4:	dc812d15 	stw	r18,1204(sp)
 800adb8:	d8013215 	stw	zero,1224(sp)
 800adbc:	d8013415 	stw	zero,1232(sp)
 800adc0:	d9413115 	stw	r5,1220(sp)
 800adc4:	0005883a 	mov	r2,zero
 800adc8:	003a1906 	br	8009630 <__alt_data_end+0xfc009630>
 800adcc:	04c00b44 	movi	r19,45
 800add0:	dcc12785 	stb	r19,1182(sp)
 800add4:	003b0006 	br	80099d8 <__alt_data_end+0xfc0099d8>
 800add8:	d8c12d17 	ldw	r3,1204(sp)
 800addc:	d9012f17 	ldw	r4,1212(sp)
 800ade0:	18800017 	ldw	r2,0(r3)
 800ade4:	18c00104 	addi	r3,r3,4
 800ade8:	d8c12d15 	stw	r3,1204(sp)
 800adec:	11000015 	stw	r4,0(r2)
 800adf0:	0038c506 	br	8009108 <__alt_data_end+0xfc009108>
 800adf4:	014200b4 	movhi	r5,2050
 800adf8:	2949ec04 	addi	r5,r5,10160
 800adfc:	d9413115 	stw	r5,1220(sp)
 800ae00:	003f2406 	br	800aa94 <__alt_data_end+0xfc00aa94>
 800ae04:	00800b44 	movi	r2,45
 800ae08:	d8812785 	stb	r2,1182(sp)
 800ae0c:	df012b15 	stw	fp,1196(sp)
 800ae10:	d8013215 	stw	zero,1224(sp)
 800ae14:	df012d17 	ldw	fp,1204(sp)
 800ae18:	00800b44 	movi	r2,45
 800ae1c:	dc812d15 	stw	r18,1204(sp)
 800ae20:	003a0006 	br	8009624 <__alt_data_end+0xfc009624>
 800ae24:	d8c12617 	ldw	r3,1176(sp)
 800ae28:	00bfff44 	movi	r2,-3
 800ae2c:	18800a16 	blt	r3,r2,800ae58 <___vfprintf_internal_r+0x1e44>
 800ae30:	48c00916 	blt	r9,r3,800ae58 <___vfprintf_internal_r+0x1e44>
 800ae34:	d8c13415 	stw	r3,1232(sp)
 800ae38:	040019c4 	movi	r16,103
 800ae3c:	003e7606 	br	800a818 <__alt_data_end+0xfc00a818>
 800ae40:	010200b4 	movhi	r4,2050
 800ae44:	210a0184 	addi	r4,r4,10246
 800ae48:	d9012c15 	stw	r4,1200(sp)
 800ae4c:	003c8e06 	br	800a088 <__alt_data_end+0xfc00a088>
 800ae50:	5005883a 	mov	r2,r10
 800ae54:	003e6506 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800ae58:	843fff84 	addi	r16,r16,-2
 800ae5c:	1d7fffc4 	addi	r21,r3,-1
 800ae60:	dd412615 	stw	r21,1176(sp)
 800ae64:	dc0122c5 	stb	r16,1163(sp)
 800ae68:	a8009216 	blt	r21,zero,800b0b4 <___vfprintf_internal_r+0x20a0>
 800ae6c:	00800ac4 	movi	r2,43
 800ae70:	d8812305 	stb	r2,1164(sp)
 800ae74:	00800244 	movi	r2,9
 800ae78:	1540660e 	bge	r2,r21,800b014 <___vfprintf_internal_r+0x2000>
 800ae7c:	dcc122c4 	addi	r19,sp,1163
 800ae80:	dc012c15 	stw	r16,1200(sp)
 800ae84:	4023883a 	mov	r17,r8
 800ae88:	9821883a 	mov	r16,r19
 800ae8c:	a809883a 	mov	r4,r21
 800ae90:	01400284 	movi	r5,10
 800ae94:	80040240 	call	8004024 <__modsi3>
 800ae98:	10800c04 	addi	r2,r2,48
 800ae9c:	843fffc4 	addi	r16,r16,-1
 800aea0:	a809883a 	mov	r4,r21
 800aea4:	01400284 	movi	r5,10
 800aea8:	80800005 	stb	r2,0(r16)
 800aeac:	8003fd00 	call	8003fd0 <__divsi3>
 800aeb0:	01000244 	movi	r4,9
 800aeb4:	102b883a 	mov	r21,r2
 800aeb8:	20bff416 	blt	r4,r2,800ae8c <__alt_data_end+0xfc00ae8c>
 800aebc:	8811883a 	mov	r8,r17
 800aec0:	10800c04 	addi	r2,r2,48
 800aec4:	8023883a 	mov	r17,r16
 800aec8:	897fffc4 	addi	r5,r17,-1
 800aecc:	88bfffc5 	stb	r2,-1(r17)
 800aed0:	dc012c17 	ldw	r16,1200(sp)
 800aed4:	2cc08a2e 	bgeu	r5,r19,800b100 <___vfprintf_internal_r+0x20ec>
 800aed8:	d9812384 	addi	r6,sp,1166
 800aedc:	344dc83a 	sub	r6,r6,r17
 800aee0:	d9012344 	addi	r4,sp,1165
 800aee4:	998d883a 	add	r6,r19,r6
 800aee8:	00000106 	br	800aef0 <___vfprintf_internal_r+0x1edc>
 800aeec:	28800003 	ldbu	r2,0(r5)
 800aef0:	20800005 	stb	r2,0(r4)
 800aef4:	21000044 	addi	r4,r4,1
 800aef8:	29400044 	addi	r5,r5,1
 800aefc:	21bffb1e 	bne	r4,r6,800aeec <__alt_data_end+0xfc00aeec>
 800af00:	d8812304 	addi	r2,sp,1164
 800af04:	1445c83a 	sub	r2,r2,r17
 800af08:	d9412344 	addi	r5,sp,1165
 800af0c:	2885883a 	add	r2,r5,r2
 800af10:	14e7c83a 	sub	r19,r2,r19
 800af14:	d8813317 	ldw	r2,1228(sp)
 800af18:	d8c13317 	ldw	r3,1228(sp)
 800af1c:	dcc13a15 	stw	r19,1256(sp)
 800af20:	14e3883a 	add	r17,r2,r19
 800af24:	00800044 	movi	r2,1
 800af28:	10c0550e 	bge	r2,r3,800b080 <___vfprintf_internal_r+0x206c>
 800af2c:	8c400044 	addi	r17,r17,1
 800af30:	8839883a 	mov	fp,r17
 800af34:	88005016 	blt	r17,zero,800b078 <___vfprintf_internal_r+0x2064>
 800af38:	d8013415 	stw	zero,1232(sp)
 800af3c:	003e3f06 	br	800a83c <__alt_data_end+0xfc00a83c>
 800af40:	da412b15 	stw	r9,1196(sp)
 800af44:	dcc12783 	ldbu	r19,1182(sp)
 800af48:	4823883a 	mov	r17,r9
 800af4c:	dc812d15 	stw	r18,1204(sp)
 800af50:	d8013215 	stw	zero,1224(sp)
 800af54:	d8013415 	stw	zero,1232(sp)
 800af58:	0039ae06 	br	8009614 <__alt_data_end+0xfc009614>
 800af5c:	483de91e 	bne	r9,zero,800a704 <__alt_data_end+0xfc00a704>
 800af60:	8813883a 	mov	r9,r17
 800af64:	003de706 	br	800a704 <__alt_data_end+0xfc00a704>
 800af68:	b809883a 	mov	r4,r23
 800af6c:	b00b883a 	mov	r5,r22
 800af70:	d9811e04 	addi	r6,sp,1144
 800af74:	80110780 	call	8011078 <__sprint_r>
 800af78:	10393e1e 	bne	r2,zero,8009474 <__alt_data_end+0xfc009474>
 800af7c:	dc012617 	ldw	r16,1176(sp)
 800af80:	d8c12017 	ldw	r3,1152(sp)
 800af84:	d8811f17 	ldw	r2,1148(sp)
 800af88:	da000404 	addi	r8,sp,16
 800af8c:	003ea006 	br	800aa10 <__alt_data_end+0xfc00aa10>
 800af90:	00c00b44 	movi	r3,45
 800af94:	2460003c 	xorhi	r17,r4,32768
 800af98:	d8c12b05 	stb	r3,1196(sp)
 800af9c:	003ddf06 	br	800a71c <__alt_data_end+0xfc00a71c>
 800afa0:	02400184 	movi	r9,6
 800afa4:	003dd706 	br	800a704 <__alt_data_end+0xfc00a704>
 800afa8:	4d400044 	addi	r21,r9,1
 800afac:	003de206 	br	800a738 <__alt_data_end+0xfc00a738>
 800afb0:	d8c13417 	ldw	r3,1232(sp)
 800afb4:	00c0490e 	bge	zero,r3,800b0dc <___vfprintf_internal_r+0x20c8>
 800afb8:	04400044 	movi	r17,1
 800afbc:	d9013317 	ldw	r4,1228(sp)
 800afc0:	8923883a 	add	r17,r17,r4
 800afc4:	8839883a 	mov	fp,r17
 800afc8:	883e1c0e 	bge	r17,zero,800a83c <__alt_data_end+0xfc00a83c>
 800afcc:	0039883a 	mov	fp,zero
 800afd0:	003e1a06 	br	800a83c <__alt_data_end+0xfc00a83c>
 800afd4:	00c03b0e 	bge	zero,r3,800b0c4 <___vfprintf_internal_r+0x20b0>
 800afd8:	4800021e 	bne	r9,zero,800afe4 <___vfprintf_internal_r+0x1fd0>
 800afdc:	e080004c 	andi	r2,fp,1
 800afe0:	10000626 	beq	r2,zero,800affc <___vfprintf_internal_r+0x1fe8>
 800afe4:	d8c13417 	ldw	r3,1232(sp)
 800afe8:	4a400044 	addi	r9,r9,1
 800afec:	1a63883a 	add	r17,r3,r9
 800aff0:	8839883a 	mov	fp,r17
 800aff4:	883e110e 	bge	r17,zero,800a83c <__alt_data_end+0xfc00a83c>
 800aff8:	003ff406 	br	800afcc <__alt_data_end+0xfc00afcc>
 800affc:	1839883a 	mov	fp,r3
 800b000:	18004116 	blt	r3,zero,800b108 <___vfprintf_internal_r+0x20f4>
 800b004:	dc413417 	ldw	r17,1232(sp)
 800b008:	003e0c06 	br	800a83c <__alt_data_end+0xfc00a83c>
 800b00c:	d8812117 	ldw	r2,1156(sp)
 800b010:	003df606 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800b014:	00800c04 	movi	r2,48
 800b018:	a8c00c04 	addi	r3,r21,48
 800b01c:	d8812345 	stb	r2,1165(sp)
 800b020:	d8c12385 	stb	r3,1166(sp)
 800b024:	d88123c4 	addi	r2,sp,1167
 800b028:	dcc122c4 	addi	r19,sp,1163
 800b02c:	003fb806 	br	800af10 <__alt_data_end+0xfc00af10>
 800b030:	d9013717 	ldw	r4,1244(sp)
 800b034:	880b883a 	mov	r5,r17
 800b038:	000d883a 	mov	r6,zero
 800b03c:	000f883a 	mov	r7,zero
 800b040:	da013f15 	stw	r8,1276(sp)
 800b044:	da413e15 	stw	r9,1272(sp)
 800b048:	da813d15 	stw	r10,1268(sp)
 800b04c:	80144280 	call	8014428 <__eqdf2>
 800b050:	da013f17 	ldw	r8,1276(sp)
 800b054:	da413e17 	ldw	r9,1272(sp)
 800b058:	da813d17 	ldw	r10,1268(sp)
 800b05c:	103f1726 	beq	r2,zero,800acbc <__alt_data_end+0xfc00acbc>
 800b060:	00800044 	movi	r2,1
 800b064:	1547c83a 	sub	r3,r2,r21
 800b068:	d8c12615 	stw	r3,1176(sp)
 800b06c:	003f1406 	br	800acc0 <__alt_data_end+0xfc00acc0>
 800b070:	0005883a 	mov	r2,zero
 800b074:	003f4c06 	br	800ada8 <__alt_data_end+0xfc00ada8>
 800b078:	0039883a 	mov	fp,zero
 800b07c:	003fae06 	br	800af38 <__alt_data_end+0xfc00af38>
 800b080:	e084703a 	and	r2,fp,r2
 800b084:	103faa26 	beq	r2,zero,800af30 <__alt_data_end+0xfc00af30>
 800b088:	003fa806 	br	800af2c <__alt_data_end+0xfc00af2c>
 800b08c:	d9412d17 	ldw	r5,1204(sp)
 800b090:	2a400017 	ldw	r9,0(r5)
 800b094:	28c00104 	addi	r3,r5,4
 800b098:	d8c12d15 	stw	r3,1204(sp)
 800b09c:	483ebc0e 	bge	r9,zero,800ab90 <__alt_data_end+0xfc00ab90>
 800b0a0:	027fffc4 	movi	r9,-1
 800b0a4:	e4000047 	ldb	r16,1(fp)
 800b0a8:	00384206 	br	80091b4 <__alt_data_end+0xfc0091b4>
 800b0ac:	043fffc4 	movi	r16,-1
 800b0b0:	0038ce06 	br	80093ec <__alt_data_end+0xfc0093ec>
 800b0b4:	00800b44 	movi	r2,45
 800b0b8:	056bc83a 	sub	r21,zero,r21
 800b0bc:	d8812305 	stb	r2,1164(sp)
 800b0c0:	003f6c06 	br	800ae74 <__alt_data_end+0xfc00ae74>
 800b0c4:	4800081e 	bne	r9,zero,800b0e8 <___vfprintf_internal_r+0x20d4>
 800b0c8:	e080004c 	andi	r2,fp,1
 800b0cc:	1000061e 	bne	r2,zero,800b0e8 <___vfprintf_internal_r+0x20d4>
 800b0d0:	07000044 	movi	fp,1
 800b0d4:	e023883a 	mov	r17,fp
 800b0d8:	003dd806 	br	800a83c <__alt_data_end+0xfc00a83c>
 800b0dc:	04400084 	movi	r17,2
 800b0e0:	88e3c83a 	sub	r17,r17,r3
 800b0e4:	003fb506 	br	800afbc <__alt_data_end+0xfc00afbc>
 800b0e8:	4c400084 	addi	r17,r9,2
 800b0ec:	8839883a 	mov	fp,r17
 800b0f0:	883dd20e 	bge	r17,zero,800a83c <__alt_data_end+0xfc00a83c>
 800b0f4:	003fb506 	br	800afcc <__alt_data_end+0xfc00afcc>
 800b0f8:	d8c12617 	ldw	r3,1176(sp)
 800b0fc:	003f5706 	br	800ae5c <__alt_data_end+0xfc00ae5c>
 800b100:	d8812344 	addi	r2,sp,1165
 800b104:	003f8206 	br	800af10 <__alt_data_end+0xfc00af10>
 800b108:	0039883a 	mov	fp,zero
 800b10c:	003fbd06 	br	800b004 <__alt_data_end+0xfc00b004>

0800b110 <__vfprintf_internal>:
 800b110:	2007883a 	mov	r3,r4
 800b114:	010200b4 	movhi	r4,2050
 800b118:	21113704 	addi	r4,r4,17628
 800b11c:	21000017 	ldw	r4,0(r4)
 800b120:	2805883a 	mov	r2,r5
 800b124:	300f883a 	mov	r7,r6
 800b128:	180b883a 	mov	r5,r3
 800b12c:	100d883a 	mov	r6,r2
 800b130:	80090141 	jmpi	8009014 <___vfprintf_internal_r>

0800b134 <__swsetup_r>:
 800b134:	008200b4 	movhi	r2,2050
 800b138:	defffd04 	addi	sp,sp,-12
 800b13c:	10913704 	addi	r2,r2,17628
 800b140:	dc400115 	stw	r17,4(sp)
 800b144:	2023883a 	mov	r17,r4
 800b148:	11000017 	ldw	r4,0(r2)
 800b14c:	dc000015 	stw	r16,0(sp)
 800b150:	dfc00215 	stw	ra,8(sp)
 800b154:	2821883a 	mov	r16,r5
 800b158:	20000226 	beq	r4,zero,800b164 <__swsetup_r+0x30>
 800b15c:	20c00e17 	ldw	r3,56(r4)
 800b160:	18002e26 	beq	r3,zero,800b21c <__swsetup_r+0xe8>
 800b164:	8080030b 	ldhu	r2,12(r16)
 800b168:	10c0020c 	andi	r3,r2,8
 800b16c:	100d883a 	mov	r6,r2
 800b170:	18000f26 	beq	r3,zero,800b1b0 <__swsetup_r+0x7c>
 800b174:	80c00417 	ldw	r3,16(r16)
 800b178:	18001526 	beq	r3,zero,800b1d0 <__swsetup_r+0x9c>
 800b17c:	1100004c 	andi	r4,r2,1
 800b180:	20001c1e 	bne	r4,zero,800b1f4 <__swsetup_r+0xc0>
 800b184:	1080008c 	andi	r2,r2,2
 800b188:	1000261e 	bne	r2,zero,800b224 <__swsetup_r+0xf0>
 800b18c:	80800517 	ldw	r2,20(r16)
 800b190:	80800215 	stw	r2,8(r16)
 800b194:	18001c26 	beq	r3,zero,800b208 <__swsetup_r+0xd4>
 800b198:	0005883a 	mov	r2,zero
 800b19c:	dfc00217 	ldw	ra,8(sp)
 800b1a0:	dc400117 	ldw	r17,4(sp)
 800b1a4:	dc000017 	ldw	r16,0(sp)
 800b1a8:	dec00304 	addi	sp,sp,12
 800b1ac:	f800283a 	ret
 800b1b0:	3080040c 	andi	r2,r6,16
 800b1b4:	10001726 	beq	r2,zero,800b214 <__swsetup_r+0xe0>
 800b1b8:	3080010c 	andi	r2,r6,4
 800b1bc:	10001b1e 	bne	r2,zero,800b22c <__swsetup_r+0xf8>
 800b1c0:	80c00417 	ldw	r3,16(r16)
 800b1c4:	30800214 	ori	r2,r6,8
 800b1c8:	8080030d 	sth	r2,12(r16)
 800b1cc:	183feb1e 	bne	r3,zero,800b17c <__alt_data_end+0xfc00b17c>
 800b1d0:	1140a00c 	andi	r5,r2,640
 800b1d4:	01008004 	movi	r4,512
 800b1d8:	293fe826 	beq	r5,r4,800b17c <__alt_data_end+0xfc00b17c>
 800b1dc:	8809883a 	mov	r4,r17
 800b1e0:	800b883a 	mov	r5,r16
 800b1e4:	800dd200 	call	800dd20 <__smakebuf_r>
 800b1e8:	8080030b 	ldhu	r2,12(r16)
 800b1ec:	80c00417 	ldw	r3,16(r16)
 800b1f0:	003fe206 	br	800b17c <__alt_data_end+0xfc00b17c>
 800b1f4:	80800517 	ldw	r2,20(r16)
 800b1f8:	80000215 	stw	zero,8(r16)
 800b1fc:	0085c83a 	sub	r2,zero,r2
 800b200:	80800615 	stw	r2,24(r16)
 800b204:	183fe41e 	bne	r3,zero,800b198 <__alt_data_end+0xfc00b198>
 800b208:	8080030b 	ldhu	r2,12(r16)
 800b20c:	1080200c 	andi	r2,r2,128
 800b210:	103fe226 	beq	r2,zero,800b19c <__alt_data_end+0xfc00b19c>
 800b214:	00bfffc4 	movi	r2,-1
 800b218:	003fe006 	br	800b19c <__alt_data_end+0xfc00b19c>
 800b21c:	800d1700 	call	800d170 <__sinit>
 800b220:	003fd006 	br	800b164 <__alt_data_end+0xfc00b164>
 800b224:	0005883a 	mov	r2,zero
 800b228:	003fd906 	br	800b190 <__alt_data_end+0xfc00b190>
 800b22c:	81400c17 	ldw	r5,48(r16)
 800b230:	28000626 	beq	r5,zero,800b24c <__swsetup_r+0x118>
 800b234:	80801004 	addi	r2,r16,64
 800b238:	28800326 	beq	r5,r2,800b248 <__swsetup_r+0x114>
 800b23c:	8809883a 	mov	r4,r17
 800b240:	800d2e40 	call	800d2e4 <_free_r>
 800b244:	8180030b 	ldhu	r6,12(r16)
 800b248:	80000c15 	stw	zero,48(r16)
 800b24c:	80c00417 	ldw	r3,16(r16)
 800b250:	00bff6c4 	movi	r2,-37
 800b254:	118c703a 	and	r6,r2,r6
 800b258:	80000115 	stw	zero,4(r16)
 800b25c:	80c00015 	stw	r3,0(r16)
 800b260:	003fd806 	br	800b1c4 <__alt_data_end+0xfc00b1c4>

0800b264 <quorem>:
 800b264:	defff204 	addi	sp,sp,-56
 800b268:	ddc00b15 	stw	r23,44(sp)
 800b26c:	20800417 	ldw	r2,16(r4)
 800b270:	2dc00417 	ldw	r23,16(r5)
 800b274:	dfc00d15 	stw	ra,52(sp)
 800b278:	df000c15 	stw	fp,48(sp)
 800b27c:	dd800a15 	stw	r22,40(sp)
 800b280:	dd400915 	stw	r21,36(sp)
 800b284:	dd000815 	stw	r20,32(sp)
 800b288:	dcc00715 	stw	r19,28(sp)
 800b28c:	dc800615 	stw	r18,24(sp)
 800b290:	dc400515 	stw	r17,20(sp)
 800b294:	dc000415 	stw	r16,16(sp)
 800b298:	15c07a16 	blt	r2,r23,800b484 <quorem+0x220>
 800b29c:	bdffffc4 	addi	r23,r23,-1
 800b2a0:	bde9883a 	add	r20,r23,r23
 800b2a4:	28c00504 	addi	r3,r5,20
 800b2a8:	a529883a 	add	r20,r20,r20
 800b2ac:	1d39883a 	add	fp,r3,r20
 800b2b0:	24c00504 	addi	r19,r4,20
 800b2b4:	d9400215 	stw	r5,8(sp)
 800b2b8:	9d29883a 	add	r20,r19,r20
 800b2bc:	e1400017 	ldw	r5,0(fp)
 800b2c0:	d9000015 	stw	r4,0(sp)
 800b2c4:	a1000017 	ldw	r4,0(r20)
 800b2c8:	29400044 	addi	r5,r5,1
 800b2cc:	d8c00115 	stw	r3,4(sp)
 800b2d0:	dd000315 	stw	r20,12(sp)
 800b2d4:	80040800 	call	8004080 <__udivsi3>
 800b2d8:	1025883a 	mov	r18,r2
 800b2dc:	10003026 	beq	r2,zero,800b3a0 <quorem+0x13c>
 800b2e0:	dc400117 	ldw	r17,4(sp)
 800b2e4:	9829883a 	mov	r20,r19
 800b2e8:	002d883a 	mov	r22,zero
 800b2ec:	0021883a 	mov	r16,zero
 800b2f0:	8d400017 	ldw	r21,0(r17)
 800b2f4:	900b883a 	mov	r5,r18
 800b2f8:	8c400104 	addi	r17,r17,4
 800b2fc:	a93fffcc 	andi	r4,r21,65535
 800b300:	80040900 	call	8004090 <__mulsi3>
 800b304:	a808d43a 	srli	r4,r21,16
 800b308:	900b883a 	mov	r5,r18
 800b30c:	b0ad883a 	add	r22,r22,r2
 800b310:	80040900 	call	8004090 <__mulsi3>
 800b314:	a1000017 	ldw	r4,0(r20)
 800b318:	b00cd43a 	srli	r6,r22,16
 800b31c:	b0ffffcc 	andi	r3,r22,65535
 800b320:	217fffcc 	andi	r5,r4,65535
 800b324:	2c21883a 	add	r16,r5,r16
 800b328:	80c7c83a 	sub	r3,r16,r3
 800b32c:	2008d43a 	srli	r4,r4,16
 800b330:	3085883a 	add	r2,r6,r2
 800b334:	1821d43a 	srai	r16,r3,16
 800b338:	117fffcc 	andi	r5,r2,65535
 800b33c:	2149c83a 	sub	r4,r4,r5
 800b340:	2421883a 	add	r16,r4,r16
 800b344:	8008943a 	slli	r4,r16,16
 800b348:	18ffffcc 	andi	r3,r3,65535
 800b34c:	102cd43a 	srli	r22,r2,16
 800b350:	20c8b03a 	or	r4,r4,r3
 800b354:	a1000015 	stw	r4,0(r20)
 800b358:	8021d43a 	srai	r16,r16,16
 800b35c:	a5000104 	addi	r20,r20,4
 800b360:	e47fe32e 	bgeu	fp,r17,800b2f0 <__alt_data_end+0xfc00b2f0>
 800b364:	d8c00317 	ldw	r3,12(sp)
 800b368:	18800017 	ldw	r2,0(r3)
 800b36c:	10000c1e 	bne	r2,zero,800b3a0 <quorem+0x13c>
 800b370:	18bfff04 	addi	r2,r3,-4
 800b374:	9880082e 	bgeu	r19,r2,800b398 <quorem+0x134>
 800b378:	18ffff17 	ldw	r3,-4(r3)
 800b37c:	18000326 	beq	r3,zero,800b38c <quorem+0x128>
 800b380:	00000506 	br	800b398 <quorem+0x134>
 800b384:	10c00017 	ldw	r3,0(r2)
 800b388:	1800031e 	bne	r3,zero,800b398 <quorem+0x134>
 800b38c:	10bfff04 	addi	r2,r2,-4
 800b390:	bdffffc4 	addi	r23,r23,-1
 800b394:	98bffb36 	bltu	r19,r2,800b384 <__alt_data_end+0xfc00b384>
 800b398:	d8c00017 	ldw	r3,0(sp)
 800b39c:	1dc00415 	stw	r23,16(r3)
 800b3a0:	d9000017 	ldw	r4,0(sp)
 800b3a4:	d9400217 	ldw	r5,8(sp)
 800b3a8:	800ebbc0 	call	800ebbc <__mcmp>
 800b3ac:	10002816 	blt	r2,zero,800b450 <quorem+0x1ec>
 800b3b0:	dc400117 	ldw	r17,4(sp)
 800b3b4:	94800044 	addi	r18,r18,1
 800b3b8:	980d883a 	mov	r6,r19
 800b3bc:	0007883a 	mov	r3,zero
 800b3c0:	31000017 	ldw	r4,0(r6)
 800b3c4:	89400017 	ldw	r5,0(r17)
 800b3c8:	31800104 	addi	r6,r6,4
 800b3cc:	20bfffcc 	andi	r2,r4,65535
 800b3d0:	10c7883a 	add	r3,r2,r3
 800b3d4:	28bfffcc 	andi	r2,r5,65535
 800b3d8:	1885c83a 	sub	r2,r3,r2
 800b3dc:	280ad43a 	srli	r5,r5,16
 800b3e0:	2008d43a 	srli	r4,r4,16
 800b3e4:	1007d43a 	srai	r3,r2,16
 800b3e8:	10bfffcc 	andi	r2,r2,65535
 800b3ec:	2149c83a 	sub	r4,r4,r5
 800b3f0:	20c9883a 	add	r4,r4,r3
 800b3f4:	200a943a 	slli	r5,r4,16
 800b3f8:	8c400104 	addi	r17,r17,4
 800b3fc:	2007d43a 	srai	r3,r4,16
 800b400:	2884b03a 	or	r2,r5,r2
 800b404:	30bfff15 	stw	r2,-4(r6)
 800b408:	e47fed2e 	bgeu	fp,r17,800b3c0 <__alt_data_end+0xfc00b3c0>
 800b40c:	bdc5883a 	add	r2,r23,r23
 800b410:	1085883a 	add	r2,r2,r2
 800b414:	9887883a 	add	r3,r19,r2
 800b418:	18800017 	ldw	r2,0(r3)
 800b41c:	10000c1e 	bne	r2,zero,800b450 <quorem+0x1ec>
 800b420:	18bfff04 	addi	r2,r3,-4
 800b424:	9880082e 	bgeu	r19,r2,800b448 <quorem+0x1e4>
 800b428:	18ffff17 	ldw	r3,-4(r3)
 800b42c:	18000326 	beq	r3,zero,800b43c <quorem+0x1d8>
 800b430:	00000506 	br	800b448 <quorem+0x1e4>
 800b434:	10c00017 	ldw	r3,0(r2)
 800b438:	1800031e 	bne	r3,zero,800b448 <quorem+0x1e4>
 800b43c:	10bfff04 	addi	r2,r2,-4
 800b440:	bdffffc4 	addi	r23,r23,-1
 800b444:	98bffb36 	bltu	r19,r2,800b434 <__alt_data_end+0xfc00b434>
 800b448:	d8c00017 	ldw	r3,0(sp)
 800b44c:	1dc00415 	stw	r23,16(r3)
 800b450:	9005883a 	mov	r2,r18
 800b454:	dfc00d17 	ldw	ra,52(sp)
 800b458:	df000c17 	ldw	fp,48(sp)
 800b45c:	ddc00b17 	ldw	r23,44(sp)
 800b460:	dd800a17 	ldw	r22,40(sp)
 800b464:	dd400917 	ldw	r21,36(sp)
 800b468:	dd000817 	ldw	r20,32(sp)
 800b46c:	dcc00717 	ldw	r19,28(sp)
 800b470:	dc800617 	ldw	r18,24(sp)
 800b474:	dc400517 	ldw	r17,20(sp)
 800b478:	dc000417 	ldw	r16,16(sp)
 800b47c:	dec00e04 	addi	sp,sp,56
 800b480:	f800283a 	ret
 800b484:	0005883a 	mov	r2,zero
 800b488:	003ff206 	br	800b454 <__alt_data_end+0xfc00b454>

0800b48c <_dtoa_r>:
 800b48c:	20801017 	ldw	r2,64(r4)
 800b490:	deffde04 	addi	sp,sp,-136
 800b494:	dd401d15 	stw	r21,116(sp)
 800b498:	dcc01b15 	stw	r19,108(sp)
 800b49c:	dc801a15 	stw	r18,104(sp)
 800b4a0:	dc401915 	stw	r17,100(sp)
 800b4a4:	dc001815 	stw	r16,96(sp)
 800b4a8:	dfc02115 	stw	ra,132(sp)
 800b4ac:	df002015 	stw	fp,128(sp)
 800b4b0:	ddc01f15 	stw	r23,124(sp)
 800b4b4:	dd801e15 	stw	r22,120(sp)
 800b4b8:	dd001c15 	stw	r20,112(sp)
 800b4bc:	d9c00315 	stw	r7,12(sp)
 800b4c0:	2021883a 	mov	r16,r4
 800b4c4:	302b883a 	mov	r21,r6
 800b4c8:	2825883a 	mov	r18,r5
 800b4cc:	dc402417 	ldw	r17,144(sp)
 800b4d0:	3027883a 	mov	r19,r6
 800b4d4:	10000826 	beq	r2,zero,800b4f8 <_dtoa_r+0x6c>
 800b4d8:	21801117 	ldw	r6,68(r4)
 800b4dc:	00c00044 	movi	r3,1
 800b4e0:	100b883a 	mov	r5,r2
 800b4e4:	1986983a 	sll	r3,r3,r6
 800b4e8:	11800115 	stw	r6,4(r2)
 800b4ec:	10c00215 	stw	r3,8(r2)
 800b4f0:	800e2e80 	call	800e2e8 <_Bfree>
 800b4f4:	80001015 	stw	zero,64(r16)
 800b4f8:	a8002d16 	blt	r21,zero,800b5b0 <_dtoa_r+0x124>
 800b4fc:	88000015 	stw	zero,0(r17)
 800b500:	a8dffc2c 	andhi	r3,r21,32752
 800b504:	009ffc34 	movhi	r2,32752
 800b508:	18801b26 	beq	r3,r2,800b578 <_dtoa_r+0xec>
 800b50c:	9009883a 	mov	r4,r18
 800b510:	980b883a 	mov	r5,r19
 800b514:	000d883a 	mov	r6,zero
 800b518:	000f883a 	mov	r7,zero
 800b51c:	80144280 	call	8014428 <__eqdf2>
 800b520:	10002a1e 	bne	r2,zero,800b5cc <_dtoa_r+0x140>
 800b524:	d8c02317 	ldw	r3,140(sp)
 800b528:	d9002517 	ldw	r4,148(sp)
 800b52c:	00800044 	movi	r2,1
 800b530:	18800015 	stw	r2,0(r3)
 800b534:	2001a226 	beq	r4,zero,800bbc0 <_dtoa_r+0x734>
 800b538:	008200b4 	movhi	r2,2050
 800b53c:	1089f944 	addi	r2,r2,10213
 800b540:	20800015 	stw	r2,0(r4)
 800b544:	10bfffc4 	addi	r2,r2,-1
 800b548:	dfc02117 	ldw	ra,132(sp)
 800b54c:	df002017 	ldw	fp,128(sp)
 800b550:	ddc01f17 	ldw	r23,124(sp)
 800b554:	dd801e17 	ldw	r22,120(sp)
 800b558:	dd401d17 	ldw	r21,116(sp)
 800b55c:	dd001c17 	ldw	r20,112(sp)
 800b560:	dcc01b17 	ldw	r19,108(sp)
 800b564:	dc801a17 	ldw	r18,104(sp)
 800b568:	dc401917 	ldw	r17,100(sp)
 800b56c:	dc001817 	ldw	r16,96(sp)
 800b570:	dec02204 	addi	sp,sp,136
 800b574:	f800283a 	ret
 800b578:	d8c02317 	ldw	r3,140(sp)
 800b57c:	0089c3c4 	movi	r2,9999
 800b580:	18800015 	stw	r2,0(r3)
 800b584:	90017c26 	beq	r18,zero,800bb78 <_dtoa_r+0x6ec>
 800b588:	008200b4 	movhi	r2,2050
 800b58c:	108a0d04 	addi	r2,r2,10292
 800b590:	d9002517 	ldw	r4,148(sp)
 800b594:	203fec26 	beq	r4,zero,800b548 <__alt_data_end+0xfc00b548>
 800b598:	10c000c7 	ldb	r3,3(r2)
 800b59c:	18017d1e 	bne	r3,zero,800bb94 <_dtoa_r+0x708>
 800b5a0:	10c000c4 	addi	r3,r2,3
 800b5a4:	d9802517 	ldw	r6,148(sp)
 800b5a8:	30c00015 	stw	r3,0(r6)
 800b5ac:	003fe606 	br	800b548 <__alt_data_end+0xfc00b548>
 800b5b0:	04e00034 	movhi	r19,32768
 800b5b4:	9cffffc4 	addi	r19,r19,-1
 800b5b8:	00800044 	movi	r2,1
 800b5bc:	ace6703a 	and	r19,r21,r19
 800b5c0:	88800015 	stw	r2,0(r17)
 800b5c4:	982b883a 	mov	r21,r19
 800b5c8:	003fcd06 	br	800b500 <__alt_data_end+0xfc00b500>
 800b5cc:	d8800204 	addi	r2,sp,8
 800b5d0:	a822d53a 	srli	r17,r21,20
 800b5d4:	d8800015 	stw	r2,0(sp)
 800b5d8:	8009883a 	mov	r4,r16
 800b5dc:	900b883a 	mov	r5,r18
 800b5e0:	980d883a 	mov	r6,r19
 800b5e4:	d9c00104 	addi	r7,sp,4
 800b5e8:	800ef300 	call	800ef30 <__d2b>
 800b5ec:	1039883a 	mov	fp,r2
 800b5f0:	88016a1e 	bne	r17,zero,800bb9c <_dtoa_r+0x710>
 800b5f4:	dd000217 	ldw	r20,8(sp)
 800b5f8:	dc400117 	ldw	r17,4(sp)
 800b5fc:	00befbc4 	movi	r2,-1041
 800b600:	a463883a 	add	r17,r20,r17
 800b604:	8882ea16 	blt	r17,r2,800c1b0 <_dtoa_r+0xd24>
 800b608:	00bf0384 	movi	r2,-1010
 800b60c:	1445c83a 	sub	r2,r2,r17
 800b610:	89010484 	addi	r4,r17,1042
 800b614:	a8aa983a 	sll	r21,r21,r2
 800b618:	9108d83a 	srl	r4,r18,r4
 800b61c:	a908b03a 	or	r4,r21,r4
 800b620:	8005a380 	call	8005a38 <__floatunsidf>
 800b624:	017f8434 	movhi	r5,65040
 800b628:	01800044 	movi	r6,1
 800b62c:	1009883a 	mov	r4,r2
 800b630:	194b883a 	add	r5,r3,r5
 800b634:	8c7fffc4 	addi	r17,r17,-1
 800b638:	d9800f15 	stw	r6,60(sp)
 800b63c:	000d883a 	mov	r6,zero
 800b640:	01cffe34 	movhi	r7,16376
 800b644:	801466c0 	call	801466c <__subdf3>
 800b648:	0198dbf4 	movhi	r6,25455
 800b64c:	01cff4f4 	movhi	r7,16339
 800b650:	1009883a 	mov	r4,r2
 800b654:	180b883a 	mov	r5,r3
 800b658:	3190d844 	addi	r6,r6,17249
 800b65c:	39e1e9c4 	addi	r7,r7,-30809
 800b660:	80050740 	call	8005074 <__muldf3>
 800b664:	01a2d874 	movhi	r6,35681
 800b668:	01cff1f4 	movhi	r7,16327
 800b66c:	180b883a 	mov	r5,r3
 800b670:	31b22cc4 	addi	r6,r6,-14157
 800b674:	39e28a04 	addi	r7,r7,-30168
 800b678:	1009883a 	mov	r4,r2
 800b67c:	8013b8c0 	call	8013b8c <__adddf3>
 800b680:	8809883a 	mov	r4,r17
 800b684:	102d883a 	mov	r22,r2
 800b688:	182b883a 	mov	r21,r3
 800b68c:	80059680 	call	8005968 <__floatsidf>
 800b690:	019427f4 	movhi	r6,20639
 800b694:	01cff4f4 	movhi	r7,16339
 800b698:	1009883a 	mov	r4,r2
 800b69c:	180b883a 	mov	r5,r3
 800b6a0:	319e7ec4 	addi	r6,r6,31227
 800b6a4:	39d104c4 	addi	r7,r7,17427
 800b6a8:	80050740 	call	8005074 <__muldf3>
 800b6ac:	b009883a 	mov	r4,r22
 800b6b0:	a80b883a 	mov	r5,r21
 800b6b4:	100d883a 	mov	r6,r2
 800b6b8:	180f883a 	mov	r7,r3
 800b6bc:	8013b8c0 	call	8013b8c <__adddf3>
 800b6c0:	1009883a 	mov	r4,r2
 800b6c4:	180b883a 	mov	r5,r3
 800b6c8:	102d883a 	mov	r22,r2
 800b6cc:	182b883a 	mov	r21,r3
 800b6d0:	80058e00 	call	80058e0 <__fixdfsi>
 800b6d4:	b009883a 	mov	r4,r22
 800b6d8:	a80b883a 	mov	r5,r21
 800b6dc:	000d883a 	mov	r6,zero
 800b6e0:	000f883a 	mov	r7,zero
 800b6e4:	d8800515 	stw	r2,20(sp)
 800b6e8:	801458c0 	call	801458c <__ledf2>
 800b6ec:	10023116 	blt	r2,zero,800bfb4 <_dtoa_r+0xb28>
 800b6f0:	d8c00517 	ldw	r3,20(sp)
 800b6f4:	00800584 	movi	r2,22
 800b6f8:	10c21f36 	bltu	r2,r3,800bf78 <_dtoa_r+0xaec>
 800b6fc:	180490fa 	slli	r2,r3,3
 800b700:	00c200b4 	movhi	r3,2050
 800b704:	18ca2904 	addi	r3,r3,10404
 800b708:	1885883a 	add	r2,r3,r2
 800b70c:	11000017 	ldw	r4,0(r2)
 800b710:	11400117 	ldw	r5,4(r2)
 800b714:	900d883a 	mov	r6,r18
 800b718:	980f883a 	mov	r7,r19
 800b71c:	80144ac0 	call	80144ac <__gedf2>
 800b720:	0082a70e 	bge	zero,r2,800c1c0 <_dtoa_r+0xd34>
 800b724:	d9000517 	ldw	r4,20(sp)
 800b728:	d8000c15 	stw	zero,48(sp)
 800b72c:	213fffc4 	addi	r4,r4,-1
 800b730:	d9000515 	stw	r4,20(sp)
 800b734:	a463c83a 	sub	r17,r20,r17
 800b738:	8dbfffc4 	addi	r22,r17,-1
 800b73c:	b0021916 	blt	r22,zero,800bfa4 <_dtoa_r+0xb18>
 800b740:	d8000815 	stw	zero,32(sp)
 800b744:	d8800517 	ldw	r2,20(sp)
 800b748:	10020e16 	blt	r2,zero,800bf84 <_dtoa_r+0xaf8>
 800b74c:	b0ad883a 	add	r22,r22,r2
 800b750:	d8800a15 	stw	r2,40(sp)
 800b754:	d8000915 	stw	zero,36(sp)
 800b758:	d8c00317 	ldw	r3,12(sp)
 800b75c:	00800244 	movi	r2,9
 800b760:	10c11a36 	bltu	r2,r3,800bbcc <_dtoa_r+0x740>
 800b764:	00800144 	movi	r2,5
 800b768:	10c4fc0e 	bge	r2,r3,800cb5c <_dtoa_r+0x16d0>
 800b76c:	18ffff04 	addi	r3,r3,-4
 800b770:	d8c00315 	stw	r3,12(sp)
 800b774:	0029883a 	mov	r20,zero
 800b778:	d9800317 	ldw	r6,12(sp)
 800b77c:	008000c4 	movi	r2,3
 800b780:	3083bd26 	beq	r6,r2,800c678 <_dtoa_r+0x11ec>
 800b784:	1183670e 	bge	r2,r6,800c524 <_dtoa_r+0x1098>
 800b788:	d8c00317 	ldw	r3,12(sp)
 800b78c:	00800104 	movi	r2,4
 800b790:	1882e726 	beq	r3,r2,800c330 <_dtoa_r+0xea4>
 800b794:	00800144 	movi	r2,5
 800b798:	1884f21e 	bne	r3,r2,800cb64 <_dtoa_r+0x16d8>
 800b79c:	00800044 	movi	r2,1
 800b7a0:	d8800b15 	stw	r2,44(sp)
 800b7a4:	d8c02217 	ldw	r3,136(sp)
 800b7a8:	d9000517 	ldw	r4,20(sp)
 800b7ac:	1907883a 	add	r3,r3,r4
 800b7b0:	19800044 	addi	r6,r3,1
 800b7b4:	d8c00d15 	stw	r3,52(sp)
 800b7b8:	d9800615 	stw	r6,24(sp)
 800b7bc:	0183c30e 	bge	zero,r6,800c6cc <_dtoa_r+0x1240>
 800b7c0:	d9800617 	ldw	r6,24(sp)
 800b7c4:	3023883a 	mov	r17,r6
 800b7c8:	80001115 	stw	zero,68(r16)
 800b7cc:	008005c4 	movi	r2,23
 800b7d0:	1184f62e 	bgeu	r2,r6,800cbac <_dtoa_r+0x1720>
 800b7d4:	00c00044 	movi	r3,1
 800b7d8:	00800104 	movi	r2,4
 800b7dc:	1085883a 	add	r2,r2,r2
 800b7e0:	11000504 	addi	r4,r2,20
 800b7e4:	180b883a 	mov	r5,r3
 800b7e8:	18c00044 	addi	r3,r3,1
 800b7ec:	313ffb2e 	bgeu	r6,r4,800b7dc <__alt_data_end+0xfc00b7dc>
 800b7f0:	81401115 	stw	r5,68(r16)
 800b7f4:	8009883a 	mov	r4,r16
 800b7f8:	800e2400 	call	800e240 <_Balloc>
 800b7fc:	d8800715 	stw	r2,28(sp)
 800b800:	80801015 	stw	r2,64(r16)
 800b804:	00800384 	movi	r2,14
 800b808:	1440fd36 	bltu	r2,r17,800bc00 <_dtoa_r+0x774>
 800b80c:	a000fc26 	beq	r20,zero,800bc00 <_dtoa_r+0x774>
 800b810:	d8800517 	ldw	r2,20(sp)
 800b814:	0083b90e 	bge	zero,r2,800c6fc <_dtoa_r+0x1270>
 800b818:	d8c00517 	ldw	r3,20(sp)
 800b81c:	108003cc 	andi	r2,r2,15
 800b820:	100490fa 	slli	r2,r2,3
 800b824:	182fd13a 	srai	r23,r3,4
 800b828:	00c200b4 	movhi	r3,2050
 800b82c:	18ca2904 	addi	r3,r3,10404
 800b830:	1885883a 	add	r2,r3,r2
 800b834:	b8c0040c 	andi	r3,r23,16
 800b838:	12c00017 	ldw	r11,0(r2)
 800b83c:	12800117 	ldw	r10,4(r2)
 800b840:	18039726 	beq	r3,zero,800c6a0 <_dtoa_r+0x1214>
 800b844:	008200b4 	movhi	r2,2050
 800b848:	108a1f04 	addi	r2,r2,10364
 800b84c:	11800817 	ldw	r6,32(r2)
 800b850:	11c00917 	ldw	r7,36(r2)
 800b854:	9009883a 	mov	r4,r18
 800b858:	980b883a 	mov	r5,r19
 800b85c:	da801615 	stw	r10,88(sp)
 800b860:	dac01515 	stw	r11,84(sp)
 800b864:	80046f40 	call	80046f4 <__divdf3>
 800b868:	da801617 	ldw	r10,88(sp)
 800b86c:	dac01517 	ldw	r11,84(sp)
 800b870:	bdc003cc 	andi	r23,r23,15
 800b874:	044000c4 	movi	r17,3
 800b878:	d8800e15 	stw	r2,56(sp)
 800b87c:	182b883a 	mov	r21,r3
 800b880:	b8001126 	beq	r23,zero,800b8c8 <_dtoa_r+0x43c>
 800b884:	050200b4 	movhi	r20,2050
 800b888:	a50a1f04 	addi	r20,r20,10364
 800b88c:	5805883a 	mov	r2,r11
 800b890:	5007883a 	mov	r3,r10
 800b894:	b980004c 	andi	r6,r23,1
 800b898:	1009883a 	mov	r4,r2
 800b89c:	b82fd07a 	srai	r23,r23,1
 800b8a0:	180b883a 	mov	r5,r3
 800b8a4:	30000426 	beq	r6,zero,800b8b8 <_dtoa_r+0x42c>
 800b8a8:	a1800017 	ldw	r6,0(r20)
 800b8ac:	a1c00117 	ldw	r7,4(r20)
 800b8b0:	8c400044 	addi	r17,r17,1
 800b8b4:	80050740 	call	8005074 <__muldf3>
 800b8b8:	a5000204 	addi	r20,r20,8
 800b8bc:	b83ff51e 	bne	r23,zero,800b894 <__alt_data_end+0xfc00b894>
 800b8c0:	1017883a 	mov	r11,r2
 800b8c4:	1815883a 	mov	r10,r3
 800b8c8:	d9000e17 	ldw	r4,56(sp)
 800b8cc:	a80b883a 	mov	r5,r21
 800b8d0:	580d883a 	mov	r6,r11
 800b8d4:	500f883a 	mov	r7,r10
 800b8d8:	80046f40 	call	80046f4 <__divdf3>
 800b8dc:	1029883a 	mov	r20,r2
 800b8e0:	182b883a 	mov	r21,r3
 800b8e4:	d9800c17 	ldw	r6,48(sp)
 800b8e8:	30000626 	beq	r6,zero,800b904 <_dtoa_r+0x478>
 800b8ec:	a009883a 	mov	r4,r20
 800b8f0:	a80b883a 	mov	r5,r21
 800b8f4:	000d883a 	mov	r6,zero
 800b8f8:	01cffc34 	movhi	r7,16368
 800b8fc:	801458c0 	call	801458c <__ledf2>
 800b900:	10043216 	blt	r2,zero,800c9cc <_dtoa_r+0x1540>
 800b904:	8809883a 	mov	r4,r17
 800b908:	80059680 	call	8005968 <__floatsidf>
 800b90c:	1009883a 	mov	r4,r2
 800b910:	180b883a 	mov	r5,r3
 800b914:	a00d883a 	mov	r6,r20
 800b918:	a80f883a 	mov	r7,r21
 800b91c:	80050740 	call	8005074 <__muldf3>
 800b920:	000d883a 	mov	r6,zero
 800b924:	1009883a 	mov	r4,r2
 800b928:	180b883a 	mov	r5,r3
 800b92c:	01d00734 	movhi	r7,16412
 800b930:	8013b8c0 	call	8013b8c <__adddf3>
 800b934:	1023883a 	mov	r17,r2
 800b938:	d9800617 	ldw	r6,24(sp)
 800b93c:	00bf3034 	movhi	r2,64704
 800b940:	1885883a 	add	r2,r3,r2
 800b944:	d8800e15 	stw	r2,56(sp)
 800b948:	30032e26 	beq	r6,zero,800c604 <_dtoa_r+0x1178>
 800b94c:	d8c00517 	ldw	r3,20(sp)
 800b950:	da800617 	ldw	r10,24(sp)
 800b954:	d8c01215 	stw	r3,72(sp)
 800b958:	d9000b17 	ldw	r4,44(sp)
 800b95c:	2003b026 	beq	r4,zero,800c820 <_dtoa_r+0x1394>
 800b960:	50bfffc4 	addi	r2,r10,-1
 800b964:	100490fa 	slli	r2,r2,3
 800b968:	00c200b4 	movhi	r3,2050
 800b96c:	18ca2904 	addi	r3,r3,10404
 800b970:	1885883a 	add	r2,r3,r2
 800b974:	11800017 	ldw	r6,0(r2)
 800b978:	11c00117 	ldw	r7,4(r2)
 800b97c:	d8800717 	ldw	r2,28(sp)
 800b980:	0009883a 	mov	r4,zero
 800b984:	014ff834 	movhi	r5,16352
 800b988:	da801615 	stw	r10,88(sp)
 800b98c:	15c00044 	addi	r23,r2,1
 800b990:	80046f40 	call	80046f4 <__divdf3>
 800b994:	d9c00e17 	ldw	r7,56(sp)
 800b998:	880d883a 	mov	r6,r17
 800b99c:	1009883a 	mov	r4,r2
 800b9a0:	180b883a 	mov	r5,r3
 800b9a4:	801466c0 	call	801466c <__subdf3>
 800b9a8:	a80b883a 	mov	r5,r21
 800b9ac:	a009883a 	mov	r4,r20
 800b9b0:	d8c01015 	stw	r3,64(sp)
 800b9b4:	d8800e15 	stw	r2,56(sp)
 800b9b8:	80058e00 	call	80058e0 <__fixdfsi>
 800b9bc:	1009883a 	mov	r4,r2
 800b9c0:	d8801715 	stw	r2,92(sp)
 800b9c4:	80059680 	call	8005968 <__floatsidf>
 800b9c8:	a009883a 	mov	r4,r20
 800b9cc:	a80b883a 	mov	r5,r21
 800b9d0:	100d883a 	mov	r6,r2
 800b9d4:	180f883a 	mov	r7,r3
 800b9d8:	801466c0 	call	801466c <__subdf3>
 800b9dc:	da001717 	ldw	r8,92(sp)
 800b9e0:	1829883a 	mov	r20,r3
 800b9e4:	d8c00717 	ldw	r3,28(sp)
 800b9e8:	d9000e17 	ldw	r4,56(sp)
 800b9ec:	d9401017 	ldw	r5,64(sp)
 800b9f0:	42000c04 	addi	r8,r8,48
 800b9f4:	1023883a 	mov	r17,r2
 800b9f8:	1a000005 	stb	r8,0(r3)
 800b9fc:	880d883a 	mov	r6,r17
 800ba00:	a00f883a 	mov	r7,r20
 800ba04:	402b883a 	mov	r21,r8
 800ba08:	80144ac0 	call	80144ac <__gedf2>
 800ba0c:	00844516 	blt	zero,r2,800cb24 <_dtoa_r+0x1698>
 800ba10:	0009883a 	mov	r4,zero
 800ba14:	014ffc34 	movhi	r5,16368
 800ba18:	880d883a 	mov	r6,r17
 800ba1c:	a00f883a 	mov	r7,r20
 800ba20:	801466c0 	call	801466c <__subdf3>
 800ba24:	d9000e17 	ldw	r4,56(sp)
 800ba28:	d9401017 	ldw	r5,64(sp)
 800ba2c:	100d883a 	mov	r6,r2
 800ba30:	180f883a 	mov	r7,r3
 800ba34:	80144ac0 	call	80144ac <__gedf2>
 800ba38:	da801617 	ldw	r10,88(sp)
 800ba3c:	00843616 	blt	zero,r2,800cb18 <_dtoa_r+0x168c>
 800ba40:	00800044 	movi	r2,1
 800ba44:	12806e0e 	bge	r2,r10,800bc00 <_dtoa_r+0x774>
 800ba48:	d9000717 	ldw	r4,28(sp)
 800ba4c:	dd801315 	stw	r22,76(sp)
 800ba50:	dc001115 	stw	r16,68(sp)
 800ba54:	2295883a 	add	r10,r4,r10
 800ba58:	dcc01415 	stw	r19,80(sp)
 800ba5c:	502d883a 	mov	r22,r10
 800ba60:	dcc01017 	ldw	r19,64(sp)
 800ba64:	b821883a 	mov	r16,r23
 800ba68:	dc801015 	stw	r18,64(sp)
 800ba6c:	dc800e17 	ldw	r18,56(sp)
 800ba70:	00000906 	br	800ba98 <_dtoa_r+0x60c>
 800ba74:	801466c0 	call	801466c <__subdf3>
 800ba78:	1009883a 	mov	r4,r2
 800ba7c:	180b883a 	mov	r5,r3
 800ba80:	900d883a 	mov	r6,r18
 800ba84:	980f883a 	mov	r7,r19
 800ba88:	801458c0 	call	801458c <__ledf2>
 800ba8c:	10040e16 	blt	r2,zero,800cac8 <_dtoa_r+0x163c>
 800ba90:	b821883a 	mov	r16,r23
 800ba94:	bd841026 	beq	r23,r22,800cad8 <_dtoa_r+0x164c>
 800ba98:	9009883a 	mov	r4,r18
 800ba9c:	980b883a 	mov	r5,r19
 800baa0:	000d883a 	mov	r6,zero
 800baa4:	01d00934 	movhi	r7,16420
 800baa8:	80050740 	call	8005074 <__muldf3>
 800baac:	000d883a 	mov	r6,zero
 800bab0:	01d00934 	movhi	r7,16420
 800bab4:	8809883a 	mov	r4,r17
 800bab8:	a00b883a 	mov	r5,r20
 800babc:	1025883a 	mov	r18,r2
 800bac0:	1827883a 	mov	r19,r3
 800bac4:	80050740 	call	8005074 <__muldf3>
 800bac8:	180b883a 	mov	r5,r3
 800bacc:	1009883a 	mov	r4,r2
 800bad0:	1823883a 	mov	r17,r3
 800bad4:	1029883a 	mov	r20,r2
 800bad8:	80058e00 	call	80058e0 <__fixdfsi>
 800badc:	1009883a 	mov	r4,r2
 800bae0:	102b883a 	mov	r21,r2
 800bae4:	80059680 	call	8005968 <__floatsidf>
 800bae8:	a009883a 	mov	r4,r20
 800baec:	880b883a 	mov	r5,r17
 800baf0:	100d883a 	mov	r6,r2
 800baf4:	180f883a 	mov	r7,r3
 800baf8:	801466c0 	call	801466c <__subdf3>
 800bafc:	ad400c04 	addi	r21,r21,48
 800bb00:	1009883a 	mov	r4,r2
 800bb04:	180b883a 	mov	r5,r3
 800bb08:	900d883a 	mov	r6,r18
 800bb0c:	980f883a 	mov	r7,r19
 800bb10:	85400005 	stb	r21,0(r16)
 800bb14:	1023883a 	mov	r17,r2
 800bb18:	1829883a 	mov	r20,r3
 800bb1c:	801458c0 	call	801458c <__ledf2>
 800bb20:	bdc00044 	addi	r23,r23,1
 800bb24:	0009883a 	mov	r4,zero
 800bb28:	014ffc34 	movhi	r5,16368
 800bb2c:	880d883a 	mov	r6,r17
 800bb30:	a00f883a 	mov	r7,r20
 800bb34:	103fcf0e 	bge	r2,zero,800ba74 <__alt_data_end+0xfc00ba74>
 800bb38:	d9801217 	ldw	r6,72(sp)
 800bb3c:	dc001117 	ldw	r16,68(sp)
 800bb40:	d9800515 	stw	r6,20(sp)
 800bb44:	8009883a 	mov	r4,r16
 800bb48:	e00b883a 	mov	r5,fp
 800bb4c:	800e2e80 	call	800e2e8 <_Bfree>
 800bb50:	d8c00517 	ldw	r3,20(sp)
 800bb54:	d9002317 	ldw	r4,140(sp)
 800bb58:	d9802517 	ldw	r6,148(sp)
 800bb5c:	b8000005 	stb	zero,0(r23)
 800bb60:	18800044 	addi	r2,r3,1
 800bb64:	20800015 	stw	r2,0(r4)
 800bb68:	30027226 	beq	r6,zero,800c534 <_dtoa_r+0x10a8>
 800bb6c:	35c00015 	stw	r23,0(r6)
 800bb70:	d8800717 	ldw	r2,28(sp)
 800bb74:	003e7406 	br	800b548 <__alt_data_end+0xfc00b548>
 800bb78:	00800434 	movhi	r2,16
 800bb7c:	10bfffc4 	addi	r2,r2,-1
 800bb80:	a8aa703a 	and	r21,r21,r2
 800bb84:	a83e801e 	bne	r21,zero,800b588 <__alt_data_end+0xfc00b588>
 800bb88:	008200b4 	movhi	r2,2050
 800bb8c:	108a0a04 	addi	r2,r2,10280
 800bb90:	003e7f06 	br	800b590 <__alt_data_end+0xfc00b590>
 800bb94:	10c00204 	addi	r3,r2,8
 800bb98:	003e8206 	br	800b5a4 <__alt_data_end+0xfc00b5a4>
 800bb9c:	01400434 	movhi	r5,16
 800bba0:	297fffc4 	addi	r5,r5,-1
 800bba4:	994a703a 	and	r5,r19,r5
 800bba8:	9009883a 	mov	r4,r18
 800bbac:	8c7f0044 	addi	r17,r17,-1023
 800bbb0:	294ffc34 	orhi	r5,r5,16368
 800bbb4:	dd000217 	ldw	r20,8(sp)
 800bbb8:	d8000f15 	stw	zero,60(sp)
 800bbbc:	003e9f06 	br	800b63c <__alt_data_end+0xfc00b63c>
 800bbc0:	008200b4 	movhi	r2,2050
 800bbc4:	1089f904 	addi	r2,r2,10212
 800bbc8:	003e5f06 	br	800b548 <__alt_data_end+0xfc00b548>
 800bbcc:	80001115 	stw	zero,68(r16)
 800bbd0:	8009883a 	mov	r4,r16
 800bbd4:	000b883a 	mov	r5,zero
 800bbd8:	800e2400 	call	800e240 <_Balloc>
 800bbdc:	01bfffc4 	movi	r6,-1
 800bbe0:	d8800715 	stw	r2,28(sp)
 800bbe4:	80801015 	stw	r2,64(r16)
 800bbe8:	00800044 	movi	r2,1
 800bbec:	d9800615 	stw	r6,24(sp)
 800bbf0:	d8800b15 	stw	r2,44(sp)
 800bbf4:	d8002215 	stw	zero,136(sp)
 800bbf8:	d9800d15 	stw	r6,52(sp)
 800bbfc:	d8000315 	stw	zero,12(sp)
 800bc00:	d8800117 	ldw	r2,4(sp)
 800bc04:	10008e16 	blt	r2,zero,800be40 <_dtoa_r+0x9b4>
 800bc08:	d9000517 	ldw	r4,20(sp)
 800bc0c:	00c00384 	movi	r3,14
 800bc10:	19008b16 	blt	r3,r4,800be40 <_dtoa_r+0x9b4>
 800bc14:	200490fa 	slli	r2,r4,3
 800bc18:	00c200b4 	movhi	r3,2050
 800bc1c:	d9802217 	ldw	r6,136(sp)
 800bc20:	18ca2904 	addi	r3,r3,10404
 800bc24:	1885883a 	add	r2,r3,r2
 800bc28:	14400017 	ldw	r17,0(r2)
 800bc2c:	15000117 	ldw	r20,4(r2)
 800bc30:	3001c716 	blt	r6,zero,800c350 <_dtoa_r+0xec4>
 800bc34:	880d883a 	mov	r6,r17
 800bc38:	a00f883a 	mov	r7,r20
 800bc3c:	9009883a 	mov	r4,r18
 800bc40:	980b883a 	mov	r5,r19
 800bc44:	80046f40 	call	80046f4 <__divdf3>
 800bc48:	180b883a 	mov	r5,r3
 800bc4c:	1009883a 	mov	r4,r2
 800bc50:	80058e00 	call	80058e0 <__fixdfsi>
 800bc54:	1009883a 	mov	r4,r2
 800bc58:	102d883a 	mov	r22,r2
 800bc5c:	80059680 	call	8005968 <__floatsidf>
 800bc60:	1009883a 	mov	r4,r2
 800bc64:	180b883a 	mov	r5,r3
 800bc68:	880d883a 	mov	r6,r17
 800bc6c:	a00f883a 	mov	r7,r20
 800bc70:	80050740 	call	8005074 <__muldf3>
 800bc74:	9009883a 	mov	r4,r18
 800bc78:	980b883a 	mov	r5,r19
 800bc7c:	100d883a 	mov	r6,r2
 800bc80:	180f883a 	mov	r7,r3
 800bc84:	801466c0 	call	801466c <__subdf3>
 800bc88:	d9000717 	ldw	r4,28(sp)
 800bc8c:	d9800617 	ldw	r6,24(sp)
 800bc90:	180b883a 	mov	r5,r3
 800bc94:	b0c00c04 	addi	r3,r22,48
 800bc98:	20c00005 	stb	r3,0(r4)
 800bc9c:	25c00044 	addi	r23,r4,1
 800bca0:	01000044 	movi	r4,1
 800bca4:	1011883a 	mov	r8,r2
 800bca8:	2807883a 	mov	r3,r5
 800bcac:	31003d26 	beq	r6,r4,800bda4 <_dtoa_r+0x918>
 800bcb0:	000d883a 	mov	r6,zero
 800bcb4:	01d00934 	movhi	r7,16420
 800bcb8:	1009883a 	mov	r4,r2
 800bcbc:	80050740 	call	8005074 <__muldf3>
 800bcc0:	1009883a 	mov	r4,r2
 800bcc4:	180b883a 	mov	r5,r3
 800bcc8:	000d883a 	mov	r6,zero
 800bccc:	000f883a 	mov	r7,zero
 800bcd0:	1027883a 	mov	r19,r2
 800bcd4:	182b883a 	mov	r21,r3
 800bcd8:	80144280 	call	8014428 <__eqdf2>
 800bcdc:	103f9926 	beq	r2,zero,800bb44 <__alt_data_end+0xfc00bb44>
 800bce0:	d8c00617 	ldw	r3,24(sp)
 800bce4:	d9000717 	ldw	r4,28(sp)
 800bce8:	b825883a 	mov	r18,r23
 800bcec:	18bfffc4 	addi	r2,r3,-1
 800bcf0:	20ad883a 	add	r22,r4,r2
 800bcf4:	dc000315 	stw	r16,12(sp)
 800bcf8:	00000a06 	br	800bd24 <_dtoa_r+0x898>
 800bcfc:	80050740 	call	8005074 <__muldf3>
 800bd00:	1009883a 	mov	r4,r2
 800bd04:	180b883a 	mov	r5,r3
 800bd08:	000d883a 	mov	r6,zero
 800bd0c:	000f883a 	mov	r7,zero
 800bd10:	1027883a 	mov	r19,r2
 800bd14:	182b883a 	mov	r21,r3
 800bd18:	b825883a 	mov	r18,r23
 800bd1c:	80144280 	call	8014428 <__eqdf2>
 800bd20:	10022626 	beq	r2,zero,800c5bc <_dtoa_r+0x1130>
 800bd24:	880d883a 	mov	r6,r17
 800bd28:	a00f883a 	mov	r7,r20
 800bd2c:	9809883a 	mov	r4,r19
 800bd30:	a80b883a 	mov	r5,r21
 800bd34:	80046f40 	call	80046f4 <__divdf3>
 800bd38:	180b883a 	mov	r5,r3
 800bd3c:	1009883a 	mov	r4,r2
 800bd40:	80058e00 	call	80058e0 <__fixdfsi>
 800bd44:	1009883a 	mov	r4,r2
 800bd48:	1021883a 	mov	r16,r2
 800bd4c:	80059680 	call	8005968 <__floatsidf>
 800bd50:	1009883a 	mov	r4,r2
 800bd54:	180b883a 	mov	r5,r3
 800bd58:	880d883a 	mov	r6,r17
 800bd5c:	a00f883a 	mov	r7,r20
 800bd60:	80050740 	call	8005074 <__muldf3>
 800bd64:	9809883a 	mov	r4,r19
 800bd68:	a80b883a 	mov	r5,r21
 800bd6c:	100d883a 	mov	r6,r2
 800bd70:	180f883a 	mov	r7,r3
 800bd74:	801466c0 	call	801466c <__subdf3>
 800bd78:	82000c04 	addi	r8,r16,48
 800bd7c:	92000005 	stb	r8,0(r18)
 800bd80:	1009883a 	mov	r4,r2
 800bd84:	180b883a 	mov	r5,r3
 800bd88:	000d883a 	mov	r6,zero
 800bd8c:	01d00934 	movhi	r7,16420
 800bd90:	1011883a 	mov	r8,r2
 800bd94:	bdc00044 	addi	r23,r23,1
 800bd98:	95bfd81e 	bne	r18,r22,800bcfc <__alt_data_end+0xfc00bcfc>
 800bd9c:	802d883a 	mov	r22,r16
 800bda0:	dc000317 	ldw	r16,12(sp)
 800bda4:	4009883a 	mov	r4,r8
 800bda8:	180b883a 	mov	r5,r3
 800bdac:	400d883a 	mov	r6,r8
 800bdb0:	180f883a 	mov	r7,r3
 800bdb4:	8013b8c0 	call	8013b8c <__adddf3>
 800bdb8:	8809883a 	mov	r4,r17
 800bdbc:	a00b883a 	mov	r5,r20
 800bdc0:	100d883a 	mov	r6,r2
 800bdc4:	180f883a 	mov	r7,r3
 800bdc8:	1027883a 	mov	r19,r2
 800bdcc:	1825883a 	mov	r18,r3
 800bdd0:	801458c0 	call	801458c <__ledf2>
 800bdd4:	10000816 	blt	r2,zero,800bdf8 <_dtoa_r+0x96c>
 800bdd8:	8809883a 	mov	r4,r17
 800bddc:	a00b883a 	mov	r5,r20
 800bde0:	980d883a 	mov	r6,r19
 800bde4:	900f883a 	mov	r7,r18
 800bde8:	80144280 	call	8014428 <__eqdf2>
 800bdec:	103f551e 	bne	r2,zero,800bb44 <__alt_data_end+0xfc00bb44>
 800bdf0:	b580004c 	andi	r22,r22,1
 800bdf4:	b03f5326 	beq	r22,zero,800bb44 <__alt_data_end+0xfc00bb44>
 800bdf8:	bd7fffc3 	ldbu	r21,-1(r23)
 800bdfc:	b8bfffc4 	addi	r2,r23,-1
 800be00:	1007883a 	mov	r3,r2
 800be04:	01400e44 	movi	r5,57
 800be08:	d9800717 	ldw	r6,28(sp)
 800be0c:	00000506 	br	800be24 <_dtoa_r+0x998>
 800be10:	18ffffc4 	addi	r3,r3,-1
 800be14:	30825e26 	beq	r6,r2,800c790 <_dtoa_r+0x1304>
 800be18:	1d400003 	ldbu	r21,0(r3)
 800be1c:	102f883a 	mov	r23,r2
 800be20:	10bfffc4 	addi	r2,r2,-1
 800be24:	a9003fcc 	andi	r4,r21,255
 800be28:	2100201c 	xori	r4,r4,128
 800be2c:	213fe004 	addi	r4,r4,-128
 800be30:	217ff726 	beq	r4,r5,800be10 <__alt_data_end+0xfc00be10>
 800be34:	aa000044 	addi	r8,r21,1
 800be38:	12000005 	stb	r8,0(r2)
 800be3c:	003f4106 	br	800bb44 <__alt_data_end+0xfc00bb44>
 800be40:	d8c00b17 	ldw	r3,44(sp)
 800be44:	18006726 	beq	r3,zero,800bfe4 <_dtoa_r+0xb58>
 800be48:	d9000317 	ldw	r4,12(sp)
 800be4c:	00c00044 	movi	r3,1
 800be50:	19016a0e 	bge	r3,r4,800c3fc <_dtoa_r+0xf70>
 800be54:	d8800617 	ldw	r2,24(sp)
 800be58:	d8c00917 	ldw	r3,36(sp)
 800be5c:	157fffc4 	addi	r21,r2,-1
 800be60:	1d420716 	blt	r3,r21,800c680 <_dtoa_r+0x11f4>
 800be64:	1d6bc83a 	sub	r21,r3,r21
 800be68:	d8800617 	ldw	r2,24(sp)
 800be6c:	1002c716 	blt	r2,zero,800c98c <_dtoa_r+0x1500>
 800be70:	dd000817 	ldw	r20,32(sp)
 800be74:	d8800617 	ldw	r2,24(sp)
 800be78:	d9800817 	ldw	r6,32(sp)
 800be7c:	8009883a 	mov	r4,r16
 800be80:	01400044 	movi	r5,1
 800be84:	308d883a 	add	r6,r6,r2
 800be88:	d9800815 	stw	r6,32(sp)
 800be8c:	b0ad883a 	add	r22,r22,r2
 800be90:	800e6680 	call	800e668 <__i2b>
 800be94:	1023883a 	mov	r17,r2
 800be98:	a0000826 	beq	r20,zero,800bebc <_dtoa_r+0xa30>
 800be9c:	0580070e 	bge	zero,r22,800bebc <_dtoa_r+0xa30>
 800bea0:	b005883a 	mov	r2,r22
 800bea4:	a5812016 	blt	r20,r22,800c328 <_dtoa_r+0xe9c>
 800bea8:	d8c00817 	ldw	r3,32(sp)
 800beac:	a0a9c83a 	sub	r20,r20,r2
 800beb0:	b0adc83a 	sub	r22,r22,r2
 800beb4:	1887c83a 	sub	r3,r3,r2
 800beb8:	d8c00815 	stw	r3,32(sp)
 800bebc:	d9000917 	ldw	r4,36(sp)
 800bec0:	0100140e 	bge	zero,r4,800bf14 <_dtoa_r+0xa88>
 800bec4:	d9800b17 	ldw	r6,44(sp)
 800bec8:	3001e526 	beq	r6,zero,800c660 <_dtoa_r+0x11d4>
 800becc:	05400e0e 	bge	zero,r21,800bf08 <_dtoa_r+0xa7c>
 800bed0:	880b883a 	mov	r5,r17
 800bed4:	8009883a 	mov	r4,r16
 800bed8:	a80d883a 	mov	r6,r21
 800bedc:	800e9340 	call	800e934 <__pow5mult>
 800bee0:	e00d883a 	mov	r6,fp
 800bee4:	8009883a 	mov	r4,r16
 800bee8:	100b883a 	mov	r5,r2
 800beec:	1023883a 	mov	r17,r2
 800bef0:	800e6a40 	call	800e6a4 <__multiply>
 800bef4:	102f883a 	mov	r23,r2
 800bef8:	e00b883a 	mov	r5,fp
 800befc:	8009883a 	mov	r4,r16
 800bf00:	800e2e80 	call	800e2e8 <_Bfree>
 800bf04:	b839883a 	mov	fp,r23
 800bf08:	d8800917 	ldw	r2,36(sp)
 800bf0c:	154dc83a 	sub	r6,r2,r21
 800bf10:	3001281e 	bne	r6,zero,800c3b4 <_dtoa_r+0xf28>
 800bf14:	05c00044 	movi	r23,1
 800bf18:	8009883a 	mov	r4,r16
 800bf1c:	b80b883a 	mov	r5,r23
 800bf20:	800e6680 	call	800e668 <__i2b>
 800bf24:	d8c00a17 	ldw	r3,40(sp)
 800bf28:	102b883a 	mov	r21,r2
 800bf2c:	00c0310e 	bge	zero,r3,800bff4 <_dtoa_r+0xb68>
 800bf30:	8009883a 	mov	r4,r16
 800bf34:	100b883a 	mov	r5,r2
 800bf38:	180d883a 	mov	r6,r3
 800bf3c:	800e9340 	call	800e934 <__pow5mult>
 800bf40:	d9000317 	ldw	r4,12(sp)
 800bf44:	102b883a 	mov	r21,r2
 800bf48:	b9011f0e 	bge	r23,r4,800c3c8 <_dtoa_r+0xf3c>
 800bf4c:	0027883a 	mov	r19,zero
 800bf50:	a8800417 	ldw	r2,16(r21)
 800bf54:	10800104 	addi	r2,r2,4
 800bf58:	1085883a 	add	r2,r2,r2
 800bf5c:	1085883a 	add	r2,r2,r2
 800bf60:	a885883a 	add	r2,r21,r2
 800bf64:	11000017 	ldw	r4,0(r2)
 800bf68:	800e5500 	call	800e550 <__hi0bits>
 800bf6c:	00c00804 	movi	r3,32
 800bf70:	1885c83a 	sub	r2,r3,r2
 800bf74:	00002506 	br	800c00c <_dtoa_r+0xb80>
 800bf78:	01800044 	movi	r6,1
 800bf7c:	d9800c15 	stw	r6,48(sp)
 800bf80:	003dec06 	br	800b734 <__alt_data_end+0xfc00b734>
 800bf84:	d8c00817 	ldw	r3,32(sp)
 800bf88:	d9000517 	ldw	r4,20(sp)
 800bf8c:	d8000a15 	stw	zero,40(sp)
 800bf90:	1907c83a 	sub	r3,r3,r4
 800bf94:	010dc83a 	sub	r6,zero,r4
 800bf98:	d8c00815 	stw	r3,32(sp)
 800bf9c:	d9800915 	stw	r6,36(sp)
 800bfa0:	003ded06 	br	800b758 <__alt_data_end+0xfc00b758>
 800bfa4:	05adc83a 	sub	r22,zero,r22
 800bfa8:	dd800815 	stw	r22,32(sp)
 800bfac:	002d883a 	mov	r22,zero
 800bfb0:	003de406 	br	800b744 <__alt_data_end+0xfc00b744>
 800bfb4:	d9000517 	ldw	r4,20(sp)
 800bfb8:	80059680 	call	8005968 <__floatsidf>
 800bfbc:	1009883a 	mov	r4,r2
 800bfc0:	180b883a 	mov	r5,r3
 800bfc4:	b00d883a 	mov	r6,r22
 800bfc8:	a80f883a 	mov	r7,r21
 800bfcc:	80144280 	call	8014428 <__eqdf2>
 800bfd0:	103dc726 	beq	r2,zero,800b6f0 <__alt_data_end+0xfc00b6f0>
 800bfd4:	d8800517 	ldw	r2,20(sp)
 800bfd8:	10bfffc4 	addi	r2,r2,-1
 800bfdc:	d8800515 	stw	r2,20(sp)
 800bfe0:	003dc306 	br	800b6f0 <__alt_data_end+0xfc00b6f0>
 800bfe4:	dd400917 	ldw	r21,36(sp)
 800bfe8:	dd000817 	ldw	r20,32(sp)
 800bfec:	0023883a 	mov	r17,zero
 800bff0:	003fa906 	br	800be98 <__alt_data_end+0xfc00be98>
 800bff4:	d9800317 	ldw	r6,12(sp)
 800bff8:	b981670e 	bge	r23,r6,800c598 <_dtoa_r+0x110c>
 800bffc:	0027883a 	mov	r19,zero
 800c000:	d8c00a17 	ldw	r3,40(sp)
 800c004:	183fd21e 	bne	r3,zero,800bf50 <__alt_data_end+0xfc00bf50>
 800c008:	00800044 	movi	r2,1
 800c00c:	1585883a 	add	r2,r2,r22
 800c010:	108007cc 	andi	r2,r2,31
 800c014:	10005f26 	beq	r2,zero,800c194 <_dtoa_r+0xd08>
 800c018:	00c00804 	movi	r3,32
 800c01c:	1887c83a 	sub	r3,r3,r2
 800c020:	01000104 	movi	r4,4
 800c024:	20c2dd0e 	bge	r4,r3,800cb9c <_dtoa_r+0x1710>
 800c028:	d9000817 	ldw	r4,32(sp)
 800c02c:	00c00704 	movi	r3,28
 800c030:	1885c83a 	sub	r2,r3,r2
 800c034:	2089883a 	add	r4,r4,r2
 800c038:	d9000815 	stw	r4,32(sp)
 800c03c:	a0a9883a 	add	r20,r20,r2
 800c040:	b0ad883a 	add	r22,r22,r2
 800c044:	d8800817 	ldw	r2,32(sp)
 800c048:	0080050e 	bge	zero,r2,800c060 <_dtoa_r+0xbd4>
 800c04c:	e00b883a 	mov	r5,fp
 800c050:	8009883a 	mov	r4,r16
 800c054:	100d883a 	mov	r6,r2
 800c058:	800ea740 	call	800ea74 <__lshift>
 800c05c:	1039883a 	mov	fp,r2
 800c060:	0580050e 	bge	zero,r22,800c078 <_dtoa_r+0xbec>
 800c064:	a80b883a 	mov	r5,r21
 800c068:	8009883a 	mov	r4,r16
 800c06c:	b00d883a 	mov	r6,r22
 800c070:	800ea740 	call	800ea74 <__lshift>
 800c074:	102b883a 	mov	r21,r2
 800c078:	d8c00c17 	ldw	r3,48(sp)
 800c07c:	1801161e 	bne	r3,zero,800c4d8 <_dtoa_r+0x104c>
 800c080:	d8c00617 	ldw	r3,24(sp)
 800c084:	00c12d0e 	bge	zero,r3,800c53c <_dtoa_r+0x10b0>
 800c088:	d8c00b17 	ldw	r3,44(sp)
 800c08c:	1800571e 	bne	r3,zero,800c1ec <_dtoa_r+0xd60>
 800c090:	dc800717 	ldw	r18,28(sp)
 800c094:	dcc00617 	ldw	r19,24(sp)
 800c098:	9029883a 	mov	r20,r18
 800c09c:	00000206 	br	800c0a8 <_dtoa_r+0xc1c>
 800c0a0:	800e3100 	call	800e310 <__multadd>
 800c0a4:	1039883a 	mov	fp,r2
 800c0a8:	e009883a 	mov	r4,fp
 800c0ac:	a80b883a 	mov	r5,r21
 800c0b0:	800b2640 	call	800b264 <quorem>
 800c0b4:	10800c04 	addi	r2,r2,48
 800c0b8:	90800005 	stb	r2,0(r18)
 800c0bc:	94800044 	addi	r18,r18,1
 800c0c0:	9507c83a 	sub	r3,r18,r20
 800c0c4:	8009883a 	mov	r4,r16
 800c0c8:	e00b883a 	mov	r5,fp
 800c0cc:	01800284 	movi	r6,10
 800c0d0:	000f883a 	mov	r7,zero
 800c0d4:	1cfff216 	blt	r3,r19,800c0a0 <__alt_data_end+0xfc00c0a0>
 800c0d8:	1011883a 	mov	r8,r2
 800c0dc:	d8800617 	ldw	r2,24(sp)
 800c0e0:	00822e0e 	bge	zero,r2,800c99c <_dtoa_r+0x1510>
 800c0e4:	d9000717 	ldw	r4,28(sp)
 800c0e8:	0025883a 	mov	r18,zero
 800c0ec:	20af883a 	add	r23,r4,r2
 800c0f0:	e00b883a 	mov	r5,fp
 800c0f4:	01800044 	movi	r6,1
 800c0f8:	8009883a 	mov	r4,r16
 800c0fc:	da001715 	stw	r8,92(sp)
 800c100:	800ea740 	call	800ea74 <__lshift>
 800c104:	1009883a 	mov	r4,r2
 800c108:	a80b883a 	mov	r5,r21
 800c10c:	1039883a 	mov	fp,r2
 800c110:	800ebbc0 	call	800ebbc <__mcmp>
 800c114:	da001717 	ldw	r8,92(sp)
 800c118:	00816e0e 	bge	zero,r2,800c6d4 <_dtoa_r+0x1248>
 800c11c:	b93fffc3 	ldbu	r4,-1(r23)
 800c120:	b8bfffc4 	addi	r2,r23,-1
 800c124:	1007883a 	mov	r3,r2
 800c128:	01800e44 	movi	r6,57
 800c12c:	d9c00717 	ldw	r7,28(sp)
 800c130:	00000506 	br	800c148 <_dtoa_r+0xcbc>
 800c134:	18ffffc4 	addi	r3,r3,-1
 800c138:	38811926 	beq	r7,r2,800c5a0 <_dtoa_r+0x1114>
 800c13c:	19000003 	ldbu	r4,0(r3)
 800c140:	102f883a 	mov	r23,r2
 800c144:	10bfffc4 	addi	r2,r2,-1
 800c148:	21403fcc 	andi	r5,r4,255
 800c14c:	2940201c 	xori	r5,r5,128
 800c150:	297fe004 	addi	r5,r5,-128
 800c154:	29bff726 	beq	r5,r6,800c134 <__alt_data_end+0xfc00c134>
 800c158:	21000044 	addi	r4,r4,1
 800c15c:	11000005 	stb	r4,0(r2)
 800c160:	8009883a 	mov	r4,r16
 800c164:	a80b883a 	mov	r5,r21
 800c168:	800e2e80 	call	800e2e8 <_Bfree>
 800c16c:	883e7526 	beq	r17,zero,800bb44 <__alt_data_end+0xfc00bb44>
 800c170:	90000426 	beq	r18,zero,800c184 <_dtoa_r+0xcf8>
 800c174:	94400326 	beq	r18,r17,800c184 <_dtoa_r+0xcf8>
 800c178:	8009883a 	mov	r4,r16
 800c17c:	900b883a 	mov	r5,r18
 800c180:	800e2e80 	call	800e2e8 <_Bfree>
 800c184:	8009883a 	mov	r4,r16
 800c188:	880b883a 	mov	r5,r17
 800c18c:	800e2e80 	call	800e2e8 <_Bfree>
 800c190:	003e6c06 	br	800bb44 <__alt_data_end+0xfc00bb44>
 800c194:	00800704 	movi	r2,28
 800c198:	d9800817 	ldw	r6,32(sp)
 800c19c:	a0a9883a 	add	r20,r20,r2
 800c1a0:	b0ad883a 	add	r22,r22,r2
 800c1a4:	308d883a 	add	r6,r6,r2
 800c1a8:	d9800815 	stw	r6,32(sp)
 800c1ac:	003fa506 	br	800c044 <__alt_data_end+0xfc00c044>
 800c1b0:	013efb84 	movi	r4,-1042
 800c1b4:	246bc83a 	sub	r21,r4,r17
 800c1b8:	9548983a 	sll	r4,r18,r21
 800c1bc:	003d1806 	br	800b620 <__alt_data_end+0xfc00b620>
 800c1c0:	d8000c15 	stw	zero,48(sp)
 800c1c4:	003d5b06 	br	800b734 <__alt_data_end+0xfc00b734>
 800c1c8:	880b883a 	mov	r5,r17
 800c1cc:	8009883a 	mov	r4,r16
 800c1d0:	01800284 	movi	r6,10
 800c1d4:	000f883a 	mov	r7,zero
 800c1d8:	800e3100 	call	800e310 <__multadd>
 800c1dc:	1023883a 	mov	r17,r2
 800c1e0:	d8800d17 	ldw	r2,52(sp)
 800c1e4:	0082550e 	bge	zero,r2,800cb3c <_dtoa_r+0x16b0>
 800c1e8:	d8800615 	stw	r2,24(sp)
 800c1ec:	0500050e 	bge	zero,r20,800c204 <_dtoa_r+0xd78>
 800c1f0:	880b883a 	mov	r5,r17
 800c1f4:	8009883a 	mov	r4,r16
 800c1f8:	a00d883a 	mov	r6,r20
 800c1fc:	800ea740 	call	800ea74 <__lshift>
 800c200:	1023883a 	mov	r17,r2
 800c204:	98016a1e 	bne	r19,zero,800c7b0 <_dtoa_r+0x1324>
 800c208:	8829883a 	mov	r20,r17
 800c20c:	d9000617 	ldw	r4,24(sp)
 800c210:	dcc00717 	ldw	r19,28(sp)
 800c214:	9480004c 	andi	r18,r18,1
 800c218:	20bfffc4 	addi	r2,r4,-1
 800c21c:	9885883a 	add	r2,r19,r2
 800c220:	d8800415 	stw	r2,16(sp)
 800c224:	dc800615 	stw	r18,24(sp)
 800c228:	e009883a 	mov	r4,fp
 800c22c:	a80b883a 	mov	r5,r21
 800c230:	800b2640 	call	800b264 <quorem>
 800c234:	e009883a 	mov	r4,fp
 800c238:	880b883a 	mov	r5,r17
 800c23c:	102f883a 	mov	r23,r2
 800c240:	800ebbc0 	call	800ebbc <__mcmp>
 800c244:	8009883a 	mov	r4,r16
 800c248:	a80b883a 	mov	r5,r21
 800c24c:	a00d883a 	mov	r6,r20
 800c250:	102d883a 	mov	r22,r2
 800c254:	800ec1c0 	call	800ec1c <__mdiff>
 800c258:	1007883a 	mov	r3,r2
 800c25c:	10800317 	ldw	r2,12(r2)
 800c260:	bc800c04 	addi	r18,r23,48
 800c264:	1000971e 	bne	r2,zero,800c4c4 <_dtoa_r+0x1038>
 800c268:	180b883a 	mov	r5,r3
 800c26c:	e009883a 	mov	r4,fp
 800c270:	d8c01515 	stw	r3,84(sp)
 800c274:	800ebbc0 	call	800ebbc <__mcmp>
 800c278:	d8c01517 	ldw	r3,84(sp)
 800c27c:	8009883a 	mov	r4,r16
 800c280:	d8801515 	stw	r2,84(sp)
 800c284:	180b883a 	mov	r5,r3
 800c288:	800e2e80 	call	800e2e8 <_Bfree>
 800c28c:	d8801517 	ldw	r2,84(sp)
 800c290:	1000041e 	bne	r2,zero,800c2a4 <_dtoa_r+0xe18>
 800c294:	d9800317 	ldw	r6,12(sp)
 800c298:	3000021e 	bne	r6,zero,800c2a4 <_dtoa_r+0xe18>
 800c29c:	d8c00617 	ldw	r3,24(sp)
 800c2a0:	18007626 	beq	r3,zero,800c47c <_dtoa_r+0xff0>
 800c2a4:	b0005b16 	blt	r22,zero,800c414 <_dtoa_r+0xf88>
 800c2a8:	b000041e 	bne	r22,zero,800c2bc <_dtoa_r+0xe30>
 800c2ac:	d9000317 	ldw	r4,12(sp)
 800c2b0:	2000021e 	bne	r4,zero,800c2bc <_dtoa_r+0xe30>
 800c2b4:	d8c00617 	ldw	r3,24(sp)
 800c2b8:	18005626 	beq	r3,zero,800c414 <_dtoa_r+0xf88>
 800c2bc:	00814d16 	blt	zero,r2,800c7f4 <_dtoa_r+0x1368>
 800c2c0:	d8c00417 	ldw	r3,16(sp)
 800c2c4:	9d800044 	addi	r22,r19,1
 800c2c8:	9c800005 	stb	r18,0(r19)
 800c2cc:	b02f883a 	mov	r23,r22
 800c2d0:	98c14c26 	beq	r19,r3,800c804 <_dtoa_r+0x1378>
 800c2d4:	e00b883a 	mov	r5,fp
 800c2d8:	8009883a 	mov	r4,r16
 800c2dc:	01800284 	movi	r6,10
 800c2e0:	000f883a 	mov	r7,zero
 800c2e4:	800e3100 	call	800e310 <__multadd>
 800c2e8:	1039883a 	mov	fp,r2
 800c2ec:	8d006d26 	beq	r17,r20,800c4a4 <_dtoa_r+0x1018>
 800c2f0:	880b883a 	mov	r5,r17
 800c2f4:	01800284 	movi	r6,10
 800c2f8:	000f883a 	mov	r7,zero
 800c2fc:	8009883a 	mov	r4,r16
 800c300:	800e3100 	call	800e310 <__multadd>
 800c304:	a00b883a 	mov	r5,r20
 800c308:	8009883a 	mov	r4,r16
 800c30c:	01800284 	movi	r6,10
 800c310:	000f883a 	mov	r7,zero
 800c314:	1023883a 	mov	r17,r2
 800c318:	800e3100 	call	800e310 <__multadd>
 800c31c:	1029883a 	mov	r20,r2
 800c320:	b027883a 	mov	r19,r22
 800c324:	003fc006 	br	800c228 <__alt_data_end+0xfc00c228>
 800c328:	a005883a 	mov	r2,r20
 800c32c:	003ede06 	br	800bea8 <__alt_data_end+0xfc00bea8>
 800c330:	01000044 	movi	r4,1
 800c334:	d9000b15 	stw	r4,44(sp)
 800c338:	d9802217 	ldw	r6,136(sp)
 800c33c:	0180dc0e 	bge	zero,r6,800c6b0 <_dtoa_r+0x1224>
 800c340:	3023883a 	mov	r17,r6
 800c344:	d9800d15 	stw	r6,52(sp)
 800c348:	d9800615 	stw	r6,24(sp)
 800c34c:	003d1e06 	br	800b7c8 <__alt_data_end+0xfc00b7c8>
 800c350:	d8800617 	ldw	r2,24(sp)
 800c354:	00be3716 	blt	zero,r2,800bc34 <__alt_data_end+0xfc00bc34>
 800c358:	1000be1e 	bne	r2,zero,800c654 <_dtoa_r+0x11c8>
 800c35c:	8809883a 	mov	r4,r17
 800c360:	a00b883a 	mov	r5,r20
 800c364:	000d883a 	mov	r6,zero
 800c368:	01d00534 	movhi	r7,16404
 800c36c:	80050740 	call	8005074 <__muldf3>
 800c370:	1009883a 	mov	r4,r2
 800c374:	180b883a 	mov	r5,r3
 800c378:	900d883a 	mov	r6,r18
 800c37c:	980f883a 	mov	r7,r19
 800c380:	80144ac0 	call	80144ac <__gedf2>
 800c384:	002b883a 	mov	r21,zero
 800c388:	0023883a 	mov	r17,zero
 800c38c:	10007a16 	blt	r2,zero,800c578 <_dtoa_r+0x10ec>
 800c390:	d9002217 	ldw	r4,136(sp)
 800c394:	ddc00717 	ldw	r23,28(sp)
 800c398:	0108303a 	nor	r4,zero,r4
 800c39c:	d9000515 	stw	r4,20(sp)
 800c3a0:	8009883a 	mov	r4,r16
 800c3a4:	a80b883a 	mov	r5,r21
 800c3a8:	800e2e80 	call	800e2e8 <_Bfree>
 800c3ac:	883f751e 	bne	r17,zero,800c184 <__alt_data_end+0xfc00c184>
 800c3b0:	003de406 	br	800bb44 <__alt_data_end+0xfc00bb44>
 800c3b4:	e00b883a 	mov	r5,fp
 800c3b8:	8009883a 	mov	r4,r16
 800c3bc:	800e9340 	call	800e934 <__pow5mult>
 800c3c0:	1039883a 	mov	fp,r2
 800c3c4:	003ed306 	br	800bf14 <__alt_data_end+0xfc00bf14>
 800c3c8:	903ee01e 	bne	r18,zero,800bf4c <__alt_data_end+0xfc00bf4c>
 800c3cc:	00800434 	movhi	r2,16
 800c3d0:	10bfffc4 	addi	r2,r2,-1
 800c3d4:	9884703a 	and	r2,r19,r2
 800c3d8:	103f081e 	bne	r2,zero,800bffc <__alt_data_end+0xfc00bffc>
 800c3dc:	9cdffc2c 	andhi	r19,r19,32752
 800c3e0:	983f0626 	beq	r19,zero,800bffc <__alt_data_end+0xfc00bffc>
 800c3e4:	d8800817 	ldw	r2,32(sp)
 800c3e8:	b5800044 	addi	r22,r22,1
 800c3ec:	04c00044 	movi	r19,1
 800c3f0:	10800044 	addi	r2,r2,1
 800c3f4:	d8800815 	stw	r2,32(sp)
 800c3f8:	003f0106 	br	800c000 <__alt_data_end+0xfc00c000>
 800c3fc:	d9800f17 	ldw	r6,60(sp)
 800c400:	30016826 	beq	r6,zero,800c9a4 <_dtoa_r+0x1518>
 800c404:	10810cc4 	addi	r2,r2,1075
 800c408:	dd400917 	ldw	r21,36(sp)
 800c40c:	dd000817 	ldw	r20,32(sp)
 800c410:	003e9906 	br	800be78 <__alt_data_end+0xfc00be78>
 800c414:	9011883a 	mov	r8,r18
 800c418:	4007883a 	mov	r3,r8
 800c41c:	e02d883a 	mov	r22,fp
 800c420:	0080100e 	bge	zero,r2,800c464 <_dtoa_r+0xfd8>
 800c424:	01800044 	movi	r6,1
 800c428:	8009883a 	mov	r4,r16
 800c42c:	e00b883a 	mov	r5,fp
 800c430:	da001515 	stw	r8,84(sp)
 800c434:	da001715 	stw	r8,92(sp)
 800c438:	800ea740 	call	800ea74 <__lshift>
 800c43c:	1009883a 	mov	r4,r2
 800c440:	a80b883a 	mov	r5,r21
 800c444:	102d883a 	mov	r22,r2
 800c448:	800ebbc0 	call	800ebbc <__mcmp>
 800c44c:	d8c01517 	ldw	r3,84(sp)
 800c450:	da001717 	ldw	r8,92(sp)
 800c454:	0081a50e 	bge	zero,r2,800caec <_dtoa_r+0x1660>
 800c458:	00800e44 	movi	r2,57
 800c45c:	40817b26 	beq	r8,r2,800ca4c <_dtoa_r+0x15c0>
 800c460:	40c00044 	addi	r3,r8,1
 800c464:	8825883a 	mov	r18,r17
 800c468:	9dc00044 	addi	r23,r19,1
 800c46c:	98c00005 	stb	r3,0(r19)
 800c470:	a023883a 	mov	r17,r20
 800c474:	b039883a 	mov	fp,r22
 800c478:	003f3906 	br	800c160 <__alt_data_end+0xfc00c160>
 800c47c:	00800e44 	movi	r2,57
 800c480:	9011883a 	mov	r8,r18
 800c484:	90817226 	beq	r18,r2,800ca50 <_dtoa_r+0x15c4>
 800c488:	0580010e 	bge	zero,r22,800c490 <_dtoa_r+0x1004>
 800c48c:	ba000c44 	addi	r8,r23,49
 800c490:	8825883a 	mov	r18,r17
 800c494:	9dc00044 	addi	r23,r19,1
 800c498:	9a000005 	stb	r8,0(r19)
 800c49c:	a023883a 	mov	r17,r20
 800c4a0:	003f2f06 	br	800c160 <__alt_data_end+0xfc00c160>
 800c4a4:	880b883a 	mov	r5,r17
 800c4a8:	8009883a 	mov	r4,r16
 800c4ac:	01800284 	movi	r6,10
 800c4b0:	000f883a 	mov	r7,zero
 800c4b4:	800e3100 	call	800e310 <__multadd>
 800c4b8:	1023883a 	mov	r17,r2
 800c4bc:	1029883a 	mov	r20,r2
 800c4c0:	003f9706 	br	800c320 <__alt_data_end+0xfc00c320>
 800c4c4:	8009883a 	mov	r4,r16
 800c4c8:	180b883a 	mov	r5,r3
 800c4cc:	800e2e80 	call	800e2e8 <_Bfree>
 800c4d0:	00800044 	movi	r2,1
 800c4d4:	003f7306 	br	800c2a4 <__alt_data_end+0xfc00c2a4>
 800c4d8:	e009883a 	mov	r4,fp
 800c4dc:	a80b883a 	mov	r5,r21
 800c4e0:	800ebbc0 	call	800ebbc <__mcmp>
 800c4e4:	103ee60e 	bge	r2,zero,800c080 <__alt_data_end+0xfc00c080>
 800c4e8:	8009883a 	mov	r4,r16
 800c4ec:	e00b883a 	mov	r5,fp
 800c4f0:	01800284 	movi	r6,10
 800c4f4:	000f883a 	mov	r7,zero
 800c4f8:	800e3100 	call	800e310 <__multadd>
 800c4fc:	d9000517 	ldw	r4,20(sp)
 800c500:	d9800b17 	ldw	r6,44(sp)
 800c504:	1039883a 	mov	fp,r2
 800c508:	213fffc4 	addi	r4,r4,-1
 800c50c:	d9000515 	stw	r4,20(sp)
 800c510:	303f2d1e 	bne	r6,zero,800c1c8 <__alt_data_end+0xfc00c1c8>
 800c514:	d9000d17 	ldw	r4,52(sp)
 800c518:	0101780e 	bge	zero,r4,800cafc <_dtoa_r+0x1670>
 800c51c:	d9000615 	stw	r4,24(sp)
 800c520:	003edb06 	br	800c090 <__alt_data_end+0xfc00c090>
 800c524:	00800084 	movi	r2,2
 800c528:	30818e1e 	bne	r6,r2,800cb64 <_dtoa_r+0x16d8>
 800c52c:	d8000b15 	stw	zero,44(sp)
 800c530:	003f8106 	br	800c338 <__alt_data_end+0xfc00c338>
 800c534:	d8800717 	ldw	r2,28(sp)
 800c538:	003c0306 	br	800b548 <__alt_data_end+0xfc00b548>
 800c53c:	d9000317 	ldw	r4,12(sp)
 800c540:	00800084 	movi	r2,2
 800c544:	113ed00e 	bge	r2,r4,800c088 <__alt_data_end+0xfc00c088>
 800c548:	d8c00617 	ldw	r3,24(sp)
 800c54c:	183f901e 	bne	r3,zero,800c390 <__alt_data_end+0xfc00c390>
 800c550:	a80b883a 	mov	r5,r21
 800c554:	8009883a 	mov	r4,r16
 800c558:	01800144 	movi	r6,5
 800c55c:	000f883a 	mov	r7,zero
 800c560:	800e3100 	call	800e310 <__multadd>
 800c564:	e009883a 	mov	r4,fp
 800c568:	100b883a 	mov	r5,r2
 800c56c:	102b883a 	mov	r21,r2
 800c570:	800ebbc0 	call	800ebbc <__mcmp>
 800c574:	00bf860e 	bge	zero,r2,800c390 <__alt_data_end+0xfc00c390>
 800c578:	d9800717 	ldw	r6,28(sp)
 800c57c:	00800c44 	movi	r2,49
 800c580:	30800005 	stb	r2,0(r6)
 800c584:	d8800517 	ldw	r2,20(sp)
 800c588:	35c00044 	addi	r23,r6,1
 800c58c:	10800044 	addi	r2,r2,1
 800c590:	d8800515 	stw	r2,20(sp)
 800c594:	003f8206 	br	800c3a0 <__alt_data_end+0xfc00c3a0>
 800c598:	903e981e 	bne	r18,zero,800bffc <__alt_data_end+0xfc00bffc>
 800c59c:	003f8b06 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c5a0:	d9800517 	ldw	r6,20(sp)
 800c5a4:	d8c00717 	ldw	r3,28(sp)
 800c5a8:	00800c44 	movi	r2,49
 800c5ac:	31800044 	addi	r6,r6,1
 800c5b0:	d9800515 	stw	r6,20(sp)
 800c5b4:	18800005 	stb	r2,0(r3)
 800c5b8:	003ee906 	br	800c160 <__alt_data_end+0xfc00c160>
 800c5bc:	dc000317 	ldw	r16,12(sp)
 800c5c0:	003d6006 	br	800bb44 <__alt_data_end+0xfc00bb44>
 800c5c4:	8809883a 	mov	r4,r17
 800c5c8:	80059680 	call	8005968 <__floatsidf>
 800c5cc:	a009883a 	mov	r4,r20
 800c5d0:	a80b883a 	mov	r5,r21
 800c5d4:	100d883a 	mov	r6,r2
 800c5d8:	180f883a 	mov	r7,r3
 800c5dc:	80050740 	call	8005074 <__muldf3>
 800c5e0:	1009883a 	mov	r4,r2
 800c5e4:	180b883a 	mov	r5,r3
 800c5e8:	000d883a 	mov	r6,zero
 800c5ec:	01d00734 	movhi	r7,16412
 800c5f0:	8013b8c0 	call	8013b8c <__adddf3>
 800c5f4:	1023883a 	mov	r17,r2
 800c5f8:	00bf3034 	movhi	r2,64704
 800c5fc:	1885883a 	add	r2,r3,r2
 800c600:	d8800e15 	stw	r2,56(sp)
 800c604:	a009883a 	mov	r4,r20
 800c608:	a80b883a 	mov	r5,r21
 800c60c:	000d883a 	mov	r6,zero
 800c610:	01d00534 	movhi	r7,16404
 800c614:	801466c0 	call	801466c <__subdf3>
 800c618:	d9c00e17 	ldw	r7,56(sp)
 800c61c:	1009883a 	mov	r4,r2
 800c620:	180b883a 	mov	r5,r3
 800c624:	880d883a 	mov	r6,r17
 800c628:	102b883a 	mov	r21,r2
 800c62c:	1829883a 	mov	r20,r3
 800c630:	80144ac0 	call	80144ac <__gedf2>
 800c634:	00807716 	blt	zero,r2,800c814 <_dtoa_r+0x1388>
 800c638:	d8800e17 	ldw	r2,56(sp)
 800c63c:	a809883a 	mov	r4,r21
 800c640:	a00b883a 	mov	r5,r20
 800c644:	11e0003c 	xorhi	r7,r2,32768
 800c648:	880d883a 	mov	r6,r17
 800c64c:	801458c0 	call	801458c <__ledf2>
 800c650:	103d6b0e 	bge	r2,zero,800bc00 <__alt_data_end+0xfc00bc00>
 800c654:	002b883a 	mov	r21,zero
 800c658:	0023883a 	mov	r17,zero
 800c65c:	003f4c06 	br	800c390 <__alt_data_end+0xfc00c390>
 800c660:	d9800917 	ldw	r6,36(sp)
 800c664:	e00b883a 	mov	r5,fp
 800c668:	8009883a 	mov	r4,r16
 800c66c:	800e9340 	call	800e934 <__pow5mult>
 800c670:	1039883a 	mov	fp,r2
 800c674:	003e2706 	br	800bf14 <__alt_data_end+0xfc00bf14>
 800c678:	d8000b15 	stw	zero,44(sp)
 800c67c:	003c4906 	br	800b7a4 <__alt_data_end+0xfc00b7a4>
 800c680:	d9000917 	ldw	r4,36(sp)
 800c684:	d9800a17 	ldw	r6,40(sp)
 800c688:	dd400915 	stw	r21,36(sp)
 800c68c:	a905c83a 	sub	r2,r21,r4
 800c690:	308d883a 	add	r6,r6,r2
 800c694:	d9800a15 	stw	r6,40(sp)
 800c698:	002b883a 	mov	r21,zero
 800c69c:	003df206 	br	800be68 <__alt_data_end+0xfc00be68>
 800c6a0:	dc800e15 	stw	r18,56(sp)
 800c6a4:	982b883a 	mov	r21,r19
 800c6a8:	04400084 	movi	r17,2
 800c6ac:	003c7406 	br	800b880 <__alt_data_end+0xfc00b880>
 800c6b0:	04400044 	movi	r17,1
 800c6b4:	dc400d15 	stw	r17,52(sp)
 800c6b8:	dc400615 	stw	r17,24(sp)
 800c6bc:	dc402215 	stw	r17,136(sp)
 800c6c0:	80001115 	stw	zero,68(r16)
 800c6c4:	000b883a 	mov	r5,zero
 800c6c8:	003c4a06 	br	800b7f4 <__alt_data_end+0xfc00b7f4>
 800c6cc:	3023883a 	mov	r17,r6
 800c6d0:	003ffb06 	br	800c6c0 <__alt_data_end+0xfc00c6c0>
 800c6d4:	1000021e 	bne	r2,zero,800c6e0 <_dtoa_r+0x1254>
 800c6d8:	4200004c 	andi	r8,r8,1
 800c6dc:	403e8f1e 	bne	r8,zero,800c11c <__alt_data_end+0xfc00c11c>
 800c6e0:	01000c04 	movi	r4,48
 800c6e4:	00000106 	br	800c6ec <_dtoa_r+0x1260>
 800c6e8:	102f883a 	mov	r23,r2
 800c6ec:	b8bfffc4 	addi	r2,r23,-1
 800c6f0:	10c00007 	ldb	r3,0(r2)
 800c6f4:	193ffc26 	beq	r3,r4,800c6e8 <__alt_data_end+0xfc00c6e8>
 800c6f8:	003e9906 	br	800c160 <__alt_data_end+0xfc00c160>
 800c6fc:	d9000517 	ldw	r4,20(sp)
 800c700:	012fc83a 	sub	r23,zero,r4
 800c704:	b800ad26 	beq	r23,zero,800c9bc <_dtoa_r+0x1530>
 800c708:	b88003cc 	andi	r2,r23,15
 800c70c:	100490fa 	slli	r2,r2,3
 800c710:	00c200b4 	movhi	r3,2050
 800c714:	18ca2904 	addi	r3,r3,10404
 800c718:	1885883a 	add	r2,r3,r2
 800c71c:	11800017 	ldw	r6,0(r2)
 800c720:	11c00117 	ldw	r7,4(r2)
 800c724:	b82fd13a 	srai	r23,r23,4
 800c728:	9009883a 	mov	r4,r18
 800c72c:	980b883a 	mov	r5,r19
 800c730:	80050740 	call	8005074 <__muldf3>
 800c734:	1029883a 	mov	r20,r2
 800c738:	182b883a 	mov	r21,r3
 800c73c:	b800f426 	beq	r23,zero,800cb10 <_dtoa_r+0x1684>
 800c740:	020200b4 	movhi	r8,2050
 800c744:	420a1f04 	addi	r8,r8,10364
 800c748:	8029883a 	mov	r20,r16
 800c74c:	04400084 	movi	r17,2
 800c750:	4021883a 	mov	r16,r8
 800c754:	b980004c 	andi	r6,r23,1
 800c758:	1009883a 	mov	r4,r2
 800c75c:	b82fd07a 	srai	r23,r23,1
 800c760:	180b883a 	mov	r5,r3
 800c764:	30000426 	beq	r6,zero,800c778 <_dtoa_r+0x12ec>
 800c768:	81800017 	ldw	r6,0(r16)
 800c76c:	81c00117 	ldw	r7,4(r16)
 800c770:	8c400044 	addi	r17,r17,1
 800c774:	80050740 	call	8005074 <__muldf3>
 800c778:	84000204 	addi	r16,r16,8
 800c77c:	b83ff51e 	bne	r23,zero,800c754 <__alt_data_end+0xfc00c754>
 800c780:	a021883a 	mov	r16,r20
 800c784:	182b883a 	mov	r21,r3
 800c788:	1029883a 	mov	r20,r2
 800c78c:	003c5506 	br	800b8e4 <__alt_data_end+0xfc00b8e4>
 800c790:	d9800517 	ldw	r6,20(sp)
 800c794:	d9000717 	ldw	r4,28(sp)
 800c798:	00c00c04 	movi	r3,48
 800c79c:	31800044 	addi	r6,r6,1
 800c7a0:	d9800515 	stw	r6,20(sp)
 800c7a4:	20c00005 	stb	r3,0(r4)
 800c7a8:	02000c44 	movi	r8,49
 800c7ac:	003da206 	br	800be38 <__alt_data_end+0xfc00be38>
 800c7b0:	89400117 	ldw	r5,4(r17)
 800c7b4:	8009883a 	mov	r4,r16
 800c7b8:	800e2400 	call	800e240 <_Balloc>
 800c7bc:	89800417 	ldw	r6,16(r17)
 800c7c0:	11000304 	addi	r4,r2,12
 800c7c4:	89400304 	addi	r5,r17,12
 800c7c8:	31800084 	addi	r6,r6,2
 800c7cc:	318d883a 	add	r6,r6,r6
 800c7d0:	318d883a 	add	r6,r6,r6
 800c7d4:	1027883a 	mov	r19,r2
 800c7d8:	80065b80 	call	80065b8 <memcpy>
 800c7dc:	8009883a 	mov	r4,r16
 800c7e0:	980b883a 	mov	r5,r19
 800c7e4:	01800044 	movi	r6,1
 800c7e8:	800ea740 	call	800ea74 <__lshift>
 800c7ec:	1029883a 	mov	r20,r2
 800c7f0:	003e8606 	br	800c20c <__alt_data_end+0xfc00c20c>
 800c7f4:	00800e44 	movi	r2,57
 800c7f8:	90809526 	beq	r18,r2,800ca50 <_dtoa_r+0x15c4>
 800c7fc:	92000044 	addi	r8,r18,1
 800c800:	003f2306 	br	800c490 <__alt_data_end+0xfc00c490>
 800c804:	9011883a 	mov	r8,r18
 800c808:	8825883a 	mov	r18,r17
 800c80c:	a023883a 	mov	r17,r20
 800c810:	003e3706 	br	800c0f0 <__alt_data_end+0xfc00c0f0>
 800c814:	002b883a 	mov	r21,zero
 800c818:	0023883a 	mov	r17,zero
 800c81c:	003f5606 	br	800c578 <__alt_data_end+0xfc00c578>
 800c820:	51bfffc4 	addi	r6,r10,-1
 800c824:	300490fa 	slli	r2,r6,3
 800c828:	00c200b4 	movhi	r3,2050
 800c82c:	18ca2904 	addi	r3,r3,10404
 800c830:	1885883a 	add	r2,r3,r2
 800c834:	d9c00e17 	ldw	r7,56(sp)
 800c838:	11000017 	ldw	r4,0(r2)
 800c83c:	11400117 	ldw	r5,4(r2)
 800c840:	d8800717 	ldw	r2,28(sp)
 800c844:	d9801015 	stw	r6,64(sp)
 800c848:	880d883a 	mov	r6,r17
 800c84c:	da801615 	stw	r10,88(sp)
 800c850:	15c00044 	addi	r23,r2,1
 800c854:	80050740 	call	8005074 <__muldf3>
 800c858:	a80b883a 	mov	r5,r21
 800c85c:	a009883a 	mov	r4,r20
 800c860:	d8c01115 	stw	r3,68(sp)
 800c864:	d8800e15 	stw	r2,56(sp)
 800c868:	80058e00 	call	80058e0 <__fixdfsi>
 800c86c:	1009883a 	mov	r4,r2
 800c870:	1023883a 	mov	r17,r2
 800c874:	80059680 	call	8005968 <__floatsidf>
 800c878:	a009883a 	mov	r4,r20
 800c87c:	a80b883a 	mov	r5,r21
 800c880:	100d883a 	mov	r6,r2
 800c884:	180f883a 	mov	r7,r3
 800c888:	801466c0 	call	801466c <__subdf3>
 800c88c:	1813883a 	mov	r9,r3
 800c890:	d8c00717 	ldw	r3,28(sp)
 800c894:	8c400c04 	addi	r17,r17,48
 800c898:	1011883a 	mov	r8,r2
 800c89c:	1c400005 	stb	r17,0(r3)
 800c8a0:	da801617 	ldw	r10,88(sp)
 800c8a4:	00800044 	movi	r2,1
 800c8a8:	50802326 	beq	r10,r2,800c938 <_dtoa_r+0x14ac>
 800c8ac:	d8800717 	ldw	r2,28(sp)
 800c8b0:	b82b883a 	mov	r21,r23
 800c8b4:	dc001315 	stw	r16,76(sp)
 800c8b8:	12a9883a 	add	r20,r2,r10
 800c8bc:	4807883a 	mov	r3,r9
 800c8c0:	4005883a 	mov	r2,r8
 800c8c4:	dc801415 	stw	r18,80(sp)
 800c8c8:	000d883a 	mov	r6,zero
 800c8cc:	01d00934 	movhi	r7,16420
 800c8d0:	1009883a 	mov	r4,r2
 800c8d4:	180b883a 	mov	r5,r3
 800c8d8:	80050740 	call	8005074 <__muldf3>
 800c8dc:	180b883a 	mov	r5,r3
 800c8e0:	1009883a 	mov	r4,r2
 800c8e4:	1821883a 	mov	r16,r3
 800c8e8:	1025883a 	mov	r18,r2
 800c8ec:	80058e00 	call	80058e0 <__fixdfsi>
 800c8f0:	1009883a 	mov	r4,r2
 800c8f4:	1023883a 	mov	r17,r2
 800c8f8:	80059680 	call	8005968 <__floatsidf>
 800c8fc:	9009883a 	mov	r4,r18
 800c900:	800b883a 	mov	r5,r16
 800c904:	100d883a 	mov	r6,r2
 800c908:	180f883a 	mov	r7,r3
 800c90c:	8c400c04 	addi	r17,r17,48
 800c910:	801466c0 	call	801466c <__subdf3>
 800c914:	ad400044 	addi	r21,r21,1
 800c918:	ac7fffc5 	stb	r17,-1(r21)
 800c91c:	ad3fea1e 	bne	r21,r20,800c8c8 <__alt_data_end+0xfc00c8c8>
 800c920:	1813883a 	mov	r9,r3
 800c924:	d8c01017 	ldw	r3,64(sp)
 800c928:	dc001317 	ldw	r16,76(sp)
 800c92c:	dc801417 	ldw	r18,80(sp)
 800c930:	1011883a 	mov	r8,r2
 800c934:	b8ef883a 	add	r23,r23,r3
 800c938:	d9000e17 	ldw	r4,56(sp)
 800c93c:	d9401117 	ldw	r5,68(sp)
 800c940:	000d883a 	mov	r6,zero
 800c944:	01cff834 	movhi	r7,16352
 800c948:	da001715 	stw	r8,92(sp)
 800c94c:	da401515 	stw	r9,84(sp)
 800c950:	8013b8c0 	call	8013b8c <__adddf3>
 800c954:	da001717 	ldw	r8,92(sp)
 800c958:	da401517 	ldw	r9,84(sp)
 800c95c:	1009883a 	mov	r4,r2
 800c960:	400d883a 	mov	r6,r8
 800c964:	480f883a 	mov	r7,r9
 800c968:	180b883a 	mov	r5,r3
 800c96c:	801458c0 	call	801458c <__ledf2>
 800c970:	da001717 	ldw	r8,92(sp)
 800c974:	da401517 	ldw	r9,84(sp)
 800c978:	10003b0e 	bge	r2,zero,800ca68 <_dtoa_r+0x15dc>
 800c97c:	d9001217 	ldw	r4,72(sp)
 800c980:	bd7fffc3 	ldbu	r21,-1(r23)
 800c984:	d9000515 	stw	r4,20(sp)
 800c988:	003d1c06 	br	800bdfc <__alt_data_end+0xfc00bdfc>
 800c98c:	d8c00817 	ldw	r3,32(sp)
 800c990:	18a9c83a 	sub	r20,r3,r2
 800c994:	0005883a 	mov	r2,zero
 800c998:	003d3706 	br	800be78 <__alt_data_end+0xfc00be78>
 800c99c:	00800044 	movi	r2,1
 800c9a0:	003dd006 	br	800c0e4 <__alt_data_end+0xfc00c0e4>
 800c9a4:	d8c00217 	ldw	r3,8(sp)
 800c9a8:	00800d84 	movi	r2,54
 800c9ac:	dd400917 	ldw	r21,36(sp)
 800c9b0:	10c5c83a 	sub	r2,r2,r3
 800c9b4:	dd000817 	ldw	r20,32(sp)
 800c9b8:	003d2f06 	br	800be78 <__alt_data_end+0xfc00be78>
 800c9bc:	9029883a 	mov	r20,r18
 800c9c0:	982b883a 	mov	r21,r19
 800c9c4:	04400084 	movi	r17,2
 800c9c8:	003bc606 	br	800b8e4 <__alt_data_end+0xfc00b8e4>
 800c9cc:	d8800617 	ldw	r2,24(sp)
 800c9d0:	103efc26 	beq	r2,zero,800c5c4 <__alt_data_end+0xfc00c5c4>
 800c9d4:	d8c00d17 	ldw	r3,52(sp)
 800c9d8:	00fc890e 	bge	zero,r3,800bc00 <__alt_data_end+0xfc00bc00>
 800c9dc:	a80b883a 	mov	r5,r21
 800c9e0:	a009883a 	mov	r4,r20
 800c9e4:	000d883a 	mov	r6,zero
 800c9e8:	01d00934 	movhi	r7,16420
 800c9ec:	80050740 	call	8005074 <__muldf3>
 800c9f0:	89000044 	addi	r4,r17,1
 800c9f4:	1029883a 	mov	r20,r2
 800c9f8:	182b883a 	mov	r21,r3
 800c9fc:	80059680 	call	8005968 <__floatsidf>
 800ca00:	a009883a 	mov	r4,r20
 800ca04:	a80b883a 	mov	r5,r21
 800ca08:	100d883a 	mov	r6,r2
 800ca0c:	180f883a 	mov	r7,r3
 800ca10:	80050740 	call	8005074 <__muldf3>
 800ca14:	1009883a 	mov	r4,r2
 800ca18:	180b883a 	mov	r5,r3
 800ca1c:	000d883a 	mov	r6,zero
 800ca20:	01d00734 	movhi	r7,16412
 800ca24:	8013b8c0 	call	8013b8c <__adddf3>
 800ca28:	d9000517 	ldw	r4,20(sp)
 800ca2c:	1023883a 	mov	r17,r2
 800ca30:	00bf3034 	movhi	r2,64704
 800ca34:	213fffc4 	addi	r4,r4,-1
 800ca38:	1885883a 	add	r2,r3,r2
 800ca3c:	d9001215 	stw	r4,72(sp)
 800ca40:	d8800e15 	stw	r2,56(sp)
 800ca44:	da800d17 	ldw	r10,52(sp)
 800ca48:	003bc306 	br	800b958 <__alt_data_end+0xfc00b958>
 800ca4c:	b039883a 	mov	fp,r22
 800ca50:	01000e44 	movi	r4,57
 800ca54:	8825883a 	mov	r18,r17
 800ca58:	9dc00044 	addi	r23,r19,1
 800ca5c:	99000005 	stb	r4,0(r19)
 800ca60:	a023883a 	mov	r17,r20
 800ca64:	003dae06 	br	800c120 <__alt_data_end+0xfc00c120>
 800ca68:	d9800e17 	ldw	r6,56(sp)
 800ca6c:	d9c01117 	ldw	r7,68(sp)
 800ca70:	0009883a 	mov	r4,zero
 800ca74:	014ff834 	movhi	r5,16352
 800ca78:	da001715 	stw	r8,92(sp)
 800ca7c:	da401515 	stw	r9,84(sp)
 800ca80:	801466c0 	call	801466c <__subdf3>
 800ca84:	da001717 	ldw	r8,92(sp)
 800ca88:	da401517 	ldw	r9,84(sp)
 800ca8c:	1009883a 	mov	r4,r2
 800ca90:	180b883a 	mov	r5,r3
 800ca94:	400d883a 	mov	r6,r8
 800ca98:	480f883a 	mov	r7,r9
 800ca9c:	80144ac0 	call	80144ac <__gedf2>
 800caa0:	00bc570e 	bge	zero,r2,800bc00 <__alt_data_end+0xfc00bc00>
 800caa4:	01000c04 	movi	r4,48
 800caa8:	00000106 	br	800cab0 <_dtoa_r+0x1624>
 800caac:	102f883a 	mov	r23,r2
 800cab0:	b8bfffc4 	addi	r2,r23,-1
 800cab4:	10c00007 	ldb	r3,0(r2)
 800cab8:	193ffc26 	beq	r3,r4,800caac <__alt_data_end+0xfc00caac>
 800cabc:	d9801217 	ldw	r6,72(sp)
 800cac0:	d9800515 	stw	r6,20(sp)
 800cac4:	003c1f06 	br	800bb44 <__alt_data_end+0xfc00bb44>
 800cac8:	d8801217 	ldw	r2,72(sp)
 800cacc:	dc001117 	ldw	r16,68(sp)
 800cad0:	d8800515 	stw	r2,20(sp)
 800cad4:	003cc906 	br	800bdfc <__alt_data_end+0xfc00bdfc>
 800cad8:	dd801317 	ldw	r22,76(sp)
 800cadc:	dc001117 	ldw	r16,68(sp)
 800cae0:	dcc01417 	ldw	r19,80(sp)
 800cae4:	dc801017 	ldw	r18,64(sp)
 800cae8:	003c4506 	br	800bc00 <__alt_data_end+0xfc00bc00>
 800caec:	103e5d1e 	bne	r2,zero,800c464 <__alt_data_end+0xfc00c464>
 800caf0:	4080004c 	andi	r2,r8,1
 800caf4:	103e5b26 	beq	r2,zero,800c464 <__alt_data_end+0xfc00c464>
 800caf8:	003e5706 	br	800c458 <__alt_data_end+0xfc00c458>
 800cafc:	d8c00317 	ldw	r3,12(sp)
 800cb00:	00800084 	movi	r2,2
 800cb04:	10c00a16 	blt	r2,r3,800cb30 <_dtoa_r+0x16a4>
 800cb08:	d9000d17 	ldw	r4,52(sp)
 800cb0c:	003e8306 	br	800c51c <__alt_data_end+0xfc00c51c>
 800cb10:	04400084 	movi	r17,2
 800cb14:	003b7306 	br	800b8e4 <__alt_data_end+0xfc00b8e4>
 800cb18:	d9801217 	ldw	r6,72(sp)
 800cb1c:	d9800515 	stw	r6,20(sp)
 800cb20:	003cb606 	br	800bdfc <__alt_data_end+0xfc00bdfc>
 800cb24:	d9001217 	ldw	r4,72(sp)
 800cb28:	d9000515 	stw	r4,20(sp)
 800cb2c:	003c0506 	br	800bb44 <__alt_data_end+0xfc00bb44>
 800cb30:	d9800d17 	ldw	r6,52(sp)
 800cb34:	d9800615 	stw	r6,24(sp)
 800cb38:	003e8306 	br	800c548 <__alt_data_end+0xfc00c548>
 800cb3c:	d9800317 	ldw	r6,12(sp)
 800cb40:	00800084 	movi	r2,2
 800cb44:	11800216 	blt	r2,r6,800cb50 <_dtoa_r+0x16c4>
 800cb48:	d8800d17 	ldw	r2,52(sp)
 800cb4c:	003da606 	br	800c1e8 <__alt_data_end+0xfc00c1e8>
 800cb50:	d8800d17 	ldw	r2,52(sp)
 800cb54:	d8800615 	stw	r2,24(sp)
 800cb58:	003e7b06 	br	800c548 <__alt_data_end+0xfc00c548>
 800cb5c:	05000044 	movi	r20,1
 800cb60:	003b0506 	br	800b778 <__alt_data_end+0xfc00b778>
 800cb64:	8009883a 	mov	r4,r16
 800cb68:	80001115 	stw	zero,68(r16)
 800cb6c:	000b883a 	mov	r5,zero
 800cb70:	800e2400 	call	800e240 <_Balloc>
 800cb74:	d8800715 	stw	r2,28(sp)
 800cb78:	d8c00717 	ldw	r3,28(sp)
 800cb7c:	00bfffc4 	movi	r2,-1
 800cb80:	01000044 	movi	r4,1
 800cb84:	d8800615 	stw	r2,24(sp)
 800cb88:	80c01015 	stw	r3,64(r16)
 800cb8c:	d9000b15 	stw	r4,44(sp)
 800cb90:	d8002215 	stw	zero,136(sp)
 800cb94:	d8800d15 	stw	r2,52(sp)
 800cb98:	003c1906 	br	800bc00 <__alt_data_end+0xfc00bc00>
 800cb9c:	193d2926 	beq	r3,r4,800c044 <__alt_data_end+0xfc00c044>
 800cba0:	00c00f04 	movi	r3,60
 800cba4:	1885c83a 	sub	r2,r3,r2
 800cba8:	003d7b06 	br	800c198 <__alt_data_end+0xfc00c198>
 800cbac:	000b883a 	mov	r5,zero
 800cbb0:	003b1006 	br	800b7f4 <__alt_data_end+0xfc00b7f4>

0800cbb4 <_fflush_r>:
 800cbb4:	defffb04 	addi	sp,sp,-20
 800cbb8:	dcc00315 	stw	r19,12(sp)
 800cbbc:	dc000015 	stw	r16,0(sp)
 800cbc0:	dfc00415 	stw	ra,16(sp)
 800cbc4:	dc800215 	stw	r18,8(sp)
 800cbc8:	dc400115 	stw	r17,4(sp)
 800cbcc:	2027883a 	mov	r19,r4
 800cbd0:	2821883a 	mov	r16,r5
 800cbd4:	20000226 	beq	r4,zero,800cbe0 <_fflush_r+0x2c>
 800cbd8:	20800e17 	ldw	r2,56(r4)
 800cbdc:	10005326 	beq	r2,zero,800cd2c <_fflush_r+0x178>
 800cbe0:	8080030b 	ldhu	r2,12(r16)
 800cbe4:	10ffffcc 	andi	r3,r2,65535
 800cbe8:	18e0001c 	xori	r3,r3,32768
 800cbec:	18e00004 	addi	r3,r3,-32768
 800cbf0:	18002c26 	beq	r3,zero,800cca4 <_fflush_r+0xf0>
 800cbf4:	10c0020c 	andi	r3,r2,8
 800cbf8:	1800321e 	bne	r3,zero,800ccc4 <_fflush_r+0x110>
 800cbfc:	80c00117 	ldw	r3,4(r16)
 800cc00:	10820014 	ori	r2,r2,2048
 800cc04:	8080030d 	sth	r2,12(r16)
 800cc08:	00c0570e 	bge	zero,r3,800cd68 <_fflush_r+0x1b4>
 800cc0c:	82000a17 	ldw	r8,40(r16)
 800cc10:	40002426 	beq	r8,zero,800cca4 <_fflush_r+0xf0>
 800cc14:	9c400017 	ldw	r17,0(r19)
 800cc18:	10c4000c 	andi	r3,r2,4096
 800cc1c:	98000015 	stw	zero,0(r19)
 800cc20:	18004626 	beq	r3,zero,800cd3c <_fflush_r+0x188>
 800cc24:	81801417 	ldw	r6,80(r16)
 800cc28:	10c0010c 	andi	r3,r2,4
 800cc2c:	18000626 	beq	r3,zero,800cc48 <_fflush_r+0x94>
 800cc30:	80c00117 	ldw	r3,4(r16)
 800cc34:	80800c17 	ldw	r2,48(r16)
 800cc38:	30cdc83a 	sub	r6,r6,r3
 800cc3c:	10000226 	beq	r2,zero,800cc48 <_fflush_r+0x94>
 800cc40:	80800f17 	ldw	r2,60(r16)
 800cc44:	308dc83a 	sub	r6,r6,r2
 800cc48:	81400717 	ldw	r5,28(r16)
 800cc4c:	9809883a 	mov	r4,r19
 800cc50:	000f883a 	mov	r7,zero
 800cc54:	403ee83a 	callr	r8
 800cc58:	00ffffc4 	movi	r3,-1
 800cc5c:	10c04526 	beq	r2,r3,800cd74 <_fflush_r+0x1c0>
 800cc60:	80c0030b 	ldhu	r3,12(r16)
 800cc64:	81000417 	ldw	r4,16(r16)
 800cc68:	80000115 	stw	zero,4(r16)
 800cc6c:	197dffcc 	andi	r5,r3,63487
 800cc70:	8140030d 	sth	r5,12(r16)
 800cc74:	81000015 	stw	r4,0(r16)
 800cc78:	18c4000c 	andi	r3,r3,4096
 800cc7c:	18000126 	beq	r3,zero,800cc84 <_fflush_r+0xd0>
 800cc80:	80801415 	stw	r2,80(r16)
 800cc84:	81400c17 	ldw	r5,48(r16)
 800cc88:	9c400015 	stw	r17,0(r19)
 800cc8c:	28000526 	beq	r5,zero,800cca4 <_fflush_r+0xf0>
 800cc90:	80801004 	addi	r2,r16,64
 800cc94:	28800226 	beq	r5,r2,800cca0 <_fflush_r+0xec>
 800cc98:	9809883a 	mov	r4,r19
 800cc9c:	800d2e40 	call	800d2e4 <_free_r>
 800cca0:	80000c15 	stw	zero,48(r16)
 800cca4:	0005883a 	mov	r2,zero
 800cca8:	dfc00417 	ldw	ra,16(sp)
 800ccac:	dcc00317 	ldw	r19,12(sp)
 800ccb0:	dc800217 	ldw	r18,8(sp)
 800ccb4:	dc400117 	ldw	r17,4(sp)
 800ccb8:	dc000017 	ldw	r16,0(sp)
 800ccbc:	dec00504 	addi	sp,sp,20
 800ccc0:	f800283a 	ret
 800ccc4:	84800417 	ldw	r18,16(r16)
 800ccc8:	903ff626 	beq	r18,zero,800cca4 <__alt_data_end+0xfc00cca4>
 800cccc:	84400017 	ldw	r17,0(r16)
 800ccd0:	108000cc 	andi	r2,r2,3
 800ccd4:	84800015 	stw	r18,0(r16)
 800ccd8:	8ca3c83a 	sub	r17,r17,r18
 800ccdc:	10001526 	beq	r2,zero,800cd34 <_fflush_r+0x180>
 800cce0:	0005883a 	mov	r2,zero
 800cce4:	80800215 	stw	r2,8(r16)
 800cce8:	04400316 	blt	zero,r17,800ccf8 <_fflush_r+0x144>
 800ccec:	003fed06 	br	800cca4 <__alt_data_end+0xfc00cca4>
 800ccf0:	90a5883a 	add	r18,r18,r2
 800ccf4:	047feb0e 	bge	zero,r17,800cca4 <__alt_data_end+0xfc00cca4>
 800ccf8:	80800917 	ldw	r2,36(r16)
 800ccfc:	81400717 	ldw	r5,28(r16)
 800cd00:	880f883a 	mov	r7,r17
 800cd04:	900d883a 	mov	r6,r18
 800cd08:	9809883a 	mov	r4,r19
 800cd0c:	103ee83a 	callr	r2
 800cd10:	88a3c83a 	sub	r17,r17,r2
 800cd14:	00bff616 	blt	zero,r2,800ccf0 <__alt_data_end+0xfc00ccf0>
 800cd18:	80c0030b 	ldhu	r3,12(r16)
 800cd1c:	00bfffc4 	movi	r2,-1
 800cd20:	18c01014 	ori	r3,r3,64
 800cd24:	80c0030d 	sth	r3,12(r16)
 800cd28:	003fdf06 	br	800cca8 <__alt_data_end+0xfc00cca8>
 800cd2c:	800d1700 	call	800d170 <__sinit>
 800cd30:	003fab06 	br	800cbe0 <__alt_data_end+0xfc00cbe0>
 800cd34:	80800517 	ldw	r2,20(r16)
 800cd38:	003fea06 	br	800cce4 <__alt_data_end+0xfc00cce4>
 800cd3c:	81400717 	ldw	r5,28(r16)
 800cd40:	000d883a 	mov	r6,zero
 800cd44:	9809883a 	mov	r4,r19
 800cd48:	01c00044 	movi	r7,1
 800cd4c:	403ee83a 	callr	r8
 800cd50:	100d883a 	mov	r6,r2
 800cd54:	00bfffc4 	movi	r2,-1
 800cd58:	30801326 	beq	r6,r2,800cda8 <_fflush_r+0x1f4>
 800cd5c:	8080030b 	ldhu	r2,12(r16)
 800cd60:	82000a17 	ldw	r8,40(r16)
 800cd64:	003fb006 	br	800cc28 <__alt_data_end+0xfc00cc28>
 800cd68:	80c00f17 	ldw	r3,60(r16)
 800cd6c:	00ffa716 	blt	zero,r3,800cc0c <__alt_data_end+0xfc00cc0c>
 800cd70:	003fcc06 	br	800cca4 <__alt_data_end+0xfc00cca4>
 800cd74:	98c00017 	ldw	r3,0(r19)
 800cd78:	183fb926 	beq	r3,zero,800cc60 <__alt_data_end+0xfc00cc60>
 800cd7c:	01000744 	movi	r4,29
 800cd80:	19000226 	beq	r3,r4,800cd8c <_fflush_r+0x1d8>
 800cd84:	01000584 	movi	r4,22
 800cd88:	1900101e 	bne	r3,r4,800cdcc <_fflush_r+0x218>
 800cd8c:	8080030b 	ldhu	r2,12(r16)
 800cd90:	80c00417 	ldw	r3,16(r16)
 800cd94:	80000115 	stw	zero,4(r16)
 800cd98:	10bdffcc 	andi	r2,r2,63487
 800cd9c:	8080030d 	sth	r2,12(r16)
 800cda0:	80c00015 	stw	r3,0(r16)
 800cda4:	003fb706 	br	800cc84 <__alt_data_end+0xfc00cc84>
 800cda8:	98800017 	ldw	r2,0(r19)
 800cdac:	103feb26 	beq	r2,zero,800cd5c <__alt_data_end+0xfc00cd5c>
 800cdb0:	00c00744 	movi	r3,29
 800cdb4:	10c00226 	beq	r2,r3,800cdc0 <_fflush_r+0x20c>
 800cdb8:	00c00584 	movi	r3,22
 800cdbc:	10ffd61e 	bne	r2,r3,800cd18 <__alt_data_end+0xfc00cd18>
 800cdc0:	9c400015 	stw	r17,0(r19)
 800cdc4:	0005883a 	mov	r2,zero
 800cdc8:	003fb706 	br	800cca8 <__alt_data_end+0xfc00cca8>
 800cdcc:	80c0030b 	ldhu	r3,12(r16)
 800cdd0:	18c01014 	ori	r3,r3,64
 800cdd4:	80c0030d 	sth	r3,12(r16)
 800cdd8:	003fb306 	br	800cca8 <__alt_data_end+0xfc00cca8>

0800cddc <fflush>:
 800cddc:	20000526 	beq	r4,zero,800cdf4 <fflush+0x18>
 800cde0:	008200b4 	movhi	r2,2050
 800cde4:	10913704 	addi	r2,r2,17628
 800cde8:	200b883a 	mov	r5,r4
 800cdec:	11000017 	ldw	r4,0(r2)
 800cdf0:	800cbb41 	jmpi	800cbb4 <_fflush_r>
 800cdf4:	008200b4 	movhi	r2,2050
 800cdf8:	10913604 	addi	r2,r2,17624
 800cdfc:	11000017 	ldw	r4,0(r2)
 800ce00:	01420074 	movhi	r5,2049
 800ce04:	2972ed04 	addi	r5,r5,-13388
 800ce08:	800db301 	jmpi	800db30 <_fwalk_reent>

0800ce0c <__fp_lock>:
 800ce0c:	0005883a 	mov	r2,zero
 800ce10:	f800283a 	ret

0800ce14 <__fp_unlock>:
 800ce14:	0005883a 	mov	r2,zero
 800ce18:	f800283a 	ret

0800ce1c <_cleanup_r>:
 800ce1c:	01420074 	movhi	r5,2049
 800ce20:	294a3404 	addi	r5,r5,10448
 800ce24:	800da781 	jmpi	800da78 <_fwalk>

0800ce28 <__sinit.part.1>:
 800ce28:	defff604 	addi	sp,sp,-40
 800ce2c:	00c20074 	movhi	r3,2049
 800ce30:	dfc00915 	stw	ra,36(sp)
 800ce34:	df000815 	stw	fp,32(sp)
 800ce38:	ddc00715 	stw	r23,28(sp)
 800ce3c:	dd800615 	stw	r22,24(sp)
 800ce40:	dd400515 	stw	r21,20(sp)
 800ce44:	dd000415 	stw	r20,16(sp)
 800ce48:	dcc00315 	stw	r19,12(sp)
 800ce4c:	dc800215 	stw	r18,8(sp)
 800ce50:	dc400115 	stw	r17,4(sp)
 800ce54:	dc000015 	stw	r16,0(sp)
 800ce58:	18f38704 	addi	r3,r3,-12772
 800ce5c:	24000117 	ldw	r16,4(r4)
 800ce60:	20c00f15 	stw	r3,60(r4)
 800ce64:	07000044 	movi	fp,1
 800ce68:	00c000c4 	movi	r3,3
 800ce6c:	2080bb04 	addi	r2,r4,748
 800ce70:	20c0b915 	stw	r3,740(r4)
 800ce74:	27000e15 	stw	fp,56(r4)
 800ce78:	2080ba15 	stw	r2,744(r4)
 800ce7c:	2000b815 	stw	zero,736(r4)
 800ce80:	05c00204 	movi	r23,8
 800ce84:	00800104 	movi	r2,4
 800ce88:	2025883a 	mov	r18,r4
 800ce8c:	b80d883a 	mov	r6,r23
 800ce90:	81001704 	addi	r4,r16,92
 800ce94:	000b883a 	mov	r5,zero
 800ce98:	80000015 	stw	zero,0(r16)
 800ce9c:	80000115 	stw	zero,4(r16)
 800cea0:	80000215 	stw	zero,8(r16)
 800cea4:	8080030d 	sth	r2,12(r16)
 800cea8:	80001915 	stw	zero,100(r16)
 800ceac:	8000038d 	sth	zero,14(r16)
 800ceb0:	80000415 	stw	zero,16(r16)
 800ceb4:	80000515 	stw	zero,20(r16)
 800ceb8:	80000615 	stw	zero,24(r16)
 800cebc:	800e11c0 	call	800e11c <memset>
 800cec0:	05820074 	movhi	r22,2049
 800cec4:	94400217 	ldw	r17,8(r18)
 800cec8:	05420074 	movhi	r21,2049
 800cecc:	05020074 	movhi	r20,2049
 800ced0:	04c20074 	movhi	r19,2049
 800ced4:	b5be8104 	addi	r22,r22,-1532
 800ced8:	ad7e9804 	addi	r21,r21,-1440
 800cedc:	a53eb704 	addi	r20,r20,-1316
 800cee0:	9cfece04 	addi	r19,r19,-1224
 800cee4:	85800815 	stw	r22,32(r16)
 800cee8:	85400915 	stw	r21,36(r16)
 800ceec:	85000a15 	stw	r20,40(r16)
 800cef0:	84c00b15 	stw	r19,44(r16)
 800cef4:	84000715 	stw	r16,28(r16)
 800cef8:	00800284 	movi	r2,10
 800cefc:	89001704 	addi	r4,r17,92
 800cf00:	b80d883a 	mov	r6,r23
 800cf04:	000b883a 	mov	r5,zero
 800cf08:	88000015 	stw	zero,0(r17)
 800cf0c:	88000115 	stw	zero,4(r17)
 800cf10:	88000215 	stw	zero,8(r17)
 800cf14:	8880030d 	sth	r2,12(r17)
 800cf18:	88001915 	stw	zero,100(r17)
 800cf1c:	8f00038d 	sth	fp,14(r17)
 800cf20:	88000415 	stw	zero,16(r17)
 800cf24:	88000515 	stw	zero,20(r17)
 800cf28:	88000615 	stw	zero,24(r17)
 800cf2c:	800e11c0 	call	800e11c <memset>
 800cf30:	94000317 	ldw	r16,12(r18)
 800cf34:	00800484 	movi	r2,18
 800cf38:	8c400715 	stw	r17,28(r17)
 800cf3c:	8d800815 	stw	r22,32(r17)
 800cf40:	8d400915 	stw	r21,36(r17)
 800cf44:	8d000a15 	stw	r20,40(r17)
 800cf48:	8cc00b15 	stw	r19,44(r17)
 800cf4c:	8080030d 	sth	r2,12(r16)
 800cf50:	00800084 	movi	r2,2
 800cf54:	80000015 	stw	zero,0(r16)
 800cf58:	80000115 	stw	zero,4(r16)
 800cf5c:	80000215 	stw	zero,8(r16)
 800cf60:	80001915 	stw	zero,100(r16)
 800cf64:	8080038d 	sth	r2,14(r16)
 800cf68:	80000415 	stw	zero,16(r16)
 800cf6c:	80000515 	stw	zero,20(r16)
 800cf70:	80000615 	stw	zero,24(r16)
 800cf74:	81001704 	addi	r4,r16,92
 800cf78:	000b883a 	mov	r5,zero
 800cf7c:	b80d883a 	mov	r6,r23
 800cf80:	800e11c0 	call	800e11c <memset>
 800cf84:	84000715 	stw	r16,28(r16)
 800cf88:	85800815 	stw	r22,32(r16)
 800cf8c:	85400915 	stw	r21,36(r16)
 800cf90:	85000a15 	stw	r20,40(r16)
 800cf94:	84c00b15 	stw	r19,44(r16)
 800cf98:	dfc00917 	ldw	ra,36(sp)
 800cf9c:	df000817 	ldw	fp,32(sp)
 800cfa0:	ddc00717 	ldw	r23,28(sp)
 800cfa4:	dd800617 	ldw	r22,24(sp)
 800cfa8:	dd400517 	ldw	r21,20(sp)
 800cfac:	dd000417 	ldw	r20,16(sp)
 800cfb0:	dcc00317 	ldw	r19,12(sp)
 800cfb4:	dc800217 	ldw	r18,8(sp)
 800cfb8:	dc400117 	ldw	r17,4(sp)
 800cfbc:	dc000017 	ldw	r16,0(sp)
 800cfc0:	dec00a04 	addi	sp,sp,40
 800cfc4:	f800283a 	ret

0800cfc8 <__sfmoreglue>:
 800cfc8:	defffc04 	addi	sp,sp,-16
 800cfcc:	dc800215 	stw	r18,8(sp)
 800cfd0:	2825883a 	mov	r18,r5
 800cfd4:	dc000015 	stw	r16,0(sp)
 800cfd8:	01401a04 	movi	r5,104
 800cfdc:	2021883a 	mov	r16,r4
 800cfe0:	9009883a 	mov	r4,r18
 800cfe4:	dfc00315 	stw	ra,12(sp)
 800cfe8:	dc400115 	stw	r17,4(sp)
 800cfec:	80040900 	call	8004090 <__mulsi3>
 800cff0:	8009883a 	mov	r4,r16
 800cff4:	11400304 	addi	r5,r2,12
 800cff8:	1023883a 	mov	r17,r2
 800cffc:	8005e100 	call	8005e10 <_malloc_r>
 800d000:	1021883a 	mov	r16,r2
 800d004:	10000726 	beq	r2,zero,800d024 <__sfmoreglue+0x5c>
 800d008:	11000304 	addi	r4,r2,12
 800d00c:	10000015 	stw	zero,0(r2)
 800d010:	14800115 	stw	r18,4(r2)
 800d014:	11000215 	stw	r4,8(r2)
 800d018:	000b883a 	mov	r5,zero
 800d01c:	880d883a 	mov	r6,r17
 800d020:	800e11c0 	call	800e11c <memset>
 800d024:	8005883a 	mov	r2,r16
 800d028:	dfc00317 	ldw	ra,12(sp)
 800d02c:	dc800217 	ldw	r18,8(sp)
 800d030:	dc400117 	ldw	r17,4(sp)
 800d034:	dc000017 	ldw	r16,0(sp)
 800d038:	dec00404 	addi	sp,sp,16
 800d03c:	f800283a 	ret

0800d040 <__sfp>:
 800d040:	008200b4 	movhi	r2,2050
 800d044:	defffb04 	addi	sp,sp,-20
 800d048:	10913604 	addi	r2,r2,17624
 800d04c:	dc800215 	stw	r18,8(sp)
 800d050:	14800017 	ldw	r18,0(r2)
 800d054:	dcc00315 	stw	r19,12(sp)
 800d058:	dfc00415 	stw	ra,16(sp)
 800d05c:	90800e17 	ldw	r2,56(r18)
 800d060:	dc400115 	stw	r17,4(sp)
 800d064:	dc000015 	stw	r16,0(sp)
 800d068:	2027883a 	mov	r19,r4
 800d06c:	1000021e 	bne	r2,zero,800d078 <__sfp+0x38>
 800d070:	9009883a 	mov	r4,r18
 800d074:	800ce280 	call	800ce28 <__sinit.part.1>
 800d078:	9480b804 	addi	r18,r18,736
 800d07c:	047fffc4 	movi	r17,-1
 800d080:	91400117 	ldw	r5,4(r18)
 800d084:	94000217 	ldw	r16,8(r18)
 800d088:	297fffc4 	addi	r5,r5,-1
 800d08c:	28000a16 	blt	r5,zero,800d0b8 <__sfp+0x78>
 800d090:	8080030f 	ldh	r2,12(r16)
 800d094:	10000c26 	beq	r2,zero,800d0c8 <__sfp+0x88>
 800d098:	80c01d04 	addi	r3,r16,116
 800d09c:	00000206 	br	800d0a8 <__sfp+0x68>
 800d0a0:	18bfe60f 	ldh	r2,-104(r3)
 800d0a4:	10000826 	beq	r2,zero,800d0c8 <__sfp+0x88>
 800d0a8:	297fffc4 	addi	r5,r5,-1
 800d0ac:	1c3ffd04 	addi	r16,r3,-12
 800d0b0:	18c01a04 	addi	r3,r3,104
 800d0b4:	2c7ffa1e 	bne	r5,r17,800d0a0 <__alt_data_end+0xfc00d0a0>
 800d0b8:	90800017 	ldw	r2,0(r18)
 800d0bc:	10001d26 	beq	r2,zero,800d134 <__sfp+0xf4>
 800d0c0:	1025883a 	mov	r18,r2
 800d0c4:	003fee06 	br	800d080 <__alt_data_end+0xfc00d080>
 800d0c8:	00bfffc4 	movi	r2,-1
 800d0cc:	8080038d 	sth	r2,14(r16)
 800d0d0:	00800044 	movi	r2,1
 800d0d4:	8080030d 	sth	r2,12(r16)
 800d0d8:	80001915 	stw	zero,100(r16)
 800d0dc:	80000015 	stw	zero,0(r16)
 800d0e0:	80000215 	stw	zero,8(r16)
 800d0e4:	80000115 	stw	zero,4(r16)
 800d0e8:	80000415 	stw	zero,16(r16)
 800d0ec:	80000515 	stw	zero,20(r16)
 800d0f0:	80000615 	stw	zero,24(r16)
 800d0f4:	81001704 	addi	r4,r16,92
 800d0f8:	000b883a 	mov	r5,zero
 800d0fc:	01800204 	movi	r6,8
 800d100:	800e11c0 	call	800e11c <memset>
 800d104:	8005883a 	mov	r2,r16
 800d108:	80000c15 	stw	zero,48(r16)
 800d10c:	80000d15 	stw	zero,52(r16)
 800d110:	80001115 	stw	zero,68(r16)
 800d114:	80001215 	stw	zero,72(r16)
 800d118:	dfc00417 	ldw	ra,16(sp)
 800d11c:	dcc00317 	ldw	r19,12(sp)
 800d120:	dc800217 	ldw	r18,8(sp)
 800d124:	dc400117 	ldw	r17,4(sp)
 800d128:	dc000017 	ldw	r16,0(sp)
 800d12c:	dec00504 	addi	sp,sp,20
 800d130:	f800283a 	ret
 800d134:	9809883a 	mov	r4,r19
 800d138:	01400104 	movi	r5,4
 800d13c:	800cfc80 	call	800cfc8 <__sfmoreglue>
 800d140:	90800015 	stw	r2,0(r18)
 800d144:	103fde1e 	bne	r2,zero,800d0c0 <__alt_data_end+0xfc00d0c0>
 800d148:	00800304 	movi	r2,12
 800d14c:	98800015 	stw	r2,0(r19)
 800d150:	0005883a 	mov	r2,zero
 800d154:	003ff006 	br	800d118 <__alt_data_end+0xfc00d118>

0800d158 <_cleanup>:
 800d158:	008200b4 	movhi	r2,2050
 800d15c:	10913604 	addi	r2,r2,17624
 800d160:	11000017 	ldw	r4,0(r2)
 800d164:	01420074 	movhi	r5,2049
 800d168:	294a3404 	addi	r5,r5,10448
 800d16c:	800da781 	jmpi	800da78 <_fwalk>

0800d170 <__sinit>:
 800d170:	20800e17 	ldw	r2,56(r4)
 800d174:	10000126 	beq	r2,zero,800d17c <__sinit+0xc>
 800d178:	f800283a 	ret
 800d17c:	800ce281 	jmpi	800ce28 <__sinit.part.1>

0800d180 <__sfp_lock_acquire>:
 800d180:	f800283a 	ret

0800d184 <__sfp_lock_release>:
 800d184:	f800283a 	ret

0800d188 <__sinit_lock_acquire>:
 800d188:	f800283a 	ret

0800d18c <__sinit_lock_release>:
 800d18c:	f800283a 	ret

0800d190 <__fp_lock_all>:
 800d190:	008200b4 	movhi	r2,2050
 800d194:	10913704 	addi	r2,r2,17628
 800d198:	11000017 	ldw	r4,0(r2)
 800d19c:	01420074 	movhi	r5,2049
 800d1a0:	29738304 	addi	r5,r5,-12788
 800d1a4:	800da781 	jmpi	800da78 <_fwalk>

0800d1a8 <__fp_unlock_all>:
 800d1a8:	008200b4 	movhi	r2,2050
 800d1ac:	10913704 	addi	r2,r2,17628
 800d1b0:	11000017 	ldw	r4,0(r2)
 800d1b4:	01420074 	movhi	r5,2049
 800d1b8:	29738504 	addi	r5,r5,-12780
 800d1bc:	800da781 	jmpi	800da78 <_fwalk>

0800d1c0 <_malloc_trim_r>:
 800d1c0:	defffb04 	addi	sp,sp,-20
 800d1c4:	dcc00315 	stw	r19,12(sp)
 800d1c8:	04c200b4 	movhi	r19,2050
 800d1cc:	dc800215 	stw	r18,8(sp)
 800d1d0:	dc400115 	stw	r17,4(sp)
 800d1d4:	dc000015 	stw	r16,0(sp)
 800d1d8:	dfc00415 	stw	ra,16(sp)
 800d1dc:	2821883a 	mov	r16,r5
 800d1e0:	9cca7e04 	addi	r19,r19,10744
 800d1e4:	2025883a 	mov	r18,r4
 800d1e8:	80157300 	call	8015730 <__malloc_lock>
 800d1ec:	98800217 	ldw	r2,8(r19)
 800d1f0:	14400117 	ldw	r17,4(r2)
 800d1f4:	00bfff04 	movi	r2,-4
 800d1f8:	88a2703a 	and	r17,r17,r2
 800d1fc:	8c21c83a 	sub	r16,r17,r16
 800d200:	8403fbc4 	addi	r16,r16,4079
 800d204:	8020d33a 	srli	r16,r16,12
 800d208:	0083ffc4 	movi	r2,4095
 800d20c:	843fffc4 	addi	r16,r16,-1
 800d210:	8020933a 	slli	r16,r16,12
 800d214:	1400060e 	bge	r2,r16,800d230 <_malloc_trim_r+0x70>
 800d218:	9009883a 	mov	r4,r18
 800d21c:	000b883a 	mov	r5,zero
 800d220:	80068c00 	call	80068c0 <_sbrk_r>
 800d224:	98c00217 	ldw	r3,8(r19)
 800d228:	1c47883a 	add	r3,r3,r17
 800d22c:	10c00a26 	beq	r2,r3,800d258 <_malloc_trim_r+0x98>
 800d230:	9009883a 	mov	r4,r18
 800d234:	80157500 	call	8015750 <__malloc_unlock>
 800d238:	0005883a 	mov	r2,zero
 800d23c:	dfc00417 	ldw	ra,16(sp)
 800d240:	dcc00317 	ldw	r19,12(sp)
 800d244:	dc800217 	ldw	r18,8(sp)
 800d248:	dc400117 	ldw	r17,4(sp)
 800d24c:	dc000017 	ldw	r16,0(sp)
 800d250:	dec00504 	addi	sp,sp,20
 800d254:	f800283a 	ret
 800d258:	9009883a 	mov	r4,r18
 800d25c:	040bc83a 	sub	r5,zero,r16
 800d260:	80068c00 	call	80068c0 <_sbrk_r>
 800d264:	00ffffc4 	movi	r3,-1
 800d268:	10c00d26 	beq	r2,r3,800d2a0 <_malloc_trim_r+0xe0>
 800d26c:	00c200b4 	movhi	r3,2050
 800d270:	18d82004 	addi	r3,r3,24704
 800d274:	18800017 	ldw	r2,0(r3)
 800d278:	99000217 	ldw	r4,8(r19)
 800d27c:	8c23c83a 	sub	r17,r17,r16
 800d280:	8c400054 	ori	r17,r17,1
 800d284:	1421c83a 	sub	r16,r2,r16
 800d288:	24400115 	stw	r17,4(r4)
 800d28c:	9009883a 	mov	r4,r18
 800d290:	1c000015 	stw	r16,0(r3)
 800d294:	80157500 	call	8015750 <__malloc_unlock>
 800d298:	00800044 	movi	r2,1
 800d29c:	003fe706 	br	800d23c <__alt_data_end+0xfc00d23c>
 800d2a0:	9009883a 	mov	r4,r18
 800d2a4:	000b883a 	mov	r5,zero
 800d2a8:	80068c00 	call	80068c0 <_sbrk_r>
 800d2ac:	99000217 	ldw	r4,8(r19)
 800d2b0:	014003c4 	movi	r5,15
 800d2b4:	1107c83a 	sub	r3,r2,r4
 800d2b8:	28ffdd0e 	bge	r5,r3,800d230 <__alt_data_end+0xfc00d230>
 800d2bc:	014200b4 	movhi	r5,2050
 800d2c0:	29513404 	addi	r5,r5,17616
 800d2c4:	29400017 	ldw	r5,0(r5)
 800d2c8:	18c00054 	ori	r3,r3,1
 800d2cc:	20c00115 	stw	r3,4(r4)
 800d2d0:	00c200b4 	movhi	r3,2050
 800d2d4:	1145c83a 	sub	r2,r2,r5
 800d2d8:	18d82004 	addi	r3,r3,24704
 800d2dc:	18800015 	stw	r2,0(r3)
 800d2e0:	003fd306 	br	800d230 <__alt_data_end+0xfc00d230>

0800d2e4 <_free_r>:
 800d2e4:	28004c26 	beq	r5,zero,800d418 <_free_r+0x134>
 800d2e8:	defffd04 	addi	sp,sp,-12
 800d2ec:	dc400115 	stw	r17,4(sp)
 800d2f0:	dc000015 	stw	r16,0(sp)
 800d2f4:	2023883a 	mov	r17,r4
 800d2f8:	2821883a 	mov	r16,r5
 800d2fc:	dfc00215 	stw	ra,8(sp)
 800d300:	80157300 	call	8015730 <__malloc_lock>
 800d304:	813fff17 	ldw	r4,-4(r16)
 800d308:	00bfff84 	movi	r2,-2
 800d30c:	024200b4 	movhi	r9,2050
 800d310:	81bffe04 	addi	r6,r16,-8
 800d314:	2084703a 	and	r2,r4,r2
 800d318:	4a4a7e04 	addi	r9,r9,10744
 800d31c:	308b883a 	add	r5,r6,r2
 800d320:	2a000117 	ldw	r8,4(r5)
 800d324:	49c00217 	ldw	r7,8(r9)
 800d328:	00ffff04 	movi	r3,-4
 800d32c:	40c6703a 	and	r3,r8,r3
 800d330:	39405326 	beq	r7,r5,800d480 <_free_r+0x19c>
 800d334:	28c00115 	stw	r3,4(r5)
 800d338:	2100004c 	andi	r4,r4,1
 800d33c:	2000091e 	bne	r4,zero,800d364 <_free_r+0x80>
 800d340:	81fffe17 	ldw	r7,-8(r16)
 800d344:	4a000204 	addi	r8,r9,8
 800d348:	31cdc83a 	sub	r6,r6,r7
 800d34c:	31000217 	ldw	r4,8(r6)
 800d350:	11c5883a 	add	r2,r2,r7
 800d354:	22006126 	beq	r4,r8,800d4dc <_free_r+0x1f8>
 800d358:	31c00317 	ldw	r7,12(r6)
 800d35c:	21c00315 	stw	r7,12(r4)
 800d360:	39000215 	stw	r4,8(r7)
 800d364:	28c9883a 	add	r4,r5,r3
 800d368:	21c00117 	ldw	r7,4(r4)
 800d36c:	39c0004c 	andi	r7,r7,1
 800d370:	38000d1e 	bne	r7,zero,800d3a8 <_free_r+0xc4>
 800d374:	29000217 	ldw	r4,8(r5)
 800d378:	10c5883a 	add	r2,r2,r3
 800d37c:	00c200b4 	movhi	r3,2050
 800d380:	18ca8004 	addi	r3,r3,10752
 800d384:	20c07526 	beq	r4,r3,800d55c <_free_r+0x278>
 800d388:	29c00317 	ldw	r7,12(r5)
 800d38c:	11400054 	ori	r5,r2,1
 800d390:	3087883a 	add	r3,r6,r2
 800d394:	21c00315 	stw	r7,12(r4)
 800d398:	39000215 	stw	r4,8(r7)
 800d39c:	31400115 	stw	r5,4(r6)
 800d3a0:	18800015 	stw	r2,0(r3)
 800d3a4:	00000406 	br	800d3b8 <_free_r+0xd4>
 800d3a8:	10c00054 	ori	r3,r2,1
 800d3ac:	30c00115 	stw	r3,4(r6)
 800d3b0:	3087883a 	add	r3,r6,r2
 800d3b4:	18800015 	stw	r2,0(r3)
 800d3b8:	00c07fc4 	movi	r3,511
 800d3bc:	18801736 	bltu	r3,r2,800d41c <_free_r+0x138>
 800d3c0:	1004d0fa 	srli	r2,r2,3
 800d3c4:	01400044 	movi	r5,1
 800d3c8:	49000117 	ldw	r4,4(r9)
 800d3cc:	1087883a 	add	r3,r2,r2
 800d3d0:	18c7883a 	add	r3,r3,r3
 800d3d4:	1005d0ba 	srai	r2,r2,2
 800d3d8:	18c7883a 	add	r3,r3,r3
 800d3dc:	1a47883a 	add	r3,r3,r9
 800d3e0:	19c00217 	ldw	r7,8(r3)
 800d3e4:	2884983a 	sll	r2,r5,r2
 800d3e8:	30c00315 	stw	r3,12(r6)
 800d3ec:	31c00215 	stw	r7,8(r6)
 800d3f0:	1104b03a 	or	r2,r2,r4
 800d3f4:	19800215 	stw	r6,8(r3)
 800d3f8:	48800115 	stw	r2,4(r9)
 800d3fc:	39800315 	stw	r6,12(r7)
 800d400:	8809883a 	mov	r4,r17
 800d404:	dfc00217 	ldw	ra,8(sp)
 800d408:	dc400117 	ldw	r17,4(sp)
 800d40c:	dc000017 	ldw	r16,0(sp)
 800d410:	dec00304 	addi	sp,sp,12
 800d414:	80157501 	jmpi	8015750 <__malloc_unlock>
 800d418:	f800283a 	ret
 800d41c:	1006d27a 	srli	r3,r2,9
 800d420:	01000104 	movi	r4,4
 800d424:	20c04036 	bltu	r4,r3,800d528 <_free_r+0x244>
 800d428:	1006d1ba 	srli	r3,r2,6
 800d42c:	19400e04 	addi	r5,r3,56
 800d430:	2947883a 	add	r3,r5,r5
 800d434:	18c7883a 	add	r3,r3,r3
 800d438:	18c7883a 	add	r3,r3,r3
 800d43c:	1a49883a 	add	r4,r3,r9
 800d440:	20c00217 	ldw	r3,8(r4)
 800d444:	01c200b4 	movhi	r7,2050
 800d448:	39ca7e04 	addi	r7,r7,10744
 800d44c:	19003b26 	beq	r3,r4,800d53c <_free_r+0x258>
 800d450:	01ffff04 	movi	r7,-4
 800d454:	19400117 	ldw	r5,4(r3)
 800d458:	29ca703a 	and	r5,r5,r7
 800d45c:	1140022e 	bgeu	r2,r5,800d468 <_free_r+0x184>
 800d460:	18c00217 	ldw	r3,8(r3)
 800d464:	20fffb1e 	bne	r4,r3,800d454 <__alt_data_end+0xfc00d454>
 800d468:	18800317 	ldw	r2,12(r3)
 800d46c:	30800315 	stw	r2,12(r6)
 800d470:	30c00215 	stw	r3,8(r6)
 800d474:	11800215 	stw	r6,8(r2)
 800d478:	19800315 	stw	r6,12(r3)
 800d47c:	003fe006 	br	800d400 <__alt_data_end+0xfc00d400>
 800d480:	2100004c 	andi	r4,r4,1
 800d484:	1885883a 	add	r2,r3,r2
 800d488:	2000071e 	bne	r4,zero,800d4a8 <_free_r+0x1c4>
 800d48c:	817ffe17 	ldw	r5,-8(r16)
 800d490:	314dc83a 	sub	r6,r6,r5
 800d494:	30c00317 	ldw	r3,12(r6)
 800d498:	31000217 	ldw	r4,8(r6)
 800d49c:	1145883a 	add	r2,r2,r5
 800d4a0:	20c00315 	stw	r3,12(r4)
 800d4a4:	19000215 	stw	r4,8(r3)
 800d4a8:	10c00054 	ori	r3,r2,1
 800d4ac:	30c00115 	stw	r3,4(r6)
 800d4b0:	00c200b4 	movhi	r3,2050
 800d4b4:	18d13504 	addi	r3,r3,17620
 800d4b8:	18c00017 	ldw	r3,0(r3)
 800d4bc:	49800215 	stw	r6,8(r9)
 800d4c0:	10ffcf36 	bltu	r2,r3,800d400 <__alt_data_end+0xfc00d400>
 800d4c4:	008200b4 	movhi	r2,2050
 800d4c8:	10981104 	addi	r2,r2,24644
 800d4cc:	11400017 	ldw	r5,0(r2)
 800d4d0:	8809883a 	mov	r4,r17
 800d4d4:	800d1c00 	call	800d1c0 <_malloc_trim_r>
 800d4d8:	003fc906 	br	800d400 <__alt_data_end+0xfc00d400>
 800d4dc:	28c9883a 	add	r4,r5,r3
 800d4e0:	21000117 	ldw	r4,4(r4)
 800d4e4:	2100004c 	andi	r4,r4,1
 800d4e8:	20000a1e 	bne	r4,zero,800d514 <_free_r+0x230>
 800d4ec:	29000317 	ldw	r4,12(r5)
 800d4f0:	29400217 	ldw	r5,8(r5)
 800d4f4:	10c5883a 	add	r2,r2,r3
 800d4f8:	10c00054 	ori	r3,r2,1
 800d4fc:	29000315 	stw	r4,12(r5)
 800d500:	21400215 	stw	r5,8(r4)
 800d504:	30c00115 	stw	r3,4(r6)
 800d508:	308d883a 	add	r6,r6,r2
 800d50c:	30800015 	stw	r2,0(r6)
 800d510:	003fbb06 	br	800d400 <__alt_data_end+0xfc00d400>
 800d514:	10c00054 	ori	r3,r2,1
 800d518:	30c00115 	stw	r3,4(r6)
 800d51c:	308d883a 	add	r6,r6,r2
 800d520:	30800015 	stw	r2,0(r6)
 800d524:	003fb606 	br	800d400 <__alt_data_end+0xfc00d400>
 800d528:	01000504 	movi	r4,20
 800d52c:	20c01436 	bltu	r4,r3,800d580 <_free_r+0x29c>
 800d530:	194016c4 	addi	r5,r3,91
 800d534:	2947883a 	add	r3,r5,r5
 800d538:	003fbe06 	br	800d434 <__alt_data_end+0xfc00d434>
 800d53c:	280bd0ba 	srai	r5,r5,2
 800d540:	00800044 	movi	r2,1
 800d544:	39000117 	ldw	r4,4(r7)
 800d548:	114a983a 	sll	r5,r2,r5
 800d54c:	1805883a 	mov	r2,r3
 800d550:	2908b03a 	or	r4,r5,r4
 800d554:	39000115 	stw	r4,4(r7)
 800d558:	003fc406 	br	800d46c <__alt_data_end+0xfc00d46c>
 800d55c:	49800515 	stw	r6,20(r9)
 800d560:	49800415 	stw	r6,16(r9)
 800d564:	10c00054 	ori	r3,r2,1
 800d568:	31000315 	stw	r4,12(r6)
 800d56c:	31000215 	stw	r4,8(r6)
 800d570:	30c00115 	stw	r3,4(r6)
 800d574:	308d883a 	add	r6,r6,r2
 800d578:	30800015 	stw	r2,0(r6)
 800d57c:	003fa006 	br	800d400 <__alt_data_end+0xfc00d400>
 800d580:	01001504 	movi	r4,84
 800d584:	20c00436 	bltu	r4,r3,800d598 <_free_r+0x2b4>
 800d588:	1006d33a 	srli	r3,r2,12
 800d58c:	19401b84 	addi	r5,r3,110
 800d590:	2947883a 	add	r3,r5,r5
 800d594:	003fa706 	br	800d434 <__alt_data_end+0xfc00d434>
 800d598:	01005504 	movi	r4,340
 800d59c:	20c00436 	bltu	r4,r3,800d5b0 <_free_r+0x2cc>
 800d5a0:	1006d3fa 	srli	r3,r2,15
 800d5a4:	19401dc4 	addi	r5,r3,119
 800d5a8:	2947883a 	add	r3,r5,r5
 800d5ac:	003fa106 	br	800d434 <__alt_data_end+0xfc00d434>
 800d5b0:	01015504 	movi	r4,1364
 800d5b4:	20c00436 	bltu	r4,r3,800d5c8 <_free_r+0x2e4>
 800d5b8:	1006d4ba 	srli	r3,r2,18
 800d5bc:	19401f04 	addi	r5,r3,124
 800d5c0:	2947883a 	add	r3,r5,r5
 800d5c4:	003f9b06 	br	800d434 <__alt_data_end+0xfc00d434>
 800d5c8:	00c03f04 	movi	r3,252
 800d5cc:	01401f84 	movi	r5,126
 800d5d0:	003f9806 	br	800d434 <__alt_data_end+0xfc00d434>

0800d5d4 <__sfvwrite_r>:
 800d5d4:	30800217 	ldw	r2,8(r6)
 800d5d8:	10004526 	beq	r2,zero,800d6f0 <__sfvwrite_r+0x11c>
 800d5dc:	28c0030b 	ldhu	r3,12(r5)
 800d5e0:	defff404 	addi	sp,sp,-48
 800d5e4:	dd400715 	stw	r21,28(sp)
 800d5e8:	dcc00515 	stw	r19,20(sp)
 800d5ec:	dc000215 	stw	r16,8(sp)
 800d5f0:	dfc00b15 	stw	ra,44(sp)
 800d5f4:	df000a15 	stw	fp,40(sp)
 800d5f8:	ddc00915 	stw	r23,36(sp)
 800d5fc:	dd800815 	stw	r22,32(sp)
 800d600:	dd000615 	stw	r20,24(sp)
 800d604:	dc800415 	stw	r18,16(sp)
 800d608:	dc400315 	stw	r17,12(sp)
 800d60c:	1880020c 	andi	r2,r3,8
 800d610:	2821883a 	mov	r16,r5
 800d614:	202b883a 	mov	r21,r4
 800d618:	3027883a 	mov	r19,r6
 800d61c:	10002526 	beq	r2,zero,800d6b4 <__sfvwrite_r+0xe0>
 800d620:	28800417 	ldw	r2,16(r5)
 800d624:	10002326 	beq	r2,zero,800d6b4 <__sfvwrite_r+0xe0>
 800d628:	1880008c 	andi	r2,r3,2
 800d62c:	9c400017 	ldw	r17,0(r19)
 800d630:	10003126 	beq	r2,zero,800d6f8 <__sfvwrite_r+0x124>
 800d634:	0029883a 	mov	r20,zero
 800d638:	0025883a 	mov	r18,zero
 800d63c:	05810004 	movi	r22,1024
 800d640:	a00d883a 	mov	r6,r20
 800d644:	a809883a 	mov	r4,r21
 800d648:	90002526 	beq	r18,zero,800d6e0 <__sfvwrite_r+0x10c>
 800d64c:	900f883a 	mov	r7,r18
 800d650:	81400717 	ldw	r5,28(r16)
 800d654:	b480012e 	bgeu	r22,r18,800d65c <__sfvwrite_r+0x88>
 800d658:	01c10004 	movi	r7,1024
 800d65c:	80800917 	ldw	r2,36(r16)
 800d660:	103ee83a 	callr	r2
 800d664:	0080510e 	bge	zero,r2,800d7ac <__sfvwrite_r+0x1d8>
 800d668:	98c00217 	ldw	r3,8(r19)
 800d66c:	a0a9883a 	add	r20,r20,r2
 800d670:	90a5c83a 	sub	r18,r18,r2
 800d674:	1885c83a 	sub	r2,r3,r2
 800d678:	98800215 	stw	r2,8(r19)
 800d67c:	103ff01e 	bne	r2,zero,800d640 <__alt_data_end+0xfc00d640>
 800d680:	0005883a 	mov	r2,zero
 800d684:	dfc00b17 	ldw	ra,44(sp)
 800d688:	df000a17 	ldw	fp,40(sp)
 800d68c:	ddc00917 	ldw	r23,36(sp)
 800d690:	dd800817 	ldw	r22,32(sp)
 800d694:	dd400717 	ldw	r21,28(sp)
 800d698:	dd000617 	ldw	r20,24(sp)
 800d69c:	dcc00517 	ldw	r19,20(sp)
 800d6a0:	dc800417 	ldw	r18,16(sp)
 800d6a4:	dc400317 	ldw	r17,12(sp)
 800d6a8:	dc000217 	ldw	r16,8(sp)
 800d6ac:	dec00c04 	addi	sp,sp,48
 800d6b0:	f800283a 	ret
 800d6b4:	a809883a 	mov	r4,r21
 800d6b8:	800b883a 	mov	r5,r16
 800d6bc:	800b1340 	call	800b134 <__swsetup_r>
 800d6c0:	80c0030b 	ldhu	r3,12(r16)
 800d6c4:	103fd826 	beq	r2,zero,800d628 <__alt_data_end+0xfc00d628>
 800d6c8:	18c01014 	ori	r3,r3,64
 800d6cc:	80c0030d 	sth	r3,12(r16)
 800d6d0:	00c00244 	movi	r3,9
 800d6d4:	00bfffc4 	movi	r2,-1
 800d6d8:	a8c00015 	stw	r3,0(r21)
 800d6dc:	003fe906 	br	800d684 <__alt_data_end+0xfc00d684>
 800d6e0:	8d000017 	ldw	r20,0(r17)
 800d6e4:	8c800117 	ldw	r18,4(r17)
 800d6e8:	8c400204 	addi	r17,r17,8
 800d6ec:	003fd406 	br	800d640 <__alt_data_end+0xfc00d640>
 800d6f0:	0005883a 	mov	r2,zero
 800d6f4:	f800283a 	ret
 800d6f8:	1880004c 	andi	r2,r3,1
 800d6fc:	1000301e 	bne	r2,zero,800d7c0 <__sfvwrite_r+0x1ec>
 800d700:	002f883a 	mov	r23,zero
 800d704:	0025883a 	mov	r18,zero
 800d708:	90001c26 	beq	r18,zero,800d77c <__sfvwrite_r+0x1a8>
 800d70c:	1880800c 	andi	r2,r3,512
 800d710:	85000217 	ldw	r20,8(r16)
 800d714:	10006c26 	beq	r2,zero,800d8c8 <__sfvwrite_r+0x2f4>
 800d718:	a02d883a 	mov	r22,r20
 800d71c:	95008536 	bltu	r18,r20,800d934 <__sfvwrite_r+0x360>
 800d720:	1881200c 	andi	r2,r3,1152
 800d724:	10009d1e 	bne	r2,zero,800d99c <__sfvwrite_r+0x3c8>
 800d728:	81000017 	ldw	r4,0(r16)
 800d72c:	a039883a 	mov	fp,r20
 800d730:	9029883a 	mov	r20,r18
 800d734:	b80b883a 	mov	r5,r23
 800d738:	b00d883a 	mov	r6,r22
 800d73c:	800dfc00 	call	800dfc0 <memmove>
 800d740:	80c00217 	ldw	r3,8(r16)
 800d744:	81000017 	ldw	r4,0(r16)
 800d748:	9005883a 	mov	r2,r18
 800d74c:	1f39c83a 	sub	fp,r3,fp
 800d750:	258f883a 	add	r7,r4,r22
 800d754:	87000215 	stw	fp,8(r16)
 800d758:	81c00015 	stw	r7,0(r16)
 800d75c:	98c00217 	ldw	r3,8(r19)
 800d760:	b8af883a 	add	r23,r23,r2
 800d764:	90a5c83a 	sub	r18,r18,r2
 800d768:	1d05c83a 	sub	r2,r3,r20
 800d76c:	98800215 	stw	r2,8(r19)
 800d770:	103fc326 	beq	r2,zero,800d680 <__alt_data_end+0xfc00d680>
 800d774:	80c0030b 	ldhu	r3,12(r16)
 800d778:	903fe41e 	bne	r18,zero,800d70c <__alt_data_end+0xfc00d70c>
 800d77c:	8dc00017 	ldw	r23,0(r17)
 800d780:	8c800117 	ldw	r18,4(r17)
 800d784:	8c400204 	addi	r17,r17,8
 800d788:	003fdf06 	br	800d708 <__alt_data_end+0xfc00d708>
 800d78c:	800f3f00 	call	800f3f0 <_realloc_r>
 800d790:	102d883a 	mov	r22,r2
 800d794:	1000a01e 	bne	r2,zero,800da18 <__sfvwrite_r+0x444>
 800d798:	81400417 	ldw	r5,16(r16)
 800d79c:	a809883a 	mov	r4,r21
 800d7a0:	800d2e40 	call	800d2e4 <_free_r>
 800d7a4:	00800304 	movi	r2,12
 800d7a8:	a8800015 	stw	r2,0(r21)
 800d7ac:	80c0030b 	ldhu	r3,12(r16)
 800d7b0:	00bfffc4 	movi	r2,-1
 800d7b4:	18c01014 	ori	r3,r3,64
 800d7b8:	80c0030d 	sth	r3,12(r16)
 800d7bc:	003fb106 	br	800d684 <__alt_data_end+0xfc00d684>
 800d7c0:	0029883a 	mov	r20,zero
 800d7c4:	0011883a 	mov	r8,zero
 800d7c8:	0039883a 	mov	fp,zero
 800d7cc:	0025883a 	mov	r18,zero
 800d7d0:	90001f26 	beq	r18,zero,800d850 <__sfvwrite_r+0x27c>
 800d7d4:	40006826 	beq	r8,zero,800d978 <__sfvwrite_r+0x3a4>
 800d7d8:	a02f883a 	mov	r23,r20
 800d7dc:	9500012e 	bgeu	r18,r20,800d7e4 <__sfvwrite_r+0x210>
 800d7e0:	902f883a 	mov	r23,r18
 800d7e4:	81000017 	ldw	r4,0(r16)
 800d7e8:	80800417 	ldw	r2,16(r16)
 800d7ec:	b82d883a 	mov	r22,r23
 800d7f0:	81800217 	ldw	r6,8(r16)
 800d7f4:	81c00517 	ldw	r7,20(r16)
 800d7f8:	1100022e 	bgeu	r2,r4,800d804 <__sfvwrite_r+0x230>
 800d7fc:	31c7883a 	add	r3,r6,r7
 800d800:	1dc01816 	blt	r3,r23,800d864 <__sfvwrite_r+0x290>
 800d804:	b9c03f16 	blt	r23,r7,800d904 <__sfvwrite_r+0x330>
 800d808:	80800917 	ldw	r2,36(r16)
 800d80c:	81400717 	ldw	r5,28(r16)
 800d810:	a809883a 	mov	r4,r21
 800d814:	da000115 	stw	r8,4(sp)
 800d818:	e00d883a 	mov	r6,fp
 800d81c:	103ee83a 	callr	r2
 800d820:	102d883a 	mov	r22,r2
 800d824:	da000117 	ldw	r8,4(sp)
 800d828:	00bfe00e 	bge	zero,r2,800d7ac <__alt_data_end+0xfc00d7ac>
 800d82c:	a5a9c83a 	sub	r20,r20,r22
 800d830:	a0001f26 	beq	r20,zero,800d8b0 <__sfvwrite_r+0x2dc>
 800d834:	98800217 	ldw	r2,8(r19)
 800d838:	e5b9883a 	add	fp,fp,r22
 800d83c:	95a5c83a 	sub	r18,r18,r22
 800d840:	15adc83a 	sub	r22,r2,r22
 800d844:	9d800215 	stw	r22,8(r19)
 800d848:	b03f8d26 	beq	r22,zero,800d680 <__alt_data_end+0xfc00d680>
 800d84c:	903fe11e 	bne	r18,zero,800d7d4 <__alt_data_end+0xfc00d7d4>
 800d850:	8f000017 	ldw	fp,0(r17)
 800d854:	8c800117 	ldw	r18,4(r17)
 800d858:	0011883a 	mov	r8,zero
 800d85c:	8c400204 	addi	r17,r17,8
 800d860:	003fdb06 	br	800d7d0 <__alt_data_end+0xfc00d7d0>
 800d864:	180d883a 	mov	r6,r3
 800d868:	e00b883a 	mov	r5,fp
 800d86c:	da000115 	stw	r8,4(sp)
 800d870:	d8c00015 	stw	r3,0(sp)
 800d874:	800dfc00 	call	800dfc0 <memmove>
 800d878:	d8c00017 	ldw	r3,0(sp)
 800d87c:	80800017 	ldw	r2,0(r16)
 800d880:	a809883a 	mov	r4,r21
 800d884:	800b883a 	mov	r5,r16
 800d888:	10c5883a 	add	r2,r2,r3
 800d88c:	80800015 	stw	r2,0(r16)
 800d890:	d8c00015 	stw	r3,0(sp)
 800d894:	800cbb40 	call	800cbb4 <_fflush_r>
 800d898:	d8c00017 	ldw	r3,0(sp)
 800d89c:	da000117 	ldw	r8,4(sp)
 800d8a0:	103fc21e 	bne	r2,zero,800d7ac <__alt_data_end+0xfc00d7ac>
 800d8a4:	182d883a 	mov	r22,r3
 800d8a8:	a5a9c83a 	sub	r20,r20,r22
 800d8ac:	a03fe11e 	bne	r20,zero,800d834 <__alt_data_end+0xfc00d834>
 800d8b0:	a809883a 	mov	r4,r21
 800d8b4:	800b883a 	mov	r5,r16
 800d8b8:	800cbb40 	call	800cbb4 <_fflush_r>
 800d8bc:	103fbb1e 	bne	r2,zero,800d7ac <__alt_data_end+0xfc00d7ac>
 800d8c0:	0011883a 	mov	r8,zero
 800d8c4:	003fdb06 	br	800d834 <__alt_data_end+0xfc00d834>
 800d8c8:	81000017 	ldw	r4,0(r16)
 800d8cc:	80800417 	ldw	r2,16(r16)
 800d8d0:	1100012e 	bgeu	r2,r4,800d8d8 <__sfvwrite_r+0x304>
 800d8d4:	a4805a36 	bltu	r20,r18,800da40 <__sfvwrite_r+0x46c>
 800d8d8:	81c00517 	ldw	r7,20(r16)
 800d8dc:	91c01a36 	bltu	r18,r7,800d948 <__sfvwrite_r+0x374>
 800d8e0:	80800917 	ldw	r2,36(r16)
 800d8e4:	81400717 	ldw	r5,28(r16)
 800d8e8:	a809883a 	mov	r4,r21
 800d8ec:	b80d883a 	mov	r6,r23
 800d8f0:	103ee83a 	callr	r2
 800d8f4:	1029883a 	mov	r20,r2
 800d8f8:	00bfac0e 	bge	zero,r2,800d7ac <__alt_data_end+0xfc00d7ac>
 800d8fc:	a005883a 	mov	r2,r20
 800d900:	003f9606 	br	800d75c <__alt_data_end+0xfc00d75c>
 800d904:	b80d883a 	mov	r6,r23
 800d908:	e00b883a 	mov	r5,fp
 800d90c:	da000115 	stw	r8,4(sp)
 800d910:	800dfc00 	call	800dfc0 <memmove>
 800d914:	80800217 	ldw	r2,8(r16)
 800d918:	80c00017 	ldw	r3,0(r16)
 800d91c:	da000117 	ldw	r8,4(sp)
 800d920:	15c5c83a 	sub	r2,r2,r23
 800d924:	1def883a 	add	r23,r3,r23
 800d928:	80800215 	stw	r2,8(r16)
 800d92c:	85c00015 	stw	r23,0(r16)
 800d930:	003fbe06 	br	800d82c <__alt_data_end+0xfc00d82c>
 800d934:	81000017 	ldw	r4,0(r16)
 800d938:	9039883a 	mov	fp,r18
 800d93c:	9029883a 	mov	r20,r18
 800d940:	902d883a 	mov	r22,r18
 800d944:	003f7b06 	br	800d734 <__alt_data_end+0xfc00d734>
 800d948:	b80b883a 	mov	r5,r23
 800d94c:	900d883a 	mov	r6,r18
 800d950:	800dfc00 	call	800dfc0 <memmove>
 800d954:	80c00217 	ldw	r3,8(r16)
 800d958:	80800017 	ldw	r2,0(r16)
 800d95c:	9029883a 	mov	r20,r18
 800d960:	1c87c83a 	sub	r3,r3,r18
 800d964:	1485883a 	add	r2,r2,r18
 800d968:	80800015 	stw	r2,0(r16)
 800d96c:	80c00215 	stw	r3,8(r16)
 800d970:	9005883a 	mov	r2,r18
 800d974:	003f7906 	br	800d75c <__alt_data_end+0xfc00d75c>
 800d978:	e009883a 	mov	r4,fp
 800d97c:	01400284 	movi	r5,10
 800d980:	900d883a 	mov	r6,r18
 800d984:	800ded80 	call	800ded8 <memchr>
 800d988:	10003826 	beq	r2,zero,800da6c <__sfvwrite_r+0x498>
 800d98c:	10800044 	addi	r2,r2,1
 800d990:	1729c83a 	sub	r20,r2,fp
 800d994:	02000044 	movi	r8,1
 800d998:	003f8f06 	br	800d7d8 <__alt_data_end+0xfc00d7d8>
 800d99c:	80800517 	ldw	r2,20(r16)
 800d9a0:	81400417 	ldw	r5,16(r16)
 800d9a4:	87000017 	ldw	fp,0(r16)
 800d9a8:	10a9883a 	add	r20,r2,r2
 800d9ac:	a085883a 	add	r2,r20,r2
 800d9b0:	1028d7fa 	srli	r20,r2,31
 800d9b4:	e179c83a 	sub	fp,fp,r5
 800d9b8:	e1000044 	addi	r4,fp,1
 800d9bc:	a085883a 	add	r2,r20,r2
 800d9c0:	1029d07a 	srai	r20,r2,1
 800d9c4:	2485883a 	add	r2,r4,r18
 800d9c8:	a00d883a 	mov	r6,r20
 800d9cc:	a080022e 	bgeu	r20,r2,800d9d8 <__sfvwrite_r+0x404>
 800d9d0:	1029883a 	mov	r20,r2
 800d9d4:	100d883a 	mov	r6,r2
 800d9d8:	18c1000c 	andi	r3,r3,1024
 800d9dc:	a809883a 	mov	r4,r21
 800d9e0:	183f6a26 	beq	r3,zero,800d78c <__alt_data_end+0xfc00d78c>
 800d9e4:	300b883a 	mov	r5,r6
 800d9e8:	8005e100 	call	8005e10 <_malloc_r>
 800d9ec:	102d883a 	mov	r22,r2
 800d9f0:	103f6c26 	beq	r2,zero,800d7a4 <__alt_data_end+0xfc00d7a4>
 800d9f4:	81400417 	ldw	r5,16(r16)
 800d9f8:	1009883a 	mov	r4,r2
 800d9fc:	e00d883a 	mov	r6,fp
 800da00:	80065b80 	call	80065b8 <memcpy>
 800da04:	8080030b 	ldhu	r2,12(r16)
 800da08:	00fedfc4 	movi	r3,-1153
 800da0c:	10c4703a 	and	r2,r2,r3
 800da10:	10802014 	ori	r2,r2,128
 800da14:	8080030d 	sth	r2,12(r16)
 800da18:	b709883a 	add	r4,r22,fp
 800da1c:	a707c83a 	sub	r3,r20,fp
 800da20:	85800415 	stw	r22,16(r16)
 800da24:	85000515 	stw	r20,20(r16)
 800da28:	81000015 	stw	r4,0(r16)
 800da2c:	9039883a 	mov	fp,r18
 800da30:	80c00215 	stw	r3,8(r16)
 800da34:	9029883a 	mov	r20,r18
 800da38:	902d883a 	mov	r22,r18
 800da3c:	003f3d06 	br	800d734 <__alt_data_end+0xfc00d734>
 800da40:	b80b883a 	mov	r5,r23
 800da44:	a00d883a 	mov	r6,r20
 800da48:	800dfc00 	call	800dfc0 <memmove>
 800da4c:	80800017 	ldw	r2,0(r16)
 800da50:	a809883a 	mov	r4,r21
 800da54:	800b883a 	mov	r5,r16
 800da58:	1505883a 	add	r2,r2,r20
 800da5c:	80800015 	stw	r2,0(r16)
 800da60:	800cbb40 	call	800cbb4 <_fflush_r>
 800da64:	103fa526 	beq	r2,zero,800d8fc <__alt_data_end+0xfc00d8fc>
 800da68:	003f5006 	br	800d7ac <__alt_data_end+0xfc00d7ac>
 800da6c:	95000044 	addi	r20,r18,1
 800da70:	02000044 	movi	r8,1
 800da74:	003f5806 	br	800d7d8 <__alt_data_end+0xfc00d7d8>

0800da78 <_fwalk>:
 800da78:	defff804 	addi	sp,sp,-32
 800da7c:	dd400515 	stw	r21,20(sp)
 800da80:	2540b804 	addi	r21,r4,736
 800da84:	dd800615 	stw	r22,24(sp)
 800da88:	dd000415 	stw	r20,16(sp)
 800da8c:	dfc00715 	stw	ra,28(sp)
 800da90:	dcc00315 	stw	r19,12(sp)
 800da94:	dc800215 	stw	r18,8(sp)
 800da98:	dc400115 	stw	r17,4(sp)
 800da9c:	dc000015 	stw	r16,0(sp)
 800daa0:	2829883a 	mov	r20,r5
 800daa4:	002d883a 	mov	r22,zero
 800daa8:	800d1800 	call	800d180 <__sfp_lock_acquire>
 800daac:	a8001426 	beq	r21,zero,800db00 <_fwalk+0x88>
 800dab0:	04ffffc4 	movi	r19,-1
 800dab4:	ac400117 	ldw	r17,4(r21)
 800dab8:	ac800217 	ldw	r18,8(r21)
 800dabc:	8c7fffc4 	addi	r17,r17,-1
 800dac0:	88000d16 	blt	r17,zero,800daf8 <_fwalk+0x80>
 800dac4:	94000304 	addi	r16,r18,12
 800dac8:	94800384 	addi	r18,r18,14
 800dacc:	80c0000f 	ldh	r3,0(r16)
 800dad0:	8c7fffc4 	addi	r17,r17,-1
 800dad4:	813ffd04 	addi	r4,r16,-12
 800dad8:	18000426 	beq	r3,zero,800daec <_fwalk+0x74>
 800dadc:	90c0000f 	ldh	r3,0(r18)
 800dae0:	1cc00226 	beq	r3,r19,800daec <_fwalk+0x74>
 800dae4:	a03ee83a 	callr	r20
 800dae8:	b0acb03a 	or	r22,r22,r2
 800daec:	84001a04 	addi	r16,r16,104
 800daf0:	94801a04 	addi	r18,r18,104
 800daf4:	8cfff51e 	bne	r17,r19,800dacc <__alt_data_end+0xfc00dacc>
 800daf8:	ad400017 	ldw	r21,0(r21)
 800dafc:	a83fed1e 	bne	r21,zero,800dab4 <__alt_data_end+0xfc00dab4>
 800db00:	800d1840 	call	800d184 <__sfp_lock_release>
 800db04:	b005883a 	mov	r2,r22
 800db08:	dfc00717 	ldw	ra,28(sp)
 800db0c:	dd800617 	ldw	r22,24(sp)
 800db10:	dd400517 	ldw	r21,20(sp)
 800db14:	dd000417 	ldw	r20,16(sp)
 800db18:	dcc00317 	ldw	r19,12(sp)
 800db1c:	dc800217 	ldw	r18,8(sp)
 800db20:	dc400117 	ldw	r17,4(sp)
 800db24:	dc000017 	ldw	r16,0(sp)
 800db28:	dec00804 	addi	sp,sp,32
 800db2c:	f800283a 	ret

0800db30 <_fwalk_reent>:
 800db30:	defff804 	addi	sp,sp,-32
 800db34:	dd400515 	stw	r21,20(sp)
 800db38:	2540b804 	addi	r21,r4,736
 800db3c:	dd800615 	stw	r22,24(sp)
 800db40:	dd000415 	stw	r20,16(sp)
 800db44:	dcc00315 	stw	r19,12(sp)
 800db48:	dfc00715 	stw	ra,28(sp)
 800db4c:	dc800215 	stw	r18,8(sp)
 800db50:	dc400115 	stw	r17,4(sp)
 800db54:	dc000015 	stw	r16,0(sp)
 800db58:	2027883a 	mov	r19,r4
 800db5c:	2829883a 	mov	r20,r5
 800db60:	002d883a 	mov	r22,zero
 800db64:	800d1800 	call	800d180 <__sfp_lock_acquire>
 800db68:	a8001326 	beq	r21,zero,800dbb8 <_fwalk_reent+0x88>
 800db6c:	04bfffc4 	movi	r18,-1
 800db70:	ac400117 	ldw	r17,4(r21)
 800db74:	ac000217 	ldw	r16,8(r21)
 800db78:	8c7fffc4 	addi	r17,r17,-1
 800db7c:	88000c16 	blt	r17,zero,800dbb0 <_fwalk_reent+0x80>
 800db80:	84000304 	addi	r16,r16,12
 800db84:	80c0000f 	ldh	r3,0(r16)
 800db88:	8c7fffc4 	addi	r17,r17,-1
 800db8c:	817ffd04 	addi	r5,r16,-12
 800db90:	18000526 	beq	r3,zero,800dba8 <_fwalk_reent+0x78>
 800db94:	80c0008f 	ldh	r3,2(r16)
 800db98:	9809883a 	mov	r4,r19
 800db9c:	1c800226 	beq	r3,r18,800dba8 <_fwalk_reent+0x78>
 800dba0:	a03ee83a 	callr	r20
 800dba4:	b0acb03a 	or	r22,r22,r2
 800dba8:	84001a04 	addi	r16,r16,104
 800dbac:	8cbff51e 	bne	r17,r18,800db84 <__alt_data_end+0xfc00db84>
 800dbb0:	ad400017 	ldw	r21,0(r21)
 800dbb4:	a83fee1e 	bne	r21,zero,800db70 <__alt_data_end+0xfc00db70>
 800dbb8:	800d1840 	call	800d184 <__sfp_lock_release>
 800dbbc:	b005883a 	mov	r2,r22
 800dbc0:	dfc00717 	ldw	ra,28(sp)
 800dbc4:	dd800617 	ldw	r22,24(sp)
 800dbc8:	dd400517 	ldw	r21,20(sp)
 800dbcc:	dd000417 	ldw	r20,16(sp)
 800dbd0:	dcc00317 	ldw	r19,12(sp)
 800dbd4:	dc800217 	ldw	r18,8(sp)
 800dbd8:	dc400117 	ldw	r17,4(sp)
 800dbdc:	dc000017 	ldw	r16,0(sp)
 800dbe0:	dec00804 	addi	sp,sp,32
 800dbe4:	f800283a 	ret

0800dbe8 <_gettimeofday_r>:
 800dbe8:	defffd04 	addi	sp,sp,-12
 800dbec:	dc000015 	stw	r16,0(sp)
 800dbf0:	040200b4 	movhi	r16,2050
 800dbf4:	dc400115 	stw	r17,4(sp)
 800dbf8:	84181204 	addi	r16,r16,24648
 800dbfc:	2023883a 	mov	r17,r4
 800dc00:	2809883a 	mov	r4,r5
 800dc04:	300b883a 	mov	r5,r6
 800dc08:	dfc00215 	stw	ra,8(sp)
 800dc0c:	80000015 	stw	zero,0(r16)
 800dc10:	80151980 	call	8015198 <gettimeofday>
 800dc14:	00ffffc4 	movi	r3,-1
 800dc18:	10c00526 	beq	r2,r3,800dc30 <_gettimeofday_r+0x48>
 800dc1c:	dfc00217 	ldw	ra,8(sp)
 800dc20:	dc400117 	ldw	r17,4(sp)
 800dc24:	dc000017 	ldw	r16,0(sp)
 800dc28:	dec00304 	addi	sp,sp,12
 800dc2c:	f800283a 	ret
 800dc30:	80c00017 	ldw	r3,0(r16)
 800dc34:	183ff926 	beq	r3,zero,800dc1c <__alt_data_end+0xfc00dc1c>
 800dc38:	88c00015 	stw	r3,0(r17)
 800dc3c:	003ff706 	br	800dc1c <__alt_data_end+0xfc00dc1c>

0800dc40 <_setlocale_r>:
 800dc40:	30001b26 	beq	r6,zero,800dcb0 <_setlocale_r+0x70>
 800dc44:	014200b4 	movhi	r5,2050
 800dc48:	defffe04 	addi	sp,sp,-8
 800dc4c:	294a0f04 	addi	r5,r5,10300
 800dc50:	3009883a 	mov	r4,r6
 800dc54:	dc000015 	stw	r16,0(sp)
 800dc58:	dfc00115 	stw	ra,4(sp)
 800dc5c:	3021883a 	mov	r16,r6
 800dc60:	800fb400 	call	800fb40 <strcmp>
 800dc64:	1000061e 	bne	r2,zero,800dc80 <_setlocale_r+0x40>
 800dc68:	008200b4 	movhi	r2,2050
 800dc6c:	108a0e04 	addi	r2,r2,10296
 800dc70:	dfc00117 	ldw	ra,4(sp)
 800dc74:	dc000017 	ldw	r16,0(sp)
 800dc78:	dec00204 	addi	sp,sp,8
 800dc7c:	f800283a 	ret
 800dc80:	014200b4 	movhi	r5,2050
 800dc84:	294a0e04 	addi	r5,r5,10296
 800dc88:	8009883a 	mov	r4,r16
 800dc8c:	800fb400 	call	800fb40 <strcmp>
 800dc90:	103ff526 	beq	r2,zero,800dc68 <__alt_data_end+0xfc00dc68>
 800dc94:	014200b4 	movhi	r5,2050
 800dc98:	2949f104 	addi	r5,r5,10180
 800dc9c:	8009883a 	mov	r4,r16
 800dca0:	800fb400 	call	800fb40 <strcmp>
 800dca4:	103ff026 	beq	r2,zero,800dc68 <__alt_data_end+0xfc00dc68>
 800dca8:	0005883a 	mov	r2,zero
 800dcac:	003ff006 	br	800dc70 <__alt_data_end+0xfc00dc70>
 800dcb0:	008200b4 	movhi	r2,2050
 800dcb4:	108a0e04 	addi	r2,r2,10296
 800dcb8:	f800283a 	ret

0800dcbc <__locale_charset>:
 800dcbc:	008200b4 	movhi	r2,2050
 800dcc0:	108c9104 	addi	r2,r2,12868
 800dcc4:	f800283a 	ret

0800dcc8 <__locale_mb_cur_max>:
 800dcc8:	008200b4 	movhi	r2,2050
 800dccc:	10913804 	addi	r2,r2,17632
 800dcd0:	10800017 	ldw	r2,0(r2)
 800dcd4:	f800283a 	ret

0800dcd8 <__locale_msgcharset>:
 800dcd8:	008200b4 	movhi	r2,2050
 800dcdc:	108c8904 	addi	r2,r2,12836
 800dce0:	f800283a 	ret

0800dce4 <__locale_cjk_lang>:
 800dce4:	0005883a 	mov	r2,zero
 800dce8:	f800283a 	ret

0800dcec <_localeconv_r>:
 800dcec:	008200b4 	movhi	r2,2050
 800dcf0:	108c9904 	addi	r2,r2,12900
 800dcf4:	f800283a 	ret

0800dcf8 <setlocale>:
 800dcf8:	00c200b4 	movhi	r3,2050
 800dcfc:	18d13704 	addi	r3,r3,17628
 800dd00:	2005883a 	mov	r2,r4
 800dd04:	19000017 	ldw	r4,0(r3)
 800dd08:	280d883a 	mov	r6,r5
 800dd0c:	100b883a 	mov	r5,r2
 800dd10:	800dc401 	jmpi	800dc40 <_setlocale_r>

0800dd14 <localeconv>:
 800dd14:	008200b4 	movhi	r2,2050
 800dd18:	108c9904 	addi	r2,r2,12900
 800dd1c:	f800283a 	ret

0800dd20 <__smakebuf_r>:
 800dd20:	2880030b 	ldhu	r2,12(r5)
 800dd24:	10c0008c 	andi	r3,r2,2
 800dd28:	1800401e 	bne	r3,zero,800de2c <__smakebuf_r+0x10c>
 800dd2c:	deffec04 	addi	sp,sp,-80
 800dd30:	dc000f15 	stw	r16,60(sp)
 800dd34:	2821883a 	mov	r16,r5
 800dd38:	2940038f 	ldh	r5,14(r5)
 800dd3c:	dc401015 	stw	r17,64(sp)
 800dd40:	dfc01315 	stw	ra,76(sp)
 800dd44:	dcc01215 	stw	r19,72(sp)
 800dd48:	dc801115 	stw	r18,68(sp)
 800dd4c:	2023883a 	mov	r17,r4
 800dd50:	28001b16 	blt	r5,zero,800ddc0 <__smakebuf_r+0xa0>
 800dd54:	d80d883a 	mov	r6,sp
 800dd58:	8012ac00 	call	8012ac0 <_fstat_r>
 800dd5c:	10001716 	blt	r2,zero,800ddbc <__smakebuf_r+0x9c>
 800dd60:	d8800117 	ldw	r2,4(sp)
 800dd64:	00e00014 	movui	r3,32768
 800dd68:	10bc000c 	andi	r2,r2,61440
 800dd6c:	10c03726 	beq	r2,r3,800de4c <__smakebuf_r+0x12c>
 800dd70:	80c0030b 	ldhu	r3,12(r16)
 800dd74:	18c20014 	ori	r3,r3,2048
 800dd78:	80c0030d 	sth	r3,12(r16)
 800dd7c:	00c80004 	movi	r3,8192
 800dd80:	10c03c1e 	bne	r2,r3,800de74 <__smakebuf_r+0x154>
 800dd84:	8140038f 	ldh	r5,14(r16)
 800dd88:	8809883a 	mov	r4,r17
 800dd8c:	8012b180 	call	8012b18 <_isatty_r>
 800dd90:	10004e26 	beq	r2,zero,800decc <__smakebuf_r+0x1ac>
 800dd94:	8080030b 	ldhu	r2,12(r16)
 800dd98:	04c00044 	movi	r19,1
 800dd9c:	80c010c4 	addi	r3,r16,67
 800dda0:	14c4b03a 	or	r2,r2,r19
 800dda4:	8080030d 	sth	r2,12(r16)
 800dda8:	80c00015 	stw	r3,0(r16)
 800ddac:	80c00415 	stw	r3,16(r16)
 800ddb0:	84c00515 	stw	r19,20(r16)
 800ddb4:	04810004 	movi	r18,1024
 800ddb8:	00000706 	br	800ddd8 <__smakebuf_r+0xb8>
 800ddbc:	8080030b 	ldhu	r2,12(r16)
 800ddc0:	10c0200c 	andi	r3,r2,128
 800ddc4:	18001f1e 	bne	r3,zero,800de44 <__smakebuf_r+0x124>
 800ddc8:	04810004 	movi	r18,1024
 800ddcc:	10820014 	ori	r2,r2,2048
 800ddd0:	8080030d 	sth	r2,12(r16)
 800ddd4:	0027883a 	mov	r19,zero
 800ddd8:	8809883a 	mov	r4,r17
 800dddc:	900b883a 	mov	r5,r18
 800dde0:	8005e100 	call	8005e10 <_malloc_r>
 800dde4:	10002e26 	beq	r2,zero,800dea0 <__smakebuf_r+0x180>
 800dde8:	80c0030b 	ldhu	r3,12(r16)
 800ddec:	01020074 	movhi	r4,2049
 800ddf0:	21338704 	addi	r4,r4,-12772
 800ddf4:	89000f15 	stw	r4,60(r17)
 800ddf8:	18c02014 	ori	r3,r3,128
 800ddfc:	80c0030d 	sth	r3,12(r16)
 800de00:	80800015 	stw	r2,0(r16)
 800de04:	80800415 	stw	r2,16(r16)
 800de08:	84800515 	stw	r18,20(r16)
 800de0c:	98001c1e 	bne	r19,zero,800de80 <__smakebuf_r+0x160>
 800de10:	dfc01317 	ldw	ra,76(sp)
 800de14:	dcc01217 	ldw	r19,72(sp)
 800de18:	dc801117 	ldw	r18,68(sp)
 800de1c:	dc401017 	ldw	r17,64(sp)
 800de20:	dc000f17 	ldw	r16,60(sp)
 800de24:	dec01404 	addi	sp,sp,80
 800de28:	f800283a 	ret
 800de2c:	288010c4 	addi	r2,r5,67
 800de30:	28800015 	stw	r2,0(r5)
 800de34:	28800415 	stw	r2,16(r5)
 800de38:	00800044 	movi	r2,1
 800de3c:	28800515 	stw	r2,20(r5)
 800de40:	f800283a 	ret
 800de44:	04801004 	movi	r18,64
 800de48:	003fe006 	br	800ddcc <__alt_data_end+0xfc00ddcc>
 800de4c:	81000a17 	ldw	r4,40(r16)
 800de50:	00c20074 	movhi	r3,2049
 800de54:	18feb704 	addi	r3,r3,-1316
 800de58:	20ffc51e 	bne	r4,r3,800dd70 <__alt_data_end+0xfc00dd70>
 800de5c:	80c0030b 	ldhu	r3,12(r16)
 800de60:	01010004 	movi	r4,1024
 800de64:	81001315 	stw	r4,76(r16)
 800de68:	1906b03a 	or	r3,r3,r4
 800de6c:	80c0030d 	sth	r3,12(r16)
 800de70:	003fc206 	br	800dd7c <__alt_data_end+0xfc00dd7c>
 800de74:	0027883a 	mov	r19,zero
 800de78:	04810004 	movi	r18,1024
 800de7c:	003fd606 	br	800ddd8 <__alt_data_end+0xfc00ddd8>
 800de80:	8140038f 	ldh	r5,14(r16)
 800de84:	8809883a 	mov	r4,r17
 800de88:	8012b180 	call	8012b18 <_isatty_r>
 800de8c:	103fe026 	beq	r2,zero,800de10 <__alt_data_end+0xfc00de10>
 800de90:	8080030b 	ldhu	r2,12(r16)
 800de94:	10800054 	ori	r2,r2,1
 800de98:	8080030d 	sth	r2,12(r16)
 800de9c:	003fdc06 	br	800de10 <__alt_data_end+0xfc00de10>
 800dea0:	8080030b 	ldhu	r2,12(r16)
 800dea4:	10c0800c 	andi	r3,r2,512
 800dea8:	183fd91e 	bne	r3,zero,800de10 <__alt_data_end+0xfc00de10>
 800deac:	10800094 	ori	r2,r2,2
 800deb0:	80c010c4 	addi	r3,r16,67
 800deb4:	8080030d 	sth	r2,12(r16)
 800deb8:	00800044 	movi	r2,1
 800debc:	80c00015 	stw	r3,0(r16)
 800dec0:	80c00415 	stw	r3,16(r16)
 800dec4:	80800515 	stw	r2,20(r16)
 800dec8:	003fd106 	br	800de10 <__alt_data_end+0xfc00de10>
 800decc:	04c00044 	movi	r19,1
 800ded0:	04810004 	movi	r18,1024
 800ded4:	003fc006 	br	800ddd8 <__alt_data_end+0xfc00ddd8>

0800ded8 <memchr>:
 800ded8:	208000cc 	andi	r2,r4,3
 800dedc:	280f883a 	mov	r7,r5
 800dee0:	10003526 	beq	r2,zero,800dfb8 <memchr+0xe0>
 800dee4:	30bfffc4 	addi	r2,r6,-1
 800dee8:	30001b26 	beq	r6,zero,800df58 <memchr+0x80>
 800deec:	21800003 	ldbu	r6,0(r4)
 800def0:	28c03fcc 	andi	r3,r5,255
 800def4:	30c01a26 	beq	r6,r3,800df60 <memchr+0x88>
 800def8:	180d883a 	mov	r6,r3
 800defc:	00000406 	br	800df10 <memchr+0x38>
 800df00:	10001526 	beq	r2,zero,800df58 <memchr+0x80>
 800df04:	20c00003 	ldbu	r3,0(r4)
 800df08:	10bfffc4 	addi	r2,r2,-1
 800df0c:	19801426 	beq	r3,r6,800df60 <memchr+0x88>
 800df10:	21000044 	addi	r4,r4,1
 800df14:	20c000cc 	andi	r3,r4,3
 800df18:	183ff91e 	bne	r3,zero,800df00 <__alt_data_end+0xfc00df00>
 800df1c:	024000c4 	movi	r9,3
 800df20:	48801136 	bltu	r9,r2,800df68 <memchr+0x90>
 800df24:	10000c26 	beq	r2,zero,800df58 <memchr+0x80>
 800df28:	20c00003 	ldbu	r3,0(r4)
 800df2c:	29403fcc 	andi	r5,r5,255
 800df30:	19400b26 	beq	r3,r5,800df60 <memchr+0x88>
 800df34:	20c00044 	addi	r3,r4,1
 800df38:	2085883a 	add	r2,r4,r2
 800df3c:	39803fcc 	andi	r6,r7,255
 800df40:	00000306 	br	800df50 <memchr+0x78>
 800df44:	18c00044 	addi	r3,r3,1
 800df48:	197fffc3 	ldbu	r5,-1(r3)
 800df4c:	29800426 	beq	r5,r6,800df60 <memchr+0x88>
 800df50:	1809883a 	mov	r4,r3
 800df54:	18bffb1e 	bne	r3,r2,800df44 <__alt_data_end+0xfc00df44>
 800df58:	0005883a 	mov	r2,zero
 800df5c:	f800283a 	ret
 800df60:	2005883a 	mov	r2,r4
 800df64:	f800283a 	ret
 800df68:	28c03fcc 	andi	r3,r5,255
 800df6c:	1810923a 	slli	r8,r3,8
 800df70:	02ffbff4 	movhi	r11,65279
 800df74:	02a02074 	movhi	r10,32897
 800df78:	40c6b03a 	or	r3,r8,r3
 800df7c:	1810943a 	slli	r8,r3,16
 800df80:	5affbfc4 	addi	r11,r11,-257
 800df84:	52a02004 	addi	r10,r10,-32640
 800df88:	40d0b03a 	or	r8,r8,r3
 800df8c:	20c00017 	ldw	r3,0(r4)
 800df90:	40c6f03a 	xor	r3,r8,r3
 800df94:	1acd883a 	add	r6,r3,r11
 800df98:	00c6303a 	nor	r3,zero,r3
 800df9c:	30c6703a 	and	r3,r6,r3
 800dfa0:	1a86703a 	and	r3,r3,r10
 800dfa4:	183fdf1e 	bne	r3,zero,800df24 <__alt_data_end+0xfc00df24>
 800dfa8:	10bfff04 	addi	r2,r2,-4
 800dfac:	21000104 	addi	r4,r4,4
 800dfb0:	48bff636 	bltu	r9,r2,800df8c <__alt_data_end+0xfc00df8c>
 800dfb4:	003fdb06 	br	800df24 <__alt_data_end+0xfc00df24>
 800dfb8:	3005883a 	mov	r2,r6
 800dfbc:	003fd706 	br	800df1c <__alt_data_end+0xfc00df1c>

0800dfc0 <memmove>:
 800dfc0:	2005883a 	mov	r2,r4
 800dfc4:	29000b2e 	bgeu	r5,r4,800dff4 <memmove+0x34>
 800dfc8:	298f883a 	add	r7,r5,r6
 800dfcc:	21c0092e 	bgeu	r4,r7,800dff4 <memmove+0x34>
 800dfd0:	2187883a 	add	r3,r4,r6
 800dfd4:	198bc83a 	sub	r5,r3,r6
 800dfd8:	30004b26 	beq	r6,zero,800e108 <memmove+0x148>
 800dfdc:	39ffffc4 	addi	r7,r7,-1
 800dfe0:	39000003 	ldbu	r4,0(r7)
 800dfe4:	18ffffc4 	addi	r3,r3,-1
 800dfe8:	19000005 	stb	r4,0(r3)
 800dfec:	197ffb1e 	bne	r3,r5,800dfdc <__alt_data_end+0xfc00dfdc>
 800dff0:	f800283a 	ret
 800dff4:	00c003c4 	movi	r3,15
 800dff8:	1980412e 	bgeu	r3,r6,800e100 <memmove+0x140>
 800dffc:	1146b03a 	or	r3,r2,r5
 800e000:	18c000cc 	andi	r3,r3,3
 800e004:	1800411e 	bne	r3,zero,800e10c <memmove+0x14c>
 800e008:	33fffc04 	addi	r15,r6,-16
 800e00c:	781ed13a 	srli	r15,r15,4
 800e010:	28c00104 	addi	r3,r5,4
 800e014:	13400104 	addi	r13,r2,4
 800e018:	781c913a 	slli	r14,r15,4
 800e01c:	2b000204 	addi	r12,r5,8
 800e020:	12c00204 	addi	r11,r2,8
 800e024:	73800504 	addi	r14,r14,20
 800e028:	2a800304 	addi	r10,r5,12
 800e02c:	12400304 	addi	r9,r2,12
 800e030:	2b9d883a 	add	r14,r5,r14
 800e034:	2811883a 	mov	r8,r5
 800e038:	100f883a 	mov	r7,r2
 800e03c:	41000017 	ldw	r4,0(r8)
 800e040:	39c00404 	addi	r7,r7,16
 800e044:	18c00404 	addi	r3,r3,16
 800e048:	393ffc15 	stw	r4,-16(r7)
 800e04c:	193ffc17 	ldw	r4,-16(r3)
 800e050:	6b400404 	addi	r13,r13,16
 800e054:	5ac00404 	addi	r11,r11,16
 800e058:	693ffc15 	stw	r4,-16(r13)
 800e05c:	61000017 	ldw	r4,0(r12)
 800e060:	4a400404 	addi	r9,r9,16
 800e064:	42000404 	addi	r8,r8,16
 800e068:	593ffc15 	stw	r4,-16(r11)
 800e06c:	51000017 	ldw	r4,0(r10)
 800e070:	63000404 	addi	r12,r12,16
 800e074:	52800404 	addi	r10,r10,16
 800e078:	493ffc15 	stw	r4,-16(r9)
 800e07c:	1bbfef1e 	bne	r3,r14,800e03c <__alt_data_end+0xfc00e03c>
 800e080:	79000044 	addi	r4,r15,1
 800e084:	2008913a 	slli	r4,r4,4
 800e088:	328003cc 	andi	r10,r6,15
 800e08c:	02c000c4 	movi	r11,3
 800e090:	1107883a 	add	r3,r2,r4
 800e094:	290b883a 	add	r5,r5,r4
 800e098:	5a801e2e 	bgeu	r11,r10,800e114 <memmove+0x154>
 800e09c:	1813883a 	mov	r9,r3
 800e0a0:	2811883a 	mov	r8,r5
 800e0a4:	500f883a 	mov	r7,r10
 800e0a8:	41000017 	ldw	r4,0(r8)
 800e0ac:	4a400104 	addi	r9,r9,4
 800e0b0:	39ffff04 	addi	r7,r7,-4
 800e0b4:	493fff15 	stw	r4,-4(r9)
 800e0b8:	42000104 	addi	r8,r8,4
 800e0bc:	59fffa36 	bltu	r11,r7,800e0a8 <__alt_data_end+0xfc00e0a8>
 800e0c0:	513fff04 	addi	r4,r10,-4
 800e0c4:	2008d0ba 	srli	r4,r4,2
 800e0c8:	318000cc 	andi	r6,r6,3
 800e0cc:	21000044 	addi	r4,r4,1
 800e0d0:	2109883a 	add	r4,r4,r4
 800e0d4:	2109883a 	add	r4,r4,r4
 800e0d8:	1907883a 	add	r3,r3,r4
 800e0dc:	290b883a 	add	r5,r5,r4
 800e0e0:	30000926 	beq	r6,zero,800e108 <memmove+0x148>
 800e0e4:	198d883a 	add	r6,r3,r6
 800e0e8:	29c00003 	ldbu	r7,0(r5)
 800e0ec:	18c00044 	addi	r3,r3,1
 800e0f0:	29400044 	addi	r5,r5,1
 800e0f4:	19ffffc5 	stb	r7,-1(r3)
 800e0f8:	19bffb1e 	bne	r3,r6,800e0e8 <__alt_data_end+0xfc00e0e8>
 800e0fc:	f800283a 	ret
 800e100:	1007883a 	mov	r3,r2
 800e104:	003ff606 	br	800e0e0 <__alt_data_end+0xfc00e0e0>
 800e108:	f800283a 	ret
 800e10c:	1007883a 	mov	r3,r2
 800e110:	003ff406 	br	800e0e4 <__alt_data_end+0xfc00e0e4>
 800e114:	500d883a 	mov	r6,r10
 800e118:	003ff106 	br	800e0e0 <__alt_data_end+0xfc00e0e0>

0800e11c <memset>:
 800e11c:	20c000cc 	andi	r3,r4,3
 800e120:	2005883a 	mov	r2,r4
 800e124:	18004326 	beq	r3,zero,800e234 <memset+0x118>
 800e128:	31ffffc4 	addi	r7,r6,-1
 800e12c:	30004026 	beq	r6,zero,800e230 <memset+0x114>
 800e130:	2813883a 	mov	r9,r5
 800e134:	200d883a 	mov	r6,r4
 800e138:	2007883a 	mov	r3,r4
 800e13c:	00000406 	br	800e150 <memset+0x34>
 800e140:	3a3fffc4 	addi	r8,r7,-1
 800e144:	31800044 	addi	r6,r6,1
 800e148:	38003926 	beq	r7,zero,800e230 <memset+0x114>
 800e14c:	400f883a 	mov	r7,r8
 800e150:	18c00044 	addi	r3,r3,1
 800e154:	32400005 	stb	r9,0(r6)
 800e158:	1a0000cc 	andi	r8,r3,3
 800e15c:	403ff81e 	bne	r8,zero,800e140 <__alt_data_end+0xfc00e140>
 800e160:	010000c4 	movi	r4,3
 800e164:	21c02d2e 	bgeu	r4,r7,800e21c <memset+0x100>
 800e168:	29803fcc 	andi	r6,r5,255
 800e16c:	3008923a 	slli	r4,r6,8
 800e170:	218cb03a 	or	r6,r4,r6
 800e174:	3008943a 	slli	r4,r6,16
 800e178:	218cb03a 	or	r6,r4,r6
 800e17c:	010003c4 	movi	r4,15
 800e180:	21c0182e 	bgeu	r4,r7,800e1e4 <memset+0xc8>
 800e184:	3b3ffc04 	addi	r12,r7,-16
 800e188:	6018d13a 	srli	r12,r12,4
 800e18c:	1a000104 	addi	r8,r3,4
 800e190:	1ac00204 	addi	r11,r3,8
 800e194:	6008913a 	slli	r4,r12,4
 800e198:	1a800304 	addi	r10,r3,12
 800e19c:	1813883a 	mov	r9,r3
 800e1a0:	21000504 	addi	r4,r4,20
 800e1a4:	1909883a 	add	r4,r3,r4
 800e1a8:	49800015 	stw	r6,0(r9)
 800e1ac:	41800015 	stw	r6,0(r8)
 800e1b0:	59800015 	stw	r6,0(r11)
 800e1b4:	51800015 	stw	r6,0(r10)
 800e1b8:	42000404 	addi	r8,r8,16
 800e1bc:	4a400404 	addi	r9,r9,16
 800e1c0:	5ac00404 	addi	r11,r11,16
 800e1c4:	52800404 	addi	r10,r10,16
 800e1c8:	413ff71e 	bne	r8,r4,800e1a8 <__alt_data_end+0xfc00e1a8>
 800e1cc:	63000044 	addi	r12,r12,1
 800e1d0:	6018913a 	slli	r12,r12,4
 800e1d4:	39c003cc 	andi	r7,r7,15
 800e1d8:	010000c4 	movi	r4,3
 800e1dc:	1b07883a 	add	r3,r3,r12
 800e1e0:	21c00e2e 	bgeu	r4,r7,800e21c <memset+0x100>
 800e1e4:	1813883a 	mov	r9,r3
 800e1e8:	3811883a 	mov	r8,r7
 800e1ec:	010000c4 	movi	r4,3
 800e1f0:	49800015 	stw	r6,0(r9)
 800e1f4:	423fff04 	addi	r8,r8,-4
 800e1f8:	4a400104 	addi	r9,r9,4
 800e1fc:	223ffc36 	bltu	r4,r8,800e1f0 <__alt_data_end+0xfc00e1f0>
 800e200:	393fff04 	addi	r4,r7,-4
 800e204:	2008d0ba 	srli	r4,r4,2
 800e208:	39c000cc 	andi	r7,r7,3
 800e20c:	21000044 	addi	r4,r4,1
 800e210:	2109883a 	add	r4,r4,r4
 800e214:	2109883a 	add	r4,r4,r4
 800e218:	1907883a 	add	r3,r3,r4
 800e21c:	38000426 	beq	r7,zero,800e230 <memset+0x114>
 800e220:	19cf883a 	add	r7,r3,r7
 800e224:	19400005 	stb	r5,0(r3)
 800e228:	18c00044 	addi	r3,r3,1
 800e22c:	19fffd1e 	bne	r3,r7,800e224 <__alt_data_end+0xfc00e224>
 800e230:	f800283a 	ret
 800e234:	2007883a 	mov	r3,r4
 800e238:	300f883a 	mov	r7,r6
 800e23c:	003fc806 	br	800e160 <__alt_data_end+0xfc00e160>

0800e240 <_Balloc>:
 800e240:	20801317 	ldw	r2,76(r4)
 800e244:	defffc04 	addi	sp,sp,-16
 800e248:	dc400115 	stw	r17,4(sp)
 800e24c:	dc000015 	stw	r16,0(sp)
 800e250:	dfc00315 	stw	ra,12(sp)
 800e254:	dc800215 	stw	r18,8(sp)
 800e258:	2023883a 	mov	r17,r4
 800e25c:	2821883a 	mov	r16,r5
 800e260:	10000f26 	beq	r2,zero,800e2a0 <_Balloc+0x60>
 800e264:	8407883a 	add	r3,r16,r16
 800e268:	18c7883a 	add	r3,r3,r3
 800e26c:	10c7883a 	add	r3,r2,r3
 800e270:	18800017 	ldw	r2,0(r3)
 800e274:	10001126 	beq	r2,zero,800e2bc <_Balloc+0x7c>
 800e278:	11000017 	ldw	r4,0(r2)
 800e27c:	19000015 	stw	r4,0(r3)
 800e280:	10000415 	stw	zero,16(r2)
 800e284:	10000315 	stw	zero,12(r2)
 800e288:	dfc00317 	ldw	ra,12(sp)
 800e28c:	dc800217 	ldw	r18,8(sp)
 800e290:	dc400117 	ldw	r17,4(sp)
 800e294:	dc000017 	ldw	r16,0(sp)
 800e298:	dec00404 	addi	sp,sp,16
 800e29c:	f800283a 	ret
 800e2a0:	01400104 	movi	r5,4
 800e2a4:	01800844 	movi	r6,33
 800e2a8:	80126f80 	call	80126f8 <_calloc_r>
 800e2ac:	88801315 	stw	r2,76(r17)
 800e2b0:	103fec1e 	bne	r2,zero,800e264 <__alt_data_end+0xfc00e264>
 800e2b4:	0005883a 	mov	r2,zero
 800e2b8:	003ff306 	br	800e288 <__alt_data_end+0xfc00e288>
 800e2bc:	01400044 	movi	r5,1
 800e2c0:	2c24983a 	sll	r18,r5,r16
 800e2c4:	8809883a 	mov	r4,r17
 800e2c8:	91800144 	addi	r6,r18,5
 800e2cc:	318d883a 	add	r6,r6,r6
 800e2d0:	318d883a 	add	r6,r6,r6
 800e2d4:	80126f80 	call	80126f8 <_calloc_r>
 800e2d8:	103ff626 	beq	r2,zero,800e2b4 <__alt_data_end+0xfc00e2b4>
 800e2dc:	14000115 	stw	r16,4(r2)
 800e2e0:	14800215 	stw	r18,8(r2)
 800e2e4:	003fe606 	br	800e280 <__alt_data_end+0xfc00e280>

0800e2e8 <_Bfree>:
 800e2e8:	28000826 	beq	r5,zero,800e30c <_Bfree+0x24>
 800e2ec:	28c00117 	ldw	r3,4(r5)
 800e2f0:	20801317 	ldw	r2,76(r4)
 800e2f4:	18c7883a 	add	r3,r3,r3
 800e2f8:	18c7883a 	add	r3,r3,r3
 800e2fc:	10c5883a 	add	r2,r2,r3
 800e300:	10c00017 	ldw	r3,0(r2)
 800e304:	28c00015 	stw	r3,0(r5)
 800e308:	11400015 	stw	r5,0(r2)
 800e30c:	f800283a 	ret

0800e310 <__multadd>:
 800e310:	defff704 	addi	sp,sp,-36
 800e314:	dc800215 	stw	r18,8(sp)
 800e318:	2c800417 	ldw	r18,16(r5)
 800e31c:	ddc00715 	stw	r23,28(sp)
 800e320:	dd800615 	stw	r22,24(sp)
 800e324:	dd000415 	stw	r20,16(sp)
 800e328:	dcc00315 	stw	r19,12(sp)
 800e32c:	dc400115 	stw	r17,4(sp)
 800e330:	dc000015 	stw	r16,0(sp)
 800e334:	dfc00815 	stw	ra,32(sp)
 800e338:	dd400515 	stw	r21,20(sp)
 800e33c:	2827883a 	mov	r19,r5
 800e340:	2029883a 	mov	r20,r4
 800e344:	3023883a 	mov	r17,r6
 800e348:	3821883a 	mov	r16,r7
 800e34c:	2d800504 	addi	r22,r5,20
 800e350:	002f883a 	mov	r23,zero
 800e354:	b5400017 	ldw	r21,0(r22)
 800e358:	880b883a 	mov	r5,r17
 800e35c:	bdc00044 	addi	r23,r23,1
 800e360:	a93fffcc 	andi	r4,r21,65535
 800e364:	80040900 	call	8004090 <__mulsi3>
 800e368:	1421883a 	add	r16,r2,r16
 800e36c:	a808d43a 	srli	r4,r21,16
 800e370:	802ad43a 	srli	r21,r16,16
 800e374:	880b883a 	mov	r5,r17
 800e378:	80040900 	call	8004090 <__mulsi3>
 800e37c:	a88f883a 	add	r7,r21,r2
 800e380:	3804943a 	slli	r2,r7,16
 800e384:	80ffffcc 	andi	r3,r16,65535
 800e388:	b5800104 	addi	r22,r22,4
 800e38c:	10c7883a 	add	r3,r2,r3
 800e390:	b0ffff15 	stw	r3,-4(r22)
 800e394:	3820d43a 	srli	r16,r7,16
 800e398:	bcbfee16 	blt	r23,r18,800e354 <__alt_data_end+0xfc00e354>
 800e39c:	80000926 	beq	r16,zero,800e3c4 <__multadd+0xb4>
 800e3a0:	98800217 	ldw	r2,8(r19)
 800e3a4:	9080130e 	bge	r18,r2,800e3f4 <__multadd+0xe4>
 800e3a8:	90800144 	addi	r2,r18,5
 800e3ac:	1085883a 	add	r2,r2,r2
 800e3b0:	1085883a 	add	r2,r2,r2
 800e3b4:	9885883a 	add	r2,r19,r2
 800e3b8:	14000015 	stw	r16,0(r2)
 800e3bc:	94800044 	addi	r18,r18,1
 800e3c0:	9c800415 	stw	r18,16(r19)
 800e3c4:	9805883a 	mov	r2,r19
 800e3c8:	dfc00817 	ldw	ra,32(sp)
 800e3cc:	ddc00717 	ldw	r23,28(sp)
 800e3d0:	dd800617 	ldw	r22,24(sp)
 800e3d4:	dd400517 	ldw	r21,20(sp)
 800e3d8:	dd000417 	ldw	r20,16(sp)
 800e3dc:	dcc00317 	ldw	r19,12(sp)
 800e3e0:	dc800217 	ldw	r18,8(sp)
 800e3e4:	dc400117 	ldw	r17,4(sp)
 800e3e8:	dc000017 	ldw	r16,0(sp)
 800e3ec:	dec00904 	addi	sp,sp,36
 800e3f0:	f800283a 	ret
 800e3f4:	99400117 	ldw	r5,4(r19)
 800e3f8:	a009883a 	mov	r4,r20
 800e3fc:	29400044 	addi	r5,r5,1
 800e400:	800e2400 	call	800e240 <_Balloc>
 800e404:	99800417 	ldw	r6,16(r19)
 800e408:	99400304 	addi	r5,r19,12
 800e40c:	11000304 	addi	r4,r2,12
 800e410:	31800084 	addi	r6,r6,2
 800e414:	318d883a 	add	r6,r6,r6
 800e418:	318d883a 	add	r6,r6,r6
 800e41c:	1023883a 	mov	r17,r2
 800e420:	80065b80 	call	80065b8 <memcpy>
 800e424:	99000117 	ldw	r4,4(r19)
 800e428:	a0c01317 	ldw	r3,76(r20)
 800e42c:	2109883a 	add	r4,r4,r4
 800e430:	2109883a 	add	r4,r4,r4
 800e434:	1907883a 	add	r3,r3,r4
 800e438:	18800017 	ldw	r2,0(r3)
 800e43c:	98800015 	stw	r2,0(r19)
 800e440:	1cc00015 	stw	r19,0(r3)
 800e444:	8827883a 	mov	r19,r17
 800e448:	003fd706 	br	800e3a8 <__alt_data_end+0xfc00e3a8>

0800e44c <__s2b>:
 800e44c:	defff904 	addi	sp,sp,-28
 800e450:	dc400115 	stw	r17,4(sp)
 800e454:	dc000015 	stw	r16,0(sp)
 800e458:	2023883a 	mov	r17,r4
 800e45c:	2821883a 	mov	r16,r5
 800e460:	39000204 	addi	r4,r7,8
 800e464:	01400244 	movi	r5,9
 800e468:	dcc00315 	stw	r19,12(sp)
 800e46c:	dc800215 	stw	r18,8(sp)
 800e470:	dfc00615 	stw	ra,24(sp)
 800e474:	dd400515 	stw	r21,20(sp)
 800e478:	dd000415 	stw	r20,16(sp)
 800e47c:	3825883a 	mov	r18,r7
 800e480:	3027883a 	mov	r19,r6
 800e484:	8003fd00 	call	8003fd0 <__divsi3>
 800e488:	00c00044 	movi	r3,1
 800e48c:	000b883a 	mov	r5,zero
 800e490:	1880030e 	bge	r3,r2,800e4a0 <__s2b+0x54>
 800e494:	18c7883a 	add	r3,r3,r3
 800e498:	29400044 	addi	r5,r5,1
 800e49c:	18bffd16 	blt	r3,r2,800e494 <__alt_data_end+0xfc00e494>
 800e4a0:	8809883a 	mov	r4,r17
 800e4a4:	800e2400 	call	800e240 <_Balloc>
 800e4a8:	d8c00717 	ldw	r3,28(sp)
 800e4ac:	10c00515 	stw	r3,20(r2)
 800e4b0:	00c00044 	movi	r3,1
 800e4b4:	10c00415 	stw	r3,16(r2)
 800e4b8:	00c00244 	movi	r3,9
 800e4bc:	1cc0210e 	bge	r3,r19,800e544 <__s2b+0xf8>
 800e4c0:	80eb883a 	add	r21,r16,r3
 800e4c4:	a829883a 	mov	r20,r21
 800e4c8:	84e1883a 	add	r16,r16,r19
 800e4cc:	a1c00007 	ldb	r7,0(r20)
 800e4d0:	8809883a 	mov	r4,r17
 800e4d4:	a5000044 	addi	r20,r20,1
 800e4d8:	100b883a 	mov	r5,r2
 800e4dc:	01800284 	movi	r6,10
 800e4e0:	39fff404 	addi	r7,r7,-48
 800e4e4:	800e3100 	call	800e310 <__multadd>
 800e4e8:	a43ff81e 	bne	r20,r16,800e4cc <__alt_data_end+0xfc00e4cc>
 800e4ec:	ace1883a 	add	r16,r21,r19
 800e4f0:	843ffe04 	addi	r16,r16,-8
 800e4f4:	9c800a0e 	bge	r19,r18,800e520 <__s2b+0xd4>
 800e4f8:	94e5c83a 	sub	r18,r18,r19
 800e4fc:	84a5883a 	add	r18,r16,r18
 800e500:	81c00007 	ldb	r7,0(r16)
 800e504:	8809883a 	mov	r4,r17
 800e508:	84000044 	addi	r16,r16,1
 800e50c:	100b883a 	mov	r5,r2
 800e510:	01800284 	movi	r6,10
 800e514:	39fff404 	addi	r7,r7,-48
 800e518:	800e3100 	call	800e310 <__multadd>
 800e51c:	84bff81e 	bne	r16,r18,800e500 <__alt_data_end+0xfc00e500>
 800e520:	dfc00617 	ldw	ra,24(sp)
 800e524:	dd400517 	ldw	r21,20(sp)
 800e528:	dd000417 	ldw	r20,16(sp)
 800e52c:	dcc00317 	ldw	r19,12(sp)
 800e530:	dc800217 	ldw	r18,8(sp)
 800e534:	dc400117 	ldw	r17,4(sp)
 800e538:	dc000017 	ldw	r16,0(sp)
 800e53c:	dec00704 	addi	sp,sp,28
 800e540:	f800283a 	ret
 800e544:	84000284 	addi	r16,r16,10
 800e548:	1827883a 	mov	r19,r3
 800e54c:	003fe906 	br	800e4f4 <__alt_data_end+0xfc00e4f4>

0800e550 <__hi0bits>:
 800e550:	20bfffec 	andhi	r2,r4,65535
 800e554:	1000141e 	bne	r2,zero,800e5a8 <__hi0bits+0x58>
 800e558:	2008943a 	slli	r4,r4,16
 800e55c:	00800404 	movi	r2,16
 800e560:	20ffc02c 	andhi	r3,r4,65280
 800e564:	1800021e 	bne	r3,zero,800e570 <__hi0bits+0x20>
 800e568:	2008923a 	slli	r4,r4,8
 800e56c:	10800204 	addi	r2,r2,8
 800e570:	20fc002c 	andhi	r3,r4,61440
 800e574:	1800021e 	bne	r3,zero,800e580 <__hi0bits+0x30>
 800e578:	2008913a 	slli	r4,r4,4
 800e57c:	10800104 	addi	r2,r2,4
 800e580:	20f0002c 	andhi	r3,r4,49152
 800e584:	1800031e 	bne	r3,zero,800e594 <__hi0bits+0x44>
 800e588:	2109883a 	add	r4,r4,r4
 800e58c:	10800084 	addi	r2,r2,2
 800e590:	2109883a 	add	r4,r4,r4
 800e594:	20000316 	blt	r4,zero,800e5a4 <__hi0bits+0x54>
 800e598:	2110002c 	andhi	r4,r4,16384
 800e59c:	2000041e 	bne	r4,zero,800e5b0 <__hi0bits+0x60>
 800e5a0:	00800804 	movi	r2,32
 800e5a4:	f800283a 	ret
 800e5a8:	0005883a 	mov	r2,zero
 800e5ac:	003fec06 	br	800e560 <__alt_data_end+0xfc00e560>
 800e5b0:	10800044 	addi	r2,r2,1
 800e5b4:	f800283a 	ret

0800e5b8 <__lo0bits>:
 800e5b8:	20c00017 	ldw	r3,0(r4)
 800e5bc:	188001cc 	andi	r2,r3,7
 800e5c0:	10000826 	beq	r2,zero,800e5e4 <__lo0bits+0x2c>
 800e5c4:	1880004c 	andi	r2,r3,1
 800e5c8:	1000211e 	bne	r2,zero,800e650 <__lo0bits+0x98>
 800e5cc:	1880008c 	andi	r2,r3,2
 800e5d0:	1000211e 	bne	r2,zero,800e658 <__lo0bits+0xa0>
 800e5d4:	1806d0ba 	srli	r3,r3,2
 800e5d8:	00800084 	movi	r2,2
 800e5dc:	20c00015 	stw	r3,0(r4)
 800e5e0:	f800283a 	ret
 800e5e4:	18bfffcc 	andi	r2,r3,65535
 800e5e8:	10001326 	beq	r2,zero,800e638 <__lo0bits+0x80>
 800e5ec:	0005883a 	mov	r2,zero
 800e5f0:	19403fcc 	andi	r5,r3,255
 800e5f4:	2800021e 	bne	r5,zero,800e600 <__lo0bits+0x48>
 800e5f8:	1806d23a 	srli	r3,r3,8
 800e5fc:	10800204 	addi	r2,r2,8
 800e600:	194003cc 	andi	r5,r3,15
 800e604:	2800021e 	bne	r5,zero,800e610 <__lo0bits+0x58>
 800e608:	1806d13a 	srli	r3,r3,4
 800e60c:	10800104 	addi	r2,r2,4
 800e610:	194000cc 	andi	r5,r3,3
 800e614:	2800021e 	bne	r5,zero,800e620 <__lo0bits+0x68>
 800e618:	1806d0ba 	srli	r3,r3,2
 800e61c:	10800084 	addi	r2,r2,2
 800e620:	1940004c 	andi	r5,r3,1
 800e624:	2800081e 	bne	r5,zero,800e648 <__lo0bits+0x90>
 800e628:	1806d07a 	srli	r3,r3,1
 800e62c:	1800051e 	bne	r3,zero,800e644 <__lo0bits+0x8c>
 800e630:	00800804 	movi	r2,32
 800e634:	f800283a 	ret
 800e638:	1806d43a 	srli	r3,r3,16
 800e63c:	00800404 	movi	r2,16
 800e640:	003feb06 	br	800e5f0 <__alt_data_end+0xfc00e5f0>
 800e644:	10800044 	addi	r2,r2,1
 800e648:	20c00015 	stw	r3,0(r4)
 800e64c:	f800283a 	ret
 800e650:	0005883a 	mov	r2,zero
 800e654:	f800283a 	ret
 800e658:	1806d07a 	srli	r3,r3,1
 800e65c:	00800044 	movi	r2,1
 800e660:	20c00015 	stw	r3,0(r4)
 800e664:	f800283a 	ret

0800e668 <__i2b>:
 800e668:	defffd04 	addi	sp,sp,-12
 800e66c:	dc000015 	stw	r16,0(sp)
 800e670:	04000044 	movi	r16,1
 800e674:	dc400115 	stw	r17,4(sp)
 800e678:	2823883a 	mov	r17,r5
 800e67c:	800b883a 	mov	r5,r16
 800e680:	dfc00215 	stw	ra,8(sp)
 800e684:	800e2400 	call	800e240 <_Balloc>
 800e688:	14400515 	stw	r17,20(r2)
 800e68c:	14000415 	stw	r16,16(r2)
 800e690:	dfc00217 	ldw	ra,8(sp)
 800e694:	dc400117 	ldw	r17,4(sp)
 800e698:	dc000017 	ldw	r16,0(sp)
 800e69c:	dec00304 	addi	sp,sp,12
 800e6a0:	f800283a 	ret

0800e6a4 <__multiply>:
 800e6a4:	deffef04 	addi	sp,sp,-68
 800e6a8:	dc400815 	stw	r17,32(sp)
 800e6ac:	dc000715 	stw	r16,28(sp)
 800e6b0:	2c400417 	ldw	r17,16(r5)
 800e6b4:	34000417 	ldw	r16,16(r6)
 800e6b8:	dd800d15 	stw	r22,52(sp)
 800e6bc:	dc800915 	stw	r18,36(sp)
 800e6c0:	dfc01015 	stw	ra,64(sp)
 800e6c4:	df000f15 	stw	fp,60(sp)
 800e6c8:	ddc00e15 	stw	r23,56(sp)
 800e6cc:	dd400c15 	stw	r21,48(sp)
 800e6d0:	dd000b15 	stw	r20,44(sp)
 800e6d4:	dcc00a15 	stw	r19,40(sp)
 800e6d8:	2825883a 	mov	r18,r5
 800e6dc:	302d883a 	mov	r22,r6
 800e6e0:	8c009116 	blt	r17,r16,800e928 <__multiply+0x284>
 800e6e4:	8005883a 	mov	r2,r16
 800e6e8:	8821883a 	mov	r16,r17
 800e6ec:	1023883a 	mov	r17,r2
 800e6f0:	90800217 	ldw	r2,8(r18)
 800e6f4:	8447883a 	add	r3,r16,r17
 800e6f8:	d8c00215 	stw	r3,8(sp)
 800e6fc:	91400117 	ldw	r5,4(r18)
 800e700:	10c0010e 	bge	r2,r3,800e708 <__multiply+0x64>
 800e704:	29400044 	addi	r5,r5,1
 800e708:	800e2400 	call	800e240 <_Balloc>
 800e70c:	d8c00217 	ldw	r3,8(sp)
 800e710:	d8800615 	stw	r2,24(sp)
 800e714:	18eb883a 	add	r21,r3,r3
 800e718:	ad6b883a 	add	r21,r21,r21
 800e71c:	10c00504 	addi	r3,r2,20
 800e720:	1d6b883a 	add	r21,r3,r21
 800e724:	d8c00115 	stw	r3,4(sp)
 800e728:	dd400315 	stw	r21,12(sp)
 800e72c:	1805883a 	mov	r2,r3
 800e730:	1d40042e 	bgeu	r3,r21,800e744 <__multiply+0xa0>
 800e734:	d8c00317 	ldw	r3,12(sp)
 800e738:	10000015 	stw	zero,0(r2)
 800e73c:	10800104 	addi	r2,r2,4
 800e740:	10fffc36 	bltu	r2,r3,800e734 <__alt_data_end+0xfc00e734>
 800e744:	8c63883a 	add	r17,r17,r17
 800e748:	b5800504 	addi	r22,r22,20
 800e74c:	8c63883a 	add	r17,r17,r17
 800e750:	94800504 	addi	r18,r18,20
 800e754:	8421883a 	add	r16,r16,r16
 800e758:	b463883a 	add	r17,r22,r17
 800e75c:	8421883a 	add	r16,r16,r16
 800e760:	dd800015 	stw	r22,0(sp)
 800e764:	dc800415 	stw	r18,16(sp)
 800e768:	dc400515 	stw	r17,20(sp)
 800e76c:	9429883a 	add	r20,r18,r16
 800e770:	b4404f2e 	bgeu	r22,r17,800e8b0 <__multiply+0x20c>
 800e774:	d8c00017 	ldw	r3,0(sp)
 800e778:	1c800017 	ldw	r18,0(r3)
 800e77c:	943fffcc 	andi	r16,r18,65535
 800e780:	80001e26 	beq	r16,zero,800e7fc <__multiply+0x158>
 800e784:	dd800117 	ldw	r22,4(sp)
 800e788:	dd400417 	ldw	r21,16(sp)
 800e78c:	0025883a 	mov	r18,zero
 800e790:	adc00017 	ldw	r23,0(r21)
 800e794:	b4c00017 	ldw	r19,0(r22)
 800e798:	800b883a 	mov	r5,r16
 800e79c:	b93fffcc 	andi	r4,r23,65535
 800e7a0:	80040900 	call	8004090 <__mulsi3>
 800e7a4:	9c7fffcc 	andi	r17,r19,65535
 800e7a8:	8885883a 	add	r2,r17,r2
 800e7ac:	b808d43a 	srli	r4,r23,16
 800e7b0:	14a3883a 	add	r17,r2,r18
 800e7b4:	9826d43a 	srli	r19,r19,16
 800e7b8:	8824d43a 	srli	r18,r17,16
 800e7bc:	800b883a 	mov	r5,r16
 800e7c0:	80040900 	call	8004090 <__mulsi3>
 800e7c4:	9885883a 	add	r2,r19,r2
 800e7c8:	14a7883a 	add	r19,r2,r18
 800e7cc:	88ffffcc 	andi	r3,r17,65535
 800e7d0:	9822943a 	slli	r17,r19,16
 800e7d4:	ad400104 	addi	r21,r21,4
 800e7d8:	b005883a 	mov	r2,r22
 800e7dc:	88c6b03a 	or	r3,r17,r3
 800e7e0:	b0c00015 	stw	r3,0(r22)
 800e7e4:	9824d43a 	srli	r18,r19,16
 800e7e8:	b5800104 	addi	r22,r22,4
 800e7ec:	ad3fe836 	bltu	r21,r20,800e790 <__alt_data_end+0xfc00e790>
 800e7f0:	d8c00017 	ldw	r3,0(sp)
 800e7f4:	14800115 	stw	r18,4(r2)
 800e7f8:	1c800017 	ldw	r18,0(r3)
 800e7fc:	9024d43a 	srli	r18,r18,16
 800e800:	90002226 	beq	r18,zero,800e88c <__multiply+0x1e8>
 800e804:	d8c00117 	ldw	r3,4(sp)
 800e808:	dd800417 	ldw	r22,16(sp)
 800e80c:	002f883a 	mov	r23,zero
 800e810:	1f000017 	ldw	fp,0(r3)
 800e814:	1823883a 	mov	r17,r3
 800e818:	182b883a 	mov	r21,r3
 800e81c:	e021883a 	mov	r16,fp
 800e820:	00000106 	br	800e828 <__multiply+0x184>
 800e824:	982b883a 	mov	r21,r19
 800e828:	b100000b 	ldhu	r4,0(r22)
 800e82c:	8020d43a 	srli	r16,r16,16
 800e830:	900b883a 	mov	r5,r18
 800e834:	80040900 	call	8004090 <__mulsi3>
 800e838:	1405883a 	add	r2,r2,r16
 800e83c:	15ef883a 	add	r23,r2,r23
 800e840:	b804943a 	slli	r2,r23,16
 800e844:	e0ffffcc 	andi	r3,fp,65535
 800e848:	8c400104 	addi	r17,r17,4
 800e84c:	10c6b03a 	or	r3,r2,r3
 800e850:	88ffff15 	stw	r3,-4(r17)
 800e854:	b5800104 	addi	r22,r22,4
 800e858:	b13fff17 	ldw	r4,-4(r22)
 800e85c:	acc00104 	addi	r19,r21,4
 800e860:	900b883a 	mov	r5,r18
 800e864:	2008d43a 	srli	r4,r4,16
 800e868:	9c000017 	ldw	r16,0(r19)
 800e86c:	80040900 	call	8004090 <__mulsi3>
 800e870:	b806d43a 	srli	r3,r23,16
 800e874:	813fffcc 	andi	r4,r16,65535
 800e878:	1105883a 	add	r2,r2,r4
 800e87c:	10f9883a 	add	fp,r2,r3
 800e880:	e02ed43a 	srli	r23,fp,16
 800e884:	b53fe736 	bltu	r22,r20,800e824 <__alt_data_end+0xfc00e824>
 800e888:	af000115 	stw	fp,4(r21)
 800e88c:	d8c00017 	ldw	r3,0(sp)
 800e890:	d9000517 	ldw	r4,20(sp)
 800e894:	18c00104 	addi	r3,r3,4
 800e898:	d8c00015 	stw	r3,0(sp)
 800e89c:	d8c00117 	ldw	r3,4(sp)
 800e8a0:	18c00104 	addi	r3,r3,4
 800e8a4:	d8c00115 	stw	r3,4(sp)
 800e8a8:	d8c00017 	ldw	r3,0(sp)
 800e8ac:	193fb136 	bltu	r3,r4,800e774 <__alt_data_end+0xfc00e774>
 800e8b0:	d8c00217 	ldw	r3,8(sp)
 800e8b4:	00c00c0e 	bge	zero,r3,800e8e8 <__multiply+0x244>
 800e8b8:	d8c00317 	ldw	r3,12(sp)
 800e8bc:	18bfff17 	ldw	r2,-4(r3)
 800e8c0:	1d7fff04 	addi	r21,r3,-4
 800e8c4:	10000326 	beq	r2,zero,800e8d4 <__multiply+0x230>
 800e8c8:	00000706 	br	800e8e8 <__multiply+0x244>
 800e8cc:	a8800017 	ldw	r2,0(r21)
 800e8d0:	1000051e 	bne	r2,zero,800e8e8 <__multiply+0x244>
 800e8d4:	d8c00217 	ldw	r3,8(sp)
 800e8d8:	ad7fff04 	addi	r21,r21,-4
 800e8dc:	18ffffc4 	addi	r3,r3,-1
 800e8e0:	d8c00215 	stw	r3,8(sp)
 800e8e4:	183ff91e 	bne	r3,zero,800e8cc <__alt_data_end+0xfc00e8cc>
 800e8e8:	d8c00617 	ldw	r3,24(sp)
 800e8ec:	d9000217 	ldw	r4,8(sp)
 800e8f0:	1805883a 	mov	r2,r3
 800e8f4:	19000415 	stw	r4,16(r3)
 800e8f8:	dfc01017 	ldw	ra,64(sp)
 800e8fc:	df000f17 	ldw	fp,60(sp)
 800e900:	ddc00e17 	ldw	r23,56(sp)
 800e904:	dd800d17 	ldw	r22,52(sp)
 800e908:	dd400c17 	ldw	r21,48(sp)
 800e90c:	dd000b17 	ldw	r20,44(sp)
 800e910:	dcc00a17 	ldw	r19,40(sp)
 800e914:	dc800917 	ldw	r18,36(sp)
 800e918:	dc400817 	ldw	r17,32(sp)
 800e91c:	dc000717 	ldw	r16,28(sp)
 800e920:	dec01104 	addi	sp,sp,68
 800e924:	f800283a 	ret
 800e928:	3025883a 	mov	r18,r6
 800e92c:	282d883a 	mov	r22,r5
 800e930:	003f6f06 	br	800e6f0 <__alt_data_end+0xfc00e6f0>

0800e934 <__pow5mult>:
 800e934:	defffa04 	addi	sp,sp,-24
 800e938:	dcc00315 	stw	r19,12(sp)
 800e93c:	dc800215 	stw	r18,8(sp)
 800e940:	dc000015 	stw	r16,0(sp)
 800e944:	dfc00515 	stw	ra,20(sp)
 800e948:	dd000415 	stw	r20,16(sp)
 800e94c:	dc400115 	stw	r17,4(sp)
 800e950:	308000cc 	andi	r2,r6,3
 800e954:	3021883a 	mov	r16,r6
 800e958:	2027883a 	mov	r19,r4
 800e95c:	2825883a 	mov	r18,r5
 800e960:	10002e1e 	bne	r2,zero,800ea1c <__pow5mult+0xe8>
 800e964:	8021d0ba 	srai	r16,r16,2
 800e968:	80001a26 	beq	r16,zero,800e9d4 <__pow5mult+0xa0>
 800e96c:	9c401217 	ldw	r17,72(r19)
 800e970:	8800061e 	bne	r17,zero,800e98c <__pow5mult+0x58>
 800e974:	00003406 	br	800ea48 <__pow5mult+0x114>
 800e978:	8021d07a 	srai	r16,r16,1
 800e97c:	80001526 	beq	r16,zero,800e9d4 <__pow5mult+0xa0>
 800e980:	88800017 	ldw	r2,0(r17)
 800e984:	10001c26 	beq	r2,zero,800e9f8 <__pow5mult+0xc4>
 800e988:	1023883a 	mov	r17,r2
 800e98c:	80c0004c 	andi	r3,r16,1
 800e990:	183ff926 	beq	r3,zero,800e978 <__alt_data_end+0xfc00e978>
 800e994:	900b883a 	mov	r5,r18
 800e998:	880d883a 	mov	r6,r17
 800e99c:	9809883a 	mov	r4,r19
 800e9a0:	800e6a40 	call	800e6a4 <__multiply>
 800e9a4:	90001b26 	beq	r18,zero,800ea14 <__pow5mult+0xe0>
 800e9a8:	91c00117 	ldw	r7,4(r18)
 800e9ac:	98c01317 	ldw	r3,76(r19)
 800e9b0:	8021d07a 	srai	r16,r16,1
 800e9b4:	39cf883a 	add	r7,r7,r7
 800e9b8:	39cf883a 	add	r7,r7,r7
 800e9bc:	19c7883a 	add	r3,r3,r7
 800e9c0:	19000017 	ldw	r4,0(r3)
 800e9c4:	91000015 	stw	r4,0(r18)
 800e9c8:	1c800015 	stw	r18,0(r3)
 800e9cc:	1025883a 	mov	r18,r2
 800e9d0:	803feb1e 	bne	r16,zero,800e980 <__alt_data_end+0xfc00e980>
 800e9d4:	9005883a 	mov	r2,r18
 800e9d8:	dfc00517 	ldw	ra,20(sp)
 800e9dc:	dd000417 	ldw	r20,16(sp)
 800e9e0:	dcc00317 	ldw	r19,12(sp)
 800e9e4:	dc800217 	ldw	r18,8(sp)
 800e9e8:	dc400117 	ldw	r17,4(sp)
 800e9ec:	dc000017 	ldw	r16,0(sp)
 800e9f0:	dec00604 	addi	sp,sp,24
 800e9f4:	f800283a 	ret
 800e9f8:	9809883a 	mov	r4,r19
 800e9fc:	880b883a 	mov	r5,r17
 800ea00:	880d883a 	mov	r6,r17
 800ea04:	800e6a40 	call	800e6a4 <__multiply>
 800ea08:	88800015 	stw	r2,0(r17)
 800ea0c:	10000015 	stw	zero,0(r2)
 800ea10:	003fdd06 	br	800e988 <__alt_data_end+0xfc00e988>
 800ea14:	1025883a 	mov	r18,r2
 800ea18:	003fd706 	br	800e978 <__alt_data_end+0xfc00e978>
 800ea1c:	10bfffc4 	addi	r2,r2,-1
 800ea20:	1085883a 	add	r2,r2,r2
 800ea24:	00c200b4 	movhi	r3,2050
 800ea28:	18ca1204 	addi	r3,r3,10312
 800ea2c:	1085883a 	add	r2,r2,r2
 800ea30:	1885883a 	add	r2,r3,r2
 800ea34:	11800017 	ldw	r6,0(r2)
 800ea38:	000f883a 	mov	r7,zero
 800ea3c:	800e3100 	call	800e310 <__multadd>
 800ea40:	1025883a 	mov	r18,r2
 800ea44:	003fc706 	br	800e964 <__alt_data_end+0xfc00e964>
 800ea48:	05000044 	movi	r20,1
 800ea4c:	9809883a 	mov	r4,r19
 800ea50:	a00b883a 	mov	r5,r20
 800ea54:	800e2400 	call	800e240 <_Balloc>
 800ea58:	1023883a 	mov	r17,r2
 800ea5c:	00809c44 	movi	r2,625
 800ea60:	88800515 	stw	r2,20(r17)
 800ea64:	8d000415 	stw	r20,16(r17)
 800ea68:	9c401215 	stw	r17,72(r19)
 800ea6c:	88000015 	stw	zero,0(r17)
 800ea70:	003fc606 	br	800e98c <__alt_data_end+0xfc00e98c>

0800ea74 <__lshift>:
 800ea74:	defff904 	addi	sp,sp,-28
 800ea78:	dd000415 	stw	r20,16(sp)
 800ea7c:	dcc00315 	stw	r19,12(sp)
 800ea80:	3029d17a 	srai	r20,r6,5
 800ea84:	2cc00417 	ldw	r19,16(r5)
 800ea88:	28800217 	ldw	r2,8(r5)
 800ea8c:	dd400515 	stw	r21,20(sp)
 800ea90:	a4e7883a 	add	r19,r20,r19
 800ea94:	dc800215 	stw	r18,8(sp)
 800ea98:	dc400115 	stw	r17,4(sp)
 800ea9c:	dc000015 	stw	r16,0(sp)
 800eaa0:	dfc00615 	stw	ra,24(sp)
 800eaa4:	9c000044 	addi	r16,r19,1
 800eaa8:	2823883a 	mov	r17,r5
 800eaac:	302b883a 	mov	r21,r6
 800eab0:	2025883a 	mov	r18,r4
 800eab4:	29400117 	ldw	r5,4(r5)
 800eab8:	1400030e 	bge	r2,r16,800eac8 <__lshift+0x54>
 800eabc:	1085883a 	add	r2,r2,r2
 800eac0:	29400044 	addi	r5,r5,1
 800eac4:	143ffd16 	blt	r2,r16,800eabc <__alt_data_end+0xfc00eabc>
 800eac8:	9009883a 	mov	r4,r18
 800eacc:	800e2400 	call	800e240 <_Balloc>
 800ead0:	11c00504 	addi	r7,r2,20
 800ead4:	0500090e 	bge	zero,r20,800eafc <__lshift+0x88>
 800ead8:	3811883a 	mov	r8,r7
 800eadc:	0007883a 	mov	r3,zero
 800eae0:	40000015 	stw	zero,0(r8)
 800eae4:	18c00044 	addi	r3,r3,1
 800eae8:	42000104 	addi	r8,r8,4
 800eaec:	1d3ffc1e 	bne	r3,r20,800eae0 <__alt_data_end+0xfc00eae0>
 800eaf0:	18c7883a 	add	r3,r3,r3
 800eaf4:	18c7883a 	add	r3,r3,r3
 800eaf8:	38cf883a 	add	r7,r7,r3
 800eafc:	89000417 	ldw	r4,16(r17)
 800eb00:	88c00504 	addi	r3,r17,20
 800eb04:	a98007cc 	andi	r6,r21,31
 800eb08:	2109883a 	add	r4,r4,r4
 800eb0c:	2109883a 	add	r4,r4,r4
 800eb10:	1909883a 	add	r4,r3,r4
 800eb14:	30002326 	beq	r6,zero,800eba4 <__lshift+0x130>
 800eb18:	01400804 	movi	r5,32
 800eb1c:	298bc83a 	sub	r5,r5,r6
 800eb20:	0013883a 	mov	r9,zero
 800eb24:	1a000017 	ldw	r8,0(r3)
 800eb28:	3815883a 	mov	r10,r7
 800eb2c:	39c00104 	addi	r7,r7,4
 800eb30:	4190983a 	sll	r8,r8,r6
 800eb34:	18c00104 	addi	r3,r3,4
 800eb38:	4a10b03a 	or	r8,r9,r8
 800eb3c:	3a3fff15 	stw	r8,-4(r7)
 800eb40:	1a3fff17 	ldw	r8,-4(r3)
 800eb44:	4152d83a 	srl	r9,r8,r5
 800eb48:	193ff636 	bltu	r3,r4,800eb24 <__alt_data_end+0xfc00eb24>
 800eb4c:	52400115 	stw	r9,4(r10)
 800eb50:	48000126 	beq	r9,zero,800eb58 <__lshift+0xe4>
 800eb54:	9c000084 	addi	r16,r19,2
 800eb58:	89000117 	ldw	r4,4(r17)
 800eb5c:	90c01317 	ldw	r3,76(r18)
 800eb60:	843fffc4 	addi	r16,r16,-1
 800eb64:	2109883a 	add	r4,r4,r4
 800eb68:	2109883a 	add	r4,r4,r4
 800eb6c:	1907883a 	add	r3,r3,r4
 800eb70:	19000017 	ldw	r4,0(r3)
 800eb74:	14000415 	stw	r16,16(r2)
 800eb78:	89000015 	stw	r4,0(r17)
 800eb7c:	1c400015 	stw	r17,0(r3)
 800eb80:	dfc00617 	ldw	ra,24(sp)
 800eb84:	dd400517 	ldw	r21,20(sp)
 800eb88:	dd000417 	ldw	r20,16(sp)
 800eb8c:	dcc00317 	ldw	r19,12(sp)
 800eb90:	dc800217 	ldw	r18,8(sp)
 800eb94:	dc400117 	ldw	r17,4(sp)
 800eb98:	dc000017 	ldw	r16,0(sp)
 800eb9c:	dec00704 	addi	sp,sp,28
 800eba0:	f800283a 	ret
 800eba4:	19400017 	ldw	r5,0(r3)
 800eba8:	39c00104 	addi	r7,r7,4
 800ebac:	18c00104 	addi	r3,r3,4
 800ebb0:	397fff15 	stw	r5,-4(r7)
 800ebb4:	193ffb36 	bltu	r3,r4,800eba4 <__alt_data_end+0xfc00eba4>
 800ebb8:	003fe706 	br	800eb58 <__alt_data_end+0xfc00eb58>

0800ebbc <__mcmp>:
 800ebbc:	20800417 	ldw	r2,16(r4)
 800ebc0:	28c00417 	ldw	r3,16(r5)
 800ebc4:	10c5c83a 	sub	r2,r2,r3
 800ebc8:	1000111e 	bne	r2,zero,800ec10 <__mcmp+0x54>
 800ebcc:	18c7883a 	add	r3,r3,r3
 800ebd0:	18c7883a 	add	r3,r3,r3
 800ebd4:	21000504 	addi	r4,r4,20
 800ebd8:	29400504 	addi	r5,r5,20
 800ebdc:	20c5883a 	add	r2,r4,r3
 800ebe0:	28cb883a 	add	r5,r5,r3
 800ebe4:	00000106 	br	800ebec <__mcmp+0x30>
 800ebe8:	20800a2e 	bgeu	r4,r2,800ec14 <__mcmp+0x58>
 800ebec:	10bfff04 	addi	r2,r2,-4
 800ebf0:	297fff04 	addi	r5,r5,-4
 800ebf4:	11800017 	ldw	r6,0(r2)
 800ebf8:	28c00017 	ldw	r3,0(r5)
 800ebfc:	30fffa26 	beq	r6,r3,800ebe8 <__alt_data_end+0xfc00ebe8>
 800ec00:	30c00236 	bltu	r6,r3,800ec0c <__mcmp+0x50>
 800ec04:	00800044 	movi	r2,1
 800ec08:	f800283a 	ret
 800ec0c:	00bfffc4 	movi	r2,-1
 800ec10:	f800283a 	ret
 800ec14:	0005883a 	mov	r2,zero
 800ec18:	f800283a 	ret

0800ec1c <__mdiff>:
 800ec1c:	defffb04 	addi	sp,sp,-20
 800ec20:	dc000015 	stw	r16,0(sp)
 800ec24:	2821883a 	mov	r16,r5
 800ec28:	dcc00315 	stw	r19,12(sp)
 800ec2c:	300b883a 	mov	r5,r6
 800ec30:	2027883a 	mov	r19,r4
 800ec34:	8009883a 	mov	r4,r16
 800ec38:	dc800215 	stw	r18,8(sp)
 800ec3c:	dfc00415 	stw	ra,16(sp)
 800ec40:	dc400115 	stw	r17,4(sp)
 800ec44:	3025883a 	mov	r18,r6
 800ec48:	800ebbc0 	call	800ebbc <__mcmp>
 800ec4c:	10005226 	beq	r2,zero,800ed98 <__mdiff+0x17c>
 800ec50:	10004c16 	blt	r2,zero,800ed84 <__mdiff+0x168>
 800ec54:	0023883a 	mov	r17,zero
 800ec58:	81400117 	ldw	r5,4(r16)
 800ec5c:	9809883a 	mov	r4,r19
 800ec60:	800e2400 	call	800e240 <_Balloc>
 800ec64:	83400417 	ldw	r13,16(r16)
 800ec68:	93800417 	ldw	r14,16(r18)
 800ec6c:	81000504 	addi	r4,r16,20
 800ec70:	6b59883a 	add	r12,r13,r13
 800ec74:	739d883a 	add	r14,r14,r14
 800ec78:	6319883a 	add	r12,r12,r12
 800ec7c:	91800504 	addi	r6,r18,20
 800ec80:	739d883a 	add	r14,r14,r14
 800ec84:	14400315 	stw	r17,12(r2)
 800ec88:	2319883a 	add	r12,r4,r12
 800ec8c:	339d883a 	add	r14,r6,r14
 800ec90:	12400504 	addi	r9,r2,20
 800ec94:	0007883a 	mov	r3,zero
 800ec98:	22000017 	ldw	r8,0(r4)
 800ec9c:	32800017 	ldw	r10,0(r6)
 800eca0:	4ac00104 	addi	r11,r9,4
 800eca4:	41ffffcc 	andi	r7,r8,65535
 800eca8:	38c7883a 	add	r3,r7,r3
 800ecac:	51ffffcc 	andi	r7,r10,65535
 800ecb0:	19cfc83a 	sub	r7,r3,r7
 800ecb4:	4010d43a 	srli	r8,r8,16
 800ecb8:	5014d43a 	srli	r10,r10,16
 800ecbc:	3807d43a 	srai	r3,r7,16
 800ecc0:	39ffffcc 	andi	r7,r7,65535
 800ecc4:	4291c83a 	sub	r8,r8,r10
 800ecc8:	40c7883a 	add	r3,r8,r3
 800eccc:	1810943a 	slli	r8,r3,16
 800ecd0:	31800104 	addi	r6,r6,4
 800ecd4:	21000104 	addi	r4,r4,4
 800ecd8:	41ceb03a 	or	r7,r8,r7
 800ecdc:	49c00015 	stw	r7,0(r9)
 800ece0:	1807d43a 	srai	r3,r3,16
 800ece4:	580b883a 	mov	r5,r11
 800ece8:	5813883a 	mov	r9,r11
 800ecec:	33bfea36 	bltu	r6,r14,800ec98 <__alt_data_end+0xfc00ec98>
 800ecf0:	2011883a 	mov	r8,r4
 800ecf4:	2300152e 	bgeu	r4,r12,800ed4c <__mdiff+0x130>
 800ecf8:	21400017 	ldw	r5,0(r4)
 800ecfc:	4a400104 	addi	r9,r9,4
 800ed00:	21000104 	addi	r4,r4,4
 800ed04:	29ffffcc 	andi	r7,r5,65535
 800ed08:	38c7883a 	add	r3,r7,r3
 800ed0c:	280ad43a 	srli	r5,r5,16
 800ed10:	180dd43a 	srai	r6,r3,16
 800ed14:	19ffffcc 	andi	r7,r3,65535
 800ed18:	3147883a 	add	r3,r6,r5
 800ed1c:	180a943a 	slli	r5,r3,16
 800ed20:	1807d43a 	srai	r3,r3,16
 800ed24:	29ceb03a 	or	r7,r5,r7
 800ed28:	49ffff15 	stw	r7,-4(r9)
 800ed2c:	233ff236 	bltu	r4,r12,800ecf8 <__alt_data_end+0xfc00ecf8>
 800ed30:	0206303a 	nor	r3,zero,r8
 800ed34:	1b07883a 	add	r3,r3,r12
 800ed38:	1806d0ba 	srli	r3,r3,2
 800ed3c:	18c00044 	addi	r3,r3,1
 800ed40:	18c7883a 	add	r3,r3,r3
 800ed44:	18c7883a 	add	r3,r3,r3
 800ed48:	58cb883a 	add	r5,r11,r3
 800ed4c:	28ffff04 	addi	r3,r5,-4
 800ed50:	3800041e 	bne	r7,zero,800ed64 <__mdiff+0x148>
 800ed54:	18ffff04 	addi	r3,r3,-4
 800ed58:	19000017 	ldw	r4,0(r3)
 800ed5c:	6b7fffc4 	addi	r13,r13,-1
 800ed60:	203ffc26 	beq	r4,zero,800ed54 <__alt_data_end+0xfc00ed54>
 800ed64:	13400415 	stw	r13,16(r2)
 800ed68:	dfc00417 	ldw	ra,16(sp)
 800ed6c:	dcc00317 	ldw	r19,12(sp)
 800ed70:	dc800217 	ldw	r18,8(sp)
 800ed74:	dc400117 	ldw	r17,4(sp)
 800ed78:	dc000017 	ldw	r16,0(sp)
 800ed7c:	dec00504 	addi	sp,sp,20
 800ed80:	f800283a 	ret
 800ed84:	8005883a 	mov	r2,r16
 800ed88:	04400044 	movi	r17,1
 800ed8c:	9021883a 	mov	r16,r18
 800ed90:	1025883a 	mov	r18,r2
 800ed94:	003fb006 	br	800ec58 <__alt_data_end+0xfc00ec58>
 800ed98:	9809883a 	mov	r4,r19
 800ed9c:	000b883a 	mov	r5,zero
 800eda0:	800e2400 	call	800e240 <_Balloc>
 800eda4:	00c00044 	movi	r3,1
 800eda8:	10c00415 	stw	r3,16(r2)
 800edac:	10000515 	stw	zero,20(r2)
 800edb0:	003fed06 	br	800ed68 <__alt_data_end+0xfc00ed68>

0800edb4 <__ulp>:
 800edb4:	295ffc2c 	andhi	r5,r5,32752
 800edb8:	00bf3034 	movhi	r2,64704
 800edbc:	2887883a 	add	r3,r5,r2
 800edc0:	00c0020e 	bge	zero,r3,800edcc <__ulp+0x18>
 800edc4:	0005883a 	mov	r2,zero
 800edc8:	f800283a 	ret
 800edcc:	00c7c83a 	sub	r3,zero,r3
 800edd0:	180bd53a 	srai	r5,r3,20
 800edd4:	008004c4 	movi	r2,19
 800edd8:	11400a0e 	bge	r2,r5,800ee04 <__ulp+0x50>
 800eddc:	00800c84 	movi	r2,50
 800ede0:	0007883a 	mov	r3,zero
 800ede4:	11400516 	blt	r2,r5,800edfc <__ulp+0x48>
 800ede8:	00800cc4 	movi	r2,51
 800edec:	114bc83a 	sub	r5,r2,r5
 800edf0:	00800044 	movi	r2,1
 800edf4:	1144983a 	sll	r2,r2,r5
 800edf8:	f800283a 	ret
 800edfc:	00800044 	movi	r2,1
 800ee00:	f800283a 	ret
 800ee04:	00800234 	movhi	r2,8
 800ee08:	1147d83a 	sra	r3,r2,r5
 800ee0c:	0005883a 	mov	r2,zero
 800ee10:	f800283a 	ret

0800ee14 <__b2d>:
 800ee14:	defffa04 	addi	sp,sp,-24
 800ee18:	dc000015 	stw	r16,0(sp)
 800ee1c:	24000417 	ldw	r16,16(r4)
 800ee20:	dc400115 	stw	r17,4(sp)
 800ee24:	24400504 	addi	r17,r4,20
 800ee28:	8421883a 	add	r16,r16,r16
 800ee2c:	8421883a 	add	r16,r16,r16
 800ee30:	8c21883a 	add	r16,r17,r16
 800ee34:	dc800215 	stw	r18,8(sp)
 800ee38:	84bfff17 	ldw	r18,-4(r16)
 800ee3c:	dd000415 	stw	r20,16(sp)
 800ee40:	dcc00315 	stw	r19,12(sp)
 800ee44:	9009883a 	mov	r4,r18
 800ee48:	2829883a 	mov	r20,r5
 800ee4c:	dfc00515 	stw	ra,20(sp)
 800ee50:	800e5500 	call	800e550 <__hi0bits>
 800ee54:	00c00804 	movi	r3,32
 800ee58:	1887c83a 	sub	r3,r3,r2
 800ee5c:	a0c00015 	stw	r3,0(r20)
 800ee60:	00c00284 	movi	r3,10
 800ee64:	84ffff04 	addi	r19,r16,-4
 800ee68:	18801216 	blt	r3,r2,800eeb4 <__b2d+0xa0>
 800ee6c:	014002c4 	movi	r5,11
 800ee70:	2889c83a 	sub	r4,r5,r2
 800ee74:	9106d83a 	srl	r3,r18,r4
 800ee78:	18cffc34 	orhi	r3,r3,16368
 800ee7c:	8cc0282e 	bgeu	r17,r19,800ef20 <__b2d+0x10c>
 800ee80:	817ffe17 	ldw	r5,-8(r16)
 800ee84:	290ad83a 	srl	r5,r5,r4
 800ee88:	10800544 	addi	r2,r2,21
 800ee8c:	9084983a 	sll	r2,r18,r2
 800ee90:	2884b03a 	or	r2,r5,r2
 800ee94:	dfc00517 	ldw	ra,20(sp)
 800ee98:	dd000417 	ldw	r20,16(sp)
 800ee9c:	dcc00317 	ldw	r19,12(sp)
 800eea0:	dc800217 	ldw	r18,8(sp)
 800eea4:	dc400117 	ldw	r17,4(sp)
 800eea8:	dc000017 	ldw	r16,0(sp)
 800eeac:	dec00604 	addi	sp,sp,24
 800eeb0:	f800283a 	ret
 800eeb4:	113ffd44 	addi	r4,r2,-11
 800eeb8:	8cc00f2e 	bgeu	r17,r19,800eef8 <__b2d+0xe4>
 800eebc:	81bffe04 	addi	r6,r16,-8
 800eec0:	817ffe17 	ldw	r5,-8(r16)
 800eec4:	20001326 	beq	r4,zero,800ef14 <__b2d+0x100>
 800eec8:	00c00ac4 	movi	r3,43
 800eecc:	1885c83a 	sub	r2,r3,r2
 800eed0:	2886d83a 	srl	r3,r5,r2
 800eed4:	9124983a 	sll	r18,r18,r4
 800eed8:	90e4b03a 	or	r18,r18,r3
 800eedc:	90cffc34 	orhi	r3,r18,16368
 800eee0:	8980112e 	bgeu	r17,r6,800ef28 <__b2d+0x114>
 800eee4:	81bffd17 	ldw	r6,-12(r16)
 800eee8:	308cd83a 	srl	r6,r6,r2
 800eeec:	2904983a 	sll	r2,r5,r4
 800eef0:	1184b03a 	or	r2,r2,r6
 800eef4:	003fe706 	br	800ee94 <__alt_data_end+0xfc00ee94>
 800eef8:	20000526 	beq	r4,zero,800ef10 <__b2d+0xfc>
 800eefc:	9124983a 	sll	r18,r18,r4
 800ef00:	000d883a 	mov	r6,zero
 800ef04:	000b883a 	mov	r5,zero
 800ef08:	90cffc34 	orhi	r3,r18,16368
 800ef0c:	003ff706 	br	800eeec <__alt_data_end+0xfc00eeec>
 800ef10:	000b883a 	mov	r5,zero
 800ef14:	90cffc34 	orhi	r3,r18,16368
 800ef18:	2805883a 	mov	r2,r5
 800ef1c:	003fdd06 	br	800ee94 <__alt_data_end+0xfc00ee94>
 800ef20:	000b883a 	mov	r5,zero
 800ef24:	003fd806 	br	800ee88 <__alt_data_end+0xfc00ee88>
 800ef28:	000d883a 	mov	r6,zero
 800ef2c:	003fef06 	br	800eeec <__alt_data_end+0xfc00eeec>

0800ef30 <__d2b>:
 800ef30:	defff704 	addi	sp,sp,-36
 800ef34:	dc000215 	stw	r16,8(sp)
 800ef38:	3021883a 	mov	r16,r6
 800ef3c:	dc400315 	stw	r17,12(sp)
 800ef40:	8022907a 	slli	r17,r16,1
 800ef44:	dd400715 	stw	r21,28(sp)
 800ef48:	282b883a 	mov	r21,r5
 800ef4c:	01400044 	movi	r5,1
 800ef50:	dd000615 	stw	r20,24(sp)
 800ef54:	dcc00515 	stw	r19,20(sp)
 800ef58:	dc800415 	stw	r18,16(sp)
 800ef5c:	dfc00815 	stw	ra,32(sp)
 800ef60:	3829883a 	mov	r20,r7
 800ef64:	dc800917 	ldw	r18,36(sp)
 800ef68:	8822d57a 	srli	r17,r17,21
 800ef6c:	800e2400 	call	800e240 <_Balloc>
 800ef70:	1027883a 	mov	r19,r2
 800ef74:	00800434 	movhi	r2,16
 800ef78:	10bfffc4 	addi	r2,r2,-1
 800ef7c:	808c703a 	and	r6,r16,r2
 800ef80:	88000126 	beq	r17,zero,800ef88 <__d2b+0x58>
 800ef84:	31800434 	orhi	r6,r6,16
 800ef88:	d9800015 	stw	r6,0(sp)
 800ef8c:	a8001f26 	beq	r21,zero,800f00c <__d2b+0xdc>
 800ef90:	d9000104 	addi	r4,sp,4
 800ef94:	dd400115 	stw	r21,4(sp)
 800ef98:	800e5b80 	call	800e5b8 <__lo0bits>
 800ef9c:	d8c00017 	ldw	r3,0(sp)
 800efa0:	1000291e 	bne	r2,zero,800f048 <__d2b+0x118>
 800efa4:	d9000117 	ldw	r4,4(sp)
 800efa8:	99000515 	stw	r4,20(r19)
 800efac:	1820c03a 	cmpne	r16,r3,zero
 800efb0:	84000044 	addi	r16,r16,1
 800efb4:	98c00615 	stw	r3,24(r19)
 800efb8:	9c000415 	stw	r16,16(r19)
 800efbc:	88001b1e 	bne	r17,zero,800f02c <__d2b+0xfc>
 800efc0:	800690ba 	slli	r3,r16,2
 800efc4:	10bef384 	addi	r2,r2,-1074
 800efc8:	a0800015 	stw	r2,0(r20)
 800efcc:	98c5883a 	add	r2,r19,r3
 800efd0:	11000417 	ldw	r4,16(r2)
 800efd4:	8020917a 	slli	r16,r16,5
 800efd8:	800e5500 	call	800e550 <__hi0bits>
 800efdc:	8085c83a 	sub	r2,r16,r2
 800efe0:	90800015 	stw	r2,0(r18)
 800efe4:	9805883a 	mov	r2,r19
 800efe8:	dfc00817 	ldw	ra,32(sp)
 800efec:	dd400717 	ldw	r21,28(sp)
 800eff0:	dd000617 	ldw	r20,24(sp)
 800eff4:	dcc00517 	ldw	r19,20(sp)
 800eff8:	dc800417 	ldw	r18,16(sp)
 800effc:	dc400317 	ldw	r17,12(sp)
 800f000:	dc000217 	ldw	r16,8(sp)
 800f004:	dec00904 	addi	sp,sp,36
 800f008:	f800283a 	ret
 800f00c:	d809883a 	mov	r4,sp
 800f010:	800e5b80 	call	800e5b8 <__lo0bits>
 800f014:	d8c00017 	ldw	r3,0(sp)
 800f018:	04000044 	movi	r16,1
 800f01c:	9c000415 	stw	r16,16(r19)
 800f020:	98c00515 	stw	r3,20(r19)
 800f024:	10800804 	addi	r2,r2,32
 800f028:	883fe526 	beq	r17,zero,800efc0 <__alt_data_end+0xfc00efc0>
 800f02c:	8c7ef344 	addi	r17,r17,-1075
 800f030:	88a3883a 	add	r17,r17,r2
 800f034:	00c00d44 	movi	r3,53
 800f038:	a4400015 	stw	r17,0(r20)
 800f03c:	1885c83a 	sub	r2,r3,r2
 800f040:	90800015 	stw	r2,0(r18)
 800f044:	003fe706 	br	800efe4 <__alt_data_end+0xfc00efe4>
 800f048:	01000804 	movi	r4,32
 800f04c:	2089c83a 	sub	r4,r4,r2
 800f050:	1908983a 	sll	r4,r3,r4
 800f054:	d9400117 	ldw	r5,4(sp)
 800f058:	1886d83a 	srl	r3,r3,r2
 800f05c:	2148b03a 	or	r4,r4,r5
 800f060:	99000515 	stw	r4,20(r19)
 800f064:	d8c00015 	stw	r3,0(sp)
 800f068:	003fd006 	br	800efac <__alt_data_end+0xfc00efac>

0800f06c <__ratio>:
 800f06c:	defff904 	addi	sp,sp,-28
 800f070:	dc400315 	stw	r17,12(sp)
 800f074:	2823883a 	mov	r17,r5
 800f078:	d9400104 	addi	r5,sp,4
 800f07c:	dfc00615 	stw	ra,24(sp)
 800f080:	dcc00515 	stw	r19,20(sp)
 800f084:	dc800415 	stw	r18,16(sp)
 800f088:	2027883a 	mov	r19,r4
 800f08c:	dc000215 	stw	r16,8(sp)
 800f090:	800ee140 	call	800ee14 <__b2d>
 800f094:	8809883a 	mov	r4,r17
 800f098:	d80b883a 	mov	r5,sp
 800f09c:	1025883a 	mov	r18,r2
 800f0a0:	1821883a 	mov	r16,r3
 800f0a4:	800ee140 	call	800ee14 <__b2d>
 800f0a8:	8a400417 	ldw	r9,16(r17)
 800f0ac:	9a000417 	ldw	r8,16(r19)
 800f0b0:	100d883a 	mov	r6,r2
 800f0b4:	d8800017 	ldw	r2,0(sp)
 800f0b8:	4251c83a 	sub	r8,r8,r9
 800f0bc:	4012917a 	slli	r9,r8,5
 800f0c0:	da000117 	ldw	r8,4(sp)
 800f0c4:	4091c83a 	sub	r8,r8,r2
 800f0c8:	4251883a 	add	r8,r8,r9
 800f0cc:	02000d0e 	bge	zero,r8,800f104 <__ratio+0x98>
 800f0d0:	4010953a 	slli	r8,r8,20
 800f0d4:	4421883a 	add	r16,r8,r16
 800f0d8:	9009883a 	mov	r4,r18
 800f0dc:	800b883a 	mov	r5,r16
 800f0e0:	180f883a 	mov	r7,r3
 800f0e4:	80046f40 	call	80046f4 <__divdf3>
 800f0e8:	dfc00617 	ldw	ra,24(sp)
 800f0ec:	dcc00517 	ldw	r19,20(sp)
 800f0f0:	dc800417 	ldw	r18,16(sp)
 800f0f4:	dc400317 	ldw	r17,12(sp)
 800f0f8:	dc000217 	ldw	r16,8(sp)
 800f0fc:	dec00704 	addi	sp,sp,28
 800f100:	f800283a 	ret
 800f104:	4010953a 	slli	r8,r8,20
 800f108:	1a07c83a 	sub	r3,r3,r8
 800f10c:	003ff206 	br	800f0d8 <__alt_data_end+0xfc00f0d8>

0800f110 <_mprec_log10>:
 800f110:	defffe04 	addi	sp,sp,-8
 800f114:	dc000015 	stw	r16,0(sp)
 800f118:	dfc00115 	stw	ra,4(sp)
 800f11c:	008005c4 	movi	r2,23
 800f120:	2021883a 	mov	r16,r4
 800f124:	11000d0e 	bge	r2,r4,800f15c <_mprec_log10+0x4c>
 800f128:	0005883a 	mov	r2,zero
 800f12c:	00cffc34 	movhi	r3,16368
 800f130:	843fffc4 	addi	r16,r16,-1
 800f134:	1009883a 	mov	r4,r2
 800f138:	180b883a 	mov	r5,r3
 800f13c:	000d883a 	mov	r6,zero
 800f140:	01d00934 	movhi	r7,16420
 800f144:	80050740 	call	8005074 <__muldf3>
 800f148:	803ff91e 	bne	r16,zero,800f130 <__alt_data_end+0xfc00f130>
 800f14c:	dfc00117 	ldw	ra,4(sp)
 800f150:	dc000017 	ldw	r16,0(sp)
 800f154:	dec00204 	addi	sp,sp,8
 800f158:	f800283a 	ret
 800f15c:	202090fa 	slli	r16,r4,3
 800f160:	008200b4 	movhi	r2,2050
 800f164:	108a2904 	addi	r2,r2,10404
 800f168:	1421883a 	add	r16,r2,r16
 800f16c:	80800017 	ldw	r2,0(r16)
 800f170:	80c00117 	ldw	r3,4(r16)
 800f174:	dfc00117 	ldw	ra,4(sp)
 800f178:	dc000017 	ldw	r16,0(sp)
 800f17c:	dec00204 	addi	sp,sp,8
 800f180:	f800283a 	ret

0800f184 <__copybits>:
 800f184:	297fffc4 	addi	r5,r5,-1
 800f188:	280fd17a 	srai	r7,r5,5
 800f18c:	30c00417 	ldw	r3,16(r6)
 800f190:	30800504 	addi	r2,r6,20
 800f194:	39c00044 	addi	r7,r7,1
 800f198:	18c7883a 	add	r3,r3,r3
 800f19c:	39cf883a 	add	r7,r7,r7
 800f1a0:	18c7883a 	add	r3,r3,r3
 800f1a4:	39cf883a 	add	r7,r7,r7
 800f1a8:	10c7883a 	add	r3,r2,r3
 800f1ac:	21cf883a 	add	r7,r4,r7
 800f1b0:	10c00d2e 	bgeu	r2,r3,800f1e8 <__copybits+0x64>
 800f1b4:	200b883a 	mov	r5,r4
 800f1b8:	12000017 	ldw	r8,0(r2)
 800f1bc:	29400104 	addi	r5,r5,4
 800f1c0:	10800104 	addi	r2,r2,4
 800f1c4:	2a3fff15 	stw	r8,-4(r5)
 800f1c8:	10fffb36 	bltu	r2,r3,800f1b8 <__alt_data_end+0xfc00f1b8>
 800f1cc:	1985c83a 	sub	r2,r3,r6
 800f1d0:	10bffac4 	addi	r2,r2,-21
 800f1d4:	1004d0ba 	srli	r2,r2,2
 800f1d8:	10800044 	addi	r2,r2,1
 800f1dc:	1085883a 	add	r2,r2,r2
 800f1e0:	1085883a 	add	r2,r2,r2
 800f1e4:	2089883a 	add	r4,r4,r2
 800f1e8:	21c0032e 	bgeu	r4,r7,800f1f8 <__copybits+0x74>
 800f1ec:	20000015 	stw	zero,0(r4)
 800f1f0:	21000104 	addi	r4,r4,4
 800f1f4:	21fffd36 	bltu	r4,r7,800f1ec <__alt_data_end+0xfc00f1ec>
 800f1f8:	f800283a 	ret

0800f1fc <__any_on>:
 800f1fc:	20c00417 	ldw	r3,16(r4)
 800f200:	2805d17a 	srai	r2,r5,5
 800f204:	21000504 	addi	r4,r4,20
 800f208:	18800d0e 	bge	r3,r2,800f240 <__any_on+0x44>
 800f20c:	18c7883a 	add	r3,r3,r3
 800f210:	18c7883a 	add	r3,r3,r3
 800f214:	20c7883a 	add	r3,r4,r3
 800f218:	20c0192e 	bgeu	r4,r3,800f280 <__any_on+0x84>
 800f21c:	18bfff17 	ldw	r2,-4(r3)
 800f220:	18ffff04 	addi	r3,r3,-4
 800f224:	1000041e 	bne	r2,zero,800f238 <__any_on+0x3c>
 800f228:	20c0142e 	bgeu	r4,r3,800f27c <__any_on+0x80>
 800f22c:	18ffff04 	addi	r3,r3,-4
 800f230:	19400017 	ldw	r5,0(r3)
 800f234:	283ffc26 	beq	r5,zero,800f228 <__alt_data_end+0xfc00f228>
 800f238:	00800044 	movi	r2,1
 800f23c:	f800283a 	ret
 800f240:	10c00a0e 	bge	r2,r3,800f26c <__any_on+0x70>
 800f244:	1085883a 	add	r2,r2,r2
 800f248:	1085883a 	add	r2,r2,r2
 800f24c:	294007cc 	andi	r5,r5,31
 800f250:	2087883a 	add	r3,r4,r2
 800f254:	283ff026 	beq	r5,zero,800f218 <__alt_data_end+0xfc00f218>
 800f258:	19800017 	ldw	r6,0(r3)
 800f25c:	3144d83a 	srl	r2,r6,r5
 800f260:	114a983a 	sll	r5,r2,r5
 800f264:	29bff41e 	bne	r5,r6,800f238 <__alt_data_end+0xfc00f238>
 800f268:	003feb06 	br	800f218 <__alt_data_end+0xfc00f218>
 800f26c:	1085883a 	add	r2,r2,r2
 800f270:	1085883a 	add	r2,r2,r2
 800f274:	2087883a 	add	r3,r4,r2
 800f278:	003fe706 	br	800f218 <__alt_data_end+0xfc00f218>
 800f27c:	f800283a 	ret
 800f280:	0005883a 	mov	r2,zero
 800f284:	f800283a 	ret

0800f288 <_putc_r>:
 800f288:	defffc04 	addi	sp,sp,-16
 800f28c:	dc000215 	stw	r16,8(sp)
 800f290:	dfc00315 	stw	ra,12(sp)
 800f294:	2021883a 	mov	r16,r4
 800f298:	20000226 	beq	r4,zero,800f2a4 <_putc_r+0x1c>
 800f29c:	20800e17 	ldw	r2,56(r4)
 800f2a0:	10001b26 	beq	r2,zero,800f310 <_putc_r+0x88>
 800f2a4:	30800217 	ldw	r2,8(r6)
 800f2a8:	10bfffc4 	addi	r2,r2,-1
 800f2ac:	30800215 	stw	r2,8(r6)
 800f2b0:	10000a16 	blt	r2,zero,800f2dc <_putc_r+0x54>
 800f2b4:	30800017 	ldw	r2,0(r6)
 800f2b8:	11400005 	stb	r5,0(r2)
 800f2bc:	30800017 	ldw	r2,0(r6)
 800f2c0:	10c00044 	addi	r3,r2,1
 800f2c4:	30c00015 	stw	r3,0(r6)
 800f2c8:	10800003 	ldbu	r2,0(r2)
 800f2cc:	dfc00317 	ldw	ra,12(sp)
 800f2d0:	dc000217 	ldw	r16,8(sp)
 800f2d4:	dec00404 	addi	sp,sp,16
 800f2d8:	f800283a 	ret
 800f2dc:	30c00617 	ldw	r3,24(r6)
 800f2e0:	10c00616 	blt	r2,r3,800f2fc <_putc_r+0x74>
 800f2e4:	30800017 	ldw	r2,0(r6)
 800f2e8:	00c00284 	movi	r3,10
 800f2ec:	11400005 	stb	r5,0(r2)
 800f2f0:	30800017 	ldw	r2,0(r6)
 800f2f4:	11400003 	ldbu	r5,0(r2)
 800f2f8:	28fff11e 	bne	r5,r3,800f2c0 <__alt_data_end+0xfc00f2c0>
 800f2fc:	8009883a 	mov	r4,r16
 800f300:	dfc00317 	ldw	ra,12(sp)
 800f304:	dc000217 	ldw	r16,8(sp)
 800f308:	dec00404 	addi	sp,sp,16
 800f30c:	80124d81 	jmpi	80124d8 <__swbuf_r>
 800f310:	d9400015 	stw	r5,0(sp)
 800f314:	d9800115 	stw	r6,4(sp)
 800f318:	800d1700 	call	800d170 <__sinit>
 800f31c:	d9800117 	ldw	r6,4(sp)
 800f320:	d9400017 	ldw	r5,0(sp)
 800f324:	003fdf06 	br	800f2a4 <__alt_data_end+0xfc00f2a4>

0800f328 <putc>:
 800f328:	defffc04 	addi	sp,sp,-16
 800f32c:	dc400115 	stw	r17,4(sp)
 800f330:	044200b4 	movhi	r17,2050
 800f334:	8c513704 	addi	r17,r17,17628
 800f338:	dc800215 	stw	r18,8(sp)
 800f33c:	2025883a 	mov	r18,r4
 800f340:	89000017 	ldw	r4,0(r17)
 800f344:	dc000015 	stw	r16,0(sp)
 800f348:	dfc00315 	stw	ra,12(sp)
 800f34c:	2821883a 	mov	r16,r5
 800f350:	20000226 	beq	r4,zero,800f35c <putc+0x34>
 800f354:	20c00e17 	ldw	r3,56(r4)
 800f358:	18001a26 	beq	r3,zero,800f3c4 <putc+0x9c>
 800f35c:	80800217 	ldw	r2,8(r16)
 800f360:	10bfffc4 	addi	r2,r2,-1
 800f364:	80800215 	stw	r2,8(r16)
 800f368:	10000c16 	blt	r2,zero,800f39c <putc+0x74>
 800f36c:	80800017 	ldw	r2,0(r16)
 800f370:	14800005 	stb	r18,0(r2)
 800f374:	80800017 	ldw	r2,0(r16)
 800f378:	10c00044 	addi	r3,r2,1
 800f37c:	80c00015 	stw	r3,0(r16)
 800f380:	10800003 	ldbu	r2,0(r2)
 800f384:	dfc00317 	ldw	ra,12(sp)
 800f388:	dc800217 	ldw	r18,8(sp)
 800f38c:	dc400117 	ldw	r17,4(sp)
 800f390:	dc000017 	ldw	r16,0(sp)
 800f394:	dec00404 	addi	sp,sp,16
 800f398:	f800283a 	ret
 800f39c:	80c00617 	ldw	r3,24(r16)
 800f3a0:	10c00a16 	blt	r2,r3,800f3cc <putc+0xa4>
 800f3a4:	80800017 	ldw	r2,0(r16)
 800f3a8:	00c00284 	movi	r3,10
 800f3ac:	14800005 	stb	r18,0(r2)
 800f3b0:	80800017 	ldw	r2,0(r16)
 800f3b4:	11400003 	ldbu	r5,0(r2)
 800f3b8:	28ffef1e 	bne	r5,r3,800f378 <__alt_data_end+0xfc00f378>
 800f3bc:	89000017 	ldw	r4,0(r17)
 800f3c0:	00000406 	br	800f3d4 <putc+0xac>
 800f3c4:	800d1700 	call	800d170 <__sinit>
 800f3c8:	003fe406 	br	800f35c <__alt_data_end+0xfc00f35c>
 800f3cc:	89000017 	ldw	r4,0(r17)
 800f3d0:	900b883a 	mov	r5,r18
 800f3d4:	800d883a 	mov	r6,r16
 800f3d8:	dfc00317 	ldw	ra,12(sp)
 800f3dc:	dc800217 	ldw	r18,8(sp)
 800f3e0:	dc400117 	ldw	r17,4(sp)
 800f3e4:	dc000017 	ldw	r16,0(sp)
 800f3e8:	dec00404 	addi	sp,sp,16
 800f3ec:	80124d81 	jmpi	80124d8 <__swbuf_r>

0800f3f0 <_realloc_r>:
 800f3f0:	defff604 	addi	sp,sp,-40
 800f3f4:	dcc00315 	stw	r19,12(sp)
 800f3f8:	dc400115 	stw	r17,4(sp)
 800f3fc:	dfc00915 	stw	ra,36(sp)
 800f400:	df000815 	stw	fp,32(sp)
 800f404:	ddc00715 	stw	r23,28(sp)
 800f408:	dd800615 	stw	r22,24(sp)
 800f40c:	dd400515 	stw	r21,20(sp)
 800f410:	dd000415 	stw	r20,16(sp)
 800f414:	dc800215 	stw	r18,8(sp)
 800f418:	dc000015 	stw	r16,0(sp)
 800f41c:	2827883a 	mov	r19,r5
 800f420:	3023883a 	mov	r17,r6
 800f424:	2800bf26 	beq	r5,zero,800f724 <_realloc_r+0x334>
 800f428:	2025883a 	mov	r18,r4
 800f42c:	80157300 	call	8015730 <__malloc_lock>
 800f430:	98ffff17 	ldw	r3,-4(r19)
 800f434:	01bfff04 	movi	r6,-4
 800f438:	890002c4 	addi	r4,r17,11
 800f43c:	01c00584 	movi	r7,22
 800f440:	9d7ffe04 	addi	r21,r19,-8
 800f444:	19a0703a 	and	r16,r3,r6
 800f448:	39003f2e 	bgeu	r7,r4,800f548 <_realloc_r+0x158>
 800f44c:	053ffe04 	movi	r20,-8
 800f450:	2528703a 	and	r20,r4,r20
 800f454:	a00f883a 	mov	r7,r20
 800f458:	a0008216 	blt	r20,zero,800f664 <_realloc_r+0x274>
 800f45c:	a4408136 	bltu	r20,r17,800f664 <_realloc_r+0x274>
 800f460:	81c03c0e 	bge	r16,r7,800f554 <_realloc_r+0x164>
 800f464:	070200b4 	movhi	fp,2050
 800f468:	e70a7e04 	addi	fp,fp,10744
 800f46c:	e1000217 	ldw	r4,8(fp)
 800f470:	ac05883a 	add	r2,r21,r16
 800f474:	2080bf26 	beq	r4,r2,800f774 <_realloc_r+0x384>
 800f478:	11000117 	ldw	r4,4(r2)
 800f47c:	023fff84 	movi	r8,-2
 800f480:	2210703a 	and	r8,r4,r8
 800f484:	1211883a 	add	r8,r2,r8
 800f488:	41400117 	ldw	r5,4(r8)
 800f48c:	2940004c 	andi	r5,r5,1
 800f490:	28004a1e 	bne	r5,zero,800f5bc <_realloc_r+0x1cc>
 800f494:	017fff04 	movi	r5,-4
 800f498:	2148703a 	and	r4,r4,r5
 800f49c:	2409883a 	add	r4,r4,r16
 800f4a0:	21c0ad0e 	bge	r4,r7,800f758 <_realloc_r+0x368>
 800f4a4:	18c0004c 	andi	r3,r3,1
 800f4a8:	18007f1e 	bne	r3,zero,800f6a8 <_realloc_r+0x2b8>
 800f4ac:	9dfffe17 	ldw	r23,-8(r19)
 800f4b0:	adefc83a 	sub	r23,r21,r23
 800f4b4:	bd800117 	ldw	r22,4(r23)
 800f4b8:	b14a703a 	and	r5,r22,r5
 800f4bc:	216d883a 	add	r22,r4,r5
 800f4c0:	b1c04516 	blt	r22,r7,800f5d8 <_realloc_r+0x1e8>
 800f4c4:	10c00317 	ldw	r3,12(r2)
 800f4c8:	10800217 	ldw	r2,8(r2)
 800f4cc:	81bfff04 	addi	r6,r16,-4
 800f4d0:	bc400204 	addi	r17,r23,8
 800f4d4:	10c00315 	stw	r3,12(r2)
 800f4d8:	18800215 	stw	r2,8(r3)
 800f4dc:	b9400217 	ldw	r5,8(r23)
 800f4e0:	b8c00317 	ldw	r3,12(r23)
 800f4e4:	00800904 	movi	r2,36
 800f4e8:	28c00315 	stw	r3,12(r5)
 800f4ec:	19400215 	stw	r5,8(r3)
 800f4f0:	1180ef36 	bltu	r2,r6,800f8b0 <_realloc_r+0x4c0>
 800f4f4:	008004c4 	movi	r2,19
 800f4f8:	1180da2e 	bgeu	r2,r6,800f864 <_realloc_r+0x474>
 800f4fc:	98800017 	ldw	r2,0(r19)
 800f500:	b8800215 	stw	r2,8(r23)
 800f504:	98800117 	ldw	r2,4(r19)
 800f508:	b8800315 	stw	r2,12(r23)
 800f50c:	008006c4 	movi	r2,27
 800f510:	1180fc2e 	bgeu	r2,r6,800f904 <_realloc_r+0x514>
 800f514:	98800217 	ldw	r2,8(r19)
 800f518:	b8800415 	stw	r2,16(r23)
 800f51c:	98800317 	ldw	r2,12(r19)
 800f520:	b8800515 	stw	r2,20(r23)
 800f524:	00800904 	movi	r2,36
 800f528:	3080421e 	bne	r6,r2,800f634 <_realloc_r+0x244>
 800f52c:	98800417 	ldw	r2,16(r19)
 800f530:	9cc00604 	addi	r19,r19,24
 800f534:	b8c00804 	addi	r3,r23,32
 800f538:	b8800615 	stw	r2,24(r23)
 800f53c:	98bfff17 	ldw	r2,-4(r19)
 800f540:	b8800715 	stw	r2,28(r23)
 800f544:	00003d06 	br	800f63c <_realloc_r+0x24c>
 800f548:	01c00404 	movi	r7,16
 800f54c:	3829883a 	mov	r20,r7
 800f550:	003fc206 	br	800f45c <__alt_data_end+0xfc00f45c>
 800f554:	9823883a 	mov	r17,r19
 800f558:	850fc83a 	sub	r7,r16,r20
 800f55c:	008003c4 	movi	r2,15
 800f560:	18c0004c 	andi	r3,r3,1
 800f564:	11c04336 	bltu	r2,r7,800f674 <_realloc_r+0x284>
 800f568:	1c06b03a 	or	r3,r3,r16
 800f56c:	a8c00115 	stw	r3,4(r21)
 800f570:	ac21883a 	add	r16,r21,r16
 800f574:	80c00117 	ldw	r3,4(r16)
 800f578:	18c00054 	ori	r3,r3,1
 800f57c:	80c00115 	stw	r3,4(r16)
 800f580:	9009883a 	mov	r4,r18
 800f584:	80157500 	call	8015750 <__malloc_unlock>
 800f588:	8805883a 	mov	r2,r17
 800f58c:	dfc00917 	ldw	ra,36(sp)
 800f590:	df000817 	ldw	fp,32(sp)
 800f594:	ddc00717 	ldw	r23,28(sp)
 800f598:	dd800617 	ldw	r22,24(sp)
 800f59c:	dd400517 	ldw	r21,20(sp)
 800f5a0:	dd000417 	ldw	r20,16(sp)
 800f5a4:	dcc00317 	ldw	r19,12(sp)
 800f5a8:	dc800217 	ldw	r18,8(sp)
 800f5ac:	dc400117 	ldw	r17,4(sp)
 800f5b0:	dc000017 	ldw	r16,0(sp)
 800f5b4:	dec00a04 	addi	sp,sp,40
 800f5b8:	f800283a 	ret
 800f5bc:	18c0004c 	andi	r3,r3,1
 800f5c0:	1800391e 	bne	r3,zero,800f6a8 <_realloc_r+0x2b8>
 800f5c4:	9dfffe17 	ldw	r23,-8(r19)
 800f5c8:	00bfff04 	movi	r2,-4
 800f5cc:	adefc83a 	sub	r23,r21,r23
 800f5d0:	b9400117 	ldw	r5,4(r23)
 800f5d4:	288a703a 	and	r5,r5,r2
 800f5d8:	2c2d883a 	add	r22,r5,r16
 800f5dc:	b1c03216 	blt	r22,r7,800f6a8 <_realloc_r+0x2b8>
 800f5e0:	b8800317 	ldw	r2,12(r23)
 800f5e4:	b8c00217 	ldw	r3,8(r23)
 800f5e8:	81bfff04 	addi	r6,r16,-4
 800f5ec:	01000904 	movi	r4,36
 800f5f0:	18800315 	stw	r2,12(r3)
 800f5f4:	10c00215 	stw	r3,8(r2)
 800f5f8:	bc400204 	addi	r17,r23,8
 800f5fc:	2180ac36 	bltu	r4,r6,800f8b0 <_realloc_r+0x4c0>
 800f600:	008004c4 	movi	r2,19
 800f604:	1180972e 	bgeu	r2,r6,800f864 <_realloc_r+0x474>
 800f608:	98800017 	ldw	r2,0(r19)
 800f60c:	b8800215 	stw	r2,8(r23)
 800f610:	98800117 	ldw	r2,4(r19)
 800f614:	b8800315 	stw	r2,12(r23)
 800f618:	008006c4 	movi	r2,27
 800f61c:	1180b92e 	bgeu	r2,r6,800f904 <_realloc_r+0x514>
 800f620:	98800217 	ldw	r2,8(r19)
 800f624:	b8800415 	stw	r2,16(r23)
 800f628:	98800317 	ldw	r2,12(r19)
 800f62c:	b8800515 	stw	r2,20(r23)
 800f630:	313fbe26 	beq	r6,r4,800f52c <__alt_data_end+0xfc00f52c>
 800f634:	b8c00604 	addi	r3,r23,24
 800f638:	9cc00404 	addi	r19,r19,16
 800f63c:	98800017 	ldw	r2,0(r19)
 800f640:	b021883a 	mov	r16,r22
 800f644:	b82b883a 	mov	r21,r23
 800f648:	18800015 	stw	r2,0(r3)
 800f64c:	98800117 	ldw	r2,4(r19)
 800f650:	18800115 	stw	r2,4(r3)
 800f654:	98800217 	ldw	r2,8(r19)
 800f658:	18800215 	stw	r2,8(r3)
 800f65c:	b8c00117 	ldw	r3,4(r23)
 800f660:	003fbd06 	br	800f558 <__alt_data_end+0xfc00f558>
 800f664:	00800304 	movi	r2,12
 800f668:	90800015 	stw	r2,0(r18)
 800f66c:	0005883a 	mov	r2,zero
 800f670:	003fc606 	br	800f58c <__alt_data_end+0xfc00f58c>
 800f674:	1d06b03a 	or	r3,r3,r20
 800f678:	ad0b883a 	add	r5,r21,r20
 800f67c:	a8c00115 	stw	r3,4(r21)
 800f680:	38800054 	ori	r2,r7,1
 800f684:	28800115 	stw	r2,4(r5)
 800f688:	29cf883a 	add	r7,r5,r7
 800f68c:	38800117 	ldw	r2,4(r7)
 800f690:	9009883a 	mov	r4,r18
 800f694:	29400204 	addi	r5,r5,8
 800f698:	10800054 	ori	r2,r2,1
 800f69c:	38800115 	stw	r2,4(r7)
 800f6a0:	800d2e40 	call	800d2e4 <_free_r>
 800f6a4:	003fb606 	br	800f580 <__alt_data_end+0xfc00f580>
 800f6a8:	880b883a 	mov	r5,r17
 800f6ac:	9009883a 	mov	r4,r18
 800f6b0:	8005e100 	call	8005e10 <_malloc_r>
 800f6b4:	1023883a 	mov	r17,r2
 800f6b8:	1000aa26 	beq	r2,zero,800f964 <_realloc_r+0x574>
 800f6bc:	98ffff17 	ldw	r3,-4(r19)
 800f6c0:	113ffe04 	addi	r4,r2,-8
 800f6c4:	00bfff84 	movi	r2,-2
 800f6c8:	1884703a 	and	r2,r3,r2
 800f6cc:	a885883a 	add	r2,r21,r2
 800f6d0:	20808626 	beq	r4,r2,800f8ec <_realloc_r+0x4fc>
 800f6d4:	81bfff04 	addi	r6,r16,-4
 800f6d8:	00800904 	movi	r2,36
 800f6dc:	11807036 	bltu	r2,r6,800f8a0 <_realloc_r+0x4b0>
 800f6e0:	00c004c4 	movi	r3,19
 800f6e4:	19805636 	bltu	r3,r6,800f840 <_realloc_r+0x450>
 800f6e8:	8805883a 	mov	r2,r17
 800f6ec:	9807883a 	mov	r3,r19
 800f6f0:	19000017 	ldw	r4,0(r3)
 800f6f4:	11000015 	stw	r4,0(r2)
 800f6f8:	19000117 	ldw	r4,4(r3)
 800f6fc:	11000115 	stw	r4,4(r2)
 800f700:	18c00217 	ldw	r3,8(r3)
 800f704:	10c00215 	stw	r3,8(r2)
 800f708:	980b883a 	mov	r5,r19
 800f70c:	9009883a 	mov	r4,r18
 800f710:	800d2e40 	call	800d2e4 <_free_r>
 800f714:	9009883a 	mov	r4,r18
 800f718:	80157500 	call	8015750 <__malloc_unlock>
 800f71c:	8805883a 	mov	r2,r17
 800f720:	003f9a06 	br	800f58c <__alt_data_end+0xfc00f58c>
 800f724:	300b883a 	mov	r5,r6
 800f728:	dfc00917 	ldw	ra,36(sp)
 800f72c:	df000817 	ldw	fp,32(sp)
 800f730:	ddc00717 	ldw	r23,28(sp)
 800f734:	dd800617 	ldw	r22,24(sp)
 800f738:	dd400517 	ldw	r21,20(sp)
 800f73c:	dd000417 	ldw	r20,16(sp)
 800f740:	dcc00317 	ldw	r19,12(sp)
 800f744:	dc800217 	ldw	r18,8(sp)
 800f748:	dc400117 	ldw	r17,4(sp)
 800f74c:	dc000017 	ldw	r16,0(sp)
 800f750:	dec00a04 	addi	sp,sp,40
 800f754:	8005e101 	jmpi	8005e10 <_malloc_r>
 800f758:	11400317 	ldw	r5,12(r2)
 800f75c:	10800217 	ldw	r2,8(r2)
 800f760:	9823883a 	mov	r17,r19
 800f764:	2021883a 	mov	r16,r4
 800f768:	11400315 	stw	r5,12(r2)
 800f76c:	28800215 	stw	r2,8(r5)
 800f770:	003f7906 	br	800f558 <__alt_data_end+0xfc00f558>
 800f774:	21000117 	ldw	r4,4(r4)
 800f778:	00bfff04 	movi	r2,-4
 800f77c:	a1800404 	addi	r6,r20,16
 800f780:	2088703a 	and	r4,r4,r2
 800f784:	2409883a 	add	r4,r4,r16
 800f788:	2180380e 	bge	r4,r6,800f86c <_realloc_r+0x47c>
 800f78c:	18c0004c 	andi	r3,r3,1
 800f790:	183fc51e 	bne	r3,zero,800f6a8 <__alt_data_end+0xfc00f6a8>
 800f794:	9dfffe17 	ldw	r23,-8(r19)
 800f798:	adefc83a 	sub	r23,r21,r23
 800f79c:	b9400117 	ldw	r5,4(r23)
 800f7a0:	288a703a 	and	r5,r5,r2
 800f7a4:	216d883a 	add	r22,r4,r5
 800f7a8:	b1bf8b16 	blt	r22,r6,800f5d8 <__alt_data_end+0xfc00f5d8>
 800f7ac:	b8800317 	ldw	r2,12(r23)
 800f7b0:	b8c00217 	ldw	r3,8(r23)
 800f7b4:	81bfff04 	addi	r6,r16,-4
 800f7b8:	01000904 	movi	r4,36
 800f7bc:	18800315 	stw	r2,12(r3)
 800f7c0:	10c00215 	stw	r3,8(r2)
 800f7c4:	bc400204 	addi	r17,r23,8
 800f7c8:	21805a36 	bltu	r4,r6,800f934 <_realloc_r+0x544>
 800f7cc:	008004c4 	movi	r2,19
 800f7d0:	1180562e 	bgeu	r2,r6,800f92c <_realloc_r+0x53c>
 800f7d4:	98800017 	ldw	r2,0(r19)
 800f7d8:	b8800215 	stw	r2,8(r23)
 800f7dc:	98800117 	ldw	r2,4(r19)
 800f7e0:	b8800315 	stw	r2,12(r23)
 800f7e4:	008006c4 	movi	r2,27
 800f7e8:	11805636 	bltu	r2,r6,800f944 <_realloc_r+0x554>
 800f7ec:	b8800404 	addi	r2,r23,16
 800f7f0:	9cc00204 	addi	r19,r19,8
 800f7f4:	98c00017 	ldw	r3,0(r19)
 800f7f8:	10c00015 	stw	r3,0(r2)
 800f7fc:	98c00117 	ldw	r3,4(r19)
 800f800:	10c00115 	stw	r3,4(r2)
 800f804:	98c00217 	ldw	r3,8(r19)
 800f808:	10c00215 	stw	r3,8(r2)
 800f80c:	bd07883a 	add	r3,r23,r20
 800f810:	b505c83a 	sub	r2,r22,r20
 800f814:	e0c00215 	stw	r3,8(fp)
 800f818:	10800054 	ori	r2,r2,1
 800f81c:	18800115 	stw	r2,4(r3)
 800f820:	b8800117 	ldw	r2,4(r23)
 800f824:	9009883a 	mov	r4,r18
 800f828:	1080004c 	andi	r2,r2,1
 800f82c:	a0a8b03a 	or	r20,r20,r2
 800f830:	bd000115 	stw	r20,4(r23)
 800f834:	80157500 	call	8015750 <__malloc_unlock>
 800f838:	8805883a 	mov	r2,r17
 800f83c:	003f5306 	br	800f58c <__alt_data_end+0xfc00f58c>
 800f840:	98c00017 	ldw	r3,0(r19)
 800f844:	88c00015 	stw	r3,0(r17)
 800f848:	98c00117 	ldw	r3,4(r19)
 800f84c:	88c00115 	stw	r3,4(r17)
 800f850:	00c006c4 	movi	r3,27
 800f854:	19801d36 	bltu	r3,r6,800f8cc <_realloc_r+0x4dc>
 800f858:	88800204 	addi	r2,r17,8
 800f85c:	98c00204 	addi	r3,r19,8
 800f860:	003fa306 	br	800f6f0 <__alt_data_end+0xfc00f6f0>
 800f864:	8807883a 	mov	r3,r17
 800f868:	003f7406 	br	800f63c <__alt_data_end+0xfc00f63c>
 800f86c:	ad2b883a 	add	r21,r21,r20
 800f870:	2505c83a 	sub	r2,r4,r20
 800f874:	e5400215 	stw	r21,8(fp)
 800f878:	10800054 	ori	r2,r2,1
 800f87c:	a8800115 	stw	r2,4(r21)
 800f880:	98bfff17 	ldw	r2,-4(r19)
 800f884:	9009883a 	mov	r4,r18
 800f888:	1080004c 	andi	r2,r2,1
 800f88c:	a0a8b03a 	or	r20,r20,r2
 800f890:	9d3fff15 	stw	r20,-4(r19)
 800f894:	80157500 	call	8015750 <__malloc_unlock>
 800f898:	9805883a 	mov	r2,r19
 800f89c:	003f3b06 	br	800f58c <__alt_data_end+0xfc00f58c>
 800f8a0:	8809883a 	mov	r4,r17
 800f8a4:	980b883a 	mov	r5,r19
 800f8a8:	800dfc00 	call	800dfc0 <memmove>
 800f8ac:	003f9606 	br	800f708 <__alt_data_end+0xfc00f708>
 800f8b0:	8809883a 	mov	r4,r17
 800f8b4:	980b883a 	mov	r5,r19
 800f8b8:	800dfc00 	call	800dfc0 <memmove>
 800f8bc:	b8c00117 	ldw	r3,4(r23)
 800f8c0:	b021883a 	mov	r16,r22
 800f8c4:	b82b883a 	mov	r21,r23
 800f8c8:	003f2306 	br	800f558 <__alt_data_end+0xfc00f558>
 800f8cc:	98c00217 	ldw	r3,8(r19)
 800f8d0:	88c00215 	stw	r3,8(r17)
 800f8d4:	98c00317 	ldw	r3,12(r19)
 800f8d8:	88c00315 	stw	r3,12(r17)
 800f8dc:	30800c26 	beq	r6,r2,800f910 <_realloc_r+0x520>
 800f8e0:	88800404 	addi	r2,r17,16
 800f8e4:	98c00404 	addi	r3,r19,16
 800f8e8:	003f8106 	br	800f6f0 <__alt_data_end+0xfc00f6f0>
 800f8ec:	893fff17 	ldw	r4,-4(r17)
 800f8f0:	00bfff04 	movi	r2,-4
 800f8f4:	9823883a 	mov	r17,r19
 800f8f8:	2084703a 	and	r2,r4,r2
 800f8fc:	80a1883a 	add	r16,r16,r2
 800f900:	003f1506 	br	800f558 <__alt_data_end+0xfc00f558>
 800f904:	b8c00404 	addi	r3,r23,16
 800f908:	9cc00204 	addi	r19,r19,8
 800f90c:	003f4b06 	br	800f63c <__alt_data_end+0xfc00f63c>
 800f910:	99000417 	ldw	r4,16(r19)
 800f914:	88800604 	addi	r2,r17,24
 800f918:	98c00604 	addi	r3,r19,24
 800f91c:	89000415 	stw	r4,16(r17)
 800f920:	99000517 	ldw	r4,20(r19)
 800f924:	89000515 	stw	r4,20(r17)
 800f928:	003f7106 	br	800f6f0 <__alt_data_end+0xfc00f6f0>
 800f92c:	8805883a 	mov	r2,r17
 800f930:	003fb006 	br	800f7f4 <__alt_data_end+0xfc00f7f4>
 800f934:	8809883a 	mov	r4,r17
 800f938:	980b883a 	mov	r5,r19
 800f93c:	800dfc00 	call	800dfc0 <memmove>
 800f940:	003fb206 	br	800f80c <__alt_data_end+0xfc00f80c>
 800f944:	98800217 	ldw	r2,8(r19)
 800f948:	b8800415 	stw	r2,16(r23)
 800f94c:	98800317 	ldw	r2,12(r19)
 800f950:	b8800515 	stw	r2,20(r23)
 800f954:	31000726 	beq	r6,r4,800f974 <_realloc_r+0x584>
 800f958:	b8800604 	addi	r2,r23,24
 800f95c:	9cc00404 	addi	r19,r19,16
 800f960:	003fa406 	br	800f7f4 <__alt_data_end+0xfc00f7f4>
 800f964:	9009883a 	mov	r4,r18
 800f968:	80157500 	call	8015750 <__malloc_unlock>
 800f96c:	0005883a 	mov	r2,zero
 800f970:	003f0606 	br	800f58c <__alt_data_end+0xfc00f58c>
 800f974:	98c00417 	ldw	r3,16(r19)
 800f978:	9cc00604 	addi	r19,r19,24
 800f97c:	b8800804 	addi	r2,r23,32
 800f980:	b8c00615 	stw	r3,24(r23)
 800f984:	98ffff17 	ldw	r3,-4(r19)
 800f988:	b8c00715 	stw	r3,28(r23)
 800f98c:	003f9906 	br	800f7f4 <__alt_data_end+0xfc00f7f4>

0800f990 <__fpclassifyd>:
 800f990:	00a00034 	movhi	r2,32768
 800f994:	10bfffc4 	addi	r2,r2,-1
 800f998:	2884703a 	and	r2,r5,r2
 800f99c:	10000726 	beq	r2,zero,800f9bc <__fpclassifyd+0x2c>
 800f9a0:	00fffc34 	movhi	r3,65520
 800f9a4:	019ff834 	movhi	r6,32736
 800f9a8:	28c7883a 	add	r3,r5,r3
 800f9ac:	31bfffc4 	addi	r6,r6,-1
 800f9b0:	30c00536 	bltu	r6,r3,800f9c8 <__fpclassifyd+0x38>
 800f9b4:	00800104 	movi	r2,4
 800f9b8:	f800283a 	ret
 800f9bc:	2000021e 	bne	r4,zero,800f9c8 <__fpclassifyd+0x38>
 800f9c0:	00800084 	movi	r2,2
 800f9c4:	f800283a 	ret
 800f9c8:	00dffc34 	movhi	r3,32752
 800f9cc:	019ff834 	movhi	r6,32736
 800f9d0:	28cb883a 	add	r5,r5,r3
 800f9d4:	31bfffc4 	addi	r6,r6,-1
 800f9d8:	317ff62e 	bgeu	r6,r5,800f9b4 <__alt_data_end+0xfc00f9b4>
 800f9dc:	01400434 	movhi	r5,16
 800f9e0:	297fffc4 	addi	r5,r5,-1
 800f9e4:	28800236 	bltu	r5,r2,800f9f0 <__fpclassifyd+0x60>
 800f9e8:	008000c4 	movi	r2,3
 800f9ec:	f800283a 	ret
 800f9f0:	10c00226 	beq	r2,r3,800f9fc <__fpclassifyd+0x6c>
 800f9f4:	0005883a 	mov	r2,zero
 800f9f8:	f800283a 	ret
 800f9fc:	2005003a 	cmpeq	r2,r4,zero
 800fa00:	f800283a 	ret

0800fa04 <__sread>:
 800fa04:	defffe04 	addi	sp,sp,-8
 800fa08:	dc000015 	stw	r16,0(sp)
 800fa0c:	2821883a 	mov	r16,r5
 800fa10:	2940038f 	ldh	r5,14(r5)
 800fa14:	dfc00115 	stw	ra,4(sp)
 800fa18:	8012bc80 	call	8012bc8 <_read_r>
 800fa1c:	10000716 	blt	r2,zero,800fa3c <__sread+0x38>
 800fa20:	80c01417 	ldw	r3,80(r16)
 800fa24:	1887883a 	add	r3,r3,r2
 800fa28:	80c01415 	stw	r3,80(r16)
 800fa2c:	dfc00117 	ldw	ra,4(sp)
 800fa30:	dc000017 	ldw	r16,0(sp)
 800fa34:	dec00204 	addi	sp,sp,8
 800fa38:	f800283a 	ret
 800fa3c:	80c0030b 	ldhu	r3,12(r16)
 800fa40:	18fbffcc 	andi	r3,r3,61439
 800fa44:	80c0030d 	sth	r3,12(r16)
 800fa48:	dfc00117 	ldw	ra,4(sp)
 800fa4c:	dc000017 	ldw	r16,0(sp)
 800fa50:	dec00204 	addi	sp,sp,8
 800fa54:	f800283a 	ret

0800fa58 <__seofread>:
 800fa58:	0005883a 	mov	r2,zero
 800fa5c:	f800283a 	ret

0800fa60 <__swrite>:
 800fa60:	2880030b 	ldhu	r2,12(r5)
 800fa64:	defffb04 	addi	sp,sp,-20
 800fa68:	dcc00315 	stw	r19,12(sp)
 800fa6c:	dc800215 	stw	r18,8(sp)
 800fa70:	dc400115 	stw	r17,4(sp)
 800fa74:	dc000015 	stw	r16,0(sp)
 800fa78:	dfc00415 	stw	ra,16(sp)
 800fa7c:	10c0400c 	andi	r3,r2,256
 800fa80:	2821883a 	mov	r16,r5
 800fa84:	2027883a 	mov	r19,r4
 800fa88:	3025883a 	mov	r18,r6
 800fa8c:	3823883a 	mov	r17,r7
 800fa90:	18000526 	beq	r3,zero,800faa8 <__swrite+0x48>
 800fa94:	2940038f 	ldh	r5,14(r5)
 800fa98:	000d883a 	mov	r6,zero
 800fa9c:	01c00084 	movi	r7,2
 800faa0:	8012b6c0 	call	8012b6c <_lseek_r>
 800faa4:	8080030b 	ldhu	r2,12(r16)
 800faa8:	8140038f 	ldh	r5,14(r16)
 800faac:	10bbffcc 	andi	r2,r2,61439
 800fab0:	9809883a 	mov	r4,r19
 800fab4:	900d883a 	mov	r6,r18
 800fab8:	880f883a 	mov	r7,r17
 800fabc:	8080030d 	sth	r2,12(r16)
 800fac0:	dfc00417 	ldw	ra,16(sp)
 800fac4:	dcc00317 	ldw	r19,12(sp)
 800fac8:	dc800217 	ldw	r18,8(sp)
 800facc:	dc400117 	ldw	r17,4(sp)
 800fad0:	dc000017 	ldw	r16,0(sp)
 800fad4:	dec00504 	addi	sp,sp,20
 800fad8:	80126481 	jmpi	8012648 <_write_r>

0800fadc <__sseek>:
 800fadc:	defffe04 	addi	sp,sp,-8
 800fae0:	dc000015 	stw	r16,0(sp)
 800fae4:	2821883a 	mov	r16,r5
 800fae8:	2940038f 	ldh	r5,14(r5)
 800faec:	dfc00115 	stw	ra,4(sp)
 800faf0:	8012b6c0 	call	8012b6c <_lseek_r>
 800faf4:	00ffffc4 	movi	r3,-1
 800faf8:	10c00826 	beq	r2,r3,800fb1c <__sseek+0x40>
 800fafc:	80c0030b 	ldhu	r3,12(r16)
 800fb00:	80801415 	stw	r2,80(r16)
 800fb04:	18c40014 	ori	r3,r3,4096
 800fb08:	80c0030d 	sth	r3,12(r16)
 800fb0c:	dfc00117 	ldw	ra,4(sp)
 800fb10:	dc000017 	ldw	r16,0(sp)
 800fb14:	dec00204 	addi	sp,sp,8
 800fb18:	f800283a 	ret
 800fb1c:	80c0030b 	ldhu	r3,12(r16)
 800fb20:	18fbffcc 	andi	r3,r3,61439
 800fb24:	80c0030d 	sth	r3,12(r16)
 800fb28:	dfc00117 	ldw	ra,4(sp)
 800fb2c:	dc000017 	ldw	r16,0(sp)
 800fb30:	dec00204 	addi	sp,sp,8
 800fb34:	f800283a 	ret

0800fb38 <__sclose>:
 800fb38:	2940038f 	ldh	r5,14(r5)
 800fb3c:	80126a41 	jmpi	80126a4 <_close_r>

0800fb40 <strcmp>:
 800fb40:	2144b03a 	or	r2,r4,r5
 800fb44:	108000cc 	andi	r2,r2,3
 800fb48:	1000171e 	bne	r2,zero,800fba8 <strcmp+0x68>
 800fb4c:	20800017 	ldw	r2,0(r4)
 800fb50:	28c00017 	ldw	r3,0(r5)
 800fb54:	10c0141e 	bne	r2,r3,800fba8 <strcmp+0x68>
 800fb58:	027fbff4 	movhi	r9,65279
 800fb5c:	4a7fbfc4 	addi	r9,r9,-257
 800fb60:	0086303a 	nor	r3,zero,r2
 800fb64:	02202074 	movhi	r8,32897
 800fb68:	1245883a 	add	r2,r2,r9
 800fb6c:	42202004 	addi	r8,r8,-32640
 800fb70:	10c4703a 	and	r2,r2,r3
 800fb74:	1204703a 	and	r2,r2,r8
 800fb78:	10000226 	beq	r2,zero,800fb84 <strcmp+0x44>
 800fb7c:	00001706 	br	800fbdc <strcmp+0x9c>
 800fb80:	1000161e 	bne	r2,zero,800fbdc <strcmp+0x9c>
 800fb84:	21000104 	addi	r4,r4,4
 800fb88:	20c00017 	ldw	r3,0(r4)
 800fb8c:	29400104 	addi	r5,r5,4
 800fb90:	29800017 	ldw	r6,0(r5)
 800fb94:	1a4f883a 	add	r7,r3,r9
 800fb98:	00c4303a 	nor	r2,zero,r3
 800fb9c:	3884703a 	and	r2,r7,r2
 800fba0:	1204703a 	and	r2,r2,r8
 800fba4:	19bff626 	beq	r3,r6,800fb80 <__alt_data_end+0xfc00fb80>
 800fba8:	20800007 	ldb	r2,0(r4)
 800fbac:	1000051e 	bne	r2,zero,800fbc4 <strcmp+0x84>
 800fbb0:	00000606 	br	800fbcc <strcmp+0x8c>
 800fbb4:	21000044 	addi	r4,r4,1
 800fbb8:	20800007 	ldb	r2,0(r4)
 800fbbc:	29400044 	addi	r5,r5,1
 800fbc0:	10000226 	beq	r2,zero,800fbcc <strcmp+0x8c>
 800fbc4:	28c00007 	ldb	r3,0(r5)
 800fbc8:	10fffa26 	beq	r2,r3,800fbb4 <__alt_data_end+0xfc00fbb4>
 800fbcc:	20800003 	ldbu	r2,0(r4)
 800fbd0:	28c00003 	ldbu	r3,0(r5)
 800fbd4:	10c5c83a 	sub	r2,r2,r3
 800fbd8:	f800283a 	ret
 800fbdc:	0005883a 	mov	r2,zero
 800fbe0:	f800283a 	ret

0800fbe4 <__ssprint_r>:
 800fbe4:	30800217 	ldw	r2,8(r6)
 800fbe8:	defff604 	addi	sp,sp,-40
 800fbec:	ddc00715 	stw	r23,28(sp)
 800fbf0:	dcc00315 	stw	r19,12(sp)
 800fbf4:	dfc00915 	stw	ra,36(sp)
 800fbf8:	df000815 	stw	fp,32(sp)
 800fbfc:	dd800615 	stw	r22,24(sp)
 800fc00:	dd400515 	stw	r21,20(sp)
 800fc04:	dd000415 	stw	r20,16(sp)
 800fc08:	dc800215 	stw	r18,8(sp)
 800fc0c:	dc400115 	stw	r17,4(sp)
 800fc10:	dc000015 	stw	r16,0(sp)
 800fc14:	3027883a 	mov	r19,r6
 800fc18:	35c00017 	ldw	r23,0(r6)
 800fc1c:	10005526 	beq	r2,zero,800fd74 <__ssprint_r+0x190>
 800fc20:	2029883a 	mov	r20,r4
 800fc24:	29000017 	ldw	r4,0(r5)
 800fc28:	2821883a 	mov	r16,r5
 800fc2c:	0039883a 	mov	fp,zero
 800fc30:	0023883a 	mov	r17,zero
 800fc34:	88003926 	beq	r17,zero,800fd1c <__ssprint_r+0x138>
 800fc38:	84800217 	ldw	r18,8(r16)
 800fc3c:	902d883a 	mov	r22,r18
 800fc40:	8c803a36 	bltu	r17,r18,800fd2c <__ssprint_r+0x148>
 800fc44:	80c0030b 	ldhu	r3,12(r16)
 800fc48:	1881200c 	andi	r2,r3,1152
 800fc4c:	10002626 	beq	r2,zero,800fce8 <__ssprint_r+0x104>
 800fc50:	80800517 	ldw	r2,20(r16)
 800fc54:	81400417 	ldw	r5,16(r16)
 800fc58:	89c00044 	addi	r7,r17,1
 800fc5c:	108d883a 	add	r6,r2,r2
 800fc60:	3085883a 	add	r2,r6,r2
 800fc64:	100cd7fa 	srli	r6,r2,31
 800fc68:	216dc83a 	sub	r22,r4,r5
 800fc6c:	3d89883a 	add	r4,r7,r22
 800fc70:	3085883a 	add	r2,r6,r2
 800fc74:	1025d07a 	srai	r18,r2,1
 800fc78:	900d883a 	mov	r6,r18
 800fc7c:	9100022e 	bgeu	r18,r4,800fc88 <__ssprint_r+0xa4>
 800fc80:	2025883a 	mov	r18,r4
 800fc84:	200d883a 	mov	r6,r4
 800fc88:	18c1000c 	andi	r3,r3,1024
 800fc8c:	a009883a 	mov	r4,r20
 800fc90:	18002926 	beq	r3,zero,800fd38 <__ssprint_r+0x154>
 800fc94:	300b883a 	mov	r5,r6
 800fc98:	8005e100 	call	8005e10 <_malloc_r>
 800fc9c:	102b883a 	mov	r21,r2
 800fca0:	10002b26 	beq	r2,zero,800fd50 <__ssprint_r+0x16c>
 800fca4:	81400417 	ldw	r5,16(r16)
 800fca8:	1009883a 	mov	r4,r2
 800fcac:	b00d883a 	mov	r6,r22
 800fcb0:	80065b80 	call	80065b8 <memcpy>
 800fcb4:	8080030b 	ldhu	r2,12(r16)
 800fcb8:	00fedfc4 	movi	r3,-1153
 800fcbc:	10c4703a 	and	r2,r2,r3
 800fcc0:	10802014 	ori	r2,r2,128
 800fcc4:	8080030d 	sth	r2,12(r16)
 800fcc8:	ad89883a 	add	r4,r21,r22
 800fccc:	95adc83a 	sub	r22,r18,r22
 800fcd0:	84800515 	stw	r18,20(r16)
 800fcd4:	85800215 	stw	r22,8(r16)
 800fcd8:	85400415 	stw	r21,16(r16)
 800fcdc:	81000015 	stw	r4,0(r16)
 800fce0:	8825883a 	mov	r18,r17
 800fce4:	882d883a 	mov	r22,r17
 800fce8:	e00b883a 	mov	r5,fp
 800fcec:	b00d883a 	mov	r6,r22
 800fcf0:	800dfc00 	call	800dfc0 <memmove>
 800fcf4:	80c00217 	ldw	r3,8(r16)
 800fcf8:	81000017 	ldw	r4,0(r16)
 800fcfc:	98800217 	ldw	r2,8(r19)
 800fd00:	1ca5c83a 	sub	r18,r3,r18
 800fd04:	2589883a 	add	r4,r4,r22
 800fd08:	84800215 	stw	r18,8(r16)
 800fd0c:	81000015 	stw	r4,0(r16)
 800fd10:	1463c83a 	sub	r17,r2,r17
 800fd14:	9c400215 	stw	r17,8(r19)
 800fd18:	88001626 	beq	r17,zero,800fd74 <__ssprint_r+0x190>
 800fd1c:	bf000017 	ldw	fp,0(r23)
 800fd20:	bc400117 	ldw	r17,4(r23)
 800fd24:	bdc00204 	addi	r23,r23,8
 800fd28:	003fc206 	br	800fc34 <__alt_data_end+0xfc00fc34>
 800fd2c:	8825883a 	mov	r18,r17
 800fd30:	882d883a 	mov	r22,r17
 800fd34:	003fec06 	br	800fce8 <__alt_data_end+0xfc00fce8>
 800fd38:	800f3f00 	call	800f3f0 <_realloc_r>
 800fd3c:	102b883a 	mov	r21,r2
 800fd40:	103fe11e 	bne	r2,zero,800fcc8 <__alt_data_end+0xfc00fcc8>
 800fd44:	81400417 	ldw	r5,16(r16)
 800fd48:	a009883a 	mov	r4,r20
 800fd4c:	800d2e40 	call	800d2e4 <_free_r>
 800fd50:	80c0030b 	ldhu	r3,12(r16)
 800fd54:	00800304 	movi	r2,12
 800fd58:	a0800015 	stw	r2,0(r20)
 800fd5c:	18c01014 	ori	r3,r3,64
 800fd60:	80c0030d 	sth	r3,12(r16)
 800fd64:	00bfffc4 	movi	r2,-1
 800fd68:	98000215 	stw	zero,8(r19)
 800fd6c:	98000115 	stw	zero,4(r19)
 800fd70:	00000206 	br	800fd7c <__ssprint_r+0x198>
 800fd74:	98000115 	stw	zero,4(r19)
 800fd78:	0005883a 	mov	r2,zero
 800fd7c:	dfc00917 	ldw	ra,36(sp)
 800fd80:	df000817 	ldw	fp,32(sp)
 800fd84:	ddc00717 	ldw	r23,28(sp)
 800fd88:	dd800617 	ldw	r22,24(sp)
 800fd8c:	dd400517 	ldw	r21,20(sp)
 800fd90:	dd000417 	ldw	r20,16(sp)
 800fd94:	dcc00317 	ldw	r19,12(sp)
 800fd98:	dc800217 	ldw	r18,8(sp)
 800fd9c:	dc400117 	ldw	r17,4(sp)
 800fda0:	dc000017 	ldw	r16,0(sp)
 800fda4:	dec00a04 	addi	sp,sp,40
 800fda8:	f800283a 	ret

0800fdac <___svfiprintf_internal_r>:
 800fdac:	2880030b 	ldhu	r2,12(r5)
 800fdb0:	deffc804 	addi	sp,sp,-224
 800fdb4:	dd403315 	stw	r21,204(sp)
 800fdb8:	dfc03715 	stw	ra,220(sp)
 800fdbc:	df003615 	stw	fp,216(sp)
 800fdc0:	ddc03515 	stw	r23,212(sp)
 800fdc4:	dd803415 	stw	r22,208(sp)
 800fdc8:	dd003215 	stw	r20,200(sp)
 800fdcc:	dcc03115 	stw	r19,196(sp)
 800fdd0:	dc803015 	stw	r18,192(sp)
 800fdd4:	dc402f15 	stw	r17,188(sp)
 800fdd8:	dc002e15 	stw	r16,184(sp)
 800fddc:	d9402215 	stw	r5,136(sp)
 800fde0:	d9002915 	stw	r4,164(sp)
 800fde4:	1080200c 	andi	r2,r2,128
 800fde8:	d9c02415 	stw	r7,144(sp)
 800fdec:	302b883a 	mov	r21,r6
 800fdf0:	10000226 	beq	r2,zero,800fdfc <___svfiprintf_internal_r+0x50>
 800fdf4:	28800417 	ldw	r2,16(r5)
 800fdf8:	10042526 	beq	r2,zero,8010e90 <___svfiprintf_internal_r+0x10e4>
 800fdfc:	d8801a04 	addi	r2,sp,104
 800fe00:	d8c019c4 	addi	r3,sp,103
 800fe04:	dc402917 	ldw	r17,164(sp)
 800fe08:	04c200b4 	movhi	r19,2050
 800fe0c:	10c9c83a 	sub	r4,r2,r3
 800fe10:	9cca5b04 	addi	r19,r19,10604
 800fe14:	d8801e15 	stw	r2,120(sp)
 800fe18:	d8c01f15 	stw	r3,124(sp)
 800fe1c:	dec01a15 	stw	sp,104(sp)
 800fe20:	d8001c15 	stw	zero,112(sp)
 800fe24:	d8001b15 	stw	zero,108(sp)
 800fe28:	d8002a15 	stw	zero,168(sp)
 800fe2c:	d8002615 	stw	zero,152(sp)
 800fe30:	d811883a 	mov	r8,sp
 800fe34:	d9002c15 	stw	r4,176(sp)
 800fe38:	a8800007 	ldb	r2,0(r21)
 800fe3c:	1002af26 	beq	r2,zero,80108fc <___svfiprintf_internal_r+0xb50>
 800fe40:	01000944 	movi	r4,37
 800fe44:	1102ad26 	beq	r2,r4,80108fc <___svfiprintf_internal_r+0xb50>
 800fe48:	a805883a 	mov	r2,r21
 800fe4c:	00000106 	br	800fe54 <___svfiprintf_internal_r+0xa8>
 800fe50:	19000326 	beq	r3,r4,800fe60 <___svfiprintf_internal_r+0xb4>
 800fe54:	10800044 	addi	r2,r2,1
 800fe58:	10c00007 	ldb	r3,0(r2)
 800fe5c:	183ffc1e 	bne	r3,zero,800fe50 <__alt_data_end+0xfc00fe50>
 800fe60:	1561c83a 	sub	r16,r2,r21
 800fe64:	1025883a 	mov	r18,r2
 800fe68:	80000e26 	beq	r16,zero,800fea4 <___svfiprintf_internal_r+0xf8>
 800fe6c:	d8c01c17 	ldw	r3,112(sp)
 800fe70:	d8801b17 	ldw	r2,108(sp)
 800fe74:	45400015 	stw	r21,0(r8)
 800fe78:	1c07883a 	add	r3,r3,r16
 800fe7c:	10800044 	addi	r2,r2,1
 800fe80:	d8c01c15 	stw	r3,112(sp)
 800fe84:	44000115 	stw	r16,4(r8)
 800fe88:	d8801b15 	stw	r2,108(sp)
 800fe8c:	00c001c4 	movi	r3,7
 800fe90:	18832616 	blt	r3,r2,8010b2c <___svfiprintf_internal_r+0xd80>
 800fe94:	42000204 	addi	r8,r8,8
 800fe98:	d9402617 	ldw	r5,152(sp)
 800fe9c:	2c0b883a 	add	r5,r5,r16
 800fea0:	d9402615 	stw	r5,152(sp)
 800fea4:	90800007 	ldb	r2,0(r18)
 800fea8:	1002b226 	beq	r2,zero,8010974 <___svfiprintf_internal_r+0xbc8>
 800feac:	00bfffc4 	movi	r2,-1
 800feb0:	95400044 	addi	r21,r18,1
 800feb4:	91800047 	ldb	r6,1(r18)
 800feb8:	d8001d85 	stb	zero,118(sp)
 800febc:	002d883a 	mov	r22,zero
 800fec0:	d8802015 	stw	r2,128(sp)
 800fec4:	d8002315 	stw	zero,140(sp)
 800fec8:	0021883a 	mov	r16,zero
 800fecc:	04801604 	movi	r18,88
 800fed0:	05000244 	movi	r20,9
 800fed4:	402f883a 	mov	r23,r8
 800fed8:	ad400044 	addi	r21,r21,1
 800fedc:	30bff804 	addi	r2,r6,-32
 800fee0:	9081ae36 	bltu	r18,r2,801059c <___svfiprintf_internal_r+0x7f0>
 800fee4:	100490ba 	slli	r2,r2,2
 800fee8:	00c20074 	movhi	r3,2049
 800feec:	18ffbf04 	addi	r3,r3,-260
 800fef0:	10c5883a 	add	r2,r2,r3
 800fef4:	10800017 	ldw	r2,0(r2)
 800fef8:	1000683a 	jmp	r2
 800fefc:	080100ac 	andhi	zero,at,1026
 800ff00:	0801059c 	xori	zero,at,1046
 800ff04:	0801059c 	xori	zero,at,1046
 800ff08:	080100a0 	cmpeqi	zero,at,1026
 800ff0c:	0801059c 	xori	zero,at,1046
 800ff10:	0801059c 	xori	zero,at,1046
 800ff14:	0801059c 	xori	zero,at,1046
 800ff18:	0801059c 	xori	zero,at,1046
 800ff1c:	0801059c 	xori	zero,at,1046
 800ff20:	0801059c 	xori	zero,at,1046
 800ff24:	08010060 	cmpeqi	zero,at,1025
 800ff28:	08010094 	ori	zero,at,1026
 800ff2c:	0801059c 	xori	zero,at,1046
 800ff30:	08010088 	cmpgei	zero,at,1026
 800ff34:	080105d0 	cmplti	zero,at,1047
 800ff38:	0801059c 	xori	zero,at,1046
 800ff3c:	080105c4 	addi	zero,at,1047
 800ff40:	08010558 	cmpnei	zero,at,1045
 800ff44:	08010558 	cmpnei	zero,at,1045
 800ff48:	08010558 	cmpnei	zero,at,1045
 800ff4c:	08010558 	cmpnei	zero,at,1045
 800ff50:	08010558 	cmpnei	zero,at,1045
 800ff54:	08010558 	cmpnei	zero,at,1045
 800ff58:	08010558 	cmpnei	zero,at,1045
 800ff5c:	08010558 	cmpnei	zero,at,1045
 800ff60:	08010558 	cmpnei	zero,at,1045
 800ff64:	0801059c 	xori	zero,at,1046
 800ff68:	0801059c 	xori	zero,at,1046
 800ff6c:	0801059c 	xori	zero,at,1046
 800ff70:	0801059c 	xori	zero,at,1046
 800ff74:	0801059c 	xori	zero,at,1046
 800ff78:	0801059c 	xori	zero,at,1046
 800ff7c:	0801059c 	xori	zero,at,1046
 800ff80:	0801059c 	xori	zero,at,1046
 800ff84:	0801059c 	xori	zero,at,1046
 800ff88:	0801059c 	xori	zero,at,1046
 800ff8c:	080104ec 	andhi	zero,at,1043
 800ff90:	0801059c 	xori	zero,at,1046
 800ff94:	0801059c 	xori	zero,at,1046
 800ff98:	0801059c 	xori	zero,at,1046
 800ff9c:	0801059c 	xori	zero,at,1046
 800ffa0:	0801059c 	xori	zero,at,1046
 800ffa4:	0801059c 	xori	zero,at,1046
 800ffa8:	0801059c 	xori	zero,at,1046
 800ffac:	0801059c 	xori	zero,at,1046
 800ffb0:	0801059c 	xori	zero,at,1046
 800ffb4:	0801059c 	xori	zero,at,1046
 800ffb8:	0801065c 	xori	zero,at,1049
 800ffbc:	0801059c 	xori	zero,at,1046
 800ffc0:	0801059c 	xori	zero,at,1046
 800ffc4:	0801059c 	xori	zero,at,1046
 800ffc8:	0801059c 	xori	zero,at,1046
 800ffcc:	0801059c 	xori	zero,at,1046
 800ffd0:	08010618 	cmpnei	zero,at,1048
 800ffd4:	0801059c 	xori	zero,at,1046
 800ffd8:	0801059c 	xori	zero,at,1046
 800ffdc:	080104a4 	muli	zero,at,1042
 800ffe0:	0801059c 	xori	zero,at,1046
 800ffe4:	0801059c 	xori	zero,at,1046
 800ffe8:	0801059c 	xori	zero,at,1046
 800ffec:	0801059c 	xori	zero,at,1046
 800fff0:	0801059c 	xori	zero,at,1046
 800fff4:	0801059c 	xori	zero,at,1046
 800fff8:	0801059c 	xori	zero,at,1046
 800fffc:	0801059c 	xori	zero,at,1046
 8010000:	0801059c 	xori	zero,at,1046
 8010004:	0801059c 	xori	zero,at,1046
 8010008:	0801036c 	andhi	zero,at,1037
 801000c:	08010310 	cmplti	zero,at,1036
 8010010:	0801059c 	xori	zero,at,1046
 8010014:	0801059c 	xori	zero,at,1046
 8010018:	0801059c 	xori	zero,at,1046
 801001c:	08010304 	addi	zero,at,1036
 8010020:	08010310 	cmplti	zero,at,1036
 8010024:	0801059c 	xori	zero,at,1046
 8010028:	0801059c 	xori	zero,at,1046
 801002c:	08010354 	ori	zero,at,1037
 8010030:	0801059c 	xori	zero,at,1046
 8010034:	080102d0 	cmplti	zero,at,1035
 8010038:	080102a0 	cmpeqi	zero,at,1034
 801003c:	08010258 	cmpnei	zero,at,1033
 8010040:	0801024c 	andi	zero,at,1033
 8010044:	0801059c 	xori	zero,at,1046
 8010048:	080101e4 	muli	zero,at,1031
 801004c:	0801059c 	xori	zero,at,1046
 8010050:	08010114 	ori	zero,at,1028
 8010054:	0801059c 	xori	zero,at,1046
 8010058:	0801059c 	xori	zero,at,1046
 801005c:	080100c8 	cmpgei	zero,at,1027
 8010060:	d9402417 	ldw	r5,144(sp)
 8010064:	d8c02417 	ldw	r3,144(sp)
 8010068:	29400017 	ldw	r5,0(r5)
 801006c:	18800104 	addi	r2,r3,4
 8010070:	d9402315 	stw	r5,140(sp)
 8010074:	2802f70e 	bge	r5,zero,8010c54 <___svfiprintf_internal_r+0xea8>
 8010078:	d9002317 	ldw	r4,140(sp)
 801007c:	d8802415 	stw	r2,144(sp)
 8010080:	0109c83a 	sub	r4,zero,r4
 8010084:	d9002315 	stw	r4,140(sp)
 8010088:	84000114 	ori	r16,r16,4
 801008c:	a9800007 	ldb	r6,0(r21)
 8010090:	003f9106 	br	800fed8 <__alt_data_end+0xfc00fed8>
 8010094:	05800ac4 	movi	r22,43
 8010098:	a9800007 	ldb	r6,0(r21)
 801009c:	003f8e06 	br	800fed8 <__alt_data_end+0xfc00fed8>
 80100a0:	84000054 	ori	r16,r16,1
 80100a4:	a9800007 	ldb	r6,0(r21)
 80100a8:	003f8b06 	br	800fed8 <__alt_data_end+0xfc00fed8>
 80100ac:	b0803fcc 	andi	r2,r22,255
 80100b0:	1080201c 	xori	r2,r2,128
 80100b4:	10bfe004 	addi	r2,r2,-128
 80100b8:	1003221e 	bne	r2,zero,8010d44 <___svfiprintf_internal_r+0xf98>
 80100bc:	05800804 	movi	r22,32
 80100c0:	a9800007 	ldb	r6,0(r21)
 80100c4:	003f8406 	br	800fed8 <__alt_data_end+0xfc00fed8>
 80100c8:	014200b4 	movhi	r5,2050
 80100cc:	2949f204 	addi	r5,r5,10184
 80100d0:	d9402a15 	stw	r5,168(sp)
 80100d4:	dd801d85 	stb	r22,118(sp)
 80100d8:	80c0080c 	andi	r3,r16,32
 80100dc:	b811883a 	mov	r8,r23
 80100e0:	d8802417 	ldw	r2,144(sp)
 80100e4:	1800f726 	beq	r3,zero,80104c4 <___svfiprintf_internal_r+0x718>
 80100e8:	d8c02417 	ldw	r3,144(sp)
 80100ec:	14800017 	ldw	r18,0(r2)
 80100f0:	15800117 	ldw	r22,4(r2)
 80100f4:	18c00204 	addi	r3,r3,8
 80100f8:	d8c02415 	stw	r3,144(sp)
 80100fc:	8080004c 	andi	r2,r16,1
 8010100:	1002bd26 	beq	r2,zero,8010bf8 <___svfiprintf_internal_r+0xe4c>
 8010104:	9586b03a 	or	r3,r18,r22
 8010108:	1803081e 	bne	r3,zero,8010d2c <___svfiprintf_internal_r+0xf80>
 801010c:	00800084 	movi	r2,2
 8010110:	00000b06 	br	8010140 <___svfiprintf_internal_r+0x394>
 8010114:	80c0080c 	andi	r3,r16,32
 8010118:	b811883a 	mov	r8,r23
 801011c:	d8802417 	ldw	r2,144(sp)
 8010120:	18014226 	beq	r3,zero,801062c <___svfiprintf_internal_r+0x880>
 8010124:	d9402417 	ldw	r5,144(sp)
 8010128:	14800017 	ldw	r18,0(r2)
 801012c:	15800117 	ldw	r22,4(r2)
 8010130:	29400204 	addi	r5,r5,8
 8010134:	d9402415 	stw	r5,144(sp)
 8010138:	00800044 	movi	r2,1
 801013c:	9586b03a 	or	r3,r18,r22
 8010140:	dd002017 	ldw	r20,128(sp)
 8010144:	d8001d85 	stb	zero,118(sp)
 8010148:	002f883a 	mov	r23,zero
 801014c:	d9002017 	ldw	r4,128(sp)
 8010150:	20000216 	blt	r4,zero,801015c <___svfiprintf_internal_r+0x3b0>
 8010154:	013fdfc4 	movi	r4,-129
 8010158:	8120703a 	and	r16,r16,r4
 801015c:	1801e91e 	bne	r3,zero,8010904 <___svfiprintf_internal_r+0xb58>
 8010160:	d9402017 	ldw	r5,128(sp)
 8010164:	28025f26 	beq	r5,zero,8010ae4 <___svfiprintf_internal_r+0xd38>
 8010168:	10803fcc 	andi	r2,r2,255
 801016c:	00c00044 	movi	r3,1
 8010170:	10c2b226 	beq	r2,r3,8010c3c <___svfiprintf_internal_r+0xe90>
 8010174:	00c00084 	movi	r3,2
 8010178:	10c27c26 	beq	r2,r3,8010b6c <___svfiprintf_internal_r+0xdc0>
 801017c:	d8c01a04 	addi	r3,sp,104
 8010180:	9008d0fa 	srli	r4,r18,3
 8010184:	b00a977a 	slli	r5,r22,29
 8010188:	b02cd0fa 	srli	r22,r22,3
 801018c:	948001cc 	andi	r18,r18,7
 8010190:	90800c04 	addi	r2,r18,48
 8010194:	18ffffc4 	addi	r3,r3,-1
 8010198:	2924b03a 	or	r18,r5,r4
 801019c:	18800005 	stb	r2,0(r3)
 80101a0:	9588b03a 	or	r4,r18,r22
 80101a4:	203ff61e 	bne	r4,zero,8010180 <__alt_data_end+0xfc010180>
 80101a8:	8100004c 	andi	r4,r16,1
 80101ac:	d8c02715 	stw	r3,156(sp)
 80101b0:	20029d26 	beq	r4,zero,8010c28 <___svfiprintf_internal_r+0xe7c>
 80101b4:	10803fcc 	andi	r2,r2,255
 80101b8:	1080201c 	xori	r2,r2,128
 80101bc:	10bfe004 	addi	r2,r2,-128
 80101c0:	01000c04 	movi	r4,48
 80101c4:	11031826 	beq	r2,r4,8010e28 <___svfiprintf_internal_r+0x107c>
 80101c8:	d9402717 	ldw	r5,156(sp)
 80101cc:	d8801e17 	ldw	r2,120(sp)
 80101d0:	193fffc5 	stb	r4,-1(r3)
 80101d4:	297fffc4 	addi	r5,r5,-1
 80101d8:	d9402715 	stw	r5,156(sp)
 80101dc:	1169c83a 	sub	r20,r2,r5
 80101e0:	00024606 	br	8010afc <___svfiprintf_internal_r+0xd50>
 80101e4:	d9402417 	ldw	r5,144(sp)
 80101e8:	d8802417 	ldw	r2,144(sp)
 80101ec:	d8001d85 	stb	zero,118(sp)
 80101f0:	29400017 	ldw	r5,0(r5)
 80101f4:	b811883a 	mov	r8,r23
 80101f8:	15800104 	addi	r22,r2,4
 80101fc:	d9402715 	stw	r5,156(sp)
 8010200:	28031826 	beq	r5,zero,8010e64 <___svfiprintf_internal_r+0x10b8>
 8010204:	d9002017 	ldw	r4,128(sp)
 8010208:	20030b16 	blt	r4,zero,8010e38 <___svfiprintf_internal_r+0x108c>
 801020c:	d9002717 	ldw	r4,156(sp)
 8010210:	d9802017 	ldw	r6,128(sp)
 8010214:	000b883a 	mov	r5,zero
 8010218:	ddc02d15 	stw	r23,180(sp)
 801021c:	800ded80 	call	800ded8 <memchr>
 8010220:	da002d17 	ldw	r8,180(sp)
 8010224:	10033926 	beq	r2,zero,8010f0c <___svfiprintf_internal_r+0x1160>
 8010228:	d8c02717 	ldw	r3,156(sp)
 801022c:	d9002017 	ldw	r4,128(sp)
 8010230:	10e9c83a 	sub	r20,r2,r3
 8010234:	2500010e 	bge	r4,r20,801023c <___svfiprintf_internal_r+0x490>
 8010238:	2029883a 	mov	r20,r4
 801023c:	ddc01d83 	ldbu	r23,118(sp)
 8010240:	dd802415 	stw	r22,144(sp)
 8010244:	d8002015 	stw	zero,128(sp)
 8010248:	00022c06 	br	8010afc <___svfiprintf_internal_r+0xd50>
 801024c:	84000814 	ori	r16,r16,32
 8010250:	a9800007 	ldb	r6,0(r21)
 8010254:	003f2006 	br	800fed8 <__alt_data_end+0xfc00fed8>
 8010258:	d8802417 	ldw	r2,144(sp)
 801025c:	d8c02417 	ldw	r3,144(sp)
 8010260:	010200b4 	movhi	r4,2050
 8010264:	14800017 	ldw	r18,0(r2)
 8010268:	00800c04 	movi	r2,48
 801026c:	18c00104 	addi	r3,r3,4
 8010270:	d8801d05 	stb	r2,116(sp)
 8010274:	2109f204 	addi	r4,r4,10184
 8010278:	00801e04 	movi	r2,120
 801027c:	d8801d45 	stb	r2,117(sp)
 8010280:	d8c02415 	stw	r3,144(sp)
 8010284:	b811883a 	mov	r8,r23
 8010288:	002d883a 	mov	r22,zero
 801028c:	84000094 	ori	r16,r16,2
 8010290:	d9002a15 	stw	r4,168(sp)
 8010294:	00800084 	movi	r2,2
 8010298:	9007883a 	mov	r3,r18
 801029c:	003fa806 	br	8010140 <__alt_data_end+0xfc010140>
 80102a0:	80c0080c 	andi	r3,r16,32
 80102a4:	b811883a 	mov	r8,r23
 80102a8:	d8802417 	ldw	r2,144(sp)
 80102ac:	1800f026 	beq	r3,zero,8010670 <___svfiprintf_internal_r+0x8c4>
 80102b0:	14800017 	ldw	r18,0(r2)
 80102b4:	15800117 	ldw	r22,4(r2)
 80102b8:	d8802417 	ldw	r2,144(sp)
 80102bc:	9586b03a 	or	r3,r18,r22
 80102c0:	10800204 	addi	r2,r2,8
 80102c4:	d8802415 	stw	r2,144(sp)
 80102c8:	0005883a 	mov	r2,zero
 80102cc:	003f9c06 	br	8010140 <__alt_data_end+0xfc010140>
 80102d0:	dd801d85 	stb	r22,118(sp)
 80102d4:	8080080c 	andi	r2,r16,32
 80102d8:	b811883a 	mov	r8,r23
 80102dc:	10028a1e 	bne	r2,zero,8010d08 <___svfiprintf_internal_r+0xf5c>
 80102e0:	8080040c 	andi	r2,r16,16
 80102e4:	1002c726 	beq	r2,zero,8010e04 <___svfiprintf_internal_r+0x1058>
 80102e8:	d8c02417 	ldw	r3,144(sp)
 80102ec:	d9002617 	ldw	r4,152(sp)
 80102f0:	18800017 	ldw	r2,0(r3)
 80102f4:	18c00104 	addi	r3,r3,4
 80102f8:	d8c02415 	stw	r3,144(sp)
 80102fc:	11000015 	stw	r4,0(r2)
 8010300:	003ecd06 	br	800fe38 <__alt_data_end+0xfc00fe38>
 8010304:	84001014 	ori	r16,r16,64
 8010308:	a9800007 	ldb	r6,0(r21)
 801030c:	003ef206 	br	800fed8 <__alt_data_end+0xfc00fed8>
 8010310:	dd801d85 	stb	r22,118(sp)
 8010314:	8080080c 	andi	r2,r16,32
 8010318:	b811883a 	mov	r8,r23
 801031c:	d8c02417 	ldw	r3,144(sp)
 8010320:	10007826 	beq	r2,zero,8010504 <___svfiprintf_internal_r+0x758>
 8010324:	d9002417 	ldw	r4,144(sp)
 8010328:	18800117 	ldw	r2,4(r3)
 801032c:	1c800017 	ldw	r18,0(r3)
 8010330:	21000204 	addi	r4,r4,8
 8010334:	d9002415 	stw	r4,144(sp)
 8010338:	102d883a 	mov	r22,r2
 801033c:	10007c16 	blt	r2,zero,8010530 <___svfiprintf_internal_r+0x784>
 8010340:	ddc01d83 	ldbu	r23,118(sp)
 8010344:	dd002017 	ldw	r20,128(sp)
 8010348:	00800044 	movi	r2,1
 801034c:	9586b03a 	or	r3,r18,r22
 8010350:	003f7e06 	br	801014c <__alt_data_end+0xfc01014c>
 8010354:	a9800007 	ldb	r6,0(r21)
 8010358:	01001b04 	movi	r4,108
 801035c:	a805883a 	mov	r2,r21
 8010360:	31027a26 	beq	r6,r4,8010d4c <___svfiprintf_internal_r+0xfa0>
 8010364:	84000414 	ori	r16,r16,16
 8010368:	003edb06 	br	800fed8 <__alt_data_end+0xfc00fed8>
 801036c:	d9402417 	ldw	r5,144(sp)
 8010370:	04800044 	movi	r18,1
 8010374:	d8c01004 	addi	r3,sp,64
 8010378:	28800017 	ldw	r2,0(r5)
 801037c:	29400104 	addi	r5,r5,4
 8010380:	b811883a 	mov	r8,r23
 8010384:	d8001d85 	stb	zero,118(sp)
 8010388:	d8801005 	stb	r2,64(sp)
 801038c:	d9402415 	stw	r5,144(sp)
 8010390:	9029883a 	mov	r20,r18
 8010394:	d8c02715 	stw	r3,156(sp)
 8010398:	d8002015 	stw	zero,128(sp)
 801039c:	80c0008c 	andi	r3,r16,2
 80103a0:	d8c02115 	stw	r3,132(sp)
 80103a4:	18000126 	beq	r3,zero,80103ac <___svfiprintf_internal_r+0x600>
 80103a8:	94800084 	addi	r18,r18,2
 80103ac:	80c0210c 	andi	r3,r16,132
 80103b0:	d8c02515 	stw	r3,148(sp)
 80103b4:	1800ba1e 	bne	r3,zero,80106a0 <___svfiprintf_internal_r+0x8f4>
 80103b8:	d9002317 	ldw	r4,140(sp)
 80103bc:	24b9c83a 	sub	fp,r4,r18
 80103c0:	0700b70e 	bge	zero,fp,80106a0 <___svfiprintf_internal_r+0x8f4>
 80103c4:	02400404 	movi	r9,16
 80103c8:	d8c01c17 	ldw	r3,112(sp)
 80103cc:	d8801b17 	ldw	r2,108(sp)
 80103d0:	4f02c00e 	bge	r9,fp,8010ed4 <___svfiprintf_internal_r+0x1128>
 80103d4:	010200b4 	movhi	r4,2050
 80103d8:	210a5f04 	addi	r4,r4,10620
 80103dc:	d9002815 	stw	r4,160(sp)
 80103e0:	a809883a 	mov	r4,r21
 80103e4:	dc002b15 	stw	r16,172(sp)
 80103e8:	a02b883a 	mov	r21,r20
 80103ec:	482f883a 	mov	r23,r9
 80103f0:	9029883a 	mov	r20,r18
 80103f4:	058001c4 	movi	r22,7
 80103f8:	e025883a 	mov	r18,fp
 80103fc:	dc002217 	ldw	r16,136(sp)
 8010400:	2039883a 	mov	fp,r4
 8010404:	00000306 	br	8010414 <___svfiprintf_internal_r+0x668>
 8010408:	94bffc04 	addi	r18,r18,-16
 801040c:	42000204 	addi	r8,r8,8
 8010410:	bc80130e 	bge	r23,r18,8010460 <___svfiprintf_internal_r+0x6b4>
 8010414:	014200b4 	movhi	r5,2050
 8010418:	18c00404 	addi	r3,r3,16
 801041c:	10800044 	addi	r2,r2,1
 8010420:	294a5f04 	addi	r5,r5,10620
 8010424:	41400015 	stw	r5,0(r8)
 8010428:	45c00115 	stw	r23,4(r8)
 801042c:	d8c01c15 	stw	r3,112(sp)
 8010430:	d8801b15 	stw	r2,108(sp)
 8010434:	b0bff40e 	bge	r22,r2,8010408 <__alt_data_end+0xfc010408>
 8010438:	8809883a 	mov	r4,r17
 801043c:	800b883a 	mov	r5,r16
 8010440:	d9801a04 	addi	r6,sp,104
 8010444:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010448:	1001501e 	bne	r2,zero,801098c <___svfiprintf_internal_r+0xbe0>
 801044c:	94bffc04 	addi	r18,r18,-16
 8010450:	d8c01c17 	ldw	r3,112(sp)
 8010454:	d8801b17 	ldw	r2,108(sp)
 8010458:	d811883a 	mov	r8,sp
 801045c:	bcbfed16 	blt	r23,r18,8010414 <__alt_data_end+0xfc010414>
 8010460:	dc002b17 	ldw	r16,172(sp)
 8010464:	e009883a 	mov	r4,fp
 8010468:	9039883a 	mov	fp,r18
 801046c:	a025883a 	mov	r18,r20
 8010470:	a829883a 	mov	r20,r21
 8010474:	202b883a 	mov	r21,r4
 8010478:	d9002817 	ldw	r4,160(sp)
 801047c:	e0c7883a 	add	r3,fp,r3
 8010480:	10800044 	addi	r2,r2,1
 8010484:	41000015 	stw	r4,0(r8)
 8010488:	47000115 	stw	fp,4(r8)
 801048c:	d8c01c15 	stw	r3,112(sp)
 8010490:	d8801b15 	stw	r2,108(sp)
 8010494:	010001c4 	movi	r4,7
 8010498:	2081da16 	blt	r4,r2,8010c04 <___svfiprintf_internal_r+0xe58>
 801049c:	42000204 	addi	r8,r8,8
 80104a0:	00008106 	br	80106a8 <___svfiprintf_internal_r+0x8fc>
 80104a4:	010200b4 	movhi	r4,2050
 80104a8:	2109ed04 	addi	r4,r4,10164
 80104ac:	dd801d85 	stb	r22,118(sp)
 80104b0:	d9002a15 	stw	r4,168(sp)
 80104b4:	80c0080c 	andi	r3,r16,32
 80104b8:	b811883a 	mov	r8,r23
 80104bc:	d8802417 	ldw	r2,144(sp)
 80104c0:	183f091e 	bne	r3,zero,80100e8 <__alt_data_end+0xfc0100e8>
 80104c4:	80c0040c 	andi	r3,r16,16
 80104c8:	1801f21e 	bne	r3,zero,8010c94 <___svfiprintf_internal_r+0xee8>
 80104cc:	80c0100c 	andi	r3,r16,64
 80104d0:	18024626 	beq	r3,zero,8010dec <___svfiprintf_internal_r+0x1040>
 80104d4:	d9402417 	ldw	r5,144(sp)
 80104d8:	1480000b 	ldhu	r18,0(r2)
 80104dc:	002d883a 	mov	r22,zero
 80104e0:	29400104 	addi	r5,r5,4
 80104e4:	d9402415 	stw	r5,144(sp)
 80104e8:	003f0406 	br	80100fc <__alt_data_end+0xfc0100fc>
 80104ec:	84000414 	ori	r16,r16,16
 80104f0:	dd801d85 	stb	r22,118(sp)
 80104f4:	8080080c 	andi	r2,r16,32
 80104f8:	b811883a 	mov	r8,r23
 80104fc:	d8c02417 	ldw	r3,144(sp)
 8010500:	103f881e 	bne	r2,zero,8010324 <__alt_data_end+0xfc010324>
 8010504:	8080040c 	andi	r2,r16,16
 8010508:	1001f81e 	bne	r2,zero,8010cec <___svfiprintf_internal_r+0xf40>
 801050c:	8080100c 	andi	r2,r16,64
 8010510:	10021f26 	beq	r2,zero,8010d90 <___svfiprintf_internal_r+0xfe4>
 8010514:	1c80000f 	ldh	r18,0(r3)
 8010518:	d8802417 	ldw	r2,144(sp)
 801051c:	902dd7fa 	srai	r22,r18,31
 8010520:	10800104 	addi	r2,r2,4
 8010524:	d8802415 	stw	r2,144(sp)
 8010528:	b005883a 	mov	r2,r22
 801052c:	103f840e 	bge	r2,zero,8010340 <__alt_data_end+0xfc010340>
 8010530:	04a5c83a 	sub	r18,zero,r18
 8010534:	9004c03a 	cmpne	r2,r18,zero
 8010538:	05adc83a 	sub	r22,zero,r22
 801053c:	b0adc83a 	sub	r22,r22,r2
 8010540:	05c00b44 	movi	r23,45
 8010544:	ddc01d85 	stb	r23,118(sp)
 8010548:	dd002017 	ldw	r20,128(sp)
 801054c:	00800044 	movi	r2,1
 8010550:	9586b03a 	or	r3,r18,r22
 8010554:	003efd06 	br	801014c <__alt_data_end+0xfc01014c>
 8010558:	dc002115 	stw	r16,132(sp)
 801055c:	d8002315 	stw	zero,140(sp)
 8010560:	373ff404 	addi	fp,r6,-48
 8010564:	0009883a 	mov	r4,zero
 8010568:	a821883a 	mov	r16,r21
 801056c:	01400284 	movi	r5,10
 8010570:	80040900 	call	8004090 <__mulsi3>
 8010574:	81800007 	ldb	r6,0(r16)
 8010578:	1709883a 	add	r4,r2,fp
 801057c:	ad400044 	addi	r21,r21,1
 8010580:	373ff404 	addi	fp,r6,-48
 8010584:	a821883a 	mov	r16,r21
 8010588:	a73ff82e 	bgeu	r20,fp,801056c <__alt_data_end+0xfc01056c>
 801058c:	d9002315 	stw	r4,140(sp)
 8010590:	30bff804 	addi	r2,r6,-32
 8010594:	dc002117 	ldw	r16,132(sp)
 8010598:	90be522e 	bgeu	r18,r2,800fee4 <__alt_data_end+0xfc00fee4>
 801059c:	dd801d85 	stb	r22,118(sp)
 80105a0:	b811883a 	mov	r8,r23
 80105a4:	3000f326 	beq	r6,zero,8010974 <___svfiprintf_internal_r+0xbc8>
 80105a8:	04800044 	movi	r18,1
 80105ac:	d8c01004 	addi	r3,sp,64
 80105b0:	d9801005 	stb	r6,64(sp)
 80105b4:	d8001d85 	stb	zero,118(sp)
 80105b8:	9029883a 	mov	r20,r18
 80105bc:	d8c02715 	stw	r3,156(sp)
 80105c0:	003f7506 	br	8010398 <__alt_data_end+0xfc010398>
 80105c4:	84002014 	ori	r16,r16,128
 80105c8:	a9800007 	ldb	r6,0(r21)
 80105cc:	003e4206 	br	800fed8 <__alt_data_end+0xfc00fed8>
 80105d0:	a9800007 	ldb	r6,0(r21)
 80105d4:	01400a84 	movi	r5,42
 80105d8:	a8800044 	addi	r2,r21,1
 80105dc:	31425226 	beq	r6,r5,8010f28 <___svfiprintf_internal_r+0x117c>
 80105e0:	373ff404 	addi	fp,r6,-48
 80105e4:	102b883a 	mov	r21,r2
 80105e8:	0009883a 	mov	r4,zero
 80105ec:	a7024536 	bltu	r20,fp,8010f04 <___svfiprintf_internal_r+0x1158>
 80105f0:	01400284 	movi	r5,10
 80105f4:	80040900 	call	8004090 <__mulsi3>
 80105f8:	a9800007 	ldb	r6,0(r21)
 80105fc:	e089883a 	add	r4,fp,r2
 8010600:	ad400044 	addi	r21,r21,1
 8010604:	373ff404 	addi	fp,r6,-48
 8010608:	a73ff92e 	bgeu	r20,fp,80105f0 <__alt_data_end+0xfc0105f0>
 801060c:	20021316 	blt	r4,zero,8010e5c <___svfiprintf_internal_r+0x10b0>
 8010610:	d9002015 	stw	r4,128(sp)
 8010614:	003e3106 	br	800fedc <__alt_data_end+0xfc00fedc>
 8010618:	84000414 	ori	r16,r16,16
 801061c:	80c0080c 	andi	r3,r16,32
 8010620:	b811883a 	mov	r8,r23
 8010624:	d8802417 	ldw	r2,144(sp)
 8010628:	183ebe1e 	bne	r3,zero,8010124 <__alt_data_end+0xfc010124>
 801062c:	80c0040c 	andi	r3,r16,16
 8010630:	18019e1e 	bne	r3,zero,8010cac <___svfiprintf_internal_r+0xf00>
 8010634:	80c0100c 	andi	r3,r16,64
 8010638:	1801dc26 	beq	r3,zero,8010dac <___svfiprintf_internal_r+0x1000>
 801063c:	d8c02417 	ldw	r3,144(sp)
 8010640:	1480000b 	ldhu	r18,0(r2)
 8010644:	002d883a 	mov	r22,zero
 8010648:	18c00104 	addi	r3,r3,4
 801064c:	d8c02415 	stw	r3,144(sp)
 8010650:	00800044 	movi	r2,1
 8010654:	9007883a 	mov	r3,r18
 8010658:	003eb906 	br	8010140 <__alt_data_end+0xfc010140>
 801065c:	84000414 	ori	r16,r16,16
 8010660:	80c0080c 	andi	r3,r16,32
 8010664:	b811883a 	mov	r8,r23
 8010668:	d8802417 	ldw	r2,144(sp)
 801066c:	183f101e 	bne	r3,zero,80102b0 <__alt_data_end+0xfc0102b0>
 8010670:	80c0040c 	andi	r3,r16,16
 8010674:	1801951e 	bne	r3,zero,8010ccc <___svfiprintf_internal_r+0xf20>
 8010678:	80c0100c 	andi	r3,r16,64
 801067c:	1801d326 	beq	r3,zero,8010dcc <___svfiprintf_internal_r+0x1020>
 8010680:	d9002417 	ldw	r4,144(sp)
 8010684:	1480000b 	ldhu	r18,0(r2)
 8010688:	002d883a 	mov	r22,zero
 801068c:	21000104 	addi	r4,r4,4
 8010690:	d9002415 	stw	r4,144(sp)
 8010694:	0005883a 	mov	r2,zero
 8010698:	9007883a 	mov	r3,r18
 801069c:	003ea806 	br	8010140 <__alt_data_end+0xfc010140>
 80106a0:	d8c01c17 	ldw	r3,112(sp)
 80106a4:	d8801b17 	ldw	r2,108(sp)
 80106a8:	d9001d87 	ldb	r4,118(sp)
 80106ac:	20000b26 	beq	r4,zero,80106dc <___svfiprintf_internal_r+0x930>
 80106b0:	d9001d84 	addi	r4,sp,118
 80106b4:	18c00044 	addi	r3,r3,1
 80106b8:	10800044 	addi	r2,r2,1
 80106bc:	41000015 	stw	r4,0(r8)
 80106c0:	01000044 	movi	r4,1
 80106c4:	41000115 	stw	r4,4(r8)
 80106c8:	d8c01c15 	stw	r3,112(sp)
 80106cc:	d8801b15 	stw	r2,108(sp)
 80106d0:	010001c4 	movi	r4,7
 80106d4:	20813616 	blt	r4,r2,8010bb0 <___svfiprintf_internal_r+0xe04>
 80106d8:	42000204 	addi	r8,r8,8
 80106dc:	d9402117 	ldw	r5,132(sp)
 80106e0:	28000b26 	beq	r5,zero,8010710 <___svfiprintf_internal_r+0x964>
 80106e4:	d9001d04 	addi	r4,sp,116
 80106e8:	18c00084 	addi	r3,r3,2
 80106ec:	10800044 	addi	r2,r2,1
 80106f0:	41000015 	stw	r4,0(r8)
 80106f4:	01000084 	movi	r4,2
 80106f8:	41000115 	stw	r4,4(r8)
 80106fc:	d8c01c15 	stw	r3,112(sp)
 8010700:	d8801b15 	stw	r2,108(sp)
 8010704:	010001c4 	movi	r4,7
 8010708:	20813216 	blt	r4,r2,8010bd4 <___svfiprintf_internal_r+0xe28>
 801070c:	42000204 	addi	r8,r8,8
 8010710:	d9402517 	ldw	r5,148(sp)
 8010714:	01002004 	movi	r4,128
 8010718:	2900ad26 	beq	r5,r4,80109d0 <___svfiprintf_internal_r+0xc24>
 801071c:	d9002017 	ldw	r4,128(sp)
 8010720:	252fc83a 	sub	r23,r4,r20
 8010724:	05c0330e 	bge	zero,r23,80107f4 <___svfiprintf_internal_r+0xa48>
 8010728:	01c00404 	movi	r7,16
 801072c:	3dc1940e 	bge	r7,r23,8010d80 <___svfiprintf_internal_r+0xfd4>
 8010730:	010200b4 	movhi	r4,2050
 8010734:	210a5b04 	addi	r4,r4,10604
 8010738:	d9002115 	stw	r4,132(sp)
 801073c:	a809883a 	mov	r4,r21
 8010740:	dc002015 	stw	r16,128(sp)
 8010744:	a02b883a 	mov	r21,r20
 8010748:	3839883a 	mov	fp,r7
 801074c:	9029883a 	mov	r20,r18
 8010750:	058001c4 	movi	r22,7
 8010754:	b825883a 	mov	r18,r23
 8010758:	dc002217 	ldw	r16,136(sp)
 801075c:	202f883a 	mov	r23,r4
 8010760:	00000306 	br	8010770 <___svfiprintf_internal_r+0x9c4>
 8010764:	94bffc04 	addi	r18,r18,-16
 8010768:	42000204 	addi	r8,r8,8
 801076c:	e480110e 	bge	fp,r18,80107b4 <___svfiprintf_internal_r+0xa08>
 8010770:	18c00404 	addi	r3,r3,16
 8010774:	10800044 	addi	r2,r2,1
 8010778:	44c00015 	stw	r19,0(r8)
 801077c:	47000115 	stw	fp,4(r8)
 8010780:	d8c01c15 	stw	r3,112(sp)
 8010784:	d8801b15 	stw	r2,108(sp)
 8010788:	b0bff60e 	bge	r22,r2,8010764 <__alt_data_end+0xfc010764>
 801078c:	8809883a 	mov	r4,r17
 8010790:	800b883a 	mov	r5,r16
 8010794:	d9801a04 	addi	r6,sp,104
 8010798:	800fbe40 	call	800fbe4 <__ssprint_r>
 801079c:	10007b1e 	bne	r2,zero,801098c <___svfiprintf_internal_r+0xbe0>
 80107a0:	94bffc04 	addi	r18,r18,-16
 80107a4:	d8c01c17 	ldw	r3,112(sp)
 80107a8:	d8801b17 	ldw	r2,108(sp)
 80107ac:	d811883a 	mov	r8,sp
 80107b0:	e4bfef16 	blt	fp,r18,8010770 <__alt_data_end+0xfc010770>
 80107b4:	dc002017 	ldw	r16,128(sp)
 80107b8:	b809883a 	mov	r4,r23
 80107bc:	902f883a 	mov	r23,r18
 80107c0:	a025883a 	mov	r18,r20
 80107c4:	a829883a 	mov	r20,r21
 80107c8:	202b883a 	mov	r21,r4
 80107cc:	d9402117 	ldw	r5,132(sp)
 80107d0:	1dc7883a 	add	r3,r3,r23
 80107d4:	10800044 	addi	r2,r2,1
 80107d8:	41400015 	stw	r5,0(r8)
 80107dc:	45c00115 	stw	r23,4(r8)
 80107e0:	d8c01c15 	stw	r3,112(sp)
 80107e4:	d8801b15 	stw	r2,108(sp)
 80107e8:	010001c4 	movi	r4,7
 80107ec:	2080d616 	blt	r4,r2,8010b48 <___svfiprintf_internal_r+0xd9c>
 80107f0:	42000204 	addi	r8,r8,8
 80107f4:	d9002717 	ldw	r4,156(sp)
 80107f8:	a0c7883a 	add	r3,r20,r3
 80107fc:	10800044 	addi	r2,r2,1
 8010800:	41000015 	stw	r4,0(r8)
 8010804:	45000115 	stw	r20,4(r8)
 8010808:	d8c01c15 	stw	r3,112(sp)
 801080c:	d8801b15 	stw	r2,108(sp)
 8010810:	010001c4 	movi	r4,7
 8010814:	2080a516 	blt	r4,r2,8010aac <___svfiprintf_internal_r+0xd00>
 8010818:	42000204 	addi	r8,r8,8
 801081c:	8400010c 	andi	r16,r16,4
 8010820:	80002b26 	beq	r16,zero,80108d0 <___svfiprintf_internal_r+0xb24>
 8010824:	d9402317 	ldw	r5,140(sp)
 8010828:	2ca1c83a 	sub	r16,r5,r18
 801082c:	0400280e 	bge	zero,r16,80108d0 <___svfiprintf_internal_r+0xb24>
 8010830:	05000404 	movi	r20,16
 8010834:	d8801b17 	ldw	r2,108(sp)
 8010838:	a401aa0e 	bge	r20,r16,8010ee4 <___svfiprintf_internal_r+0x1138>
 801083c:	014200b4 	movhi	r5,2050
 8010840:	294a5f04 	addi	r5,r5,10620
 8010844:	d9402815 	stw	r5,160(sp)
 8010848:	058001c4 	movi	r22,7
 801084c:	ddc02217 	ldw	r23,136(sp)
 8010850:	00000306 	br	8010860 <___svfiprintf_internal_r+0xab4>
 8010854:	843ffc04 	addi	r16,r16,-16
 8010858:	42000204 	addi	r8,r8,8
 801085c:	a400130e 	bge	r20,r16,80108ac <___svfiprintf_internal_r+0xb00>
 8010860:	010200b4 	movhi	r4,2050
 8010864:	18c00404 	addi	r3,r3,16
 8010868:	10800044 	addi	r2,r2,1
 801086c:	210a5f04 	addi	r4,r4,10620
 8010870:	41000015 	stw	r4,0(r8)
 8010874:	45000115 	stw	r20,4(r8)
 8010878:	d8c01c15 	stw	r3,112(sp)
 801087c:	d8801b15 	stw	r2,108(sp)
 8010880:	b0bff40e 	bge	r22,r2,8010854 <__alt_data_end+0xfc010854>
 8010884:	8809883a 	mov	r4,r17
 8010888:	b80b883a 	mov	r5,r23
 801088c:	d9801a04 	addi	r6,sp,104
 8010890:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010894:	10003d1e 	bne	r2,zero,801098c <___svfiprintf_internal_r+0xbe0>
 8010898:	843ffc04 	addi	r16,r16,-16
 801089c:	d8c01c17 	ldw	r3,112(sp)
 80108a0:	d8801b17 	ldw	r2,108(sp)
 80108a4:	d811883a 	mov	r8,sp
 80108a8:	a43fed16 	blt	r20,r16,8010860 <__alt_data_end+0xfc010860>
 80108ac:	d9402817 	ldw	r5,160(sp)
 80108b0:	1c07883a 	add	r3,r3,r16
 80108b4:	10800044 	addi	r2,r2,1
 80108b8:	41400015 	stw	r5,0(r8)
 80108bc:	44000115 	stw	r16,4(r8)
 80108c0:	d8c01c15 	stw	r3,112(sp)
 80108c4:	d8801b15 	stw	r2,108(sp)
 80108c8:	010001c4 	movi	r4,7
 80108cc:	2080e416 	blt	r4,r2,8010c60 <___svfiprintf_internal_r+0xeb4>
 80108d0:	d8802317 	ldw	r2,140(sp)
 80108d4:	9080010e 	bge	r18,r2,80108dc <___svfiprintf_internal_r+0xb30>
 80108d8:	1025883a 	mov	r18,r2
 80108dc:	d9002617 	ldw	r4,152(sp)
 80108e0:	2489883a 	add	r4,r4,r18
 80108e4:	d9002615 	stw	r4,152(sp)
 80108e8:	1800781e 	bne	r3,zero,8010acc <___svfiprintf_internal_r+0xd20>
 80108ec:	a8800007 	ldb	r2,0(r21)
 80108f0:	d8001b15 	stw	zero,108(sp)
 80108f4:	d811883a 	mov	r8,sp
 80108f8:	103d511e 	bne	r2,zero,800fe40 <__alt_data_end+0xfc00fe40>
 80108fc:	a825883a 	mov	r18,r21
 8010900:	003d6806 	br	800fea4 <__alt_data_end+0xfc00fea4>
 8010904:	10803fcc 	andi	r2,r2,255
 8010908:	00c00044 	movi	r3,1
 801090c:	10fe191e 	bne	r2,r3,8010174 <__alt_data_end+0xfc010174>
 8010910:	b000c826 	beq	r22,zero,8010c34 <___svfiprintf_internal_r+0xe88>
 8010914:	df001a04 	addi	fp,sp,104
 8010918:	4029883a 	mov	r20,r8
 801091c:	9009883a 	mov	r4,r18
 8010920:	b00b883a 	mov	r5,r22
 8010924:	01800284 	movi	r6,10
 8010928:	000f883a 	mov	r7,zero
 801092c:	80135700 	call	8013570 <__umoddi3>
 8010930:	10800c04 	addi	r2,r2,48
 8010934:	e73fffc4 	addi	fp,fp,-1
 8010938:	9009883a 	mov	r4,r18
 801093c:	b00b883a 	mov	r5,r22
 8010940:	01800284 	movi	r6,10
 8010944:	000f883a 	mov	r7,zero
 8010948:	e0800005 	stb	r2,0(fp)
 801094c:	8012f300 	call	8012f30 <__udivdi3>
 8010950:	1025883a 	mov	r18,r2
 8010954:	10c4b03a 	or	r2,r2,r3
 8010958:	182d883a 	mov	r22,r3
 801095c:	103fef1e 	bne	r2,zero,801091c <__alt_data_end+0xfc01091c>
 8010960:	d9001e17 	ldw	r4,120(sp)
 8010964:	a011883a 	mov	r8,r20
 8010968:	df002715 	stw	fp,156(sp)
 801096c:	2729c83a 	sub	r20,r4,fp
 8010970:	00006206 	br	8010afc <___svfiprintf_internal_r+0xd50>
 8010974:	d8801c17 	ldw	r2,112(sp)
 8010978:	10000426 	beq	r2,zero,801098c <___svfiprintf_internal_r+0xbe0>
 801097c:	d9002917 	ldw	r4,164(sp)
 8010980:	d9402217 	ldw	r5,136(sp)
 8010984:	d9801a04 	addi	r6,sp,104
 8010988:	800fbe40 	call	800fbe4 <__ssprint_r>
 801098c:	d9402217 	ldw	r5,136(sp)
 8010990:	2880030b 	ldhu	r2,12(r5)
 8010994:	1080100c 	andi	r2,r2,64
 8010998:	1000621e 	bne	r2,zero,8010b24 <___svfiprintf_internal_r+0xd78>
 801099c:	d8802617 	ldw	r2,152(sp)
 80109a0:	dfc03717 	ldw	ra,220(sp)
 80109a4:	df003617 	ldw	fp,216(sp)
 80109a8:	ddc03517 	ldw	r23,212(sp)
 80109ac:	dd803417 	ldw	r22,208(sp)
 80109b0:	dd403317 	ldw	r21,204(sp)
 80109b4:	dd003217 	ldw	r20,200(sp)
 80109b8:	dcc03117 	ldw	r19,196(sp)
 80109bc:	dc803017 	ldw	r18,192(sp)
 80109c0:	dc402f17 	ldw	r17,188(sp)
 80109c4:	dc002e17 	ldw	r16,184(sp)
 80109c8:	dec03804 	addi	sp,sp,224
 80109cc:	f800283a 	ret
 80109d0:	d9002317 	ldw	r4,140(sp)
 80109d4:	24afc83a 	sub	r23,r4,r18
 80109d8:	05ff500e 	bge	zero,r23,801071c <__alt_data_end+0xfc01071c>
 80109dc:	01c00404 	movi	r7,16
 80109e0:	3dc1440e 	bge	r7,r23,8010ef4 <___svfiprintf_internal_r+0x1148>
 80109e4:	010200b4 	movhi	r4,2050
 80109e8:	210a5b04 	addi	r4,r4,10604
 80109ec:	d9002115 	stw	r4,132(sp)
 80109f0:	a809883a 	mov	r4,r21
 80109f4:	dc002515 	stw	r16,148(sp)
 80109f8:	a02b883a 	mov	r21,r20
 80109fc:	3839883a 	mov	fp,r7
 8010a00:	9029883a 	mov	r20,r18
 8010a04:	058001c4 	movi	r22,7
 8010a08:	b825883a 	mov	r18,r23
 8010a0c:	dc002217 	ldw	r16,136(sp)
 8010a10:	202f883a 	mov	r23,r4
 8010a14:	00000306 	br	8010a24 <___svfiprintf_internal_r+0xc78>
 8010a18:	94bffc04 	addi	r18,r18,-16
 8010a1c:	42000204 	addi	r8,r8,8
 8010a20:	e480110e 	bge	fp,r18,8010a68 <___svfiprintf_internal_r+0xcbc>
 8010a24:	18c00404 	addi	r3,r3,16
 8010a28:	10800044 	addi	r2,r2,1
 8010a2c:	44c00015 	stw	r19,0(r8)
 8010a30:	47000115 	stw	fp,4(r8)
 8010a34:	d8c01c15 	stw	r3,112(sp)
 8010a38:	d8801b15 	stw	r2,108(sp)
 8010a3c:	b0bff60e 	bge	r22,r2,8010a18 <__alt_data_end+0xfc010a18>
 8010a40:	8809883a 	mov	r4,r17
 8010a44:	800b883a 	mov	r5,r16
 8010a48:	d9801a04 	addi	r6,sp,104
 8010a4c:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010a50:	103fce1e 	bne	r2,zero,801098c <__alt_data_end+0xfc01098c>
 8010a54:	94bffc04 	addi	r18,r18,-16
 8010a58:	d8c01c17 	ldw	r3,112(sp)
 8010a5c:	d8801b17 	ldw	r2,108(sp)
 8010a60:	d811883a 	mov	r8,sp
 8010a64:	e4bfef16 	blt	fp,r18,8010a24 <__alt_data_end+0xfc010a24>
 8010a68:	dc002517 	ldw	r16,148(sp)
 8010a6c:	b809883a 	mov	r4,r23
 8010a70:	902f883a 	mov	r23,r18
 8010a74:	a025883a 	mov	r18,r20
 8010a78:	a829883a 	mov	r20,r21
 8010a7c:	202b883a 	mov	r21,r4
 8010a80:	d9402117 	ldw	r5,132(sp)
 8010a84:	1dc7883a 	add	r3,r3,r23
 8010a88:	10800044 	addi	r2,r2,1
 8010a8c:	41400015 	stw	r5,0(r8)
 8010a90:	45c00115 	stw	r23,4(r8)
 8010a94:	d8c01c15 	stw	r3,112(sp)
 8010a98:	d8801b15 	stw	r2,108(sp)
 8010a9c:	010001c4 	movi	r4,7
 8010aa0:	2080ae16 	blt	r4,r2,8010d5c <___svfiprintf_internal_r+0xfb0>
 8010aa4:	42000204 	addi	r8,r8,8
 8010aa8:	003f1c06 	br	801071c <__alt_data_end+0xfc01071c>
 8010aac:	d9402217 	ldw	r5,136(sp)
 8010ab0:	8809883a 	mov	r4,r17
 8010ab4:	d9801a04 	addi	r6,sp,104
 8010ab8:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010abc:	103fb31e 	bne	r2,zero,801098c <__alt_data_end+0xfc01098c>
 8010ac0:	d8c01c17 	ldw	r3,112(sp)
 8010ac4:	d811883a 	mov	r8,sp
 8010ac8:	003f5406 	br	801081c <__alt_data_end+0xfc01081c>
 8010acc:	d9402217 	ldw	r5,136(sp)
 8010ad0:	8809883a 	mov	r4,r17
 8010ad4:	d9801a04 	addi	r6,sp,104
 8010ad8:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010adc:	103f8326 	beq	r2,zero,80108ec <__alt_data_end+0xfc0108ec>
 8010ae0:	003faa06 	br	801098c <__alt_data_end+0xfc01098c>
 8010ae4:	10803fcc 	andi	r2,r2,255
 8010ae8:	1000021e 	bne	r2,zero,8010af4 <___svfiprintf_internal_r+0xd48>
 8010aec:	8080004c 	andi	r2,r16,1
 8010af0:	1000621e 	bne	r2,zero,8010c7c <___svfiprintf_internal_r+0xed0>
 8010af4:	d8c01a04 	addi	r3,sp,104
 8010af8:	d8c02715 	stw	r3,156(sp)
 8010afc:	d9002017 	ldw	r4,128(sp)
 8010b00:	a025883a 	mov	r18,r20
 8010b04:	a100010e 	bge	r20,r4,8010b0c <___svfiprintf_internal_r+0xd60>
 8010b08:	2025883a 	mov	r18,r4
 8010b0c:	bdc03fcc 	andi	r23,r23,255
 8010b10:	bdc0201c 	xori	r23,r23,128
 8010b14:	bdffe004 	addi	r23,r23,-128
 8010b18:	b83e2026 	beq	r23,zero,801039c <__alt_data_end+0xfc01039c>
 8010b1c:	94800044 	addi	r18,r18,1
 8010b20:	003e1e06 	br	801039c <__alt_data_end+0xfc01039c>
 8010b24:	00bfffc4 	movi	r2,-1
 8010b28:	003f9d06 	br	80109a0 <__alt_data_end+0xfc0109a0>
 8010b2c:	d9402217 	ldw	r5,136(sp)
 8010b30:	8809883a 	mov	r4,r17
 8010b34:	d9801a04 	addi	r6,sp,104
 8010b38:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010b3c:	103f931e 	bne	r2,zero,801098c <__alt_data_end+0xfc01098c>
 8010b40:	d811883a 	mov	r8,sp
 8010b44:	003cd406 	br	800fe98 <__alt_data_end+0xfc00fe98>
 8010b48:	d9402217 	ldw	r5,136(sp)
 8010b4c:	8809883a 	mov	r4,r17
 8010b50:	d9801a04 	addi	r6,sp,104
 8010b54:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010b58:	103f8c1e 	bne	r2,zero,801098c <__alt_data_end+0xfc01098c>
 8010b5c:	d8c01c17 	ldw	r3,112(sp)
 8010b60:	d8801b17 	ldw	r2,108(sp)
 8010b64:	d811883a 	mov	r8,sp
 8010b68:	003f2206 	br	80107f4 <__alt_data_end+0xfc0107f4>
 8010b6c:	d9002a17 	ldw	r4,168(sp)
 8010b70:	df001a04 	addi	fp,sp,104
 8010b74:	908003cc 	andi	r2,r18,15
 8010b78:	b006973a 	slli	r3,r22,28
 8010b7c:	2085883a 	add	r2,r4,r2
 8010b80:	9024d13a 	srli	r18,r18,4
 8010b84:	10800003 	ldbu	r2,0(r2)
 8010b88:	b02cd13a 	srli	r22,r22,4
 8010b8c:	e73fffc4 	addi	fp,fp,-1
 8010b90:	1ca4b03a 	or	r18,r3,r18
 8010b94:	e0800005 	stb	r2,0(fp)
 8010b98:	9584b03a 	or	r2,r18,r22
 8010b9c:	103ff51e 	bne	r2,zero,8010b74 <__alt_data_end+0xfc010b74>
 8010ba0:	d9401e17 	ldw	r5,120(sp)
 8010ba4:	df002715 	stw	fp,156(sp)
 8010ba8:	2f29c83a 	sub	r20,r5,fp
 8010bac:	003fd306 	br	8010afc <__alt_data_end+0xfc010afc>
 8010bb0:	d9402217 	ldw	r5,136(sp)
 8010bb4:	8809883a 	mov	r4,r17
 8010bb8:	d9801a04 	addi	r6,sp,104
 8010bbc:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010bc0:	103f721e 	bne	r2,zero,801098c <__alt_data_end+0xfc01098c>
 8010bc4:	d8c01c17 	ldw	r3,112(sp)
 8010bc8:	d8801b17 	ldw	r2,108(sp)
 8010bcc:	d811883a 	mov	r8,sp
 8010bd0:	003ec206 	br	80106dc <__alt_data_end+0xfc0106dc>
 8010bd4:	d9402217 	ldw	r5,136(sp)
 8010bd8:	8809883a 	mov	r4,r17
 8010bdc:	d9801a04 	addi	r6,sp,104
 8010be0:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010be4:	103f691e 	bne	r2,zero,801098c <__alt_data_end+0xfc01098c>
 8010be8:	d8c01c17 	ldw	r3,112(sp)
 8010bec:	d8801b17 	ldw	r2,108(sp)
 8010bf0:	d811883a 	mov	r8,sp
 8010bf4:	003ec606 	br	8010710 <__alt_data_end+0xfc010710>
 8010bf8:	00800084 	movi	r2,2
 8010bfc:	9586b03a 	or	r3,r18,r22
 8010c00:	003d4f06 	br	8010140 <__alt_data_end+0xfc010140>
 8010c04:	d9402217 	ldw	r5,136(sp)
 8010c08:	8809883a 	mov	r4,r17
 8010c0c:	d9801a04 	addi	r6,sp,104
 8010c10:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010c14:	103f5d1e 	bne	r2,zero,801098c <__alt_data_end+0xfc01098c>
 8010c18:	d8c01c17 	ldw	r3,112(sp)
 8010c1c:	d8801b17 	ldw	r2,108(sp)
 8010c20:	d811883a 	mov	r8,sp
 8010c24:	003ea006 	br	80106a8 <__alt_data_end+0xfc0106a8>
 8010c28:	d8801e17 	ldw	r2,120(sp)
 8010c2c:	10e9c83a 	sub	r20,r2,r3
 8010c30:	003fb206 	br	8010afc <__alt_data_end+0xfc010afc>
 8010c34:	00800244 	movi	r2,9
 8010c38:	14bf3636 	bltu	r2,r18,8010914 <__alt_data_end+0xfc010914>
 8010c3c:	94800c04 	addi	r18,r18,48
 8010c40:	d8c019c4 	addi	r3,sp,103
 8010c44:	dc8019c5 	stb	r18,103(sp)
 8010c48:	dd002c17 	ldw	r20,176(sp)
 8010c4c:	d8c02715 	stw	r3,156(sp)
 8010c50:	003faa06 	br	8010afc <__alt_data_end+0xfc010afc>
 8010c54:	d8802415 	stw	r2,144(sp)
 8010c58:	a9800007 	ldb	r6,0(r21)
 8010c5c:	003c9e06 	br	800fed8 <__alt_data_end+0xfc00fed8>
 8010c60:	d9402217 	ldw	r5,136(sp)
 8010c64:	8809883a 	mov	r4,r17
 8010c68:	d9801a04 	addi	r6,sp,104
 8010c6c:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010c70:	103f461e 	bne	r2,zero,801098c <__alt_data_end+0xfc01098c>
 8010c74:	d8c01c17 	ldw	r3,112(sp)
 8010c78:	003f1506 	br	80108d0 <__alt_data_end+0xfc0108d0>
 8010c7c:	00800c04 	movi	r2,48
 8010c80:	d8c019c4 	addi	r3,sp,103
 8010c84:	d88019c5 	stb	r2,103(sp)
 8010c88:	dd002c17 	ldw	r20,176(sp)
 8010c8c:	d8c02715 	stw	r3,156(sp)
 8010c90:	003f9a06 	br	8010afc <__alt_data_end+0xfc010afc>
 8010c94:	d9002417 	ldw	r4,144(sp)
 8010c98:	14800017 	ldw	r18,0(r2)
 8010c9c:	002d883a 	mov	r22,zero
 8010ca0:	21000104 	addi	r4,r4,4
 8010ca4:	d9002415 	stw	r4,144(sp)
 8010ca8:	003d1406 	br	80100fc <__alt_data_end+0xfc0100fc>
 8010cac:	14800017 	ldw	r18,0(r2)
 8010cb0:	d8802417 	ldw	r2,144(sp)
 8010cb4:	002d883a 	mov	r22,zero
 8010cb8:	9007883a 	mov	r3,r18
 8010cbc:	10800104 	addi	r2,r2,4
 8010cc0:	d8802415 	stw	r2,144(sp)
 8010cc4:	00800044 	movi	r2,1
 8010cc8:	003d1d06 	br	8010140 <__alt_data_end+0xfc010140>
 8010ccc:	d8c02417 	ldw	r3,144(sp)
 8010cd0:	14800017 	ldw	r18,0(r2)
 8010cd4:	002d883a 	mov	r22,zero
 8010cd8:	18c00104 	addi	r3,r3,4
 8010cdc:	d8c02415 	stw	r3,144(sp)
 8010ce0:	0005883a 	mov	r2,zero
 8010ce4:	9007883a 	mov	r3,r18
 8010ce8:	003d1506 	br	8010140 <__alt_data_end+0xfc010140>
 8010cec:	1c800017 	ldw	r18,0(r3)
 8010cf0:	d9402417 	ldw	r5,144(sp)
 8010cf4:	902dd7fa 	srai	r22,r18,31
 8010cf8:	29400104 	addi	r5,r5,4
 8010cfc:	d9402415 	stw	r5,144(sp)
 8010d00:	b005883a 	mov	r2,r22
 8010d04:	003d8d06 	br	801033c <__alt_data_end+0xfc01033c>
 8010d08:	d9002417 	ldw	r4,144(sp)
 8010d0c:	d9402617 	ldw	r5,152(sp)
 8010d10:	20800017 	ldw	r2,0(r4)
 8010d14:	2807d7fa 	srai	r3,r5,31
 8010d18:	21000104 	addi	r4,r4,4
 8010d1c:	d9002415 	stw	r4,144(sp)
 8010d20:	11400015 	stw	r5,0(r2)
 8010d24:	10c00115 	stw	r3,4(r2)
 8010d28:	003c4306 	br	800fe38 <__alt_data_end+0xfc00fe38>
 8010d2c:	00800c04 	movi	r2,48
 8010d30:	d8801d05 	stb	r2,116(sp)
 8010d34:	d9801d45 	stb	r6,117(sp)
 8010d38:	84000094 	ori	r16,r16,2
 8010d3c:	00800084 	movi	r2,2
 8010d40:	003cff06 	br	8010140 <__alt_data_end+0xfc010140>
 8010d44:	a9800007 	ldb	r6,0(r21)
 8010d48:	003c6306 	br	800fed8 <__alt_data_end+0xfc00fed8>
 8010d4c:	ad400044 	addi	r21,r21,1
 8010d50:	84000814 	ori	r16,r16,32
 8010d54:	11800047 	ldb	r6,1(r2)
 8010d58:	003c5f06 	br	800fed8 <__alt_data_end+0xfc00fed8>
 8010d5c:	d9402217 	ldw	r5,136(sp)
 8010d60:	8809883a 	mov	r4,r17
 8010d64:	d9801a04 	addi	r6,sp,104
 8010d68:	800fbe40 	call	800fbe4 <__ssprint_r>
 8010d6c:	103f071e 	bne	r2,zero,801098c <__alt_data_end+0xfc01098c>
 8010d70:	d8c01c17 	ldw	r3,112(sp)
 8010d74:	d8801b17 	ldw	r2,108(sp)
 8010d78:	d811883a 	mov	r8,sp
 8010d7c:	003e6706 	br	801071c <__alt_data_end+0xfc01071c>
 8010d80:	014200b4 	movhi	r5,2050
 8010d84:	294a5b04 	addi	r5,r5,10604
 8010d88:	d9402115 	stw	r5,132(sp)
 8010d8c:	003e8f06 	br	80107cc <__alt_data_end+0xfc0107cc>
 8010d90:	1c800017 	ldw	r18,0(r3)
 8010d94:	d8c02417 	ldw	r3,144(sp)
 8010d98:	902dd7fa 	srai	r22,r18,31
 8010d9c:	18c00104 	addi	r3,r3,4
 8010da0:	d8c02415 	stw	r3,144(sp)
 8010da4:	b005883a 	mov	r2,r22
 8010da8:	003d6406 	br	801033c <__alt_data_end+0xfc01033c>
 8010dac:	d9002417 	ldw	r4,144(sp)
 8010db0:	14800017 	ldw	r18,0(r2)
 8010db4:	002d883a 	mov	r22,zero
 8010db8:	21000104 	addi	r4,r4,4
 8010dbc:	d9002415 	stw	r4,144(sp)
 8010dc0:	00800044 	movi	r2,1
 8010dc4:	9007883a 	mov	r3,r18
 8010dc8:	003cdd06 	br	8010140 <__alt_data_end+0xfc010140>
 8010dcc:	d9402417 	ldw	r5,144(sp)
 8010dd0:	14800017 	ldw	r18,0(r2)
 8010dd4:	002d883a 	mov	r22,zero
 8010dd8:	29400104 	addi	r5,r5,4
 8010ddc:	d9402415 	stw	r5,144(sp)
 8010de0:	0005883a 	mov	r2,zero
 8010de4:	9007883a 	mov	r3,r18
 8010de8:	003cd506 	br	8010140 <__alt_data_end+0xfc010140>
 8010dec:	14800017 	ldw	r18,0(r2)
 8010df0:	d8802417 	ldw	r2,144(sp)
 8010df4:	002d883a 	mov	r22,zero
 8010df8:	10800104 	addi	r2,r2,4
 8010dfc:	d8802415 	stw	r2,144(sp)
 8010e00:	003cbe06 	br	80100fc <__alt_data_end+0xfc0100fc>
 8010e04:	8400100c 	andi	r16,r16,64
 8010e08:	80002b26 	beq	r16,zero,8010eb8 <___svfiprintf_internal_r+0x110c>
 8010e0c:	d9402417 	ldw	r5,144(sp)
 8010e10:	d8c02617 	ldw	r3,152(sp)
 8010e14:	28800017 	ldw	r2,0(r5)
 8010e18:	29400104 	addi	r5,r5,4
 8010e1c:	d9402415 	stw	r5,144(sp)
 8010e20:	10c0000d 	sth	r3,0(r2)
 8010e24:	003c0406 	br	800fe38 <__alt_data_end+0xfc00fe38>
 8010e28:	d8c01e17 	ldw	r3,120(sp)
 8010e2c:	d9002717 	ldw	r4,156(sp)
 8010e30:	1929c83a 	sub	r20,r3,r4
 8010e34:	003f3106 	br	8010afc <__alt_data_end+0xfc010afc>
 8010e38:	d9002717 	ldw	r4,156(sp)
 8010e3c:	ddc02d15 	stw	r23,180(sp)
 8010e40:	8006e040 	call	8006e04 <strlen>
 8010e44:	1029883a 	mov	r20,r2
 8010e48:	ddc01d83 	ldbu	r23,118(sp)
 8010e4c:	dd802415 	stw	r22,144(sp)
 8010e50:	d8002015 	stw	zero,128(sp)
 8010e54:	da002d17 	ldw	r8,180(sp)
 8010e58:	003f2806 	br	8010afc <__alt_data_end+0xfc010afc>
 8010e5c:	013fffc4 	movi	r4,-1
 8010e60:	003deb06 	br	8010610 <__alt_data_end+0xfc010610>
 8010e64:	dd002017 	ldw	r20,128(sp)
 8010e68:	00800184 	movi	r2,6
 8010e6c:	1500012e 	bgeu	r2,r20,8010e74 <___svfiprintf_internal_r+0x10c8>
 8010e70:	1029883a 	mov	r20,r2
 8010e74:	a025883a 	mov	r18,r20
 8010e78:	a0002916 	blt	r20,zero,8010f20 <___svfiprintf_internal_r+0x1174>
 8010e7c:	00c200b4 	movhi	r3,2050
 8010e80:	18c9f704 	addi	r3,r3,10204
 8010e84:	dd802415 	stw	r22,144(sp)
 8010e88:	d8c02715 	stw	r3,156(sp)
 8010e8c:	003d4206 	br	8010398 <__alt_data_end+0xfc010398>
 8010e90:	04001004 	movi	r16,64
 8010e94:	800b883a 	mov	r5,r16
 8010e98:	8005e100 	call	8005e10 <_malloc_r>
 8010e9c:	d8c02217 	ldw	r3,136(sp)
 8010ea0:	18800015 	stw	r2,0(r3)
 8010ea4:	18800415 	stw	r2,16(r3)
 8010ea8:	10002b26 	beq	r2,zero,8010f58 <___svfiprintf_internal_r+0x11ac>
 8010eac:	d9402217 	ldw	r5,136(sp)
 8010eb0:	2c000515 	stw	r16,20(r5)
 8010eb4:	003bd106 	br	800fdfc <__alt_data_end+0xfc00fdfc>
 8010eb8:	d9002417 	ldw	r4,144(sp)
 8010ebc:	d9402617 	ldw	r5,152(sp)
 8010ec0:	20800017 	ldw	r2,0(r4)
 8010ec4:	21000104 	addi	r4,r4,4
 8010ec8:	d9002415 	stw	r4,144(sp)
 8010ecc:	11400015 	stw	r5,0(r2)
 8010ed0:	003bd906 	br	800fe38 <__alt_data_end+0xfc00fe38>
 8010ed4:	014200b4 	movhi	r5,2050
 8010ed8:	294a5f04 	addi	r5,r5,10620
 8010edc:	d9402815 	stw	r5,160(sp)
 8010ee0:	003d6506 	br	8010478 <__alt_data_end+0xfc010478>
 8010ee4:	010200b4 	movhi	r4,2050
 8010ee8:	210a5f04 	addi	r4,r4,10620
 8010eec:	d9002815 	stw	r4,160(sp)
 8010ef0:	003e6e06 	br	80108ac <__alt_data_end+0xfc0108ac>
 8010ef4:	014200b4 	movhi	r5,2050
 8010ef8:	294a5b04 	addi	r5,r5,10604
 8010efc:	d9402115 	stw	r5,132(sp)
 8010f00:	003edf06 	br	8010a80 <__alt_data_end+0xfc010a80>
 8010f04:	d8002015 	stw	zero,128(sp)
 8010f08:	003bf406 	br	800fedc <__alt_data_end+0xfc00fedc>
 8010f0c:	dd002017 	ldw	r20,128(sp)
 8010f10:	ddc01d83 	ldbu	r23,118(sp)
 8010f14:	dd802415 	stw	r22,144(sp)
 8010f18:	d8002015 	stw	zero,128(sp)
 8010f1c:	003ef706 	br	8010afc <__alt_data_end+0xfc010afc>
 8010f20:	0025883a 	mov	r18,zero
 8010f24:	003fd506 	br	8010e7c <__alt_data_end+0xfc010e7c>
 8010f28:	d8c02417 	ldw	r3,144(sp)
 8010f2c:	a809883a 	mov	r4,r21
 8010f30:	102b883a 	mov	r21,r2
 8010f34:	18c00017 	ldw	r3,0(r3)
 8010f38:	d8c02015 	stw	r3,128(sp)
 8010f3c:	d8c02417 	ldw	r3,144(sp)
 8010f40:	d8802017 	ldw	r2,128(sp)
 8010f44:	19400104 	addi	r5,r3,4
 8010f48:	d9402415 	stw	r5,144(sp)
 8010f4c:	10000716 	blt	r2,zero,8010f6c <___svfiprintf_internal_r+0x11c0>
 8010f50:	21800047 	ldb	r6,1(r4)
 8010f54:	003be006 	br	800fed8 <__alt_data_end+0xfc00fed8>
 8010f58:	d9002917 	ldw	r4,164(sp)
 8010f5c:	00800304 	movi	r2,12
 8010f60:	20800015 	stw	r2,0(r4)
 8010f64:	00bfffc4 	movi	r2,-1
 8010f68:	003e8d06 	br	80109a0 <__alt_data_end+0xfc0109a0>
 8010f6c:	00ffffc4 	movi	r3,-1
 8010f70:	d8c02015 	stw	r3,128(sp)
 8010f74:	21800047 	ldb	r6,1(r4)
 8010f78:	003bd706 	br	800fed8 <__alt_data_end+0xfc00fed8>

08010f7c <__sprint_r.part.0>:
 8010f7c:	28801917 	ldw	r2,100(r5)
 8010f80:	defff604 	addi	sp,sp,-40
 8010f84:	dd400515 	stw	r21,20(sp)
 8010f88:	dcc00315 	stw	r19,12(sp)
 8010f8c:	dfc00915 	stw	ra,36(sp)
 8010f90:	df000815 	stw	fp,32(sp)
 8010f94:	ddc00715 	stw	r23,28(sp)
 8010f98:	dd800615 	stw	r22,24(sp)
 8010f9c:	dd000415 	stw	r20,16(sp)
 8010fa0:	dc800215 	stw	r18,8(sp)
 8010fa4:	dc400115 	stw	r17,4(sp)
 8010fa8:	dc000015 	stw	r16,0(sp)
 8010fac:	1088000c 	andi	r2,r2,8192
 8010fb0:	2827883a 	mov	r19,r5
 8010fb4:	302b883a 	mov	r21,r6
 8010fb8:	10002d26 	beq	r2,zero,8011070 <__sprint_r.part.0+0xf4>
 8010fbc:	30800217 	ldw	r2,8(r6)
 8010fc0:	35800017 	ldw	r22,0(r6)
 8010fc4:	10002826 	beq	r2,zero,8011068 <__sprint_r.part.0+0xec>
 8010fc8:	2029883a 	mov	r20,r4
 8010fcc:	b5c00104 	addi	r23,r22,4
 8010fd0:	04bfffc4 	movi	r18,-1
 8010fd4:	bc400017 	ldw	r17,0(r23)
 8010fd8:	b4000017 	ldw	r16,0(r22)
 8010fdc:	0039883a 	mov	fp,zero
 8010fe0:	8822d0ba 	srli	r17,r17,2
 8010fe4:	04400316 	blt	zero,r17,8010ff4 <__sprint_r.part.0+0x78>
 8010fe8:	00001706 	br	8011048 <__sprint_r.part.0+0xcc>
 8010fec:	84000104 	addi	r16,r16,4
 8010ff0:	8f001526 	beq	r17,fp,8011048 <__sprint_r.part.0+0xcc>
 8010ff4:	81400017 	ldw	r5,0(r16)
 8010ff8:	a009883a 	mov	r4,r20
 8010ffc:	980d883a 	mov	r6,r19
 8011000:	80128e40 	call	80128e4 <_fputwc_r>
 8011004:	e7000044 	addi	fp,fp,1
 8011008:	14bff81e 	bne	r2,r18,8010fec <__alt_data_end+0xfc010fec>
 801100c:	9005883a 	mov	r2,r18
 8011010:	a8000215 	stw	zero,8(r21)
 8011014:	a8000115 	stw	zero,4(r21)
 8011018:	dfc00917 	ldw	ra,36(sp)
 801101c:	df000817 	ldw	fp,32(sp)
 8011020:	ddc00717 	ldw	r23,28(sp)
 8011024:	dd800617 	ldw	r22,24(sp)
 8011028:	dd400517 	ldw	r21,20(sp)
 801102c:	dd000417 	ldw	r20,16(sp)
 8011030:	dcc00317 	ldw	r19,12(sp)
 8011034:	dc800217 	ldw	r18,8(sp)
 8011038:	dc400117 	ldw	r17,4(sp)
 801103c:	dc000017 	ldw	r16,0(sp)
 8011040:	dec00a04 	addi	sp,sp,40
 8011044:	f800283a 	ret
 8011048:	a8c00217 	ldw	r3,8(r21)
 801104c:	8c63883a 	add	r17,r17,r17
 8011050:	8c63883a 	add	r17,r17,r17
 8011054:	1c45c83a 	sub	r2,r3,r17
 8011058:	a8800215 	stw	r2,8(r21)
 801105c:	b5800204 	addi	r22,r22,8
 8011060:	bdc00204 	addi	r23,r23,8
 8011064:	103fdb1e 	bne	r2,zero,8010fd4 <__alt_data_end+0xfc010fd4>
 8011068:	0005883a 	mov	r2,zero
 801106c:	003fe806 	br	8011010 <__alt_data_end+0xfc011010>
 8011070:	800d5d40 	call	800d5d4 <__sfvwrite_r>
 8011074:	003fe606 	br	8011010 <__alt_data_end+0xfc011010>

08011078 <__sprint_r>:
 8011078:	30c00217 	ldw	r3,8(r6)
 801107c:	18000126 	beq	r3,zero,8011084 <__sprint_r+0xc>
 8011080:	8010f7c1 	jmpi	8010f7c <__sprint_r.part.0>
 8011084:	30000115 	stw	zero,4(r6)
 8011088:	0005883a 	mov	r2,zero
 801108c:	f800283a 	ret

08011090 <___vfiprintf_internal_r>:
 8011090:	defeca04 	addi	sp,sp,-1240
 8011094:	dcc12f15 	stw	r19,1212(sp)
 8011098:	dfc13515 	stw	ra,1236(sp)
 801109c:	df013415 	stw	fp,1232(sp)
 80110a0:	ddc13315 	stw	r23,1228(sp)
 80110a4:	dd813215 	stw	r22,1224(sp)
 80110a8:	dd413115 	stw	r21,1220(sp)
 80110ac:	dd013015 	stw	r20,1216(sp)
 80110b0:	dc812e15 	stw	r18,1208(sp)
 80110b4:	dc412d15 	stw	r17,1204(sp)
 80110b8:	dc012c15 	stw	r16,1200(sp)
 80110bc:	d9012115 	stw	r4,1156(sp)
 80110c0:	d9412015 	stw	r5,1152(sp)
 80110c4:	d9c12315 	stw	r7,1164(sp)
 80110c8:	3027883a 	mov	r19,r6
 80110cc:	20000226 	beq	r4,zero,80110d8 <___vfiprintf_internal_r+0x48>
 80110d0:	20800e17 	ldw	r2,56(r4)
 80110d4:	1000f726 	beq	r2,zero,80114b4 <___vfiprintf_internal_r+0x424>
 80110d8:	d8812017 	ldw	r2,1152(sp)
 80110dc:	10c0030b 	ldhu	r3,12(r2)
 80110e0:	1908000c 	andi	r4,r3,8192
 80110e4:	1805883a 	mov	r2,r3
 80110e8:	2000081e 	bne	r4,zero,801110c <___vfiprintf_internal_r+0x7c>
 80110ec:	d9412017 	ldw	r5,1152(sp)
 80110f0:	18880014 	ori	r2,r3,8192
 80110f4:	00f7ffc4 	movi	r3,-8193
 80110f8:	29001917 	ldw	r4,100(r5)
 80110fc:	2880030d 	sth	r2,12(r5)
 8011100:	20c8703a 	and	r4,r4,r3
 8011104:	29001915 	stw	r4,100(r5)
 8011108:	1007883a 	mov	r3,r2
 801110c:	1100020c 	andi	r4,r2,8
 8011110:	2000a726 	beq	r4,zero,80113b0 <___vfiprintf_internal_r+0x320>
 8011114:	d9412017 	ldw	r5,1152(sp)
 8011118:	29000417 	ldw	r4,16(r5)
 801111c:	2000a426 	beq	r4,zero,80113b0 <___vfiprintf_internal_r+0x320>
 8011120:	1080068c 	andi	r2,r2,26
 8011124:	01000284 	movi	r4,10
 8011128:	1100ab26 	beq	r2,r4,80113d8 <___vfiprintf_internal_r+0x348>
 801112c:	d9010a04 	addi	r4,sp,1064
 8011130:	d94109c4 	addi	r5,sp,1063
 8011134:	070200b4 	movhi	fp,2050
 8011138:	044200b4 	movhi	r17,2050
 801113c:	2145c83a 	sub	r2,r4,r5
 8011140:	e70a6704 	addi	fp,fp,10652
 8011144:	8c4a6304 	addi	r17,r17,10636
 8011148:	d9011e15 	stw	r4,1144(sp)
 801114c:	d9411f15 	stw	r5,1148(sp)
 8011150:	dec11a15 	stw	sp,1128(sp)
 8011154:	d8011c15 	stw	zero,1136(sp)
 8011158:	d8011b15 	stw	zero,1132(sp)
 801115c:	d8012715 	stw	zero,1180(sp)
 8011160:	d8012515 	stw	zero,1172(sp)
 8011164:	d811883a 	mov	r8,sp
 8011168:	d8812815 	stw	r2,1184(sp)
 801116c:	982f883a 	mov	r23,r19
 8011170:	b8800007 	ldb	r2,0(r23)
 8011174:	1003b026 	beq	r2,zero,8012038 <___vfiprintf_internal_r+0xfa8>
 8011178:	01000944 	movi	r4,37
 801117c:	1103ae26 	beq	r2,r4,8012038 <___vfiprintf_internal_r+0xfa8>
 8011180:	b805883a 	mov	r2,r23
 8011184:	00000106 	br	801118c <___vfiprintf_internal_r+0xfc>
 8011188:	19000326 	beq	r3,r4,8011198 <___vfiprintf_internal_r+0x108>
 801118c:	10800044 	addi	r2,r2,1
 8011190:	10c00007 	ldb	r3,0(r2)
 8011194:	183ffc1e 	bne	r3,zero,8011188 <__alt_data_end+0xfc011188>
 8011198:	15e1c83a 	sub	r16,r2,r23
 801119c:	1029883a 	mov	r20,r2
 80111a0:	80001026 	beq	r16,zero,80111e4 <___vfiprintf_internal_r+0x154>
 80111a4:	d8c11c17 	ldw	r3,1136(sp)
 80111a8:	d8811b17 	ldw	r2,1132(sp)
 80111ac:	45c00015 	stw	r23,0(r8)
 80111b0:	80c7883a 	add	r3,r16,r3
 80111b4:	10800044 	addi	r2,r2,1
 80111b8:	44000115 	stw	r16,4(r8)
 80111bc:	d8c11c15 	stw	r3,1136(sp)
 80111c0:	d8811b15 	stw	r2,1132(sp)
 80111c4:	010001c4 	movi	r4,7
 80111c8:	2080740e 	bge	r4,r2,801139c <___vfiprintf_internal_r+0x30c>
 80111cc:	1803a71e 	bne	r3,zero,801206c <___vfiprintf_internal_r+0xfdc>
 80111d0:	d8c12517 	ldw	r3,1172(sp)
 80111d4:	d8011b15 	stw	zero,1132(sp)
 80111d8:	d811883a 	mov	r8,sp
 80111dc:	1c07883a 	add	r3,r3,r16
 80111e0:	d8c12515 	stw	r3,1172(sp)
 80111e4:	a0800007 	ldb	r2,0(r20)
 80111e8:	1002bf26 	beq	r2,zero,8011ce8 <___vfiprintf_internal_r+0xc58>
 80111ec:	a5c00044 	addi	r23,r20,1
 80111f0:	a1800047 	ldb	r6,1(r20)
 80111f4:	d8011d85 	stb	zero,1142(sp)
 80111f8:	d8012205 	stb	zero,1160(sp)
 80111fc:	043fffc4 	movi	r16,-1
 8011200:	d8012415 	stw	zero,1168(sp)
 8011204:	0025883a 	mov	r18,zero
 8011208:	05001604 	movi	r20,88
 801120c:	05400244 	movi	r21,9
 8011210:	4027883a 	mov	r19,r8
 8011214:	bdc00044 	addi	r23,r23,1
 8011218:	30bff804 	addi	r2,r6,-32
 801121c:	a0825636 	bltu	r20,r2,8011b78 <___vfiprintf_internal_r+0xae8>
 8011220:	100490ba 	slli	r2,r2,2
 8011224:	01020074 	movhi	r4,2049
 8011228:	21048e04 	addi	r4,r4,4664
 801122c:	1105883a 	add	r2,r2,r4
 8011230:	10800017 	ldw	r2,0(r2)
 8011234:	1000683a 	jmp	r2
 8011238:	08011b08 	cmpgei	zero,at,1132
 801123c:	08011b78 	rdprs	zero,at,1133
 8011240:	08011b78 	rdprs	zero,at,1133
 8011244:	08011b6c 	andhi	zero,at,1133
 8011248:	08011b78 	rdprs	zero,at,1133
 801124c:	08011b78 	rdprs	zero,at,1133
 8011250:	08011b78 	rdprs	zero,at,1133
 8011254:	08011b78 	rdprs	zero,at,1133
 8011258:	08011b78 	rdprs	zero,at,1133
 801125c:	08011b78 	rdprs	zero,at,1133
 8011260:	080118f8 	rdprs	zero,at,1123
 8011264:	08011b20 	cmpeqi	zero,at,1132
 8011268:	08011b78 	rdprs	zero,at,1133
 801126c:	080114cc 	andi	zero,at,1107
 8011270:	0801191c 	xori	zero,at,1124
 8011274:	08011b78 	rdprs	zero,at,1133
 8011278:	080114d8 	cmpnei	zero,at,1107
 801127c:	080114e4 	muli	zero,at,1107
 8011280:	080114e4 	muli	zero,at,1107
 8011284:	080114e4 	muli	zero,at,1107
 8011288:	080114e4 	muli	zero,at,1107
 801128c:	080114e4 	muli	zero,at,1107
 8011290:	080114e4 	muli	zero,at,1107
 8011294:	080114e4 	muli	zero,at,1107
 8011298:	080114e4 	muli	zero,at,1107
 801129c:	080114e4 	muli	zero,at,1107
 80112a0:	08011b78 	rdprs	zero,at,1133
 80112a4:	08011b78 	rdprs	zero,at,1133
 80112a8:	08011b78 	rdprs	zero,at,1133
 80112ac:	08011b78 	rdprs	zero,at,1133
 80112b0:	08011b78 	rdprs	zero,at,1133
 80112b4:	08011b78 	rdprs	zero,at,1133
 80112b8:	08011b78 	rdprs	zero,at,1133
 80112bc:	08011b78 	rdprs	zero,at,1133
 80112c0:	08011b78 	rdprs	zero,at,1133
 80112c4:	08011b78 	rdprs	zero,at,1133
 80112c8:	08011524 	muli	zero,at,1108
 80112cc:	08011b78 	rdprs	zero,at,1133
 80112d0:	08011b78 	rdprs	zero,at,1133
 80112d4:	08011b78 	rdprs	zero,at,1133
 80112d8:	08011b78 	rdprs	zero,at,1133
 80112dc:	08011b78 	rdprs	zero,at,1133
 80112e0:	08011b78 	rdprs	zero,at,1133
 80112e4:	08011b78 	rdprs	zero,at,1133
 80112e8:	08011b78 	rdprs	zero,at,1133
 80112ec:	08011b78 	rdprs	zero,at,1133
 80112f0:	08011b78 	rdprs	zero,at,1133
 80112f4:	08011814 	ori	zero,at,1120
 80112f8:	08011b78 	rdprs	zero,at,1133
 80112fc:	08011b78 	rdprs	zero,at,1133
 8011300:	08011b78 	rdprs	zero,at,1133
 8011304:	08011b78 	rdprs	zero,at,1133
 8011308:	08011b78 	rdprs	zero,at,1133
 801130c:	08011854 	ori	zero,at,1121
 8011310:	08011b78 	rdprs	zero,at,1133
 8011314:	08011b78 	rdprs	zero,at,1133
 8011318:	08011898 	cmpnei	zero,at,1122
 801131c:	08011b78 	rdprs	zero,at,1133
 8011320:	08011b78 	rdprs	zero,at,1133
 8011324:	08011b78 	rdprs	zero,at,1133
 8011328:	08011b78 	rdprs	zero,at,1133
 801132c:	08011b78 	rdprs	zero,at,1133
 8011330:	08011b78 	rdprs	zero,at,1133
 8011334:	08011b78 	rdprs	zero,at,1133
 8011338:	08011b78 	rdprs	zero,at,1133
 801133c:	08011b78 	rdprs	zero,at,1133
 8011340:	08011b78 	rdprs	zero,at,1133
 8011344:	080117e0 	cmpeqi	zero,at,1119
 8011348:	08011b30 	cmpltui	zero,at,1132
 801134c:	08011b78 	rdprs	zero,at,1133
 8011350:	08011b78 	rdprs	zero,at,1133
 8011354:	08011b78 	rdprs	zero,at,1133
 8011358:	0801196c 	andhi	zero,at,1125
 801135c:	08011b30 	cmpltui	zero,at,1132
 8011360:	08011b78 	rdprs	zero,at,1133
 8011364:	08011b78 	rdprs	zero,at,1133
 8011368:	08011884 	addi	zero,at,1122
 801136c:	08011b78 	rdprs	zero,at,1133
 8011370:	08011ad0 	cmplti	zero,at,1131
 8011374:	08011a58 	cmpnei	zero,at,1129
 8011378:	08011a8c 	andi	zero,at,1130
 801137c:	08011978 	rdprs	zero,at,1125
 8011380:	08011b78 	rdprs	zero,at,1133
 8011384:	08011984 	addi	zero,at,1126
 8011388:	08011b78 	rdprs	zero,at,1133
 801138c:	080119e0 	cmpeqi	zero,at,1127
 8011390:	08011b78 	rdprs	zero,at,1133
 8011394:	08011b78 	rdprs	zero,at,1133
 8011398:	08011a14 	ori	zero,at,1128
 801139c:	42000204 	addi	r8,r8,8
 80113a0:	d8c12517 	ldw	r3,1172(sp)
 80113a4:	1c07883a 	add	r3,r3,r16
 80113a8:	d8c12515 	stw	r3,1172(sp)
 80113ac:	003f8d06 	br	80111e4 <__alt_data_end+0xfc0111e4>
 80113b0:	d9012117 	ldw	r4,1156(sp)
 80113b4:	d9412017 	ldw	r5,1152(sp)
 80113b8:	800b1340 	call	800b134 <__swsetup_r>
 80113bc:	1000301e 	bne	r2,zero,8011480 <___vfiprintf_internal_r+0x3f0>
 80113c0:	d8812017 	ldw	r2,1152(sp)
 80113c4:	01000284 	movi	r4,10
 80113c8:	10c0030b 	ldhu	r3,12(r2)
 80113cc:	1805883a 	mov	r2,r3
 80113d0:	1080068c 	andi	r2,r2,26
 80113d4:	113f551e 	bne	r2,r4,801112c <__alt_data_end+0xfc01112c>
 80113d8:	d9012017 	ldw	r4,1152(sp)
 80113dc:	2080038b 	ldhu	r2,14(r4)
 80113e0:	113fffcc 	andi	r4,r2,65535
 80113e4:	2120001c 	xori	r4,r4,32768
 80113e8:	21200004 	addi	r4,r4,-32768
 80113ec:	203f4f16 	blt	r4,zero,801112c <__alt_data_end+0xfc01112c>
 80113f0:	d9412017 	ldw	r5,1152(sp)
 80113f4:	d9012117 	ldw	r4,1156(sp)
 80113f8:	d9c12317 	ldw	r7,1164(sp)
 80113fc:	2b001917 	ldw	r12,100(r5)
 8011400:	2ac00717 	ldw	r11,28(r5)
 8011404:	2a800917 	ldw	r10,36(r5)
 8011408:	02010004 	movi	r8,1024
 801140c:	18ffff4c 	andi	r3,r3,65533
 8011410:	da0b883a 	add	r5,sp,r8
 8011414:	980d883a 	mov	r6,r19
 8011418:	d8c1030d 	sth	r3,1036(sp)
 801141c:	db011915 	stw	r12,1124(sp)
 8011420:	d881038d 	sth	r2,1038(sp)
 8011424:	dac10715 	stw	r11,1052(sp)
 8011428:	da810915 	stw	r10,1060(sp)
 801142c:	dec10015 	stw	sp,1024(sp)
 8011430:	dec10415 	stw	sp,1040(sp)
 8011434:	da010215 	stw	r8,1032(sp)
 8011438:	da010515 	stw	r8,1044(sp)
 801143c:	d8010615 	stw	zero,1048(sp)
 8011440:	80110900 	call	8011090 <___vfiprintf_internal_r>
 8011444:	1021883a 	mov	r16,r2
 8011448:	10000416 	blt	r2,zero,801145c <___vfiprintf_internal_r+0x3cc>
 801144c:	d9012117 	ldw	r4,1156(sp)
 8011450:	d9410004 	addi	r5,sp,1024
 8011454:	800cbb40 	call	800cbb4 <_fflush_r>
 8011458:	10040f1e 	bne	r2,zero,8012498 <___vfiprintf_internal_r+0x1408>
 801145c:	d881030b 	ldhu	r2,1036(sp)
 8011460:	1080100c 	andi	r2,r2,64
 8011464:	10000426 	beq	r2,zero,8011478 <___vfiprintf_internal_r+0x3e8>
 8011468:	d8c12017 	ldw	r3,1152(sp)
 801146c:	1880030b 	ldhu	r2,12(r3)
 8011470:	10801014 	ori	r2,r2,64
 8011474:	1880030d 	sth	r2,12(r3)
 8011478:	8005883a 	mov	r2,r16
 801147c:	00000106 	br	8011484 <___vfiprintf_internal_r+0x3f4>
 8011480:	00bfffc4 	movi	r2,-1
 8011484:	dfc13517 	ldw	ra,1236(sp)
 8011488:	df013417 	ldw	fp,1232(sp)
 801148c:	ddc13317 	ldw	r23,1228(sp)
 8011490:	dd813217 	ldw	r22,1224(sp)
 8011494:	dd413117 	ldw	r21,1220(sp)
 8011498:	dd013017 	ldw	r20,1216(sp)
 801149c:	dcc12f17 	ldw	r19,1212(sp)
 80114a0:	dc812e17 	ldw	r18,1208(sp)
 80114a4:	dc412d17 	ldw	r17,1204(sp)
 80114a8:	dc012c17 	ldw	r16,1200(sp)
 80114ac:	dec13604 	addi	sp,sp,1240
 80114b0:	f800283a 	ret
 80114b4:	800d1700 	call	800d170 <__sinit>
 80114b8:	003f0706 	br	80110d8 <__alt_data_end+0xfc0110d8>
 80114bc:	d8c12417 	ldw	r3,1168(sp)
 80114c0:	d8812315 	stw	r2,1164(sp)
 80114c4:	00c7c83a 	sub	r3,zero,r3
 80114c8:	d8c12415 	stw	r3,1168(sp)
 80114cc:	94800114 	ori	r18,r18,4
 80114d0:	b9800007 	ldb	r6,0(r23)
 80114d4:	003f4f06 	br	8011214 <__alt_data_end+0xfc011214>
 80114d8:	94802014 	ori	r18,r18,128
 80114dc:	b9800007 	ldb	r6,0(r23)
 80114e0:	003f4c06 	br	8011214 <__alt_data_end+0xfc011214>
 80114e4:	dc012615 	stw	r16,1176(sp)
 80114e8:	d8012415 	stw	zero,1168(sp)
 80114ec:	35bff404 	addi	r22,r6,-48
 80114f0:	0009883a 	mov	r4,zero
 80114f4:	b821883a 	mov	r16,r23
 80114f8:	01400284 	movi	r5,10
 80114fc:	80040900 	call	8004090 <__mulsi3>
 8011500:	81800007 	ldb	r6,0(r16)
 8011504:	1589883a 	add	r4,r2,r22
 8011508:	bdc00044 	addi	r23,r23,1
 801150c:	35bff404 	addi	r22,r6,-48
 8011510:	b821883a 	mov	r16,r23
 8011514:	adbff82e 	bgeu	r21,r22,80114f8 <__alt_data_end+0xfc0114f8>
 8011518:	d9012415 	stw	r4,1168(sp)
 801151c:	dc012617 	ldw	r16,1176(sp)
 8011520:	003f3d06 	br	8011218 <__alt_data_end+0xfc011218>
 8011524:	d8c12203 	ldbu	r3,1160(sp)
 8011528:	94800414 	ori	r18,r18,16
 801152c:	9080080c 	andi	r2,r18,32
 8011530:	d8c11d85 	stb	r3,1142(sp)
 8011534:	9811883a 	mov	r8,r19
 8011538:	d8c12317 	ldw	r3,1164(sp)
 801153c:	10018226 	beq	r2,zero,8011b48 <___vfiprintf_internal_r+0xab8>
 8011540:	d9012317 	ldw	r4,1164(sp)
 8011544:	18800117 	ldw	r2,4(r3)
 8011548:	1cc00017 	ldw	r19,0(r3)
 801154c:	21000204 	addi	r4,r4,8
 8011550:	d9012315 	stw	r4,1164(sp)
 8011554:	102b883a 	mov	r21,r2
 8011558:	10030016 	blt	r2,zero,801215c <___vfiprintf_internal_r+0x10cc>
 801155c:	dd811d83 	ldbu	r22,1142(sp)
 8011560:	8029883a 	mov	r20,r16
 8011564:	00800044 	movi	r2,1
 8011568:	9d46b03a 	or	r3,r19,r21
 801156c:	80000216 	blt	r16,zero,8011578 <___vfiprintf_internal_r+0x4e8>
 8011570:	013fdfc4 	movi	r4,-129
 8011574:	9124703a 	and	r18,r18,r4
 8011578:	1801b41e 	bne	r3,zero,8011c4c <___vfiprintf_internal_r+0xbbc>
 801157c:	80028126 	beq	r16,zero,8011f84 <___vfiprintf_internal_r+0xef4>
 8011580:	10803fcc 	andi	r2,r2,255
 8011584:	00c00044 	movi	r3,1
 8011588:	10c1d126 	beq	r2,r3,8011cd0 <___vfiprintf_internal_r+0xc40>
 801158c:	00c00084 	movi	r3,2
 8011590:	10c28626 	beq	r2,r3,8011fac <___vfiprintf_internal_r+0xf1c>
 8011594:	d8c10a04 	addi	r3,sp,1064
 8011598:	9808d0fa 	srli	r4,r19,3
 801159c:	a80a977a 	slli	r5,r21,29
 80115a0:	a82ad0fa 	srli	r21,r21,3
 80115a4:	9cc001cc 	andi	r19,r19,7
 80115a8:	98800c04 	addi	r2,r19,48
 80115ac:	18ffffc4 	addi	r3,r3,-1
 80115b0:	2926b03a 	or	r19,r5,r4
 80115b4:	18800005 	stb	r2,0(r3)
 80115b8:	9d48b03a 	or	r4,r19,r21
 80115bc:	203ff61e 	bne	r4,zero,8011598 <__alt_data_end+0xfc011598>
 80115c0:	9100004c 	andi	r4,r18,1
 80115c4:	d8c12215 	stw	r3,1160(sp)
 80115c8:	2002b31e 	bne	r4,zero,8012098 <___vfiprintf_internal_r+0x1008>
 80115cc:	d9411e17 	ldw	r5,1144(sp)
 80115d0:	28e9c83a 	sub	r20,r5,r3
 80115d4:	a02b883a 	mov	r21,r20
 80115d8:	a400010e 	bge	r20,r16,80115e0 <___vfiprintf_internal_r+0x550>
 80115dc:	802b883a 	mov	r21,r16
 80115e0:	b5803fcc 	andi	r22,r22,255
 80115e4:	b580201c 	xori	r22,r22,128
 80115e8:	b5bfe004 	addi	r22,r22,-128
 80115ec:	b0000126 	beq	r22,zero,80115f4 <___vfiprintf_internal_r+0x564>
 80115f0:	ad400044 	addi	r21,r21,1
 80115f4:	9280008c 	andi	r10,r18,2
 80115f8:	50000126 	beq	r10,zero,8011600 <___vfiprintf_internal_r+0x570>
 80115fc:	ad400084 	addi	r21,r21,2
 8011600:	9580210c 	andi	r22,r18,132
 8011604:	b001751e 	bne	r22,zero,8011bdc <___vfiprintf_internal_r+0xb4c>
 8011608:	d9012417 	ldw	r4,1168(sp)
 801160c:	2567c83a 	sub	r19,r4,r21
 8011610:	04c1720e 	bge	zero,r19,8011bdc <___vfiprintf_internal_r+0xb4c>
 8011614:	01c00404 	movi	r7,16
 8011618:	d8c11c17 	ldw	r3,1136(sp)
 801161c:	3cc36b0e 	bge	r7,r19,80123cc <___vfiprintf_internal_r+0x133c>
 8011620:	008200b4 	movhi	r2,2050
 8011624:	108a6704 	addi	r2,r2,10652
 8011628:	dc012915 	stw	r16,1188(sp)
 801162c:	d9011b17 	ldw	r4,1132(sp)
 8011630:	9821883a 	mov	r16,r19
 8011634:	d8812615 	stw	r2,1176(sp)
 8011638:	030001c4 	movi	r12,7
 801163c:	5027883a 	mov	r19,r10
 8011640:	00000506 	br	8011658 <___vfiprintf_internal_r+0x5c8>
 8011644:	21400084 	addi	r5,r4,2
 8011648:	42000204 	addi	r8,r8,8
 801164c:	1009883a 	mov	r4,r2
 8011650:	843ffc04 	addi	r16,r16,-16
 8011654:	3c000d0e 	bge	r7,r16,801168c <___vfiprintf_internal_r+0x5fc>
 8011658:	18c00404 	addi	r3,r3,16
 801165c:	20800044 	addi	r2,r4,1
 8011660:	47000015 	stw	fp,0(r8)
 8011664:	41c00115 	stw	r7,4(r8)
 8011668:	d8c11c15 	stw	r3,1136(sp)
 801166c:	d8811b15 	stw	r2,1132(sp)
 8011670:	60bff40e 	bge	r12,r2,8011644 <__alt_data_end+0xfc011644>
 8011674:	18014b1e 	bne	r3,zero,8011ba4 <___vfiprintf_internal_r+0xb14>
 8011678:	843ffc04 	addi	r16,r16,-16
 801167c:	0009883a 	mov	r4,zero
 8011680:	01400044 	movi	r5,1
 8011684:	d811883a 	mov	r8,sp
 8011688:	3c3ff316 	blt	r7,r16,8011658 <__alt_data_end+0xfc011658>
 801168c:	9815883a 	mov	r10,r19
 8011690:	8027883a 	mov	r19,r16
 8011694:	dc012917 	ldw	r16,1188(sp)
 8011698:	d9012617 	ldw	r4,1176(sp)
 801169c:	98c7883a 	add	r3,r19,r3
 80116a0:	44c00115 	stw	r19,4(r8)
 80116a4:	41000015 	stw	r4,0(r8)
 80116a8:	d8c11c15 	stw	r3,1136(sp)
 80116ac:	d9411b15 	stw	r5,1132(sp)
 80116b0:	008001c4 	movi	r2,7
 80116b4:	11425116 	blt	r2,r5,8011ffc <___vfiprintf_internal_r+0xf6c>
 80116b8:	d9011d87 	ldb	r4,1142(sp)
 80116bc:	42000204 	addi	r8,r8,8
 80116c0:	28800044 	addi	r2,r5,1
 80116c4:	20014a1e 	bne	r4,zero,8011bf0 <___vfiprintf_internal_r+0xb60>
 80116c8:	50000c26 	beq	r10,zero,80116fc <___vfiprintf_internal_r+0x66c>
 80116cc:	d9011d04 	addi	r4,sp,1140
 80116d0:	18c00084 	addi	r3,r3,2
 80116d4:	41000015 	stw	r4,0(r8)
 80116d8:	01000084 	movi	r4,2
 80116dc:	41000115 	stw	r4,4(r8)
 80116e0:	d8c11c15 	stw	r3,1136(sp)
 80116e4:	d8811b15 	stw	r2,1132(sp)
 80116e8:	010001c4 	movi	r4,7
 80116ec:	20822016 	blt	r4,r2,8011f70 <___vfiprintf_internal_r+0xee0>
 80116f0:	100b883a 	mov	r5,r2
 80116f4:	42000204 	addi	r8,r8,8
 80116f8:	10800044 	addi	r2,r2,1
 80116fc:	01002004 	movi	r4,128
 8011700:	b101de26 	beq	r22,r4,8011e7c <___vfiprintf_internal_r+0xdec>
 8011704:	8521c83a 	sub	r16,r16,r20
 8011708:	0400230e 	bge	zero,r16,8011798 <___vfiprintf_internal_r+0x708>
 801170c:	04c00404 	movi	r19,16
 8011710:	9c030d0e 	bge	r19,r16,8012348 <___vfiprintf_internal_r+0x12b8>
 8011714:	008200b4 	movhi	r2,2050
 8011718:	108a6304 	addi	r2,r2,10636
 801171c:	d8812615 	stw	r2,1176(sp)
 8011720:	058001c4 	movi	r22,7
 8011724:	00000506 	br	801173c <___vfiprintf_internal_r+0x6ac>
 8011728:	28800084 	addi	r2,r5,2
 801172c:	42000204 	addi	r8,r8,8
 8011730:	200b883a 	mov	r5,r4
 8011734:	843ffc04 	addi	r16,r16,-16
 8011738:	9c000d0e 	bge	r19,r16,8011770 <___vfiprintf_internal_r+0x6e0>
 801173c:	18c00404 	addi	r3,r3,16
 8011740:	29000044 	addi	r4,r5,1
 8011744:	44400015 	stw	r17,0(r8)
 8011748:	44c00115 	stw	r19,4(r8)
 801174c:	d8c11c15 	stw	r3,1136(sp)
 8011750:	d9011b15 	stw	r4,1132(sp)
 8011754:	b13ff40e 	bge	r22,r4,8011728 <__alt_data_end+0xfc011728>
 8011758:	1801321e 	bne	r3,zero,8011c24 <___vfiprintf_internal_r+0xb94>
 801175c:	843ffc04 	addi	r16,r16,-16
 8011760:	000b883a 	mov	r5,zero
 8011764:	00800044 	movi	r2,1
 8011768:	d811883a 	mov	r8,sp
 801176c:	9c3ff316 	blt	r19,r16,801173c <__alt_data_end+0xfc01173c>
 8011770:	d9012617 	ldw	r4,1176(sp)
 8011774:	1c07883a 	add	r3,r3,r16
 8011778:	44000115 	stw	r16,4(r8)
 801177c:	41000015 	stw	r4,0(r8)
 8011780:	d8c11c15 	stw	r3,1136(sp)
 8011784:	d8811b15 	stw	r2,1132(sp)
 8011788:	010001c4 	movi	r4,7
 801178c:	20816216 	blt	r4,r2,8011d18 <___vfiprintf_internal_r+0xc88>
 8011790:	42000204 	addi	r8,r8,8
 8011794:	10800044 	addi	r2,r2,1
 8011798:	d9012217 	ldw	r4,1160(sp)
 801179c:	1d07883a 	add	r3,r3,r20
 80117a0:	45000115 	stw	r20,4(r8)
 80117a4:	41000015 	stw	r4,0(r8)
 80117a8:	d8c11c15 	stw	r3,1136(sp)
 80117ac:	d8811b15 	stw	r2,1132(sp)
 80117b0:	010001c4 	movi	r4,7
 80117b4:	2081610e 	bge	r4,r2,8011d3c <___vfiprintf_internal_r+0xcac>
 80117b8:	1802211e 	bne	r3,zero,8012040 <___vfiprintf_internal_r+0xfb0>
 80117bc:	d8011b15 	stw	zero,1132(sp)
 80117c0:	9480010c 	andi	r18,r18,4
 80117c4:	9002171e 	bne	r18,zero,8012024 <___vfiprintf_internal_r+0xf94>
 80117c8:	d9412417 	ldw	r5,1168(sp)
 80117cc:	a9433716 	blt	r21,r5,80124ac <___vfiprintf_internal_r+0x141c>
 80117d0:	d8812517 	ldw	r2,1172(sp)
 80117d4:	1545883a 	add	r2,r2,r21
 80117d8:	d8812515 	stw	r2,1172(sp)
 80117dc:	00019a06 	br	8011e48 <___vfiprintf_internal_r+0xdb8>
 80117e0:	d8c12317 	ldw	r3,1164(sp)
 80117e4:	05400044 	movi	r21,1
 80117e8:	9811883a 	mov	r8,r19
 80117ec:	18800017 	ldw	r2,0(r3)
 80117f0:	18c00104 	addi	r3,r3,4
 80117f4:	d8c12315 	stw	r3,1164(sp)
 80117f8:	d8c10004 	addi	r3,sp,1024
 80117fc:	d8011d85 	stb	zero,1142(sp)
 8011800:	d8810005 	stb	r2,1024(sp)
 8011804:	a829883a 	mov	r20,r21
 8011808:	d8c12215 	stw	r3,1160(sp)
 801180c:	0021883a 	mov	r16,zero
 8011810:	003f7806 	br	80115f4 <__alt_data_end+0xfc0115f4>
 8011814:	94800414 	ori	r18,r18,16
 8011818:	9080080c 	andi	r2,r18,32
 801181c:	9811883a 	mov	r8,r19
 8011820:	10009026 	beq	r2,zero,8011a64 <___vfiprintf_internal_r+0x9d4>
 8011824:	d8812317 	ldw	r2,1164(sp)
 8011828:	d8c12317 	ldw	r3,1164(sp)
 801182c:	14c00017 	ldw	r19,0(r2)
 8011830:	15400117 	ldw	r21,4(r2)
 8011834:	18c00204 	addi	r3,r3,8
 8011838:	d8c12315 	stw	r3,1164(sp)
 801183c:	0005883a 	mov	r2,zero
 8011840:	9d46b03a 	or	r3,r19,r21
 8011844:	d8011d85 	stb	zero,1142(sp)
 8011848:	8029883a 	mov	r20,r16
 801184c:	002d883a 	mov	r22,zero
 8011850:	003f4606 	br	801156c <__alt_data_end+0xfc01156c>
 8011854:	94800414 	ori	r18,r18,16
 8011858:	9080080c 	andi	r2,r18,32
 801185c:	9811883a 	mov	r8,r19
 8011860:	10006226 	beq	r2,zero,80119ec <___vfiprintf_internal_r+0x95c>
 8011864:	d9012317 	ldw	r4,1164(sp)
 8011868:	00800044 	movi	r2,1
 801186c:	24c00017 	ldw	r19,0(r4)
 8011870:	25400117 	ldw	r21,4(r4)
 8011874:	21000204 	addi	r4,r4,8
 8011878:	d9012315 	stw	r4,1164(sp)
 801187c:	9d46b03a 	or	r3,r19,r21
 8011880:	003ff006 	br	8011844 <__alt_data_end+0xfc011844>
 8011884:	b9800007 	ldb	r6,0(r23)
 8011888:	00801b04 	movi	r2,108
 801188c:	3082b226 	beq	r6,r2,8012358 <___vfiprintf_internal_r+0x12c8>
 8011890:	94800414 	ori	r18,r18,16
 8011894:	003e5f06 	br	8011214 <__alt_data_end+0xfc011214>
 8011898:	d8c12203 	ldbu	r3,1160(sp)
 801189c:	010200b4 	movhi	r4,2050
 80118a0:	2109ed04 	addi	r4,r4,10164
 80118a4:	d8c11d85 	stb	r3,1142(sp)
 80118a8:	d9012715 	stw	r4,1180(sp)
 80118ac:	90c0080c 	andi	r3,r18,32
 80118b0:	9811883a 	mov	r8,r19
 80118b4:	d8812317 	ldw	r2,1164(sp)
 80118b8:	18005f26 	beq	r3,zero,8011a38 <___vfiprintf_internal_r+0x9a8>
 80118bc:	d9012317 	ldw	r4,1164(sp)
 80118c0:	14c00017 	ldw	r19,0(r2)
 80118c4:	15400117 	ldw	r21,4(r2)
 80118c8:	21000204 	addi	r4,r4,8
 80118cc:	d9012315 	stw	r4,1164(sp)
 80118d0:	9080004c 	andi	r2,r18,1
 80118d4:	1001e226 	beq	r2,zero,8012060 <___vfiprintf_internal_r+0xfd0>
 80118d8:	9d46b03a 	or	r3,r19,r21
 80118dc:	18024e26 	beq	r3,zero,8012218 <___vfiprintf_internal_r+0x1188>
 80118e0:	00800c04 	movi	r2,48
 80118e4:	d8811d05 	stb	r2,1140(sp)
 80118e8:	d9811d45 	stb	r6,1141(sp)
 80118ec:	94800094 	ori	r18,r18,2
 80118f0:	00800084 	movi	r2,2
 80118f4:	003fd306 	br	8011844 <__alt_data_end+0xfc011844>
 80118f8:	d9012317 	ldw	r4,1164(sp)
 80118fc:	d9412317 	ldw	r5,1164(sp)
 8011900:	21000017 	ldw	r4,0(r4)
 8011904:	28800104 	addi	r2,r5,4
 8011908:	d9012415 	stw	r4,1168(sp)
 801190c:	203eeb16 	blt	r4,zero,80114bc <__alt_data_end+0xfc0114bc>
 8011910:	d8812315 	stw	r2,1164(sp)
 8011914:	b9800007 	ldb	r6,0(r23)
 8011918:	003e3e06 	br	8011214 <__alt_data_end+0xfc011214>
 801191c:	b9800007 	ldb	r6,0(r23)
 8011920:	01000a84 	movi	r4,42
 8011924:	b8800044 	addi	r2,r23,1
 8011928:	3102d226 	beq	r6,r4,8012474 <___vfiprintf_internal_r+0x13e4>
 801192c:	35bff404 	addi	r22,r6,-48
 8011930:	102f883a 	mov	r23,r2
 8011934:	0021883a 	mov	r16,zero
 8011938:	adbe3736 	bltu	r21,r22,8011218 <__alt_data_end+0xfc011218>
 801193c:	0009883a 	mov	r4,zero
 8011940:	01400284 	movi	r5,10
 8011944:	80040900 	call	8004090 <__mulsi3>
 8011948:	b9800007 	ldb	r6,0(r23)
 801194c:	b089883a 	add	r4,r22,r2
 8011950:	bdc00044 	addi	r23,r23,1
 8011954:	35bff404 	addi	r22,r6,-48
 8011958:	adbff92e 	bgeu	r21,r22,8011940 <__alt_data_end+0xfc011940>
 801195c:	2021883a 	mov	r16,r4
 8011960:	203e2d0e 	bge	r4,zero,8011218 <__alt_data_end+0xfc011218>
 8011964:	043fffc4 	movi	r16,-1
 8011968:	003e2b06 	br	8011218 <__alt_data_end+0xfc011218>
 801196c:	94801014 	ori	r18,r18,64
 8011970:	b9800007 	ldb	r6,0(r23)
 8011974:	003e2706 	br	8011214 <__alt_data_end+0xfc011214>
 8011978:	94800814 	ori	r18,r18,32
 801197c:	b9800007 	ldb	r6,0(r23)
 8011980:	003e2406 	br	8011214 <__alt_data_end+0xfc011214>
 8011984:	d9412317 	ldw	r5,1164(sp)
 8011988:	d8812317 	ldw	r2,1164(sp)
 801198c:	d8011d85 	stb	zero,1142(sp)
 8011990:	29400017 	ldw	r5,0(r5)
 8011994:	9811883a 	mov	r8,r19
 8011998:	14c00104 	addi	r19,r2,4
 801199c:	d9412215 	stw	r5,1160(sp)
 80119a0:	28029026 	beq	r5,zero,80123e4 <___vfiprintf_internal_r+0x1354>
 80119a4:	d9012217 	ldw	r4,1160(sp)
 80119a8:	80027616 	blt	r16,zero,8012384 <___vfiprintf_internal_r+0x12f4>
 80119ac:	000b883a 	mov	r5,zero
 80119b0:	800d883a 	mov	r6,r16
 80119b4:	da012a15 	stw	r8,1192(sp)
 80119b8:	800ded80 	call	800ded8 <memchr>
 80119bc:	da012a17 	ldw	r8,1192(sp)
 80119c0:	1002a026 	beq	r2,zero,8012444 <___vfiprintf_internal_r+0x13b4>
 80119c4:	d8c12217 	ldw	r3,1160(sp)
 80119c8:	10e9c83a 	sub	r20,r2,r3
 80119cc:	85023816 	blt	r16,r20,80122b0 <___vfiprintf_internal_r+0x1220>
 80119d0:	dd811d83 	ldbu	r22,1142(sp)
 80119d4:	dcc12315 	stw	r19,1164(sp)
 80119d8:	0021883a 	mov	r16,zero
 80119dc:	003efd06 	br	80115d4 <__alt_data_end+0xfc0115d4>
 80119e0:	9080080c 	andi	r2,r18,32
 80119e4:	9811883a 	mov	r8,r19
 80119e8:	103f9e1e 	bne	r2,zero,8011864 <__alt_data_end+0xfc011864>
 80119ec:	9080040c 	andi	r2,r18,16
 80119f0:	10021726 	beq	r2,zero,8012250 <___vfiprintf_internal_r+0x11c0>
 80119f4:	d9412317 	ldw	r5,1164(sp)
 80119f8:	002b883a 	mov	r21,zero
 80119fc:	00800044 	movi	r2,1
 8011a00:	2cc00017 	ldw	r19,0(r5)
 8011a04:	29400104 	addi	r5,r5,4
 8011a08:	d9412315 	stw	r5,1164(sp)
 8011a0c:	9807883a 	mov	r3,r19
 8011a10:	003f8c06 	br	8011844 <__alt_data_end+0xfc011844>
 8011a14:	d8c12203 	ldbu	r3,1160(sp)
 8011a18:	010200b4 	movhi	r4,2050
 8011a1c:	2109f204 	addi	r4,r4,10184
 8011a20:	d8c11d85 	stb	r3,1142(sp)
 8011a24:	d9012715 	stw	r4,1180(sp)
 8011a28:	90c0080c 	andi	r3,r18,32
 8011a2c:	9811883a 	mov	r8,r19
 8011a30:	d8812317 	ldw	r2,1164(sp)
 8011a34:	183fa11e 	bne	r3,zero,80118bc <__alt_data_end+0xfc0118bc>
 8011a38:	90c0040c 	andi	r3,r18,16
 8011a3c:	1801e526 	beq	r3,zero,80121d4 <___vfiprintf_internal_r+0x1144>
 8011a40:	d9412317 	ldw	r5,1164(sp)
 8011a44:	14c00017 	ldw	r19,0(r2)
 8011a48:	002b883a 	mov	r21,zero
 8011a4c:	29400104 	addi	r5,r5,4
 8011a50:	d9412315 	stw	r5,1164(sp)
 8011a54:	003f9e06 	br	80118d0 <__alt_data_end+0xfc0118d0>
 8011a58:	9080080c 	andi	r2,r18,32
 8011a5c:	9811883a 	mov	r8,r19
 8011a60:	103f701e 	bne	r2,zero,8011824 <__alt_data_end+0xfc011824>
 8011a64:	9080040c 	andi	r2,r18,16
 8011a68:	1001ef26 	beq	r2,zero,8012228 <___vfiprintf_internal_r+0x1198>
 8011a6c:	d9012317 	ldw	r4,1164(sp)
 8011a70:	002b883a 	mov	r21,zero
 8011a74:	0005883a 	mov	r2,zero
 8011a78:	24c00017 	ldw	r19,0(r4)
 8011a7c:	21000104 	addi	r4,r4,4
 8011a80:	d9012315 	stw	r4,1164(sp)
 8011a84:	9807883a 	mov	r3,r19
 8011a88:	003f6e06 	br	8011844 <__alt_data_end+0xfc011844>
 8011a8c:	d8c12317 	ldw	r3,1164(sp)
 8011a90:	9811883a 	mov	r8,r19
 8011a94:	00800c04 	movi	r2,48
 8011a98:	1cc00017 	ldw	r19,0(r3)
 8011a9c:	010200b4 	movhi	r4,2050
 8011aa0:	18c00104 	addi	r3,r3,4
 8011aa4:	d8811d05 	stb	r2,1140(sp)
 8011aa8:	2109f204 	addi	r4,r4,10184
 8011aac:	00801e04 	movi	r2,120
 8011ab0:	d8811d45 	stb	r2,1141(sp)
 8011ab4:	d8c12315 	stw	r3,1164(sp)
 8011ab8:	002b883a 	mov	r21,zero
 8011abc:	94800094 	ori	r18,r18,2
 8011ac0:	d9012715 	stw	r4,1180(sp)
 8011ac4:	00800084 	movi	r2,2
 8011ac8:	9807883a 	mov	r3,r19
 8011acc:	003f5d06 	br	8011844 <__alt_data_end+0xfc011844>
 8011ad0:	d8c12203 	ldbu	r3,1160(sp)
 8011ad4:	9080080c 	andi	r2,r18,32
 8011ad8:	9811883a 	mov	r8,r19
 8011adc:	d8c11d85 	stb	r3,1142(sp)
 8011ae0:	1001b126 	beq	r2,zero,80121a8 <___vfiprintf_internal_r+0x1118>
 8011ae4:	d9012317 	ldw	r4,1164(sp)
 8011ae8:	d9412517 	ldw	r5,1172(sp)
 8011aec:	20800017 	ldw	r2,0(r4)
 8011af0:	2807d7fa 	srai	r3,r5,31
 8011af4:	21000104 	addi	r4,r4,4
 8011af8:	d9012315 	stw	r4,1164(sp)
 8011afc:	11400015 	stw	r5,0(r2)
 8011b00:	10c00115 	stw	r3,4(r2)
 8011b04:	003d9a06 	br	8011170 <__alt_data_end+0xfc011170>
 8011b08:	d8812207 	ldb	r2,1160(sp)
 8011b0c:	1001c41e 	bne	r2,zero,8012220 <___vfiprintf_internal_r+0x1190>
 8011b10:	00c00804 	movi	r3,32
 8011b14:	d8c12205 	stb	r3,1160(sp)
 8011b18:	b9800007 	ldb	r6,0(r23)
 8011b1c:	003dbd06 	br	8011214 <__alt_data_end+0xfc011214>
 8011b20:	00c00ac4 	movi	r3,43
 8011b24:	d8c12205 	stb	r3,1160(sp)
 8011b28:	b9800007 	ldb	r6,0(r23)
 8011b2c:	003db906 	br	8011214 <__alt_data_end+0xfc011214>
 8011b30:	d8c12203 	ldbu	r3,1160(sp)
 8011b34:	9080080c 	andi	r2,r18,32
 8011b38:	9811883a 	mov	r8,r19
 8011b3c:	d8c11d85 	stb	r3,1142(sp)
 8011b40:	d8c12317 	ldw	r3,1164(sp)
 8011b44:	103e7e1e 	bne	r2,zero,8011540 <__alt_data_end+0xfc011540>
 8011b48:	9080040c 	andi	r2,r18,16
 8011b4c:	1001a926 	beq	r2,zero,80121f4 <___vfiprintf_internal_r+0x1164>
 8011b50:	1cc00017 	ldw	r19,0(r3)
 8011b54:	d9412317 	ldw	r5,1164(sp)
 8011b58:	982bd7fa 	srai	r21,r19,31
 8011b5c:	29400104 	addi	r5,r5,4
 8011b60:	d9412315 	stw	r5,1164(sp)
 8011b64:	a805883a 	mov	r2,r21
 8011b68:	003e7b06 	br	8011558 <__alt_data_end+0xfc011558>
 8011b6c:	94800054 	ori	r18,r18,1
 8011b70:	b9800007 	ldb	r6,0(r23)
 8011b74:	003da706 	br	8011214 <__alt_data_end+0xfc011214>
 8011b78:	d8c12203 	ldbu	r3,1160(sp)
 8011b7c:	9811883a 	mov	r8,r19
 8011b80:	d8c11d85 	stb	r3,1142(sp)
 8011b84:	30005826 	beq	r6,zero,8011ce8 <___vfiprintf_internal_r+0xc58>
 8011b88:	05400044 	movi	r21,1
 8011b8c:	d8c10004 	addi	r3,sp,1024
 8011b90:	d9810005 	stb	r6,1024(sp)
 8011b94:	d8011d85 	stb	zero,1142(sp)
 8011b98:	a829883a 	mov	r20,r21
 8011b9c:	d8c12215 	stw	r3,1160(sp)
 8011ba0:	003f1a06 	br	801180c <__alt_data_end+0xfc01180c>
 8011ba4:	d9012117 	ldw	r4,1156(sp)
 8011ba8:	d9412017 	ldw	r5,1152(sp)
 8011bac:	d9811a04 	addi	r6,sp,1128
 8011bb0:	d9c12a15 	stw	r7,1192(sp)
 8011bb4:	db012b15 	stw	r12,1196(sp)
 8011bb8:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 8011bbc:	d9c12a17 	ldw	r7,1192(sp)
 8011bc0:	db012b17 	ldw	r12,1196(sp)
 8011bc4:	10004e1e 	bne	r2,zero,8011d00 <___vfiprintf_internal_r+0xc70>
 8011bc8:	d9011b17 	ldw	r4,1132(sp)
 8011bcc:	d8c11c17 	ldw	r3,1136(sp)
 8011bd0:	d811883a 	mov	r8,sp
 8011bd4:	21400044 	addi	r5,r4,1
 8011bd8:	003e9d06 	br	8011650 <__alt_data_end+0xfc011650>
 8011bdc:	d9411b17 	ldw	r5,1132(sp)
 8011be0:	d8c11c17 	ldw	r3,1136(sp)
 8011be4:	28800044 	addi	r2,r5,1
 8011be8:	d9011d87 	ldb	r4,1142(sp)
 8011bec:	203eb626 	beq	r4,zero,80116c8 <__alt_data_end+0xfc0116c8>
 8011bf0:	01000044 	movi	r4,1
 8011bf4:	d9411d84 	addi	r5,sp,1142
 8011bf8:	1907883a 	add	r3,r3,r4
 8011bfc:	41400015 	stw	r5,0(r8)
 8011c00:	41000115 	stw	r4,4(r8)
 8011c04:	d8c11c15 	stw	r3,1136(sp)
 8011c08:	d8811b15 	stw	r2,1132(sp)
 8011c0c:	014001c4 	movi	r5,7
 8011c10:	2880ce16 	blt	r5,r2,8011f4c <___vfiprintf_internal_r+0xebc>
 8011c14:	100b883a 	mov	r5,r2
 8011c18:	42000204 	addi	r8,r8,8
 8011c1c:	10800044 	addi	r2,r2,1
 8011c20:	003ea906 	br	80116c8 <__alt_data_end+0xfc0116c8>
 8011c24:	d9012117 	ldw	r4,1156(sp)
 8011c28:	d9412017 	ldw	r5,1152(sp)
 8011c2c:	d9811a04 	addi	r6,sp,1128
 8011c30:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 8011c34:	1000321e 	bne	r2,zero,8011d00 <___vfiprintf_internal_r+0xc70>
 8011c38:	d9411b17 	ldw	r5,1132(sp)
 8011c3c:	d8c11c17 	ldw	r3,1136(sp)
 8011c40:	d811883a 	mov	r8,sp
 8011c44:	28800044 	addi	r2,r5,1
 8011c48:	003eba06 	br	8011734 <__alt_data_end+0xfc011734>
 8011c4c:	10803fcc 	andi	r2,r2,255
 8011c50:	00c00044 	movi	r3,1
 8011c54:	10fe4d1e 	bne	r2,r3,801158c <__alt_data_end+0xfc01158c>
 8011c58:	a800021e 	bne	r21,zero,8011c64 <___vfiprintf_internal_r+0xbd4>
 8011c5c:	00800244 	movi	r2,9
 8011c60:	14c01b2e 	bgeu	r2,r19,8011cd0 <___vfiprintf_internal_r+0xc40>
 8011c64:	dc012215 	stw	r16,1160(sp)
 8011c68:	dd010a04 	addi	r20,sp,1064
 8011c6c:	a821883a 	mov	r16,r21
 8011c70:	402b883a 	mov	r21,r8
 8011c74:	9809883a 	mov	r4,r19
 8011c78:	800b883a 	mov	r5,r16
 8011c7c:	01800284 	movi	r6,10
 8011c80:	000f883a 	mov	r7,zero
 8011c84:	80135700 	call	8013570 <__umoddi3>
 8011c88:	10800c04 	addi	r2,r2,48
 8011c8c:	a53fffc4 	addi	r20,r20,-1
 8011c90:	9809883a 	mov	r4,r19
 8011c94:	800b883a 	mov	r5,r16
 8011c98:	01800284 	movi	r6,10
 8011c9c:	000f883a 	mov	r7,zero
 8011ca0:	a0800005 	stb	r2,0(r20)
 8011ca4:	8012f300 	call	8012f30 <__udivdi3>
 8011ca8:	1027883a 	mov	r19,r2
 8011cac:	10c4b03a 	or	r2,r2,r3
 8011cb0:	1821883a 	mov	r16,r3
 8011cb4:	103fef1e 	bne	r2,zero,8011c74 <__alt_data_end+0xfc011c74>
 8011cb8:	d9011e17 	ldw	r4,1144(sp)
 8011cbc:	dc012217 	ldw	r16,1160(sp)
 8011cc0:	a811883a 	mov	r8,r21
 8011cc4:	dd012215 	stw	r20,1160(sp)
 8011cc8:	2529c83a 	sub	r20,r4,r20
 8011ccc:	003e4106 	br	80115d4 <__alt_data_end+0xfc0115d4>
 8011cd0:	9cc00c04 	addi	r19,r19,48
 8011cd4:	d8c109c4 	addi	r3,sp,1063
 8011cd8:	dcc109c5 	stb	r19,1063(sp)
 8011cdc:	dd012817 	ldw	r20,1184(sp)
 8011ce0:	d8c12215 	stw	r3,1160(sp)
 8011ce4:	003e3b06 	br	80115d4 <__alt_data_end+0xfc0115d4>
 8011ce8:	d8811c17 	ldw	r2,1136(sp)
 8011cec:	10000426 	beq	r2,zero,8011d00 <___vfiprintf_internal_r+0xc70>
 8011cf0:	d9012117 	ldw	r4,1156(sp)
 8011cf4:	d9412017 	ldw	r5,1152(sp)
 8011cf8:	d9811a04 	addi	r6,sp,1128
 8011cfc:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 8011d00:	d9412017 	ldw	r5,1152(sp)
 8011d04:	2880030b 	ldhu	r2,12(r5)
 8011d08:	1080100c 	andi	r2,r2,64
 8011d0c:	103ddc1e 	bne	r2,zero,8011480 <__alt_data_end+0xfc011480>
 8011d10:	d8812517 	ldw	r2,1172(sp)
 8011d14:	003ddb06 	br	8011484 <__alt_data_end+0xfc011484>
 8011d18:	1801061e 	bne	r3,zero,8012134 <___vfiprintf_internal_r+0x10a4>
 8011d1c:	d8c12217 	ldw	r3,1160(sp)
 8011d20:	00800044 	movi	r2,1
 8011d24:	dd000115 	stw	r20,4(sp)
 8011d28:	d8c00015 	stw	r3,0(sp)
 8011d2c:	dd011c15 	stw	r20,1136(sp)
 8011d30:	d8811b15 	stw	r2,1132(sp)
 8011d34:	a007883a 	mov	r3,r20
 8011d38:	d811883a 	mov	r8,sp
 8011d3c:	42000204 	addi	r8,r8,8
 8011d40:	9480010c 	andi	r18,r18,4
 8011d44:	90003426 	beq	r18,zero,8011e18 <___vfiprintf_internal_r+0xd88>
 8011d48:	d9412417 	ldw	r5,1168(sp)
 8011d4c:	2d65c83a 	sub	r18,r5,r21
 8011d50:	0480310e 	bge	zero,r18,8011e18 <___vfiprintf_internal_r+0xd88>
 8011d54:	04000404 	movi	r16,16
 8011d58:	8481ad0e 	bge	r16,r18,8012410 <___vfiprintf_internal_r+0x1380>
 8011d5c:	014200b4 	movhi	r5,2050
 8011d60:	294a6704 	addi	r5,r5,10652
 8011d64:	d9011b17 	ldw	r4,1132(sp)
 8011d68:	d9412615 	stw	r5,1176(sp)
 8011d6c:	04c001c4 	movi	r19,7
 8011d70:	dd012117 	ldw	r20,1156(sp)
 8011d74:	dd812017 	ldw	r22,1152(sp)
 8011d78:	00000506 	br	8011d90 <___vfiprintf_internal_r+0xd00>
 8011d7c:	21400084 	addi	r5,r4,2
 8011d80:	42000204 	addi	r8,r8,8
 8011d84:	1009883a 	mov	r4,r2
 8011d88:	94bffc04 	addi	r18,r18,-16
 8011d8c:	84800d0e 	bge	r16,r18,8011dc4 <___vfiprintf_internal_r+0xd34>
 8011d90:	18c00404 	addi	r3,r3,16
 8011d94:	20800044 	addi	r2,r4,1
 8011d98:	47000015 	stw	fp,0(r8)
 8011d9c:	44000115 	stw	r16,4(r8)
 8011da0:	d8c11c15 	stw	r3,1136(sp)
 8011da4:	d8811b15 	stw	r2,1132(sp)
 8011da8:	98bff40e 	bge	r19,r2,8011d7c <__alt_data_end+0xfc011d7c>
 8011dac:	1800291e 	bne	r3,zero,8011e54 <___vfiprintf_internal_r+0xdc4>
 8011db0:	94bffc04 	addi	r18,r18,-16
 8011db4:	0009883a 	mov	r4,zero
 8011db8:	01400044 	movi	r5,1
 8011dbc:	d811883a 	mov	r8,sp
 8011dc0:	84bff316 	blt	r16,r18,8011d90 <__alt_data_end+0xfc011d90>
 8011dc4:	d8812617 	ldw	r2,1176(sp)
 8011dc8:	1c87883a 	add	r3,r3,r18
 8011dcc:	44800115 	stw	r18,4(r8)
 8011dd0:	40800015 	stw	r2,0(r8)
 8011dd4:	d8c11c15 	stw	r3,1136(sp)
 8011dd8:	d9411b15 	stw	r5,1132(sp)
 8011ddc:	008001c4 	movi	r2,7
 8011de0:	11400d0e 	bge	r2,r5,8011e18 <___vfiprintf_internal_r+0xd88>
 8011de4:	1800061e 	bne	r3,zero,8011e00 <___vfiprintf_internal_r+0xd70>
 8011de8:	d8c12417 	ldw	r3,1168(sp)
 8011dec:	a8c12e16 	blt	r21,r3,80122a8 <___vfiprintf_internal_r+0x1218>
 8011df0:	d9012517 	ldw	r4,1172(sp)
 8011df4:	2549883a 	add	r4,r4,r21
 8011df8:	d9012515 	stw	r4,1172(sp)
 8011dfc:	00001206 	br	8011e48 <___vfiprintf_internal_r+0xdb8>
 8011e00:	d9012117 	ldw	r4,1156(sp)
 8011e04:	d9412017 	ldw	r5,1152(sp)
 8011e08:	d9811a04 	addi	r6,sp,1128
 8011e0c:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 8011e10:	103fbb1e 	bne	r2,zero,8011d00 <__alt_data_end+0xfc011d00>
 8011e14:	d8c11c17 	ldw	r3,1136(sp)
 8011e18:	d8812417 	ldw	r2,1168(sp)
 8011e1c:	a880010e 	bge	r21,r2,8011e24 <___vfiprintf_internal_r+0xd94>
 8011e20:	102b883a 	mov	r21,r2
 8011e24:	d9012517 	ldw	r4,1172(sp)
 8011e28:	2549883a 	add	r4,r4,r21
 8011e2c:	d9012515 	stw	r4,1172(sp)
 8011e30:	18000526 	beq	r3,zero,8011e48 <___vfiprintf_internal_r+0xdb8>
 8011e34:	d9012117 	ldw	r4,1156(sp)
 8011e38:	d9412017 	ldw	r5,1152(sp)
 8011e3c:	d9811a04 	addi	r6,sp,1128
 8011e40:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 8011e44:	103fae1e 	bne	r2,zero,8011d00 <__alt_data_end+0xfc011d00>
 8011e48:	d8011b15 	stw	zero,1132(sp)
 8011e4c:	d811883a 	mov	r8,sp
 8011e50:	003cc706 	br	8011170 <__alt_data_end+0xfc011170>
 8011e54:	a009883a 	mov	r4,r20
 8011e58:	b00b883a 	mov	r5,r22
 8011e5c:	d9811a04 	addi	r6,sp,1128
 8011e60:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 8011e64:	103fa61e 	bne	r2,zero,8011d00 <__alt_data_end+0xfc011d00>
 8011e68:	d9011b17 	ldw	r4,1132(sp)
 8011e6c:	d8c11c17 	ldw	r3,1136(sp)
 8011e70:	d811883a 	mov	r8,sp
 8011e74:	21400044 	addi	r5,r4,1
 8011e78:	003fc306 	br	8011d88 <__alt_data_end+0xfc011d88>
 8011e7c:	d9012417 	ldw	r4,1168(sp)
 8011e80:	256dc83a 	sub	r22,r4,r21
 8011e84:	05be1f0e 	bge	zero,r22,8011704 <__alt_data_end+0xfc011704>
 8011e88:	04c00404 	movi	r19,16
 8011e8c:	9d81720e 	bge	r19,r22,8012458 <___vfiprintf_internal_r+0x13c8>
 8011e90:	008200b4 	movhi	r2,2050
 8011e94:	108a6304 	addi	r2,r2,10636
 8011e98:	d8812615 	stw	r2,1176(sp)
 8011e9c:	028001c4 	movi	r10,7
 8011ea0:	00000506 	br	8011eb8 <___vfiprintf_internal_r+0xe28>
 8011ea4:	29000084 	addi	r4,r5,2
 8011ea8:	42000204 	addi	r8,r8,8
 8011eac:	100b883a 	mov	r5,r2
 8011eb0:	b5bffc04 	addi	r22,r22,-16
 8011eb4:	9d800d0e 	bge	r19,r22,8011eec <___vfiprintf_internal_r+0xe5c>
 8011eb8:	18c00404 	addi	r3,r3,16
 8011ebc:	28800044 	addi	r2,r5,1
 8011ec0:	44400015 	stw	r17,0(r8)
 8011ec4:	44c00115 	stw	r19,4(r8)
 8011ec8:	d8c11c15 	stw	r3,1136(sp)
 8011ecc:	d8811b15 	stw	r2,1132(sp)
 8011ed0:	50bff40e 	bge	r10,r2,8011ea4 <__alt_data_end+0xfc011ea4>
 8011ed4:	1800111e 	bne	r3,zero,8011f1c <___vfiprintf_internal_r+0xe8c>
 8011ed8:	b5bffc04 	addi	r22,r22,-16
 8011edc:	000b883a 	mov	r5,zero
 8011ee0:	01000044 	movi	r4,1
 8011ee4:	d811883a 	mov	r8,sp
 8011ee8:	9dbff316 	blt	r19,r22,8011eb8 <__alt_data_end+0xfc011eb8>
 8011eec:	d9412617 	ldw	r5,1176(sp)
 8011ef0:	1d87883a 	add	r3,r3,r22
 8011ef4:	45800115 	stw	r22,4(r8)
 8011ef8:	41400015 	stw	r5,0(r8)
 8011efc:	d8c11c15 	stw	r3,1136(sp)
 8011f00:	d9011b15 	stw	r4,1132(sp)
 8011f04:	008001c4 	movi	r2,7
 8011f08:	11008516 	blt	r2,r4,8012120 <___vfiprintf_internal_r+0x1090>
 8011f0c:	42000204 	addi	r8,r8,8
 8011f10:	20800044 	addi	r2,r4,1
 8011f14:	200b883a 	mov	r5,r4
 8011f18:	003dfa06 	br	8011704 <__alt_data_end+0xfc011704>
 8011f1c:	d9012117 	ldw	r4,1156(sp)
 8011f20:	d9412017 	ldw	r5,1152(sp)
 8011f24:	d9811a04 	addi	r6,sp,1128
 8011f28:	da812a15 	stw	r10,1192(sp)
 8011f2c:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 8011f30:	da812a17 	ldw	r10,1192(sp)
 8011f34:	103f721e 	bne	r2,zero,8011d00 <__alt_data_end+0xfc011d00>
 8011f38:	d9411b17 	ldw	r5,1132(sp)
 8011f3c:	d8c11c17 	ldw	r3,1136(sp)
 8011f40:	d811883a 	mov	r8,sp
 8011f44:	29000044 	addi	r4,r5,1
 8011f48:	003fd906 	br	8011eb0 <__alt_data_end+0xfc011eb0>
 8011f4c:	1800681e 	bne	r3,zero,80120f0 <___vfiprintf_internal_r+0x1060>
 8011f50:	50004d26 	beq	r10,zero,8012088 <___vfiprintf_internal_r+0xff8>
 8011f54:	d8811d04 	addi	r2,sp,1140
 8011f58:	00c00084 	movi	r3,2
 8011f5c:	d8800015 	stw	r2,0(sp)
 8011f60:	d8c00115 	stw	r3,4(sp)
 8011f64:	2005883a 	mov	r2,r4
 8011f68:	d811883a 	mov	r8,sp
 8011f6c:	003de006 	br	80116f0 <__alt_data_end+0xfc0116f0>
 8011f70:	1800551e 	bne	r3,zero,80120c8 <___vfiprintf_internal_r+0x1038>
 8011f74:	000b883a 	mov	r5,zero
 8011f78:	00800044 	movi	r2,1
 8011f7c:	d811883a 	mov	r8,sp
 8011f80:	003dde06 	br	80116fc <__alt_data_end+0xfc0116fc>
 8011f84:	10803fcc 	andi	r2,r2,255
 8011f88:	1000191e 	bne	r2,zero,8011ff0 <___vfiprintf_internal_r+0xf60>
 8011f8c:	9080004c 	andi	r2,r18,1
 8011f90:	10001726 	beq	r2,zero,8011ff0 <___vfiprintf_internal_r+0xf60>
 8011f94:	00800c04 	movi	r2,48
 8011f98:	d8c109c4 	addi	r3,sp,1063
 8011f9c:	d88109c5 	stb	r2,1063(sp)
 8011fa0:	dd012817 	ldw	r20,1184(sp)
 8011fa4:	d8c12215 	stw	r3,1160(sp)
 8011fa8:	003d8a06 	br	80115d4 <__alt_data_end+0xfc0115d4>
 8011fac:	d9012717 	ldw	r4,1180(sp)
 8011fb0:	dd010a04 	addi	r20,sp,1064
 8011fb4:	988003cc 	andi	r2,r19,15
 8011fb8:	a806973a 	slli	r3,r21,28
 8011fbc:	2085883a 	add	r2,r4,r2
 8011fc0:	9826d13a 	srli	r19,r19,4
 8011fc4:	10800003 	ldbu	r2,0(r2)
 8011fc8:	a82ad13a 	srli	r21,r21,4
 8011fcc:	a53fffc4 	addi	r20,r20,-1
 8011fd0:	1ce6b03a 	or	r19,r3,r19
 8011fd4:	a0800005 	stb	r2,0(r20)
 8011fd8:	9d44b03a 	or	r2,r19,r21
 8011fdc:	103ff51e 	bne	r2,zero,8011fb4 <__alt_data_end+0xfc011fb4>
 8011fe0:	d9411e17 	ldw	r5,1144(sp)
 8011fe4:	dd012215 	stw	r20,1160(sp)
 8011fe8:	2d29c83a 	sub	r20,r5,r20
 8011fec:	003d7906 	br	80115d4 <__alt_data_end+0xfc0115d4>
 8011ff0:	d8c10a04 	addi	r3,sp,1064
 8011ff4:	d8c12215 	stw	r3,1160(sp)
 8011ff8:	003d7606 	br	80115d4 <__alt_data_end+0xfc0115d4>
 8011ffc:	18009e1e 	bne	r3,zero,8012278 <___vfiprintf_internal_r+0x11e8>
 8012000:	d8811d87 	ldb	r2,1142(sp)
 8012004:	10005f26 	beq	r2,zero,8012184 <___vfiprintf_internal_r+0x10f4>
 8012008:	00c00044 	movi	r3,1
 801200c:	d9011d84 	addi	r4,sp,1142
 8012010:	1805883a 	mov	r2,r3
 8012014:	d9000015 	stw	r4,0(sp)
 8012018:	d8c00115 	stw	r3,4(sp)
 801201c:	d811883a 	mov	r8,sp
 8012020:	003efc06 	br	8011c14 <__alt_data_end+0xfc011c14>
 8012024:	d9412417 	ldw	r5,1168(sp)
 8012028:	d811883a 	mov	r8,sp
 801202c:	2d65c83a 	sub	r18,r5,r21
 8012030:	04bf4816 	blt	zero,r18,8011d54 <__alt_data_end+0xfc011d54>
 8012034:	003f6c06 	br	8011de8 <__alt_data_end+0xfc011de8>
 8012038:	b829883a 	mov	r20,r23
 801203c:	003c6906 	br	80111e4 <__alt_data_end+0xfc0111e4>
 8012040:	d9012117 	ldw	r4,1156(sp)
 8012044:	d9412017 	ldw	r5,1152(sp)
 8012048:	d9811a04 	addi	r6,sp,1128
 801204c:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 8012050:	103f2b1e 	bne	r2,zero,8011d00 <__alt_data_end+0xfc011d00>
 8012054:	d8c11c17 	ldw	r3,1136(sp)
 8012058:	d811883a 	mov	r8,sp
 801205c:	003f3806 	br	8011d40 <__alt_data_end+0xfc011d40>
 8012060:	00800084 	movi	r2,2
 8012064:	9d46b03a 	or	r3,r19,r21
 8012068:	003df606 	br	8011844 <__alt_data_end+0xfc011844>
 801206c:	d9012117 	ldw	r4,1156(sp)
 8012070:	d9412017 	ldw	r5,1152(sp)
 8012074:	d9811a04 	addi	r6,sp,1128
 8012078:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 801207c:	103f201e 	bne	r2,zero,8011d00 <__alt_data_end+0xfc011d00>
 8012080:	d811883a 	mov	r8,sp
 8012084:	003cc606 	br	80113a0 <__alt_data_end+0xfc0113a0>
 8012088:	000b883a 	mov	r5,zero
 801208c:	2005883a 	mov	r2,r4
 8012090:	d811883a 	mov	r8,sp
 8012094:	003d9906 	br	80116fc <__alt_data_end+0xfc0116fc>
 8012098:	10803fcc 	andi	r2,r2,255
 801209c:	1080201c 	xori	r2,r2,128
 80120a0:	10bfe004 	addi	r2,r2,-128
 80120a4:	01000c04 	movi	r4,48
 80120a8:	1100b226 	beq	r2,r4,8012374 <___vfiprintf_internal_r+0x12e4>
 80120ac:	d9412217 	ldw	r5,1160(sp)
 80120b0:	d8811e17 	ldw	r2,1144(sp)
 80120b4:	193fffc5 	stb	r4,-1(r3)
 80120b8:	297fffc4 	addi	r5,r5,-1
 80120bc:	d9412215 	stw	r5,1160(sp)
 80120c0:	1169c83a 	sub	r20,r2,r5
 80120c4:	003d4306 	br	80115d4 <__alt_data_end+0xfc0115d4>
 80120c8:	d9012117 	ldw	r4,1156(sp)
 80120cc:	d9412017 	ldw	r5,1152(sp)
 80120d0:	d9811a04 	addi	r6,sp,1128
 80120d4:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 80120d8:	103f091e 	bne	r2,zero,8011d00 <__alt_data_end+0xfc011d00>
 80120dc:	d9411b17 	ldw	r5,1132(sp)
 80120e0:	d8c11c17 	ldw	r3,1136(sp)
 80120e4:	d811883a 	mov	r8,sp
 80120e8:	28800044 	addi	r2,r5,1
 80120ec:	003d8306 	br	80116fc <__alt_data_end+0xfc0116fc>
 80120f0:	d9012117 	ldw	r4,1156(sp)
 80120f4:	d9412017 	ldw	r5,1152(sp)
 80120f8:	d9811a04 	addi	r6,sp,1128
 80120fc:	da812a15 	stw	r10,1192(sp)
 8012100:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 8012104:	da812a17 	ldw	r10,1192(sp)
 8012108:	103efd1e 	bne	r2,zero,8011d00 <__alt_data_end+0xfc011d00>
 801210c:	d9411b17 	ldw	r5,1132(sp)
 8012110:	d8c11c17 	ldw	r3,1136(sp)
 8012114:	d811883a 	mov	r8,sp
 8012118:	28800044 	addi	r2,r5,1
 801211c:	003d6a06 	br	80116c8 <__alt_data_end+0xfc0116c8>
 8012120:	1800a01e 	bne	r3,zero,80123a4 <___vfiprintf_internal_r+0x1314>
 8012124:	000b883a 	mov	r5,zero
 8012128:	00800044 	movi	r2,1
 801212c:	d811883a 	mov	r8,sp
 8012130:	003d7406 	br	8011704 <__alt_data_end+0xfc011704>
 8012134:	d9012117 	ldw	r4,1156(sp)
 8012138:	d9412017 	ldw	r5,1152(sp)
 801213c:	d9811a04 	addi	r6,sp,1128
 8012140:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 8012144:	103eee1e 	bne	r2,zero,8011d00 <__alt_data_end+0xfc011d00>
 8012148:	d8811b17 	ldw	r2,1132(sp)
 801214c:	d8c11c17 	ldw	r3,1136(sp)
 8012150:	d811883a 	mov	r8,sp
 8012154:	10800044 	addi	r2,r2,1
 8012158:	003d8f06 	br	8011798 <__alt_data_end+0xfc011798>
 801215c:	04e7c83a 	sub	r19,zero,r19
 8012160:	9804c03a 	cmpne	r2,r19,zero
 8012164:	056bc83a 	sub	r21,zero,r21
 8012168:	a8abc83a 	sub	r21,r21,r2
 801216c:	05800b44 	movi	r22,45
 8012170:	dd811d85 	stb	r22,1142(sp)
 8012174:	8029883a 	mov	r20,r16
 8012178:	00800044 	movi	r2,1
 801217c:	9d46b03a 	or	r3,r19,r21
 8012180:	003cfa06 	br	801156c <__alt_data_end+0xfc01156c>
 8012184:	000b883a 	mov	r5,zero
 8012188:	00800044 	movi	r2,1
 801218c:	d811883a 	mov	r8,sp
 8012190:	503d5a26 	beq	r10,zero,80116fc <__alt_data_end+0xfc0116fc>
 8012194:	00c00084 	movi	r3,2
 8012198:	d9011d04 	addi	r4,sp,1140
 801219c:	d9000015 	stw	r4,0(sp)
 80121a0:	d8c00115 	stw	r3,4(sp)
 80121a4:	003d5206 	br	80116f0 <__alt_data_end+0xfc0116f0>
 80121a8:	9080040c 	andi	r2,r18,16
 80121ac:	1000421e 	bne	r2,zero,80122b8 <___vfiprintf_internal_r+0x1228>
 80121b0:	9480100c 	andi	r18,r18,64
 80121b4:	90009c26 	beq	r18,zero,8012428 <___vfiprintf_internal_r+0x1398>
 80121b8:	d9412317 	ldw	r5,1164(sp)
 80121bc:	d8c12517 	ldw	r3,1172(sp)
 80121c0:	28800017 	ldw	r2,0(r5)
 80121c4:	29400104 	addi	r5,r5,4
 80121c8:	d9412315 	stw	r5,1164(sp)
 80121cc:	10c0000d 	sth	r3,0(r2)
 80121d0:	003be706 	br	8011170 <__alt_data_end+0xfc011170>
 80121d4:	90c0100c 	andi	r3,r18,64
 80121d8:	18003e26 	beq	r3,zero,80122d4 <___vfiprintf_internal_r+0x1244>
 80121dc:	d8c12317 	ldw	r3,1164(sp)
 80121e0:	14c0000b 	ldhu	r19,0(r2)
 80121e4:	002b883a 	mov	r21,zero
 80121e8:	18c00104 	addi	r3,r3,4
 80121ec:	d8c12315 	stw	r3,1164(sp)
 80121f0:	003db706 	br	80118d0 <__alt_data_end+0xfc0118d0>
 80121f4:	9080100c 	andi	r2,r18,64
 80121f8:	10004c26 	beq	r2,zero,801232c <___vfiprintf_internal_r+0x129c>
 80121fc:	1cc0000f 	ldh	r19,0(r3)
 8012200:	d8812317 	ldw	r2,1164(sp)
 8012204:	982bd7fa 	srai	r21,r19,31
 8012208:	10800104 	addi	r2,r2,4
 801220c:	d8812315 	stw	r2,1164(sp)
 8012210:	a805883a 	mov	r2,r21
 8012214:	003cd006 	br	8011558 <__alt_data_end+0xfc011558>
 8012218:	00800084 	movi	r2,2
 801221c:	003d8906 	br	8011844 <__alt_data_end+0xfc011844>
 8012220:	b9800007 	ldb	r6,0(r23)
 8012224:	003bfb06 	br	8011214 <__alt_data_end+0xfc011214>
 8012228:	9080100c 	andi	r2,r18,64
 801222c:	10003726 	beq	r2,zero,801230c <___vfiprintf_internal_r+0x127c>
 8012230:	d9412317 	ldw	r5,1164(sp)
 8012234:	002b883a 	mov	r21,zero
 8012238:	0005883a 	mov	r2,zero
 801223c:	2cc0000b 	ldhu	r19,0(r5)
 8012240:	29400104 	addi	r5,r5,4
 8012244:	d9412315 	stw	r5,1164(sp)
 8012248:	9807883a 	mov	r3,r19
 801224c:	003d7d06 	br	8011844 <__alt_data_end+0xfc011844>
 8012250:	9080100c 	andi	r2,r18,64
 8012254:	10002526 	beq	r2,zero,80122ec <___vfiprintf_internal_r+0x125c>
 8012258:	d8812317 	ldw	r2,1164(sp)
 801225c:	002b883a 	mov	r21,zero
 8012260:	14c0000b 	ldhu	r19,0(r2)
 8012264:	10800104 	addi	r2,r2,4
 8012268:	d8812315 	stw	r2,1164(sp)
 801226c:	9807883a 	mov	r3,r19
 8012270:	00800044 	movi	r2,1
 8012274:	003d7306 	br	8011844 <__alt_data_end+0xfc011844>
 8012278:	d9012117 	ldw	r4,1156(sp)
 801227c:	d9412017 	ldw	r5,1152(sp)
 8012280:	d9811a04 	addi	r6,sp,1128
 8012284:	da812a15 	stw	r10,1192(sp)
 8012288:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 801228c:	da812a17 	ldw	r10,1192(sp)
 8012290:	103e9b1e 	bne	r2,zero,8011d00 <__alt_data_end+0xfc011d00>
 8012294:	d9411b17 	ldw	r5,1132(sp)
 8012298:	d8c11c17 	ldw	r3,1136(sp)
 801229c:	d811883a 	mov	r8,sp
 80122a0:	28800044 	addi	r2,r5,1
 80122a4:	003e5006 	br	8011be8 <__alt_data_end+0xfc011be8>
 80122a8:	182b883a 	mov	r21,r3
 80122ac:	003ed006 	br	8011df0 <__alt_data_end+0xfc011df0>
 80122b0:	8029883a 	mov	r20,r16
 80122b4:	003dc606 	br	80119d0 <__alt_data_end+0xfc0119d0>
 80122b8:	d8c12317 	ldw	r3,1164(sp)
 80122bc:	d9012517 	ldw	r4,1172(sp)
 80122c0:	18800017 	ldw	r2,0(r3)
 80122c4:	18c00104 	addi	r3,r3,4
 80122c8:	d8c12315 	stw	r3,1164(sp)
 80122cc:	11000015 	stw	r4,0(r2)
 80122d0:	003ba706 	br	8011170 <__alt_data_end+0xfc011170>
 80122d4:	d9012317 	ldw	r4,1164(sp)
 80122d8:	14c00017 	ldw	r19,0(r2)
 80122dc:	002b883a 	mov	r21,zero
 80122e0:	21000104 	addi	r4,r4,4
 80122e4:	d9012315 	stw	r4,1164(sp)
 80122e8:	003d7906 	br	80118d0 <__alt_data_end+0xfc0118d0>
 80122ec:	d8c12317 	ldw	r3,1164(sp)
 80122f0:	002b883a 	mov	r21,zero
 80122f4:	00800044 	movi	r2,1
 80122f8:	1cc00017 	ldw	r19,0(r3)
 80122fc:	18c00104 	addi	r3,r3,4
 8012300:	d8c12315 	stw	r3,1164(sp)
 8012304:	9807883a 	mov	r3,r19
 8012308:	003d4e06 	br	8011844 <__alt_data_end+0xfc011844>
 801230c:	d8812317 	ldw	r2,1164(sp)
 8012310:	002b883a 	mov	r21,zero
 8012314:	14c00017 	ldw	r19,0(r2)
 8012318:	10800104 	addi	r2,r2,4
 801231c:	d8812315 	stw	r2,1164(sp)
 8012320:	9807883a 	mov	r3,r19
 8012324:	0005883a 	mov	r2,zero
 8012328:	003d4606 	br	8011844 <__alt_data_end+0xfc011844>
 801232c:	1cc00017 	ldw	r19,0(r3)
 8012330:	d8c12317 	ldw	r3,1164(sp)
 8012334:	982bd7fa 	srai	r21,r19,31
 8012338:	18c00104 	addi	r3,r3,4
 801233c:	d8c12315 	stw	r3,1164(sp)
 8012340:	a805883a 	mov	r2,r21
 8012344:	003c8406 	br	8011558 <__alt_data_end+0xfc011558>
 8012348:	010200b4 	movhi	r4,2050
 801234c:	210a6304 	addi	r4,r4,10636
 8012350:	d9012615 	stw	r4,1176(sp)
 8012354:	003d0606 	br	8011770 <__alt_data_end+0xfc011770>
 8012358:	b9800043 	ldbu	r6,1(r23)
 801235c:	94800814 	ori	r18,r18,32
 8012360:	bdc00044 	addi	r23,r23,1
 8012364:	31803fcc 	andi	r6,r6,255
 8012368:	3180201c 	xori	r6,r6,128
 801236c:	31bfe004 	addi	r6,r6,-128
 8012370:	003ba806 	br	8011214 <__alt_data_end+0xfc011214>
 8012374:	d8811e17 	ldw	r2,1144(sp)
 8012378:	d8c12217 	ldw	r3,1160(sp)
 801237c:	10e9c83a 	sub	r20,r2,r3
 8012380:	003c9406 	br	80115d4 <__alt_data_end+0xfc0115d4>
 8012384:	da012a15 	stw	r8,1192(sp)
 8012388:	8006e040 	call	8006e04 <strlen>
 801238c:	1029883a 	mov	r20,r2
 8012390:	dd811d83 	ldbu	r22,1142(sp)
 8012394:	dcc12315 	stw	r19,1164(sp)
 8012398:	0021883a 	mov	r16,zero
 801239c:	da012a17 	ldw	r8,1192(sp)
 80123a0:	003c8c06 	br	80115d4 <__alt_data_end+0xfc0115d4>
 80123a4:	d9012117 	ldw	r4,1156(sp)
 80123a8:	d9412017 	ldw	r5,1152(sp)
 80123ac:	d9811a04 	addi	r6,sp,1128
 80123b0:	8010f7c0 	call	8010f7c <__sprint_r.part.0>
 80123b4:	103e521e 	bne	r2,zero,8011d00 <__alt_data_end+0xfc011d00>
 80123b8:	d9411b17 	ldw	r5,1132(sp)
 80123bc:	d8c11c17 	ldw	r3,1136(sp)
 80123c0:	d811883a 	mov	r8,sp
 80123c4:	28800044 	addi	r2,r5,1
 80123c8:	003cce06 	br	8011704 <__alt_data_end+0xfc011704>
 80123cc:	014200b4 	movhi	r5,2050
 80123d0:	294a6704 	addi	r5,r5,10652
 80123d4:	d9412615 	stw	r5,1176(sp)
 80123d8:	d9411b17 	ldw	r5,1132(sp)
 80123dc:	29400044 	addi	r5,r5,1
 80123e0:	003cad06 	br	8011698 <__alt_data_end+0xfc011698>
 80123e4:	00800184 	movi	r2,6
 80123e8:	1400012e 	bgeu	r2,r16,80123f0 <___vfiprintf_internal_r+0x1360>
 80123ec:	1021883a 	mov	r16,r2
 80123f0:	8029883a 	mov	r20,r16
 80123f4:	802b883a 	mov	r21,r16
 80123f8:	80001c16 	blt	r16,zero,801246c <___vfiprintf_internal_r+0x13dc>
 80123fc:	00c200b4 	movhi	r3,2050
 8012400:	18c9f704 	addi	r3,r3,10204
 8012404:	dcc12315 	stw	r19,1164(sp)
 8012408:	d8c12215 	stw	r3,1160(sp)
 801240c:	003cff06 	br	801180c <__alt_data_end+0xfc01180c>
 8012410:	d9411b17 	ldw	r5,1132(sp)
 8012414:	008200b4 	movhi	r2,2050
 8012418:	108a6704 	addi	r2,r2,10652
 801241c:	d8812615 	stw	r2,1176(sp)
 8012420:	29400044 	addi	r5,r5,1
 8012424:	003e6706 	br	8011dc4 <__alt_data_end+0xfc011dc4>
 8012428:	d9012317 	ldw	r4,1164(sp)
 801242c:	d9412517 	ldw	r5,1172(sp)
 8012430:	20800017 	ldw	r2,0(r4)
 8012434:	21000104 	addi	r4,r4,4
 8012438:	d9012315 	stw	r4,1164(sp)
 801243c:	11400015 	stw	r5,0(r2)
 8012440:	003b4b06 	br	8011170 <__alt_data_end+0xfc011170>
 8012444:	8029883a 	mov	r20,r16
 8012448:	dd811d83 	ldbu	r22,1142(sp)
 801244c:	dcc12315 	stw	r19,1164(sp)
 8012450:	0021883a 	mov	r16,zero
 8012454:	003c5f06 	br	80115d4 <__alt_data_end+0xfc0115d4>
 8012458:	010200b4 	movhi	r4,2050
 801245c:	210a6304 	addi	r4,r4,10636
 8012460:	d9012615 	stw	r4,1176(sp)
 8012464:	1009883a 	mov	r4,r2
 8012468:	003ea006 	br	8011eec <__alt_data_end+0xfc011eec>
 801246c:	002b883a 	mov	r21,zero
 8012470:	003fe206 	br	80123fc <__alt_data_end+0xfc0123fc>
 8012474:	d9412317 	ldw	r5,1164(sp)
 8012478:	b807883a 	mov	r3,r23
 801247c:	102f883a 	mov	r23,r2
 8012480:	2c000017 	ldw	r16,0(r5)
 8012484:	29000104 	addi	r4,r5,4
 8012488:	d9012315 	stw	r4,1164(sp)
 801248c:	80000416 	blt	r16,zero,80124a0 <___vfiprintf_internal_r+0x1410>
 8012490:	19800047 	ldb	r6,1(r3)
 8012494:	003b5f06 	br	8011214 <__alt_data_end+0xfc011214>
 8012498:	043fffc4 	movi	r16,-1
 801249c:	003bef06 	br	801145c <__alt_data_end+0xfc01145c>
 80124a0:	043fffc4 	movi	r16,-1
 80124a4:	19800047 	ldb	r6,1(r3)
 80124a8:	003b5a06 	br	8011214 <__alt_data_end+0xfc011214>
 80124ac:	282b883a 	mov	r21,r5
 80124b0:	003cc706 	br	80117d0 <__alt_data_end+0xfc0117d0>

080124b4 <__vfiprintf_internal>:
 80124b4:	2007883a 	mov	r3,r4
 80124b8:	010200b4 	movhi	r4,2050
 80124bc:	21113704 	addi	r4,r4,17628
 80124c0:	21000017 	ldw	r4,0(r4)
 80124c4:	2805883a 	mov	r2,r5
 80124c8:	300f883a 	mov	r7,r6
 80124cc:	180b883a 	mov	r5,r3
 80124d0:	100d883a 	mov	r6,r2
 80124d4:	80110901 	jmpi	8011090 <___vfiprintf_internal_r>

080124d8 <__swbuf_r>:
 80124d8:	defffc04 	addi	sp,sp,-16
 80124dc:	dc800215 	stw	r18,8(sp)
 80124e0:	dc400115 	stw	r17,4(sp)
 80124e4:	dc000015 	stw	r16,0(sp)
 80124e8:	dfc00315 	stw	ra,12(sp)
 80124ec:	2025883a 	mov	r18,r4
 80124f0:	2823883a 	mov	r17,r5
 80124f4:	3021883a 	mov	r16,r6
 80124f8:	20000226 	beq	r4,zero,8012504 <__swbuf_r+0x2c>
 80124fc:	20800e17 	ldw	r2,56(r4)
 8012500:	10004126 	beq	r2,zero,8012608 <__swbuf_r+0x130>
 8012504:	80c00617 	ldw	r3,24(r16)
 8012508:	8180030b 	ldhu	r6,12(r16)
 801250c:	80c00215 	stw	r3,8(r16)
 8012510:	30c0020c 	andi	r3,r6,8
 8012514:	18003526 	beq	r3,zero,80125ec <__swbuf_r+0x114>
 8012518:	80c00417 	ldw	r3,16(r16)
 801251c:	18003326 	beq	r3,zero,80125ec <__swbuf_r+0x114>
 8012520:	3088000c 	andi	r2,r6,8192
 8012524:	8c403fcc 	andi	r17,r17,255
 8012528:	10001726 	beq	r2,zero,8012588 <__swbuf_r+0xb0>
 801252c:	80800017 	ldw	r2,0(r16)
 8012530:	81000517 	ldw	r4,20(r16)
 8012534:	10c7c83a 	sub	r3,r2,r3
 8012538:	19001d0e 	bge	r3,r4,80125b0 <__swbuf_r+0xd8>
 801253c:	18c00044 	addi	r3,r3,1
 8012540:	81400217 	ldw	r5,8(r16)
 8012544:	11000044 	addi	r4,r2,1
 8012548:	81000015 	stw	r4,0(r16)
 801254c:	297fffc4 	addi	r5,r5,-1
 8012550:	81400215 	stw	r5,8(r16)
 8012554:	14400005 	stb	r17,0(r2)
 8012558:	80800517 	ldw	r2,20(r16)
 801255c:	10c01d26 	beq	r2,r3,80125d4 <__swbuf_r+0xfc>
 8012560:	8080030b 	ldhu	r2,12(r16)
 8012564:	1080004c 	andi	r2,r2,1
 8012568:	1000181e 	bne	r2,zero,80125cc <__swbuf_r+0xf4>
 801256c:	8805883a 	mov	r2,r17
 8012570:	dfc00317 	ldw	ra,12(sp)
 8012574:	dc800217 	ldw	r18,8(sp)
 8012578:	dc400117 	ldw	r17,4(sp)
 801257c:	dc000017 	ldw	r16,0(sp)
 8012580:	dec00404 	addi	sp,sp,16
 8012584:	f800283a 	ret
 8012588:	81001917 	ldw	r4,100(r16)
 801258c:	00b7ffc4 	movi	r2,-8193
 8012590:	31880014 	ori	r6,r6,8192
 8012594:	2084703a 	and	r2,r4,r2
 8012598:	80801915 	stw	r2,100(r16)
 801259c:	80800017 	ldw	r2,0(r16)
 80125a0:	81000517 	ldw	r4,20(r16)
 80125a4:	8180030d 	sth	r6,12(r16)
 80125a8:	10c7c83a 	sub	r3,r2,r3
 80125ac:	193fe316 	blt	r3,r4,801253c <__alt_data_end+0xfc01253c>
 80125b0:	9009883a 	mov	r4,r18
 80125b4:	800b883a 	mov	r5,r16
 80125b8:	800cbb40 	call	800cbb4 <_fflush_r>
 80125bc:	1000091e 	bne	r2,zero,80125e4 <__swbuf_r+0x10c>
 80125c0:	80800017 	ldw	r2,0(r16)
 80125c4:	00c00044 	movi	r3,1
 80125c8:	003fdd06 	br	8012540 <__alt_data_end+0xfc012540>
 80125cc:	00800284 	movi	r2,10
 80125d0:	88bfe61e 	bne	r17,r2,801256c <__alt_data_end+0xfc01256c>
 80125d4:	9009883a 	mov	r4,r18
 80125d8:	800b883a 	mov	r5,r16
 80125dc:	800cbb40 	call	800cbb4 <_fflush_r>
 80125e0:	103fe226 	beq	r2,zero,801256c <__alt_data_end+0xfc01256c>
 80125e4:	00bfffc4 	movi	r2,-1
 80125e8:	003fe106 	br	8012570 <__alt_data_end+0xfc012570>
 80125ec:	9009883a 	mov	r4,r18
 80125f0:	800b883a 	mov	r5,r16
 80125f4:	800b1340 	call	800b134 <__swsetup_r>
 80125f8:	1000051e 	bne	r2,zero,8012610 <__swbuf_r+0x138>
 80125fc:	8180030b 	ldhu	r6,12(r16)
 8012600:	80c00417 	ldw	r3,16(r16)
 8012604:	003fc606 	br	8012520 <__alt_data_end+0xfc012520>
 8012608:	800d1700 	call	800d170 <__sinit>
 801260c:	003fbd06 	br	8012504 <__alt_data_end+0xfc012504>
 8012610:	80c0030b 	ldhu	r3,12(r16)
 8012614:	00bfffc4 	movi	r2,-1
 8012618:	18c01014 	ori	r3,r3,64
 801261c:	80c0030d 	sth	r3,12(r16)
 8012620:	00c00244 	movi	r3,9
 8012624:	90c00015 	stw	r3,0(r18)
 8012628:	003fd106 	br	8012570 <__alt_data_end+0xfc012570>

0801262c <__swbuf>:
 801262c:	00c200b4 	movhi	r3,2050
 8012630:	18d13704 	addi	r3,r3,17628
 8012634:	2005883a 	mov	r2,r4
 8012638:	19000017 	ldw	r4,0(r3)
 801263c:	280d883a 	mov	r6,r5
 8012640:	100b883a 	mov	r5,r2
 8012644:	80124d81 	jmpi	80124d8 <__swbuf_r>

08012648 <_write_r>:
 8012648:	defffd04 	addi	sp,sp,-12
 801264c:	dc000015 	stw	r16,0(sp)
 8012650:	040200b4 	movhi	r16,2050
 8012654:	dc400115 	stw	r17,4(sp)
 8012658:	84181204 	addi	r16,r16,24648
 801265c:	2023883a 	mov	r17,r4
 8012660:	2809883a 	mov	r4,r5
 8012664:	300b883a 	mov	r5,r6
 8012668:	380d883a 	mov	r6,r7
 801266c:	dfc00215 	stw	ra,8(sp)
 8012670:	80000015 	stw	zero,0(r16)
 8012674:	8015c100 	call	8015c10 <write>
 8012678:	00ffffc4 	movi	r3,-1
 801267c:	10c00526 	beq	r2,r3,8012694 <_write_r+0x4c>
 8012680:	dfc00217 	ldw	ra,8(sp)
 8012684:	dc400117 	ldw	r17,4(sp)
 8012688:	dc000017 	ldw	r16,0(sp)
 801268c:	dec00304 	addi	sp,sp,12
 8012690:	f800283a 	ret
 8012694:	80c00017 	ldw	r3,0(r16)
 8012698:	183ff926 	beq	r3,zero,8012680 <__alt_data_end+0xfc012680>
 801269c:	88c00015 	stw	r3,0(r17)
 80126a0:	003ff706 	br	8012680 <__alt_data_end+0xfc012680>

080126a4 <_close_r>:
 80126a4:	defffd04 	addi	sp,sp,-12
 80126a8:	dc000015 	stw	r16,0(sp)
 80126ac:	040200b4 	movhi	r16,2050
 80126b0:	dc400115 	stw	r17,4(sp)
 80126b4:	84181204 	addi	r16,r16,24648
 80126b8:	2023883a 	mov	r17,r4
 80126bc:	2809883a 	mov	r4,r5
 80126c0:	dfc00215 	stw	ra,8(sp)
 80126c4:	80000015 	stw	zero,0(r16)
 80126c8:	8014f8c0 	call	8014f8c <close>
 80126cc:	00ffffc4 	movi	r3,-1
 80126d0:	10c00526 	beq	r2,r3,80126e8 <_close_r+0x44>
 80126d4:	dfc00217 	ldw	ra,8(sp)
 80126d8:	dc400117 	ldw	r17,4(sp)
 80126dc:	dc000017 	ldw	r16,0(sp)
 80126e0:	dec00304 	addi	sp,sp,12
 80126e4:	f800283a 	ret
 80126e8:	80c00017 	ldw	r3,0(r16)
 80126ec:	183ff926 	beq	r3,zero,80126d4 <__alt_data_end+0xfc0126d4>
 80126f0:	88c00015 	stw	r3,0(r17)
 80126f4:	003ff706 	br	80126d4 <__alt_data_end+0xfc0126d4>

080126f8 <_calloc_r>:
 80126f8:	defffe04 	addi	sp,sp,-8
 80126fc:	dc000015 	stw	r16,0(sp)
 8012700:	2021883a 	mov	r16,r4
 8012704:	2809883a 	mov	r4,r5
 8012708:	300b883a 	mov	r5,r6
 801270c:	dfc00115 	stw	ra,4(sp)
 8012710:	80040900 	call	8004090 <__mulsi3>
 8012714:	8009883a 	mov	r4,r16
 8012718:	100b883a 	mov	r5,r2
 801271c:	8005e100 	call	8005e10 <_malloc_r>
 8012720:	1021883a 	mov	r16,r2
 8012724:	10002826 	beq	r2,zero,80127c8 <_calloc_r+0xd0>
 8012728:	11bfff17 	ldw	r6,-4(r2)
 801272c:	00bfff04 	movi	r2,-4
 8012730:	00c00904 	movi	r3,36
 8012734:	308c703a 	and	r6,r6,r2
 8012738:	308d883a 	add	r6,r6,r2
 801273c:	19801436 	bltu	r3,r6,8012790 <_calloc_r+0x98>
 8012740:	008004c4 	movi	r2,19
 8012744:	11800936 	bltu	r2,r6,801276c <_calloc_r+0x74>
 8012748:	8005883a 	mov	r2,r16
 801274c:	10000015 	stw	zero,0(r2)
 8012750:	10000115 	stw	zero,4(r2)
 8012754:	10000215 	stw	zero,8(r2)
 8012758:	8005883a 	mov	r2,r16
 801275c:	dfc00117 	ldw	ra,4(sp)
 8012760:	dc000017 	ldw	r16,0(sp)
 8012764:	dec00204 	addi	sp,sp,8
 8012768:	f800283a 	ret
 801276c:	80000015 	stw	zero,0(r16)
 8012770:	80000115 	stw	zero,4(r16)
 8012774:	008006c4 	movi	r2,27
 8012778:	11800d2e 	bgeu	r2,r6,80127b0 <_calloc_r+0xb8>
 801277c:	80000215 	stw	zero,8(r16)
 8012780:	80000315 	stw	zero,12(r16)
 8012784:	30c00c26 	beq	r6,r3,80127b8 <_calloc_r+0xc0>
 8012788:	80800404 	addi	r2,r16,16
 801278c:	003fef06 	br	801274c <__alt_data_end+0xfc01274c>
 8012790:	8009883a 	mov	r4,r16
 8012794:	000b883a 	mov	r5,zero
 8012798:	800e11c0 	call	800e11c <memset>
 801279c:	8005883a 	mov	r2,r16
 80127a0:	dfc00117 	ldw	ra,4(sp)
 80127a4:	dc000017 	ldw	r16,0(sp)
 80127a8:	dec00204 	addi	sp,sp,8
 80127ac:	f800283a 	ret
 80127b0:	80800204 	addi	r2,r16,8
 80127b4:	003fe506 	br	801274c <__alt_data_end+0xfc01274c>
 80127b8:	80000415 	stw	zero,16(r16)
 80127bc:	80800604 	addi	r2,r16,24
 80127c0:	80000515 	stw	zero,20(r16)
 80127c4:	003fe106 	br	801274c <__alt_data_end+0xfc01274c>
 80127c8:	0005883a 	mov	r2,zero
 80127cc:	003fe306 	br	801275c <__alt_data_end+0xfc01275c>

080127d0 <_fclose_r>:
 80127d0:	28003226 	beq	r5,zero,801289c <_fclose_r+0xcc>
 80127d4:	defffc04 	addi	sp,sp,-16
 80127d8:	dc400115 	stw	r17,4(sp)
 80127dc:	2023883a 	mov	r17,r4
 80127e0:	dc000015 	stw	r16,0(sp)
 80127e4:	dfc00315 	stw	ra,12(sp)
 80127e8:	dc800215 	stw	r18,8(sp)
 80127ec:	2821883a 	mov	r16,r5
 80127f0:	800d1800 	call	800d180 <__sfp_lock_acquire>
 80127f4:	88000226 	beq	r17,zero,8012800 <_fclose_r+0x30>
 80127f8:	88800e17 	ldw	r2,56(r17)
 80127fc:	10002926 	beq	r2,zero,80128a4 <_fclose_r+0xd4>
 8012800:	8080030f 	ldh	r2,12(r16)
 8012804:	10002226 	beq	r2,zero,8012890 <_fclose_r+0xc0>
 8012808:	8809883a 	mov	r4,r17
 801280c:	800b883a 	mov	r5,r16
 8012810:	800cbb40 	call	800cbb4 <_fflush_r>
 8012814:	1025883a 	mov	r18,r2
 8012818:	80800b17 	ldw	r2,44(r16)
 801281c:	10000426 	beq	r2,zero,8012830 <_fclose_r+0x60>
 8012820:	81400717 	ldw	r5,28(r16)
 8012824:	8809883a 	mov	r4,r17
 8012828:	103ee83a 	callr	r2
 801282c:	10002616 	blt	r2,zero,80128c8 <_fclose_r+0xf8>
 8012830:	8080030b 	ldhu	r2,12(r16)
 8012834:	1080200c 	andi	r2,r2,128
 8012838:	10001f1e 	bne	r2,zero,80128b8 <_fclose_r+0xe8>
 801283c:	81400c17 	ldw	r5,48(r16)
 8012840:	28000526 	beq	r5,zero,8012858 <_fclose_r+0x88>
 8012844:	80801004 	addi	r2,r16,64
 8012848:	28800226 	beq	r5,r2,8012854 <_fclose_r+0x84>
 801284c:	8809883a 	mov	r4,r17
 8012850:	800d2e40 	call	800d2e4 <_free_r>
 8012854:	80000c15 	stw	zero,48(r16)
 8012858:	81401117 	ldw	r5,68(r16)
 801285c:	28000326 	beq	r5,zero,801286c <_fclose_r+0x9c>
 8012860:	8809883a 	mov	r4,r17
 8012864:	800d2e40 	call	800d2e4 <_free_r>
 8012868:	80001115 	stw	zero,68(r16)
 801286c:	8000030d 	sth	zero,12(r16)
 8012870:	800d1840 	call	800d184 <__sfp_lock_release>
 8012874:	9005883a 	mov	r2,r18
 8012878:	dfc00317 	ldw	ra,12(sp)
 801287c:	dc800217 	ldw	r18,8(sp)
 8012880:	dc400117 	ldw	r17,4(sp)
 8012884:	dc000017 	ldw	r16,0(sp)
 8012888:	dec00404 	addi	sp,sp,16
 801288c:	f800283a 	ret
 8012890:	800d1840 	call	800d184 <__sfp_lock_release>
 8012894:	0005883a 	mov	r2,zero
 8012898:	003ff706 	br	8012878 <__alt_data_end+0xfc012878>
 801289c:	0005883a 	mov	r2,zero
 80128a0:	f800283a 	ret
 80128a4:	8809883a 	mov	r4,r17
 80128a8:	800d1700 	call	800d170 <__sinit>
 80128ac:	8080030f 	ldh	r2,12(r16)
 80128b0:	103fd51e 	bne	r2,zero,8012808 <__alt_data_end+0xfc012808>
 80128b4:	003ff606 	br	8012890 <__alt_data_end+0xfc012890>
 80128b8:	81400417 	ldw	r5,16(r16)
 80128bc:	8809883a 	mov	r4,r17
 80128c0:	800d2e40 	call	800d2e4 <_free_r>
 80128c4:	003fdd06 	br	801283c <__alt_data_end+0xfc01283c>
 80128c8:	04bfffc4 	movi	r18,-1
 80128cc:	003fd806 	br	8012830 <__alt_data_end+0xfc012830>

080128d0 <fclose>:
 80128d0:	008200b4 	movhi	r2,2050
 80128d4:	10913704 	addi	r2,r2,17628
 80128d8:	200b883a 	mov	r5,r4
 80128dc:	11000017 	ldw	r4,0(r2)
 80128e0:	80127d01 	jmpi	80127d0 <_fclose_r>

080128e4 <_fputwc_r>:
 80128e4:	3080030b 	ldhu	r2,12(r6)
 80128e8:	defff804 	addi	sp,sp,-32
 80128ec:	dcc00415 	stw	r19,16(sp)
 80128f0:	dc800315 	stw	r18,12(sp)
 80128f4:	dc000115 	stw	r16,4(sp)
 80128f8:	dfc00715 	stw	ra,28(sp)
 80128fc:	dd400615 	stw	r21,24(sp)
 8012900:	dd000515 	stw	r20,20(sp)
 8012904:	dc400215 	stw	r17,8(sp)
 8012908:	10c8000c 	andi	r3,r2,8192
 801290c:	3021883a 	mov	r16,r6
 8012910:	2027883a 	mov	r19,r4
 8012914:	2825883a 	mov	r18,r5
 8012918:	1800051e 	bne	r3,zero,8012930 <_fputwc_r+0x4c>
 801291c:	30c01917 	ldw	r3,100(r6)
 8012920:	10880014 	ori	r2,r2,8192
 8012924:	3080030d 	sth	r2,12(r6)
 8012928:	18880014 	ori	r2,r3,8192
 801292c:	30801915 	stw	r2,100(r6)
 8012930:	800dcc80 	call	800dcc8 <__locale_mb_cur_max>
 8012934:	00c00044 	movi	r3,1
 8012938:	10c03e26 	beq	r2,r3,8012a34 <_fputwc_r+0x150>
 801293c:	9809883a 	mov	r4,r19
 8012940:	d80b883a 	mov	r5,sp
 8012944:	900d883a 	mov	r6,r18
 8012948:	81c01704 	addi	r7,r16,92
 801294c:	8012c240 	call	8012c24 <_wcrtomb_r>
 8012950:	1029883a 	mov	r20,r2
 8012954:	00bfffc4 	movi	r2,-1
 8012958:	a0802026 	beq	r20,r2,80129dc <_fputwc_r+0xf8>
 801295c:	d9400003 	ldbu	r5,0(sp)
 8012960:	a0001c26 	beq	r20,zero,80129d4 <_fputwc_r+0xf0>
 8012964:	0023883a 	mov	r17,zero
 8012968:	05400284 	movi	r21,10
 801296c:	00000906 	br	8012994 <_fputwc_r+0xb0>
 8012970:	80800017 	ldw	r2,0(r16)
 8012974:	11400005 	stb	r5,0(r2)
 8012978:	80c00017 	ldw	r3,0(r16)
 801297c:	18c00044 	addi	r3,r3,1
 8012980:	80c00015 	stw	r3,0(r16)
 8012984:	8c400044 	addi	r17,r17,1
 8012988:	dc45883a 	add	r2,sp,r17
 801298c:	8d00112e 	bgeu	r17,r20,80129d4 <_fputwc_r+0xf0>
 8012990:	11400003 	ldbu	r5,0(r2)
 8012994:	80c00217 	ldw	r3,8(r16)
 8012998:	18ffffc4 	addi	r3,r3,-1
 801299c:	80c00215 	stw	r3,8(r16)
 80129a0:	183ff30e 	bge	r3,zero,8012970 <__alt_data_end+0xfc012970>
 80129a4:	80800617 	ldw	r2,24(r16)
 80129a8:	18801916 	blt	r3,r2,8012a10 <_fputwc_r+0x12c>
 80129ac:	80800017 	ldw	r2,0(r16)
 80129b0:	11400005 	stb	r5,0(r2)
 80129b4:	80800017 	ldw	r2,0(r16)
 80129b8:	10c00003 	ldbu	r3,0(r2)
 80129bc:	10800044 	addi	r2,r2,1
 80129c0:	1d402326 	beq	r3,r21,8012a50 <_fputwc_r+0x16c>
 80129c4:	80800015 	stw	r2,0(r16)
 80129c8:	8c400044 	addi	r17,r17,1
 80129cc:	dc45883a 	add	r2,sp,r17
 80129d0:	8d3fef36 	bltu	r17,r20,8012990 <__alt_data_end+0xfc012990>
 80129d4:	9005883a 	mov	r2,r18
 80129d8:	00000406 	br	80129ec <_fputwc_r+0x108>
 80129dc:	80c0030b 	ldhu	r3,12(r16)
 80129e0:	a005883a 	mov	r2,r20
 80129e4:	18c01014 	ori	r3,r3,64
 80129e8:	80c0030d 	sth	r3,12(r16)
 80129ec:	dfc00717 	ldw	ra,28(sp)
 80129f0:	dd400617 	ldw	r21,24(sp)
 80129f4:	dd000517 	ldw	r20,20(sp)
 80129f8:	dcc00417 	ldw	r19,16(sp)
 80129fc:	dc800317 	ldw	r18,12(sp)
 8012a00:	dc400217 	ldw	r17,8(sp)
 8012a04:	dc000117 	ldw	r16,4(sp)
 8012a08:	dec00804 	addi	sp,sp,32
 8012a0c:	f800283a 	ret
 8012a10:	9809883a 	mov	r4,r19
 8012a14:	29403fcc 	andi	r5,r5,255
 8012a18:	800d883a 	mov	r6,r16
 8012a1c:	80124d80 	call	80124d8 <__swbuf_r>
 8012a20:	10bfffe0 	cmpeqi	r2,r2,-1
 8012a24:	10803fcc 	andi	r2,r2,255
 8012a28:	103fd626 	beq	r2,zero,8012984 <__alt_data_end+0xfc012984>
 8012a2c:	00bfffc4 	movi	r2,-1
 8012a30:	003fee06 	br	80129ec <__alt_data_end+0xfc0129ec>
 8012a34:	90ffffc4 	addi	r3,r18,-1
 8012a38:	01003f84 	movi	r4,254
 8012a3c:	20ffbf36 	bltu	r4,r3,801293c <__alt_data_end+0xfc01293c>
 8012a40:	900b883a 	mov	r5,r18
 8012a44:	dc800005 	stb	r18,0(sp)
 8012a48:	1029883a 	mov	r20,r2
 8012a4c:	003fc506 	br	8012964 <__alt_data_end+0xfc012964>
 8012a50:	9809883a 	mov	r4,r19
 8012a54:	a80b883a 	mov	r5,r21
 8012a58:	800d883a 	mov	r6,r16
 8012a5c:	80124d80 	call	80124d8 <__swbuf_r>
 8012a60:	10bfffe0 	cmpeqi	r2,r2,-1
 8012a64:	003fef06 	br	8012a24 <__alt_data_end+0xfc012a24>

08012a68 <fputwc>:
 8012a68:	defffc04 	addi	sp,sp,-16
 8012a6c:	dc000115 	stw	r16,4(sp)
 8012a70:	040200b4 	movhi	r16,2050
 8012a74:	84113704 	addi	r16,r16,17628
 8012a78:	dc400215 	stw	r17,8(sp)
 8012a7c:	2023883a 	mov	r17,r4
 8012a80:	81000017 	ldw	r4,0(r16)
 8012a84:	dfc00315 	stw	ra,12(sp)
 8012a88:	280d883a 	mov	r6,r5
 8012a8c:	20000626 	beq	r4,zero,8012aa8 <fputwc+0x40>
 8012a90:	20800e17 	ldw	r2,56(r4)
 8012a94:	1000041e 	bne	r2,zero,8012aa8 <fputwc+0x40>
 8012a98:	d9400015 	stw	r5,0(sp)
 8012a9c:	800d1700 	call	800d170 <__sinit>
 8012aa0:	81000017 	ldw	r4,0(r16)
 8012aa4:	d9800017 	ldw	r6,0(sp)
 8012aa8:	880b883a 	mov	r5,r17
 8012aac:	dfc00317 	ldw	ra,12(sp)
 8012ab0:	dc400217 	ldw	r17,8(sp)
 8012ab4:	dc000117 	ldw	r16,4(sp)
 8012ab8:	dec00404 	addi	sp,sp,16
 8012abc:	80128e41 	jmpi	80128e4 <_fputwc_r>

08012ac0 <_fstat_r>:
 8012ac0:	defffd04 	addi	sp,sp,-12
 8012ac4:	dc000015 	stw	r16,0(sp)
 8012ac8:	040200b4 	movhi	r16,2050
 8012acc:	dc400115 	stw	r17,4(sp)
 8012ad0:	84181204 	addi	r16,r16,24648
 8012ad4:	2023883a 	mov	r17,r4
 8012ad8:	2809883a 	mov	r4,r5
 8012adc:	300b883a 	mov	r5,r6
 8012ae0:	dfc00215 	stw	ra,8(sp)
 8012ae4:	80000015 	stw	zero,0(r16)
 8012ae8:	80150e00 	call	80150e0 <fstat>
 8012aec:	00ffffc4 	movi	r3,-1
 8012af0:	10c00526 	beq	r2,r3,8012b08 <_fstat_r+0x48>
 8012af4:	dfc00217 	ldw	ra,8(sp)
 8012af8:	dc400117 	ldw	r17,4(sp)
 8012afc:	dc000017 	ldw	r16,0(sp)
 8012b00:	dec00304 	addi	sp,sp,12
 8012b04:	f800283a 	ret
 8012b08:	80c00017 	ldw	r3,0(r16)
 8012b0c:	183ff926 	beq	r3,zero,8012af4 <__alt_data_end+0xfc012af4>
 8012b10:	88c00015 	stw	r3,0(r17)
 8012b14:	003ff706 	br	8012af4 <__alt_data_end+0xfc012af4>

08012b18 <_isatty_r>:
 8012b18:	defffd04 	addi	sp,sp,-12
 8012b1c:	dc000015 	stw	r16,0(sp)
 8012b20:	040200b4 	movhi	r16,2050
 8012b24:	dc400115 	stw	r17,4(sp)
 8012b28:	84181204 	addi	r16,r16,24648
 8012b2c:	2023883a 	mov	r17,r4
 8012b30:	2809883a 	mov	r4,r5
 8012b34:	dfc00215 	stw	ra,8(sp)
 8012b38:	80000015 	stw	zero,0(r16)
 8012b3c:	80153fc0 	call	80153fc <isatty>
 8012b40:	00ffffc4 	movi	r3,-1
 8012b44:	10c00526 	beq	r2,r3,8012b5c <_isatty_r+0x44>
 8012b48:	dfc00217 	ldw	ra,8(sp)
 8012b4c:	dc400117 	ldw	r17,4(sp)
 8012b50:	dc000017 	ldw	r16,0(sp)
 8012b54:	dec00304 	addi	sp,sp,12
 8012b58:	f800283a 	ret
 8012b5c:	80c00017 	ldw	r3,0(r16)
 8012b60:	183ff926 	beq	r3,zero,8012b48 <__alt_data_end+0xfc012b48>
 8012b64:	88c00015 	stw	r3,0(r17)
 8012b68:	003ff706 	br	8012b48 <__alt_data_end+0xfc012b48>

08012b6c <_lseek_r>:
 8012b6c:	defffd04 	addi	sp,sp,-12
 8012b70:	dc000015 	stw	r16,0(sp)
 8012b74:	040200b4 	movhi	r16,2050
 8012b78:	dc400115 	stw	r17,4(sp)
 8012b7c:	84181204 	addi	r16,r16,24648
 8012b80:	2023883a 	mov	r17,r4
 8012b84:	2809883a 	mov	r4,r5
 8012b88:	300b883a 	mov	r5,r6
 8012b8c:	380d883a 	mov	r6,r7
 8012b90:	dfc00215 	stw	ra,8(sp)
 8012b94:	80000015 	stw	zero,0(r16)
 8012b98:	80155dc0 	call	80155dc <lseek>
 8012b9c:	00ffffc4 	movi	r3,-1
 8012ba0:	10c00526 	beq	r2,r3,8012bb8 <_lseek_r+0x4c>
 8012ba4:	dfc00217 	ldw	ra,8(sp)
 8012ba8:	dc400117 	ldw	r17,4(sp)
 8012bac:	dc000017 	ldw	r16,0(sp)
 8012bb0:	dec00304 	addi	sp,sp,12
 8012bb4:	f800283a 	ret
 8012bb8:	80c00017 	ldw	r3,0(r16)
 8012bbc:	183ff926 	beq	r3,zero,8012ba4 <__alt_data_end+0xfc012ba4>
 8012bc0:	88c00015 	stw	r3,0(r17)
 8012bc4:	003ff706 	br	8012ba4 <__alt_data_end+0xfc012ba4>

08012bc8 <_read_r>:
 8012bc8:	defffd04 	addi	sp,sp,-12
 8012bcc:	dc000015 	stw	r16,0(sp)
 8012bd0:	040200b4 	movhi	r16,2050
 8012bd4:	dc400115 	stw	r17,4(sp)
 8012bd8:	84181204 	addi	r16,r16,24648
 8012bdc:	2023883a 	mov	r17,r4
 8012be0:	2809883a 	mov	r4,r5
 8012be4:	300b883a 	mov	r5,r6
 8012be8:	380d883a 	mov	r6,r7
 8012bec:	dfc00215 	stw	ra,8(sp)
 8012bf0:	80000015 	stw	zero,0(r16)
 8012bf4:	80157c00 	call	80157c0 <read>
 8012bf8:	00ffffc4 	movi	r3,-1
 8012bfc:	10c00526 	beq	r2,r3,8012c14 <_read_r+0x4c>
 8012c00:	dfc00217 	ldw	ra,8(sp)
 8012c04:	dc400117 	ldw	r17,4(sp)
 8012c08:	dc000017 	ldw	r16,0(sp)
 8012c0c:	dec00304 	addi	sp,sp,12
 8012c10:	f800283a 	ret
 8012c14:	80c00017 	ldw	r3,0(r16)
 8012c18:	183ff926 	beq	r3,zero,8012c00 <__alt_data_end+0xfc012c00>
 8012c1c:	88c00015 	stw	r3,0(r17)
 8012c20:	003ff706 	br	8012c00 <__alt_data_end+0xfc012c00>

08012c24 <_wcrtomb_r>:
 8012c24:	defff604 	addi	sp,sp,-40
 8012c28:	008200b4 	movhi	r2,2050
 8012c2c:	dc800815 	stw	r18,32(sp)
 8012c30:	dc400715 	stw	r17,28(sp)
 8012c34:	dc000615 	stw	r16,24(sp)
 8012c38:	10913904 	addi	r2,r2,17636
 8012c3c:	dfc00915 	stw	ra,36(sp)
 8012c40:	2021883a 	mov	r16,r4
 8012c44:	3823883a 	mov	r17,r7
 8012c48:	14800017 	ldw	r18,0(r2)
 8012c4c:	28001426 	beq	r5,zero,8012ca0 <_wcrtomb_r+0x7c>
 8012c50:	d9400415 	stw	r5,16(sp)
 8012c54:	d9800515 	stw	r6,20(sp)
 8012c58:	800dcbc0 	call	800dcbc <__locale_charset>
 8012c5c:	d9400417 	ldw	r5,16(sp)
 8012c60:	d9800517 	ldw	r6,20(sp)
 8012c64:	8009883a 	mov	r4,r16
 8012c68:	dc400015 	stw	r17,0(sp)
 8012c6c:	100f883a 	mov	r7,r2
 8012c70:	903ee83a 	callr	r18
 8012c74:	00ffffc4 	movi	r3,-1
 8012c78:	10c0031e 	bne	r2,r3,8012c88 <_wcrtomb_r+0x64>
 8012c7c:	88000015 	stw	zero,0(r17)
 8012c80:	00c02284 	movi	r3,138
 8012c84:	80c00015 	stw	r3,0(r16)
 8012c88:	dfc00917 	ldw	ra,36(sp)
 8012c8c:	dc800817 	ldw	r18,32(sp)
 8012c90:	dc400717 	ldw	r17,28(sp)
 8012c94:	dc000617 	ldw	r16,24(sp)
 8012c98:	dec00a04 	addi	sp,sp,40
 8012c9c:	f800283a 	ret
 8012ca0:	800dcbc0 	call	800dcbc <__locale_charset>
 8012ca4:	8009883a 	mov	r4,r16
 8012ca8:	dc400015 	stw	r17,0(sp)
 8012cac:	d9400104 	addi	r5,sp,4
 8012cb0:	000d883a 	mov	r6,zero
 8012cb4:	100f883a 	mov	r7,r2
 8012cb8:	903ee83a 	callr	r18
 8012cbc:	003fed06 	br	8012c74 <__alt_data_end+0xfc012c74>

08012cc0 <wcrtomb>:
 8012cc0:	defff504 	addi	sp,sp,-44
 8012cc4:	dc400515 	stw	r17,20(sp)
 8012cc8:	dc000415 	stw	r16,16(sp)
 8012ccc:	dfc00a15 	stw	ra,40(sp)
 8012cd0:	dd400915 	stw	r21,36(sp)
 8012cd4:	dd000815 	stw	r20,32(sp)
 8012cd8:	dcc00715 	stw	r19,28(sp)
 8012cdc:	dc800615 	stw	r18,24(sp)
 8012ce0:	2021883a 	mov	r16,r4
 8012ce4:	3023883a 	mov	r17,r6
 8012ce8:	20001d26 	beq	r4,zero,8012d60 <wcrtomb+0xa0>
 8012cec:	048200b4 	movhi	r18,2050
 8012cf0:	94913704 	addi	r18,r18,17628
 8012cf4:	008200b4 	movhi	r2,2050
 8012cf8:	95400017 	ldw	r21,0(r18)
 8012cfc:	10913904 	addi	r2,r2,17636
 8012d00:	15000017 	ldw	r20,0(r2)
 8012d04:	2827883a 	mov	r19,r5
 8012d08:	800dcbc0 	call	800dcbc <__locale_charset>
 8012d0c:	a809883a 	mov	r4,r21
 8012d10:	dc400015 	stw	r17,0(sp)
 8012d14:	800b883a 	mov	r5,r16
 8012d18:	980d883a 	mov	r6,r19
 8012d1c:	100f883a 	mov	r7,r2
 8012d20:	a03ee83a 	callr	r20
 8012d24:	00ffffc4 	movi	r3,-1
 8012d28:	10c0041e 	bne	r2,r3,8012d3c <wcrtomb+0x7c>
 8012d2c:	90c00017 	ldw	r3,0(r18)
 8012d30:	01002284 	movi	r4,138
 8012d34:	88000015 	stw	zero,0(r17)
 8012d38:	19000015 	stw	r4,0(r3)
 8012d3c:	dfc00a17 	ldw	ra,40(sp)
 8012d40:	dd400917 	ldw	r21,36(sp)
 8012d44:	dd000817 	ldw	r20,32(sp)
 8012d48:	dcc00717 	ldw	r19,28(sp)
 8012d4c:	dc800617 	ldw	r18,24(sp)
 8012d50:	dc400517 	ldw	r17,20(sp)
 8012d54:	dc000417 	ldw	r16,16(sp)
 8012d58:	dec00b04 	addi	sp,sp,44
 8012d5c:	f800283a 	ret
 8012d60:	048200b4 	movhi	r18,2050
 8012d64:	94913704 	addi	r18,r18,17628
 8012d68:	008200b4 	movhi	r2,2050
 8012d6c:	94c00017 	ldw	r19,0(r18)
 8012d70:	10913904 	addi	r2,r2,17636
 8012d74:	14000017 	ldw	r16,0(r2)
 8012d78:	800dcbc0 	call	800dcbc <__locale_charset>
 8012d7c:	9809883a 	mov	r4,r19
 8012d80:	dc400015 	stw	r17,0(sp)
 8012d84:	d9400104 	addi	r5,sp,4
 8012d88:	000d883a 	mov	r6,zero
 8012d8c:	100f883a 	mov	r7,r2
 8012d90:	803ee83a 	callr	r16
 8012d94:	003fe306 	br	8012d24 <__alt_data_end+0xfc012d24>

08012d98 <__ascii_wctomb>:
 8012d98:	28000526 	beq	r5,zero,8012db0 <__ascii_wctomb+0x18>
 8012d9c:	00803fc4 	movi	r2,255
 8012da0:	11800536 	bltu	r2,r6,8012db8 <__ascii_wctomb+0x20>
 8012da4:	29800005 	stb	r6,0(r5)
 8012da8:	00800044 	movi	r2,1
 8012dac:	f800283a 	ret
 8012db0:	0005883a 	mov	r2,zero
 8012db4:	f800283a 	ret
 8012db8:	00802284 	movi	r2,138
 8012dbc:	20800015 	stw	r2,0(r4)
 8012dc0:	00bfffc4 	movi	r2,-1
 8012dc4:	f800283a 	ret

08012dc8 <_wctomb_r>:
 8012dc8:	008200b4 	movhi	r2,2050
 8012dcc:	defff904 	addi	sp,sp,-28
 8012dd0:	10913904 	addi	r2,r2,17636
 8012dd4:	dfc00615 	stw	ra,24(sp)
 8012dd8:	dc400515 	stw	r17,20(sp)
 8012ddc:	dc000415 	stw	r16,16(sp)
 8012de0:	3823883a 	mov	r17,r7
 8012de4:	14000017 	ldw	r16,0(r2)
 8012de8:	d9000115 	stw	r4,4(sp)
 8012dec:	d9400215 	stw	r5,8(sp)
 8012df0:	d9800315 	stw	r6,12(sp)
 8012df4:	800dcbc0 	call	800dcbc <__locale_charset>
 8012df8:	d9000117 	ldw	r4,4(sp)
 8012dfc:	d9400217 	ldw	r5,8(sp)
 8012e00:	d9800317 	ldw	r6,12(sp)
 8012e04:	dc400015 	stw	r17,0(sp)
 8012e08:	100f883a 	mov	r7,r2
 8012e0c:	803ee83a 	callr	r16
 8012e10:	dfc00617 	ldw	ra,24(sp)
 8012e14:	dc400517 	ldw	r17,20(sp)
 8012e18:	dc000417 	ldw	r16,16(sp)
 8012e1c:	dec00704 	addi	sp,sp,28
 8012e20:	f800283a 	ret

08012e24 <__muldi3>:
 8012e24:	defff604 	addi	sp,sp,-40
 8012e28:	dd800615 	stw	r22,24(sp)
 8012e2c:	dd400515 	stw	r21,20(sp)
 8012e30:	25bfffcc 	andi	r22,r4,65535
 8012e34:	357fffcc 	andi	r21,r6,65535
 8012e38:	dc400115 	stw	r17,4(sp)
 8012e3c:	2022d43a 	srli	r17,r4,16
 8012e40:	dcc00315 	stw	r19,12(sp)
 8012e44:	dc800215 	stw	r18,8(sp)
 8012e48:	2027883a 	mov	r19,r4
 8012e4c:	2825883a 	mov	r18,r5
 8012e50:	a809883a 	mov	r4,r21
 8012e54:	b00b883a 	mov	r5,r22
 8012e58:	dfc00915 	stw	ra,36(sp)
 8012e5c:	df000815 	stw	fp,32(sp)
 8012e60:	ddc00715 	stw	r23,28(sp)
 8012e64:	3839883a 	mov	fp,r7
 8012e68:	302ed43a 	srli	r23,r6,16
 8012e6c:	dd000415 	stw	r20,16(sp)
 8012e70:	dc000015 	stw	r16,0(sp)
 8012e74:	3029883a 	mov	r20,r6
 8012e78:	80040900 	call	8004090 <__mulsi3>
 8012e7c:	a809883a 	mov	r4,r21
 8012e80:	880b883a 	mov	r5,r17
 8012e84:	1021883a 	mov	r16,r2
 8012e88:	80040900 	call	8004090 <__mulsi3>
 8012e8c:	880b883a 	mov	r5,r17
 8012e90:	b809883a 	mov	r4,r23
 8012e94:	102b883a 	mov	r21,r2
 8012e98:	80040900 	call	8004090 <__mulsi3>
 8012e9c:	b809883a 	mov	r4,r23
 8012ea0:	b00b883a 	mov	r5,r22
 8012ea4:	1023883a 	mov	r17,r2
 8012ea8:	80040900 	call	8004090 <__mulsi3>
 8012eac:	8012d43a 	srli	r9,r16,16
 8012eb0:	a885883a 	add	r2,r21,r2
 8012eb4:	1251883a 	add	r8,r2,r9
 8012eb8:	4540022e 	bgeu	r8,r21,8012ec4 <__muldi3+0xa0>
 8012ebc:	00800074 	movhi	r2,1
 8012ec0:	88a3883a 	add	r17,r17,r2
 8012ec4:	4006d43a 	srli	r3,r8,16
 8012ec8:	4010943a 	slli	r8,r8,16
 8012ecc:	9809883a 	mov	r4,r19
 8012ed0:	e00b883a 	mov	r5,fp
 8012ed4:	843fffcc 	andi	r16,r16,65535
 8012ed8:	88e3883a 	add	r17,r17,r3
 8012edc:	4421883a 	add	r16,r8,r16
 8012ee0:	80040900 	call	8004090 <__mulsi3>
 8012ee4:	a009883a 	mov	r4,r20
 8012ee8:	900b883a 	mov	r5,r18
 8012eec:	1027883a 	mov	r19,r2
 8012ef0:	80040900 	call	8004090 <__mulsi3>
 8012ef4:	9885883a 	add	r2,r19,r2
 8012ef8:	1447883a 	add	r3,r2,r17
 8012efc:	8005883a 	mov	r2,r16
 8012f00:	dfc00917 	ldw	ra,36(sp)
 8012f04:	df000817 	ldw	fp,32(sp)
 8012f08:	ddc00717 	ldw	r23,28(sp)
 8012f0c:	dd800617 	ldw	r22,24(sp)
 8012f10:	dd400517 	ldw	r21,20(sp)
 8012f14:	dd000417 	ldw	r20,16(sp)
 8012f18:	dcc00317 	ldw	r19,12(sp)
 8012f1c:	dc800217 	ldw	r18,8(sp)
 8012f20:	dc400117 	ldw	r17,4(sp)
 8012f24:	dc000017 	ldw	r16,0(sp)
 8012f28:	dec00a04 	addi	sp,sp,40
 8012f2c:	f800283a 	ret

08012f30 <__udivdi3>:
 8012f30:	defff504 	addi	sp,sp,-44
 8012f34:	dcc00415 	stw	r19,16(sp)
 8012f38:	dc000115 	stw	r16,4(sp)
 8012f3c:	dfc00a15 	stw	ra,40(sp)
 8012f40:	df000915 	stw	fp,36(sp)
 8012f44:	ddc00815 	stw	r23,32(sp)
 8012f48:	dd800715 	stw	r22,28(sp)
 8012f4c:	dd400615 	stw	r21,24(sp)
 8012f50:	dd000515 	stw	r20,20(sp)
 8012f54:	dc800315 	stw	r18,12(sp)
 8012f58:	dc400215 	stw	r17,8(sp)
 8012f5c:	2027883a 	mov	r19,r4
 8012f60:	2821883a 	mov	r16,r5
 8012f64:	3800471e 	bne	r7,zero,8013084 <__udivdi3+0x154>
 8012f68:	3025883a 	mov	r18,r6
 8012f6c:	2023883a 	mov	r17,r4
 8012f70:	2980592e 	bgeu	r5,r6,80130d8 <__udivdi3+0x1a8>
 8012f74:	00bfffd4 	movui	r2,65535
 8012f78:	2829883a 	mov	r20,r5
 8012f7c:	1180b236 	bltu	r2,r6,8013248 <__udivdi3+0x318>
 8012f80:	00803fc4 	movi	r2,255
 8012f84:	1181622e 	bgeu	r2,r6,8013510 <__udivdi3+0x5e0>
 8012f88:	00800204 	movi	r2,8
 8012f8c:	1007883a 	mov	r3,r2
 8012f90:	3084d83a 	srl	r2,r6,r2
 8012f94:	010200b4 	movhi	r4,2050
 8012f98:	2109a804 	addi	r4,r4,9888
 8012f9c:	2085883a 	add	r2,r4,r2
 8012fa0:	11000003 	ldbu	r4,0(r2)
 8012fa4:	20c9883a 	add	r4,r4,r3
 8012fa8:	00c00804 	movi	r3,32
 8012fac:	1907c83a 	sub	r3,r3,r4
 8012fb0:	18000526 	beq	r3,zero,8012fc8 <__udivdi3+0x98>
 8012fb4:	80e0983a 	sll	r16,r16,r3
 8012fb8:	9908d83a 	srl	r4,r19,r4
 8012fbc:	30e4983a 	sll	r18,r6,r3
 8012fc0:	98e2983a 	sll	r17,r19,r3
 8012fc4:	8128b03a 	or	r20,r16,r4
 8012fc8:	902ad43a 	srli	r21,r18,16
 8012fcc:	a009883a 	mov	r4,r20
 8012fd0:	95bfffcc 	andi	r22,r18,65535
 8012fd4:	a80b883a 	mov	r5,r21
 8012fd8:	80040880 	call	8004088 <__umodsi3>
 8012fdc:	a009883a 	mov	r4,r20
 8012fe0:	a80b883a 	mov	r5,r21
 8012fe4:	102f883a 	mov	r23,r2
 8012fe8:	80040800 	call	8004080 <__udivsi3>
 8012fec:	1009883a 	mov	r4,r2
 8012ff0:	b00b883a 	mov	r5,r22
 8012ff4:	1021883a 	mov	r16,r2
 8012ff8:	80040900 	call	8004090 <__mulsi3>
 8012ffc:	b82e943a 	slli	r23,r23,16
 8013000:	8808d43a 	srli	r4,r17,16
 8013004:	b906b03a 	or	r3,r23,r4
 8013008:	1880052e 	bgeu	r3,r2,8013020 <__udivdi3+0xf0>
 801300c:	1c87883a 	add	r3,r3,r18
 8013010:	813fffc4 	addi	r4,r16,-1
 8013014:	1c800136 	bltu	r3,r18,801301c <__udivdi3+0xec>
 8013018:	18815236 	bltu	r3,r2,8013564 <__udivdi3+0x634>
 801301c:	2021883a 	mov	r16,r4
 8013020:	18a7c83a 	sub	r19,r3,r2
 8013024:	9809883a 	mov	r4,r19
 8013028:	a80b883a 	mov	r5,r21
 801302c:	80040880 	call	8004088 <__umodsi3>
 8013030:	1029883a 	mov	r20,r2
 8013034:	9809883a 	mov	r4,r19
 8013038:	a80b883a 	mov	r5,r21
 801303c:	a028943a 	slli	r20,r20,16
 8013040:	80040800 	call	8004080 <__udivsi3>
 8013044:	1009883a 	mov	r4,r2
 8013048:	b00b883a 	mov	r5,r22
 801304c:	8c7fffcc 	andi	r17,r17,65535
 8013050:	1027883a 	mov	r19,r2
 8013054:	a462b03a 	or	r17,r20,r17
 8013058:	80040900 	call	8004090 <__mulsi3>
 801305c:	8880052e 	bgeu	r17,r2,8013074 <__udivdi3+0x144>
 8013060:	8ca3883a 	add	r17,r17,r18
 8013064:	98ffffc4 	addi	r3,r19,-1
 8013068:	8c811036 	bltu	r17,r18,80134ac <__udivdi3+0x57c>
 801306c:	88810f2e 	bgeu	r17,r2,80134ac <__udivdi3+0x57c>
 8013070:	9cffff84 	addi	r19,r19,-2
 8013074:	8020943a 	slli	r16,r16,16
 8013078:	0007883a 	mov	r3,zero
 801307c:	9c04b03a 	or	r2,r19,r16
 8013080:	00006006 	br	8013204 <__udivdi3+0x2d4>
 8013084:	29c05d36 	bltu	r5,r7,80131fc <__udivdi3+0x2cc>
 8013088:	00bfffd4 	movui	r2,65535
 801308c:	11c0692e 	bgeu	r2,r7,8013234 <__udivdi3+0x304>
 8013090:	00804034 	movhi	r2,256
 8013094:	10bfffc4 	addi	r2,r2,-1
 8013098:	11c10e2e 	bgeu	r2,r7,80134d4 <__udivdi3+0x5a4>
 801309c:	01400604 	movi	r5,24
 80130a0:	2811883a 	mov	r8,r5
 80130a4:	394ad83a 	srl	r5,r7,r5
 80130a8:	008200b4 	movhi	r2,2050
 80130ac:	1089a804 	addi	r2,r2,9888
 80130b0:	114b883a 	add	r5,r2,r5
 80130b4:	29400003 	ldbu	r5,0(r5)
 80130b8:	00c00804 	movi	r3,32
 80130bc:	2a0b883a 	add	r5,r5,r8
 80130c0:	196fc83a 	sub	r23,r3,r5
 80130c4:	b8006b1e 	bne	r23,zero,8013274 <__udivdi3+0x344>
 80130c8:	3c011436 	bltu	r7,r16,801351c <__udivdi3+0x5ec>
 80130cc:	9985403a 	cmpgeu	r2,r19,r6
 80130d0:	0007883a 	mov	r3,zero
 80130d4:	00004b06 	br	8013204 <__udivdi3+0x2d4>
 80130d8:	3000041e 	bne	r6,zero,80130ec <__udivdi3+0x1bc>
 80130dc:	01000044 	movi	r4,1
 80130e0:	000b883a 	mov	r5,zero
 80130e4:	80040800 	call	8004080 <__udivsi3>
 80130e8:	1025883a 	mov	r18,r2
 80130ec:	00bfffd4 	movui	r2,65535
 80130f0:	14805b2e 	bgeu	r2,r18,8013260 <__udivdi3+0x330>
 80130f4:	00804034 	movhi	r2,256
 80130f8:	10bfffc4 	addi	r2,r2,-1
 80130fc:	1480fe2e 	bgeu	r2,r18,80134f8 <__udivdi3+0x5c8>
 8013100:	00800604 	movi	r2,24
 8013104:	1007883a 	mov	r3,r2
 8013108:	9084d83a 	srl	r2,r18,r2
 801310c:	010200b4 	movhi	r4,2050
 8013110:	2109a804 	addi	r4,r4,9888
 8013114:	2085883a 	add	r2,r4,r2
 8013118:	11800003 	ldbu	r6,0(r2)
 801311c:	01c00804 	movi	r7,32
 8013120:	30c7883a 	add	r3,r6,r3
 8013124:	38cfc83a 	sub	r7,r7,r3
 8013128:	3800a71e 	bne	r7,zero,80133c8 <__udivdi3+0x498>
 801312c:	9028d43a 	srli	r20,r18,16
 8013130:	84a1c83a 	sub	r16,r16,r18
 8013134:	957fffcc 	andi	r21,r18,65535
 8013138:	00c00044 	movi	r3,1
 801313c:	8009883a 	mov	r4,r16
 8013140:	a00b883a 	mov	r5,r20
 8013144:	d8c00015 	stw	r3,0(sp)
 8013148:	80040880 	call	8004088 <__umodsi3>
 801314c:	8009883a 	mov	r4,r16
 8013150:	a00b883a 	mov	r5,r20
 8013154:	102d883a 	mov	r22,r2
 8013158:	80040800 	call	8004080 <__udivsi3>
 801315c:	1009883a 	mov	r4,r2
 8013160:	a80b883a 	mov	r5,r21
 8013164:	1021883a 	mov	r16,r2
 8013168:	80040900 	call	8004090 <__mulsi3>
 801316c:	b02c943a 	slli	r22,r22,16
 8013170:	880ed43a 	srli	r7,r17,16
 8013174:	d8c00017 	ldw	r3,0(sp)
 8013178:	b1ccb03a 	or	r6,r22,r7
 801317c:	3080052e 	bgeu	r6,r2,8013194 <__udivdi3+0x264>
 8013180:	348d883a 	add	r6,r6,r18
 8013184:	813fffc4 	addi	r4,r16,-1
 8013188:	34800136 	bltu	r6,r18,8013190 <__udivdi3+0x260>
 801318c:	3080f236 	bltu	r6,r2,8013558 <__udivdi3+0x628>
 8013190:	2021883a 	mov	r16,r4
 8013194:	30a7c83a 	sub	r19,r6,r2
 8013198:	9809883a 	mov	r4,r19
 801319c:	a00b883a 	mov	r5,r20
 80131a0:	d8c00015 	stw	r3,0(sp)
 80131a4:	80040880 	call	8004088 <__umodsi3>
 80131a8:	102d883a 	mov	r22,r2
 80131ac:	9809883a 	mov	r4,r19
 80131b0:	a00b883a 	mov	r5,r20
 80131b4:	b02c943a 	slli	r22,r22,16
 80131b8:	80040800 	call	8004080 <__udivsi3>
 80131bc:	1009883a 	mov	r4,r2
 80131c0:	a80b883a 	mov	r5,r21
 80131c4:	8c7fffcc 	andi	r17,r17,65535
 80131c8:	1027883a 	mov	r19,r2
 80131cc:	b462b03a 	or	r17,r22,r17
 80131d0:	80040900 	call	8004090 <__mulsi3>
 80131d4:	d8c00017 	ldw	r3,0(sp)
 80131d8:	8880052e 	bgeu	r17,r2,80131f0 <__udivdi3+0x2c0>
 80131dc:	8ca3883a 	add	r17,r17,r18
 80131e0:	993fffc4 	addi	r4,r19,-1
 80131e4:	8c80af36 	bltu	r17,r18,80134a4 <__udivdi3+0x574>
 80131e8:	8880ae2e 	bgeu	r17,r2,80134a4 <__udivdi3+0x574>
 80131ec:	9cffff84 	addi	r19,r19,-2
 80131f0:	8020943a 	slli	r16,r16,16
 80131f4:	9c04b03a 	or	r2,r19,r16
 80131f8:	00000206 	br	8013204 <__udivdi3+0x2d4>
 80131fc:	0007883a 	mov	r3,zero
 8013200:	0005883a 	mov	r2,zero
 8013204:	dfc00a17 	ldw	ra,40(sp)
 8013208:	df000917 	ldw	fp,36(sp)
 801320c:	ddc00817 	ldw	r23,32(sp)
 8013210:	dd800717 	ldw	r22,28(sp)
 8013214:	dd400617 	ldw	r21,24(sp)
 8013218:	dd000517 	ldw	r20,20(sp)
 801321c:	dcc00417 	ldw	r19,16(sp)
 8013220:	dc800317 	ldw	r18,12(sp)
 8013224:	dc400217 	ldw	r17,8(sp)
 8013228:	dc000117 	ldw	r16,4(sp)
 801322c:	dec00b04 	addi	sp,sp,44
 8013230:	f800283a 	ret
 8013234:	00803fc4 	movi	r2,255
 8013238:	11c0a92e 	bgeu	r2,r7,80134e0 <__udivdi3+0x5b0>
 801323c:	01400204 	movi	r5,8
 8013240:	2811883a 	mov	r8,r5
 8013244:	003f9706 	br	80130a4 <__alt_data_end+0xfc0130a4>
 8013248:	00804034 	movhi	r2,256
 801324c:	10bfffc4 	addi	r2,r2,-1
 8013250:	1180a62e 	bgeu	r2,r6,80134ec <__udivdi3+0x5bc>
 8013254:	00800604 	movi	r2,24
 8013258:	1007883a 	mov	r3,r2
 801325c:	003f4c06 	br	8012f90 <__alt_data_end+0xfc012f90>
 8013260:	00803fc4 	movi	r2,255
 8013264:	1480a72e 	bgeu	r2,r18,8013504 <__udivdi3+0x5d4>
 8013268:	00800204 	movi	r2,8
 801326c:	1007883a 	mov	r3,r2
 8013270:	003fa506 	br	8013108 <__alt_data_end+0xfc013108>
 8013274:	3178d83a 	srl	fp,r6,r5
 8013278:	3dce983a 	sll	r7,r7,r23
 801327c:	8168d83a 	srl	r20,r16,r5
 8013280:	9950d83a 	srl	r8,r19,r5
 8013284:	3f38b03a 	or	fp,r7,fp
 8013288:	e024d43a 	srli	r18,fp,16
 801328c:	85e0983a 	sll	r16,r16,r23
 8013290:	a009883a 	mov	r4,r20
 8013294:	900b883a 	mov	r5,r18
 8013298:	8220b03a 	or	r16,r16,r8
 801329c:	35ea983a 	sll	r21,r6,r23
 80132a0:	80040880 	call	8004088 <__umodsi3>
 80132a4:	a009883a 	mov	r4,r20
 80132a8:	900b883a 	mov	r5,r18
 80132ac:	1023883a 	mov	r17,r2
 80132b0:	e5bfffcc 	andi	r22,fp,65535
 80132b4:	80040800 	call	8004080 <__udivsi3>
 80132b8:	1009883a 	mov	r4,r2
 80132bc:	b00b883a 	mov	r5,r22
 80132c0:	1029883a 	mov	r20,r2
 80132c4:	80040900 	call	8004090 <__mulsi3>
 80132c8:	8806943a 	slli	r3,r17,16
 80132cc:	8014d43a 	srli	r10,r16,16
 80132d0:	1a92b03a 	or	r9,r3,r10
 80132d4:	4880042e 	bgeu	r9,r2,80132e8 <__udivdi3+0x3b8>
 80132d8:	4f13883a 	add	r9,r9,fp
 80132dc:	a0ffffc4 	addi	r3,r20,-1
 80132e0:	4f00952e 	bgeu	r9,fp,8013538 <__udivdi3+0x608>
 80132e4:	1829883a 	mov	r20,r3
 80132e8:	48a3c83a 	sub	r17,r9,r2
 80132ec:	8809883a 	mov	r4,r17
 80132f0:	900b883a 	mov	r5,r18
 80132f4:	80040880 	call	8004088 <__umodsi3>
 80132f8:	8809883a 	mov	r4,r17
 80132fc:	900b883a 	mov	r5,r18
 8013300:	d8800015 	stw	r2,0(sp)
 8013304:	80040800 	call	8004080 <__udivsi3>
 8013308:	1009883a 	mov	r4,r2
 801330c:	b00b883a 	mov	r5,r22
 8013310:	1023883a 	mov	r17,r2
 8013314:	80040900 	call	8004090 <__mulsi3>
 8013318:	d8c00017 	ldw	r3,0(sp)
 801331c:	823fffcc 	andi	r8,r16,65535
 8013320:	1806943a 	slli	r3,r3,16
 8013324:	1a20b03a 	or	r16,r3,r8
 8013328:	8080042e 	bgeu	r16,r2,801333c <__udivdi3+0x40c>
 801332c:	8721883a 	add	r16,r16,fp
 8013330:	88ffffc4 	addi	r3,r17,-1
 8013334:	87007c2e 	bgeu	r16,fp,8013528 <__udivdi3+0x5f8>
 8013338:	1823883a 	mov	r17,r3
 801333c:	a028943a 	slli	r20,r20,16
 8013340:	acbfffcc 	andi	r18,r21,65535
 8013344:	900b883a 	mov	r5,r18
 8013348:	8d28b03a 	or	r20,r17,r20
 801334c:	a022d43a 	srli	r17,r20,16
 8013350:	a5bfffcc 	andi	r22,r20,65535
 8013354:	b009883a 	mov	r4,r22
 8013358:	a82ad43a 	srli	r21,r21,16
 801335c:	80a1c83a 	sub	r16,r16,r2
 8013360:	80040900 	call	8004090 <__mulsi3>
 8013364:	8809883a 	mov	r4,r17
 8013368:	900b883a 	mov	r5,r18
 801336c:	1039883a 	mov	fp,r2
 8013370:	80040900 	call	8004090 <__mulsi3>
 8013374:	8809883a 	mov	r4,r17
 8013378:	a80b883a 	mov	r5,r21
 801337c:	1025883a 	mov	r18,r2
 8013380:	80040900 	call	8004090 <__mulsi3>
 8013384:	b009883a 	mov	r4,r22
 8013388:	a80b883a 	mov	r5,r21
 801338c:	1023883a 	mov	r17,r2
 8013390:	80040900 	call	8004090 <__mulsi3>
 8013394:	e006d43a 	srli	r3,fp,16
 8013398:	9085883a 	add	r2,r18,r2
 801339c:	10c7883a 	add	r3,r2,r3
 80133a0:	1c80022e 	bgeu	r3,r18,80133ac <__udivdi3+0x47c>
 80133a4:	00800074 	movhi	r2,1
 80133a8:	88a3883a 	add	r17,r17,r2
 80133ac:	1808d43a 	srli	r4,r3,16
 80133b0:	8909883a 	add	r4,r17,r4
 80133b4:	81004436 	bltu	r16,r4,80134c8 <__udivdi3+0x598>
 80133b8:	81003e26 	beq	r16,r4,80134b4 <__udivdi3+0x584>
 80133bc:	a005883a 	mov	r2,r20
 80133c0:	0007883a 	mov	r3,zero
 80133c4:	003f8f06 	br	8013204 <__alt_data_end+0xfc013204>
 80133c8:	91e4983a 	sll	r18,r18,r7
 80133cc:	80eed83a 	srl	r23,r16,r3
 80133d0:	81cc983a 	sll	r6,r16,r7
 80133d4:	9028d43a 	srli	r20,r18,16
 80133d8:	98c6d83a 	srl	r3,r19,r3
 80133dc:	b809883a 	mov	r4,r23
 80133e0:	a00b883a 	mov	r5,r20
 80133e4:	30ecb03a 	or	r22,r6,r3
 80133e8:	99e2983a 	sll	r17,r19,r7
 80133ec:	80040880 	call	8004088 <__umodsi3>
 80133f0:	b809883a 	mov	r4,r23
 80133f4:	a00b883a 	mov	r5,r20
 80133f8:	1021883a 	mov	r16,r2
 80133fc:	957fffcc 	andi	r21,r18,65535
 8013400:	80040800 	call	8004080 <__udivsi3>
 8013404:	a80b883a 	mov	r5,r21
 8013408:	1009883a 	mov	r4,r2
 801340c:	102f883a 	mov	r23,r2
 8013410:	80040900 	call	8004090 <__mulsi3>
 8013414:	8020943a 	slli	r16,r16,16
 8013418:	b00ad43a 	srli	r5,r22,16
 801341c:	814cb03a 	or	r6,r16,r5
 8013420:	3080062e 	bgeu	r6,r2,801343c <__udivdi3+0x50c>
 8013424:	348d883a 	add	r6,r6,r18
 8013428:	b8ffffc4 	addi	r3,r23,-1
 801342c:	34804836 	bltu	r6,r18,8013550 <__udivdi3+0x620>
 8013430:	3080472e 	bgeu	r6,r2,8013550 <__udivdi3+0x620>
 8013434:	bdffff84 	addi	r23,r23,-2
 8013438:	348d883a 	add	r6,r6,r18
 801343c:	30a7c83a 	sub	r19,r6,r2
 8013440:	9809883a 	mov	r4,r19
 8013444:	a00b883a 	mov	r5,r20
 8013448:	80040880 	call	8004088 <__umodsi3>
 801344c:	9809883a 	mov	r4,r19
 8013450:	a00b883a 	mov	r5,r20
 8013454:	1039883a 	mov	fp,r2
 8013458:	80040800 	call	8004080 <__udivsi3>
 801345c:	1009883a 	mov	r4,r2
 8013460:	a80b883a 	mov	r5,r21
 8013464:	e038943a 	slli	fp,fp,16
 8013468:	1027883a 	mov	r19,r2
 801346c:	80040900 	call	8004090 <__mulsi3>
 8013470:	b1bfffcc 	andi	r6,r22,65535
 8013474:	e18cb03a 	or	r6,fp,r6
 8013478:	3080062e 	bgeu	r6,r2,8013494 <__udivdi3+0x564>
 801347c:	348d883a 	add	r6,r6,r18
 8013480:	98ffffc4 	addi	r3,r19,-1
 8013484:	34803036 	bltu	r6,r18,8013548 <__udivdi3+0x618>
 8013488:	30802f2e 	bgeu	r6,r2,8013548 <__udivdi3+0x618>
 801348c:	9cffff84 	addi	r19,r19,-2
 8013490:	348d883a 	add	r6,r6,r18
 8013494:	b82e943a 	slli	r23,r23,16
 8013498:	30a1c83a 	sub	r16,r6,r2
 801349c:	9dc6b03a 	or	r3,r19,r23
 80134a0:	003f2606 	br	801313c <__alt_data_end+0xfc01313c>
 80134a4:	2027883a 	mov	r19,r4
 80134a8:	003f5106 	br	80131f0 <__alt_data_end+0xfc0131f0>
 80134ac:	1827883a 	mov	r19,r3
 80134b0:	003ef006 	br	8013074 <__alt_data_end+0xfc013074>
 80134b4:	1808943a 	slli	r4,r3,16
 80134b8:	9dc6983a 	sll	r3,r19,r23
 80134bc:	e73fffcc 	andi	fp,fp,65535
 80134c0:	2709883a 	add	r4,r4,fp
 80134c4:	193fbd2e 	bgeu	r3,r4,80133bc <__alt_data_end+0xfc0133bc>
 80134c8:	a0bfffc4 	addi	r2,r20,-1
 80134cc:	0007883a 	mov	r3,zero
 80134d0:	003f4c06 	br	8013204 <__alt_data_end+0xfc013204>
 80134d4:	01400404 	movi	r5,16
 80134d8:	2811883a 	mov	r8,r5
 80134dc:	003ef106 	br	80130a4 <__alt_data_end+0xfc0130a4>
 80134e0:	000b883a 	mov	r5,zero
 80134e4:	0011883a 	mov	r8,zero
 80134e8:	003eee06 	br	80130a4 <__alt_data_end+0xfc0130a4>
 80134ec:	00800404 	movi	r2,16
 80134f0:	1007883a 	mov	r3,r2
 80134f4:	003ea606 	br	8012f90 <__alt_data_end+0xfc012f90>
 80134f8:	00800404 	movi	r2,16
 80134fc:	1007883a 	mov	r3,r2
 8013500:	003f0106 	br	8013108 <__alt_data_end+0xfc013108>
 8013504:	0005883a 	mov	r2,zero
 8013508:	0007883a 	mov	r3,zero
 801350c:	003efe06 	br	8013108 <__alt_data_end+0xfc013108>
 8013510:	0005883a 	mov	r2,zero
 8013514:	0007883a 	mov	r3,zero
 8013518:	003e9d06 	br	8012f90 <__alt_data_end+0xfc012f90>
 801351c:	0007883a 	mov	r3,zero
 8013520:	00800044 	movi	r2,1
 8013524:	003f3706 	br	8013204 <__alt_data_end+0xfc013204>
 8013528:	80bf832e 	bgeu	r16,r2,8013338 <__alt_data_end+0xfc013338>
 801352c:	8c7fff84 	addi	r17,r17,-2
 8013530:	8721883a 	add	r16,r16,fp
 8013534:	003f8106 	br	801333c <__alt_data_end+0xfc01333c>
 8013538:	48bf6a2e 	bgeu	r9,r2,80132e4 <__alt_data_end+0xfc0132e4>
 801353c:	a53fff84 	addi	r20,r20,-2
 8013540:	4f13883a 	add	r9,r9,fp
 8013544:	003f6806 	br	80132e8 <__alt_data_end+0xfc0132e8>
 8013548:	1827883a 	mov	r19,r3
 801354c:	003fd106 	br	8013494 <__alt_data_end+0xfc013494>
 8013550:	182f883a 	mov	r23,r3
 8013554:	003fb906 	br	801343c <__alt_data_end+0xfc01343c>
 8013558:	843fff84 	addi	r16,r16,-2
 801355c:	348d883a 	add	r6,r6,r18
 8013560:	003f0c06 	br	8013194 <__alt_data_end+0xfc013194>
 8013564:	843fff84 	addi	r16,r16,-2
 8013568:	1c87883a 	add	r3,r3,r18
 801356c:	003eac06 	br	8013020 <__alt_data_end+0xfc013020>

08013570 <__umoddi3>:
 8013570:	defff404 	addi	sp,sp,-48
 8013574:	dd800815 	stw	r22,32(sp)
 8013578:	dc400315 	stw	r17,12(sp)
 801357c:	dc000215 	stw	r16,8(sp)
 8013580:	dfc00b15 	stw	ra,44(sp)
 8013584:	df000a15 	stw	fp,40(sp)
 8013588:	ddc00915 	stw	r23,36(sp)
 801358c:	dd400715 	stw	r21,28(sp)
 8013590:	dd000615 	stw	r20,24(sp)
 8013594:	dcc00515 	stw	r19,20(sp)
 8013598:	dc800415 	stw	r18,16(sp)
 801359c:	2021883a 	mov	r16,r4
 80135a0:	2823883a 	mov	r17,r5
 80135a4:	282d883a 	mov	r22,r5
 80135a8:	38003c1e 	bne	r7,zero,801369c <__umoddi3+0x12c>
 80135ac:	3027883a 	mov	r19,r6
 80135b0:	2029883a 	mov	r20,r4
 80135b4:	2980522e 	bgeu	r5,r6,8013700 <__umoddi3+0x190>
 80135b8:	00bfffd4 	movui	r2,65535
 80135bc:	1180a436 	bltu	r2,r6,8013850 <__umoddi3+0x2e0>
 80135c0:	00803fc4 	movi	r2,255
 80135c4:	11815e2e 	bgeu	r2,r6,8013b40 <__umoddi3+0x5d0>
 80135c8:	01400204 	movi	r5,8
 80135cc:	2805883a 	mov	r2,r5
 80135d0:	314ad83a 	srl	r5,r6,r5
 80135d4:	00c200b4 	movhi	r3,2050
 80135d8:	18c9a804 	addi	r3,r3,9888
 80135dc:	194b883a 	add	r5,r3,r5
 80135e0:	29000003 	ldbu	r4,0(r5)
 80135e4:	2089883a 	add	r4,r4,r2
 80135e8:	00800804 	movi	r2,32
 80135ec:	1105c83a 	sub	r2,r2,r4
 80135f0:	10010c26 	beq	r2,zero,8013a24 <__umoddi3+0x4b4>
 80135f4:	88a2983a 	sll	r17,r17,r2
 80135f8:	8108d83a 	srl	r4,r16,r4
 80135fc:	30a6983a 	sll	r19,r6,r2
 8013600:	80a8983a 	sll	r20,r16,r2
 8013604:	1025883a 	mov	r18,r2
 8013608:	892cb03a 	or	r22,r17,r4
 801360c:	9822d43a 	srli	r17,r19,16
 8013610:	b009883a 	mov	r4,r22
 8013614:	9d7fffcc 	andi	r21,r19,65535
 8013618:	880b883a 	mov	r5,r17
 801361c:	80040880 	call	8004088 <__umodsi3>
 8013620:	b009883a 	mov	r4,r22
 8013624:	880b883a 	mov	r5,r17
 8013628:	102f883a 	mov	r23,r2
 801362c:	80040800 	call	8004080 <__udivsi3>
 8013630:	1009883a 	mov	r4,r2
 8013634:	a80b883a 	mov	r5,r21
 8013638:	80040900 	call	8004090 <__mulsi3>
 801363c:	b82e943a 	slli	r23,r23,16
 8013640:	a008d43a 	srli	r4,r20,16
 8013644:	b906b03a 	or	r3,r23,r4
 8013648:	1880042e 	bgeu	r3,r2,801365c <__umoddi3+0xec>
 801364c:	1cc7883a 	add	r3,r3,r19
 8013650:	1cc00236 	bltu	r3,r19,801365c <__umoddi3+0xec>
 8013654:	1880012e 	bgeu	r3,r2,801365c <__umoddi3+0xec>
 8013658:	1cc7883a 	add	r3,r3,r19
 801365c:	18a1c83a 	sub	r16,r3,r2
 8013660:	8009883a 	mov	r4,r16
 8013664:	880b883a 	mov	r5,r17
 8013668:	80040880 	call	8004088 <__umodsi3>
 801366c:	8009883a 	mov	r4,r16
 8013670:	880b883a 	mov	r5,r17
 8013674:	102d883a 	mov	r22,r2
 8013678:	80040800 	call	8004080 <__udivsi3>
 801367c:	1009883a 	mov	r4,r2
 8013680:	a80b883a 	mov	r5,r21
 8013684:	b02c943a 	slli	r22,r22,16
 8013688:	80040900 	call	8004090 <__mulsi3>
 801368c:	a13fffcc 	andi	r4,r20,65535
 8013690:	b106b03a 	or	r3,r22,r4
 8013694:	1880572e 	bgeu	r3,r2,80137f4 <__umoddi3+0x284>
 8013698:	00005206 	br	80137e4 <__umoddi3+0x274>
 801369c:	29c05936 	bltu	r5,r7,8013804 <__umoddi3+0x294>
 80136a0:	00bfffd4 	movui	r2,65535
 80136a4:	11c0652e 	bgeu	r2,r7,801383c <__umoddi3+0x2cc>
 80136a8:	00804034 	movhi	r2,256
 80136ac:	10bfffc4 	addi	r2,r2,-1
 80136b0:	11c1172e 	bgeu	r2,r7,8013b10 <__umoddi3+0x5a0>
 80136b4:	01400604 	movi	r5,24
 80136b8:	282b883a 	mov	r21,r5
 80136bc:	394ad83a 	srl	r5,r7,r5
 80136c0:	00c200b4 	movhi	r3,2050
 80136c4:	18c9a804 	addi	r3,r3,9888
 80136c8:	194b883a 	add	r5,r3,r5
 80136cc:	28800003 	ldbu	r2,0(r5)
 80136d0:	00c00804 	movi	r3,32
 80136d4:	156b883a 	add	r21,r2,r21
 80136d8:	1d69c83a 	sub	r20,r3,r21
 80136dc:	a000671e 	bne	r20,zero,801387c <__umoddi3+0x30c>
 80136e0:	3c400136 	bltu	r7,r17,80136e8 <__umoddi3+0x178>
 80136e4:	81812336 	bltu	r16,r6,8013b74 <__umoddi3+0x604>
 80136e8:	8185c83a 	sub	r2,r16,r6
 80136ec:	89e3c83a 	sub	r17,r17,r7
 80136f0:	8087803a 	cmpltu	r3,r16,r2
 80136f4:	88edc83a 	sub	r22,r17,r3
 80136f8:	b007883a 	mov	r3,r22
 80136fc:	00004306 	br	801380c <__umoddi3+0x29c>
 8013700:	3000041e 	bne	r6,zero,8013714 <__umoddi3+0x1a4>
 8013704:	01000044 	movi	r4,1
 8013708:	000b883a 	mov	r5,zero
 801370c:	80040800 	call	8004080 <__udivsi3>
 8013710:	1027883a 	mov	r19,r2
 8013714:	00bfffd4 	movui	r2,65535
 8013718:	14c0532e 	bgeu	r2,r19,8013868 <__umoddi3+0x2f8>
 801371c:	00804034 	movhi	r2,256
 8013720:	10bfffc4 	addi	r2,r2,-1
 8013724:	14c1032e 	bgeu	r2,r19,8013b34 <__umoddi3+0x5c4>
 8013728:	00800604 	movi	r2,24
 801372c:	1007883a 	mov	r3,r2
 8013730:	9884d83a 	srl	r2,r19,r2
 8013734:	010200b4 	movhi	r4,2050
 8013738:	2109a804 	addi	r4,r4,9888
 801373c:	2085883a 	add	r2,r4,r2
 8013740:	11000003 	ldbu	r4,0(r2)
 8013744:	00800804 	movi	r2,32
 8013748:	20c7883a 	add	r3,r4,r3
 801374c:	10c5c83a 	sub	r2,r2,r3
 8013750:	1000b61e 	bne	r2,zero,8013a2c <__umoddi3+0x4bc>
 8013754:	982ad43a 	srli	r21,r19,16
 8013758:	8ce3c83a 	sub	r17,r17,r19
 801375c:	9dbfffcc 	andi	r22,r19,65535
 8013760:	0025883a 	mov	r18,zero
 8013764:	8809883a 	mov	r4,r17
 8013768:	a80b883a 	mov	r5,r21
 801376c:	80040880 	call	8004088 <__umodsi3>
 8013770:	8809883a 	mov	r4,r17
 8013774:	a80b883a 	mov	r5,r21
 8013778:	102f883a 	mov	r23,r2
 801377c:	80040800 	call	8004080 <__udivsi3>
 8013780:	1009883a 	mov	r4,r2
 8013784:	b00b883a 	mov	r5,r22
 8013788:	80040900 	call	8004090 <__mulsi3>
 801378c:	b82e943a 	slli	r23,r23,16
 8013790:	a008d43a 	srli	r4,r20,16
 8013794:	b906b03a 	or	r3,r23,r4
 8013798:	1880032e 	bgeu	r3,r2,80137a8 <__umoddi3+0x238>
 801379c:	1cc7883a 	add	r3,r3,r19
 80137a0:	1cc00136 	bltu	r3,r19,80137a8 <__umoddi3+0x238>
 80137a4:	1880f136 	bltu	r3,r2,8013b6c <__umoddi3+0x5fc>
 80137a8:	18a1c83a 	sub	r16,r3,r2
 80137ac:	8009883a 	mov	r4,r16
 80137b0:	a80b883a 	mov	r5,r21
 80137b4:	80040880 	call	8004088 <__umodsi3>
 80137b8:	8009883a 	mov	r4,r16
 80137bc:	a80b883a 	mov	r5,r21
 80137c0:	1023883a 	mov	r17,r2
 80137c4:	80040800 	call	8004080 <__udivsi3>
 80137c8:	1009883a 	mov	r4,r2
 80137cc:	b00b883a 	mov	r5,r22
 80137d0:	8822943a 	slli	r17,r17,16
 80137d4:	80040900 	call	8004090 <__mulsi3>
 80137d8:	a13fffcc 	andi	r4,r20,65535
 80137dc:	8906b03a 	or	r3,r17,r4
 80137e0:	1880042e 	bgeu	r3,r2,80137f4 <__umoddi3+0x284>
 80137e4:	1cc7883a 	add	r3,r3,r19
 80137e8:	1cc00236 	bltu	r3,r19,80137f4 <__umoddi3+0x284>
 80137ec:	1880012e 	bgeu	r3,r2,80137f4 <__umoddi3+0x284>
 80137f0:	1cc7883a 	add	r3,r3,r19
 80137f4:	1887c83a 	sub	r3,r3,r2
 80137f8:	1c84d83a 	srl	r2,r3,r18
 80137fc:	0007883a 	mov	r3,zero
 8013800:	00000206 	br	801380c <__umoddi3+0x29c>
 8013804:	2005883a 	mov	r2,r4
 8013808:	2807883a 	mov	r3,r5
 801380c:	dfc00b17 	ldw	ra,44(sp)
 8013810:	df000a17 	ldw	fp,40(sp)
 8013814:	ddc00917 	ldw	r23,36(sp)
 8013818:	dd800817 	ldw	r22,32(sp)
 801381c:	dd400717 	ldw	r21,28(sp)
 8013820:	dd000617 	ldw	r20,24(sp)
 8013824:	dcc00517 	ldw	r19,20(sp)
 8013828:	dc800417 	ldw	r18,16(sp)
 801382c:	dc400317 	ldw	r17,12(sp)
 8013830:	dc000217 	ldw	r16,8(sp)
 8013834:	dec00c04 	addi	sp,sp,48
 8013838:	f800283a 	ret
 801383c:	00803fc4 	movi	r2,255
 8013840:	11c0b02e 	bgeu	r2,r7,8013b04 <__umoddi3+0x594>
 8013844:	01400204 	movi	r5,8
 8013848:	282b883a 	mov	r21,r5
 801384c:	003f9b06 	br	80136bc <__alt_data_end+0xfc0136bc>
 8013850:	00804034 	movhi	r2,256
 8013854:	10bfffc4 	addi	r2,r2,-1
 8013858:	1180b02e 	bgeu	r2,r6,8013b1c <__umoddi3+0x5ac>
 801385c:	01400604 	movi	r5,24
 8013860:	2805883a 	mov	r2,r5
 8013864:	003f5a06 	br	80135d0 <__alt_data_end+0xfc0135d0>
 8013868:	00803fc4 	movi	r2,255
 801386c:	14c0ae2e 	bgeu	r2,r19,8013b28 <__umoddi3+0x5b8>
 8013870:	00800204 	movi	r2,8
 8013874:	1007883a 	mov	r3,r2
 8013878:	003fad06 	br	8013730 <__alt_data_end+0xfc013730>
 801387c:	3d0a983a 	sll	r5,r7,r20
 8013880:	356cd83a 	srl	r22,r6,r21
 8013884:	8d78d83a 	srl	fp,r17,r21
 8013888:	8d10983a 	sll	r8,r17,r20
 801388c:	2dacb03a 	or	r22,r5,r22
 8013890:	b02ed43a 	srli	r23,r22,16
 8013894:	8564d83a 	srl	r18,r16,r21
 8013898:	e009883a 	mov	r4,fp
 801389c:	b80b883a 	mov	r5,r23
 80138a0:	44a4b03a 	or	r18,r8,r18
 80138a4:	3526983a 	sll	r19,r6,r20
 80138a8:	80040880 	call	8004088 <__umodsi3>
 80138ac:	e009883a 	mov	r4,fp
 80138b0:	b80b883a 	mov	r5,r23
 80138b4:	b47fffcc 	andi	r17,r22,65535
 80138b8:	d8800015 	stw	r2,0(sp)
 80138bc:	80040800 	call	8004080 <__udivsi3>
 80138c0:	1009883a 	mov	r4,r2
 80138c4:	880b883a 	mov	r5,r17
 80138c8:	1039883a 	mov	fp,r2
 80138cc:	80040900 	call	8004090 <__mulsi3>
 80138d0:	d9800017 	ldw	r6,0(sp)
 80138d4:	9008d43a 	srli	r4,r18,16
 80138d8:	8520983a 	sll	r16,r16,r20
 80138dc:	300c943a 	slli	r6,r6,16
 80138e0:	3106b03a 	or	r3,r6,r4
 80138e4:	1880042e 	bgeu	r3,r2,80138f8 <__umoddi3+0x388>
 80138e8:	1d87883a 	add	r3,r3,r22
 80138ec:	e13fffc4 	addi	r4,fp,-1
 80138f0:	1d809a2e 	bgeu	r3,r22,8013b5c <__umoddi3+0x5ec>
 80138f4:	2039883a 	mov	fp,r4
 80138f8:	1887c83a 	sub	r3,r3,r2
 80138fc:	1809883a 	mov	r4,r3
 8013900:	b80b883a 	mov	r5,r23
 8013904:	d8c00115 	stw	r3,4(sp)
 8013908:	80040880 	call	8004088 <__umodsi3>
 801390c:	d8c00117 	ldw	r3,4(sp)
 8013910:	b80b883a 	mov	r5,r23
 8013914:	d8800015 	stw	r2,0(sp)
 8013918:	1809883a 	mov	r4,r3
 801391c:	80040800 	call	8004080 <__udivsi3>
 8013920:	880b883a 	mov	r5,r17
 8013924:	1009883a 	mov	r4,r2
 8013928:	102f883a 	mov	r23,r2
 801392c:	80040900 	call	8004090 <__mulsi3>
 8013930:	d9800017 	ldw	r6,0(sp)
 8013934:	947fffcc 	andi	r17,r18,65535
 8013938:	300c943a 	slli	r6,r6,16
 801393c:	3464b03a 	or	r18,r6,r17
 8013940:	9080042e 	bgeu	r18,r2,8013954 <__umoddi3+0x3e4>
 8013944:	95a5883a 	add	r18,r18,r22
 8013948:	b8ffffc4 	addi	r3,r23,-1
 801394c:	95807f2e 	bgeu	r18,r22,8013b4c <__umoddi3+0x5dc>
 8013950:	182f883a 	mov	r23,r3
 8013954:	e038943a 	slli	fp,fp,16
 8013958:	980cd43a 	srli	r6,r19,16
 801395c:	98ffffcc 	andi	r3,r19,65535
 8013960:	bf38b03a 	or	fp,r23,fp
 8013964:	e02ed43a 	srli	r23,fp,16
 8013968:	e73fffcc 	andi	fp,fp,65535
 801396c:	180b883a 	mov	r5,r3
 8013970:	e009883a 	mov	r4,fp
 8013974:	d9800015 	stw	r6,0(sp)
 8013978:	d8c00115 	stw	r3,4(sp)
 801397c:	90a5c83a 	sub	r18,r18,r2
 8013980:	80040900 	call	8004090 <__mulsi3>
 8013984:	d8c00117 	ldw	r3,4(sp)
 8013988:	b809883a 	mov	r4,r23
 801398c:	1023883a 	mov	r17,r2
 8013990:	180b883a 	mov	r5,r3
 8013994:	80040900 	call	8004090 <__mulsi3>
 8013998:	d9800017 	ldw	r6,0(sp)
 801399c:	b809883a 	mov	r4,r23
 80139a0:	d8800115 	stw	r2,4(sp)
 80139a4:	300b883a 	mov	r5,r6
 80139a8:	302f883a 	mov	r23,r6
 80139ac:	80040900 	call	8004090 <__mulsi3>
 80139b0:	e009883a 	mov	r4,fp
 80139b4:	b80b883a 	mov	r5,r23
 80139b8:	d8800015 	stw	r2,0(sp)
 80139bc:	80040900 	call	8004090 <__mulsi3>
 80139c0:	d8c00117 	ldw	r3,4(sp)
 80139c4:	880cd43a 	srli	r6,r17,16
 80139c8:	d9c00017 	ldw	r7,0(sp)
 80139cc:	1885883a 	add	r2,r3,r2
 80139d0:	118d883a 	add	r6,r2,r6
 80139d4:	30c0022e 	bgeu	r6,r3,80139e0 <__umoddi3+0x470>
 80139d8:	00800074 	movhi	r2,1
 80139dc:	388f883a 	add	r7,r7,r2
 80139e0:	3006d43a 	srli	r3,r6,16
 80139e4:	300c943a 	slli	r6,r6,16
 80139e8:	8c7fffcc 	andi	r17,r17,65535
 80139ec:	38c7883a 	add	r3,r7,r3
 80139f0:	3463883a 	add	r17,r6,r17
 80139f4:	90c03d36 	bltu	r18,r3,8013aec <__umoddi3+0x57c>
 80139f8:	90c06026 	beq	r18,r3,8013b7c <__umoddi3+0x60c>
 80139fc:	90c9c83a 	sub	r4,r18,r3
 8013a00:	880f883a 	mov	r7,r17
 8013a04:	81cfc83a 	sub	r7,r16,r7
 8013a08:	81c7803a 	cmpltu	r3,r16,r7
 8013a0c:	20c7c83a 	sub	r3,r4,r3
 8013a10:	1d44983a 	sll	r2,r3,r21
 8013a14:	3d0ed83a 	srl	r7,r7,r20
 8013a18:	1d06d83a 	srl	r3,r3,r20
 8013a1c:	11c4b03a 	or	r2,r2,r7
 8013a20:	003f7a06 	br	801380c <__alt_data_end+0xfc01380c>
 8013a24:	0025883a 	mov	r18,zero
 8013a28:	003ef806 	br	801360c <__alt_data_end+0xfc01360c>
 8013a2c:	98a6983a 	sll	r19,r19,r2
 8013a30:	88e8d83a 	srl	r20,r17,r3
 8013a34:	80c6d83a 	srl	r3,r16,r3
 8013a38:	982ad43a 	srli	r21,r19,16
 8013a3c:	88a2983a 	sll	r17,r17,r2
 8013a40:	a009883a 	mov	r4,r20
 8013a44:	a80b883a 	mov	r5,r21
 8013a48:	88eeb03a 	or	r23,r17,r3
 8013a4c:	1025883a 	mov	r18,r2
 8013a50:	80040880 	call	8004088 <__umodsi3>
 8013a54:	a009883a 	mov	r4,r20
 8013a58:	a80b883a 	mov	r5,r21
 8013a5c:	1023883a 	mov	r17,r2
 8013a60:	9dbfffcc 	andi	r22,r19,65535
 8013a64:	80040800 	call	8004080 <__udivsi3>
 8013a68:	1009883a 	mov	r4,r2
 8013a6c:	b00b883a 	mov	r5,r22
 8013a70:	80040900 	call	8004090 <__mulsi3>
 8013a74:	8822943a 	slli	r17,r17,16
 8013a78:	b808d43a 	srli	r4,r23,16
 8013a7c:	84a8983a 	sll	r20,r16,r18
 8013a80:	8906b03a 	or	r3,r17,r4
 8013a84:	1880042e 	bgeu	r3,r2,8013a98 <__umoddi3+0x528>
 8013a88:	1cc7883a 	add	r3,r3,r19
 8013a8c:	1cc00236 	bltu	r3,r19,8013a98 <__umoddi3+0x528>
 8013a90:	1880012e 	bgeu	r3,r2,8013a98 <__umoddi3+0x528>
 8013a94:	1cc7883a 	add	r3,r3,r19
 8013a98:	18a1c83a 	sub	r16,r3,r2
 8013a9c:	8009883a 	mov	r4,r16
 8013aa0:	a80b883a 	mov	r5,r21
 8013aa4:	80040880 	call	8004088 <__umodsi3>
 8013aa8:	8009883a 	mov	r4,r16
 8013aac:	a80b883a 	mov	r5,r21
 8013ab0:	1039883a 	mov	fp,r2
 8013ab4:	80040800 	call	8004080 <__udivsi3>
 8013ab8:	1009883a 	mov	r4,r2
 8013abc:	b00b883a 	mov	r5,r22
 8013ac0:	80040900 	call	8004090 <__mulsi3>
 8013ac4:	e006943a 	slli	r3,fp,16
 8013ac8:	b93fffcc 	andi	r4,r23,65535
 8013acc:	1906b03a 	or	r3,r3,r4
 8013ad0:	1880042e 	bgeu	r3,r2,8013ae4 <__umoddi3+0x574>
 8013ad4:	1cc7883a 	add	r3,r3,r19
 8013ad8:	1cc00236 	bltu	r3,r19,8013ae4 <__umoddi3+0x574>
 8013adc:	1880012e 	bgeu	r3,r2,8013ae4 <__umoddi3+0x574>
 8013ae0:	1cc7883a 	add	r3,r3,r19
 8013ae4:	18a3c83a 	sub	r17,r3,r2
 8013ae8:	003f1e06 	br	8013764 <__alt_data_end+0xfc013764>
 8013aec:	8ccfc83a 	sub	r7,r17,r19
 8013af0:	1d89c83a 	sub	r4,r3,r22
 8013af4:	89e3803a 	cmpltu	r17,r17,r7
 8013af8:	2463c83a 	sub	r17,r4,r17
 8013afc:	9449c83a 	sub	r4,r18,r17
 8013b00:	003fc006 	br	8013a04 <__alt_data_end+0xfc013a04>
 8013b04:	000b883a 	mov	r5,zero
 8013b08:	002b883a 	mov	r21,zero
 8013b0c:	003eeb06 	br	80136bc <__alt_data_end+0xfc0136bc>
 8013b10:	01400404 	movi	r5,16
 8013b14:	282b883a 	mov	r21,r5
 8013b18:	003ee806 	br	80136bc <__alt_data_end+0xfc0136bc>
 8013b1c:	01400404 	movi	r5,16
 8013b20:	2805883a 	mov	r2,r5
 8013b24:	003eaa06 	br	80135d0 <__alt_data_end+0xfc0135d0>
 8013b28:	0005883a 	mov	r2,zero
 8013b2c:	0007883a 	mov	r3,zero
 8013b30:	003eff06 	br	8013730 <__alt_data_end+0xfc013730>
 8013b34:	00800404 	movi	r2,16
 8013b38:	1007883a 	mov	r3,r2
 8013b3c:	003efc06 	br	8013730 <__alt_data_end+0xfc013730>
 8013b40:	000b883a 	mov	r5,zero
 8013b44:	0005883a 	mov	r2,zero
 8013b48:	003ea106 	br	80135d0 <__alt_data_end+0xfc0135d0>
 8013b4c:	90bf802e 	bgeu	r18,r2,8013950 <__alt_data_end+0xfc013950>
 8013b50:	bdffff84 	addi	r23,r23,-2
 8013b54:	95a5883a 	add	r18,r18,r22
 8013b58:	003f7e06 	br	8013954 <__alt_data_end+0xfc013954>
 8013b5c:	18bf652e 	bgeu	r3,r2,80138f4 <__alt_data_end+0xfc0138f4>
 8013b60:	e73fff84 	addi	fp,fp,-2
 8013b64:	1d87883a 	add	r3,r3,r22
 8013b68:	003f6306 	br	80138f8 <__alt_data_end+0xfc0138f8>
 8013b6c:	1cc7883a 	add	r3,r3,r19
 8013b70:	003f0d06 	br	80137a8 <__alt_data_end+0xfc0137a8>
 8013b74:	8005883a 	mov	r2,r16
 8013b78:	003edf06 	br	80136f8 <__alt_data_end+0xfc0136f8>
 8013b7c:	847fdb36 	bltu	r16,r17,8013aec <__alt_data_end+0xfc013aec>
 8013b80:	880f883a 	mov	r7,r17
 8013b84:	0009883a 	mov	r4,zero
 8013b88:	003f9e06 	br	8013a04 <__alt_data_end+0xfc013a04>

08013b8c <__adddf3>:
 8013b8c:	02000434 	movhi	r8,16
 8013b90:	423fffc4 	addi	r8,r8,-1
 8013b94:	defffb04 	addi	sp,sp,-20
 8013b98:	2a12703a 	and	r9,r5,r8
 8013b9c:	2806d7fa 	srli	r3,r5,31
 8013ba0:	3a10703a 	and	r8,r7,r8
 8013ba4:	3804d53a 	srli	r2,r7,20
 8013ba8:	3014d77a 	srli	r10,r6,29
 8013bac:	dc000015 	stw	r16,0(sp)
 8013bb0:	481290fa 	slli	r9,r9,3
 8013bb4:	2820d53a 	srli	r16,r5,20
 8013bb8:	401090fa 	slli	r8,r8,3
 8013bbc:	200ad77a 	srli	r5,r4,29
 8013bc0:	380ed7fa 	srli	r7,r7,31
 8013bc4:	dc800215 	stw	r18,8(sp)
 8013bc8:	dc400115 	stw	r17,4(sp)
 8013bcc:	dfc00415 	stw	ra,16(sp)
 8013bd0:	dcc00315 	stw	r19,12(sp)
 8013bd4:	1c803fcc 	andi	r18,r3,255
 8013bd8:	8401ffcc 	andi	r16,r16,2047
 8013bdc:	494ab03a 	or	r5,r9,r5
 8013be0:	202290fa 	slli	r17,r4,3
 8013be4:	1081ffcc 	andi	r2,r2,2047
 8013be8:	4290b03a 	or	r8,r8,r10
 8013bec:	300c90fa 	slli	r6,r6,3
 8013bf0:	91c07026 	beq	r18,r7,8013db4 <__adddf3+0x228>
 8013bf4:	8087c83a 	sub	r3,r16,r2
 8013bf8:	00c0b30e 	bge	zero,r3,8013ec8 <__adddf3+0x33c>
 8013bfc:	10002a1e 	bne	r2,zero,8013ca8 <__adddf3+0x11c>
 8013c00:	4184b03a 	or	r2,r8,r6
 8013c04:	1000991e 	bne	r2,zero,8013e6c <__adddf3+0x2e0>
 8013c08:	888001cc 	andi	r2,r17,7
 8013c0c:	10005b26 	beq	r2,zero,8013d7c <__adddf3+0x1f0>
 8013c10:	88c003cc 	andi	r3,r17,15
 8013c14:	00800104 	movi	r2,4
 8013c18:	18805826 	beq	r3,r2,8013d7c <__adddf3+0x1f0>
 8013c1c:	89800104 	addi	r6,r17,4
 8013c20:	3463803a 	cmpltu	r17,r6,r17
 8013c24:	2c4b883a 	add	r5,r5,r17
 8013c28:	2880202c 	andhi	r2,r5,128
 8013c2c:	9007883a 	mov	r3,r18
 8013c30:	3023883a 	mov	r17,r6
 8013c34:	10005426 	beq	r2,zero,8013d88 <__adddf3+0x1fc>
 8013c38:	84000044 	addi	r16,r16,1
 8013c3c:	0081ffc4 	movi	r2,2047
 8013c40:	8080c126 	beq	r16,r2,8013f48 <__adddf3+0x3bc>
 8013c44:	013fe034 	movhi	r4,65408
 8013c48:	213fffc4 	addi	r4,r4,-1
 8013c4c:	290a703a 	and	r5,r5,r4
 8013c50:	2804977a 	slli	r2,r5,29
 8013c54:	280a927a 	slli	r5,r5,9
 8013c58:	8822d0fa 	srli	r17,r17,3
 8013c5c:	8401ffcc 	andi	r16,r16,2047
 8013c60:	2808d33a 	srli	r4,r5,12
 8013c64:	1444b03a 	or	r2,r2,r17
 8013c68:	8401ffcc 	andi	r16,r16,2047
 8013c6c:	800a953a 	slli	r5,r16,20
 8013c70:	18c03fcc 	andi	r3,r3,255
 8013c74:	04000434 	movhi	r16,16
 8013c78:	180697fa 	slli	r3,r3,31
 8013c7c:	843fffc4 	addi	r16,r16,-1
 8013c80:	2420703a 	and	r16,r4,r16
 8013c84:	8160b03a 	or	r16,r16,r5
 8013c88:	80c6b03a 	or	r3,r16,r3
 8013c8c:	dfc00417 	ldw	ra,16(sp)
 8013c90:	dcc00317 	ldw	r19,12(sp)
 8013c94:	dc800217 	ldw	r18,8(sp)
 8013c98:	dc400117 	ldw	r17,4(sp)
 8013c9c:	dc000017 	ldw	r16,0(sp)
 8013ca0:	dec00504 	addi	sp,sp,20
 8013ca4:	f800283a 	ret
 8013ca8:	0081ffc4 	movi	r2,2047
 8013cac:	80bfd626 	beq	r16,r2,8013c08 <__alt_data_end+0xfc013c08>
 8013cb0:	42002034 	orhi	r8,r8,128
 8013cb4:	00800e04 	movi	r2,56
 8013cb8:	10c0a616 	blt	r2,r3,8013f54 <__adddf3+0x3c8>
 8013cbc:	008007c4 	movi	r2,31
 8013cc0:	10c0c916 	blt	r2,r3,8013fe8 <__adddf3+0x45c>
 8013cc4:	00800804 	movi	r2,32
 8013cc8:	10c5c83a 	sub	r2,r2,r3
 8013ccc:	408e983a 	sll	r7,r8,r2
 8013cd0:	30c8d83a 	srl	r4,r6,r3
 8013cd4:	3084983a 	sll	r2,r6,r2
 8013cd8:	40c6d83a 	srl	r3,r8,r3
 8013cdc:	390cb03a 	or	r6,r7,r4
 8013ce0:	1004c03a 	cmpne	r2,r2,zero
 8013ce4:	308cb03a 	or	r6,r6,r2
 8013ce8:	898dc83a 	sub	r6,r17,r6
 8013cec:	89a3803a 	cmpltu	r17,r17,r6
 8013cf0:	28cbc83a 	sub	r5,r5,r3
 8013cf4:	2c4bc83a 	sub	r5,r5,r17
 8013cf8:	3023883a 	mov	r17,r6
 8013cfc:	2880202c 	andhi	r2,r5,128
 8013d00:	10006d26 	beq	r2,zero,8013eb8 <__adddf3+0x32c>
 8013d04:	04c02034 	movhi	r19,128
 8013d08:	9cffffc4 	addi	r19,r19,-1
 8013d0c:	2ce6703a 	and	r19,r5,r19
 8013d10:	98007e26 	beq	r19,zero,8013f0c <__adddf3+0x380>
 8013d14:	9809883a 	mov	r4,r19
 8013d18:	8005d840 	call	8005d84 <__clzsi2>
 8013d1c:	10fffe04 	addi	r3,r2,-8
 8013d20:	010007c4 	movi	r4,31
 8013d24:	20c07f16 	blt	r4,r3,8013f24 <__adddf3+0x398>
 8013d28:	01400a04 	movi	r5,40
 8013d2c:	2885c83a 	sub	r2,r5,r2
 8013d30:	888ad83a 	srl	r5,r17,r2
 8013d34:	98e6983a 	sll	r19,r19,r3
 8013d38:	88e2983a 	sll	r17,r17,r3
 8013d3c:	2ce6b03a 	or	r19,r5,r19
 8013d40:	1c007c16 	blt	r3,r16,8013f34 <__adddf3+0x3a8>
 8013d44:	1c21c83a 	sub	r16,r3,r16
 8013d48:	81400044 	addi	r5,r16,1
 8013d4c:	00c007c4 	movi	r3,31
 8013d50:	19409816 	blt	r3,r5,8013fb4 <__adddf3+0x428>
 8013d54:	1c21c83a 	sub	r16,r3,r16
 8013d58:	8c08983a 	sll	r4,r17,r16
 8013d5c:	8946d83a 	srl	r3,r17,r5
 8013d60:	9c20983a 	sll	r16,r19,r16
 8013d64:	2008c03a 	cmpne	r4,r4,zero
 8013d68:	994ad83a 	srl	r5,r19,r5
 8013d6c:	1c06b03a 	or	r3,r3,r16
 8013d70:	1922b03a 	or	r17,r3,r4
 8013d74:	0021883a 	mov	r16,zero
 8013d78:	003fa306 	br	8013c08 <__alt_data_end+0xfc013c08>
 8013d7c:	2880202c 	andhi	r2,r5,128
 8013d80:	9007883a 	mov	r3,r18
 8013d84:	103fac1e 	bne	r2,zero,8013c38 <__alt_data_end+0xfc013c38>
 8013d88:	2804977a 	slli	r2,r5,29
 8013d8c:	8822d0fa 	srli	r17,r17,3
 8013d90:	0101ffc4 	movi	r4,2047
 8013d94:	280ad0fa 	srli	r5,r5,3
 8013d98:	1444b03a 	or	r2,r2,r17
 8013d9c:	81002c26 	beq	r16,r4,8013e50 <__adddf3+0x2c4>
 8013da0:	8120703a 	and	r16,r16,r4
 8013da4:	01000434 	movhi	r4,16
 8013da8:	213fffc4 	addi	r4,r4,-1
 8013dac:	2908703a 	and	r4,r5,r4
 8013db0:	003fad06 	br	8013c68 <__alt_data_end+0xfc013c68>
 8013db4:	8089c83a 	sub	r4,r16,r2
 8013db8:	01006a0e 	bge	zero,r4,8013f64 <__adddf3+0x3d8>
 8013dbc:	10003326 	beq	r2,zero,8013e8c <__adddf3+0x300>
 8013dc0:	0081ffc4 	movi	r2,2047
 8013dc4:	80bf9026 	beq	r16,r2,8013c08 <__alt_data_end+0xfc013c08>
 8013dc8:	42002034 	orhi	r8,r8,128
 8013dcc:	00800e04 	movi	r2,56
 8013dd0:	1100b116 	blt	r2,r4,8014098 <__adddf3+0x50c>
 8013dd4:	008007c4 	movi	r2,31
 8013dd8:	1100e216 	blt	r2,r4,8014164 <__adddf3+0x5d8>
 8013ddc:	00800804 	movi	r2,32
 8013de0:	1105c83a 	sub	r2,r2,r4
 8013de4:	4092983a 	sll	r9,r8,r2
 8013de8:	310ed83a 	srl	r7,r6,r4
 8013dec:	3084983a 	sll	r2,r6,r2
 8013df0:	4110d83a 	srl	r8,r8,r4
 8013df4:	49ccb03a 	or	r6,r9,r7
 8013df8:	1004c03a 	cmpne	r2,r2,zero
 8013dfc:	308cb03a 	or	r6,r6,r2
 8013e00:	344d883a 	add	r6,r6,r17
 8013e04:	3463803a 	cmpltu	r17,r6,r17
 8013e08:	414b883a 	add	r5,r8,r5
 8013e0c:	2c4b883a 	add	r5,r5,r17
 8013e10:	3023883a 	mov	r17,r6
 8013e14:	2880202c 	andhi	r2,r5,128
 8013e18:	10002726 	beq	r2,zero,8013eb8 <__adddf3+0x32c>
 8013e1c:	84000044 	addi	r16,r16,1
 8013e20:	0081ffc4 	movi	r2,2047
 8013e24:	8080ae26 	beq	r16,r2,80140e0 <__adddf3+0x554>
 8013e28:	00bfe034 	movhi	r2,65408
 8013e2c:	10bfffc4 	addi	r2,r2,-1
 8013e30:	288a703a 	and	r5,r5,r2
 8013e34:	880cd07a 	srli	r6,r17,1
 8013e38:	280897fa 	slli	r4,r5,31
 8013e3c:	88c0004c 	andi	r3,r17,1
 8013e40:	30e2b03a 	or	r17,r6,r3
 8013e44:	280ad07a 	srli	r5,r5,1
 8013e48:	8922b03a 	or	r17,r17,r4
 8013e4c:	003f6e06 	br	8013c08 <__alt_data_end+0xfc013c08>
 8013e50:	1148b03a 	or	r4,r2,r5
 8013e54:	20003c26 	beq	r4,zero,8013f48 <__adddf3+0x3bc>
 8013e58:	29000234 	orhi	r4,r5,8
 8013e5c:	01400434 	movhi	r5,16
 8013e60:	297fffc4 	addi	r5,r5,-1
 8013e64:	2148703a 	and	r4,r4,r5
 8013e68:	003f7f06 	br	8013c68 <__alt_data_end+0xfc013c68>
 8013e6c:	18ffffc4 	addi	r3,r3,-1
 8013e70:	18004d1e 	bne	r3,zero,8013fa8 <__adddf3+0x41c>
 8013e74:	898dc83a 	sub	r6,r17,r6
 8013e78:	89a3803a 	cmpltu	r17,r17,r6
 8013e7c:	2a0bc83a 	sub	r5,r5,r8
 8013e80:	2c4bc83a 	sub	r5,r5,r17
 8013e84:	3023883a 	mov	r17,r6
 8013e88:	003f9c06 	br	8013cfc <__alt_data_end+0xfc013cfc>
 8013e8c:	4184b03a 	or	r2,r8,r6
 8013e90:	103f5d26 	beq	r2,zero,8013c08 <__alt_data_end+0xfc013c08>
 8013e94:	213fffc4 	addi	r4,r4,-1
 8013e98:	203fd926 	beq	r4,zero,8013e00 <__alt_data_end+0xfc013e00>
 8013e9c:	0081ffc4 	movi	r2,2047
 8013ea0:	80bfca1e 	bne	r16,r2,8013dcc <__alt_data_end+0xfc013dcc>
 8013ea4:	003f5806 	br	8013c08 <__alt_data_end+0xfc013c08>
 8013ea8:	10c8b03a 	or	r4,r2,r3
 8013eac:	20008b26 	beq	r4,zero,80140dc <__adddf3+0x550>
 8013eb0:	100b883a 	mov	r5,r2
 8013eb4:	1823883a 	mov	r17,r3
 8013eb8:	888001cc 	andi	r2,r17,7
 8013ebc:	103f541e 	bne	r2,zero,8013c10 <__alt_data_end+0xfc013c10>
 8013ec0:	9007883a 	mov	r3,r18
 8013ec4:	003fb006 	br	8013d88 <__alt_data_end+0xfc013d88>
 8013ec8:	1800531e 	bne	r3,zero,8014018 <__adddf3+0x48c>
 8013ecc:	80800044 	addi	r2,r16,1
 8013ed0:	1081ffcc 	andi	r2,r2,2047
 8013ed4:	00c00044 	movi	r3,1
 8013ed8:	1880990e 	bge	r3,r2,8014140 <__adddf3+0x5b4>
 8013edc:	8985c83a 	sub	r2,r17,r6
 8013ee0:	8887803a 	cmpltu	r3,r17,r2
 8013ee4:	2a27c83a 	sub	r19,r5,r8
 8013ee8:	98e7c83a 	sub	r19,r19,r3
 8013eec:	98c0202c 	andhi	r3,r19,128
 8013ef0:	18006226 	beq	r3,zero,801407c <__adddf3+0x4f0>
 8013ef4:	3463c83a 	sub	r17,r6,r17
 8013ef8:	4151c83a 	sub	r8,r8,r5
 8013efc:	344d803a 	cmpltu	r6,r6,r17
 8013f00:	41a7c83a 	sub	r19,r8,r6
 8013f04:	3825883a 	mov	r18,r7
 8013f08:	983f821e 	bne	r19,zero,8013d14 <__alt_data_end+0xfc013d14>
 8013f0c:	8809883a 	mov	r4,r17
 8013f10:	8005d840 	call	8005d84 <__clzsi2>
 8013f14:	10800804 	addi	r2,r2,32
 8013f18:	10fffe04 	addi	r3,r2,-8
 8013f1c:	010007c4 	movi	r4,31
 8013f20:	20ff810e 	bge	r4,r3,8013d28 <__alt_data_end+0xfc013d28>
 8013f24:	14fff604 	addi	r19,r2,-40
 8013f28:	8ce6983a 	sll	r19,r17,r19
 8013f2c:	0023883a 	mov	r17,zero
 8013f30:	1c3f840e 	bge	r3,r16,8013d44 <__alt_data_end+0xfc013d44>
 8013f34:	017fe034 	movhi	r5,65408
 8013f38:	297fffc4 	addi	r5,r5,-1
 8013f3c:	80e1c83a 	sub	r16,r16,r3
 8013f40:	994a703a 	and	r5,r19,r5
 8013f44:	003f3006 	br	8013c08 <__alt_data_end+0xfc013c08>
 8013f48:	0009883a 	mov	r4,zero
 8013f4c:	0005883a 	mov	r2,zero
 8013f50:	003f4506 	br	8013c68 <__alt_data_end+0xfc013c68>
 8013f54:	418cb03a 	or	r6,r8,r6
 8013f58:	300cc03a 	cmpne	r6,r6,zero
 8013f5c:	0007883a 	mov	r3,zero
 8013f60:	003f6106 	br	8013ce8 <__alt_data_end+0xfc013ce8>
 8013f64:	2000921e 	bne	r4,zero,80141b0 <__adddf3+0x624>
 8013f68:	80800044 	addi	r2,r16,1
 8013f6c:	11c1ffcc 	andi	r7,r2,2047
 8013f70:	01000044 	movi	r4,1
 8013f74:	21c0610e 	bge	r4,r7,80140fc <__adddf3+0x570>
 8013f78:	0101ffc4 	movi	r4,2047
 8013f7c:	1100a326 	beq	r2,r4,801420c <__adddf3+0x680>
 8013f80:	344d883a 	add	r6,r6,r17
 8013f84:	3463803a 	cmpltu	r17,r6,r17
 8013f88:	414b883a 	add	r5,r8,r5
 8013f8c:	2c4b883a 	add	r5,r5,r17
 8013f90:	282297fa 	slli	r17,r5,31
 8013f94:	300cd07a 	srli	r6,r6,1
 8013f98:	280ad07a 	srli	r5,r5,1
 8013f9c:	1021883a 	mov	r16,r2
 8013fa0:	89a2b03a 	or	r17,r17,r6
 8013fa4:	003f1806 	br	8013c08 <__alt_data_end+0xfc013c08>
 8013fa8:	0081ffc4 	movi	r2,2047
 8013fac:	80bf411e 	bne	r16,r2,8013cb4 <__alt_data_end+0xfc013cb4>
 8013fb0:	003f1506 	br	8013c08 <__alt_data_end+0xfc013c08>
 8013fb4:	80bff844 	addi	r2,r16,-31
 8013fb8:	00c00804 	movi	r3,32
 8013fbc:	9884d83a 	srl	r2,r19,r2
 8013fc0:	28c04a26 	beq	r5,r3,80140ec <__adddf3+0x560>
 8013fc4:	00c00fc4 	movi	r3,63
 8013fc8:	1c21c83a 	sub	r16,r3,r16
 8013fcc:	9c26983a 	sll	r19,r19,r16
 8013fd0:	9c62b03a 	or	r17,r19,r17
 8013fd4:	8822c03a 	cmpne	r17,r17,zero
 8013fd8:	88a2b03a 	or	r17,r17,r2
 8013fdc:	000b883a 	mov	r5,zero
 8013fe0:	0021883a 	mov	r16,zero
 8013fe4:	003fb406 	br	8013eb8 <__alt_data_end+0xfc013eb8>
 8013fe8:	18bff804 	addi	r2,r3,-32
 8013fec:	01000804 	movi	r4,32
 8013ff0:	4084d83a 	srl	r2,r8,r2
 8013ff4:	19003f26 	beq	r3,r4,80140f4 <__adddf3+0x568>
 8013ff8:	01001004 	movi	r4,64
 8013ffc:	20c7c83a 	sub	r3,r4,r3
 8014000:	40d0983a 	sll	r8,r8,r3
 8014004:	418cb03a 	or	r6,r8,r6
 8014008:	300cc03a 	cmpne	r6,r6,zero
 801400c:	308cb03a 	or	r6,r6,r2
 8014010:	0007883a 	mov	r3,zero
 8014014:	003f3406 	br	8013ce8 <__alt_data_end+0xfc013ce8>
 8014018:	80002326 	beq	r16,zero,80140a8 <__adddf3+0x51c>
 801401c:	0101ffc4 	movi	r4,2047
 8014020:	11005e26 	beq	r2,r4,801419c <__adddf3+0x610>
 8014024:	00c7c83a 	sub	r3,zero,r3
 8014028:	29402034 	orhi	r5,r5,128
 801402c:	01000e04 	movi	r4,56
 8014030:	20c07216 	blt	r4,r3,80141fc <__adddf3+0x670>
 8014034:	010007c4 	movi	r4,31
 8014038:	20c0ce16 	blt	r4,r3,8014374 <__adddf3+0x7e8>
 801403c:	01000804 	movi	r4,32
 8014040:	20c9c83a 	sub	r4,r4,r3
 8014044:	2914983a 	sll	r10,r5,r4
 8014048:	88d2d83a 	srl	r9,r17,r3
 801404c:	8908983a 	sll	r4,r17,r4
 8014050:	28c6d83a 	srl	r3,r5,r3
 8014054:	5262b03a 	or	r17,r10,r9
 8014058:	2008c03a 	cmpne	r4,r4,zero
 801405c:	8922b03a 	or	r17,r17,r4
 8014060:	3463c83a 	sub	r17,r6,r17
 8014064:	40c7c83a 	sub	r3,r8,r3
 8014068:	344d803a 	cmpltu	r6,r6,r17
 801406c:	198bc83a 	sub	r5,r3,r6
 8014070:	1021883a 	mov	r16,r2
 8014074:	3825883a 	mov	r18,r7
 8014078:	003f2006 	br	8013cfc <__alt_data_end+0xfc013cfc>
 801407c:	9886b03a 	or	r3,r19,r2
 8014080:	1800141e 	bne	r3,zero,80140d4 <__adddf3+0x548>
 8014084:	0007883a 	mov	r3,zero
 8014088:	000b883a 	mov	r5,zero
 801408c:	0023883a 	mov	r17,zero
 8014090:	0021883a 	mov	r16,zero
 8014094:	003f3c06 	br	8013d88 <__alt_data_end+0xfc013d88>
 8014098:	418cb03a 	or	r6,r8,r6
 801409c:	300cc03a 	cmpne	r6,r6,zero
 80140a0:	0011883a 	mov	r8,zero
 80140a4:	003f5606 	br	8013e00 <__alt_data_end+0xfc013e00>
 80140a8:	2c48b03a 	or	r4,r5,r17
 80140ac:	20003b26 	beq	r4,zero,801419c <__adddf3+0x610>
 80140b0:	00c6303a 	nor	r3,zero,r3
 80140b4:	1800371e 	bne	r3,zero,8014194 <__adddf3+0x608>
 80140b8:	3463c83a 	sub	r17,r6,r17
 80140bc:	414bc83a 	sub	r5,r8,r5
 80140c0:	344d803a 	cmpltu	r6,r6,r17
 80140c4:	298bc83a 	sub	r5,r5,r6
 80140c8:	1021883a 	mov	r16,r2
 80140cc:	3825883a 	mov	r18,r7
 80140d0:	003f0a06 	br	8013cfc <__alt_data_end+0xfc013cfc>
 80140d4:	1023883a 	mov	r17,r2
 80140d8:	003f0d06 	br	8013d10 <__alt_data_end+0xfc013d10>
 80140dc:	0007883a 	mov	r3,zero
 80140e0:	000b883a 	mov	r5,zero
 80140e4:	0023883a 	mov	r17,zero
 80140e8:	003f2706 	br	8013d88 <__alt_data_end+0xfc013d88>
 80140ec:	0027883a 	mov	r19,zero
 80140f0:	003fb706 	br	8013fd0 <__alt_data_end+0xfc013fd0>
 80140f4:	0011883a 	mov	r8,zero
 80140f8:	003fc206 	br	8014004 <__alt_data_end+0xfc014004>
 80140fc:	2c44b03a 	or	r2,r5,r17
 8014100:	8000871e 	bne	r16,zero,8014320 <__adddf3+0x794>
 8014104:	1000b126 	beq	r2,zero,80143cc <__adddf3+0x840>
 8014108:	4184b03a 	or	r2,r8,r6
 801410c:	103ebe26 	beq	r2,zero,8013c08 <__alt_data_end+0xfc013c08>
 8014110:	3445883a 	add	r2,r6,r17
 8014114:	1463803a 	cmpltu	r17,r2,r17
 8014118:	414b883a 	add	r5,r8,r5
 801411c:	2c4b883a 	add	r5,r5,r17
 8014120:	28c0202c 	andhi	r3,r5,128
 8014124:	1023883a 	mov	r17,r2
 8014128:	183f6326 	beq	r3,zero,8013eb8 <__alt_data_end+0xfc013eb8>
 801412c:	00bfe034 	movhi	r2,65408
 8014130:	10bfffc4 	addi	r2,r2,-1
 8014134:	2021883a 	mov	r16,r4
 8014138:	288a703a 	and	r5,r5,r2
 801413c:	003eb206 	br	8013c08 <__alt_data_end+0xfc013c08>
 8014140:	2c44b03a 	or	r2,r5,r17
 8014144:	8000251e 	bne	r16,zero,80141dc <__adddf3+0x650>
 8014148:	10004b1e 	bne	r2,zero,8014278 <__adddf3+0x6ec>
 801414c:	4184b03a 	or	r2,r8,r6
 8014150:	103fe226 	beq	r2,zero,80140dc <__alt_data_end+0xfc0140dc>
 8014154:	400b883a 	mov	r5,r8
 8014158:	3023883a 	mov	r17,r6
 801415c:	3825883a 	mov	r18,r7
 8014160:	003ea906 	br	8013c08 <__alt_data_end+0xfc013c08>
 8014164:	20bff804 	addi	r2,r4,-32
 8014168:	01c00804 	movi	r7,32
 801416c:	4084d83a 	srl	r2,r8,r2
 8014170:	21c07e26 	beq	r4,r7,801436c <__adddf3+0x7e0>
 8014174:	01c01004 	movi	r7,64
 8014178:	3909c83a 	sub	r4,r7,r4
 801417c:	4110983a 	sll	r8,r8,r4
 8014180:	418cb03a 	or	r6,r8,r6
 8014184:	300cc03a 	cmpne	r6,r6,zero
 8014188:	308cb03a 	or	r6,r6,r2
 801418c:	0011883a 	mov	r8,zero
 8014190:	003f1b06 	br	8013e00 <__alt_data_end+0xfc013e00>
 8014194:	0101ffc4 	movi	r4,2047
 8014198:	113fa41e 	bne	r2,r4,801402c <__alt_data_end+0xfc01402c>
 801419c:	400b883a 	mov	r5,r8
 80141a0:	3023883a 	mov	r17,r6
 80141a4:	1021883a 	mov	r16,r2
 80141a8:	3825883a 	mov	r18,r7
 80141ac:	003e9606 	br	8013c08 <__alt_data_end+0xfc013c08>
 80141b0:	80001a1e 	bne	r16,zero,801421c <__adddf3+0x690>
 80141b4:	2c4eb03a 	or	r7,r5,r17
 80141b8:	38005526 	beq	r7,zero,8014310 <__adddf3+0x784>
 80141bc:	0108303a 	nor	r4,zero,r4
 80141c0:	2000511e 	bne	r4,zero,8014308 <__adddf3+0x77c>
 80141c4:	89a3883a 	add	r17,r17,r6
 80141c8:	414b883a 	add	r5,r8,r5
 80141cc:	898d803a 	cmpltu	r6,r17,r6
 80141d0:	298b883a 	add	r5,r5,r6
 80141d4:	1021883a 	mov	r16,r2
 80141d8:	003f0e06 	br	8013e14 <__alt_data_end+0xfc013e14>
 80141dc:	1000341e 	bne	r2,zero,80142b0 <__adddf3+0x724>
 80141e0:	4184b03a 	or	r2,r8,r6
 80141e4:	10006f26 	beq	r2,zero,80143a4 <__adddf3+0x818>
 80141e8:	400b883a 	mov	r5,r8
 80141ec:	3023883a 	mov	r17,r6
 80141f0:	3825883a 	mov	r18,r7
 80141f4:	0401ffc4 	movi	r16,2047
 80141f8:	003e8306 	br	8013c08 <__alt_data_end+0xfc013c08>
 80141fc:	2c62b03a 	or	r17,r5,r17
 8014200:	8822c03a 	cmpne	r17,r17,zero
 8014204:	0007883a 	mov	r3,zero
 8014208:	003f9506 	br	8014060 <__alt_data_end+0xfc014060>
 801420c:	1021883a 	mov	r16,r2
 8014210:	000b883a 	mov	r5,zero
 8014214:	0023883a 	mov	r17,zero
 8014218:	003edb06 	br	8013d88 <__alt_data_end+0xfc013d88>
 801421c:	01c1ffc4 	movi	r7,2047
 8014220:	11c03b26 	beq	r2,r7,8014310 <__adddf3+0x784>
 8014224:	0109c83a 	sub	r4,zero,r4
 8014228:	29402034 	orhi	r5,r5,128
 801422c:	01c00e04 	movi	r7,56
 8014230:	39006216 	blt	r7,r4,80143bc <__adddf3+0x830>
 8014234:	01c007c4 	movi	r7,31
 8014238:	39006b16 	blt	r7,r4,80143e8 <__adddf3+0x85c>
 801423c:	01c00804 	movi	r7,32
 8014240:	390fc83a 	sub	r7,r7,r4
 8014244:	29d4983a 	sll	r10,r5,r7
 8014248:	8912d83a 	srl	r9,r17,r4
 801424c:	89ce983a 	sll	r7,r17,r7
 8014250:	2908d83a 	srl	r4,r5,r4
 8014254:	5262b03a 	or	r17,r10,r9
 8014258:	380ac03a 	cmpne	r5,r7,zero
 801425c:	8962b03a 	or	r17,r17,r5
 8014260:	89a3883a 	add	r17,r17,r6
 8014264:	2211883a 	add	r8,r4,r8
 8014268:	898d803a 	cmpltu	r6,r17,r6
 801426c:	418b883a 	add	r5,r8,r6
 8014270:	1021883a 	mov	r16,r2
 8014274:	003ee706 	br	8013e14 <__alt_data_end+0xfc013e14>
 8014278:	4184b03a 	or	r2,r8,r6
 801427c:	103e6226 	beq	r2,zero,8013c08 <__alt_data_end+0xfc013c08>
 8014280:	8987c83a 	sub	r3,r17,r6
 8014284:	88c9803a 	cmpltu	r4,r17,r3
 8014288:	2a05c83a 	sub	r2,r5,r8
 801428c:	1105c83a 	sub	r2,r2,r4
 8014290:	1100202c 	andhi	r4,r2,128
 8014294:	203f0426 	beq	r4,zero,8013ea8 <__alt_data_end+0xfc013ea8>
 8014298:	3463c83a 	sub	r17,r6,r17
 801429c:	414bc83a 	sub	r5,r8,r5
 80142a0:	344d803a 	cmpltu	r6,r6,r17
 80142a4:	298bc83a 	sub	r5,r5,r6
 80142a8:	3825883a 	mov	r18,r7
 80142ac:	003e5606 	br	8013c08 <__alt_data_end+0xfc013c08>
 80142b0:	4184b03a 	or	r2,r8,r6
 80142b4:	10002b26 	beq	r2,zero,8014364 <__adddf3+0x7d8>
 80142b8:	2804d0fa 	srli	r2,r5,3
 80142bc:	8822d0fa 	srli	r17,r17,3
 80142c0:	280a977a 	slli	r5,r5,29
 80142c4:	10c0022c 	andhi	r3,r2,8
 80142c8:	2c62b03a 	or	r17,r5,r17
 80142cc:	18000826 	beq	r3,zero,80142f0 <__adddf3+0x764>
 80142d0:	4008d0fa 	srli	r4,r8,3
 80142d4:	20c0022c 	andhi	r3,r4,8
 80142d8:	1800051e 	bne	r3,zero,80142f0 <__adddf3+0x764>
 80142dc:	300cd0fa 	srli	r6,r6,3
 80142e0:	4010977a 	slli	r8,r8,29
 80142e4:	2005883a 	mov	r2,r4
 80142e8:	3825883a 	mov	r18,r7
 80142ec:	41a2b03a 	or	r17,r8,r6
 80142f0:	880ad77a 	srli	r5,r17,29
 80142f4:	100490fa 	slli	r2,r2,3
 80142f8:	882290fa 	slli	r17,r17,3
 80142fc:	0401ffc4 	movi	r16,2047
 8014300:	288ab03a 	or	r5,r5,r2
 8014304:	003e4006 	br	8013c08 <__alt_data_end+0xfc013c08>
 8014308:	01c1ffc4 	movi	r7,2047
 801430c:	11ffc71e 	bne	r2,r7,801422c <__alt_data_end+0xfc01422c>
 8014310:	400b883a 	mov	r5,r8
 8014314:	3023883a 	mov	r17,r6
 8014318:	1021883a 	mov	r16,r2
 801431c:	003e3a06 	br	8013c08 <__alt_data_end+0xfc013c08>
 8014320:	10002d26 	beq	r2,zero,80143d8 <__adddf3+0x84c>
 8014324:	4184b03a 	or	r2,r8,r6
 8014328:	10000e26 	beq	r2,zero,8014364 <__adddf3+0x7d8>
 801432c:	2804d0fa 	srli	r2,r5,3
 8014330:	8822d0fa 	srli	r17,r17,3
 8014334:	280a977a 	slli	r5,r5,29
 8014338:	10c0022c 	andhi	r3,r2,8
 801433c:	2c62b03a 	or	r17,r5,r17
 8014340:	183feb26 	beq	r3,zero,80142f0 <__alt_data_end+0xfc0142f0>
 8014344:	4008d0fa 	srli	r4,r8,3
 8014348:	20c0022c 	andhi	r3,r4,8
 801434c:	183fe81e 	bne	r3,zero,80142f0 <__alt_data_end+0xfc0142f0>
 8014350:	300cd0fa 	srli	r6,r6,3
 8014354:	4010977a 	slli	r8,r8,29
 8014358:	2005883a 	mov	r2,r4
 801435c:	41a2b03a 	or	r17,r8,r6
 8014360:	003fe306 	br	80142f0 <__alt_data_end+0xfc0142f0>
 8014364:	0401ffc4 	movi	r16,2047
 8014368:	003e2706 	br	8013c08 <__alt_data_end+0xfc013c08>
 801436c:	0011883a 	mov	r8,zero
 8014370:	003f8306 	br	8014180 <__alt_data_end+0xfc014180>
 8014374:	193ff804 	addi	r4,r3,-32
 8014378:	02400804 	movi	r9,32
 801437c:	2908d83a 	srl	r4,r5,r4
 8014380:	1a402526 	beq	r3,r9,8014418 <__adddf3+0x88c>
 8014384:	02401004 	movi	r9,64
 8014388:	48c7c83a 	sub	r3,r9,r3
 801438c:	28ca983a 	sll	r5,r5,r3
 8014390:	2c62b03a 	or	r17,r5,r17
 8014394:	8822c03a 	cmpne	r17,r17,zero
 8014398:	8922b03a 	or	r17,r17,r4
 801439c:	0007883a 	mov	r3,zero
 80143a0:	003f2f06 	br	8014060 <__alt_data_end+0xfc014060>
 80143a4:	01402034 	movhi	r5,128
 80143a8:	0007883a 	mov	r3,zero
 80143ac:	297fffc4 	addi	r5,r5,-1
 80143b0:	047ffe04 	movi	r17,-8
 80143b4:	0401ffc4 	movi	r16,2047
 80143b8:	003e7306 	br	8013d88 <__alt_data_end+0xfc013d88>
 80143bc:	2c62b03a 	or	r17,r5,r17
 80143c0:	8822c03a 	cmpne	r17,r17,zero
 80143c4:	0009883a 	mov	r4,zero
 80143c8:	003fa506 	br	8014260 <__alt_data_end+0xfc014260>
 80143cc:	400b883a 	mov	r5,r8
 80143d0:	3023883a 	mov	r17,r6
 80143d4:	003e0c06 	br	8013c08 <__alt_data_end+0xfc013c08>
 80143d8:	400b883a 	mov	r5,r8
 80143dc:	3023883a 	mov	r17,r6
 80143e0:	0401ffc4 	movi	r16,2047
 80143e4:	003e0806 	br	8013c08 <__alt_data_end+0xfc013c08>
 80143e8:	21fff804 	addi	r7,r4,-32
 80143ec:	02400804 	movi	r9,32
 80143f0:	29ced83a 	srl	r7,r5,r7
 80143f4:	22400a26 	beq	r4,r9,8014420 <__adddf3+0x894>
 80143f8:	02401004 	movi	r9,64
 80143fc:	4909c83a 	sub	r4,r9,r4
 8014400:	290a983a 	sll	r5,r5,r4
 8014404:	2c62b03a 	or	r17,r5,r17
 8014408:	8822c03a 	cmpne	r17,r17,zero
 801440c:	89e2b03a 	or	r17,r17,r7
 8014410:	0009883a 	mov	r4,zero
 8014414:	003f9206 	br	8014260 <__alt_data_end+0xfc014260>
 8014418:	000b883a 	mov	r5,zero
 801441c:	003fdc06 	br	8014390 <__alt_data_end+0xfc014390>
 8014420:	000b883a 	mov	r5,zero
 8014424:	003ff706 	br	8014404 <__alt_data_end+0xfc014404>

08014428 <__eqdf2>:
 8014428:	2804d53a 	srli	r2,r5,20
 801442c:	3806d53a 	srli	r3,r7,20
 8014430:	02000434 	movhi	r8,16
 8014434:	423fffc4 	addi	r8,r8,-1
 8014438:	1081ffcc 	andi	r2,r2,2047
 801443c:	0241ffc4 	movi	r9,2047
 8014440:	2a14703a 	and	r10,r5,r8
 8014444:	18c1ffcc 	andi	r3,r3,2047
 8014448:	3a10703a 	and	r8,r7,r8
 801444c:	280ad7fa 	srli	r5,r5,31
 8014450:	380ed7fa 	srli	r7,r7,31
 8014454:	12400f26 	beq	r2,r9,8014494 <__eqdf2+0x6c>
 8014458:	0241ffc4 	movi	r9,2047
 801445c:	1a400326 	beq	r3,r9,801446c <__eqdf2+0x44>
 8014460:	10c00526 	beq	r2,r3,8014478 <__eqdf2+0x50>
 8014464:	00800044 	movi	r2,1
 8014468:	f800283a 	ret
 801446c:	4192b03a 	or	r9,r8,r6
 8014470:	483ffc1e 	bne	r9,zero,8014464 <__alt_data_end+0xfc014464>
 8014474:	10fffb1e 	bne	r2,r3,8014464 <__alt_data_end+0xfc014464>
 8014478:	523ffa1e 	bne	r10,r8,8014464 <__alt_data_end+0xfc014464>
 801447c:	21bff91e 	bne	r4,r6,8014464 <__alt_data_end+0xfc014464>
 8014480:	29c00826 	beq	r5,r7,80144a4 <__eqdf2+0x7c>
 8014484:	103ff71e 	bne	r2,zero,8014464 <__alt_data_end+0xfc014464>
 8014488:	5104b03a 	or	r2,r10,r4
 801448c:	1004c03a 	cmpne	r2,r2,zero
 8014490:	f800283a 	ret
 8014494:	5112b03a 	or	r9,r10,r4
 8014498:	483fef26 	beq	r9,zero,8014458 <__alt_data_end+0xfc014458>
 801449c:	00800044 	movi	r2,1
 80144a0:	f800283a 	ret
 80144a4:	0005883a 	mov	r2,zero
 80144a8:	f800283a 	ret

080144ac <__gedf2>:
 80144ac:	2804d53a 	srli	r2,r5,20
 80144b0:	3806d53a 	srli	r3,r7,20
 80144b4:	02000434 	movhi	r8,16
 80144b8:	423fffc4 	addi	r8,r8,-1
 80144bc:	0241ffc4 	movi	r9,2047
 80144c0:	1081ffcc 	andi	r2,r2,2047
 80144c4:	2a14703a 	and	r10,r5,r8
 80144c8:	1a46703a 	and	r3,r3,r9
 80144cc:	3a10703a 	and	r8,r7,r8
 80144d0:	280ad7fa 	srli	r5,r5,31
 80144d4:	380ed7fa 	srli	r7,r7,31
 80144d8:	12400b26 	beq	r2,r9,8014508 <__gedf2+0x5c>
 80144dc:	1a401626 	beq	r3,r9,8014538 <__gedf2+0x8c>
 80144e0:	10000c1e 	bne	r2,zero,8014514 <__gedf2+0x68>
 80144e4:	5112b03a 	or	r9,r10,r4
 80144e8:	4813003a 	cmpeq	r9,r9,zero
 80144ec:	4817883a 	mov	r11,r9
 80144f0:	18000c1e 	bne	r3,zero,8014524 <__gedf2+0x78>
 80144f4:	4198b03a 	or	r12,r8,r6
 80144f8:	60000a1e 	bne	r12,zero,8014524 <__gedf2+0x78>
 80144fc:	48001326 	beq	r9,zero,801454c <__gedf2+0xa0>
 8014500:	0005883a 	mov	r2,zero
 8014504:	f800283a 	ret
 8014508:	5112b03a 	or	r9,r10,r4
 801450c:	4800191e 	bne	r9,zero,8014574 <__gedf2+0xc8>
 8014510:	18800926 	beq	r3,r2,8014538 <__gedf2+0x8c>
 8014514:	18000b1e 	bne	r3,zero,8014544 <__gedf2+0x98>
 8014518:	4192b03a 	or	r9,r8,r6
 801451c:	0017883a 	mov	r11,zero
 8014520:	48000a26 	beq	r9,zero,801454c <__gedf2+0xa0>
 8014524:	39c03fcc 	andi	r7,r7,255
 8014528:	58000726 	beq	r11,zero,8014548 <__gedf2+0x9c>
 801452c:	3800081e 	bne	r7,zero,8014550 <__gedf2+0xa4>
 8014530:	00bfffc4 	movi	r2,-1
 8014534:	f800283a 	ret
 8014538:	4192b03a 	or	r9,r8,r6
 801453c:	48000d1e 	bne	r9,zero,8014574 <__gedf2+0xc8>
 8014540:	103fe826 	beq	r2,zero,80144e4 <__alt_data_end+0xfc0144e4>
 8014544:	39c03fcc 	andi	r7,r7,255
 8014548:	29c00326 	beq	r5,r7,8014558 <__gedf2+0xac>
 801454c:	283ff81e 	bne	r5,zero,8014530 <__alt_data_end+0xfc014530>
 8014550:	00800044 	movi	r2,1
 8014554:	f800283a 	ret
 8014558:	18bffc16 	blt	r3,r2,801454c <__alt_data_end+0xfc01454c>
 801455c:	10c00316 	blt	r2,r3,801456c <__gedf2+0xc0>
 8014560:	42bffa36 	bltu	r8,r10,801454c <__alt_data_end+0xfc01454c>
 8014564:	52000526 	beq	r10,r8,801457c <__gedf2+0xd0>
 8014568:	523fe52e 	bgeu	r10,r8,8014500 <__alt_data_end+0xfc014500>
 801456c:	283ff026 	beq	r5,zero,8014530 <__alt_data_end+0xfc014530>
 8014570:	003ff706 	br	8014550 <__alt_data_end+0xfc014550>
 8014574:	00bfff84 	movi	r2,-2
 8014578:	f800283a 	ret
 801457c:	313ff336 	bltu	r6,r4,801454c <__alt_data_end+0xfc01454c>
 8014580:	21bfdf2e 	bgeu	r4,r6,8014500 <__alt_data_end+0xfc014500>
 8014584:	283fea26 	beq	r5,zero,8014530 <__alt_data_end+0xfc014530>
 8014588:	003ff106 	br	8014550 <__alt_data_end+0xfc014550>

0801458c <__ledf2>:
 801458c:	2804d53a 	srli	r2,r5,20
 8014590:	3810d53a 	srli	r8,r7,20
 8014594:	00c00434 	movhi	r3,16
 8014598:	18ffffc4 	addi	r3,r3,-1
 801459c:	0241ffc4 	movi	r9,2047
 80145a0:	1081ffcc 	andi	r2,r2,2047
 80145a4:	28d4703a 	and	r10,r5,r3
 80145a8:	4250703a 	and	r8,r8,r9
 80145ac:	38c6703a 	and	r3,r7,r3
 80145b0:	280ad7fa 	srli	r5,r5,31
 80145b4:	380ed7fa 	srli	r7,r7,31
 80145b8:	12400b26 	beq	r2,r9,80145e8 <__ledf2+0x5c>
 80145bc:	42401926 	beq	r8,r9,8014624 <__ledf2+0x98>
 80145c0:	10000c1e 	bne	r2,zero,80145f4 <__ledf2+0x68>
 80145c4:	5112b03a 	or	r9,r10,r4
 80145c8:	4813003a 	cmpeq	r9,r9,zero
 80145cc:	4817883a 	mov	r11,r9
 80145d0:	40000f26 	beq	r8,zero,8014610 <__ledf2+0x84>
 80145d4:	39c03fcc 	andi	r7,r7,255
 80145d8:	58001826 	beq	r11,zero,801463c <__ledf2+0xb0>
 80145dc:	38000a1e 	bne	r7,zero,8014608 <__ledf2+0x7c>
 80145e0:	00bfffc4 	movi	r2,-1
 80145e4:	f800283a 	ret
 80145e8:	5112b03a 	or	r9,r10,r4
 80145ec:	48000f1e 	bne	r9,zero,801462c <__ledf2+0xa0>
 80145f0:	40800c26 	beq	r8,r2,8014624 <__ledf2+0x98>
 80145f4:	4000101e 	bne	r8,zero,8014638 <__ledf2+0xac>
 80145f8:	1992b03a 	or	r9,r3,r6
 80145fc:	0017883a 	mov	r11,zero
 8014600:	483ff41e 	bne	r9,zero,80145d4 <__alt_data_end+0xfc0145d4>
 8014604:	283ff61e 	bne	r5,zero,80145e0 <__alt_data_end+0xfc0145e0>
 8014608:	00800044 	movi	r2,1
 801460c:	f800283a 	ret
 8014610:	1998b03a 	or	r12,r3,r6
 8014614:	603fef1e 	bne	r12,zero,80145d4 <__alt_data_end+0xfc0145d4>
 8014618:	483ffa26 	beq	r9,zero,8014604 <__alt_data_end+0xfc014604>
 801461c:	0005883a 	mov	r2,zero
 8014620:	f800283a 	ret
 8014624:	1992b03a 	or	r9,r3,r6
 8014628:	48000226 	beq	r9,zero,8014634 <__ledf2+0xa8>
 801462c:	00800084 	movi	r2,2
 8014630:	f800283a 	ret
 8014634:	103fe326 	beq	r2,zero,80145c4 <__alt_data_end+0xfc0145c4>
 8014638:	39c03fcc 	andi	r7,r7,255
 801463c:	29fff11e 	bne	r5,r7,8014604 <__alt_data_end+0xfc014604>
 8014640:	40bff016 	blt	r8,r2,8014604 <__alt_data_end+0xfc014604>
 8014644:	12000316 	blt	r2,r8,8014654 <__ledf2+0xc8>
 8014648:	1abfee36 	bltu	r3,r10,8014604 <__alt_data_end+0xfc014604>
 801464c:	50c00326 	beq	r10,r3,801465c <__ledf2+0xd0>
 8014650:	50fff22e 	bgeu	r10,r3,801461c <__alt_data_end+0xfc01461c>
 8014654:	283fe226 	beq	r5,zero,80145e0 <__alt_data_end+0xfc0145e0>
 8014658:	003feb06 	br	8014608 <__alt_data_end+0xfc014608>
 801465c:	313fe936 	bltu	r6,r4,8014604 <__alt_data_end+0xfc014604>
 8014660:	21bfee2e 	bgeu	r4,r6,801461c <__alt_data_end+0xfc01461c>
 8014664:	283fde26 	beq	r5,zero,80145e0 <__alt_data_end+0xfc0145e0>
 8014668:	003fe706 	br	8014608 <__alt_data_end+0xfc014608>

0801466c <__subdf3>:
 801466c:	00c00434 	movhi	r3,16
 8014670:	18ffffc4 	addi	r3,r3,-1
 8014674:	defffb04 	addi	sp,sp,-20
 8014678:	28d2703a 	and	r9,r5,r3
 801467c:	3814d53a 	srli	r10,r7,20
 8014680:	38c6703a 	and	r3,r7,r3
 8014684:	3004d77a 	srli	r2,r6,29
 8014688:	dc800215 	stw	r18,8(sp)
 801468c:	dc000015 	stw	r16,0(sp)
 8014690:	2824d7fa 	srli	r18,r5,31
 8014694:	2820d53a 	srli	r16,r5,20
 8014698:	481290fa 	slli	r9,r9,3
 801469c:	200ad77a 	srli	r5,r4,29
 80146a0:	180690fa 	slli	r3,r3,3
 80146a4:	dc400115 	stw	r17,4(sp)
 80146a8:	dfc00415 	stw	ra,16(sp)
 80146ac:	202290fa 	slli	r17,r4,3
 80146b0:	dcc00315 	stw	r19,12(sp)
 80146b4:	5281ffcc 	andi	r10,r10,2047
 80146b8:	0101ffc4 	movi	r4,2047
 80146bc:	9011883a 	mov	r8,r18
 80146c0:	8401ffcc 	andi	r16,r16,2047
 80146c4:	94803fcc 	andi	r18,r18,255
 80146c8:	494ab03a 	or	r5,r9,r5
 80146cc:	380ed7fa 	srli	r7,r7,31
 80146d0:	1886b03a 	or	r3,r3,r2
 80146d4:	300c90fa 	slli	r6,r6,3
 80146d8:	51009026 	beq	r10,r4,801491c <__subdf3+0x2b0>
 80146dc:	39c0005c 	xori	r7,r7,1
 80146e0:	8285c83a 	sub	r2,r16,r10
 80146e4:	91c06f26 	beq	r18,r7,80148a4 <__subdf3+0x238>
 80146e8:	0080b10e 	bge	zero,r2,80149b0 <__subdf3+0x344>
 80146ec:	50002a1e 	bne	r10,zero,8014798 <__subdf3+0x12c>
 80146f0:	1988b03a 	or	r4,r3,r6
 80146f4:	2000941e 	bne	r4,zero,8014948 <__subdf3+0x2dc>
 80146f8:	888001cc 	andi	r2,r17,7
 80146fc:	10005b26 	beq	r2,zero,801486c <__subdf3+0x200>
 8014700:	88c003cc 	andi	r3,r17,15
 8014704:	00800104 	movi	r2,4
 8014708:	18805826 	beq	r3,r2,801486c <__subdf3+0x200>
 801470c:	88c00104 	addi	r3,r17,4
 8014710:	1c63803a 	cmpltu	r17,r3,r17
 8014714:	2c4b883a 	add	r5,r5,r17
 8014718:	2880202c 	andhi	r2,r5,128
 801471c:	9200004c 	andi	r8,r18,1
 8014720:	1823883a 	mov	r17,r3
 8014724:	10005426 	beq	r2,zero,8014878 <__subdf3+0x20c>
 8014728:	84000044 	addi	r16,r16,1
 801472c:	0081ffc4 	movi	r2,2047
 8014730:	8080bf26 	beq	r16,r2,8014a30 <__subdf3+0x3c4>
 8014734:	013fe034 	movhi	r4,65408
 8014738:	213fffc4 	addi	r4,r4,-1
 801473c:	290a703a 	and	r5,r5,r4
 8014740:	2804977a 	slli	r2,r5,29
 8014744:	280a927a 	slli	r5,r5,9
 8014748:	8822d0fa 	srli	r17,r17,3
 801474c:	8401ffcc 	andi	r16,r16,2047
 8014750:	2808d33a 	srli	r4,r5,12
 8014754:	1444b03a 	or	r2,r2,r17
 8014758:	8401ffcc 	andi	r16,r16,2047
 801475c:	800a953a 	slli	r5,r16,20
 8014760:	40c03fcc 	andi	r3,r8,255
 8014764:	04000434 	movhi	r16,16
 8014768:	180697fa 	slli	r3,r3,31
 801476c:	843fffc4 	addi	r16,r16,-1
 8014770:	2420703a 	and	r16,r4,r16
 8014774:	8160b03a 	or	r16,r16,r5
 8014778:	80c6b03a 	or	r3,r16,r3
 801477c:	dfc00417 	ldw	ra,16(sp)
 8014780:	dcc00317 	ldw	r19,12(sp)
 8014784:	dc800217 	ldw	r18,8(sp)
 8014788:	dc400117 	ldw	r17,4(sp)
 801478c:	dc000017 	ldw	r16,0(sp)
 8014790:	dec00504 	addi	sp,sp,20
 8014794:	f800283a 	ret
 8014798:	0101ffc4 	movi	r4,2047
 801479c:	813fd626 	beq	r16,r4,80146f8 <__alt_data_end+0xfc0146f8>
 80147a0:	18c02034 	orhi	r3,r3,128
 80147a4:	01000e04 	movi	r4,56
 80147a8:	2080a416 	blt	r4,r2,8014a3c <__subdf3+0x3d0>
 80147ac:	010007c4 	movi	r4,31
 80147b0:	2080c716 	blt	r4,r2,8014ad0 <__subdf3+0x464>
 80147b4:	01000804 	movi	r4,32
 80147b8:	2089c83a 	sub	r4,r4,r2
 80147bc:	1910983a 	sll	r8,r3,r4
 80147c0:	308ed83a 	srl	r7,r6,r2
 80147c4:	3108983a 	sll	r4,r6,r4
 80147c8:	1884d83a 	srl	r2,r3,r2
 80147cc:	41ccb03a 	or	r6,r8,r7
 80147d0:	2008c03a 	cmpne	r4,r4,zero
 80147d4:	310cb03a 	or	r6,r6,r4
 80147d8:	898dc83a 	sub	r6,r17,r6
 80147dc:	89a3803a 	cmpltu	r17,r17,r6
 80147e0:	288bc83a 	sub	r5,r5,r2
 80147e4:	2c4bc83a 	sub	r5,r5,r17
 80147e8:	3023883a 	mov	r17,r6
 80147ec:	2880202c 	andhi	r2,r5,128
 80147f0:	10006b26 	beq	r2,zero,80149a0 <__subdf3+0x334>
 80147f4:	04c02034 	movhi	r19,128
 80147f8:	9cffffc4 	addi	r19,r19,-1
 80147fc:	2ce6703a 	and	r19,r5,r19
 8014800:	98007c26 	beq	r19,zero,80149f4 <__subdf3+0x388>
 8014804:	9809883a 	mov	r4,r19
 8014808:	8005d840 	call	8005d84 <__clzsi2>
 801480c:	10fffe04 	addi	r3,r2,-8
 8014810:	010007c4 	movi	r4,31
 8014814:	20c07d16 	blt	r4,r3,8014a0c <__subdf3+0x3a0>
 8014818:	01400a04 	movi	r5,40
 801481c:	2885c83a 	sub	r2,r5,r2
 8014820:	888ad83a 	srl	r5,r17,r2
 8014824:	98e6983a 	sll	r19,r19,r3
 8014828:	88e2983a 	sll	r17,r17,r3
 801482c:	2ce6b03a 	or	r19,r5,r19
 8014830:	1c007a16 	blt	r3,r16,8014a1c <__subdf3+0x3b0>
 8014834:	1c21c83a 	sub	r16,r3,r16
 8014838:	81400044 	addi	r5,r16,1
 801483c:	00c007c4 	movi	r3,31
 8014840:	19409616 	blt	r3,r5,8014a9c <__subdf3+0x430>
 8014844:	1c21c83a 	sub	r16,r3,r16
 8014848:	8c08983a 	sll	r4,r17,r16
 801484c:	8946d83a 	srl	r3,r17,r5
 8014850:	9c20983a 	sll	r16,r19,r16
 8014854:	2008c03a 	cmpne	r4,r4,zero
 8014858:	994ad83a 	srl	r5,r19,r5
 801485c:	1c06b03a 	or	r3,r3,r16
 8014860:	1922b03a 	or	r17,r3,r4
 8014864:	0021883a 	mov	r16,zero
 8014868:	003fa306 	br	80146f8 <__alt_data_end+0xfc0146f8>
 801486c:	2880202c 	andhi	r2,r5,128
 8014870:	9200004c 	andi	r8,r18,1
 8014874:	103fac1e 	bne	r2,zero,8014728 <__alt_data_end+0xfc014728>
 8014878:	2804977a 	slli	r2,r5,29
 801487c:	8822d0fa 	srli	r17,r17,3
 8014880:	00c1ffc4 	movi	r3,2047
 8014884:	280ad0fa 	srli	r5,r5,3
 8014888:	1444b03a 	or	r2,r2,r17
 801488c:	80c02726 	beq	r16,r3,801492c <__subdf3+0x2c0>
 8014890:	01000434 	movhi	r4,16
 8014894:	213fffc4 	addi	r4,r4,-1
 8014898:	80e0703a 	and	r16,r16,r3
 801489c:	2908703a 	and	r4,r5,r4
 80148a0:	003fad06 	br	8014758 <__alt_data_end+0xfc014758>
 80148a4:	0080690e 	bge	zero,r2,8014a4c <__subdf3+0x3e0>
 80148a8:	50002f26 	beq	r10,zero,8014968 <__subdf3+0x2fc>
 80148ac:	0101ffc4 	movi	r4,2047
 80148b0:	813f9126 	beq	r16,r4,80146f8 <__alt_data_end+0xfc0146f8>
 80148b4:	18c02034 	orhi	r3,r3,128
 80148b8:	01000e04 	movi	r4,56
 80148bc:	2080b00e 	bge	r4,r2,8014b80 <__subdf3+0x514>
 80148c0:	198cb03a 	or	r6,r3,r6
 80148c4:	300ec03a 	cmpne	r7,r6,zero
 80148c8:	0005883a 	mov	r2,zero
 80148cc:	3c4f883a 	add	r7,r7,r17
 80148d0:	3c63803a 	cmpltu	r17,r7,r17
 80148d4:	114b883a 	add	r5,r2,r5
 80148d8:	2c4b883a 	add	r5,r5,r17
 80148dc:	3823883a 	mov	r17,r7
 80148e0:	2880202c 	andhi	r2,r5,128
 80148e4:	10002e26 	beq	r2,zero,80149a0 <__subdf3+0x334>
 80148e8:	84000044 	addi	r16,r16,1
 80148ec:	0081ffc4 	movi	r2,2047
 80148f0:	8080de26 	beq	r16,r2,8014c6c <__subdf3+0x600>
 80148f4:	00bfe034 	movhi	r2,65408
 80148f8:	10bfffc4 	addi	r2,r2,-1
 80148fc:	288a703a 	and	r5,r5,r2
 8014900:	880cd07a 	srli	r6,r17,1
 8014904:	280897fa 	slli	r4,r5,31
 8014908:	88c0004c 	andi	r3,r17,1
 801490c:	30e2b03a 	or	r17,r6,r3
 8014910:	280ad07a 	srli	r5,r5,1
 8014914:	8922b03a 	or	r17,r17,r4
 8014918:	003f7706 	br	80146f8 <__alt_data_end+0xfc0146f8>
 801491c:	1984b03a 	or	r2,r3,r6
 8014920:	103f6e26 	beq	r2,zero,80146dc <__alt_data_end+0xfc0146dc>
 8014924:	39c03fcc 	andi	r7,r7,255
 8014928:	003f6d06 	br	80146e0 <__alt_data_end+0xfc0146e0>
 801492c:	1146b03a 	or	r3,r2,r5
 8014930:	18003f26 	beq	r3,zero,8014a30 <__subdf3+0x3c4>
 8014934:	00c00434 	movhi	r3,16
 8014938:	29000234 	orhi	r4,r5,8
 801493c:	18ffffc4 	addi	r3,r3,-1
 8014940:	20c8703a 	and	r4,r4,r3
 8014944:	003f8406 	br	8014758 <__alt_data_end+0xfc014758>
 8014948:	10bfffc4 	addi	r2,r2,-1
 801494c:	1000501e 	bne	r2,zero,8014a90 <__subdf3+0x424>
 8014950:	898fc83a 	sub	r7,r17,r6
 8014954:	89e3803a 	cmpltu	r17,r17,r7
 8014958:	28cbc83a 	sub	r5,r5,r3
 801495c:	2c4bc83a 	sub	r5,r5,r17
 8014960:	3823883a 	mov	r17,r7
 8014964:	003fa106 	br	80147ec <__alt_data_end+0xfc0147ec>
 8014968:	1988b03a 	or	r4,r3,r6
 801496c:	203f6226 	beq	r4,zero,80146f8 <__alt_data_end+0xfc0146f8>
 8014970:	10bfffc4 	addi	r2,r2,-1
 8014974:	10009b1e 	bne	r2,zero,8014be4 <__subdf3+0x578>
 8014978:	344d883a 	add	r6,r6,r17
 801497c:	3463803a 	cmpltu	r17,r6,r17
 8014980:	194b883a 	add	r5,r3,r5
 8014984:	2c4b883a 	add	r5,r5,r17
 8014988:	3023883a 	mov	r17,r6
 801498c:	003fd406 	br	80148e0 <__alt_data_end+0xfc0148e0>
 8014990:	1106b03a 	or	r3,r2,r4
 8014994:	1800b426 	beq	r3,zero,8014c68 <__subdf3+0x5fc>
 8014998:	100b883a 	mov	r5,r2
 801499c:	2023883a 	mov	r17,r4
 80149a0:	888001cc 	andi	r2,r17,7
 80149a4:	103f561e 	bne	r2,zero,8014700 <__alt_data_end+0xfc014700>
 80149a8:	9200004c 	andi	r8,r18,1
 80149ac:	003fb206 	br	8014878 <__alt_data_end+0xfc014878>
 80149b0:	1000531e 	bne	r2,zero,8014b00 <__subdf3+0x494>
 80149b4:	80800044 	addi	r2,r16,1
 80149b8:	1081ffcc 	andi	r2,r2,2047
 80149bc:	01000044 	movi	r4,1
 80149c0:	2080a00e 	bge	r4,r2,8014c44 <__subdf3+0x5d8>
 80149c4:	8985c83a 	sub	r2,r17,r6
 80149c8:	8889803a 	cmpltu	r4,r17,r2
 80149cc:	28e7c83a 	sub	r19,r5,r3
 80149d0:	9927c83a 	sub	r19,r19,r4
 80149d4:	9900202c 	andhi	r4,r19,128
 80149d8:	20006226 	beq	r4,zero,8014b64 <__subdf3+0x4f8>
 80149dc:	3463c83a 	sub	r17,r6,r17
 80149e0:	194bc83a 	sub	r5,r3,r5
 80149e4:	344d803a 	cmpltu	r6,r6,r17
 80149e8:	29a7c83a 	sub	r19,r5,r6
 80149ec:	3825883a 	mov	r18,r7
 80149f0:	983f841e 	bne	r19,zero,8014804 <__alt_data_end+0xfc014804>
 80149f4:	8809883a 	mov	r4,r17
 80149f8:	8005d840 	call	8005d84 <__clzsi2>
 80149fc:	10800804 	addi	r2,r2,32
 8014a00:	10fffe04 	addi	r3,r2,-8
 8014a04:	010007c4 	movi	r4,31
 8014a08:	20ff830e 	bge	r4,r3,8014818 <__alt_data_end+0xfc014818>
 8014a0c:	14fff604 	addi	r19,r2,-40
 8014a10:	8ce6983a 	sll	r19,r17,r19
 8014a14:	0023883a 	mov	r17,zero
 8014a18:	1c3f860e 	bge	r3,r16,8014834 <__alt_data_end+0xfc014834>
 8014a1c:	017fe034 	movhi	r5,65408
 8014a20:	297fffc4 	addi	r5,r5,-1
 8014a24:	80e1c83a 	sub	r16,r16,r3
 8014a28:	994a703a 	and	r5,r19,r5
 8014a2c:	003f3206 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014a30:	0009883a 	mov	r4,zero
 8014a34:	0005883a 	mov	r2,zero
 8014a38:	003f4706 	br	8014758 <__alt_data_end+0xfc014758>
 8014a3c:	198cb03a 	or	r6,r3,r6
 8014a40:	300cc03a 	cmpne	r6,r6,zero
 8014a44:	0005883a 	mov	r2,zero
 8014a48:	003f6306 	br	80147d8 <__alt_data_end+0xfc0147d8>
 8014a4c:	10009d1e 	bne	r2,zero,8014cc4 <__subdf3+0x658>
 8014a50:	81c00044 	addi	r7,r16,1
 8014a54:	3881ffcc 	andi	r2,r7,2047
 8014a58:	02400044 	movi	r9,1
 8014a5c:	4880680e 	bge	r9,r2,8014c00 <__subdf3+0x594>
 8014a60:	0081ffc4 	movi	r2,2047
 8014a64:	3880ae26 	beq	r7,r2,8014d20 <__subdf3+0x6b4>
 8014a68:	344d883a 	add	r6,r6,r17
 8014a6c:	3463803a 	cmpltu	r17,r6,r17
 8014a70:	194b883a 	add	r5,r3,r5
 8014a74:	2c4b883a 	add	r5,r5,r17
 8014a78:	282297fa 	slli	r17,r5,31
 8014a7c:	300cd07a 	srli	r6,r6,1
 8014a80:	280ad07a 	srli	r5,r5,1
 8014a84:	3821883a 	mov	r16,r7
 8014a88:	89a2b03a 	or	r17,r17,r6
 8014a8c:	003f1a06 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014a90:	0101ffc4 	movi	r4,2047
 8014a94:	813f431e 	bne	r16,r4,80147a4 <__alt_data_end+0xfc0147a4>
 8014a98:	003f1706 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014a9c:	80bff844 	addi	r2,r16,-31
 8014aa0:	00c00804 	movi	r3,32
 8014aa4:	9884d83a 	srl	r2,r19,r2
 8014aa8:	28c05126 	beq	r5,r3,8014bf0 <__subdf3+0x584>
 8014aac:	00c00fc4 	movi	r3,63
 8014ab0:	1c21c83a 	sub	r16,r3,r16
 8014ab4:	9c26983a 	sll	r19,r19,r16
 8014ab8:	9c62b03a 	or	r17,r19,r17
 8014abc:	8822c03a 	cmpne	r17,r17,zero
 8014ac0:	88a2b03a 	or	r17,r17,r2
 8014ac4:	000b883a 	mov	r5,zero
 8014ac8:	0021883a 	mov	r16,zero
 8014acc:	003fb406 	br	80149a0 <__alt_data_end+0xfc0149a0>
 8014ad0:	113ff804 	addi	r4,r2,-32
 8014ad4:	01c00804 	movi	r7,32
 8014ad8:	1908d83a 	srl	r4,r3,r4
 8014adc:	11c04626 	beq	r2,r7,8014bf8 <__subdf3+0x58c>
 8014ae0:	01c01004 	movi	r7,64
 8014ae4:	3885c83a 	sub	r2,r7,r2
 8014ae8:	1884983a 	sll	r2,r3,r2
 8014aec:	118cb03a 	or	r6,r2,r6
 8014af0:	300cc03a 	cmpne	r6,r6,zero
 8014af4:	310cb03a 	or	r6,r6,r4
 8014af8:	0005883a 	mov	r2,zero
 8014afc:	003f3606 	br	80147d8 <__alt_data_end+0xfc0147d8>
 8014b00:	80002b26 	beq	r16,zero,8014bb0 <__subdf3+0x544>
 8014b04:	0101ffc4 	movi	r4,2047
 8014b08:	51006926 	beq	r10,r4,8014cb0 <__subdf3+0x644>
 8014b0c:	0085c83a 	sub	r2,zero,r2
 8014b10:	29402034 	orhi	r5,r5,128
 8014b14:	01000e04 	movi	r4,56
 8014b18:	20807d16 	blt	r4,r2,8014d10 <__subdf3+0x6a4>
 8014b1c:	010007c4 	movi	r4,31
 8014b20:	2080d916 	blt	r4,r2,8014e88 <__subdf3+0x81c>
 8014b24:	01000804 	movi	r4,32
 8014b28:	2089c83a 	sub	r4,r4,r2
 8014b2c:	2912983a 	sll	r9,r5,r4
 8014b30:	8890d83a 	srl	r8,r17,r2
 8014b34:	8908983a 	sll	r4,r17,r4
 8014b38:	2884d83a 	srl	r2,r5,r2
 8014b3c:	4a22b03a 	or	r17,r9,r8
 8014b40:	2008c03a 	cmpne	r4,r4,zero
 8014b44:	8922b03a 	or	r17,r17,r4
 8014b48:	3463c83a 	sub	r17,r6,r17
 8014b4c:	1885c83a 	sub	r2,r3,r2
 8014b50:	344d803a 	cmpltu	r6,r6,r17
 8014b54:	118bc83a 	sub	r5,r2,r6
 8014b58:	5021883a 	mov	r16,r10
 8014b5c:	3825883a 	mov	r18,r7
 8014b60:	003f2206 	br	80147ec <__alt_data_end+0xfc0147ec>
 8014b64:	9886b03a 	or	r3,r19,r2
 8014b68:	18001c1e 	bne	r3,zero,8014bdc <__subdf3+0x570>
 8014b6c:	0011883a 	mov	r8,zero
 8014b70:	000b883a 	mov	r5,zero
 8014b74:	0023883a 	mov	r17,zero
 8014b78:	0021883a 	mov	r16,zero
 8014b7c:	003f3e06 	br	8014878 <__alt_data_end+0xfc014878>
 8014b80:	010007c4 	movi	r4,31
 8014b84:	20803c16 	blt	r4,r2,8014c78 <__subdf3+0x60c>
 8014b88:	01000804 	movi	r4,32
 8014b8c:	2089c83a 	sub	r4,r4,r2
 8014b90:	1912983a 	sll	r9,r3,r4
 8014b94:	308ed83a 	srl	r7,r6,r2
 8014b98:	3108983a 	sll	r4,r6,r4
 8014b9c:	1884d83a 	srl	r2,r3,r2
 8014ba0:	49ceb03a 	or	r7,r9,r7
 8014ba4:	2008c03a 	cmpne	r4,r4,zero
 8014ba8:	390eb03a 	or	r7,r7,r4
 8014bac:	003f4706 	br	80148cc <__alt_data_end+0xfc0148cc>
 8014bb0:	2c48b03a 	or	r4,r5,r17
 8014bb4:	20003e26 	beq	r4,zero,8014cb0 <__subdf3+0x644>
 8014bb8:	0084303a 	nor	r2,zero,r2
 8014bbc:	10003a1e 	bne	r2,zero,8014ca8 <__subdf3+0x63c>
 8014bc0:	3463c83a 	sub	r17,r6,r17
 8014bc4:	194bc83a 	sub	r5,r3,r5
 8014bc8:	344d803a 	cmpltu	r6,r6,r17
 8014bcc:	298bc83a 	sub	r5,r5,r6
 8014bd0:	5021883a 	mov	r16,r10
 8014bd4:	3825883a 	mov	r18,r7
 8014bd8:	003f0406 	br	80147ec <__alt_data_end+0xfc0147ec>
 8014bdc:	1023883a 	mov	r17,r2
 8014be0:	003f0706 	br	8014800 <__alt_data_end+0xfc014800>
 8014be4:	0101ffc4 	movi	r4,2047
 8014be8:	813f331e 	bne	r16,r4,80148b8 <__alt_data_end+0xfc0148b8>
 8014bec:	003ec206 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014bf0:	0027883a 	mov	r19,zero
 8014bf4:	003fb006 	br	8014ab8 <__alt_data_end+0xfc014ab8>
 8014bf8:	0005883a 	mov	r2,zero
 8014bfc:	003fbb06 	br	8014aec <__alt_data_end+0xfc014aec>
 8014c00:	2c44b03a 	or	r2,r5,r17
 8014c04:	80008b1e 	bne	r16,zero,8014e34 <__subdf3+0x7c8>
 8014c08:	1000b526 	beq	r2,zero,8014ee0 <__subdf3+0x874>
 8014c0c:	1984b03a 	or	r2,r3,r6
 8014c10:	103eb926 	beq	r2,zero,80146f8 <__alt_data_end+0xfc0146f8>
 8014c14:	3449883a 	add	r4,r6,r17
 8014c18:	2463803a 	cmpltu	r17,r4,r17
 8014c1c:	194b883a 	add	r5,r3,r5
 8014c20:	2c4b883a 	add	r5,r5,r17
 8014c24:	2880202c 	andhi	r2,r5,128
 8014c28:	2023883a 	mov	r17,r4
 8014c2c:	103f5c26 	beq	r2,zero,80149a0 <__alt_data_end+0xfc0149a0>
 8014c30:	00bfe034 	movhi	r2,65408
 8014c34:	10bfffc4 	addi	r2,r2,-1
 8014c38:	4821883a 	mov	r16,r9
 8014c3c:	288a703a 	and	r5,r5,r2
 8014c40:	003ead06 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014c44:	2c44b03a 	or	r2,r5,r17
 8014c48:	8000291e 	bne	r16,zero,8014cf0 <__subdf3+0x684>
 8014c4c:	10004f1e 	bne	r2,zero,8014d8c <__subdf3+0x720>
 8014c50:	1984b03a 	or	r2,r3,r6
 8014c54:	10000426 	beq	r2,zero,8014c68 <__subdf3+0x5fc>
 8014c58:	180b883a 	mov	r5,r3
 8014c5c:	3023883a 	mov	r17,r6
 8014c60:	3825883a 	mov	r18,r7
 8014c64:	003ea406 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014c68:	0011883a 	mov	r8,zero
 8014c6c:	000b883a 	mov	r5,zero
 8014c70:	0023883a 	mov	r17,zero
 8014c74:	003f0006 	br	8014878 <__alt_data_end+0xfc014878>
 8014c78:	11fff804 	addi	r7,r2,-32
 8014c7c:	19c8d83a 	srl	r4,r3,r7
 8014c80:	01c00804 	movi	r7,32
 8014c84:	11c07e26 	beq	r2,r7,8014e80 <__subdf3+0x814>
 8014c88:	01c01004 	movi	r7,64
 8014c8c:	3885c83a 	sub	r2,r7,r2
 8014c90:	1884983a 	sll	r2,r3,r2
 8014c94:	118cb03a 	or	r6,r2,r6
 8014c98:	300ec03a 	cmpne	r7,r6,zero
 8014c9c:	390eb03a 	or	r7,r7,r4
 8014ca0:	0005883a 	mov	r2,zero
 8014ca4:	003f0906 	br	80148cc <__alt_data_end+0xfc0148cc>
 8014ca8:	0101ffc4 	movi	r4,2047
 8014cac:	513f991e 	bne	r10,r4,8014b14 <__alt_data_end+0xfc014b14>
 8014cb0:	180b883a 	mov	r5,r3
 8014cb4:	3023883a 	mov	r17,r6
 8014cb8:	5021883a 	mov	r16,r10
 8014cbc:	3825883a 	mov	r18,r7
 8014cc0:	003e8d06 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014cc4:	80001a1e 	bne	r16,zero,8014d30 <__subdf3+0x6c4>
 8014cc8:	2c48b03a 	or	r4,r5,r17
 8014ccc:	20005526 	beq	r4,zero,8014e24 <__subdf3+0x7b8>
 8014cd0:	0084303a 	nor	r2,zero,r2
 8014cd4:	1000511e 	bne	r2,zero,8014e1c <__subdf3+0x7b0>
 8014cd8:	89a3883a 	add	r17,r17,r6
 8014cdc:	194b883a 	add	r5,r3,r5
 8014ce0:	898d803a 	cmpltu	r6,r17,r6
 8014ce4:	298b883a 	add	r5,r5,r6
 8014ce8:	5021883a 	mov	r16,r10
 8014cec:	003efc06 	br	80148e0 <__alt_data_end+0xfc0148e0>
 8014cf0:	1000341e 	bne	r2,zero,8014dc4 <__subdf3+0x758>
 8014cf4:	1984b03a 	or	r2,r3,r6
 8014cf8:	10006f26 	beq	r2,zero,8014eb8 <__subdf3+0x84c>
 8014cfc:	180b883a 	mov	r5,r3
 8014d00:	3023883a 	mov	r17,r6
 8014d04:	3825883a 	mov	r18,r7
 8014d08:	0401ffc4 	movi	r16,2047
 8014d0c:	003e7a06 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014d10:	2c62b03a 	or	r17,r5,r17
 8014d14:	8822c03a 	cmpne	r17,r17,zero
 8014d18:	0005883a 	mov	r2,zero
 8014d1c:	003f8a06 	br	8014b48 <__alt_data_end+0xfc014b48>
 8014d20:	3821883a 	mov	r16,r7
 8014d24:	000b883a 	mov	r5,zero
 8014d28:	0023883a 	mov	r17,zero
 8014d2c:	003ed206 	br	8014878 <__alt_data_end+0xfc014878>
 8014d30:	0101ffc4 	movi	r4,2047
 8014d34:	51003b26 	beq	r10,r4,8014e24 <__subdf3+0x7b8>
 8014d38:	0085c83a 	sub	r2,zero,r2
 8014d3c:	29402034 	orhi	r5,r5,128
 8014d40:	01000e04 	movi	r4,56
 8014d44:	20806216 	blt	r4,r2,8014ed0 <__subdf3+0x864>
 8014d48:	010007c4 	movi	r4,31
 8014d4c:	20806b16 	blt	r4,r2,8014efc <__subdf3+0x890>
 8014d50:	01000804 	movi	r4,32
 8014d54:	2089c83a 	sub	r4,r4,r2
 8014d58:	2912983a 	sll	r9,r5,r4
 8014d5c:	888ed83a 	srl	r7,r17,r2
 8014d60:	8908983a 	sll	r4,r17,r4
 8014d64:	2884d83a 	srl	r2,r5,r2
 8014d68:	49e2b03a 	or	r17,r9,r7
 8014d6c:	2008c03a 	cmpne	r4,r4,zero
 8014d70:	8922b03a 	or	r17,r17,r4
 8014d74:	89a3883a 	add	r17,r17,r6
 8014d78:	10c5883a 	add	r2,r2,r3
 8014d7c:	898d803a 	cmpltu	r6,r17,r6
 8014d80:	118b883a 	add	r5,r2,r6
 8014d84:	5021883a 	mov	r16,r10
 8014d88:	003ed506 	br	80148e0 <__alt_data_end+0xfc0148e0>
 8014d8c:	1984b03a 	or	r2,r3,r6
 8014d90:	103e5926 	beq	r2,zero,80146f8 <__alt_data_end+0xfc0146f8>
 8014d94:	8989c83a 	sub	r4,r17,r6
 8014d98:	8911803a 	cmpltu	r8,r17,r4
 8014d9c:	28c5c83a 	sub	r2,r5,r3
 8014da0:	1205c83a 	sub	r2,r2,r8
 8014da4:	1200202c 	andhi	r8,r2,128
 8014da8:	403ef926 	beq	r8,zero,8014990 <__alt_data_end+0xfc014990>
 8014dac:	3463c83a 	sub	r17,r6,r17
 8014db0:	194bc83a 	sub	r5,r3,r5
 8014db4:	344d803a 	cmpltu	r6,r6,r17
 8014db8:	298bc83a 	sub	r5,r5,r6
 8014dbc:	3825883a 	mov	r18,r7
 8014dc0:	003e4d06 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014dc4:	1984b03a 	or	r2,r3,r6
 8014dc8:	10002b26 	beq	r2,zero,8014e78 <__subdf3+0x80c>
 8014dcc:	2808d0fa 	srli	r4,r5,3
 8014dd0:	8822d0fa 	srli	r17,r17,3
 8014dd4:	280a977a 	slli	r5,r5,29
 8014dd8:	2080022c 	andhi	r2,r4,8
 8014ddc:	2c62b03a 	or	r17,r5,r17
 8014de0:	10000826 	beq	r2,zero,8014e04 <__subdf3+0x798>
 8014de4:	1810d0fa 	srli	r8,r3,3
 8014de8:	4080022c 	andhi	r2,r8,8
 8014dec:	1000051e 	bne	r2,zero,8014e04 <__subdf3+0x798>
 8014df0:	300cd0fa 	srli	r6,r6,3
 8014df4:	1804977a 	slli	r2,r3,29
 8014df8:	4009883a 	mov	r4,r8
 8014dfc:	3825883a 	mov	r18,r7
 8014e00:	11a2b03a 	or	r17,r2,r6
 8014e04:	880ad77a 	srli	r5,r17,29
 8014e08:	200890fa 	slli	r4,r4,3
 8014e0c:	882290fa 	slli	r17,r17,3
 8014e10:	0401ffc4 	movi	r16,2047
 8014e14:	290ab03a 	or	r5,r5,r4
 8014e18:	003e3706 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014e1c:	0101ffc4 	movi	r4,2047
 8014e20:	513fc71e 	bne	r10,r4,8014d40 <__alt_data_end+0xfc014d40>
 8014e24:	180b883a 	mov	r5,r3
 8014e28:	3023883a 	mov	r17,r6
 8014e2c:	5021883a 	mov	r16,r10
 8014e30:	003e3106 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014e34:	10002d26 	beq	r2,zero,8014eec <__subdf3+0x880>
 8014e38:	1984b03a 	or	r2,r3,r6
 8014e3c:	10000e26 	beq	r2,zero,8014e78 <__subdf3+0x80c>
 8014e40:	2808d0fa 	srli	r4,r5,3
 8014e44:	8822d0fa 	srli	r17,r17,3
 8014e48:	280a977a 	slli	r5,r5,29
 8014e4c:	2080022c 	andhi	r2,r4,8
 8014e50:	2c62b03a 	or	r17,r5,r17
 8014e54:	103feb26 	beq	r2,zero,8014e04 <__alt_data_end+0xfc014e04>
 8014e58:	180ed0fa 	srli	r7,r3,3
 8014e5c:	3880022c 	andhi	r2,r7,8
 8014e60:	103fe81e 	bne	r2,zero,8014e04 <__alt_data_end+0xfc014e04>
 8014e64:	300cd0fa 	srli	r6,r6,3
 8014e68:	1804977a 	slli	r2,r3,29
 8014e6c:	3809883a 	mov	r4,r7
 8014e70:	11a2b03a 	or	r17,r2,r6
 8014e74:	003fe306 	br	8014e04 <__alt_data_end+0xfc014e04>
 8014e78:	0401ffc4 	movi	r16,2047
 8014e7c:	003e1e06 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014e80:	0005883a 	mov	r2,zero
 8014e84:	003f8306 	br	8014c94 <__alt_data_end+0xfc014c94>
 8014e88:	113ff804 	addi	r4,r2,-32
 8014e8c:	02000804 	movi	r8,32
 8014e90:	2908d83a 	srl	r4,r5,r4
 8014e94:	12002526 	beq	r2,r8,8014f2c <__subdf3+0x8c0>
 8014e98:	02001004 	movi	r8,64
 8014e9c:	4085c83a 	sub	r2,r8,r2
 8014ea0:	288a983a 	sll	r5,r5,r2
 8014ea4:	2c62b03a 	or	r17,r5,r17
 8014ea8:	8822c03a 	cmpne	r17,r17,zero
 8014eac:	8922b03a 	or	r17,r17,r4
 8014eb0:	0005883a 	mov	r2,zero
 8014eb4:	003f2406 	br	8014b48 <__alt_data_end+0xfc014b48>
 8014eb8:	01402034 	movhi	r5,128
 8014ebc:	0011883a 	mov	r8,zero
 8014ec0:	297fffc4 	addi	r5,r5,-1
 8014ec4:	047ffe04 	movi	r17,-8
 8014ec8:	0401ffc4 	movi	r16,2047
 8014ecc:	003e6a06 	br	8014878 <__alt_data_end+0xfc014878>
 8014ed0:	2c62b03a 	or	r17,r5,r17
 8014ed4:	8822c03a 	cmpne	r17,r17,zero
 8014ed8:	0005883a 	mov	r2,zero
 8014edc:	003fa506 	br	8014d74 <__alt_data_end+0xfc014d74>
 8014ee0:	180b883a 	mov	r5,r3
 8014ee4:	3023883a 	mov	r17,r6
 8014ee8:	003e0306 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014eec:	180b883a 	mov	r5,r3
 8014ef0:	3023883a 	mov	r17,r6
 8014ef4:	0401ffc4 	movi	r16,2047
 8014ef8:	003dff06 	br	80146f8 <__alt_data_end+0xfc0146f8>
 8014efc:	113ff804 	addi	r4,r2,-32
 8014f00:	01c00804 	movi	r7,32
 8014f04:	2908d83a 	srl	r4,r5,r4
 8014f08:	11c00a26 	beq	r2,r7,8014f34 <__subdf3+0x8c8>
 8014f0c:	01c01004 	movi	r7,64
 8014f10:	3885c83a 	sub	r2,r7,r2
 8014f14:	288a983a 	sll	r5,r5,r2
 8014f18:	2c62b03a 	or	r17,r5,r17
 8014f1c:	8822c03a 	cmpne	r17,r17,zero
 8014f20:	8922b03a 	or	r17,r17,r4
 8014f24:	0005883a 	mov	r2,zero
 8014f28:	003f9206 	br	8014d74 <__alt_data_end+0xfc014d74>
 8014f2c:	000b883a 	mov	r5,zero
 8014f30:	003fdc06 	br	8014ea4 <__alt_data_end+0xfc014ea4>
 8014f34:	000b883a 	mov	r5,zero
 8014f38:	003ff706 	br	8014f18 <__alt_data_end+0xfc014f18>

08014f3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014f3c:	defffe04 	addi	sp,sp,-8
 8014f40:	dfc00115 	stw	ra,4(sp)
 8014f44:	df000015 	stw	fp,0(sp)
 8014f48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014f4c:	008200b4 	movhi	r2,2050
 8014f50:	10913f04 	addi	r2,r2,17660
 8014f54:	10800017 	ldw	r2,0(r2)
 8014f58:	10000526 	beq	r2,zero,8014f70 <alt_get_errno+0x34>
 8014f5c:	008200b4 	movhi	r2,2050
 8014f60:	10913f04 	addi	r2,r2,17660
 8014f64:	10800017 	ldw	r2,0(r2)
 8014f68:	103ee83a 	callr	r2
 8014f6c:	00000206 	br	8014f78 <alt_get_errno+0x3c>
 8014f70:	008200b4 	movhi	r2,2050
 8014f74:	10981204 	addi	r2,r2,24648
}
 8014f78:	e037883a 	mov	sp,fp
 8014f7c:	dfc00117 	ldw	ra,4(sp)
 8014f80:	df000017 	ldw	fp,0(sp)
 8014f84:	dec00204 	addi	sp,sp,8
 8014f88:	f800283a 	ret

08014f8c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8014f8c:	defffb04 	addi	sp,sp,-20
 8014f90:	dfc00415 	stw	ra,16(sp)
 8014f94:	df000315 	stw	fp,12(sp)
 8014f98:	df000304 	addi	fp,sp,12
 8014f9c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8014fa0:	e0bfff17 	ldw	r2,-4(fp)
 8014fa4:	10000816 	blt	r2,zero,8014fc8 <close+0x3c>
 8014fa8:	e13fff17 	ldw	r4,-4(fp)
 8014fac:	01400304 	movi	r5,12
 8014fb0:	80040900 	call	8004090 <__mulsi3>
 8014fb4:	1007883a 	mov	r3,r2
 8014fb8:	008200b4 	movhi	r2,2050
 8014fbc:	108cb104 	addi	r2,r2,12996
 8014fc0:	1885883a 	add	r2,r3,r2
 8014fc4:	00000106 	br	8014fcc <close+0x40>
 8014fc8:	0005883a 	mov	r2,zero
 8014fcc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8014fd0:	e0bffd17 	ldw	r2,-12(fp)
 8014fd4:	10001926 	beq	r2,zero,801503c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8014fd8:	e0bffd17 	ldw	r2,-12(fp)
 8014fdc:	10800017 	ldw	r2,0(r2)
 8014fe0:	10800417 	ldw	r2,16(r2)
 8014fe4:	10000626 	beq	r2,zero,8015000 <close+0x74>
 8014fe8:	e0bffd17 	ldw	r2,-12(fp)
 8014fec:	10800017 	ldw	r2,0(r2)
 8014ff0:	10800417 	ldw	r2,16(r2)
 8014ff4:	e13ffd17 	ldw	r4,-12(fp)
 8014ff8:	103ee83a 	callr	r2
 8014ffc:	00000106 	br	8015004 <close+0x78>
 8015000:	0005883a 	mov	r2,zero
 8015004:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8015008:	e13fff17 	ldw	r4,-4(fp)
 801500c:	80158c40 	call	80158c4 <alt_release_fd>
    if (rval < 0)
 8015010:	e0bffe17 	ldw	r2,-8(fp)
 8015014:	1000070e 	bge	r2,zero,8015034 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8015018:	8014f3c0 	call	8014f3c <alt_get_errno>
 801501c:	1007883a 	mov	r3,r2
 8015020:	e0bffe17 	ldw	r2,-8(fp)
 8015024:	0085c83a 	sub	r2,zero,r2
 8015028:	18800015 	stw	r2,0(r3)
      return -1;
 801502c:	00bfffc4 	movi	r2,-1
 8015030:	00000706 	br	8015050 <close+0xc4>
    }
    return 0;
 8015034:	0005883a 	mov	r2,zero
 8015038:	00000506 	br	8015050 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801503c:	8014f3c0 	call	8014f3c <alt_get_errno>
 8015040:	1007883a 	mov	r3,r2
 8015044:	00801444 	movi	r2,81
 8015048:	18800015 	stw	r2,0(r3)
    return -1;
 801504c:	00bfffc4 	movi	r2,-1
  }
}
 8015050:	e037883a 	mov	sp,fp
 8015054:	dfc00117 	ldw	ra,4(sp)
 8015058:	df000017 	ldw	fp,0(sp)
 801505c:	dec00204 	addi	sp,sp,8
 8015060:	f800283a 	ret

08015064 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8015064:	defffc04 	addi	sp,sp,-16
 8015068:	df000315 	stw	fp,12(sp)
 801506c:	df000304 	addi	fp,sp,12
 8015070:	e13ffd15 	stw	r4,-12(fp)
 8015074:	e17ffe15 	stw	r5,-8(fp)
 8015078:	e1bfff15 	stw	r6,-4(fp)
  return len;
 801507c:	e0bfff17 	ldw	r2,-4(fp)
}
 8015080:	e037883a 	mov	sp,fp
 8015084:	df000017 	ldw	fp,0(sp)
 8015088:	dec00104 	addi	sp,sp,4
 801508c:	f800283a 	ret

08015090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015090:	defffe04 	addi	sp,sp,-8
 8015094:	dfc00115 	stw	ra,4(sp)
 8015098:	df000015 	stw	fp,0(sp)
 801509c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80150a0:	008200b4 	movhi	r2,2050
 80150a4:	10913f04 	addi	r2,r2,17660
 80150a8:	10800017 	ldw	r2,0(r2)
 80150ac:	10000526 	beq	r2,zero,80150c4 <alt_get_errno+0x34>
 80150b0:	008200b4 	movhi	r2,2050
 80150b4:	10913f04 	addi	r2,r2,17660
 80150b8:	10800017 	ldw	r2,0(r2)
 80150bc:	103ee83a 	callr	r2
 80150c0:	00000206 	br	80150cc <alt_get_errno+0x3c>
 80150c4:	008200b4 	movhi	r2,2050
 80150c8:	10981204 	addi	r2,r2,24648
}
 80150cc:	e037883a 	mov	sp,fp
 80150d0:	dfc00117 	ldw	ra,4(sp)
 80150d4:	df000017 	ldw	fp,0(sp)
 80150d8:	dec00204 	addi	sp,sp,8
 80150dc:	f800283a 	ret

080150e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 80150e0:	defffb04 	addi	sp,sp,-20
 80150e4:	dfc00415 	stw	ra,16(sp)
 80150e8:	df000315 	stw	fp,12(sp)
 80150ec:	df000304 	addi	fp,sp,12
 80150f0:	e13ffe15 	stw	r4,-8(fp)
 80150f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80150f8:	e0bffe17 	ldw	r2,-8(fp)
 80150fc:	10000816 	blt	r2,zero,8015120 <fstat+0x40>
 8015100:	e13ffe17 	ldw	r4,-8(fp)
 8015104:	01400304 	movi	r5,12
 8015108:	80040900 	call	8004090 <__mulsi3>
 801510c:	1007883a 	mov	r3,r2
 8015110:	008200b4 	movhi	r2,2050
 8015114:	108cb104 	addi	r2,r2,12996
 8015118:	1885883a 	add	r2,r3,r2
 801511c:	00000106 	br	8015124 <fstat+0x44>
 8015120:	0005883a 	mov	r2,zero
 8015124:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8015128:	e0bffd17 	ldw	r2,-12(fp)
 801512c:	10001026 	beq	r2,zero,8015170 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8015130:	e0bffd17 	ldw	r2,-12(fp)
 8015134:	10800017 	ldw	r2,0(r2)
 8015138:	10800817 	ldw	r2,32(r2)
 801513c:	10000726 	beq	r2,zero,801515c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8015140:	e0bffd17 	ldw	r2,-12(fp)
 8015144:	10800017 	ldw	r2,0(r2)
 8015148:	10800817 	ldw	r2,32(r2)
 801514c:	e13ffd17 	ldw	r4,-12(fp)
 8015150:	e17fff17 	ldw	r5,-4(fp)
 8015154:	103ee83a 	callr	r2
 8015158:	00000a06 	br	8015184 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 801515c:	e0bfff17 	ldw	r2,-4(fp)
 8015160:	00c80004 	movi	r3,8192
 8015164:	10c00115 	stw	r3,4(r2)
      return 0;
 8015168:	0005883a 	mov	r2,zero
 801516c:	00000506 	br	8015184 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015170:	80150900 	call	8015090 <alt_get_errno>
 8015174:	1007883a 	mov	r3,r2
 8015178:	00801444 	movi	r2,81
 801517c:	18800015 	stw	r2,0(r3)
    return -1;
 8015180:	00bfffc4 	movi	r2,-1
  }
}
 8015184:	e037883a 	mov	sp,fp
 8015188:	dfc00117 	ldw	ra,4(sp)
 801518c:	df000017 	ldw	fp,0(sp)
 8015190:	dec00204 	addi	sp,sp,8
 8015194:	f800283a 	ret

08015198 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 8015198:	defff404 	addi	sp,sp,-48
 801519c:	dfc00b15 	stw	ra,44(sp)
 80151a0:	df000a15 	stw	fp,40(sp)
 80151a4:	dd000915 	stw	r20,36(sp)
 80151a8:	dcc00815 	stw	r19,32(sp)
 80151ac:	dc800715 	stw	r18,28(sp)
 80151b0:	dc400615 	stw	r17,24(sp)
 80151b4:	dc000515 	stw	r16,20(sp)
 80151b8:	df000a04 	addi	fp,sp,40
 80151bc:	e13ff915 	stw	r4,-28(fp)
 80151c0:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 80151c4:	e0bffa17 	ldw	r2,-24(fp)
 80151c8:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80151cc:	008200b4 	movhi	r2,2050
 80151d0:	10981e04 	addi	r2,r2,24696
 80151d4:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 80151d8:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80151dc:	008200b4 	movhi	r2,2050
 80151e0:	10981d04 	addi	r2,r2,24692
 80151e4:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
 80151e8:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 80151ec:	e0bff817 	ldw	r2,-32(fp)
 80151f0:	10006326 	beq	r2,zero,8015380 <gettimeofday+0x1e8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 80151f4:	d0a6e417 	ldw	r2,-25712(gp)
 80151f8:	1029883a 	mov	r20,r2
 80151fc:	e13ff717 	ldw	r4,-36(fp)
 8015200:	e17ff817 	ldw	r5,-32(fp)
 8015204:	80040800 	call	8004080 <__udivsi3>
 8015208:	a085883a 	add	r2,r20,r2
 801520c:	1007883a 	mov	r3,r2
 8015210:	e0bff917 	ldw	r2,-28(fp)
 8015214:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 8015218:	d0a6e504 	addi	r2,gp,-25708
 801521c:	10800017 	ldw	r2,0(r2)
 8015220:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 8015224:	e0bff717 	ldw	r2,-36(fp)
 8015228:	1025883a 	mov	r18,r2
 801522c:	0027883a 	mov	r19,zero
 8015230:	010003f4 	movhi	r4,15
 8015234:	21109004 	addi	r4,r4,16960
 8015238:	e17ff817 	ldw	r5,-32(fp)
 801523c:	80040800 	call	8004080 <__udivsi3>
 8015240:	1021883a 	mov	r16,r2
 8015244:	0023883a 	mov	r17,zero
 8015248:	9009883a 	mov	r4,r18
 801524c:	980b883a 	mov	r5,r19
 8015250:	800d883a 	mov	r6,r16
 8015254:	880f883a 	mov	r7,r17
 8015258:	8012e240 	call	8012e24 <__muldi3>
 801525c:	100f883a 	mov	r7,r2
 8015260:	1811883a 	mov	r8,r3
 8015264:	380b883a 	mov	r5,r7
 8015268:	400d883a 	mov	r6,r8
 801526c:	008003f4 	movhi	r2,15
 8015270:	10909004 	addi	r2,r2,16960
 8015274:	0007883a 	mov	r3,zero
 8015278:	2809883a 	mov	r4,r5
 801527c:	300b883a 	mov	r5,r6
 8015280:	100d883a 	mov	r6,r2
 8015284:	180f883a 	mov	r7,r3
 8015288:	80135700 	call	8013570 <__umoddi3>
 801528c:	1009883a 	mov	r4,r2
 8015290:	180b883a 	mov	r5,r3
 8015294:	2005883a 	mov	r2,r4
 8015298:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 801529c:	a085883a 	add	r2,r20,r2
 80152a0:	1007883a 	mov	r3,r2
 80152a4:	e0bff917 	ldw	r2,-28(fp)
 80152a8:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 80152ac:	00001406 	br	8015300 <gettimeofday+0x168>
      if (ptimeval->tv_sec <= 0)
 80152b0:	e0bff917 	ldw	r2,-28(fp)
 80152b4:	10800017 	ldw	r2,0(r2)
 80152b8:	00800516 	blt	zero,r2,80152d0 <gettimeofday+0x138>
      {
          ptimeval->tv_sec = 0;
 80152bc:	e0bff917 	ldw	r2,-28(fp)
 80152c0:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 80152c4:	e0bff917 	ldw	r2,-28(fp)
 80152c8:	10000115 	stw	zero,4(r2)
          break;
 80152cc:	00000f06 	br	801530c <gettimeofday+0x174>
      }
      else
      {
          ptimeval->tv_sec--;
 80152d0:	e0bff917 	ldw	r2,-28(fp)
 80152d4:	10800017 	ldw	r2,0(r2)
 80152d8:	10ffffc4 	addi	r3,r2,-1
 80152dc:	e0bff917 	ldw	r2,-28(fp)
 80152e0:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 80152e4:	e0bff917 	ldw	r2,-28(fp)
 80152e8:	10c00117 	ldw	r3,4(r2)
 80152ec:	008003f4 	movhi	r2,15
 80152f0:	10909004 	addi	r2,r2,16960
 80152f4:	1887883a 	add	r3,r3,r2
 80152f8:	e0bff917 	ldw	r2,-28(fp)
 80152fc:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 8015300:	e0bff917 	ldw	r2,-28(fp)
 8015304:	10800117 	ldw	r2,4(r2)
 8015308:	103fe916 	blt	r2,zero,80152b0 <__alt_data_end+0xfc0152b0>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 801530c:	00000c06 	br	8015340 <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
 8015310:	e0bff917 	ldw	r2,-28(fp)
 8015314:	10800017 	ldw	r2,0(r2)
 8015318:	10c00044 	addi	r3,r2,1
 801531c:	e0bff917 	ldw	r2,-28(fp)
 8015320:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 8015324:	e0bff917 	ldw	r2,-28(fp)
 8015328:	10c00117 	ldw	r3,4(r2)
 801532c:	00bffc74 	movhi	r2,65521
 8015330:	10af7004 	addi	r2,r2,-16960
 8015334:	1887883a 	add	r3,r3,r2
 8015338:	e0bff917 	ldw	r2,-28(fp)
 801533c:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 8015340:	e0bff917 	ldw	r2,-28(fp)
 8015344:	10c00117 	ldw	r3,4(r2)
 8015348:	008003f4 	movhi	r2,15
 801534c:	10908fc4 	addi	r2,r2,16959
 8015350:	10ffef16 	blt	r2,r3,8015310 <__alt_data_end+0xfc015310>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 8015354:	e0bff617 	ldw	r2,-40(fp)
 8015358:	10000726 	beq	r2,zero,8015378 <gettimeofday+0x1e0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 801535c:	d0e6e217 	ldw	r3,-25720(gp)
 8015360:	e0bff617 	ldw	r2,-40(fp)
 8015364:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 8015368:	d0a6e304 	addi	r2,gp,-25716
 801536c:	10c00017 	ldw	r3,0(r2)
 8015370:	e0bff617 	ldw	r2,-40(fp)
 8015374:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 8015378:	0005883a 	mov	r2,zero
 801537c:	00000106 	br	8015384 <gettimeofday+0x1ec>
  }

  return -ENOTSUP;
 8015380:	00bfde84 	movi	r2,-134
}
 8015384:	e6fffb04 	addi	sp,fp,-20
 8015388:	dfc00617 	ldw	ra,24(sp)
 801538c:	df000517 	ldw	fp,20(sp)
 8015390:	dd000417 	ldw	r20,16(sp)
 8015394:	dcc00317 	ldw	r19,12(sp)
 8015398:	dc800217 	ldw	r18,8(sp)
 801539c:	dc400117 	ldw	r17,4(sp)
 80153a0:	dc000017 	ldw	r16,0(sp)
 80153a4:	dec00704 	addi	sp,sp,28
 80153a8:	f800283a 	ret

080153ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80153ac:	defffe04 	addi	sp,sp,-8
 80153b0:	dfc00115 	stw	ra,4(sp)
 80153b4:	df000015 	stw	fp,0(sp)
 80153b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80153bc:	008200b4 	movhi	r2,2050
 80153c0:	10913f04 	addi	r2,r2,17660
 80153c4:	10800017 	ldw	r2,0(r2)
 80153c8:	10000526 	beq	r2,zero,80153e0 <alt_get_errno+0x34>
 80153cc:	008200b4 	movhi	r2,2050
 80153d0:	10913f04 	addi	r2,r2,17660
 80153d4:	10800017 	ldw	r2,0(r2)
 80153d8:	103ee83a 	callr	r2
 80153dc:	00000206 	br	80153e8 <alt_get_errno+0x3c>
 80153e0:	008200b4 	movhi	r2,2050
 80153e4:	10981204 	addi	r2,r2,24648
}
 80153e8:	e037883a 	mov	sp,fp
 80153ec:	dfc00117 	ldw	ra,4(sp)
 80153f0:	df000017 	ldw	fp,0(sp)
 80153f4:	dec00204 	addi	sp,sp,8
 80153f8:	f800283a 	ret

080153fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80153fc:	deffed04 	addi	sp,sp,-76
 8015400:	dfc01215 	stw	ra,72(sp)
 8015404:	df001115 	stw	fp,68(sp)
 8015408:	df001104 	addi	fp,sp,68
 801540c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015410:	e0bfff17 	ldw	r2,-4(fp)
 8015414:	10000816 	blt	r2,zero,8015438 <isatty+0x3c>
 8015418:	e13fff17 	ldw	r4,-4(fp)
 801541c:	01400304 	movi	r5,12
 8015420:	80040900 	call	8004090 <__mulsi3>
 8015424:	1007883a 	mov	r3,r2
 8015428:	008200b4 	movhi	r2,2050
 801542c:	108cb104 	addi	r2,r2,12996
 8015430:	1885883a 	add	r2,r3,r2
 8015434:	00000106 	br	801543c <isatty+0x40>
 8015438:	0005883a 	mov	r2,zero
 801543c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8015440:	e0bfef17 	ldw	r2,-68(fp)
 8015444:	10000e26 	beq	r2,zero,8015480 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8015448:	e0bfef17 	ldw	r2,-68(fp)
 801544c:	10800017 	ldw	r2,0(r2)
 8015450:	10800817 	ldw	r2,32(r2)
 8015454:	1000021e 	bne	r2,zero,8015460 <isatty+0x64>
    {
      return 1;
 8015458:	00800044 	movi	r2,1
 801545c:	00000d06 	br	8015494 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8015460:	e0bff004 	addi	r2,fp,-64
 8015464:	e13fff17 	ldw	r4,-4(fp)
 8015468:	100b883a 	mov	r5,r2
 801546c:	80150e00 	call	80150e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8015470:	e0bff117 	ldw	r2,-60(fp)
 8015474:	10880020 	cmpeqi	r2,r2,8192
 8015478:	10803fcc 	andi	r2,r2,255
 801547c:	00000506 	br	8015494 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015480:	80153ac0 	call	80153ac <alt_get_errno>
 8015484:	1007883a 	mov	r3,r2
 8015488:	00801444 	movi	r2,81
 801548c:	18800015 	stw	r2,0(r3)
    return 0;
 8015490:	0005883a 	mov	r2,zero
  }
}
 8015494:	e037883a 	mov	sp,fp
 8015498:	dfc00117 	ldw	ra,4(sp)
 801549c:	df000017 	ldw	fp,0(sp)
 80154a0:	dec00204 	addi	sp,sp,8
 80154a4:	f800283a 	ret

080154a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80154a8:	defffc04 	addi	sp,sp,-16
 80154ac:	df000315 	stw	fp,12(sp)
 80154b0:	df000304 	addi	fp,sp,12
 80154b4:	e13ffd15 	stw	r4,-12(fp)
 80154b8:	e17ffe15 	stw	r5,-8(fp)
 80154bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80154c0:	e0fffe17 	ldw	r3,-8(fp)
 80154c4:	e0bffd17 	ldw	r2,-12(fp)
 80154c8:	18800c26 	beq	r3,r2,80154fc <alt_load_section+0x54>
  {
    while( to != end )
 80154cc:	00000806 	br	80154f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80154d0:	e0bffe17 	ldw	r2,-8(fp)
 80154d4:	10c00104 	addi	r3,r2,4
 80154d8:	e0fffe15 	stw	r3,-8(fp)
 80154dc:	e0fffd17 	ldw	r3,-12(fp)
 80154e0:	19000104 	addi	r4,r3,4
 80154e4:	e13ffd15 	stw	r4,-12(fp)
 80154e8:	18c00017 	ldw	r3,0(r3)
 80154ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80154f0:	e0fffe17 	ldw	r3,-8(fp)
 80154f4:	e0bfff17 	ldw	r2,-4(fp)
 80154f8:	18bff51e 	bne	r3,r2,80154d0 <__alt_data_end+0xfc0154d0>
    {
      *to++ = *from++;
    }
  }
}
 80154fc:	e037883a 	mov	sp,fp
 8015500:	df000017 	ldw	fp,0(sp)
 8015504:	dec00104 	addi	sp,sp,4
 8015508:	f800283a 	ret

0801550c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 801550c:	defffe04 	addi	sp,sp,-8
 8015510:	dfc00115 	stw	ra,4(sp)
 8015514:	df000015 	stw	fp,0(sp)
 8015518:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 801551c:	010200b4 	movhi	r4,2050
 8015520:	21114404 	addi	r4,r4,17680
 8015524:	014200b4 	movhi	r5,2050
 8015528:	294a7e04 	addi	r5,r5,10744
 801552c:	018200b4 	movhi	r6,2050
 8015530:	31914404 	addi	r6,r6,17680
 8015534:	80154a80 	call	80154a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8015538:	01020034 	movhi	r4,2048
 801553c:	21000804 	addi	r4,r4,32
 8015540:	01420034 	movhi	r5,2048
 8015544:	29400804 	addi	r5,r5,32
 8015548:	01820034 	movhi	r6,2048
 801554c:	31806f04 	addi	r6,r6,444
 8015550:	80154a80 	call	80154a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8015554:	01020074 	movhi	r4,2049
 8015558:	211fe404 	addi	r4,r4,32656
 801555c:	01420074 	movhi	r5,2049
 8015560:	295fe404 	addi	r5,r5,32656
 8015564:	018200b4 	movhi	r6,2050
 8015568:	318a7e04 	addi	r6,r6,10744
 801556c:	80154a80 	call	80154a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8015570:	80170a40 	call	80170a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8015574:	80172fc0 	call	80172fc <alt_icache_flush_all>
}
 8015578:	e037883a 	mov	sp,fp
 801557c:	dfc00117 	ldw	ra,4(sp)
 8015580:	df000017 	ldw	fp,0(sp)
 8015584:	dec00204 	addi	sp,sp,8
 8015588:	f800283a 	ret

0801558c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801558c:	defffe04 	addi	sp,sp,-8
 8015590:	dfc00115 	stw	ra,4(sp)
 8015594:	df000015 	stw	fp,0(sp)
 8015598:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801559c:	008200b4 	movhi	r2,2050
 80155a0:	10913f04 	addi	r2,r2,17660
 80155a4:	10800017 	ldw	r2,0(r2)
 80155a8:	10000526 	beq	r2,zero,80155c0 <alt_get_errno+0x34>
 80155ac:	008200b4 	movhi	r2,2050
 80155b0:	10913f04 	addi	r2,r2,17660
 80155b4:	10800017 	ldw	r2,0(r2)
 80155b8:	103ee83a 	callr	r2
 80155bc:	00000206 	br	80155c8 <alt_get_errno+0x3c>
 80155c0:	008200b4 	movhi	r2,2050
 80155c4:	10981204 	addi	r2,r2,24648
}
 80155c8:	e037883a 	mov	sp,fp
 80155cc:	dfc00117 	ldw	ra,4(sp)
 80155d0:	df000017 	ldw	fp,0(sp)
 80155d4:	dec00204 	addi	sp,sp,8
 80155d8:	f800283a 	ret

080155dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80155dc:	defff904 	addi	sp,sp,-28
 80155e0:	dfc00615 	stw	ra,24(sp)
 80155e4:	df000515 	stw	fp,20(sp)
 80155e8:	df000504 	addi	fp,sp,20
 80155ec:	e13ffd15 	stw	r4,-12(fp)
 80155f0:	e17ffe15 	stw	r5,-8(fp)
 80155f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80155f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80155fc:	e0bffd17 	ldw	r2,-12(fp)
 8015600:	10000816 	blt	r2,zero,8015624 <lseek+0x48>
 8015604:	e13ffd17 	ldw	r4,-12(fp)
 8015608:	01400304 	movi	r5,12
 801560c:	80040900 	call	8004090 <__mulsi3>
 8015610:	1007883a 	mov	r3,r2
 8015614:	008200b4 	movhi	r2,2050
 8015618:	108cb104 	addi	r2,r2,12996
 801561c:	1885883a 	add	r2,r3,r2
 8015620:	00000106 	br	8015628 <lseek+0x4c>
 8015624:	0005883a 	mov	r2,zero
 8015628:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 801562c:	e0bffc17 	ldw	r2,-16(fp)
 8015630:	10001026 	beq	r2,zero,8015674 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8015634:	e0bffc17 	ldw	r2,-16(fp)
 8015638:	10800017 	ldw	r2,0(r2)
 801563c:	10800717 	ldw	r2,28(r2)
 8015640:	10000926 	beq	r2,zero,8015668 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8015644:	e0bffc17 	ldw	r2,-16(fp)
 8015648:	10800017 	ldw	r2,0(r2)
 801564c:	10800717 	ldw	r2,28(r2)
 8015650:	e13ffc17 	ldw	r4,-16(fp)
 8015654:	e17ffe17 	ldw	r5,-8(fp)
 8015658:	e1bfff17 	ldw	r6,-4(fp)
 801565c:	103ee83a 	callr	r2
 8015660:	e0bffb15 	stw	r2,-20(fp)
 8015664:	00000506 	br	801567c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8015668:	00bfde84 	movi	r2,-134
 801566c:	e0bffb15 	stw	r2,-20(fp)
 8015670:	00000206 	br	801567c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8015674:	00bfebc4 	movi	r2,-81
 8015678:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 801567c:	e0bffb17 	ldw	r2,-20(fp)
 8015680:	1000070e 	bge	r2,zero,80156a0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8015684:	801558c0 	call	801558c <alt_get_errno>
 8015688:	1007883a 	mov	r3,r2
 801568c:	e0bffb17 	ldw	r2,-20(fp)
 8015690:	0085c83a 	sub	r2,zero,r2
 8015694:	18800015 	stw	r2,0(r3)
    rc = -1;
 8015698:	00bfffc4 	movi	r2,-1
 801569c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80156a0:	e0bffb17 	ldw	r2,-20(fp)
}
 80156a4:	e037883a 	mov	sp,fp
 80156a8:	dfc00117 	ldw	ra,4(sp)
 80156ac:	df000017 	ldw	fp,0(sp)
 80156b0:	dec00204 	addi	sp,sp,8
 80156b4:	f800283a 	ret

080156b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80156b8:	defffd04 	addi	sp,sp,-12
 80156bc:	dfc00215 	stw	ra,8(sp)
 80156c0:	df000115 	stw	fp,4(sp)
 80156c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80156c8:	0009883a 	mov	r4,zero
 80156cc:	8015d480 	call	8015d48 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80156d0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80156d4:	8015d7c0 	call	8015d7c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80156d8:	010200b4 	movhi	r4,2050
 80156dc:	210a6e04 	addi	r4,r4,10680
 80156e0:	014200b4 	movhi	r5,2050
 80156e4:	294a6e04 	addi	r5,r5,10680
 80156e8:	018200b4 	movhi	r6,2050
 80156ec:	318a6e04 	addi	r6,r6,10680
 80156f0:	80176c80 	call	80176c8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80156f4:	80171b40 	call	80171b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80156f8:	01020074 	movhi	r4,2049
 80156fc:	211c8404 	addi	r4,r4,29200
 8015700:	8017bec0 	call	8017bec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8015704:	d126e617 	ldw	r4,-25704(gp)
 8015708:	d0e6e717 	ldw	r3,-25700(gp)
 801570c:	d0a6e817 	ldw	r2,-25696(gp)
 8015710:	180b883a 	mov	r5,r3
 8015714:	100d883a 	mov	r6,r2
 8015718:	80024500 	call	8002450 <main>
 801571c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8015720:	01000044 	movi	r4,1
 8015724:	8014f8c0 	call	8014f8c <close>
  exit (result);
 8015728:	e13fff17 	ldw	r4,-4(fp)
 801572c:	8017c000 	call	8017c00 <exit>

08015730 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8015730:	defffe04 	addi	sp,sp,-8
 8015734:	df000115 	stw	fp,4(sp)
 8015738:	df000104 	addi	fp,sp,4
 801573c:	e13fff15 	stw	r4,-4(fp)
}
 8015740:	e037883a 	mov	sp,fp
 8015744:	df000017 	ldw	fp,0(sp)
 8015748:	dec00104 	addi	sp,sp,4
 801574c:	f800283a 	ret

08015750 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8015750:	defffe04 	addi	sp,sp,-8
 8015754:	df000115 	stw	fp,4(sp)
 8015758:	df000104 	addi	fp,sp,4
 801575c:	e13fff15 	stw	r4,-4(fp)
}
 8015760:	e037883a 	mov	sp,fp
 8015764:	df000017 	ldw	fp,0(sp)
 8015768:	dec00104 	addi	sp,sp,4
 801576c:	f800283a 	ret

08015770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015770:	defffe04 	addi	sp,sp,-8
 8015774:	dfc00115 	stw	ra,4(sp)
 8015778:	df000015 	stw	fp,0(sp)
 801577c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015780:	008200b4 	movhi	r2,2050
 8015784:	10913f04 	addi	r2,r2,17660
 8015788:	10800017 	ldw	r2,0(r2)
 801578c:	10000526 	beq	r2,zero,80157a4 <alt_get_errno+0x34>
 8015790:	008200b4 	movhi	r2,2050
 8015794:	10913f04 	addi	r2,r2,17660
 8015798:	10800017 	ldw	r2,0(r2)
 801579c:	103ee83a 	callr	r2
 80157a0:	00000206 	br	80157ac <alt_get_errno+0x3c>
 80157a4:	008200b4 	movhi	r2,2050
 80157a8:	10981204 	addi	r2,r2,24648
}
 80157ac:	e037883a 	mov	sp,fp
 80157b0:	dfc00117 	ldw	ra,4(sp)
 80157b4:	df000017 	ldw	fp,0(sp)
 80157b8:	dec00204 	addi	sp,sp,8
 80157bc:	f800283a 	ret

080157c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80157c0:	defff904 	addi	sp,sp,-28
 80157c4:	dfc00615 	stw	ra,24(sp)
 80157c8:	df000515 	stw	fp,20(sp)
 80157cc:	df000504 	addi	fp,sp,20
 80157d0:	e13ffd15 	stw	r4,-12(fp)
 80157d4:	e17ffe15 	stw	r5,-8(fp)
 80157d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80157dc:	e0bffd17 	ldw	r2,-12(fp)
 80157e0:	10000816 	blt	r2,zero,8015804 <read+0x44>
 80157e4:	e13ffd17 	ldw	r4,-12(fp)
 80157e8:	01400304 	movi	r5,12
 80157ec:	80040900 	call	8004090 <__mulsi3>
 80157f0:	1007883a 	mov	r3,r2
 80157f4:	008200b4 	movhi	r2,2050
 80157f8:	108cb104 	addi	r2,r2,12996
 80157fc:	1885883a 	add	r2,r3,r2
 8015800:	00000106 	br	8015808 <read+0x48>
 8015804:	0005883a 	mov	r2,zero
 8015808:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 801580c:	e0bffb17 	ldw	r2,-20(fp)
 8015810:	10002226 	beq	r2,zero,801589c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8015814:	e0bffb17 	ldw	r2,-20(fp)
 8015818:	10800217 	ldw	r2,8(r2)
 801581c:	108000cc 	andi	r2,r2,3
 8015820:	10800060 	cmpeqi	r2,r2,1
 8015824:	1000181e 	bne	r2,zero,8015888 <read+0xc8>
        (fd->dev->read))
 8015828:	e0bffb17 	ldw	r2,-20(fp)
 801582c:	10800017 	ldw	r2,0(r2)
 8015830:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8015834:	10001426 	beq	r2,zero,8015888 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8015838:	e0bffb17 	ldw	r2,-20(fp)
 801583c:	10800017 	ldw	r2,0(r2)
 8015840:	10800517 	ldw	r2,20(r2)
 8015844:	e0ffff17 	ldw	r3,-4(fp)
 8015848:	e13ffb17 	ldw	r4,-20(fp)
 801584c:	e17ffe17 	ldw	r5,-8(fp)
 8015850:	180d883a 	mov	r6,r3
 8015854:	103ee83a 	callr	r2
 8015858:	e0bffc15 	stw	r2,-16(fp)
 801585c:	e0bffc17 	ldw	r2,-16(fp)
 8015860:	1000070e 	bge	r2,zero,8015880 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8015864:	80157700 	call	8015770 <alt_get_errno>
 8015868:	1007883a 	mov	r3,r2
 801586c:	e0bffc17 	ldw	r2,-16(fp)
 8015870:	0085c83a 	sub	r2,zero,r2
 8015874:	18800015 	stw	r2,0(r3)
          return -1;
 8015878:	00bfffc4 	movi	r2,-1
 801587c:	00000c06 	br	80158b0 <read+0xf0>
        }
        return rval;
 8015880:	e0bffc17 	ldw	r2,-16(fp)
 8015884:	00000a06 	br	80158b0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8015888:	80157700 	call	8015770 <alt_get_errno>
 801588c:	1007883a 	mov	r3,r2
 8015890:	00800344 	movi	r2,13
 8015894:	18800015 	stw	r2,0(r3)
 8015898:	00000406 	br	80158ac <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 801589c:	80157700 	call	8015770 <alt_get_errno>
 80158a0:	1007883a 	mov	r3,r2
 80158a4:	00801444 	movi	r2,81
 80158a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80158ac:	00bfffc4 	movi	r2,-1
}
 80158b0:	e037883a 	mov	sp,fp
 80158b4:	dfc00117 	ldw	ra,4(sp)
 80158b8:	df000017 	ldw	fp,0(sp)
 80158bc:	dec00204 	addi	sp,sp,8
 80158c0:	f800283a 	ret

080158c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80158c4:	defffc04 	addi	sp,sp,-16
 80158c8:	dfc00315 	stw	ra,12(sp)
 80158cc:	df000215 	stw	fp,8(sp)
 80158d0:	dc000115 	stw	r16,4(sp)
 80158d4:	df000204 	addi	fp,sp,8
 80158d8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80158dc:	e0bffe17 	ldw	r2,-8(fp)
 80158e0:	108000d0 	cmplti	r2,r2,3
 80158e4:	1000111e 	bne	r2,zero,801592c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80158e8:	040200b4 	movhi	r16,2050
 80158ec:	840cb104 	addi	r16,r16,12996
 80158f0:	e0bffe17 	ldw	r2,-8(fp)
 80158f4:	1009883a 	mov	r4,r2
 80158f8:	01400304 	movi	r5,12
 80158fc:	80040900 	call	8004090 <__mulsi3>
 8015900:	8085883a 	add	r2,r16,r2
 8015904:	10800204 	addi	r2,r2,8
 8015908:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 801590c:	040200b4 	movhi	r16,2050
 8015910:	840cb104 	addi	r16,r16,12996
 8015914:	e0bffe17 	ldw	r2,-8(fp)
 8015918:	1009883a 	mov	r4,r2
 801591c:	01400304 	movi	r5,12
 8015920:	80040900 	call	8004090 <__mulsi3>
 8015924:	8085883a 	add	r2,r16,r2
 8015928:	10000015 	stw	zero,0(r2)
  }
}
 801592c:	e6ffff04 	addi	sp,fp,-4
 8015930:	dfc00217 	ldw	ra,8(sp)
 8015934:	df000117 	ldw	fp,4(sp)
 8015938:	dc000017 	ldw	r16,0(sp)
 801593c:	dec00304 	addi	sp,sp,12
 8015940:	f800283a 	ret

08015944 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8015944:	defff904 	addi	sp,sp,-28
 8015948:	df000615 	stw	fp,24(sp)
 801594c:	df000604 	addi	fp,sp,24
 8015950:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015954:	0005303a 	rdctl	r2,status
 8015958:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801595c:	e0fffc17 	ldw	r3,-16(fp)
 8015960:	00bfff84 	movi	r2,-2
 8015964:	1884703a 	and	r2,r3,r2
 8015968:	1001703a 	wrctl	status,r2
  
  return context;
 801596c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8015970:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8015974:	d0a00c17 	ldw	r2,-32720(gp)
 8015978:	10c000c4 	addi	r3,r2,3
 801597c:	00bfff04 	movi	r2,-4
 8015980:	1884703a 	and	r2,r3,r2
 8015984:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8015988:	d0e00c17 	ldw	r3,-32720(gp)
 801598c:	e0bfff17 	ldw	r2,-4(fp)
 8015990:	1887883a 	add	r3,r3,r2
 8015994:	00830034 	movhi	r2,3072
 8015998:	10800004 	addi	r2,r2,0
 801599c:	10c0062e 	bgeu	r2,r3,80159b8 <sbrk+0x74>
 80159a0:	e0bffa17 	ldw	r2,-24(fp)
 80159a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80159a8:	e0bffd17 	ldw	r2,-12(fp)
 80159ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80159b0:	00bfffc4 	movi	r2,-1
 80159b4:	00000b06 	br	80159e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80159b8:	d0a00c17 	ldw	r2,-32720(gp)
 80159bc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 80159c0:	d0e00c17 	ldw	r3,-32720(gp)
 80159c4:	e0bfff17 	ldw	r2,-4(fp)
 80159c8:	1885883a 	add	r2,r3,r2
 80159cc:	d0a00c15 	stw	r2,-32720(gp)
 80159d0:	e0bffa17 	ldw	r2,-24(fp)
 80159d4:	e0bffe15 	stw	r2,-8(fp)
 80159d8:	e0bffe17 	ldw	r2,-8(fp)
 80159dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80159e0:	e0bffb17 	ldw	r2,-20(fp)
} 
 80159e4:	e037883a 	mov	sp,fp
 80159e8:	df000017 	ldw	fp,0(sp)
 80159ec:	dec00104 	addi	sp,sp,4
 80159f0:	f800283a 	ret

080159f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80159f4:	defffa04 	addi	sp,sp,-24
 80159f8:	df000515 	stw	fp,20(sp)
 80159fc:	df000504 	addi	fp,sp,20
 8015a00:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015a04:	0005303a 	rdctl	r2,status
 8015a08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015a0c:	e0fffc17 	ldw	r3,-16(fp)
 8015a10:	00bfff84 	movi	r2,-2
 8015a14:	1884703a 	and	r2,r3,r2
 8015a18:	1001703a 	wrctl	status,r2
  
  return context;
 8015a1c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8015a20:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8015a24:	e0bfff17 	ldw	r2,-4(fp)
 8015a28:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8015a2c:	e0bffd17 	ldw	r2,-12(fp)
 8015a30:	10800017 	ldw	r2,0(r2)
 8015a34:	e0fffd17 	ldw	r3,-12(fp)
 8015a38:	18c00117 	ldw	r3,4(r3)
 8015a3c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8015a40:	e0bffd17 	ldw	r2,-12(fp)
 8015a44:	10800117 	ldw	r2,4(r2)
 8015a48:	e0fffd17 	ldw	r3,-12(fp)
 8015a4c:	18c00017 	ldw	r3,0(r3)
 8015a50:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8015a54:	e0bffd17 	ldw	r2,-12(fp)
 8015a58:	e0fffd17 	ldw	r3,-12(fp)
 8015a5c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8015a60:	e0bffd17 	ldw	r2,-12(fp)
 8015a64:	e0fffd17 	ldw	r3,-12(fp)
 8015a68:	10c00015 	stw	r3,0(r2)
 8015a6c:	e0bffb17 	ldw	r2,-20(fp)
 8015a70:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015a74:	e0bffe17 	ldw	r2,-8(fp)
 8015a78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8015a7c:	e037883a 	mov	sp,fp
 8015a80:	df000017 	ldw	fp,0(sp)
 8015a84:	dec00104 	addi	sp,sp,4
 8015a88:	f800283a 	ret

08015a8c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8015a8c:	defffb04 	addi	sp,sp,-20
 8015a90:	dfc00415 	stw	ra,16(sp)
 8015a94:	df000315 	stw	fp,12(sp)
 8015a98:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8015a9c:	d0a00d17 	ldw	r2,-32716(gp)
 8015aa0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8015aa4:	d0a6ea17 	ldw	r2,-25688(gp)
 8015aa8:	10800044 	addi	r2,r2,1
 8015aac:	d0a6ea15 	stw	r2,-25688(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015ab0:	00002e06 	br	8015b6c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8015ab4:	e0bffd17 	ldw	r2,-12(fp)
 8015ab8:	10800017 	ldw	r2,0(r2)
 8015abc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8015ac0:	e0bffd17 	ldw	r2,-12(fp)
 8015ac4:	10800403 	ldbu	r2,16(r2)
 8015ac8:	10803fcc 	andi	r2,r2,255
 8015acc:	10000426 	beq	r2,zero,8015ae0 <alt_tick+0x54>
 8015ad0:	d0a6ea17 	ldw	r2,-25688(gp)
 8015ad4:	1000021e 	bne	r2,zero,8015ae0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8015ad8:	e0bffd17 	ldw	r2,-12(fp)
 8015adc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8015ae0:	e0bffd17 	ldw	r2,-12(fp)
 8015ae4:	10800217 	ldw	r2,8(r2)
 8015ae8:	d0e6ea17 	ldw	r3,-25688(gp)
 8015aec:	18801d36 	bltu	r3,r2,8015b64 <alt_tick+0xd8>
 8015af0:	e0bffd17 	ldw	r2,-12(fp)
 8015af4:	10800403 	ldbu	r2,16(r2)
 8015af8:	10803fcc 	andi	r2,r2,255
 8015afc:	1000191e 	bne	r2,zero,8015b64 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8015b00:	e0bffd17 	ldw	r2,-12(fp)
 8015b04:	10800317 	ldw	r2,12(r2)
 8015b08:	e0fffd17 	ldw	r3,-12(fp)
 8015b0c:	18c00517 	ldw	r3,20(r3)
 8015b10:	1809883a 	mov	r4,r3
 8015b14:	103ee83a 	callr	r2
 8015b18:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8015b1c:	e0bfff17 	ldw	r2,-4(fp)
 8015b20:	1000031e 	bne	r2,zero,8015b30 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8015b24:	e13ffd17 	ldw	r4,-12(fp)
 8015b28:	80159f40 	call	80159f4 <alt_alarm_stop>
 8015b2c:	00000d06 	br	8015b64 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8015b30:	e0bffd17 	ldw	r2,-12(fp)
 8015b34:	10c00217 	ldw	r3,8(r2)
 8015b38:	e0bfff17 	ldw	r2,-4(fp)
 8015b3c:	1887883a 	add	r3,r3,r2
 8015b40:	e0bffd17 	ldw	r2,-12(fp)
 8015b44:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8015b48:	e0bffd17 	ldw	r2,-12(fp)
 8015b4c:	10c00217 	ldw	r3,8(r2)
 8015b50:	d0a6ea17 	ldw	r2,-25688(gp)
 8015b54:	1880032e 	bgeu	r3,r2,8015b64 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8015b58:	e0bffd17 	ldw	r2,-12(fp)
 8015b5c:	00c00044 	movi	r3,1
 8015b60:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8015b64:	e0bffe17 	ldw	r2,-8(fp)
 8015b68:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015b6c:	e0fffd17 	ldw	r3,-12(fp)
 8015b70:	d0a00d04 	addi	r2,gp,-32716
 8015b74:	18bfcf1e 	bne	r3,r2,8015ab4 <__alt_data_end+0xfc015ab4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8015b78:	0001883a 	nop
}
 8015b7c:	e037883a 	mov	sp,fp
 8015b80:	dfc00117 	ldw	ra,4(sp)
 8015b84:	df000017 	ldw	fp,0(sp)
 8015b88:	dec00204 	addi	sp,sp,8
 8015b8c:	f800283a 	ret

08015b90 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8015b90:	defffd04 	addi	sp,sp,-12
 8015b94:	dfc00215 	stw	ra,8(sp)
 8015b98:	df000115 	stw	fp,4(sp)
 8015b9c:	df000104 	addi	fp,sp,4
 8015ba0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8015ba4:	e13fff17 	ldw	r4,-4(fp)
 8015ba8:	8016f4c0 	call	8016f4c <alt_busy_sleep>
}
 8015bac:	e037883a 	mov	sp,fp
 8015bb0:	dfc00117 	ldw	ra,4(sp)
 8015bb4:	df000017 	ldw	fp,0(sp)
 8015bb8:	dec00204 	addi	sp,sp,8
 8015bbc:	f800283a 	ret

08015bc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015bc0:	defffe04 	addi	sp,sp,-8
 8015bc4:	dfc00115 	stw	ra,4(sp)
 8015bc8:	df000015 	stw	fp,0(sp)
 8015bcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015bd0:	008200b4 	movhi	r2,2050
 8015bd4:	10913f04 	addi	r2,r2,17660
 8015bd8:	10800017 	ldw	r2,0(r2)
 8015bdc:	10000526 	beq	r2,zero,8015bf4 <alt_get_errno+0x34>
 8015be0:	008200b4 	movhi	r2,2050
 8015be4:	10913f04 	addi	r2,r2,17660
 8015be8:	10800017 	ldw	r2,0(r2)
 8015bec:	103ee83a 	callr	r2
 8015bf0:	00000206 	br	8015bfc <alt_get_errno+0x3c>
 8015bf4:	008200b4 	movhi	r2,2050
 8015bf8:	10981204 	addi	r2,r2,24648
}
 8015bfc:	e037883a 	mov	sp,fp
 8015c00:	dfc00117 	ldw	ra,4(sp)
 8015c04:	df000017 	ldw	fp,0(sp)
 8015c08:	dec00204 	addi	sp,sp,8
 8015c0c:	f800283a 	ret

08015c10 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8015c10:	defff904 	addi	sp,sp,-28
 8015c14:	dfc00615 	stw	ra,24(sp)
 8015c18:	df000515 	stw	fp,20(sp)
 8015c1c:	df000504 	addi	fp,sp,20
 8015c20:	e13ffd15 	stw	r4,-12(fp)
 8015c24:	e17ffe15 	stw	r5,-8(fp)
 8015c28:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015c2c:	e0bffd17 	ldw	r2,-12(fp)
 8015c30:	10000816 	blt	r2,zero,8015c54 <write+0x44>
 8015c34:	e13ffd17 	ldw	r4,-12(fp)
 8015c38:	01400304 	movi	r5,12
 8015c3c:	80040900 	call	8004090 <__mulsi3>
 8015c40:	1007883a 	mov	r3,r2
 8015c44:	008200b4 	movhi	r2,2050
 8015c48:	108cb104 	addi	r2,r2,12996
 8015c4c:	1885883a 	add	r2,r3,r2
 8015c50:	00000106 	br	8015c58 <write+0x48>
 8015c54:	0005883a 	mov	r2,zero
 8015c58:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8015c5c:	e0bffb17 	ldw	r2,-20(fp)
 8015c60:	10002126 	beq	r2,zero,8015ce8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8015c64:	e0bffb17 	ldw	r2,-20(fp)
 8015c68:	10800217 	ldw	r2,8(r2)
 8015c6c:	108000cc 	andi	r2,r2,3
 8015c70:	10001826 	beq	r2,zero,8015cd4 <write+0xc4>
 8015c74:	e0bffb17 	ldw	r2,-20(fp)
 8015c78:	10800017 	ldw	r2,0(r2)
 8015c7c:	10800617 	ldw	r2,24(r2)
 8015c80:	10001426 	beq	r2,zero,8015cd4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8015c84:	e0bffb17 	ldw	r2,-20(fp)
 8015c88:	10800017 	ldw	r2,0(r2)
 8015c8c:	10800617 	ldw	r2,24(r2)
 8015c90:	e0ffff17 	ldw	r3,-4(fp)
 8015c94:	e13ffb17 	ldw	r4,-20(fp)
 8015c98:	e17ffe17 	ldw	r5,-8(fp)
 8015c9c:	180d883a 	mov	r6,r3
 8015ca0:	103ee83a 	callr	r2
 8015ca4:	e0bffc15 	stw	r2,-16(fp)
 8015ca8:	e0bffc17 	ldw	r2,-16(fp)
 8015cac:	1000070e 	bge	r2,zero,8015ccc <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8015cb0:	8015bc00 	call	8015bc0 <alt_get_errno>
 8015cb4:	1007883a 	mov	r3,r2
 8015cb8:	e0bffc17 	ldw	r2,-16(fp)
 8015cbc:	0085c83a 	sub	r2,zero,r2
 8015cc0:	18800015 	stw	r2,0(r3)
        return -1;
 8015cc4:	00bfffc4 	movi	r2,-1
 8015cc8:	00000c06 	br	8015cfc <write+0xec>
      }
      return rval;
 8015ccc:	e0bffc17 	ldw	r2,-16(fp)
 8015cd0:	00000a06 	br	8015cfc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8015cd4:	8015bc00 	call	8015bc0 <alt_get_errno>
 8015cd8:	1007883a 	mov	r3,r2
 8015cdc:	00800344 	movi	r2,13
 8015ce0:	18800015 	stw	r2,0(r3)
 8015ce4:	00000406 	br	8015cf8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8015ce8:	8015bc00 	call	8015bc0 <alt_get_errno>
 8015cec:	1007883a 	mov	r3,r2
 8015cf0:	00801444 	movi	r2,81
 8015cf4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8015cf8:	00bfffc4 	movi	r2,-1
}
 8015cfc:	e037883a 	mov	sp,fp
 8015d00:	dfc00117 	ldw	ra,4(sp)
 8015d04:	df000017 	ldw	fp,0(sp)
 8015d08:	dec00204 	addi	sp,sp,8
 8015d0c:	f800283a 	ret

08015d10 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8015d10:	defffd04 	addi	sp,sp,-12
 8015d14:	dfc00215 	stw	ra,8(sp)
 8015d18:	df000115 	stw	fp,4(sp)
 8015d1c:	df000104 	addi	fp,sp,4
 8015d20:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8015d24:	e13fff17 	ldw	r4,-4(fp)
 8015d28:	014200b4 	movhi	r5,2050
 8015d2c:	29513c04 	addi	r5,r5,17648
 8015d30:	80171100 	call	8017110 <alt_dev_llist_insert>
}
 8015d34:	e037883a 	mov	sp,fp
 8015d38:	dfc00117 	ldw	ra,4(sp)
 8015d3c:	df000017 	ldw	fp,0(sp)
 8015d40:	dec00204 	addi	sp,sp,8
 8015d44:	f800283a 	ret

08015d48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8015d48:	defffd04 	addi	sp,sp,-12
 8015d4c:	dfc00215 	stw	ra,8(sp)
 8015d50:	df000115 	stw	fp,4(sp)
 8015d54:	df000104 	addi	fp,sp,4
 8015d58:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 8015d5c:	80179e40 	call	80179e4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8015d60:	00800044 	movi	r2,1
 8015d64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8015d68:	e037883a 	mov	sp,fp
 8015d6c:	dfc00117 	ldw	ra,4(sp)
 8015d70:	df000017 	ldw	fp,0(sp)
 8015d74:	dec00204 	addi	sp,sp,8
 8015d78:	f800283a 	ret

08015d7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8015d7c:	defffe04 	addi	sp,sp,-8
 8015d80:	dfc00115 	stw	ra,4(sp)
 8015d84:	df000015 	stw	fp,0(sp)
 8015d88:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8015d8c:	01082004 	movi	r4,8320
 8015d90:	000b883a 	mov	r5,zero
 8015d94:	01800104 	movi	r6,4
 8015d98:	01c0fa04 	movi	r7,1000
 8015d9c:	80168ac0 	call	80168ac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8015da0:	010200b4 	movhi	r4,2050
 8015da4:	210d1b04 	addi	r4,r4,13420
 8015da8:	000b883a 	mov	r5,zero
 8015dac:	000d883a 	mov	r6,zero
 8015db0:	8015f500 	call	8015f50 <altera_avalon_jtag_uart_init>
 8015db4:	010200b4 	movhi	r4,2050
 8015db8:	210d1104 	addi	r4,r4,13380
 8015dbc:	8015d100 	call	8015d10 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 8015dc0:	010200b4 	movhi	r4,2050
 8015dc4:	21112904 	addi	r4,r4,17572
 8015dc8:	80169e40 	call	80169e4 <alt_up_character_lcd_init>
 8015dcc:	010200b4 	movhi	r4,2050
 8015dd0:	21112904 	addi	r4,r4,17572
 8015dd4:	8015d100 	call	8015d10 <alt_dev_reg>
}
 8015dd8:	e037883a 	mov	sp,fp
 8015ddc:	dfc00117 	ldw	ra,4(sp)
 8015de0:	df000017 	ldw	fp,0(sp)
 8015de4:	dec00204 	addi	sp,sp,8
 8015de8:	f800283a 	ret

08015dec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8015dec:	defffa04 	addi	sp,sp,-24
 8015df0:	dfc00515 	stw	ra,20(sp)
 8015df4:	df000415 	stw	fp,16(sp)
 8015df8:	df000404 	addi	fp,sp,16
 8015dfc:	e13ffd15 	stw	r4,-12(fp)
 8015e00:	e17ffe15 	stw	r5,-8(fp)
 8015e04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015e08:	e0bffd17 	ldw	r2,-12(fp)
 8015e0c:	10800017 	ldw	r2,0(r2)
 8015e10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8015e14:	e0bffc17 	ldw	r2,-16(fp)
 8015e18:	10c00a04 	addi	r3,r2,40
 8015e1c:	e0bffd17 	ldw	r2,-12(fp)
 8015e20:	10800217 	ldw	r2,8(r2)
 8015e24:	1809883a 	mov	r4,r3
 8015e28:	e17ffe17 	ldw	r5,-8(fp)
 8015e2c:	e1bfff17 	ldw	r6,-4(fp)
 8015e30:	100f883a 	mov	r7,r2
 8015e34:	80164140 	call	8016414 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8015e38:	e037883a 	mov	sp,fp
 8015e3c:	dfc00117 	ldw	ra,4(sp)
 8015e40:	df000017 	ldw	fp,0(sp)
 8015e44:	dec00204 	addi	sp,sp,8
 8015e48:	f800283a 	ret

08015e4c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8015e4c:	defffa04 	addi	sp,sp,-24
 8015e50:	dfc00515 	stw	ra,20(sp)
 8015e54:	df000415 	stw	fp,16(sp)
 8015e58:	df000404 	addi	fp,sp,16
 8015e5c:	e13ffd15 	stw	r4,-12(fp)
 8015e60:	e17ffe15 	stw	r5,-8(fp)
 8015e64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015e68:	e0bffd17 	ldw	r2,-12(fp)
 8015e6c:	10800017 	ldw	r2,0(r2)
 8015e70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8015e74:	e0bffc17 	ldw	r2,-16(fp)
 8015e78:	10c00a04 	addi	r3,r2,40
 8015e7c:	e0bffd17 	ldw	r2,-12(fp)
 8015e80:	10800217 	ldw	r2,8(r2)
 8015e84:	1809883a 	mov	r4,r3
 8015e88:	e17ffe17 	ldw	r5,-8(fp)
 8015e8c:	e1bfff17 	ldw	r6,-4(fp)
 8015e90:	100f883a 	mov	r7,r2
 8015e94:	80166200 	call	8016620 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8015e98:	e037883a 	mov	sp,fp
 8015e9c:	dfc00117 	ldw	ra,4(sp)
 8015ea0:	df000017 	ldw	fp,0(sp)
 8015ea4:	dec00204 	addi	sp,sp,8
 8015ea8:	f800283a 	ret

08015eac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8015eac:	defffc04 	addi	sp,sp,-16
 8015eb0:	dfc00315 	stw	ra,12(sp)
 8015eb4:	df000215 	stw	fp,8(sp)
 8015eb8:	df000204 	addi	fp,sp,8
 8015ebc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015ec0:	e0bfff17 	ldw	r2,-4(fp)
 8015ec4:	10800017 	ldw	r2,0(r2)
 8015ec8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8015ecc:	e0bffe17 	ldw	r2,-8(fp)
 8015ed0:	10c00a04 	addi	r3,r2,40
 8015ed4:	e0bfff17 	ldw	r2,-4(fp)
 8015ed8:	10800217 	ldw	r2,8(r2)
 8015edc:	1809883a 	mov	r4,r3
 8015ee0:	100b883a 	mov	r5,r2
 8015ee4:	80162c00 	call	80162c0 <altera_avalon_jtag_uart_close>
}
 8015ee8:	e037883a 	mov	sp,fp
 8015eec:	dfc00117 	ldw	ra,4(sp)
 8015ef0:	df000017 	ldw	fp,0(sp)
 8015ef4:	dec00204 	addi	sp,sp,8
 8015ef8:	f800283a 	ret

08015efc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8015efc:	defffa04 	addi	sp,sp,-24
 8015f00:	dfc00515 	stw	ra,20(sp)
 8015f04:	df000415 	stw	fp,16(sp)
 8015f08:	df000404 	addi	fp,sp,16
 8015f0c:	e13ffd15 	stw	r4,-12(fp)
 8015f10:	e17ffe15 	stw	r5,-8(fp)
 8015f14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8015f18:	e0bffd17 	ldw	r2,-12(fp)
 8015f1c:	10800017 	ldw	r2,0(r2)
 8015f20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8015f24:	e0bffc17 	ldw	r2,-16(fp)
 8015f28:	10800a04 	addi	r2,r2,40
 8015f2c:	1009883a 	mov	r4,r2
 8015f30:	e17ffe17 	ldw	r5,-8(fp)
 8015f34:	e1bfff17 	ldw	r6,-4(fp)
 8015f38:	80163280 	call	8016328 <altera_avalon_jtag_uart_ioctl>
}
 8015f3c:	e037883a 	mov	sp,fp
 8015f40:	dfc00117 	ldw	ra,4(sp)
 8015f44:	df000017 	ldw	fp,0(sp)
 8015f48:	dec00204 	addi	sp,sp,8
 8015f4c:	f800283a 	ret

08015f50 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8015f50:	defffa04 	addi	sp,sp,-24
 8015f54:	dfc00515 	stw	ra,20(sp)
 8015f58:	df000415 	stw	fp,16(sp)
 8015f5c:	df000404 	addi	fp,sp,16
 8015f60:	e13ffd15 	stw	r4,-12(fp)
 8015f64:	e17ffe15 	stw	r5,-8(fp)
 8015f68:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8015f6c:	e0bffd17 	ldw	r2,-12(fp)
 8015f70:	00c00044 	movi	r3,1
 8015f74:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8015f78:	e0bffd17 	ldw	r2,-12(fp)
 8015f7c:	10800017 	ldw	r2,0(r2)
 8015f80:	10800104 	addi	r2,r2,4
 8015f84:	1007883a 	mov	r3,r2
 8015f88:	e0bffd17 	ldw	r2,-12(fp)
 8015f8c:	10800817 	ldw	r2,32(r2)
 8015f90:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8015f94:	e0fffe17 	ldw	r3,-8(fp)
 8015f98:	e0bfff17 	ldw	r2,-4(fp)
 8015f9c:	d8000015 	stw	zero,0(sp)
 8015fa0:	1809883a 	mov	r4,r3
 8015fa4:	100b883a 	mov	r5,r2
 8015fa8:	01820074 	movhi	r6,2049
 8015fac:	31980504 	addi	r6,r6,24596
 8015fb0:	e1fffd17 	ldw	r7,-12(fp)
 8015fb4:	80173180 	call	8017318 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8015fb8:	e0bffd17 	ldw	r2,-12(fp)
 8015fbc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8015fc0:	e0bffd17 	ldw	r2,-12(fp)
 8015fc4:	10c00204 	addi	r3,r2,8
 8015fc8:	008200b4 	movhi	r2,2050
 8015fcc:	10981d04 	addi	r2,r2,24692
 8015fd0:	10800017 	ldw	r2,0(r2)
 8015fd4:	1809883a 	mov	r4,r3
 8015fd8:	100b883a 	mov	r5,r2
 8015fdc:	01820074 	movhi	r6,2049
 8015fe0:	31988604 	addi	r6,r6,25112
 8015fe4:	e1fffd17 	ldw	r7,-12(fp)
 8015fe8:	8016e0c0 	call	8016e0c <alt_alarm_start>
 8015fec:	1000040e 	bge	r2,zero,8016000 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8015ff0:	e0fffd17 	ldw	r3,-12(fp)
 8015ff4:	00a00034 	movhi	r2,32768
 8015ff8:	10bfffc4 	addi	r2,r2,-1
 8015ffc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8016000:	e037883a 	mov	sp,fp
 8016004:	dfc00117 	ldw	ra,4(sp)
 8016008:	df000017 	ldw	fp,0(sp)
 801600c:	dec00204 	addi	sp,sp,8
 8016010:	f800283a 	ret

08016014 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8016014:	defff804 	addi	sp,sp,-32
 8016018:	df000715 	stw	fp,28(sp)
 801601c:	df000704 	addi	fp,sp,28
 8016020:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8016024:	e0bfff17 	ldw	r2,-4(fp)
 8016028:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 801602c:	e0bffb17 	ldw	r2,-20(fp)
 8016030:	10800017 	ldw	r2,0(r2)
 8016034:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016038:	e0bffc17 	ldw	r2,-16(fp)
 801603c:	10800104 	addi	r2,r2,4
 8016040:	10800037 	ldwio	r2,0(r2)
 8016044:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8016048:	e0bffd17 	ldw	r2,-12(fp)
 801604c:	1080c00c 	andi	r2,r2,768
 8016050:	1000011e 	bne	r2,zero,8016058 <altera_avalon_jtag_uart_irq+0x44>
      break;
 8016054:	00006c06 	br	8016208 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8016058:	e0bffd17 	ldw	r2,-12(fp)
 801605c:	1080400c 	andi	r2,r2,256
 8016060:	10003426 	beq	r2,zero,8016134 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8016064:	00800074 	movhi	r2,1
 8016068:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801606c:	e0bffb17 	ldw	r2,-20(fp)
 8016070:	10800a17 	ldw	r2,40(r2)
 8016074:	10800044 	addi	r2,r2,1
 8016078:	1081ffcc 	andi	r2,r2,2047
 801607c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8016080:	e0bffb17 	ldw	r2,-20(fp)
 8016084:	10c00b17 	ldw	r3,44(r2)
 8016088:	e0bffe17 	ldw	r2,-8(fp)
 801608c:	1880011e 	bne	r3,r2,8016094 <altera_avalon_jtag_uart_irq+0x80>
          break;
 8016090:	00001606 	br	80160ec <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8016094:	e0bffc17 	ldw	r2,-16(fp)
 8016098:	10800037 	ldwio	r2,0(r2)
 801609c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80160a0:	e0bff917 	ldw	r2,-28(fp)
 80160a4:	10a0000c 	andi	r2,r2,32768
 80160a8:	1000011e 	bne	r2,zero,80160b0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 80160ac:	00000f06 	br	80160ec <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80160b0:	e0bffb17 	ldw	r2,-20(fp)
 80160b4:	10800a17 	ldw	r2,40(r2)
 80160b8:	e0fff917 	ldw	r3,-28(fp)
 80160bc:	1809883a 	mov	r4,r3
 80160c0:	e0fffb17 	ldw	r3,-20(fp)
 80160c4:	1885883a 	add	r2,r3,r2
 80160c8:	10800e04 	addi	r2,r2,56
 80160cc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80160d0:	e0bffb17 	ldw	r2,-20(fp)
 80160d4:	10800a17 	ldw	r2,40(r2)
 80160d8:	10800044 	addi	r2,r2,1
 80160dc:	10c1ffcc 	andi	r3,r2,2047
 80160e0:	e0bffb17 	ldw	r2,-20(fp)
 80160e4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 80160e8:	003fe006 	br	801606c <__alt_data_end+0xfc01606c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 80160ec:	e0bff917 	ldw	r2,-28(fp)
 80160f0:	10bfffec 	andhi	r2,r2,65535
 80160f4:	10000f26 	beq	r2,zero,8016134 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80160f8:	e0bffb17 	ldw	r2,-20(fp)
 80160fc:	10c00817 	ldw	r3,32(r2)
 8016100:	00bfff84 	movi	r2,-2
 8016104:	1886703a 	and	r3,r3,r2
 8016108:	e0bffb17 	ldw	r2,-20(fp)
 801610c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8016110:	e0bffc17 	ldw	r2,-16(fp)
 8016114:	10800104 	addi	r2,r2,4
 8016118:	1007883a 	mov	r3,r2
 801611c:	e0bffb17 	ldw	r2,-20(fp)
 8016120:	10800817 	ldw	r2,32(r2)
 8016124:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016128:	e0bffc17 	ldw	r2,-16(fp)
 801612c:	10800104 	addi	r2,r2,4
 8016130:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8016134:	e0bffd17 	ldw	r2,-12(fp)
 8016138:	1080800c 	andi	r2,r2,512
 801613c:	10003126 	beq	r2,zero,8016204 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8016140:	e0bffd17 	ldw	r2,-12(fp)
 8016144:	1004d43a 	srli	r2,r2,16
 8016148:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801614c:	00001406 	br	80161a0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8016150:	e0bffc17 	ldw	r2,-16(fp)
 8016154:	e0fffb17 	ldw	r3,-20(fp)
 8016158:	18c00d17 	ldw	r3,52(r3)
 801615c:	e13ffb17 	ldw	r4,-20(fp)
 8016160:	20c7883a 	add	r3,r4,r3
 8016164:	18c20e04 	addi	r3,r3,2104
 8016168:	18c00003 	ldbu	r3,0(r3)
 801616c:	18c03fcc 	andi	r3,r3,255
 8016170:	18c0201c 	xori	r3,r3,128
 8016174:	18ffe004 	addi	r3,r3,-128
 8016178:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801617c:	e0bffb17 	ldw	r2,-20(fp)
 8016180:	10800d17 	ldw	r2,52(r2)
 8016184:	10800044 	addi	r2,r2,1
 8016188:	10c1ffcc 	andi	r3,r2,2047
 801618c:	e0bffb17 	ldw	r2,-20(fp)
 8016190:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8016194:	e0bffa17 	ldw	r2,-24(fp)
 8016198:	10bfffc4 	addi	r2,r2,-1
 801619c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80161a0:	e0bffa17 	ldw	r2,-24(fp)
 80161a4:	10000526 	beq	r2,zero,80161bc <altera_avalon_jtag_uart_irq+0x1a8>
 80161a8:	e0bffb17 	ldw	r2,-20(fp)
 80161ac:	10c00d17 	ldw	r3,52(r2)
 80161b0:	e0bffb17 	ldw	r2,-20(fp)
 80161b4:	10800c17 	ldw	r2,48(r2)
 80161b8:	18bfe51e 	bne	r3,r2,8016150 <__alt_data_end+0xfc016150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80161bc:	e0bffa17 	ldw	r2,-24(fp)
 80161c0:	10001026 	beq	r2,zero,8016204 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80161c4:	e0bffb17 	ldw	r2,-20(fp)
 80161c8:	10c00817 	ldw	r3,32(r2)
 80161cc:	00bfff44 	movi	r2,-3
 80161d0:	1886703a 	and	r3,r3,r2
 80161d4:	e0bffb17 	ldw	r2,-20(fp)
 80161d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80161dc:	e0bffb17 	ldw	r2,-20(fp)
 80161e0:	10800017 	ldw	r2,0(r2)
 80161e4:	10800104 	addi	r2,r2,4
 80161e8:	1007883a 	mov	r3,r2
 80161ec:	e0bffb17 	ldw	r2,-20(fp)
 80161f0:	10800817 	ldw	r2,32(r2)
 80161f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80161f8:	e0bffc17 	ldw	r2,-16(fp)
 80161fc:	10800104 	addi	r2,r2,4
 8016200:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8016204:	003f8c06 	br	8016038 <__alt_data_end+0xfc016038>
}
 8016208:	e037883a 	mov	sp,fp
 801620c:	df000017 	ldw	fp,0(sp)
 8016210:	dec00104 	addi	sp,sp,4
 8016214:	f800283a 	ret

08016218 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8016218:	defff804 	addi	sp,sp,-32
 801621c:	df000715 	stw	fp,28(sp)
 8016220:	df000704 	addi	fp,sp,28
 8016224:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8016228:	e0bffb17 	ldw	r2,-20(fp)
 801622c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8016230:	e0bff917 	ldw	r2,-28(fp)
 8016234:	10800017 	ldw	r2,0(r2)
 8016238:	10800104 	addi	r2,r2,4
 801623c:	10800037 	ldwio	r2,0(r2)
 8016240:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8016244:	e0bffa17 	ldw	r2,-24(fp)
 8016248:	1081000c 	andi	r2,r2,1024
 801624c:	10000b26 	beq	r2,zero,801627c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8016250:	e0bff917 	ldw	r2,-28(fp)
 8016254:	10800017 	ldw	r2,0(r2)
 8016258:	10800104 	addi	r2,r2,4
 801625c:	1007883a 	mov	r3,r2
 8016260:	e0bff917 	ldw	r2,-28(fp)
 8016264:	10800817 	ldw	r2,32(r2)
 8016268:	10810014 	ori	r2,r2,1024
 801626c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8016270:	e0bff917 	ldw	r2,-28(fp)
 8016274:	10000915 	stw	zero,36(r2)
 8016278:	00000a06 	br	80162a4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 801627c:	e0bff917 	ldw	r2,-28(fp)
 8016280:	10c00917 	ldw	r3,36(r2)
 8016284:	00a00034 	movhi	r2,32768
 8016288:	10bfff04 	addi	r2,r2,-4
 801628c:	10c00536 	bltu	r2,r3,80162a4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8016290:	e0bff917 	ldw	r2,-28(fp)
 8016294:	10800917 	ldw	r2,36(r2)
 8016298:	10c00044 	addi	r3,r2,1
 801629c:	e0bff917 	ldw	r2,-28(fp)
 80162a0:	10c00915 	stw	r3,36(r2)
 80162a4:	008200b4 	movhi	r2,2050
 80162a8:	10981d04 	addi	r2,r2,24692
 80162ac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80162b0:	e037883a 	mov	sp,fp
 80162b4:	df000017 	ldw	fp,0(sp)
 80162b8:	dec00104 	addi	sp,sp,4
 80162bc:	f800283a 	ret

080162c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80162c0:	defffd04 	addi	sp,sp,-12
 80162c4:	df000215 	stw	fp,8(sp)
 80162c8:	df000204 	addi	fp,sp,8
 80162cc:	e13ffe15 	stw	r4,-8(fp)
 80162d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80162d4:	00000506 	br	80162ec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80162d8:	e0bfff17 	ldw	r2,-4(fp)
 80162dc:	1090000c 	andi	r2,r2,16384
 80162e0:	10000226 	beq	r2,zero,80162ec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80162e4:	00bffd44 	movi	r2,-11
 80162e8:	00000b06 	br	8016318 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80162ec:	e0bffe17 	ldw	r2,-8(fp)
 80162f0:	10c00d17 	ldw	r3,52(r2)
 80162f4:	e0bffe17 	ldw	r2,-8(fp)
 80162f8:	10800c17 	ldw	r2,48(r2)
 80162fc:	18800526 	beq	r3,r2,8016314 <altera_avalon_jtag_uart_close+0x54>
 8016300:	e0bffe17 	ldw	r2,-8(fp)
 8016304:	10c00917 	ldw	r3,36(r2)
 8016308:	e0bffe17 	ldw	r2,-8(fp)
 801630c:	10800117 	ldw	r2,4(r2)
 8016310:	18bff136 	bltu	r3,r2,80162d8 <__alt_data_end+0xfc0162d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8016314:	0005883a 	mov	r2,zero
}
 8016318:	e037883a 	mov	sp,fp
 801631c:	df000017 	ldw	fp,0(sp)
 8016320:	dec00104 	addi	sp,sp,4
 8016324:	f800283a 	ret

08016328 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8016328:	defffa04 	addi	sp,sp,-24
 801632c:	df000515 	stw	fp,20(sp)
 8016330:	df000504 	addi	fp,sp,20
 8016334:	e13ffd15 	stw	r4,-12(fp)
 8016338:	e17ffe15 	stw	r5,-8(fp)
 801633c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8016340:	00bff9c4 	movi	r2,-25
 8016344:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8016348:	e0bffe17 	ldw	r2,-8(fp)
 801634c:	10da8060 	cmpeqi	r3,r2,27137
 8016350:	1800031e 	bne	r3,zero,8016360 <altera_avalon_jtag_uart_ioctl+0x38>
 8016354:	109a80a0 	cmpeqi	r2,r2,27138
 8016358:	1000191e 	bne	r2,zero,80163c0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 801635c:	00002806 	br	8016400 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8016360:	e0bffd17 	ldw	r2,-12(fp)
 8016364:	10c00117 	ldw	r3,4(r2)
 8016368:	00a00034 	movhi	r2,32768
 801636c:	10bfffc4 	addi	r2,r2,-1
 8016370:	18801226 	beq	r3,r2,80163bc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 8016374:	e0bfff17 	ldw	r2,-4(fp)
 8016378:	10800017 	ldw	r2,0(r2)
 801637c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8016380:	e0bffc17 	ldw	r2,-16(fp)
 8016384:	10800090 	cmplti	r2,r2,2
 8016388:	1000061e 	bne	r2,zero,80163a4 <altera_avalon_jtag_uart_ioctl+0x7c>
 801638c:	e0fffc17 	ldw	r3,-16(fp)
 8016390:	00a00034 	movhi	r2,32768
 8016394:	10bfffc4 	addi	r2,r2,-1
 8016398:	18800226 	beq	r3,r2,80163a4 <altera_avalon_jtag_uart_ioctl+0x7c>
 801639c:	e0bffc17 	ldw	r2,-16(fp)
 80163a0:	00000206 	br	80163ac <altera_avalon_jtag_uart_ioctl+0x84>
 80163a4:	00a00034 	movhi	r2,32768
 80163a8:	10bfff84 	addi	r2,r2,-2
 80163ac:	e0fffd17 	ldw	r3,-12(fp)
 80163b0:	18800115 	stw	r2,4(r3)
      rc = 0;
 80163b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80163b8:	00001106 	br	8016400 <altera_avalon_jtag_uart_ioctl+0xd8>
 80163bc:	00001006 	br	8016400 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80163c0:	e0bffd17 	ldw	r2,-12(fp)
 80163c4:	10c00117 	ldw	r3,4(r2)
 80163c8:	00a00034 	movhi	r2,32768
 80163cc:	10bfffc4 	addi	r2,r2,-1
 80163d0:	18800a26 	beq	r3,r2,80163fc <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80163d4:	e0bffd17 	ldw	r2,-12(fp)
 80163d8:	10c00917 	ldw	r3,36(r2)
 80163dc:	e0bffd17 	ldw	r2,-12(fp)
 80163e0:	10800117 	ldw	r2,4(r2)
 80163e4:	1885803a 	cmpltu	r2,r3,r2
 80163e8:	10c03fcc 	andi	r3,r2,255
 80163ec:	e0bfff17 	ldw	r2,-4(fp)
 80163f0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80163f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80163f8:	00000006 	br	80163fc <altera_avalon_jtag_uart_ioctl+0xd4>
 80163fc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8016400:	e0bffb17 	ldw	r2,-20(fp)
}
 8016404:	e037883a 	mov	sp,fp
 8016408:	df000017 	ldw	fp,0(sp)
 801640c:	dec00104 	addi	sp,sp,4
 8016410:	f800283a 	ret

08016414 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8016414:	defff304 	addi	sp,sp,-52
 8016418:	dfc00c15 	stw	ra,48(sp)
 801641c:	df000b15 	stw	fp,44(sp)
 8016420:	df000b04 	addi	fp,sp,44
 8016424:	e13ffc15 	stw	r4,-16(fp)
 8016428:	e17ffd15 	stw	r5,-12(fp)
 801642c:	e1bffe15 	stw	r6,-8(fp)
 8016430:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8016434:	e0bffd17 	ldw	r2,-12(fp)
 8016438:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801643c:	00004906 	br	8016564 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8016440:	e0bffc17 	ldw	r2,-16(fp)
 8016444:	10800a17 	ldw	r2,40(r2)
 8016448:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 801644c:	e0bffc17 	ldw	r2,-16(fp)
 8016450:	10800b17 	ldw	r2,44(r2)
 8016454:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8016458:	e0fff717 	ldw	r3,-36(fp)
 801645c:	e0bff817 	ldw	r2,-32(fp)
 8016460:	18800536 	bltu	r3,r2,8016478 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8016464:	e0fff717 	ldw	r3,-36(fp)
 8016468:	e0bff817 	ldw	r2,-32(fp)
 801646c:	1885c83a 	sub	r2,r3,r2
 8016470:	e0bff615 	stw	r2,-40(fp)
 8016474:	00000406 	br	8016488 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8016478:	00c20004 	movi	r3,2048
 801647c:	e0bff817 	ldw	r2,-32(fp)
 8016480:	1885c83a 	sub	r2,r3,r2
 8016484:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8016488:	e0bff617 	ldw	r2,-40(fp)
 801648c:	1000011e 	bne	r2,zero,8016494 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8016490:	00001d06 	br	8016508 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8016494:	e0fffe17 	ldw	r3,-8(fp)
 8016498:	e0bff617 	ldw	r2,-40(fp)
 801649c:	1880022e 	bgeu	r3,r2,80164a8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 80164a0:	e0bffe17 	ldw	r2,-8(fp)
 80164a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80164a8:	e0bff817 	ldw	r2,-32(fp)
 80164ac:	10800e04 	addi	r2,r2,56
 80164b0:	e0fffc17 	ldw	r3,-16(fp)
 80164b4:	1885883a 	add	r2,r3,r2
 80164b8:	e13ff517 	ldw	r4,-44(fp)
 80164bc:	100b883a 	mov	r5,r2
 80164c0:	e1bff617 	ldw	r6,-40(fp)
 80164c4:	80065b80 	call	80065b8 <memcpy>
      ptr   += n;
 80164c8:	e0fff517 	ldw	r3,-44(fp)
 80164cc:	e0bff617 	ldw	r2,-40(fp)
 80164d0:	1885883a 	add	r2,r3,r2
 80164d4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80164d8:	e0fffe17 	ldw	r3,-8(fp)
 80164dc:	e0bff617 	ldw	r2,-40(fp)
 80164e0:	1885c83a 	sub	r2,r3,r2
 80164e4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80164e8:	e0fff817 	ldw	r3,-32(fp)
 80164ec:	e0bff617 	ldw	r2,-40(fp)
 80164f0:	1885883a 	add	r2,r3,r2
 80164f4:	10c1ffcc 	andi	r3,r2,2047
 80164f8:	e0bffc17 	ldw	r2,-16(fp)
 80164fc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8016500:	e0bffe17 	ldw	r2,-8(fp)
 8016504:	00bfce16 	blt	zero,r2,8016440 <__alt_data_end+0xfc016440>

    /* If we read any data then return it */
    if (ptr != buffer)
 8016508:	e0fff517 	ldw	r3,-44(fp)
 801650c:	e0bffd17 	ldw	r2,-12(fp)
 8016510:	18800126 	beq	r3,r2,8016518 <altera_avalon_jtag_uart_read+0x104>
      break;
 8016514:	00001506 	br	801656c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8016518:	e0bfff17 	ldw	r2,-4(fp)
 801651c:	1090000c 	andi	r2,r2,16384
 8016520:	10000126 	beq	r2,zero,8016528 <altera_avalon_jtag_uart_read+0x114>
      break;
 8016524:	00001106 	br	801656c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8016528:	0001883a 	nop
 801652c:	e0bffc17 	ldw	r2,-16(fp)
 8016530:	10c00a17 	ldw	r3,40(r2)
 8016534:	e0bff717 	ldw	r2,-36(fp)
 8016538:	1880051e 	bne	r3,r2,8016550 <altera_avalon_jtag_uart_read+0x13c>
 801653c:	e0bffc17 	ldw	r2,-16(fp)
 8016540:	10c00917 	ldw	r3,36(r2)
 8016544:	e0bffc17 	ldw	r2,-16(fp)
 8016548:	10800117 	ldw	r2,4(r2)
 801654c:	18bff736 	bltu	r3,r2,801652c <__alt_data_end+0xfc01652c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8016550:	e0bffc17 	ldw	r2,-16(fp)
 8016554:	10c00a17 	ldw	r3,40(r2)
 8016558:	e0bff717 	ldw	r2,-36(fp)
 801655c:	1880011e 	bne	r3,r2,8016564 <altera_avalon_jtag_uart_read+0x150>
      break;
 8016560:	00000206 	br	801656c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8016564:	e0bffe17 	ldw	r2,-8(fp)
 8016568:	00bfb516 	blt	zero,r2,8016440 <__alt_data_end+0xfc016440>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801656c:	e0fff517 	ldw	r3,-44(fp)
 8016570:	e0bffd17 	ldw	r2,-12(fp)
 8016574:	18801826 	beq	r3,r2,80165d8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016578:	0005303a 	rdctl	r2,status
 801657c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016580:	e0fffa17 	ldw	r3,-24(fp)
 8016584:	00bfff84 	movi	r2,-2
 8016588:	1884703a 	and	r2,r3,r2
 801658c:	1001703a 	wrctl	status,r2
  
  return context;
 8016590:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8016594:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016598:	e0bffc17 	ldw	r2,-16(fp)
 801659c:	10800817 	ldw	r2,32(r2)
 80165a0:	10c00054 	ori	r3,r2,1
 80165a4:	e0bffc17 	ldw	r2,-16(fp)
 80165a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80165ac:	e0bffc17 	ldw	r2,-16(fp)
 80165b0:	10800017 	ldw	r2,0(r2)
 80165b4:	10800104 	addi	r2,r2,4
 80165b8:	1007883a 	mov	r3,r2
 80165bc:	e0bffc17 	ldw	r2,-16(fp)
 80165c0:	10800817 	ldw	r2,32(r2)
 80165c4:	18800035 	stwio	r2,0(r3)
 80165c8:	e0bff917 	ldw	r2,-28(fp)
 80165cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80165d0:	e0bffb17 	ldw	r2,-20(fp)
 80165d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80165d8:	e0fff517 	ldw	r3,-44(fp)
 80165dc:	e0bffd17 	ldw	r2,-12(fp)
 80165e0:	18800426 	beq	r3,r2,80165f4 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 80165e4:	e0fff517 	ldw	r3,-44(fp)
 80165e8:	e0bffd17 	ldw	r2,-12(fp)
 80165ec:	1885c83a 	sub	r2,r3,r2
 80165f0:	00000606 	br	801660c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 80165f4:	e0bfff17 	ldw	r2,-4(fp)
 80165f8:	1090000c 	andi	r2,r2,16384
 80165fc:	10000226 	beq	r2,zero,8016608 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 8016600:	00bffd44 	movi	r2,-11
 8016604:	00000106 	br	801660c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 8016608:	00bffec4 	movi	r2,-5
}
 801660c:	e037883a 	mov	sp,fp
 8016610:	dfc00117 	ldw	ra,4(sp)
 8016614:	df000017 	ldw	fp,0(sp)
 8016618:	dec00204 	addi	sp,sp,8
 801661c:	f800283a 	ret

08016620 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8016620:	defff304 	addi	sp,sp,-52
 8016624:	dfc00c15 	stw	ra,48(sp)
 8016628:	df000b15 	stw	fp,44(sp)
 801662c:	df000b04 	addi	fp,sp,44
 8016630:	e13ffc15 	stw	r4,-16(fp)
 8016634:	e17ffd15 	stw	r5,-12(fp)
 8016638:	e1bffe15 	stw	r6,-8(fp)
 801663c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8016640:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8016644:	e0bffd17 	ldw	r2,-12(fp)
 8016648:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801664c:	00003806 	br	8016730 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8016650:	e0bffc17 	ldw	r2,-16(fp)
 8016654:	10800c17 	ldw	r2,48(r2)
 8016658:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 801665c:	e0bffc17 	ldw	r2,-16(fp)
 8016660:	10800d17 	ldw	r2,52(r2)
 8016664:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8016668:	e0fff817 	ldw	r3,-32(fp)
 801666c:	e0bff517 	ldw	r2,-44(fp)
 8016670:	1880062e 	bgeu	r3,r2,801668c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8016674:	e0fff517 	ldw	r3,-44(fp)
 8016678:	e0bff817 	ldw	r2,-32(fp)
 801667c:	1885c83a 	sub	r2,r3,r2
 8016680:	10bfffc4 	addi	r2,r2,-1
 8016684:	e0bff615 	stw	r2,-40(fp)
 8016688:	00000b06 	br	80166b8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801668c:	e0bff517 	ldw	r2,-44(fp)
 8016690:	10000526 	beq	r2,zero,80166a8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8016694:	00c20004 	movi	r3,2048
 8016698:	e0bff817 	ldw	r2,-32(fp)
 801669c:	1885c83a 	sub	r2,r3,r2
 80166a0:	e0bff615 	stw	r2,-40(fp)
 80166a4:	00000406 	br	80166b8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80166a8:	00c1ffc4 	movi	r3,2047
 80166ac:	e0bff817 	ldw	r2,-32(fp)
 80166b0:	1885c83a 	sub	r2,r3,r2
 80166b4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80166b8:	e0bff617 	ldw	r2,-40(fp)
 80166bc:	1000011e 	bne	r2,zero,80166c4 <altera_avalon_jtag_uart_write+0xa4>
        break;
 80166c0:	00001d06 	br	8016738 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 80166c4:	e0fffe17 	ldw	r3,-8(fp)
 80166c8:	e0bff617 	ldw	r2,-40(fp)
 80166cc:	1880022e 	bgeu	r3,r2,80166d8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 80166d0:	e0bffe17 	ldw	r2,-8(fp)
 80166d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80166d8:	e0bff817 	ldw	r2,-32(fp)
 80166dc:	10820e04 	addi	r2,r2,2104
 80166e0:	e0fffc17 	ldw	r3,-16(fp)
 80166e4:	1885883a 	add	r2,r3,r2
 80166e8:	1009883a 	mov	r4,r2
 80166ec:	e17ffd17 	ldw	r5,-12(fp)
 80166f0:	e1bff617 	ldw	r6,-40(fp)
 80166f4:	80065b80 	call	80065b8 <memcpy>
      ptr   += n;
 80166f8:	e0fffd17 	ldw	r3,-12(fp)
 80166fc:	e0bff617 	ldw	r2,-40(fp)
 8016700:	1885883a 	add	r2,r3,r2
 8016704:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8016708:	e0fffe17 	ldw	r3,-8(fp)
 801670c:	e0bff617 	ldw	r2,-40(fp)
 8016710:	1885c83a 	sub	r2,r3,r2
 8016714:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016718:	e0fff817 	ldw	r3,-32(fp)
 801671c:	e0bff617 	ldw	r2,-40(fp)
 8016720:	1885883a 	add	r2,r3,r2
 8016724:	10c1ffcc 	andi	r3,r2,2047
 8016728:	e0bffc17 	ldw	r2,-16(fp)
 801672c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8016730:	e0bffe17 	ldw	r2,-8(fp)
 8016734:	00bfc616 	blt	zero,r2,8016650 <__alt_data_end+0xfc016650>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016738:	0005303a 	rdctl	r2,status
 801673c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016740:	e0fffa17 	ldw	r3,-24(fp)
 8016744:	00bfff84 	movi	r2,-2
 8016748:	1884703a 	and	r2,r3,r2
 801674c:	1001703a 	wrctl	status,r2
  
  return context;
 8016750:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8016754:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8016758:	e0bffc17 	ldw	r2,-16(fp)
 801675c:	10800817 	ldw	r2,32(r2)
 8016760:	10c00094 	ori	r3,r2,2
 8016764:	e0bffc17 	ldw	r2,-16(fp)
 8016768:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801676c:	e0bffc17 	ldw	r2,-16(fp)
 8016770:	10800017 	ldw	r2,0(r2)
 8016774:	10800104 	addi	r2,r2,4
 8016778:	1007883a 	mov	r3,r2
 801677c:	e0bffc17 	ldw	r2,-16(fp)
 8016780:	10800817 	ldw	r2,32(r2)
 8016784:	18800035 	stwio	r2,0(r3)
 8016788:	e0bff917 	ldw	r2,-28(fp)
 801678c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016790:	e0bffb17 	ldw	r2,-20(fp)
 8016794:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8016798:	e0bffe17 	ldw	r2,-8(fp)
 801679c:	0080120e 	bge	zero,r2,80167e8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 80167a0:	e0bfff17 	ldw	r2,-4(fp)
 80167a4:	1090000c 	andi	r2,r2,16384
 80167a8:	10000126 	beq	r2,zero,80167b0 <altera_avalon_jtag_uart_write+0x190>
        break;
 80167ac:	00001006 	br	80167f0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80167b0:	0001883a 	nop
 80167b4:	e0bffc17 	ldw	r2,-16(fp)
 80167b8:	10c00d17 	ldw	r3,52(r2)
 80167bc:	e0bff517 	ldw	r2,-44(fp)
 80167c0:	1880051e 	bne	r3,r2,80167d8 <altera_avalon_jtag_uart_write+0x1b8>
 80167c4:	e0bffc17 	ldw	r2,-16(fp)
 80167c8:	10c00917 	ldw	r3,36(r2)
 80167cc:	e0bffc17 	ldw	r2,-16(fp)
 80167d0:	10800117 	ldw	r2,4(r2)
 80167d4:	18bff736 	bltu	r3,r2,80167b4 <__alt_data_end+0xfc0167b4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80167d8:	e0bffc17 	ldw	r2,-16(fp)
 80167dc:	10800917 	ldw	r2,36(r2)
 80167e0:	10000126 	beq	r2,zero,80167e8 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 80167e4:	00000206 	br	80167f0 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 80167e8:	e0bffe17 	ldw	r2,-8(fp)
 80167ec:	00bf9716 	blt	zero,r2,801664c <__alt_data_end+0xfc01664c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80167f0:	e0fffd17 	ldw	r3,-12(fp)
 80167f4:	e0bff717 	ldw	r2,-36(fp)
 80167f8:	18800426 	beq	r3,r2,801680c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 80167fc:	e0fffd17 	ldw	r3,-12(fp)
 8016800:	e0bff717 	ldw	r2,-36(fp)
 8016804:	1885c83a 	sub	r2,r3,r2
 8016808:	00000606 	br	8016824 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 801680c:	e0bfff17 	ldw	r2,-4(fp)
 8016810:	1090000c 	andi	r2,r2,16384
 8016814:	10000226 	beq	r2,zero,8016820 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8016818:	00bffd44 	movi	r2,-11
 801681c:	00000106 	br	8016824 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8016820:	00bffec4 	movi	r2,-5
}
 8016824:	e037883a 	mov	sp,fp
 8016828:	dfc00117 	ldw	ra,4(sp)
 801682c:	df000017 	ldw	fp,0(sp)
 8016830:	dec00204 	addi	sp,sp,8
 8016834:	f800283a 	ret

08016838 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8016838:	defffa04 	addi	sp,sp,-24
 801683c:	dfc00515 	stw	ra,20(sp)
 8016840:	df000415 	stw	fp,16(sp)
 8016844:	df000404 	addi	fp,sp,16
 8016848:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 801684c:	0007883a 	mov	r3,zero
 8016850:	e0bfff17 	ldw	r2,-4(fp)
 8016854:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8016858:	e0bfff17 	ldw	r2,-4(fp)
 801685c:	10800104 	addi	r2,r2,4
 8016860:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016864:	0005303a 	rdctl	r2,status
 8016868:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801686c:	e0fffd17 	ldw	r3,-12(fp)
 8016870:	00bfff84 	movi	r2,-2
 8016874:	1884703a 	and	r2,r3,r2
 8016878:	1001703a 	wrctl	status,r2
  
  return context;
 801687c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8016880:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8016884:	8015a8c0 	call	8015a8c <alt_tick>
 8016888:	e0bffc17 	ldw	r2,-16(fp)
 801688c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016890:	e0bffe17 	ldw	r2,-8(fp)
 8016894:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8016898:	e037883a 	mov	sp,fp
 801689c:	dfc00117 	ldw	ra,4(sp)
 80168a0:	df000017 	ldw	fp,0(sp)
 80168a4:	dec00204 	addi	sp,sp,8
 80168a8:	f800283a 	ret

080168ac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 80168ac:	defff804 	addi	sp,sp,-32
 80168b0:	dfc00715 	stw	ra,28(sp)
 80168b4:	df000615 	stw	fp,24(sp)
 80168b8:	df000604 	addi	fp,sp,24
 80168bc:	e13ffc15 	stw	r4,-16(fp)
 80168c0:	e17ffd15 	stw	r5,-12(fp)
 80168c4:	e1bffe15 	stw	r6,-8(fp)
 80168c8:	e1ffff15 	stw	r7,-4(fp)
 80168cc:	e0bfff17 	ldw	r2,-4(fp)
 80168d0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80168d4:	008200b4 	movhi	r2,2050
 80168d8:	10981d04 	addi	r2,r2,24692
 80168dc:	10800017 	ldw	r2,0(r2)
 80168e0:	1000041e 	bne	r2,zero,80168f4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 80168e4:	008200b4 	movhi	r2,2050
 80168e8:	10981d04 	addi	r2,r2,24692
 80168ec:	e0fffb17 	ldw	r3,-20(fp)
 80168f0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80168f4:	e0bffc17 	ldw	r2,-16(fp)
 80168f8:	10800104 	addi	r2,r2,4
 80168fc:	00c001c4 	movi	r3,7
 8016900:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8016904:	d8000015 	stw	zero,0(sp)
 8016908:	e13ffd17 	ldw	r4,-12(fp)
 801690c:	e17ffe17 	ldw	r5,-8(fp)
 8016910:	01820074 	movhi	r6,2049
 8016914:	319a0e04 	addi	r6,r6,26680
 8016918:	e1fffc17 	ldw	r7,-16(fp)
 801691c:	80173180 	call	8017318 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8016920:	e037883a 	mov	sp,fp
 8016924:	dfc00117 	ldw	ra,4(sp)
 8016928:	df000017 	ldw	fp,0(sp)
 801692c:	dec00204 	addi	sp,sp,8
 8016930:	f800283a 	ret

08016934 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 8016934:	defffc04 	addi	sp,sp,-16
 8016938:	df000315 	stw	fp,12(sp)
 801693c:	df000304 	addi	fp,sp,12
 8016940:	e13ffe15 	stw	r4,-8(fp)
 8016944:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 8016948:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 801694c:	e0bfff17 	ldw	r2,-4(fp)
 8016950:	1000061e 	bne	r2,zero,801696c <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 8016954:	e0bffe17 	ldw	r2,-8(fp)
 8016958:	1007883a 	mov	r3,r2
 801695c:	e0bffd03 	ldbu	r2,-12(fp)
 8016960:	1884b03a 	or	r2,r3,r2
 8016964:	e0bffd05 	stb	r2,-12(fp)
 8016968:	00000806 	br	801698c <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 801696c:	e0bffe17 	ldw	r2,-8(fp)
 8016970:	1007883a 	mov	r3,r2
 8016974:	e0bffd03 	ldbu	r2,-12(fp)
 8016978:	1884b03a 	or	r2,r3,r2
 801697c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 8016980:	e0bffd03 	ldbu	r2,-12(fp)
 8016984:	10801014 	ori	r2,r2,64
 8016988:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 801698c:	e0fffd03 	ldbu	r3,-12(fp)
 8016990:	00bfe004 	movi	r2,-128
 8016994:	1884b03a 	or	r2,r3,r2
}
 8016998:	e037883a 	mov	sp,fp
 801699c:	df000017 	ldw	fp,0(sp)
 80169a0:	dec00104 	addi	sp,sp,4
 80169a4:	f800283a 	ret

080169a8 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 80169a8:	defffd04 	addi	sp,sp,-12
 80169ac:	df000215 	stw	fp,8(sp)
 80169b0:	df000204 	addi	fp,sp,8
 80169b4:	e13ffe15 	stw	r4,-8(fp)
 80169b8:	2805883a 	mov	r2,r5
 80169bc:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 80169c0:	e0bffe17 	ldw	r2,-8(fp)
 80169c4:	10800a17 	ldw	r2,40(r2)
 80169c8:	1007883a 	mov	r3,r2
 80169cc:	e0bfff03 	ldbu	r2,-4(fp)
 80169d0:	18800025 	stbio	r2,0(r3)
}
 80169d4:	e037883a 	mov	sp,fp
 80169d8:	df000017 	ldw	fp,0(sp)
 80169dc:	dec00104 	addi	sp,sp,4
 80169e0:	f800283a 	ret

080169e4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 80169e4:	defffe04 	addi	sp,sp,-8
 80169e8:	df000115 	stw	fp,4(sp)
 80169ec:	df000104 	addi	fp,sp,4
 80169f0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 80169f4:	e0bfff17 	ldw	r2,-4(fp)
 80169f8:	10800a17 	ldw	r2,40(r2)
 80169fc:	1007883a 	mov	r3,r2
 8016a00:	00800044 	movi	r2,1
 8016a04:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 8016a08:	e037883a 	mov	sp,fp
 8016a0c:	df000017 	ldw	fp,0(sp)
 8016a10:	dec00104 	addi	sp,sp,4
 8016a14:	f800283a 	ret

08016a18 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 8016a18:	defffc04 	addi	sp,sp,-16
 8016a1c:	dfc00315 	stw	ra,12(sp)
 8016a20:	df000215 	stw	fp,8(sp)
 8016a24:	df000204 	addi	fp,sp,8
 8016a28:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 8016a2c:	e13fff17 	ldw	r4,-4(fp)
 8016a30:	014200b4 	movhi	r5,2050
 8016a34:	29513c04 	addi	r5,r5,17648
 8016a38:	801726c0 	call	801726c <alt_find_dev>
 8016a3c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8016a40:	e0bffe17 	ldw	r2,-8(fp)
}
 8016a44:	e037883a 	mov	sp,fp
 8016a48:	dfc00117 	ldw	ra,4(sp)
 8016a4c:	df000017 	ldw	fp,0(sp)
 8016a50:	dec00204 	addi	sp,sp,8
 8016a54:	f800283a 	ret

08016a58 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 8016a58:	defffb04 	addi	sp,sp,-20
 8016a5c:	df000415 	stw	fp,16(sp)
 8016a60:	df000404 	addi	fp,sp,16
 8016a64:	e13ffd15 	stw	r4,-12(fp)
 8016a68:	e17ffe15 	stw	r5,-8(fp)
 8016a6c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 8016a70:	e03ffc15 	stw	zero,-16(fp)
 8016a74:	00000f06 	br	8016ab4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 8016a78:	e0bffd17 	ldw	r2,-12(fp)
 8016a7c:	10800a17 	ldw	r2,40(r2)
 8016a80:	10800044 	addi	r2,r2,1
 8016a84:	1009883a 	mov	r4,r2
 8016a88:	e0fffe17 	ldw	r3,-8(fp)
 8016a8c:	e0bffc17 	ldw	r2,-16(fp)
 8016a90:	1885883a 	add	r2,r3,r2
 8016a94:	10800003 	ldbu	r2,0(r2)
 8016a98:	10803fcc 	andi	r2,r2,255
 8016a9c:	1080201c 	xori	r2,r2,128
 8016aa0:	10bfe004 	addi	r2,r2,-128
 8016aa4:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 8016aa8:	e0bffc17 	ldw	r2,-16(fp)
 8016aac:	10800044 	addi	r2,r2,1
 8016ab0:	e0bffc15 	stw	r2,-16(fp)
 8016ab4:	e0fffc17 	ldw	r3,-16(fp)
 8016ab8:	e0bfff17 	ldw	r2,-4(fp)
 8016abc:	18bfee36 	bltu	r3,r2,8016a78 <__alt_data_end+0xfc016a78>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 8016ac0:	e037883a 	mov	sp,fp
 8016ac4:	df000017 	ldw	fp,0(sp)
 8016ac8:	dec00104 	addi	sp,sp,4
 8016acc:	f800283a 	ret

08016ad0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 8016ad0:	defffd04 	addi	sp,sp,-12
 8016ad4:	df000215 	stw	fp,8(sp)
 8016ad8:	df000204 	addi	fp,sp,8
 8016adc:	e13ffe15 	stw	r4,-8(fp)
 8016ae0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 8016ae4:	00000d06 	br	8016b1c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 8016ae8:	e0bffe17 	ldw	r2,-8(fp)
 8016aec:	10800a17 	ldw	r2,40(r2)
 8016af0:	10800044 	addi	r2,r2,1
 8016af4:	1007883a 	mov	r3,r2
 8016af8:	e0bfff17 	ldw	r2,-4(fp)
 8016afc:	10800003 	ldbu	r2,0(r2)
 8016b00:	10803fcc 	andi	r2,r2,255
 8016b04:	1080201c 	xori	r2,r2,128
 8016b08:	10bfe004 	addi	r2,r2,-128
 8016b0c:	18800025 	stbio	r2,0(r3)
		++ptr;
 8016b10:	e0bfff17 	ldw	r2,-4(fp)
 8016b14:	10800044 	addi	r2,r2,1
 8016b18:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 8016b1c:	e0bfff17 	ldw	r2,-4(fp)
 8016b20:	10800003 	ldbu	r2,0(r2)
 8016b24:	10803fcc 	andi	r2,r2,255
 8016b28:	1080201c 	xori	r2,r2,128
 8016b2c:	10bfe004 	addi	r2,r2,-128
 8016b30:	103fed1e 	bne	r2,zero,8016ae8 <__alt_data_end+0xfc016ae8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 8016b34:	e037883a 	mov	sp,fp
 8016b38:	df000017 	ldw	fp,0(sp)
 8016b3c:	dec00104 	addi	sp,sp,4
 8016b40:	f800283a 	ret

08016b44 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 8016b44:	defffb04 	addi	sp,sp,-20
 8016b48:	dfc00415 	stw	ra,16(sp)
 8016b4c:	df000315 	stw	fp,12(sp)
 8016b50:	df000304 	addi	fp,sp,12
 8016b54:	e13ffd15 	stw	r4,-12(fp)
 8016b58:	e17ffe15 	stw	r5,-8(fp)
 8016b5c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 8016b60:	e0bffd17 	ldw	r2,-12(fp)
 8016b64:	10c00017 	ldw	r3,0(r2)
 8016b68:	e0bfff17 	ldw	r2,-4(fp)
 8016b6c:	1809883a 	mov	r4,r3
 8016b70:	e17ffe17 	ldw	r5,-8(fp)
 8016b74:	100d883a 	mov	r6,r2
 8016b78:	8016a580 	call	8016a58 <alt_up_character_lcd_write>
	return 0;
 8016b7c:	0005883a 	mov	r2,zero
}
 8016b80:	e037883a 	mov	sp,fp
 8016b84:	dfc00117 	ldw	ra,4(sp)
 8016b88:	df000017 	ldw	fp,0(sp)
 8016b8c:	dec00204 	addi	sp,sp,8
 8016b90:	f800283a 	ret

08016b94 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 8016b94:	defffa04 	addi	sp,sp,-24
 8016b98:	dfc00515 	stw	ra,20(sp)
 8016b9c:	df000415 	stw	fp,16(sp)
 8016ba0:	df000404 	addi	fp,sp,16
 8016ba4:	e13ffd15 	stw	r4,-12(fp)
 8016ba8:	e17ffe15 	stw	r5,-8(fp)
 8016bac:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 8016bb0:	e0bffe17 	ldw	r2,-8(fp)
 8016bb4:	10800a28 	cmpgeui	r2,r2,40
 8016bb8:	1000031e 	bne	r2,zero,8016bc8 <alt_up_character_lcd_set_cursor_pos+0x34>
 8016bbc:	e0bfff17 	ldw	r2,-4(fp)
 8016bc0:	108000b0 	cmpltui	r2,r2,2
 8016bc4:	1000021e 	bne	r2,zero,8016bd0 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 8016bc8:	00bfffc4 	movi	r2,-1
 8016bcc:	00000906 	br	8016bf4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8016bd0:	e13ffe17 	ldw	r4,-8(fp)
 8016bd4:	e17fff17 	ldw	r5,-4(fp)
 8016bd8:	80169340 	call	8016934 <get_DDRAM_addr>
 8016bdc:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 8016be0:	e0bffc03 	ldbu	r2,-16(fp)
 8016be4:	e13ffd17 	ldw	r4,-12(fp)
 8016be8:	100b883a 	mov	r5,r2
 8016bec:	80169a80 	call	80169a8 <alt_up_character_lcd_send_cmd>
	return 0;
 8016bf0:	0005883a 	mov	r2,zero
}
 8016bf4:	e037883a 	mov	sp,fp
 8016bf8:	dfc00117 	ldw	ra,4(sp)
 8016bfc:	df000017 	ldw	fp,0(sp)
 8016c00:	dec00204 	addi	sp,sp,8
 8016c04:	f800283a 	ret

08016c08 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8016c08:	defffb04 	addi	sp,sp,-20
 8016c0c:	dfc00415 	stw	ra,16(sp)
 8016c10:	df000315 	stw	fp,12(sp)
 8016c14:	df000304 	addi	fp,sp,12
 8016c18:	e13ffe15 	stw	r4,-8(fp)
 8016c1c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8016c20:	e0bfff17 	ldw	r2,-4(fp)
 8016c24:	1000011e 	bne	r2,zero,8016c2c <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 8016c28:	00001406 	br	8016c7c <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8016c2c:	e0bfff17 	ldw	r2,-4(fp)
 8016c30:	0080020e 	bge	zero,r2,8016c3c <alt_up_character_lcd_shift_cursor+0x34>
 8016c34:	00800504 	movi	r2,20
 8016c38:	00000106 	br	8016c40 <alt_up_character_lcd_shift_cursor+0x38>
 8016c3c:	00800404 	movi	r2,16
 8016c40:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8016c44:	e0bfff17 	ldw	r2,-4(fp)
 8016c48:	1000010e 	bge	r2,zero,8016c50 <alt_up_character_lcd_shift_cursor+0x48>
 8016c4c:	0085c83a 	sub	r2,zero,r2
 8016c50:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8016c54:	00000406 	br	8016c68 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8016c58:	e0bffd43 	ldbu	r2,-11(fp)
 8016c5c:	e13ffe17 	ldw	r4,-8(fp)
 8016c60:	100b883a 	mov	r5,r2
 8016c64:	80169a80 	call	80169a8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8016c68:	e0bffd03 	ldbu	r2,-12(fp)
 8016c6c:	10ffffc4 	addi	r3,r2,-1
 8016c70:	e0fffd05 	stb	r3,-12(fp)
 8016c74:	10803fcc 	andi	r2,r2,255
 8016c78:	103ff71e 	bne	r2,zero,8016c58 <__alt_data_end+0xfc016c58>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8016c7c:	e037883a 	mov	sp,fp
 8016c80:	dfc00117 	ldw	ra,4(sp)
 8016c84:	df000017 	ldw	fp,0(sp)
 8016c88:	dec00204 	addi	sp,sp,8
 8016c8c:	f800283a 	ret

08016c90 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8016c90:	defffb04 	addi	sp,sp,-20
 8016c94:	dfc00415 	stw	ra,16(sp)
 8016c98:	df000315 	stw	fp,12(sp)
 8016c9c:	df000304 	addi	fp,sp,12
 8016ca0:	e13ffe15 	stw	r4,-8(fp)
 8016ca4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8016ca8:	e0bfff17 	ldw	r2,-4(fp)
 8016cac:	1000011e 	bne	r2,zero,8016cb4 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 8016cb0:	00001406 	br	8016d04 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8016cb4:	e0bfff17 	ldw	r2,-4(fp)
 8016cb8:	0080020e 	bge	zero,r2,8016cc4 <alt_up_character_lcd_shift_display+0x34>
 8016cbc:	00800704 	movi	r2,28
 8016cc0:	00000106 	br	8016cc8 <alt_up_character_lcd_shift_display+0x38>
 8016cc4:	00800604 	movi	r2,24
 8016cc8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8016ccc:	e0bfff17 	ldw	r2,-4(fp)
 8016cd0:	1000010e 	bge	r2,zero,8016cd8 <alt_up_character_lcd_shift_display+0x48>
 8016cd4:	0085c83a 	sub	r2,zero,r2
 8016cd8:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8016cdc:	00000406 	br	8016cf0 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8016ce0:	e0bffd43 	ldbu	r2,-11(fp)
 8016ce4:	e13ffe17 	ldw	r4,-8(fp)
 8016ce8:	100b883a 	mov	r5,r2
 8016cec:	80169a80 	call	80169a8 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8016cf0:	e0bffd03 	ldbu	r2,-12(fp)
 8016cf4:	10ffffc4 	addi	r3,r2,-1
 8016cf8:	e0fffd05 	stb	r3,-12(fp)
 8016cfc:	10803fcc 	andi	r2,r2,255
 8016d00:	103ff71e 	bne	r2,zero,8016ce0 <__alt_data_end+0xfc016ce0>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8016d04:	e037883a 	mov	sp,fp
 8016d08:	dfc00117 	ldw	ra,4(sp)
 8016d0c:	df000017 	ldw	fp,0(sp)
 8016d10:	dec00204 	addi	sp,sp,8
 8016d14:	f800283a 	ret

08016d18 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 8016d18:	defffa04 	addi	sp,sp,-24
 8016d1c:	dfc00515 	stw	ra,20(sp)
 8016d20:	df000415 	stw	fp,16(sp)
 8016d24:	df000404 	addi	fp,sp,16
 8016d28:	e13ffd15 	stw	r4,-12(fp)
 8016d2c:	e17ffe15 	stw	r5,-8(fp)
 8016d30:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 8016d34:	e0bffe17 	ldw	r2,-8(fp)
 8016d38:	10800a28 	cmpgeui	r2,r2,40
 8016d3c:	1000031e 	bne	r2,zero,8016d4c <alt_up_character_lcd_erase_pos+0x34>
 8016d40:	e0bfff17 	ldw	r2,-4(fp)
 8016d44:	108000b0 	cmpltui	r2,r2,2
 8016d48:	1000021e 	bne	r2,zero,8016d54 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 8016d4c:	00bfffc4 	movi	r2,-1
 8016d50:	00000f06 	br	8016d90 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8016d54:	e13ffe17 	ldw	r4,-8(fp)
 8016d58:	e17fff17 	ldw	r5,-4(fp)
 8016d5c:	80169340 	call	8016934 <get_DDRAM_addr>
 8016d60:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 8016d64:	e0bffc03 	ldbu	r2,-16(fp)
 8016d68:	e13ffd17 	ldw	r4,-12(fp)
 8016d6c:	100b883a 	mov	r5,r2
 8016d70:	80169a80 	call	80169a8 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 8016d74:	e0bffd17 	ldw	r2,-12(fp)
 8016d78:	10800a17 	ldw	r2,40(r2)
 8016d7c:	10800044 	addi	r2,r2,1
 8016d80:	1007883a 	mov	r3,r2
 8016d84:	00800084 	movi	r2,2
 8016d88:	18800025 	stbio	r2,0(r3)
	return 0;
 8016d8c:	0005883a 	mov	r2,zero
}
 8016d90:	e037883a 	mov	sp,fp
 8016d94:	dfc00117 	ldw	ra,4(sp)
 8016d98:	df000017 	ldw	fp,0(sp)
 8016d9c:	dec00204 	addi	sp,sp,8
 8016da0:	f800283a 	ret

08016da4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 8016da4:	defffd04 	addi	sp,sp,-12
 8016da8:	dfc00215 	stw	ra,8(sp)
 8016dac:	df000115 	stw	fp,4(sp)
 8016db0:	df000104 	addi	fp,sp,4
 8016db4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 8016db8:	e13fff17 	ldw	r4,-4(fp)
 8016dbc:	01400304 	movi	r5,12
 8016dc0:	80169a80 	call	80169a8 <alt_up_character_lcd_send_cmd>
}
 8016dc4:	e037883a 	mov	sp,fp
 8016dc8:	dfc00117 	ldw	ra,4(sp)
 8016dcc:	df000017 	ldw	fp,0(sp)
 8016dd0:	dec00204 	addi	sp,sp,8
 8016dd4:	f800283a 	ret

08016dd8 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 8016dd8:	defffd04 	addi	sp,sp,-12
 8016ddc:	dfc00215 	stw	ra,8(sp)
 8016de0:	df000115 	stw	fp,4(sp)
 8016de4:	df000104 	addi	fp,sp,4
 8016de8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 8016dec:	e13fff17 	ldw	r4,-4(fp)
 8016df0:	014003c4 	movi	r5,15
 8016df4:	80169a80 	call	80169a8 <alt_up_character_lcd_send_cmd>
}
 8016df8:	e037883a 	mov	sp,fp
 8016dfc:	dfc00117 	ldw	ra,4(sp)
 8016e00:	df000017 	ldw	fp,0(sp)
 8016e04:	dec00204 	addi	sp,sp,8
 8016e08:	f800283a 	ret

08016e0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8016e0c:	defff504 	addi	sp,sp,-44
 8016e10:	df000a15 	stw	fp,40(sp)
 8016e14:	df000a04 	addi	fp,sp,40
 8016e18:	e13ffc15 	stw	r4,-16(fp)
 8016e1c:	e17ffd15 	stw	r5,-12(fp)
 8016e20:	e1bffe15 	stw	r6,-8(fp)
 8016e24:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8016e28:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8016e2c:	008200b4 	movhi	r2,2050
 8016e30:	10981d04 	addi	r2,r2,24692
 8016e34:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8016e38:	10003f26 	beq	r2,zero,8016f38 <alt_alarm_start+0x12c>
  {
    if (alarm)
 8016e3c:	e0bffc17 	ldw	r2,-16(fp)
 8016e40:	10003b26 	beq	r2,zero,8016f30 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8016e44:	e0bffc17 	ldw	r2,-16(fp)
 8016e48:	e0fffe17 	ldw	r3,-8(fp)
 8016e4c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8016e50:	e0bffc17 	ldw	r2,-16(fp)
 8016e54:	e0ffff17 	ldw	r3,-4(fp)
 8016e58:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016e5c:	0005303a 	rdctl	r2,status
 8016e60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016e64:	e0fff817 	ldw	r3,-32(fp)
 8016e68:	00bfff84 	movi	r2,-2
 8016e6c:	1884703a 	and	r2,r3,r2
 8016e70:	1001703a 	wrctl	status,r2
  
  return context;
 8016e74:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8016e78:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8016e7c:	008200b4 	movhi	r2,2050
 8016e80:	10981e04 	addi	r2,r2,24696
 8016e84:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8016e88:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8016e8c:	e0fffd17 	ldw	r3,-12(fp)
 8016e90:	e0bff617 	ldw	r2,-40(fp)
 8016e94:	1885883a 	add	r2,r3,r2
 8016e98:	10c00044 	addi	r3,r2,1
 8016e9c:	e0bffc17 	ldw	r2,-16(fp)
 8016ea0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8016ea4:	e0bffc17 	ldw	r2,-16(fp)
 8016ea8:	10c00217 	ldw	r3,8(r2)
 8016eac:	e0bff617 	ldw	r2,-40(fp)
 8016eb0:	1880042e 	bgeu	r3,r2,8016ec4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8016eb4:	e0bffc17 	ldw	r2,-16(fp)
 8016eb8:	00c00044 	movi	r3,1
 8016ebc:	10c00405 	stb	r3,16(r2)
 8016ec0:	00000206 	br	8016ecc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8016ec4:	e0bffc17 	ldw	r2,-16(fp)
 8016ec8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8016ecc:	e0fffc17 	ldw	r3,-16(fp)
 8016ed0:	008200b4 	movhi	r2,2050
 8016ed4:	10914104 	addi	r2,r2,17668
 8016ed8:	e0bff915 	stw	r2,-28(fp)
 8016edc:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8016ee0:	e0bffa17 	ldw	r2,-24(fp)
 8016ee4:	e0fff917 	ldw	r3,-28(fp)
 8016ee8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8016eec:	e0bff917 	ldw	r2,-28(fp)
 8016ef0:	10c00017 	ldw	r3,0(r2)
 8016ef4:	e0bffa17 	ldw	r2,-24(fp)
 8016ef8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8016efc:	e0bff917 	ldw	r2,-28(fp)
 8016f00:	10800017 	ldw	r2,0(r2)
 8016f04:	e0fffa17 	ldw	r3,-24(fp)
 8016f08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8016f0c:	e0bff917 	ldw	r2,-28(fp)
 8016f10:	e0fffa17 	ldw	r3,-24(fp)
 8016f14:	10c00015 	stw	r3,0(r2)
 8016f18:	e0bff717 	ldw	r2,-36(fp)
 8016f1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016f20:	e0bffb17 	ldw	r2,-20(fp)
 8016f24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8016f28:	0005883a 	mov	r2,zero
 8016f2c:	00000306 	br	8016f3c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8016f30:	00bffa84 	movi	r2,-22
 8016f34:	00000106 	br	8016f3c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8016f38:	00bfde84 	movi	r2,-134
  }
}
 8016f3c:	e037883a 	mov	sp,fp
 8016f40:	df000017 	ldw	fp,0(sp)
 8016f44:	dec00104 	addi	sp,sp,4
 8016f48:	f800283a 	ret

08016f4c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8016f4c:	defffa04 	addi	sp,sp,-24
 8016f50:	dfc00515 	stw	ra,20(sp)
 8016f54:	df000415 	stw	fp,16(sp)
 8016f58:	df000404 	addi	fp,sp,16
 8016f5c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8016f60:	00800244 	movi	r2,9
 8016f64:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8016f68:	e13ffd17 	ldw	r4,-12(fp)
 8016f6c:	014003f4 	movhi	r5,15
 8016f70:	29509004 	addi	r5,r5,16960
 8016f74:	80040900 	call	8004090 <__mulsi3>
 8016f78:	0100bef4 	movhi	r4,763
 8016f7c:	213c2004 	addi	r4,r4,-3968
 8016f80:	100b883a 	mov	r5,r2
 8016f84:	80040800 	call	8004080 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8016f88:	01200034 	movhi	r4,32768
 8016f8c:	213fffc4 	addi	r4,r4,-1
 8016f90:	100b883a 	mov	r5,r2
 8016f94:	80040800 	call	8004080 <__udivsi3>
 8016f98:	e13fff17 	ldw	r4,-4(fp)
 8016f9c:	100b883a 	mov	r5,r2
 8016fa0:	80040800 	call	8004080 <__udivsi3>
 8016fa4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8016fa8:	e0bffe17 	ldw	r2,-8(fp)
 8016fac:	10002a26 	beq	r2,zero,8017058 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8016fb0:	e03ffc15 	stw	zero,-16(fp)
 8016fb4:	00001706 	br	8017014 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8016fb8:	00a00034 	movhi	r2,32768
 8016fbc:	10bfffc4 	addi	r2,r2,-1
 8016fc0:	10bfffc4 	addi	r2,r2,-1
 8016fc4:	103ffe1e 	bne	r2,zero,8016fc0 <__alt_data_end+0xfc016fc0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8016fc8:	e13ffd17 	ldw	r4,-12(fp)
 8016fcc:	014003f4 	movhi	r5,15
 8016fd0:	29509004 	addi	r5,r5,16960
 8016fd4:	80040900 	call	8004090 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8016fd8:	0100bef4 	movhi	r4,763
 8016fdc:	213c2004 	addi	r4,r4,-3968
 8016fe0:	100b883a 	mov	r5,r2
 8016fe4:	80040800 	call	8004080 <__udivsi3>
 8016fe8:	01200034 	movhi	r4,32768
 8016fec:	213fffc4 	addi	r4,r4,-1
 8016ff0:	100b883a 	mov	r5,r2
 8016ff4:	80040800 	call	8004080 <__udivsi3>
 8016ff8:	1007883a 	mov	r3,r2
 8016ffc:	e0bfff17 	ldw	r2,-4(fp)
 8017000:	10c5c83a 	sub	r2,r2,r3
 8017004:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8017008:	e0bffc17 	ldw	r2,-16(fp)
 801700c:	10800044 	addi	r2,r2,1
 8017010:	e0bffc15 	stw	r2,-16(fp)
 8017014:	e0fffc17 	ldw	r3,-16(fp)
 8017018:	e0bffe17 	ldw	r2,-8(fp)
 801701c:	18bfe616 	blt	r3,r2,8016fb8 <__alt_data_end+0xfc016fb8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8017020:	e13ffd17 	ldw	r4,-12(fp)
 8017024:	014003f4 	movhi	r5,15
 8017028:	29509004 	addi	r5,r5,16960
 801702c:	80040900 	call	8004090 <__mulsi3>
 8017030:	0100bef4 	movhi	r4,763
 8017034:	213c2004 	addi	r4,r4,-3968
 8017038:	100b883a 	mov	r5,r2
 801703c:	80040800 	call	8004080 <__udivsi3>
 8017040:	1009883a 	mov	r4,r2
 8017044:	e17fff17 	ldw	r5,-4(fp)
 8017048:	80040900 	call	8004090 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 801704c:	10bfffc4 	addi	r2,r2,-1
 8017050:	103ffe1e 	bne	r2,zero,801704c <__alt_data_end+0xfc01704c>
 8017054:	00000d06 	br	801708c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8017058:	e13ffd17 	ldw	r4,-12(fp)
 801705c:	014003f4 	movhi	r5,15
 8017060:	29509004 	addi	r5,r5,16960
 8017064:	80040900 	call	8004090 <__mulsi3>
 8017068:	0100bef4 	movhi	r4,763
 801706c:	213c2004 	addi	r4,r4,-3968
 8017070:	100b883a 	mov	r5,r2
 8017074:	80040800 	call	8004080 <__udivsi3>
 8017078:	1009883a 	mov	r4,r2
 801707c:	e17fff17 	ldw	r5,-4(fp)
 8017080:	80040900 	call	8004090 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8017084:	10bfffc4 	addi	r2,r2,-1
 8017088:	00bffe16 	blt	zero,r2,8017084 <__alt_data_end+0xfc017084>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 801708c:	0005883a 	mov	r2,zero
}
 8017090:	e037883a 	mov	sp,fp
 8017094:	dfc00117 	ldw	ra,4(sp)
 8017098:	df000017 	ldw	fp,0(sp)
 801709c:	dec00204 	addi	sp,sp,8
 80170a0:	f800283a 	ret

080170a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80170a4:	deffff04 	addi	sp,sp,-4
 80170a8:	df000015 	stw	fp,0(sp)
 80170ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80170b0:	e037883a 	mov	sp,fp
 80170b4:	df000017 	ldw	fp,0(sp)
 80170b8:	dec00104 	addi	sp,sp,4
 80170bc:	f800283a 	ret

080170c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80170c0:	defffe04 	addi	sp,sp,-8
 80170c4:	dfc00115 	stw	ra,4(sp)
 80170c8:	df000015 	stw	fp,0(sp)
 80170cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80170d0:	008200b4 	movhi	r2,2050
 80170d4:	10913f04 	addi	r2,r2,17660
 80170d8:	10800017 	ldw	r2,0(r2)
 80170dc:	10000526 	beq	r2,zero,80170f4 <alt_get_errno+0x34>
 80170e0:	008200b4 	movhi	r2,2050
 80170e4:	10913f04 	addi	r2,r2,17660
 80170e8:	10800017 	ldw	r2,0(r2)
 80170ec:	103ee83a 	callr	r2
 80170f0:	00000206 	br	80170fc <alt_get_errno+0x3c>
 80170f4:	008200b4 	movhi	r2,2050
 80170f8:	10981204 	addi	r2,r2,24648
}
 80170fc:	e037883a 	mov	sp,fp
 8017100:	dfc00117 	ldw	ra,4(sp)
 8017104:	df000017 	ldw	fp,0(sp)
 8017108:	dec00204 	addi	sp,sp,8
 801710c:	f800283a 	ret

08017110 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8017110:	defffa04 	addi	sp,sp,-24
 8017114:	dfc00515 	stw	ra,20(sp)
 8017118:	df000415 	stw	fp,16(sp)
 801711c:	df000404 	addi	fp,sp,16
 8017120:	e13ffe15 	stw	r4,-8(fp)
 8017124:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8017128:	e0bffe17 	ldw	r2,-8(fp)
 801712c:	10000326 	beq	r2,zero,801713c <alt_dev_llist_insert+0x2c>
 8017130:	e0bffe17 	ldw	r2,-8(fp)
 8017134:	10800217 	ldw	r2,8(r2)
 8017138:	1000061e 	bne	r2,zero,8017154 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 801713c:	80170c00 	call	80170c0 <alt_get_errno>
 8017140:	1007883a 	mov	r3,r2
 8017144:	00800584 	movi	r2,22
 8017148:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 801714c:	00bffa84 	movi	r2,-22
 8017150:	00001306 	br	80171a0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8017154:	e0bffe17 	ldw	r2,-8(fp)
 8017158:	e0ffff17 	ldw	r3,-4(fp)
 801715c:	e0fffc15 	stw	r3,-16(fp)
 8017160:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8017164:	e0bffd17 	ldw	r2,-12(fp)
 8017168:	e0fffc17 	ldw	r3,-16(fp)
 801716c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8017170:	e0bffc17 	ldw	r2,-16(fp)
 8017174:	10c00017 	ldw	r3,0(r2)
 8017178:	e0bffd17 	ldw	r2,-12(fp)
 801717c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8017180:	e0bffc17 	ldw	r2,-16(fp)
 8017184:	10800017 	ldw	r2,0(r2)
 8017188:	e0fffd17 	ldw	r3,-12(fp)
 801718c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8017190:	e0bffc17 	ldw	r2,-16(fp)
 8017194:	e0fffd17 	ldw	r3,-12(fp)
 8017198:	10c00015 	stw	r3,0(r2)

  return 0;  
 801719c:	0005883a 	mov	r2,zero
}
 80171a0:	e037883a 	mov	sp,fp
 80171a4:	dfc00117 	ldw	ra,4(sp)
 80171a8:	df000017 	ldw	fp,0(sp)
 80171ac:	dec00204 	addi	sp,sp,8
 80171b0:	f800283a 	ret

080171b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80171b4:	defffd04 	addi	sp,sp,-12
 80171b8:	dfc00215 	stw	ra,8(sp)
 80171bc:	df000115 	stw	fp,4(sp)
 80171c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80171c4:	00820074 	movhi	r2,2049
 80171c8:	109fe304 	addi	r2,r2,32652
 80171cc:	e0bfff15 	stw	r2,-4(fp)
 80171d0:	00000606 	br	80171ec <_do_ctors+0x38>
        (*ctor) (); 
 80171d4:	e0bfff17 	ldw	r2,-4(fp)
 80171d8:	10800017 	ldw	r2,0(r2)
 80171dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80171e0:	e0bfff17 	ldw	r2,-4(fp)
 80171e4:	10bfff04 	addi	r2,r2,-4
 80171e8:	e0bfff15 	stw	r2,-4(fp)
 80171ec:	e0ffff17 	ldw	r3,-4(fp)
 80171f0:	00820074 	movhi	r2,2049
 80171f4:	109fe404 	addi	r2,r2,32656
 80171f8:	18bff62e 	bgeu	r3,r2,80171d4 <__alt_data_end+0xfc0171d4>
        (*ctor) (); 
}
 80171fc:	e037883a 	mov	sp,fp
 8017200:	dfc00117 	ldw	ra,4(sp)
 8017204:	df000017 	ldw	fp,0(sp)
 8017208:	dec00204 	addi	sp,sp,8
 801720c:	f800283a 	ret

08017210 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8017210:	defffd04 	addi	sp,sp,-12
 8017214:	dfc00215 	stw	ra,8(sp)
 8017218:	df000115 	stw	fp,4(sp)
 801721c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8017220:	00820074 	movhi	r2,2049
 8017224:	109fe304 	addi	r2,r2,32652
 8017228:	e0bfff15 	stw	r2,-4(fp)
 801722c:	00000606 	br	8017248 <_do_dtors+0x38>
        (*dtor) (); 
 8017230:	e0bfff17 	ldw	r2,-4(fp)
 8017234:	10800017 	ldw	r2,0(r2)
 8017238:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801723c:	e0bfff17 	ldw	r2,-4(fp)
 8017240:	10bfff04 	addi	r2,r2,-4
 8017244:	e0bfff15 	stw	r2,-4(fp)
 8017248:	e0ffff17 	ldw	r3,-4(fp)
 801724c:	00820074 	movhi	r2,2049
 8017250:	109fe404 	addi	r2,r2,32656
 8017254:	18bff62e 	bgeu	r3,r2,8017230 <__alt_data_end+0xfc017230>
        (*dtor) (); 
}
 8017258:	e037883a 	mov	sp,fp
 801725c:	dfc00117 	ldw	ra,4(sp)
 8017260:	df000017 	ldw	fp,0(sp)
 8017264:	dec00204 	addi	sp,sp,8
 8017268:	f800283a 	ret

0801726c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801726c:	defffa04 	addi	sp,sp,-24
 8017270:	dfc00515 	stw	ra,20(sp)
 8017274:	df000415 	stw	fp,16(sp)
 8017278:	df000404 	addi	fp,sp,16
 801727c:	e13ffe15 	stw	r4,-8(fp)
 8017280:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8017284:	e0bfff17 	ldw	r2,-4(fp)
 8017288:	10800017 	ldw	r2,0(r2)
 801728c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8017290:	e13ffe17 	ldw	r4,-8(fp)
 8017294:	8006e040 	call	8006e04 <strlen>
 8017298:	10800044 	addi	r2,r2,1
 801729c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80172a0:	00000d06 	br	80172d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80172a4:	e0bffc17 	ldw	r2,-16(fp)
 80172a8:	10c00217 	ldw	r3,8(r2)
 80172ac:	e0bffd17 	ldw	r2,-12(fp)
 80172b0:	1809883a 	mov	r4,r3
 80172b4:	e17ffe17 	ldw	r5,-8(fp)
 80172b8:	100d883a 	mov	r6,r2
 80172bc:	8017c380 	call	8017c38 <memcmp>
 80172c0:	1000021e 	bne	r2,zero,80172cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80172c4:	e0bffc17 	ldw	r2,-16(fp)
 80172c8:	00000706 	br	80172e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80172cc:	e0bffc17 	ldw	r2,-16(fp)
 80172d0:	10800017 	ldw	r2,0(r2)
 80172d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80172d8:	e0fffc17 	ldw	r3,-16(fp)
 80172dc:	e0bfff17 	ldw	r2,-4(fp)
 80172e0:	18bff01e 	bne	r3,r2,80172a4 <__alt_data_end+0xfc0172a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80172e4:	0005883a 	mov	r2,zero
}
 80172e8:	e037883a 	mov	sp,fp
 80172ec:	dfc00117 	ldw	ra,4(sp)
 80172f0:	df000017 	ldw	fp,0(sp)
 80172f4:	dec00204 	addi	sp,sp,8
 80172f8:	f800283a 	ret

080172fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80172fc:	deffff04 	addi	sp,sp,-4
 8017300:	df000015 	stw	fp,0(sp)
 8017304:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8017308:	e037883a 	mov	sp,fp
 801730c:	df000017 	ldw	fp,0(sp)
 8017310:	dec00104 	addi	sp,sp,4
 8017314:	f800283a 	ret

08017318 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8017318:	defff904 	addi	sp,sp,-28
 801731c:	dfc00615 	stw	ra,24(sp)
 8017320:	df000515 	stw	fp,20(sp)
 8017324:	df000504 	addi	fp,sp,20
 8017328:	e13ffc15 	stw	r4,-16(fp)
 801732c:	e17ffd15 	stw	r5,-12(fp)
 8017330:	e1bffe15 	stw	r6,-8(fp)
 8017334:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8017338:	e0800217 	ldw	r2,8(fp)
 801733c:	d8800015 	stw	r2,0(sp)
 8017340:	e13ffc17 	ldw	r4,-16(fp)
 8017344:	e17ffd17 	ldw	r5,-12(fp)
 8017348:	e1bffe17 	ldw	r6,-8(fp)
 801734c:	e1ffff17 	ldw	r7,-4(fp)
 8017350:	80174f80 	call	80174f8 <alt_iic_isr_register>
}  
 8017354:	e037883a 	mov	sp,fp
 8017358:	dfc00117 	ldw	ra,4(sp)
 801735c:	df000017 	ldw	fp,0(sp)
 8017360:	dec00204 	addi	sp,sp,8
 8017364:	f800283a 	ret

08017368 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8017368:	defff904 	addi	sp,sp,-28
 801736c:	df000615 	stw	fp,24(sp)
 8017370:	df000604 	addi	fp,sp,24
 8017374:	e13ffe15 	stw	r4,-8(fp)
 8017378:	e17fff15 	stw	r5,-4(fp)
 801737c:	e0bfff17 	ldw	r2,-4(fp)
 8017380:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017384:	0005303a 	rdctl	r2,status
 8017388:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801738c:	e0fffb17 	ldw	r3,-20(fp)
 8017390:	00bfff84 	movi	r2,-2
 8017394:	1884703a 	and	r2,r3,r2
 8017398:	1001703a 	wrctl	status,r2
  
  return context;
 801739c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80173a0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80173a4:	e0bffa17 	ldw	r2,-24(fp)
 80173a8:	00c00044 	movi	r3,1
 80173ac:	1884983a 	sll	r2,r3,r2
 80173b0:	1007883a 	mov	r3,r2
 80173b4:	008200b4 	movhi	r2,2050
 80173b8:	10981f04 	addi	r2,r2,24700
 80173bc:	10800017 	ldw	r2,0(r2)
 80173c0:	1886b03a 	or	r3,r3,r2
 80173c4:	008200b4 	movhi	r2,2050
 80173c8:	10981f04 	addi	r2,r2,24700
 80173cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80173d0:	008200b4 	movhi	r2,2050
 80173d4:	10981f04 	addi	r2,r2,24700
 80173d8:	10800017 	ldw	r2,0(r2)
 80173dc:	100170fa 	wrctl	ienable,r2
 80173e0:	e0bffc17 	ldw	r2,-16(fp)
 80173e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80173e8:	e0bffd17 	ldw	r2,-12(fp)
 80173ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80173f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80173f4:	0001883a 	nop
}
 80173f8:	e037883a 	mov	sp,fp
 80173fc:	df000017 	ldw	fp,0(sp)
 8017400:	dec00104 	addi	sp,sp,4
 8017404:	f800283a 	ret

08017408 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8017408:	defff904 	addi	sp,sp,-28
 801740c:	df000615 	stw	fp,24(sp)
 8017410:	df000604 	addi	fp,sp,24
 8017414:	e13ffe15 	stw	r4,-8(fp)
 8017418:	e17fff15 	stw	r5,-4(fp)
 801741c:	e0bfff17 	ldw	r2,-4(fp)
 8017420:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017424:	0005303a 	rdctl	r2,status
 8017428:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801742c:	e0fffb17 	ldw	r3,-20(fp)
 8017430:	00bfff84 	movi	r2,-2
 8017434:	1884703a 	and	r2,r3,r2
 8017438:	1001703a 	wrctl	status,r2
  
  return context;
 801743c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8017440:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8017444:	e0bffa17 	ldw	r2,-24(fp)
 8017448:	00c00044 	movi	r3,1
 801744c:	1884983a 	sll	r2,r3,r2
 8017450:	0084303a 	nor	r2,zero,r2
 8017454:	1007883a 	mov	r3,r2
 8017458:	008200b4 	movhi	r2,2050
 801745c:	10981f04 	addi	r2,r2,24700
 8017460:	10800017 	ldw	r2,0(r2)
 8017464:	1886703a 	and	r3,r3,r2
 8017468:	008200b4 	movhi	r2,2050
 801746c:	10981f04 	addi	r2,r2,24700
 8017470:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8017474:	008200b4 	movhi	r2,2050
 8017478:	10981f04 	addi	r2,r2,24700
 801747c:	10800017 	ldw	r2,0(r2)
 8017480:	100170fa 	wrctl	ienable,r2
 8017484:	e0bffc17 	ldw	r2,-16(fp)
 8017488:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801748c:	e0bffd17 	ldw	r2,-12(fp)
 8017490:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8017494:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8017498:	0001883a 	nop
}
 801749c:	e037883a 	mov	sp,fp
 80174a0:	df000017 	ldw	fp,0(sp)
 80174a4:	dec00104 	addi	sp,sp,4
 80174a8:	f800283a 	ret

080174ac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80174ac:	defffc04 	addi	sp,sp,-16
 80174b0:	df000315 	stw	fp,12(sp)
 80174b4:	df000304 	addi	fp,sp,12
 80174b8:	e13ffe15 	stw	r4,-8(fp)
 80174bc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80174c0:	000530fa 	rdctl	r2,ienable
 80174c4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80174c8:	e0bfff17 	ldw	r2,-4(fp)
 80174cc:	00c00044 	movi	r3,1
 80174d0:	1884983a 	sll	r2,r3,r2
 80174d4:	1007883a 	mov	r3,r2
 80174d8:	e0bffd17 	ldw	r2,-12(fp)
 80174dc:	1884703a 	and	r2,r3,r2
 80174e0:	1004c03a 	cmpne	r2,r2,zero
 80174e4:	10803fcc 	andi	r2,r2,255
}
 80174e8:	e037883a 	mov	sp,fp
 80174ec:	df000017 	ldw	fp,0(sp)
 80174f0:	dec00104 	addi	sp,sp,4
 80174f4:	f800283a 	ret

080174f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80174f8:	defff504 	addi	sp,sp,-44
 80174fc:	dfc00a15 	stw	ra,40(sp)
 8017500:	df000915 	stw	fp,36(sp)
 8017504:	df000904 	addi	fp,sp,36
 8017508:	e13ffc15 	stw	r4,-16(fp)
 801750c:	e17ffd15 	stw	r5,-12(fp)
 8017510:	e1bffe15 	stw	r6,-8(fp)
 8017514:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8017518:	00bffa84 	movi	r2,-22
 801751c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8017520:	e0bffd17 	ldw	r2,-12(fp)
 8017524:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8017528:	e0bff817 	ldw	r2,-32(fp)
 801752c:	10800808 	cmpgei	r2,r2,32
 8017530:	1000271e 	bne	r2,zero,80175d0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017534:	0005303a 	rdctl	r2,status
 8017538:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801753c:	e0fffa17 	ldw	r3,-24(fp)
 8017540:	00bfff84 	movi	r2,-2
 8017544:	1884703a 	and	r2,r3,r2
 8017548:	1001703a 	wrctl	status,r2
  
  return context;
 801754c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8017550:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8017554:	008200b4 	movhi	r2,2050
 8017558:	10998e04 	addi	r2,r2,26168
 801755c:	e0fff817 	ldw	r3,-32(fp)
 8017560:	180690fa 	slli	r3,r3,3
 8017564:	10c5883a 	add	r2,r2,r3
 8017568:	e0fffe17 	ldw	r3,-8(fp)
 801756c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8017570:	008200b4 	movhi	r2,2050
 8017574:	10998e04 	addi	r2,r2,26168
 8017578:	e0fff817 	ldw	r3,-32(fp)
 801757c:	180690fa 	slli	r3,r3,3
 8017580:	10c5883a 	add	r2,r2,r3
 8017584:	10800104 	addi	r2,r2,4
 8017588:	e0ffff17 	ldw	r3,-4(fp)
 801758c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8017590:	e0bffe17 	ldw	r2,-8(fp)
 8017594:	10000526 	beq	r2,zero,80175ac <alt_iic_isr_register+0xb4>
 8017598:	e0bff817 	ldw	r2,-32(fp)
 801759c:	e13ffc17 	ldw	r4,-16(fp)
 80175a0:	100b883a 	mov	r5,r2
 80175a4:	80173680 	call	8017368 <alt_ic_irq_enable>
 80175a8:	00000406 	br	80175bc <alt_iic_isr_register+0xc4>
 80175ac:	e0bff817 	ldw	r2,-32(fp)
 80175b0:	e13ffc17 	ldw	r4,-16(fp)
 80175b4:	100b883a 	mov	r5,r2
 80175b8:	80174080 	call	8017408 <alt_ic_irq_disable>
 80175bc:	e0bff715 	stw	r2,-36(fp)
 80175c0:	e0bff917 	ldw	r2,-28(fp)
 80175c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80175c8:	e0bffb17 	ldw	r2,-20(fp)
 80175cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80175d0:	e0bff717 	ldw	r2,-36(fp)
}
 80175d4:	e037883a 	mov	sp,fp
 80175d8:	dfc00117 	ldw	ra,4(sp)
 80175dc:	df000017 	ldw	fp,0(sp)
 80175e0:	dec00204 	addi	sp,sp,8
 80175e4:	f800283a 	ret

080175e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80175e8:	defff804 	addi	sp,sp,-32
 80175ec:	dfc00715 	stw	ra,28(sp)
 80175f0:	df000615 	stw	fp,24(sp)
 80175f4:	dc000515 	stw	r16,20(sp)
 80175f8:	df000604 	addi	fp,sp,24
 80175fc:	e13ffb15 	stw	r4,-20(fp)
 8017600:	e17ffc15 	stw	r5,-16(fp)
 8017604:	e1bffd15 	stw	r6,-12(fp)
 8017608:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 801760c:	e13ffc17 	ldw	r4,-16(fp)
 8017610:	e17ffd17 	ldw	r5,-12(fp)
 8017614:	e1bffe17 	ldw	r6,-8(fp)
 8017618:	80178840 	call	8017884 <open>
 801761c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8017620:	e0bffa17 	ldw	r2,-24(fp)
 8017624:	10002216 	blt	r2,zero,80176b0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8017628:	040200b4 	movhi	r16,2050
 801762c:	840cb104 	addi	r16,r16,12996
 8017630:	e0bffa17 	ldw	r2,-24(fp)
 8017634:	1009883a 	mov	r4,r2
 8017638:	01400304 	movi	r5,12
 801763c:	80040900 	call	8004090 <__mulsi3>
 8017640:	8085883a 	add	r2,r16,r2
 8017644:	10c00017 	ldw	r3,0(r2)
 8017648:	e0bffb17 	ldw	r2,-20(fp)
 801764c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8017650:	040200b4 	movhi	r16,2050
 8017654:	840cb104 	addi	r16,r16,12996
 8017658:	e0bffa17 	ldw	r2,-24(fp)
 801765c:	1009883a 	mov	r4,r2
 8017660:	01400304 	movi	r5,12
 8017664:	80040900 	call	8004090 <__mulsi3>
 8017668:	8085883a 	add	r2,r16,r2
 801766c:	10800104 	addi	r2,r2,4
 8017670:	10c00017 	ldw	r3,0(r2)
 8017674:	e0bffb17 	ldw	r2,-20(fp)
 8017678:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 801767c:	040200b4 	movhi	r16,2050
 8017680:	840cb104 	addi	r16,r16,12996
 8017684:	e0bffa17 	ldw	r2,-24(fp)
 8017688:	1009883a 	mov	r4,r2
 801768c:	01400304 	movi	r5,12
 8017690:	80040900 	call	8004090 <__mulsi3>
 8017694:	8085883a 	add	r2,r16,r2
 8017698:	10800204 	addi	r2,r2,8
 801769c:	10c00017 	ldw	r3,0(r2)
 80176a0:	e0bffb17 	ldw	r2,-20(fp)
 80176a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80176a8:	e13ffa17 	ldw	r4,-24(fp)
 80176ac:	80158c40 	call	80158c4 <alt_release_fd>
  }
} 
 80176b0:	e6ffff04 	addi	sp,fp,-4
 80176b4:	dfc00217 	ldw	ra,8(sp)
 80176b8:	df000117 	ldw	fp,4(sp)
 80176bc:	dc000017 	ldw	r16,0(sp)
 80176c0:	dec00304 	addi	sp,sp,12
 80176c4:	f800283a 	ret

080176c8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80176c8:	defffb04 	addi	sp,sp,-20
 80176cc:	dfc00415 	stw	ra,16(sp)
 80176d0:	df000315 	stw	fp,12(sp)
 80176d4:	df000304 	addi	fp,sp,12
 80176d8:	e13ffd15 	stw	r4,-12(fp)
 80176dc:	e17ffe15 	stw	r5,-8(fp)
 80176e0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80176e4:	010200b4 	movhi	r4,2050
 80176e8:	210cb404 	addi	r4,r4,13008
 80176ec:	e17ffd17 	ldw	r5,-12(fp)
 80176f0:	01800044 	movi	r6,1
 80176f4:	01c07fc4 	movi	r7,511
 80176f8:	80175e80 	call	80175e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80176fc:	010200b4 	movhi	r4,2050
 8017700:	210cb104 	addi	r4,r4,12996
 8017704:	e17ffe17 	ldw	r5,-8(fp)
 8017708:	000d883a 	mov	r6,zero
 801770c:	01c07fc4 	movi	r7,511
 8017710:	80175e80 	call	80175e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8017714:	010200b4 	movhi	r4,2050
 8017718:	210cb704 	addi	r4,r4,13020
 801771c:	e17fff17 	ldw	r5,-4(fp)
 8017720:	01800044 	movi	r6,1
 8017724:	01c07fc4 	movi	r7,511
 8017728:	80175e80 	call	80175e8 <alt_open_fd>
}  
 801772c:	e037883a 	mov	sp,fp
 8017730:	dfc00117 	ldw	ra,4(sp)
 8017734:	df000017 	ldw	fp,0(sp)
 8017738:	dec00204 	addi	sp,sp,8
 801773c:	f800283a 	ret

08017740 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017740:	defffe04 	addi	sp,sp,-8
 8017744:	dfc00115 	stw	ra,4(sp)
 8017748:	df000015 	stw	fp,0(sp)
 801774c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017750:	008200b4 	movhi	r2,2050
 8017754:	10913f04 	addi	r2,r2,17660
 8017758:	10800017 	ldw	r2,0(r2)
 801775c:	10000526 	beq	r2,zero,8017774 <alt_get_errno+0x34>
 8017760:	008200b4 	movhi	r2,2050
 8017764:	10913f04 	addi	r2,r2,17660
 8017768:	10800017 	ldw	r2,0(r2)
 801776c:	103ee83a 	callr	r2
 8017770:	00000206 	br	801777c <alt_get_errno+0x3c>
 8017774:	008200b4 	movhi	r2,2050
 8017778:	10981204 	addi	r2,r2,24648
}
 801777c:	e037883a 	mov	sp,fp
 8017780:	dfc00117 	ldw	ra,4(sp)
 8017784:	df000017 	ldw	fp,0(sp)
 8017788:	dec00204 	addi	sp,sp,8
 801778c:	f800283a 	ret

08017790 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8017790:	defffb04 	addi	sp,sp,-20
 8017794:	dfc00415 	stw	ra,16(sp)
 8017798:	df000315 	stw	fp,12(sp)
 801779c:	dc000215 	stw	r16,8(sp)
 80177a0:	df000304 	addi	fp,sp,12
 80177a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80177a8:	e0bffe17 	ldw	r2,-8(fp)
 80177ac:	10800217 	ldw	r2,8(r2)
 80177b0:	10d00034 	orhi	r3,r2,16384
 80177b4:	e0bffe17 	ldw	r2,-8(fp)
 80177b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80177bc:	e03ffd15 	stw	zero,-12(fp)
 80177c0:	00002306 	br	8017850 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80177c4:	040200b4 	movhi	r16,2050
 80177c8:	840cb104 	addi	r16,r16,12996
 80177cc:	e0bffd17 	ldw	r2,-12(fp)
 80177d0:	1009883a 	mov	r4,r2
 80177d4:	01400304 	movi	r5,12
 80177d8:	80040900 	call	8004090 <__mulsi3>
 80177dc:	8085883a 	add	r2,r16,r2
 80177e0:	10c00017 	ldw	r3,0(r2)
 80177e4:	e0bffe17 	ldw	r2,-8(fp)
 80177e8:	10800017 	ldw	r2,0(r2)
 80177ec:	1880151e 	bne	r3,r2,8017844 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80177f0:	040200b4 	movhi	r16,2050
 80177f4:	840cb104 	addi	r16,r16,12996
 80177f8:	e0bffd17 	ldw	r2,-12(fp)
 80177fc:	1009883a 	mov	r4,r2
 8017800:	01400304 	movi	r5,12
 8017804:	80040900 	call	8004090 <__mulsi3>
 8017808:	8085883a 	add	r2,r16,r2
 801780c:	10800204 	addi	r2,r2,8
 8017810:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8017814:	10000b0e 	bge	r2,zero,8017844 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8017818:	e13ffd17 	ldw	r4,-12(fp)
 801781c:	01400304 	movi	r5,12
 8017820:	80040900 	call	8004090 <__mulsi3>
 8017824:	1007883a 	mov	r3,r2
 8017828:	008200b4 	movhi	r2,2050
 801782c:	108cb104 	addi	r2,r2,12996
 8017830:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8017834:	e0bffe17 	ldw	r2,-8(fp)
 8017838:	18800226 	beq	r3,r2,8017844 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 801783c:	00bffcc4 	movi	r2,-13
 8017840:	00000a06 	br	801786c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8017844:	e0bffd17 	ldw	r2,-12(fp)
 8017848:	10800044 	addi	r2,r2,1
 801784c:	e0bffd15 	stw	r2,-12(fp)
 8017850:	008200b4 	movhi	r2,2050
 8017854:	10913e04 	addi	r2,r2,17656
 8017858:	10800017 	ldw	r2,0(r2)
 801785c:	1007883a 	mov	r3,r2
 8017860:	e0bffd17 	ldw	r2,-12(fp)
 8017864:	18bfd72e 	bgeu	r3,r2,80177c4 <__alt_data_end+0xfc0177c4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8017868:	0005883a 	mov	r2,zero
}
 801786c:	e6ffff04 	addi	sp,fp,-4
 8017870:	dfc00217 	ldw	ra,8(sp)
 8017874:	df000117 	ldw	fp,4(sp)
 8017878:	dc000017 	ldw	r16,0(sp)
 801787c:	dec00304 	addi	sp,sp,12
 8017880:	f800283a 	ret

08017884 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8017884:	defff604 	addi	sp,sp,-40
 8017888:	dfc00915 	stw	ra,36(sp)
 801788c:	df000815 	stw	fp,32(sp)
 8017890:	df000804 	addi	fp,sp,32
 8017894:	e13ffd15 	stw	r4,-12(fp)
 8017898:	e17ffe15 	stw	r5,-8(fp)
 801789c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80178a0:	00bfffc4 	movi	r2,-1
 80178a4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80178a8:	00bffb44 	movi	r2,-19
 80178ac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80178b0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80178b4:	e13ffd17 	ldw	r4,-12(fp)
 80178b8:	014200b4 	movhi	r5,2050
 80178bc:	29513c04 	addi	r5,r5,17648
 80178c0:	801726c0 	call	801726c <alt_find_dev>
 80178c4:	e0bff815 	stw	r2,-32(fp)
 80178c8:	e0bff817 	ldw	r2,-32(fp)
 80178cc:	1000051e 	bne	r2,zero,80178e4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80178d0:	e13ffd17 	ldw	r4,-12(fp)
 80178d4:	8017a040 	call	8017a04 <alt_find_file>
 80178d8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80178dc:	00800044 	movi	r2,1
 80178e0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80178e4:	e0bff817 	ldw	r2,-32(fp)
 80178e8:	10002b26 	beq	r2,zero,8017998 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80178ec:	e13ff817 	ldw	r4,-32(fp)
 80178f0:	8017b180 	call	8017b18 <alt_get_fd>
 80178f4:	e0bff915 	stw	r2,-28(fp)
 80178f8:	e0bff917 	ldw	r2,-28(fp)
 80178fc:	1000030e 	bge	r2,zero,801790c <open+0x88>
    {
      status = index;
 8017900:	e0bff917 	ldw	r2,-28(fp)
 8017904:	e0bffa15 	stw	r2,-24(fp)
 8017908:	00002506 	br	80179a0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 801790c:	e13ff917 	ldw	r4,-28(fp)
 8017910:	01400304 	movi	r5,12
 8017914:	80040900 	call	8004090 <__mulsi3>
 8017918:	1007883a 	mov	r3,r2
 801791c:	008200b4 	movhi	r2,2050
 8017920:	108cb104 	addi	r2,r2,12996
 8017924:	1885883a 	add	r2,r3,r2
 8017928:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 801792c:	e0fffe17 	ldw	r3,-8(fp)
 8017930:	00900034 	movhi	r2,16384
 8017934:	10bfffc4 	addi	r2,r2,-1
 8017938:	1886703a 	and	r3,r3,r2
 801793c:	e0bffc17 	ldw	r2,-16(fp)
 8017940:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8017944:	e0bffb17 	ldw	r2,-20(fp)
 8017948:	1000051e 	bne	r2,zero,8017960 <open+0xdc>
 801794c:	e13ffc17 	ldw	r4,-16(fp)
 8017950:	80177900 	call	8017790 <alt_file_locked>
 8017954:	e0bffa15 	stw	r2,-24(fp)
 8017958:	e0bffa17 	ldw	r2,-24(fp)
 801795c:	10001016 	blt	r2,zero,80179a0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8017960:	e0bff817 	ldw	r2,-32(fp)
 8017964:	10800317 	ldw	r2,12(r2)
 8017968:	10000826 	beq	r2,zero,801798c <open+0x108>
 801796c:	e0bff817 	ldw	r2,-32(fp)
 8017970:	10800317 	ldw	r2,12(r2)
 8017974:	e13ffc17 	ldw	r4,-16(fp)
 8017978:	e17ffd17 	ldw	r5,-12(fp)
 801797c:	e1bffe17 	ldw	r6,-8(fp)
 8017980:	e1ffff17 	ldw	r7,-4(fp)
 8017984:	103ee83a 	callr	r2
 8017988:	00000106 	br	8017990 <open+0x10c>
 801798c:	0005883a 	mov	r2,zero
 8017990:	e0bffa15 	stw	r2,-24(fp)
 8017994:	00000206 	br	80179a0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8017998:	00bffb44 	movi	r2,-19
 801799c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80179a0:	e0bffa17 	ldw	r2,-24(fp)
 80179a4:	1000090e 	bge	r2,zero,80179cc <open+0x148>
  {
    alt_release_fd (index);  
 80179a8:	e13ff917 	ldw	r4,-28(fp)
 80179ac:	80158c40 	call	80158c4 <alt_release_fd>
    ALT_ERRNO = -status;
 80179b0:	80177400 	call	8017740 <alt_get_errno>
 80179b4:	1007883a 	mov	r3,r2
 80179b8:	e0bffa17 	ldw	r2,-24(fp)
 80179bc:	0085c83a 	sub	r2,zero,r2
 80179c0:	18800015 	stw	r2,0(r3)
    return -1;
 80179c4:	00bfffc4 	movi	r2,-1
 80179c8:	00000106 	br	80179d0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 80179cc:	e0bff917 	ldw	r2,-28(fp)
}
 80179d0:	e037883a 	mov	sp,fp
 80179d4:	dfc00117 	ldw	ra,4(sp)
 80179d8:	df000017 	ldw	fp,0(sp)
 80179dc:	dec00204 	addi	sp,sp,8
 80179e0:	f800283a 	ret

080179e4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 80179e4:	deffff04 	addi	sp,sp,-4
 80179e8:	df000015 	stw	fp,0(sp)
 80179ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80179f0:	000170fa 	wrctl	ienable,zero
}
 80179f4:	e037883a 	mov	sp,fp
 80179f8:	df000017 	ldw	fp,0(sp)
 80179fc:	dec00104 	addi	sp,sp,4
 8017a00:	f800283a 	ret

08017a04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8017a04:	defffb04 	addi	sp,sp,-20
 8017a08:	dfc00415 	stw	ra,16(sp)
 8017a0c:	df000315 	stw	fp,12(sp)
 8017a10:	df000304 	addi	fp,sp,12
 8017a14:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8017a18:	008200b4 	movhi	r2,2050
 8017a1c:	10913a04 	addi	r2,r2,17640
 8017a20:	10800017 	ldw	r2,0(r2)
 8017a24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8017a28:	00003106 	br	8017af0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8017a2c:	e0bffd17 	ldw	r2,-12(fp)
 8017a30:	10800217 	ldw	r2,8(r2)
 8017a34:	1009883a 	mov	r4,r2
 8017a38:	8006e040 	call	8006e04 <strlen>
 8017a3c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8017a40:	e0bffd17 	ldw	r2,-12(fp)
 8017a44:	10c00217 	ldw	r3,8(r2)
 8017a48:	e0bffe17 	ldw	r2,-8(fp)
 8017a4c:	10bfffc4 	addi	r2,r2,-1
 8017a50:	1885883a 	add	r2,r3,r2
 8017a54:	10800003 	ldbu	r2,0(r2)
 8017a58:	10803fcc 	andi	r2,r2,255
 8017a5c:	1080201c 	xori	r2,r2,128
 8017a60:	10bfe004 	addi	r2,r2,-128
 8017a64:	10800bd8 	cmpnei	r2,r2,47
 8017a68:	1000031e 	bne	r2,zero,8017a78 <alt_find_file+0x74>
    {
      len -= 1;
 8017a6c:	e0bffe17 	ldw	r2,-8(fp)
 8017a70:	10bfffc4 	addi	r2,r2,-1
 8017a74:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8017a78:	e0bffe17 	ldw	r2,-8(fp)
 8017a7c:	e0ffff17 	ldw	r3,-4(fp)
 8017a80:	1885883a 	add	r2,r3,r2
 8017a84:	10800003 	ldbu	r2,0(r2)
 8017a88:	10803fcc 	andi	r2,r2,255
 8017a8c:	1080201c 	xori	r2,r2,128
 8017a90:	10bfe004 	addi	r2,r2,-128
 8017a94:	10800be0 	cmpeqi	r2,r2,47
 8017a98:	1000081e 	bne	r2,zero,8017abc <alt_find_file+0xb8>
 8017a9c:	e0bffe17 	ldw	r2,-8(fp)
 8017aa0:	e0ffff17 	ldw	r3,-4(fp)
 8017aa4:	1885883a 	add	r2,r3,r2
 8017aa8:	10800003 	ldbu	r2,0(r2)
 8017aac:	10803fcc 	andi	r2,r2,255
 8017ab0:	1080201c 	xori	r2,r2,128
 8017ab4:	10bfe004 	addi	r2,r2,-128
 8017ab8:	10000a1e 	bne	r2,zero,8017ae4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8017abc:	e0bffd17 	ldw	r2,-12(fp)
 8017ac0:	10c00217 	ldw	r3,8(r2)
 8017ac4:	e0bffe17 	ldw	r2,-8(fp)
 8017ac8:	1809883a 	mov	r4,r3
 8017acc:	e17fff17 	ldw	r5,-4(fp)
 8017ad0:	100d883a 	mov	r6,r2
 8017ad4:	8017c380 	call	8017c38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8017ad8:	1000021e 	bne	r2,zero,8017ae4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8017adc:	e0bffd17 	ldw	r2,-12(fp)
 8017ae0:	00000806 	br	8017b04 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8017ae4:	e0bffd17 	ldw	r2,-12(fp)
 8017ae8:	10800017 	ldw	r2,0(r2)
 8017aec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8017af0:	e0fffd17 	ldw	r3,-12(fp)
 8017af4:	008200b4 	movhi	r2,2050
 8017af8:	10913a04 	addi	r2,r2,17640
 8017afc:	18bfcb1e 	bne	r3,r2,8017a2c <__alt_data_end+0xfc017a2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8017b00:	0005883a 	mov	r2,zero
}
 8017b04:	e037883a 	mov	sp,fp
 8017b08:	dfc00117 	ldw	ra,4(sp)
 8017b0c:	df000017 	ldw	fp,0(sp)
 8017b10:	dec00204 	addi	sp,sp,8
 8017b14:	f800283a 	ret

08017b18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8017b18:	defffa04 	addi	sp,sp,-24
 8017b1c:	dfc00515 	stw	ra,20(sp)
 8017b20:	df000415 	stw	fp,16(sp)
 8017b24:	dc000315 	stw	r16,12(sp)
 8017b28:	df000404 	addi	fp,sp,16
 8017b2c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8017b30:	00bffa04 	movi	r2,-24
 8017b34:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8017b38:	e03ffc15 	stw	zero,-16(fp)
 8017b3c:	00002106 	br	8017bc4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8017b40:	040200b4 	movhi	r16,2050
 8017b44:	840cb104 	addi	r16,r16,12996
 8017b48:	e0bffc17 	ldw	r2,-16(fp)
 8017b4c:	1009883a 	mov	r4,r2
 8017b50:	01400304 	movi	r5,12
 8017b54:	80040900 	call	8004090 <__mulsi3>
 8017b58:	8085883a 	add	r2,r16,r2
 8017b5c:	10800017 	ldw	r2,0(r2)
 8017b60:	1000151e 	bne	r2,zero,8017bb8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8017b64:	040200b4 	movhi	r16,2050
 8017b68:	840cb104 	addi	r16,r16,12996
 8017b6c:	e0bffc17 	ldw	r2,-16(fp)
 8017b70:	1009883a 	mov	r4,r2
 8017b74:	01400304 	movi	r5,12
 8017b78:	80040900 	call	8004090 <__mulsi3>
 8017b7c:	8085883a 	add	r2,r16,r2
 8017b80:	e0fffe17 	ldw	r3,-8(fp)
 8017b84:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8017b88:	008200b4 	movhi	r2,2050
 8017b8c:	10913e04 	addi	r2,r2,17656
 8017b90:	10c00017 	ldw	r3,0(r2)
 8017b94:	e0bffc17 	ldw	r2,-16(fp)
 8017b98:	1880040e 	bge	r3,r2,8017bac <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8017b9c:	008200b4 	movhi	r2,2050
 8017ba0:	10913e04 	addi	r2,r2,17656
 8017ba4:	e0fffc17 	ldw	r3,-16(fp)
 8017ba8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8017bac:	e0bffc17 	ldw	r2,-16(fp)
 8017bb0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8017bb4:	00000606 	br	8017bd0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8017bb8:	e0bffc17 	ldw	r2,-16(fp)
 8017bbc:	10800044 	addi	r2,r2,1
 8017bc0:	e0bffc15 	stw	r2,-16(fp)
 8017bc4:	e0bffc17 	ldw	r2,-16(fp)
 8017bc8:	10800810 	cmplti	r2,r2,32
 8017bcc:	103fdc1e 	bne	r2,zero,8017b40 <__alt_data_end+0xfc017b40>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8017bd0:	e0bffd17 	ldw	r2,-12(fp)
}
 8017bd4:	e6ffff04 	addi	sp,fp,-4
 8017bd8:	dfc00217 	ldw	ra,8(sp)
 8017bdc:	df000117 	ldw	fp,4(sp)
 8017be0:	dc000017 	ldw	r16,0(sp)
 8017be4:	dec00304 	addi	sp,sp,12
 8017be8:	f800283a 	ret

08017bec <atexit>:
 8017bec:	200b883a 	mov	r5,r4
 8017bf0:	000d883a 	mov	r6,zero
 8017bf4:	0009883a 	mov	r4,zero
 8017bf8:	000f883a 	mov	r7,zero
 8017bfc:	8017cb41 	jmpi	8017cb4 <__register_exitproc>

08017c00 <exit>:
 8017c00:	defffe04 	addi	sp,sp,-8
 8017c04:	000b883a 	mov	r5,zero
 8017c08:	dc000015 	stw	r16,0(sp)
 8017c0c:	dfc00115 	stw	ra,4(sp)
 8017c10:	2021883a 	mov	r16,r4
 8017c14:	8017dc80 	call	8017dc8 <__call_exitprocs>
 8017c18:	008200b4 	movhi	r2,2050
 8017c1c:	10913604 	addi	r2,r2,17624
 8017c20:	11000017 	ldw	r4,0(r2)
 8017c24:	20800f17 	ldw	r2,60(r4)
 8017c28:	10000126 	beq	r2,zero,8017c30 <exit+0x30>
 8017c2c:	103ee83a 	callr	r2
 8017c30:	8009883a 	mov	r4,r16
 8017c34:	8017f5c0 	call	8017f5c <_exit>

08017c38 <memcmp>:
 8017c38:	01c000c4 	movi	r7,3
 8017c3c:	3980192e 	bgeu	r7,r6,8017ca4 <memcmp+0x6c>
 8017c40:	2144b03a 	or	r2,r4,r5
 8017c44:	11c4703a 	and	r2,r2,r7
 8017c48:	10000f26 	beq	r2,zero,8017c88 <memcmp+0x50>
 8017c4c:	20800003 	ldbu	r2,0(r4)
 8017c50:	28c00003 	ldbu	r3,0(r5)
 8017c54:	10c0151e 	bne	r2,r3,8017cac <memcmp+0x74>
 8017c58:	31bfff84 	addi	r6,r6,-2
 8017c5c:	01ffffc4 	movi	r7,-1
 8017c60:	00000406 	br	8017c74 <memcmp+0x3c>
 8017c64:	20800003 	ldbu	r2,0(r4)
 8017c68:	28c00003 	ldbu	r3,0(r5)
 8017c6c:	31bfffc4 	addi	r6,r6,-1
 8017c70:	10c00e1e 	bne	r2,r3,8017cac <memcmp+0x74>
 8017c74:	21000044 	addi	r4,r4,1
 8017c78:	29400044 	addi	r5,r5,1
 8017c7c:	31fff91e 	bne	r6,r7,8017c64 <__alt_data_end+0xfc017c64>
 8017c80:	0005883a 	mov	r2,zero
 8017c84:	f800283a 	ret
 8017c88:	20c00017 	ldw	r3,0(r4)
 8017c8c:	28800017 	ldw	r2,0(r5)
 8017c90:	1880041e 	bne	r3,r2,8017ca4 <memcmp+0x6c>
 8017c94:	31bfff04 	addi	r6,r6,-4
 8017c98:	21000104 	addi	r4,r4,4
 8017c9c:	29400104 	addi	r5,r5,4
 8017ca0:	39bff936 	bltu	r7,r6,8017c88 <__alt_data_end+0xfc017c88>
 8017ca4:	303fe91e 	bne	r6,zero,8017c4c <__alt_data_end+0xfc017c4c>
 8017ca8:	003ff506 	br	8017c80 <__alt_data_end+0xfc017c80>
 8017cac:	10c5c83a 	sub	r2,r2,r3
 8017cb0:	f800283a 	ret

08017cb4 <__register_exitproc>:
 8017cb4:	008200b4 	movhi	r2,2050
 8017cb8:	defffa04 	addi	sp,sp,-24
 8017cbc:	10913604 	addi	r2,r2,17624
 8017cc0:	dc000315 	stw	r16,12(sp)
 8017cc4:	14000017 	ldw	r16,0(r2)
 8017cc8:	dc400415 	stw	r17,16(sp)
 8017ccc:	dfc00515 	stw	ra,20(sp)
 8017cd0:	80805217 	ldw	r2,328(r16)
 8017cd4:	2023883a 	mov	r17,r4
 8017cd8:	10003626 	beq	r2,zero,8017db4 <__register_exitproc+0x100>
 8017cdc:	10c00117 	ldw	r3,4(r2)
 8017ce0:	010007c4 	movi	r4,31
 8017ce4:	20c00e16 	blt	r4,r3,8017d20 <__register_exitproc+0x6c>
 8017ce8:	1a400044 	addi	r9,r3,1
 8017cec:	8800211e 	bne	r17,zero,8017d74 <__register_exitproc+0xc0>
 8017cf0:	18c00084 	addi	r3,r3,2
 8017cf4:	18c7883a 	add	r3,r3,r3
 8017cf8:	18c7883a 	add	r3,r3,r3
 8017cfc:	12400115 	stw	r9,4(r2)
 8017d00:	10c7883a 	add	r3,r2,r3
 8017d04:	19400015 	stw	r5,0(r3)
 8017d08:	0005883a 	mov	r2,zero
 8017d0c:	dfc00517 	ldw	ra,20(sp)
 8017d10:	dc400417 	ldw	r17,16(sp)
 8017d14:	dc000317 	ldw	r16,12(sp)
 8017d18:	dec00604 	addi	sp,sp,24
 8017d1c:	f800283a 	ret
 8017d20:	00820034 	movhi	r2,2048
 8017d24:	10977a04 	addi	r2,r2,24040
 8017d28:	10002526 	beq	r2,zero,8017dc0 <__register_exitproc+0x10c>
 8017d2c:	01006404 	movi	r4,400
 8017d30:	d9400015 	stw	r5,0(sp)
 8017d34:	d9800115 	stw	r6,4(sp)
 8017d38:	d9c00215 	stw	r7,8(sp)
 8017d3c:	8005de80 	call	8005de8 <malloc>
 8017d40:	d9400017 	ldw	r5,0(sp)
 8017d44:	d9800117 	ldw	r6,4(sp)
 8017d48:	d9c00217 	ldw	r7,8(sp)
 8017d4c:	10001c26 	beq	r2,zero,8017dc0 <__register_exitproc+0x10c>
 8017d50:	80c05217 	ldw	r3,328(r16)
 8017d54:	10000115 	stw	zero,4(r2)
 8017d58:	02400044 	movi	r9,1
 8017d5c:	10c00015 	stw	r3,0(r2)
 8017d60:	80805215 	stw	r2,328(r16)
 8017d64:	10006215 	stw	zero,392(r2)
 8017d68:	10006315 	stw	zero,396(r2)
 8017d6c:	0007883a 	mov	r3,zero
 8017d70:	883fdf26 	beq	r17,zero,8017cf0 <__alt_data_end+0xfc017cf0>
 8017d74:	18d1883a 	add	r8,r3,r3
 8017d78:	4211883a 	add	r8,r8,r8
 8017d7c:	1211883a 	add	r8,r2,r8
 8017d80:	41802215 	stw	r6,136(r8)
 8017d84:	01000044 	movi	r4,1
 8017d88:	11806217 	ldw	r6,392(r2)
 8017d8c:	20c8983a 	sll	r4,r4,r3
 8017d90:	310cb03a 	or	r6,r6,r4
 8017d94:	11806215 	stw	r6,392(r2)
 8017d98:	41c04215 	stw	r7,264(r8)
 8017d9c:	01800084 	movi	r6,2
 8017da0:	89bfd31e 	bne	r17,r6,8017cf0 <__alt_data_end+0xfc017cf0>
 8017da4:	11806317 	ldw	r6,396(r2)
 8017da8:	3108b03a 	or	r4,r6,r4
 8017dac:	11006315 	stw	r4,396(r2)
 8017db0:	003fcf06 	br	8017cf0 <__alt_data_end+0xfc017cf0>
 8017db4:	80805304 	addi	r2,r16,332
 8017db8:	80805215 	stw	r2,328(r16)
 8017dbc:	003fc706 	br	8017cdc <__alt_data_end+0xfc017cdc>
 8017dc0:	00bfffc4 	movi	r2,-1
 8017dc4:	003fd106 	br	8017d0c <__alt_data_end+0xfc017d0c>

08017dc8 <__call_exitprocs>:
 8017dc8:	008200b4 	movhi	r2,2050
 8017dcc:	10913604 	addi	r2,r2,17624
 8017dd0:	10800017 	ldw	r2,0(r2)
 8017dd4:	defff404 	addi	sp,sp,-48
 8017dd8:	dd800815 	stw	r22,32(sp)
 8017ddc:	d8800015 	stw	r2,0(sp)
 8017de0:	10805204 	addi	r2,r2,328
 8017de4:	dd000615 	stw	r20,24(sp)
 8017de8:	dc800415 	stw	r18,16(sp)
 8017dec:	dfc00b15 	stw	ra,44(sp)
 8017df0:	df000a15 	stw	fp,40(sp)
 8017df4:	ddc00915 	stw	r23,36(sp)
 8017df8:	dd400715 	stw	r21,28(sp)
 8017dfc:	dcc00515 	stw	r19,20(sp)
 8017e00:	dc400315 	stw	r17,12(sp)
 8017e04:	dc000215 	stw	r16,8(sp)
 8017e08:	2025883a 	mov	r18,r4
 8017e0c:	2829883a 	mov	r20,r5
 8017e10:	d8800115 	stw	r2,4(sp)
 8017e14:	05bfffc4 	movi	r22,-1
 8017e18:	d8800017 	ldw	r2,0(sp)
 8017e1c:	14c05217 	ldw	r19,328(r2)
 8017e20:	98001d26 	beq	r19,zero,8017e98 <__call_exitprocs+0xd0>
 8017e24:	dd400117 	ldw	r21,4(sp)
 8017e28:	98800117 	ldw	r2,4(r19)
 8017e2c:	173fffc4 	addi	fp,r2,-1
 8017e30:	e0000d16 	blt	fp,zero,8017e68 <__call_exitprocs+0xa0>
 8017e34:	14000044 	addi	r16,r2,1
 8017e38:	8421883a 	add	r16,r16,r16
 8017e3c:	8421883a 	add	r16,r16,r16
 8017e40:	84402004 	addi	r17,r16,128
 8017e44:	9c63883a 	add	r17,r19,r17
 8017e48:	9c21883a 	add	r16,r19,r16
 8017e4c:	a0001e26 	beq	r20,zero,8017ec8 <__call_exitprocs+0x100>
 8017e50:	80804017 	ldw	r2,256(r16)
 8017e54:	15001c26 	beq	r2,r20,8017ec8 <__call_exitprocs+0x100>
 8017e58:	e73fffc4 	addi	fp,fp,-1
 8017e5c:	843fff04 	addi	r16,r16,-4
 8017e60:	8c7fff04 	addi	r17,r17,-4
 8017e64:	e5bff91e 	bne	fp,r22,8017e4c <__alt_data_end+0xfc017e4c>
 8017e68:	00820034 	movhi	r2,2048
 8017e6c:	10977f04 	addi	r2,r2,24060
 8017e70:	10000926 	beq	r2,zero,8017e98 <__call_exitprocs+0xd0>
 8017e74:	98800117 	ldw	r2,4(r19)
 8017e78:	1000311e 	bne	r2,zero,8017f40 <__call_exitprocs+0x178>
 8017e7c:	98800017 	ldw	r2,0(r19)
 8017e80:	10003426 	beq	r2,zero,8017f54 <__call_exitprocs+0x18c>
 8017e84:	9809883a 	mov	r4,r19
 8017e88:	a8800015 	stw	r2,0(r21)
 8017e8c:	8005dfc0 	call	8005dfc <free>
 8017e90:	acc00017 	ldw	r19,0(r21)
 8017e94:	983fe41e 	bne	r19,zero,8017e28 <__alt_data_end+0xfc017e28>
 8017e98:	dfc00b17 	ldw	ra,44(sp)
 8017e9c:	df000a17 	ldw	fp,40(sp)
 8017ea0:	ddc00917 	ldw	r23,36(sp)
 8017ea4:	dd800817 	ldw	r22,32(sp)
 8017ea8:	dd400717 	ldw	r21,28(sp)
 8017eac:	dd000617 	ldw	r20,24(sp)
 8017eb0:	dcc00517 	ldw	r19,20(sp)
 8017eb4:	dc800417 	ldw	r18,16(sp)
 8017eb8:	dc400317 	ldw	r17,12(sp)
 8017ebc:	dc000217 	ldw	r16,8(sp)
 8017ec0:	dec00c04 	addi	sp,sp,48
 8017ec4:	f800283a 	ret
 8017ec8:	98800117 	ldw	r2,4(r19)
 8017ecc:	80c00017 	ldw	r3,0(r16)
 8017ed0:	10bfffc4 	addi	r2,r2,-1
 8017ed4:	17001526 	beq	r2,fp,8017f2c <__call_exitprocs+0x164>
 8017ed8:	80000015 	stw	zero,0(r16)
 8017edc:	183fde26 	beq	r3,zero,8017e58 <__alt_data_end+0xfc017e58>
 8017ee0:	00800044 	movi	r2,1
 8017ee4:	1708983a 	sll	r4,r2,fp
 8017ee8:	98806217 	ldw	r2,392(r19)
 8017eec:	9dc00117 	ldw	r23,4(r19)
 8017ef0:	2084703a 	and	r2,r4,r2
 8017ef4:	1000061e 	bne	r2,zero,8017f10 <__call_exitprocs+0x148>
 8017ef8:	183ee83a 	callr	r3
 8017efc:	98800117 	ldw	r2,4(r19)
 8017f00:	15ffc51e 	bne	r2,r23,8017e18 <__alt_data_end+0xfc017e18>
 8017f04:	a8800017 	ldw	r2,0(r21)
 8017f08:	14ffd326 	beq	r2,r19,8017e58 <__alt_data_end+0xfc017e58>
 8017f0c:	003fc206 	br	8017e18 <__alt_data_end+0xfc017e18>
 8017f10:	98806317 	ldw	r2,396(r19)
 8017f14:	2084703a 	and	r2,r4,r2
 8017f18:	1000061e 	bne	r2,zero,8017f34 <__call_exitprocs+0x16c>
 8017f1c:	89400017 	ldw	r5,0(r17)
 8017f20:	9009883a 	mov	r4,r18
 8017f24:	183ee83a 	callr	r3
 8017f28:	003ff406 	br	8017efc <__alt_data_end+0xfc017efc>
 8017f2c:	9f000115 	stw	fp,4(r19)
 8017f30:	003fea06 	br	8017edc <__alt_data_end+0xfc017edc>
 8017f34:	89000017 	ldw	r4,0(r17)
 8017f38:	183ee83a 	callr	r3
 8017f3c:	003fef06 	br	8017efc <__alt_data_end+0xfc017efc>
 8017f40:	98800017 	ldw	r2,0(r19)
 8017f44:	982b883a 	mov	r21,r19
 8017f48:	1027883a 	mov	r19,r2
 8017f4c:	983fb61e 	bne	r19,zero,8017e28 <__alt_data_end+0xfc017e28>
 8017f50:	003fd106 	br	8017e98 <__alt_data_end+0xfc017e98>
 8017f54:	0005883a 	mov	r2,zero
 8017f58:	003ffa06 	br	8017f44 <__alt_data_end+0xfc017f44>

08017f5c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8017f5c:	defffd04 	addi	sp,sp,-12
 8017f60:	df000215 	stw	fp,8(sp)
 8017f64:	df000204 	addi	fp,sp,8
 8017f68:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8017f6c:	0001883a 	nop
 8017f70:	e0bfff17 	ldw	r2,-4(fp)
 8017f74:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8017f78:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8017f7c:	10000226 	beq	r2,zero,8017f88 <_exit+0x2c>
    ALT_SIM_FAIL();
 8017f80:	002af070 	cmpltui	zero,zero,43969
 8017f84:	00000106 	br	8017f8c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8017f88:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8017f8c:	003fff06 	br	8017f8c <__alt_data_end+0xfc017f8c>
